[	{
		"id" : 55180356,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Could these changes be pulled back into a Homebrew/homebrew PR?",
		"created_at" : "2016-03-07T09:44:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1
	},
	{
		"id" : 55180386,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "These changes should be pulled back into a Homebrew/homebrew PR.",
		"created_at" : "2016-03-07T09:44:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1
	},
	{
		"id" : 55180393,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "These changes should be pulled back into a Homebrew/homebrew PR.",
		"created_at" : "2016-03-07T09:44:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1
	},
	{
		"id" : 55180515,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Theses changes are to relocate shell completion script which cannot be pulled back to Homebrew as it may create git conflicting. ",
		"created_at" : "2016-03-07T09:45:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1
	},
	{
		"id" : 58309590,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The updated `share/man/man1/brew.1` is missing in this commit.",
		"created_at" : "2016-04-03T12:36:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 3
	},
	{
		"id" : 58309632,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "```ruby\r\nremote = \"https://github.com/Homebrew/homebrew-core\"\r\nassert_equal \"https://github.com/Homebrew/homebrew-core/blob/master/Formula/git.rb\",\r\n  Homebrew.github_remote_path(remote, \"Formula/git.rb\")\r\nassert_equal \"https://github.com/Homebrew/homebrew-core/blob/master/Formula/git.rb\",\r\n  Homebrew.github_remote_path(\"#{remote}.git\", \"Formula/git.rb\")\r\n```",
		"created_at" : "2016-04-03T12:40:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 3
	},
	{
		"id" : 58309697,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The second link (the modified one) should be pointing to <https://github.com/Homebrew/homebrew-core/blob/master/Formula/aescrypt-packetizer.rb> instead.",
		"created_at" : "2016-04-03T12:46:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 3
	},
	{
		"id" : 58309749,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "“If you want to apply any change on formula, you could open the pull request at […]” This part could probably be worded better.",
		"created_at" : "2016-04-03T12:51:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 3
	},
	{
		"id" : 58309761,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The `-C brew` needs to be changed back to `-C homebrew` as it refers to the directory created via `mkdir` (or the `mkdir` adjusted otherwise).",
		"created_at" : "2016-04-03T12:52:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 3
	},
	{
		"id" : 58309845,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Currently the referenced method is at https://github.com/Homebrew/brew/blob/master/Library/Homebrew/formula.rb#L1230 but that's going to remain a moving target …",
		"created_at" : "2016-04-03T12:58:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 3
	},
	{
		"id" : 58309880,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "@UniqMartin two options: we point to a pinned version that'll become outdated or we point to the file and not the line.",
		"created_at" : "2016-04-03T13:00:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 3
	},
	{
		"id" : 58309938,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Went for the latter.",
		"created_at" : "2016-04-03T13:03:22Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 3
	},
	{
		"id" : 58314406,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "If I understand correctly, this is invoked on a failed search for a formula (at least judging from the referenced issue), so searching in `Homebrew/homebrew-core` seems to make more sense. `Homebrew/brew` is not going to yield any sensible results for searching involving formula names, right?",
		"created_at" : "2016-04-03T17:57:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 8
	},
	{
		"id" : 58314423,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You are right.",
		"created_at" : "2016-04-03T17:59:05Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 8
	},
	{
		"id" : 58363929,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This is not performance-critical and we don't have to implement this part in Bash, so I think it's best to keep this simple. Meaning: let's just make this redirect to `brew help update` instead of `brew --help` and let `brew help <command>` figure out where to get the help text from (so we have a single place that deals with fetching the help text).",
		"created_at" : "2016-04-04T11:50:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58396296,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "Yeah, I guess, but this is a second faster, not even kidding. So it had some benefit. But if we move the help test into the files them selfs, this definitely needs to go.",
		"created_at" : "2016-04-04T15:35:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58457569,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "How does this work with custom commands?",
		"created_at" : "2016-04-04T22:07:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58457630,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "You might want to grep on `^#:` to ensure we don’t match e.g. strings that contain this pattern.",
		"created_at" : "2016-04-04T22:07:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58457733,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "Also it might be better to include “clean” text right away rather than use `tr`/`sed` at display time.",
		"created_at" : "2016-04-04T22:08:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58498827,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I'd personally prefer `#/` but don't feel strongly.",
		"created_at" : "2016-04-05T07:47:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58498997,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I think it'd be good to pull this into `Library/bash/help.sh` and `source` it here.",
		"created_at" : "2016-04-05T07:48:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58499558,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I'm :-1: to handle help flag on bash script. It's a duplication of the ruby version and fails to provide any advantage. In addition, it makes `brew.sh` more complicate than it used to be.\r\n\r\nAt the same time, I'm :-1: to use grep/cut to read help message. feel a little code smell to me.\r\n\r\nWhy cannot we handle all of these in ruby library and store help message using proper string rather than comments.",
		"created_at" : "2016-04-05T07:52:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58501751,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "To be more specifically, we could create `help_<commandname>` methods for each commands just like the way we implement each commands themselves. \r\n\r\nThen we could simply use `Homebrew.send \"help_#{cmd.to_s.tr(\"-\", \"_\").downcase}\"` to get the help message.",
		"created_at" : "2016-04-05T08:11:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58502139,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "@xu-cheng We can pull it into another bash script. We're going to have to deal with providing help for shell command eventually.\r\n\r\n> Why cannot we handle all of these in ruby library and store help message using proper string rather than comments.\r\n\r\nMaybe we can but PRs for that sort of handling still feels like a long way off and we'll still need to handle Bash command help.",
		"created_at" : "2016-04-05T08:14:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58502361,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "> We're going to have to deal with providing help for shell command eventually.\r\n\r\nFor shell command, we could just redirect them by `brew help <command>`. \r\n\r\nSorry but using comment to store string and then grep them out feels code smell to me.",
		"created_at" : "2016-04-05T08:16:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58502570,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I've seen it used on multiple projects in the past, for what that's worth, and it's a good way of using code comments and user comments in the same file to keep things easily in sync.",
		"created_at" : "2016-04-05T08:18:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58530174,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Keeping the documentation at the start of the file preceded by a “special” comment marker has the great benefit of being almost independent of the implementation language. Forcing this into a Ruby string (here doc) won't allow to put the documentation inside `cmd/update.sh`.\r\n\r\nAs for the actual logic that extracts the help text and displays the per-command help, I would prefer it to be implemented in Ruby (in `cmd/help.rb`), even if that comes with a small speed penalty. I think we want to stick with Ruby as our main implementation language and I don't think the benefits of implementing this in Bash are significant enough.",
		"created_at" : "2016-04-05T12:40:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58530562,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "@maxnordlund mentioned he was using `#:` to make RuboCop happy, so I suspect `#/` raises some kind of warning? To me, both look equally readable and are thus fine.",
		"created_at" : "2016-04-05T12:43:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58530762,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "Yeah, you're totally right. This should just pass through to allow external commands to handle help them selfs.",
		"created_at" : "2016-04-05T12:44:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58531016,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "Yes, the `^#:` sounds better, but I think it's going to be very hard to add back the backticks in the markdown. So I'd rather strip them out here, and keep the documentation comment markdown to make the man page easier.",
		"created_at" : "2016-04-05T12:46:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58531265,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "Yes, the rubocop for space after `#` doesn't complain for some special characters, see [leading_comment_space.rb](https://github.com/bbatsov/rubocop/blob/master/lib/rubocop/cop/style/leading_comment_space.rb#L17).",
		"created_at" : "2016-04-05T12:48:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58531282,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "Yes, sounds good.",
		"created_at" : "2016-04-05T12:48:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58531312,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "For bash command, I'm thinking to redirect help flag to `brew help <comand>`.\r\n\r\nIn long term, I think we will move to use `Command` class to handle command, which will provide not only help message, auto manpage(i.e. turn brew.1.md to brew.1.md.erb) but more importantly solving the problem of handling ARGV. ",
		"created_at" : "2016-04-05T12:48:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58531899,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "That's a good question. Currently things like `brew <command> --help` or `brew --help <command>` are handled somewhat transparently by invoking the external command with `--help` as an argument, thus giving it a chance to display its own help text.",
		"created_at" : "2016-04-05T12:52:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58532479,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> Also it might be better to include “clean” text right away rather than use `tr`/`sed` at display time.\r\n\r\nI think the intention here is for this to be Markdown, so that we can still assemble a complete man page by stitching together the individual help texts. But for display via `brew help` we want to remove some of the markup to make it more readable.",
		"created_at" : "2016-04-05T12:56:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58533296,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> For bash command, I'm thinking to redirect help flag to `brew help <command>`.\r\n\r\nThat's totally fine and what I'm suggesting, too. But we still have to put the help text for a command, that is implemented in Bash, somewhere. And I think it would be preferable if it could live in the same file that also implements the command. The language-agnostic solution to do this is to put the documentation into a comment (as all languages relevant to us use/accept `#` as a comment character).",
		"created_at" : "2016-04-05T13:02:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58534493,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Yes, I could understand to put doc along side the implementation. However, by using comment we will face these problems:\r\n* Redundant. It introduces unnecessary IO and string manipulation. \r\n* Fragile. The extract logic won't be simple, hence it introduces possibility for outputting incorrect or bad format result. \r\n* Limit us to add actual comment in the head of file.\r\n* Limit us to dynamic process help string. If we were using ruby string, we could dynamic insert say version number or url based on OS.\r\n* It's not easy to access for other purpose, e.g. generating manpage. ",
		"created_at" : "2016-04-05T13:11:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58534867,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I can't agree that it's fragile at all. This logic is extremely simple and it's reading a single file so the overhead is almost non-existent.\r\n\r\n> It's not easy to access for other purpose, e.g. generating manpage.\r\n\r\nWhile it would be nice to do this: we're a long way off that point.\r\n",
		"created_at" : "2016-04-05T13:14:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58534937,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I think we can just silence this RuboCop warning and use `#/`.",
		"created_at" : "2016-04-05T13:14:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58539566,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "In addition to what Mike said, with what I agree completely:\r\n\r\n> Limit us to add actual comment in the head of file.\r\n\r\nI don't think this is limiting us at all. Normal comments will continue to be `# <comment text>` (notice the space) instead of starting with `#:`, so there's no ambiguity there.\r\n\r\n> Limit us to dynamic process help string. If we were using ruby string, we could dynamic insert say version number or url based on OS.\r\n\r\nWhile this has the danger of creating yet another markup language, there's nothing stopping us from doing some simple replacements on patterns that are very unlikely to appear in the help text, e.g., `@OSX_RELEASE@` gets replaced with `10.11.4` or whatever the current value is.\r\n\r\n> It's not easy to access for other purpose, e.g. generating manpage.\r\n\r\nIt's actually very easy. We already do some processing in `brew man` for conversion to a proper man page and its HTML version. There's nothing stopping us from stitching together the Markdown from all `cmd/*.{rb,sh}` files and adding a header and footer in a preprocessing step.",
		"created_at" : "2016-04-05T13:43:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58546724,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "OK, your guys have persuaded me that this is a good short term solution. But it has at least one shortage in long term, it stops us to support localization(I know no one is working on this because i18n need Ruby 2.0, just want to mention long term impact).",
		"created_at" : "2016-04-05T14:24:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58553828,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "Yeah it’s a good *short-term* solution; long term we’ll probably use a class-based solution.\r\n\r\n> In long term, I think we will move to use `Command` class to handle command, which will provide not only help message, auto manpage(i.e. turn brew.1.md to brew.1.md.erb) but more importantly solving the problem of handling ARGV.\r\n\r\nAlso automatic Bash/Zsh/etc shell completion scripts generation.",
		"created_at" : "2016-04-05T15:01:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58627167,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "I think you can skip this `else` altogether; no need to use `true` here.",
		"created_at" : "2016-04-05T22:50:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58863732,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This should not be there?",
		"created_at" : "2016-04-07T12:40:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58863769,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This should be:\r\n```\r\nif help_text.empty?\r\n  puts ARGV.usage\r\nelse\r\n  puts help_text\r\nend\r\nexit 0\r\n```",
		"created_at" : "2016-04-07T12:41:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58863934,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "sub_ext is not available for Ruby 1.8.",
		"created_at" : "2016-04-07T12:42:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58863961,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "Whoops, yeah I'll fix that right away.",
		"created_at" : "2016-04-07T12:42:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58864011,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Just use `cmd_path.read.split(\"\\n\"). ...`",
		"created_at" : "2016-04-07T12:42:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58864041,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "No, because that would prevent external commands to handle `help` themselves.",
		"created_at" : "2016-04-07T12:43:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58864179,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "Is there any good alternatives?",
		"created_at" : "2016-04-07T12:44:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58864222,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Oh, I see. But I would suggest to use `internal_cmd` as indicator.  ",
		"created_at" : "2016-04-07T12:44:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58864428,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You could just `HOMEBREW_LIBRARY_PATH/\"cmd/#{cmd}.sh\"`",
		"created_at" : "2016-04-07T12:46:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58864743,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "Ah, that sounds good.",
		"created_at" : "2016-04-07T12:48:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58865846,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "OK, didn't know String had that :+1: ",
		"created_at" : "2016-04-07T12:56:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59008376,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I would prefer this to be called `help_for_command` (more descriptive, no unnecessary abbreviations).",
		"created_at" : "2016-04-08T10:48:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59008520,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This can be a bit simplified (reducing code duplication) by exploiting that Ruby's control structures are expressions:\r\n\r\n```ruby\r\ncmd_path = if File.exist?(HOMEBREW_LIBRARY_PATH/\"cmd/#{cmd}.sh\")\r\n  HOMEBREW_LIBRARY_PATH/\"cmd/#{cmd}.sh\"\r\nelsif ARGV.homebrew_developer? && File.exist?(HOMEBREW_LIBRARY_PATH/\"dev-cmd/#{cmd}.sh\")\r\n  HOMEBREW_LIBRARY_PATH/\"dev-cmd/#{cmd}.sh\"\r\nelsif File.exist?(HOMEBREW_LIBRARY_PATH/\"cmd/#{cmd}.rb\")\r\n  HOMEBREW_LIBRARY_PATH/\"cmd/#{cmd}.rb\"\r\nelsif ARGV.homebrew_developer? && File.exist?(HOMEBREW_LIBRARY_PATH/\"dev-cmd/#{cmd}.rb\")\r\n  HOMEBREW_LIBRARY_PATH/\"dev-cmd/#{cmd}.rb\"\r\nend\r\nreturn \"\" if cmd_path.nil?\r\n```",
		"created_at" : "2016-04-08T10:50:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59008765,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You should use internal_cmd as indicator. So I suggest:\r\n```\r\nif cmd.nil?\r\n  puts ARGV.usage\r\n  exit 0\r\nelsif internal_cmd\r\n  require \"cmd/help\"\r\n  puts Homebrew.help_cmd(cmd) || ARGV.usage\r\n  exit 0\r\nend\r\n```",
		"created_at" : "2016-04-08T10:53:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59008868,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I wonder if `.sub(/^  \\* /, \"\")` should be `.sub(/^  \\* /, \"brew \")` instead? Now we're getting, e.g.:\r\n\r\n```\r\n$ brew help cat\r\ncat <formula>:\r\n    Display the source to <formula>.\r\n```\r\n\r\n… and it feels a bit weird that there's no prefixed `brew` (while in the context of the man page it makes sense). One thing I'm not entirely sure about if that will create confusion for commands with aliases, e.g. printing `brew ls, list` instead of just `ls, list`.",
		"created_at" : "2016-04-08T10:54:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59009091,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think it would be a good idea to make the canonical name (`link`) the first and list the aliases (`ln`) afterwards. Otherwise the order in the generated man page will be weird sometimes.",
		"created_at" : "2016-04-08T10:57:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59009110,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think it would be a good idea to make the canonical name (`list`) the first and list the aliases (`ls`) afterwards. Otherwise the order in the generated man page will be weird sometimes.",
		"created_at" : "2016-04-08T10:57:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59009143,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This line and the line above seem to be misplaced and should be removed. Where did they come from?",
		"created_at" : "2016-04-08T10:58:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59009218,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think it would be a good idea to make the canonical name (`uninstall`) the first and list the aliases (`rm`, `remove`) afterwards. Otherwise the order in the generated man page will be weird sometimes. (This is the command where this discrepancy is most obvious.)",
		"created_at" : "2016-04-08T10:59:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59009331,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Not sure where this first block is coming from, but it is duplicating the following two blocks and should probably be removed.",
		"created_at" : "2016-04-08T11:00:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59009555,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "These changes fix a style mismatch, but they don't belong here. Please revert changes to this file. (They are fine as a separate PR.)",
		"created_at" : "2016-04-08T11:02:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59009691,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I wonder where this trailing `require \"keg\"` came from!? (Re-running `brew man` eliminated it for me.)",
		"created_at" : "2016-04-08T11:04:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59009880,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "For now we're only generating one man page, so let's get rid of the variable `page` completely and substitute the literal `\"brew.1\"` in places where it's currently still used.",
		"created_at" : "2016-04-08T11:06:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59009973,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Let's make that more like below and exploit the fact that `SOURCE_PATH` is a `Pathname` object, i.e.:\r\n\r\n```ruby\r\ntarget_md = SOURCE_PATH/\"brew.1.md\"\r\ntarget_md.atomic_write(header + sub_commands + footer)\r\n```",
		"created_at" : "2016-04-08T11:07:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59010199,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "That's a bit of a bike-shedding argument, but I'd prefer the files to be named `brew.1.header.md` and `brew.1.footer.md`. Also let's make better use of `Pathname` (our preferred way when working with paths):\r\n\r\n```ruby\r\nheader = (SOURCE_PATH/\"brew.1.header.md\").read\r\nfooter = (SOURCE_PATH/\"brew.1.footer.md\").read\r\n```",
		"created_at" : "2016-04-08T11:10:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59010931,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "A bunch of things regarding this block:\r\n\r\n- I think we can safely shorten `sub_commands` to `commands`.\r\n- Make better use of the power of `Pathname`:\r\n  - `Pathname.glob(\"#{HOMEBREW_LIBRARY_PATH}/cmd/*.{rb,sh}\")` instead of `Dir[]` (also use `HOMEBREW_LIBRARY_PATH` instead of `HOMEBREW_REPOSITORY` for brevity; more explicit about which files we want to inspect).\r\n  - With this, `IO.read(source_file)` can become `source_file.read`.\r\n- For multi-line blocks we prefer `begin`/`end` instead of curly braces.\r\n- Personally, I think it doesn't hurt to split this block into multiple expressions, even if that means assigning the result multiple times. There's a tad bit too much going on in this expression.\r\n- I think we should be sorting via `sort_by { |source_file| source_file.basename.sub(/\\.(rb|sh)$/, \"\") }`, i.e. disregarding the file extension. Otherwise `tap-info` comes before `tap` and it should be the other way round.",
		"created_at" : "2016-04-08T11:18:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59011232,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Probably a good idea, but requires `help_cmd` to somehow handle the situation that an internal command might not have documentation yet (show the generic help text in this case?).",
		"created_at" : "2016-04-08T11:21:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59011538,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "We could `puts Homebrew.help_cmd(cmd) || ARGV.usage`, i.e. make `help_cmd` return nil when not found.",
		"created_at" : "2016-04-08T11:25:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59026534,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "No, because that only works for Ruby commands.",
		"created_at" : "2016-04-08T13:47:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59028640,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-04-08T14:01:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59028717,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I reckon you may be able to combine it with some of the existing internal command logic, too.",
		"created_at" : "2016-04-08T14:02:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59028772,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "`.lines` does this",
		"created_at" : "2016-04-08T14:02:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59028926,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Could this not just be `map { |line| line.sub(/^#: /)`? Not sure I see what more is needed that that.",
		"created_at" : "2016-04-08T14:03:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59029578,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Could be worth unifying this logic with the one in `brew.rb` somehow.",
		"created_at" : "2016-04-08T14:08:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59030150,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> No, because that only works for Ruby commands.\r\n\r\nYou're right. We want that to work for *all* internal commands (those in `cmd/` and `dev-cmd/`), not just those implemented in Ruby. We still need to handle the case where a command is an internal command, but not (yet) documented. The code shouldn't skip them as those are not expected to handle the forwarded `--help` (and similar) flags, unlike external commands.",
		"created_at" : "2016-04-08T14:11:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59030323,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "would be good to optimise this so the generated output doesn't change at all.",
		"created_at" : "2016-04-08T14:12:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59030432,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I mean `help.rb` but it probably wants to have some utility class instead.",
		"created_at" : "2016-04-08T14:13:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59030587,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think it's nicer without the bullet points and the big number of backticks that we need to get the formatting of the man page right definitely feels off on the CLI.",
		"created_at" : "2016-04-08T14:14:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59030765,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Ok. Might be nice to have one set of \"strips\" per line and add comments explaining why on each one.",
		"created_at" : "2016-04-08T14:15:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59115170,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This currently creates a regression for undocumented internal commands, e.g., `brew help --cache` is treated as if `--cache` was an external command, effectively resulting in `brew --cache help`. I think this can be addressed by tweaking the output of `help_for_command` and how it affects what happens here:\r\n\r\n- Non-empty string: Documented internal command; show help text and exit.\r\n- Empty string: Undocumented internal command; show something like `No help available for <command>.` followed by generic help and exit.\r\n- `nil`: External command; continue execution and let external command handle the help flag.",
		"created_at" : "2016-04-09T13:23:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59115177,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "That's a bit nitpicking, but I'd like to see this unrelated change completely reverted.",
		"created_at" : "2016-04-09T13:24:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59135550,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "This is no longer true. Only `SHA256` is printed now.",
		"created_at" : "2016-04-10T15:04:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59138928,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "Nice, this is from the old man page, good that it gets an look through.",
		"created_at" : "2016-04-10T18:46:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59139162,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Should be fixed there as well, really. I can do it but don't know if you'd prefer to just wrap that change into this PR?",
		"created_at" : "2016-04-10T19:03:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 59140101,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "It should be picked up by the `brew man` command, but I forgot to run it after this fix. Have done so now.\r\n\r\nIf there's anything else I guess it's easiest if you just fix it in master.",
		"created_at" : "2016-04-10T19:52:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 10
	},
	{
		"id" : 58342725,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Personally I dislike `unless`/`else` as I find it hard to parse. Feel free to ignore me though: not your code.",
		"created_at" : "2016-04-04T08:33:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 15
	},
	{
		"id" : 58342827,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I think it may be worth using the system call. I forget why but I vaguely remember `FileUtils.ln_sf` having weird failure conditions hence the `system` use. Yes, that should be a comment 😛 ",
		"created_at" : "2016-04-04T08:34:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 15
	},
	{
		"id" : 58640215,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Agreed, but the `else` you're seeing belongs to the `if` following the `unless`. This `unless` block has no `else` branch. :wink:",
		"created_at" : "2016-04-06T01:26:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 15
	},
	{
		"id" : 58363234,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I would call `expected_remote` and `actual_remote`",
		"created_at" : "2016-04-04T11:42:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58363289,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "why this is necessary?",
		"created_at" : "2016-04-04T11:43:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58363386,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You should use a different name for this variable.",
		"created_at" : "2016-04-04T11:44:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58363394,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "otherwise get nil when doing the compare below `raise TapRemoteMismatchError.new(name, @remote, remote) unless @remote == remote`",
		"created_at" : "2016-04-04T11:44:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58363433,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "yes that's better.",
		"created_at" : "2016-04-04T11:45:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58363485,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You should use a different name for this variable, like requested_remote or something.",
		"created_at" : "2016-04-04T11:45:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58364561,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Use `opoo` here? ",
		"created_at" : "2016-04-04T11:57:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58364648,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "I think @apjanke wanted this to be non-warning?",
		"created_at" : "2016-04-04T11:58:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58364713,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "opoo will show it as warning but not change the exit code. I think this is what we want.",
		"created_at" : "2016-04-04T11:59:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58364835,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Should it be default to false.",
		"created_at" : "2016-04-04T12:00:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58364925,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "*is*?",
		"created_at" : "2016-04-04T12:01:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58451809,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah, I think regular output and not a warning makes sense for idempotent operations. If you're using things right, you should be able to go through a process without getting warnings. Calling `brew tap --full foo` means to make sure that the `foo` tap is installed and is not shallow. If that's already the case, then the \"already tapped/unshallow\" output is just confirming things are in the state the user requested. There's no oddness they need to investigate, and there's no different actions they should have done, and there's nothing about the state change from shallow to unshallow that the user probably cares about: they just want it unshallow, regardless of its initial state.\r\n\r\nI don't think there even is a way to avoid the warning using just `brew` commands, as I don't see a `brew tap` variant that will output whether or not a tap is unshallow. Seems like warnings should be for things that indicate potential problems and require user attention. This case doesn't. It's like an `rsync` operation: if all the files are already at the destination, it doesn't copy anything, but it doesn't warn about anything.\r\n",
		"created_at" : "2016-04-04T21:26:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58451981,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "We don't use \"is\" in the existing already-tapped or already-installed messages. This is consistent.\r\n\r\n```\r\n$ brew tap homebrew/dupes\r\nWarning: Tap homebrew/dupes already tapped.\r\n$ brew install gnu-time\r\nWarning: gnu-time-1.7 already installed\r\n```",
		"created_at" : "2016-04-04T21:27:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58479611,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "\"already _a_ full clone\" scans better to me",
		"created_at" : "2016-04-05T02:36:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58498794,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Me too.",
		"created_at" : "2016-04-05T07:46:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58517673,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I don't think this is needed.",
		"created_at" : "2016-04-05T10:46:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58517726,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Use `remote` instead of `@remote`",
		"created_at" : "2016-04-05T10:46:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58520626,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "If it's not a warning, I would prefer to not showing anything at all.",
		"created_at" : "2016-04-05T11:14:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 17
	},
	{
		"id" : 58496729,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Seems like you could just run `find` once and strip the results each time you need/don't. It's also worth noting `sed -E` will behave differently on Linux, I believe (if you care)",
		"created_at" : "2016-04-05T07:26:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 23
	},
	{
		"id" : 58554436,
		"user" : {
			"login" : "robsonpeixoto"
		},
		"body" : "@mikemcquaid I have tested with `gnu-sed` and work well. ",
		"created_at" : "2016-04-05T15:04:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 23
	},
	{
		"id" : 58557476,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Thanks!",
		"created_at" : "2016-04-05T15:19:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 23
	},
	{
		"id" : 58562279,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Do you mind adding quotes to those assignments, i.e. `=\"$(<stuff>)\"` instead of `=$(<stuff>)`? I'd like to have them for consistency with most of the other Shell code we have (looking at `brew.sh` right now).",
		"created_at" : "2016-04-05T15:43:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 23
	},
	{
		"id" : 58564143,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "I don't mind; do they do something?",
		"created_at" : "2016-04-05T15:53:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 23
	},
	{
		"id" : 58567598,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "In theory they keep the output of the command together as a single argument, in practice Bash does some special casing for `local` and probably a few others. Always quoting when things are supposed to remain a single unit is easier to read in my opinion, because you don't have to remember those special cases all the time. In most other contexts, the result would be different without quoting, e.g.:\r\n\r\n```\r\nprintf \"[%s]\\n\" x=$(ls)\r\nprintf \"[%s]\\n\" x=\"$(ls)\"\r\n```",
		"created_at" : "2016-04-05T16:13:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 23
	},
	{
		"id" : 58506756,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "`/[]`->`/[^` ?",
		"created_at" : "2016-04-05T09:17:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 24
	},
	{
		"id" : 58535528,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`staus` -> `stays`?",
		"created_at" : "2016-04-05T13:18:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 24
	},
	{
		"id" : 58536370,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Isn't that always going to return 0? Shouldn't this be `[0, output.length - BYTES_IN_1_MEGABYTE].max`? Does that already account for the case that for a typical UTF-8 string `bytesize > length` and does it make sure not to cut into the middle of some UTF-8 byte sequence or a single code unit?\r\n\r\nAnd more Unicode complications: What if that cuts into the middle of some grapheme cluster? It won't make the UTF-8 invalid, but it will disturb the output at the cut-off point. (Probably details we shouldn't care about.)",
		"created_at" : "2016-04-05T13:24:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 24
	},
	{
		"id" : 58541487,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "No, because the code is calculating the slice start and end points in bytes, but the arguments to `slice()` are characters. My adjustment here is to account for that bytesize vs character differences and prevent overruns.\r\n\r\nAnd the fact that `slice()` takes characters prevents it from cutting in to the middle of a UTF-8 byte sequence. (It doesn't account for surrogate pairs, though. That's an edge case, even in terms of validity, and I doubt we'd ever see it.)\r\n\r\nGrapheme clusters: yeah, but we're already truncating at an arbitrary point; it's probably going to be in the middle of a word, so the stuff right around the cutoff is probably going to be junk to a human anyway.",
		"created_at" : "2016-04-05T13:54:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 24
	},
	{
		"id" : 58544850,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Oh, wait. I misread you and focused on the UTF-8 stuff. You're right, that'll always be 0. Adjusting...",
		"created_at" : "2016-04-05T14:14:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 24
	},
	{
		"id" : 58496910,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👎 on a new vendored dependency for a single audit method.",
		"created_at" : "2016-04-05T07:28:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 25
	},
	{
		"id" : 58496940,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "`next unless` saves a little code here.",
		"created_at" : "2016-04-05T07:29:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 25
	},
	{
		"id" : 58544417,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "It's nice, though, isn't it? :)\r\n\r\nDo you see another way to achieve this?",
		"created_at" : "2016-04-05T14:11:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 25
	},
	{
		"id" : 58545703,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "It's pretty neat but it should be possible to extract the specific functionality into a utility method rather than include e.g. JRuby support and all that.",
		"created_at" : "2016-04-05T14:19:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 25
	},
	{
		"id" : 58561032,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm afraid my previous comment about `length != bytesize` (unless we have pure ASCII) was lost. Let's assume we have a string `x` with `x.length == 1_500_000` and `x.bytesize == 1_800_000` (assuming 20% of code units need two bytes in UTF-8 encoding). If I'm reading the code correctly, `slice` will operate on characters, start at character 451,424, and copy 1,048,576 characters. Still assuming the overhead from multi-byte code units, this will result in 1,258,291 bytes of output (significantly more than the desired 1 MB).\r\n\r\nAdmittedly, all of that is somewhat constructed and 20% is a big percentage given the output we typically capture. Still could be relevant depending on how sharp this 1 MB limit is.\r\n\r\nAn easy workaround could be: Truncate first while the encoding is still `BINARY` and convert to UTF-8 (with filtering/fixing the output) afterwards.",
		"created_at" : "2016-04-05T15:36:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58570153,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Ah. I think I see what you're saying now: it's about the resulting data size, not just out-of-bounds indexes. Yes, you can end up with significantly more than 1 MB of data, especially if you have CJK text or the like in your data.\r\n\r\nYeah, truncating the BINARY before transcoding would let you be exact. (Or, forcing the UTF-8 string back to BINARY, truncating, and then re-transcoding, to keep the control flow the same.) Probably simple. Do we care enough to do this now?\r\n\r\nAnyone know where the 1 MB limit comes from, anyway?",
		"created_at" : "2016-04-05T16:28:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58570321,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "(That's why I changed the message from `1MB` to `~1MB`, to indicate the size was only approximate.)",
		"created_at" : "2016-04-05T16:29:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58570619,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Know any formulae whose output is long enough to trigger the truncation, but still compile pretty quickly?",
		"created_at" : "2016-04-05T16:31:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58573216,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I don't have answers for most of the questions. Just wanted to make you ware of a potential issue.\r\n\r\n> Do we care enough to do this now?\r\n\r\nProbably not …",
		"created_at" : "2016-04-05T16:46:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58574273,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Thanks. I was aware of it (mentioned it in the original issue post), just didn't think it was worth taking care of. But the \"truncate in BINARY and transcode\" fix you suggested is pretty straightforward, so I'm going to go ahead and try it here.",
		"created_at" : "2016-04-05T16:53:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58576030,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> I was aware of it (mentioned it in the original issue post), just didn't think it was worth taking care of.\r\n\r\nSorry! I think I missed this somehow.",
		"created_at" : "2016-04-05T17:03:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58577994,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Cool. Anyway, I altered it to use your approach. Got long enough I split it out to a separate `sanitize_for_xml` method lower down in the file. Look about right to you? I'm going to go looking for a long-output formula to test it on.",
		"created_at" : "2016-04-05T17:16:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58579015,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This should be assigning back to `output` (not `binary_output`) I guess …",
		"created_at" : "2016-04-05T17:22:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58579260,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You could make that `return \"\" if output.empty?` and reduce indentation in the remainder of the method.",
		"created_at" : "2016-04-05T17:24:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58579720,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fixed; thanks.",
		"created_at" : "2016-04-05T17:26:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58580028,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I don't know if that's Homebrew's house style? I personally like to take early returns to keep indentation/nesting low too, but most of the `brew` code base doesn't seem to do that. Is there some guidance on that?",
		"created_at" : "2016-04-05T17:28:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58616611,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "This is the nittiest nitpick, but 1.9 was the version that introduced encodings - 1.8 is the one without.",
		"created_at" : "2016-04-05T21:23:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58616816,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "`\\u` escapes don't exist in 1.8, so `\\uFFFE` is coming out as the literal text `uFFFE`.",
		"created_at" : "2016-04-05T21:24:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58616860,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Arg, ignore this, I completely ignored the conditional here.",
		"created_at" : "2016-04-05T21:25:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58620207,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yes, sorry if my comment here isn't clear: I mean that while 1.9 introduced encodings and `\\u` escapes, only 2.0 introduced the `\\u{...}` escapes that allow more than 4 digits for representing values U+10000 and above. So the original pattern `/[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\u{10000}-\\u{10FFFF}]/` blows up in 1.9. I inverted the pattern so it could be written with just the `\\uXXXX` escapes and not `\\u{...}`, so it would work in 1.9, too.\r\n\r\nMaybe it could be worded better?",
		"created_at" : "2016-04-05T21:55:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58664806,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "> Anyone know where the 1 MB limit comes from, anyway?\r\n\r\nEither Jenkins and/or Travis CI. I'd be happy with changing it to anything that's \"definitely under 1MB\" even if that assumes all characters are double-width unicode, for instance.",
		"created_at" : "2016-04-06T07:56:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 27
	},
	{
		"id" : 58599632,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Is this change a good opportunity to add a comment that mentions where those paths come from? I suspect there is an increasing number of prospective contributors who have never worked with Fink or MacPorts (or haven't even heard of them).",
		"created_at" : "2016-04-05T19:22:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 32
	},
	{
		"id" : 58600002,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Sure, I'll add a comment in the `keep?` version!",
		"created_at" : "2016-04-05T19:25:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 32
	},
	{
		"id" : 58661857,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Seems pretty arbitrary for this to be the first?",
		"created_at" : "2016-04-06T07:27:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 33
	},
	{
		"id" : 58661892,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Sorry, I see this is pull up from below.",
		"created_at" : "2016-04-06T07:27:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 33
	},
	{
		"id" : 58663935,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "`&>/dev/null`?",
		"created_at" : "2016-04-06T07:48:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 34
	},
	{
		"id" : 58663988,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Also `--output /dev/null` and `--silent` are already handling some of this but I'm :ok: with the duplication if you are.",
		"created_at" : "2016-04-06T07:48:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 34
	},
	{
		"id" : 58667585,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`&> /dev/null` – nice! I wasn't aware that there's a shortcut for `> /dev/null 2>&1`.\r\n\r\nI was hoping that `--output /dev/null` and `--silent` have a similar effect, but at least on my machine it doesn't cause the `curl` process to detach from `stdout`, thus blocking the parent process in the described circumstances.",
		"created_at" : "2016-04-06T08:19:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 34
	},
	{
		"id" : 58668057,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Ah, very interesting!",
		"created_at" : "2016-04-06T08:23:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 34
	},
	{
		"id" : 58745684,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Are these links intentionally missing `.git`?",
		"created_at" : "2016-04-06T17:19:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 36
	},
	{
		"id" : 58861727,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "We're just being inconsistent I guess. :wink: `brew tap` always omits the `.git`, the migration from `legacy-homebrew` to `brew` also uses `https://github.com/Homebrew/brew.git` while our install script uses `https://github.com/Homebrew/brew` (so that's one way to differentiate new users from those that have been migrated).",
		"created_at" : "2016-04-07T12:23:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 36
	},
	{
		"id" : 59033453,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Yeh, the `.git` isn't needed so I personally vote to just drop it in all cases.",
		"created_at" : "2016-04-08T14:33:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 36
	},
	{
		"id" : 59970091,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Maybe call this `std_npm_install_args` and exclude `npm install`?",
		"created_at" : "2016-04-16T16:36:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 59970092,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "May be worth checking if it already exists to avoid recreating unnecessarily.",
		"created_at" : "2016-04-16T16:36:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60113959,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "@UniqMartin may have feelings here. I think I got told off trying to do something similar to this with `include?` last time 😄. (\"Told off\" was tongue-in-cheek if that doesn't translate well across text!)",
		"created_at" : "2016-04-18T18:53:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60114830,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I'd be possibly tempted to use:\r\n\r\n```ruby\r\nnpmrc = Pathname.new(\"#{ENV[\"HOME\"]}/.npmrc\")\r\n```\r\nHere, in case we ever decide to switch paths from `.brew_home` in future. It's unlikely, but not impossible.",
		"created_at" : "2016-04-18T18:58:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60115410,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "This isn't actually a `superenv` thing. We override `HOME` in `formula` which means it happens regardless of env or sandbox status.",
		"created_at" : "2016-04-18T19:02:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60124803,
		"user" : {
			"login" : "chrmoritz"
		},
		"body" : "What would be the preferred way than? (A simple or would not fit on one line.)",
		"created_at" : "2016-04-18T20:06:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60126256,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Possibly duplicating the existing `java_cache` block for `npm_cache` as well. Let's see what Martin has to say though, it's possible my memory is failing me, it happens alarmingly often.",
		"created_at" : "2016-04-18T20:15:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60144573,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm fine with the proposed version. Maybe now or when this array gets even longer, we might want to move that list of well-known cache directory names into a separate variable (or constant) with an intention-revealing name. But no strong feelings here.",
		"created_at" : "2016-04-18T22:20:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60145227,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "World's smallest nit, I suspect if we don't use double quotes around this element Rubocop will complain about it in text editors given our `StringLiterals` setting.",
		"created_at" : "2016-04-18T22:25:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60145275,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "To be clear: `'.npmignore', 'a'` - Those elements.",
		"created_at" : "2016-04-18T22:25:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60145381,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Alright, cool. Thanks for the review!",
		"created_at" : "2016-04-18T22:26:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60146285,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`opt_libexec` returns a `Pathname` instance. Thus, a slightly more readable version of this line would be:\r\n\r\n```ruby\r\nENV.prepend_path \"PATH\", Formula[\"node\"].opt_libexec/\"npm/bin\"\r\n```",
		"created_at" : "2016-04-18T22:34:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60147343,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Are we certain that we're in the right directory when opening `.npmignore` with a relative path? Also, if we can be sure this file already exists, using [`Pathname#append_lines`](https://github.com/Homebrew/brew/blob/da34fba151ee33c1a2e14ab21ee0dc4ea451cc0f/Library/Homebrew/extend/pathname.rb#L145-L149) might be a neater way to do what is being done here, e.g. `Pathname.new(\".npmignore\").append_lines(\".brew_home\")`.\r\n\r\nJust some thoughts, feel free to ignore if not applicable. (I've only skimmed the discussion in this long-ish PR.)",
		"created_at" : "2016-04-18T22:44:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60155846,
		"user" : {
			"login" : "chrmoritz"
		},
		"body" : "I will changed the quotes (silly copy and paste mistake).\r\n\r\n@UniqMartin The npm command wouldn't work if we aren't in the right directory, so I think we can assume this here.\r\nThere is also no guarantee that a `.npmignore` file already exists. I'm relaying on the 'append if the file exists and create a new one if not'-functionality here.",
		"created_at" : "2016-04-19T00:10:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60157518,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "@chrmoritz Thanks for the comment! Then ignore my suggestions and just fix the quotes. :smiley_cat: ",
		"created_at" : "2016-04-19T00:29:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60359521,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "So if I call `std_npm_install_args` multiple times, I will end up with duplicated `Formula[\"node\"].opt_libexec/\"npm/bin\"` in `PATH`, as well as `.npmignore` file duplicated entries.\r\n\r\nUltimately, it feels a little weird to have  `std_npm_install_args` and `local_npm_install_args` which supports to just return an argument list, to change any file system.\r\n\r\nMy suggest solutions are:\r\n * (a) create a separate method to setup environment. and call this method explicitly in formula.\r\n * (b) Or, make sure setup is only run once. ",
		"created_at" : "2016-04-20T07:16:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60446421,
		"user" : {
			"login" : "chrmoritz"
		},
		"body" : "There should be no situation in which you have to call `std_npm_install_args` multiple times, especially not inside the same node module.\r\n\r\nThrough there might be a use case (currently not used in core) where calling `local_npm_install_args` multiple times might be needed: A formula which consists of multiple node modules and other stuff. In this case we would end up indeed with duplications in $PATH. I agree that we should guard the complete method and only the `.npmrc` creation against running multiple times.\r\n\r\nAlso the method names might not be the best describing names. Maybe something like `local_npm_install_config_and_args` would be better, through this would be already quite long for a method name.",
		"created_at" : "2016-04-20T16:54:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60541104,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "> I agree that we should guard the complete method and only the .npmrc creation against running multiple times.\r\n\r\nThis seems fine to me 👍 ",
		"created_at" : "2016-04-21T08:13:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60767772,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Just to check here, is there any chance a project ships an `.npmrc` in the tarball, which we then place in the `buildpath` and consequently this `return` is invoked before the `$PATH` is successfully modified below?",
		"created_at" : "2016-04-22T16:39:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60767968,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "You're going to want to defenestrate me by the end of this review I'm sure, but it should be GitHub rather than `github`.",
		"created_at" : "2016-04-22T16:40:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60768196,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "`CoffeeScript` should probably be one word rather than two as well.",
		"created_at" : "2016-04-22T16:42:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60768332,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Can you peg the formulae references to a specific commit? That way if `kibana` or anything else stops using `node` in future the reference remains likely to be valid still.",
		"created_at" : "2016-04-22T16:43:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60768513,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "We prefer `formulae` over `formulas`.",
		"created_at" : "2016-04-22T16:45:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60768852,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "It'd be nice to be a little more specific on our hostage-taking of `$HOME` so there's no implication it's a broad thing. Maybe something like:\r\n\r\n```\r\n(Caused by Homebrew's redirection of `$HOME` during the build and test process)\r\n```\r\nor such?",
		"created_at" : "2016-04-22T16:47:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60769033,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "`test do`. We haven't used `def test` for a fair chunk of time 😉.",
		"created_at" : "2016-04-22T16:49:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60771976,
		"user" : {
			"login" : "chrmoritz"
		},
		"body" : "You mean how likely it is that a project ships a `.npmrc` file inside a `.brew_home` folder in their tarball? I would say quite unlikely and even than we would probably run into other issues with `.brew_home` too.\r\n\r\nBTW: It's quite funny how a fix for a unlikely edge case of having to install more than one node module per formula has lead to a discussion about an even less likely edge case here.",
		"created_at" : "2016-04-22T17:12:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 60772623,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Oh, heh. This is what happens when I'm having a fairly long day; my brain ceases to function on anything above a \"Keep Dom Alive\" capacity. I briefly forgot we set it to `.brew_home` rather than just the `buildpath`. ` ¯\\_(ツ)_/¯`",
		"created_at" : "2016-04-22T17:17:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 37
	},
	{
		"id" : 59114341,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think it would be a bit cleaner to package this as a function like so:\r\n\r\n```shell\r\nupdate-preinstall() {\r\n  [[ -n \"$HOMEBREW_AUTO_UPDATE\" ]] || return\r\n\r\n  if [[ \"$HOMEBREW_COMMAND\" = install || \"$HOMEBREW_COMMAND\" = upgrade ]]\r\n  then\r\n    # Hide shellcheck complaint:\r\n    # shellcheck source=/dev/null\r\n    source \"$HOMEBREW_LIBRARY/Homebrew/cmd/update.sh\"\r\n    homebrew-update --preinstall\r\n  fi\r\n}\r\n```\r\n\r\nThen use that further down below, e.g.:\r\n\r\n```shell\r\n{ update-preinstall; \"homebrew-$HOMEBREW_COMMAND\" \"$@\"; exit $?; }\r\n```\r\n\r\nTo me that not only looks cleaner, but also clearer. It also avoids an unquoted variable expansion.",
		"created_at" : "2016-04-09T12:06:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 50
	},
	{
		"id" : 59114409,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "@UniqMartin Sounds good. Does that still avoid the \"file updated under it\" issue, yeh?",
		"created_at" : "2016-04-09T12:13:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 50
	},
	{
		"id" : 59114582,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> Does that still avoid the \"file updated under it\" issue, yeh?\r\n\r\nYes, it does. The function has already been completely parsed by the time it is executed.",
		"created_at" : "2016-04-09T12:32:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 50
	},
	{
		"id" : 59113342,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "A trailing slash is not necessary.",
		"created_at" : "2016-04-09T10:14:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 59113362,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You should use `tap = Tap.fetch(\"homebrew\", \"boneyard\"); tap.path` for this kind of thing.",
		"created_at" : "2016-04-09T10:17:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 59113374,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think for all dry-run blocks it would be useful to print the directory (normally some repository) the following commands would be executed in. Could be a text header using `oh1` saying something like `In <directory>:` or just another `ohai` outputting `cd <directory>`.",
		"created_at" : "2016-04-09T10:18:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 59113392,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Won't that possibly raise the exception since the rescue is in the cmd?",
		"created_at" : "2016-04-09T10:21:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 59113412,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This should probably be `formula.tap.core_tap?` and not rely on string matching.",
		"created_at" : "2016-04-09T10:22:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 59113470,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`HOMEBREW_LIBRARY/\"Taps/homebrew/homebrew-boneyard\"` is used several times. Might make sense to put it into a constant (`BONEYARD_PATH`?) at the beginning of the command to make the rest of the code more readable.",
		"created_at" : "2016-04-09T10:28:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 59113475,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`HOMEBREW_LIBRARY/\"Taps/homebrew/homebrew-core/tap_migrations.json\"` is used several times. Might make sense to put it into a constant (`TAP_MIGRATIONS_PATH`?) at the beginning of the command to make the rest of the code more readable.",
		"created_at" : "2016-04-09T10:29:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 59113484,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "What rescue?",
		"created_at" : "2016-04-09T10:30:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 59113491,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`hub` is a requirement anyway; it makes sense to me to install it at the very beginning before starting to manipulate various repositories. If installing `hub` fails for some reason, the repositories won't be left in an intermediate state.",
		"created_at" : "2016-04-09T10:32:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 59113496,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You should update tap_migrations regardless whether it's core tap.",
		"created_at" : "2016-04-09T10:32:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 59113568,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It should be `tap.path`",
		"created_at" : "2016-04-09T10:38:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 59113686,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cmd/tap.rb#L20-L24",
		"created_at" : "2016-04-09T10:54:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 59506733,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Might use `puts` instead of `ohai` for the dry run output. `ohai` is more of a header. And `ohai` truncates at the terminal's edge instead of wrapping. For debugging output like this you might want to make sure the whole output is available for examination, and without the `==>` prefix.",
		"created_at" : "2016-04-13T07:56:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 59507217,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Actually, this dry-run is a lot of duplicated code to keep in sync. Could it just define local functions like `x_safe_system` and `x_cp` that either do their action or emit a description instead, depending on whether `--dry-run` is on? Easier to read, and then you'd be more sure the dry run reflected what would happen in the live run.",
		"created_at" : "2016-04-13T08:00:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 59508368,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "For `x_cp`, you could just `include FileUtils::DryRun`",
		"created_at" : "2016-04-13T08:11:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66246070,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Quite a detail, but when invoking `brew` via `*system` you actually want to use `HOMEBREW_BREW_FILE` for the unlikely case that `brew` isn't in `PATH` and the user is invoking via something like `~/.homebrew/bin/brew`. (Of course also applies to all other cases further down.)",
		"created_at" : "2016-06-08T12:33:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66246501,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "I wonder if we should have a convenience method `brew` that does that, like `cabal_install`",
		"created_at" : "2016-06-08T12:36:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66246592,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You can simplify this to `unless remote` or `if remote.nil?`. If there is a match, it is guaranteed to be non-empty thanks to the `+` in the regular expression. If there is no match, `remote` will always be `nil`.",
		"created_at" : "2016-06-08T12:37:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66246614,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You can simplify this to `unless remote` or `if remote.nil?`. If there is a match, it is guaranteed to be non-empty thanks to the `+` in the regular expression. If there is no match, `remote` will always be `nil`.",
		"created_at" : "2016-06-08T12:37:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66246945,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I don't think we use it frequently enough to warrant that yet. And then there's also the question whether we should provide `brew`, `quiet_brew`, `safe_brew`, `popen_read_brew`, and all other variants that would be needed …",
		"created_at" : "2016-06-08T12:39:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66248336,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can we tweak this message to be better aligned with what `brew boneyard` currently produces, i.e. `\"#{formula.name}: migrate to boneyard\"`?",
		"created_at" : "2016-06-08T12:49:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66248448,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can we tweak this message to be better aligned with what `brew boneyard` currently produces, i.e. `\"#{formula.name}: migrate from #{formula.tap.repo}\"`?",
		"created_at" : "2016-06-08T12:49:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66260526,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Any reason why you're using the block form here? I suppose `inreplace <file>, <pattern>, <replacement>` should work equally well here.",
		"created_at" : "2016-06-08T14:01:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66261627,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "sub! seemed more appropriate than gsub!",
		"created_at" : "2016-06-08T14:07:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66262326,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You don't want to kill all `bottle do` blocks? Just the first one? :wink:",
		"created_at" : "2016-06-08T14:11:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66264898,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Yes, now you understand.",
		"created_at" : "2016-06-08T14:23:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66265188,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Do you prefer\r\ninreplace \"#{formula.name}.rb\", /  bottle do.+?end\\n\\n/m, \"\" if bottle_block\r\n(82 characters, ug)\r\nor\r\n```\r\ninreplace \"#{formula.name}.rb\", /  bottle do.+?end\\n\\n/m, \"\"\r\n```",
		"created_at" : "2016-06-08T14:25:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66265683,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Or we can just be completely reckless and do\r\n```\r\ninreplace \"#{formula.name}.rb\", /bottle do.+?end\\n\\n/m, \"\" if bottle_block\r\n```",
		"created_at" : "2016-06-08T14:27:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66267511,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "If you want to change it, the latter. But I wasn't overly serious with my comment.",
		"created_at" : "2016-06-08T14:35:56Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 53
	},
	{
		"id" : 66269361,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Actually has to be\r\n```\r\nif bottle_block\r\n  Utils::Inreplace.inreplace \"#{formula.name}.rb\", /  bottle do.+?end\\n\\n/m, \"\"\r\nend\r\n```\r\nwhich ends up being 85 characters, or perhaps I should just `include Utils::Inreplace` at the top to keep it pretty.",
		"created_at" : "2016-06-08T14:44:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66272102,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It's only used once. Doesn't sound like a candidate for `include` just yet. But you could simply wrap the arguments like we often do in formulae. Or put `\"#{formula.name}.rb\"` in a new variable like `formula_file`, as this string interpolation is done like a million times. :wink:",
		"created_at" : "2016-06-08T14:57:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66272860,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Fair enough, as I suppose we're now approaching the point where http://xkcd.com/1691/ no longer applies.",
		"created_at" : "2016-06-08T15:01:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66280339,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Should I instead make this\r\n```\r\nTap.fetch(\"homebrew\", \"boneyard\").install unless Tap.fetch(\"homebrew\", \"boneyard\").installed?\r\n```",
		"created_at" : "2016-06-08T15:39:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66281669,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Keep it as-is. It's simpler and even [`brew.rb` does it](https://github.com/Homebrew/brew/blob/2ca6dbbe9d94b5d295f46f7a1d3a12ade3aa3f08/Library/brew.rb#L112-L113).",
		"created_at" : "2016-06-08T15:44:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66281869,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd stick with just `brew` in the output in dry-run mode. Looks cleaner to me.",
		"created_at" : "2016-06-08T15:46:00Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 53
	},
	{
		"id" : 66281977,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "OK. Also, I just added `boneyard_tap = Tap.fetch(\"homebrew\", \"boneyard\")` at the top and replaced all other instances.",
		"created_at" : "2016-06-08T15:46:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66282389,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Just in case this was lost in a refresh of the PR: I'd stick with just `brew` in the output in dry-run mode. Looks cleaner to me. (Same for similar output in dry-run mode further below.)",
		"created_at" : "2016-06-08T15:48:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66282517,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "ah ok, wasn't sure which you preferred",
		"created_at" : "2016-06-08T15:49:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66283700,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think the goal of the dry-run mode is to be human-readable and not super-precise about the actual commands or paths being used.",
		"created_at" : "2016-06-08T15:54:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66284761,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "This seems a bit crowded. Any suggestions on making it less ridiculous looking?",
		"created_at" : "2016-06-08T16:00:12Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 53
	},
	{
		"id" : 66290194,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Save the message in a variable and then use it in the `popen_read` call? Also feel free to change `first_pull_request_url` to something nicer, I wasn't really suggesting to use this name literally.",
		"created_at" : "2016-06-08T16:29:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66292427,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "How about\r\n```\r\n      pr_message = <<-EOS.undent\r\n        #{formula.name}: migrate to boneyard\r\n\r\n        Created with `brew boneyard-formula-pr`\r\n      EOS\r\n      pr_url = Utils.popen_read(\"hub\", \"pull-request\", \"-m\", pr_message).chomp\r\n```",
		"created_at" : "2016-06-08T16:43:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66296001,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : ":+1:",
		"created_at" : "2016-06-08T17:03:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66302304,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This doesn't print a target directory when `homebrew/boneyard` isn't tapped yet.",
		"created_at" : "2016-06-08T17:37:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66302792,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This would be more readable if it used relative paths instead of absolute paths (but in this case it might be undesirable to `cd` to `formula.tap.formula_dir` and `formula.tap.path` might be more appropriate).",
		"created_at" : "2016-06-08T17:40:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66302965,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This doesn't print anything after the `cd` in dry-run mode and when `homebrew/boneyard` hasn't been tapped yet.",
		"created_at" : "2016-06-08T17:41:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66303118,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "how about `formula.tap.path.parent/boneyard_tap.name`",
		"created_at" : "2016-06-08T17:42:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66303159,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This aborts with an error because `boneyard_tap.formula_dir` is `nil` in dry-run mode and when `homebrew/boneyard` hasn't been tapped yet.",
		"created_at" : "2016-06-08T17:42:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66303783,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The problem is that `boneyard_tap.formula_dir` is `nil`, because `boneyard_tap.path` doesn't even exist at this point.",
		"created_at" : "2016-06-08T17:45:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66304029,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Right, I know.\r\n\r\nAlso, `formula.tap.path.parent/boneyard_tap.name` is wrong since it's `homebrew-boneyard` not `homebrew/boneyard` for the path.",
		"created_at" : "2016-06-08T17:46:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66304969,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "This works `formula.tap.path.parent/Tap.fetch(\"homebrew\",\"boneyard\").name.sub(\"/\",\"-\")`\r\n\r\nOf course, if the formulae in boneyard are ever moved to a `Formula` subdirectory, that will be a bug.\r\n",
		"created_at" : "2016-06-08T17:51:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 66306704,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think you're making things too complicated. `boneyard_tap.path` returns the path you're trying to construct here (even if not tapped), it's just `Tap#formula_dir` that requires the tap to be physically present. You can adjust this once formulae in `homebrew/boneyard` actually move to `Formula/`.\r\n\r\n> This works `formula.tap.path.parent/boneyard_tap.name.sub(\"/\",\"-\")`\r\n\r\nNot a concern for our use case, but this only works because the prefix `homebrew-` happens to match `Tap#user` here. For something like `uniqmartin/tools` it would be totally wrong and print `…/Taps/homebrew/uniqmartin-tools` instead of `…/Taps/uniqmartin/homebrew-tools`.",
		"created_at" : "2016-06-08T18:00:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 53
	},
	{
		"id" : 59115722,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "We talk about only logging official commands, right?",
		"created_at" : "2016-04-09T14:11:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59116046,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "Style nitpick: use `unless` instead of `if !`.",
		"created_at" : "2016-04-09T14:33:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59116075,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "Shouldn’t that be “a**n** `event`”?",
		"created_at" : "2016-04-09T14:36:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59116132,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Updated with this in place. See https://github.com/Homebrew/brew/blob/7cb6c73e5cf8f493a0dce925d1ab1c999043e255/Library/Homebrew/utils/analytics.sh#L27-L34",
		"created_at" : "2016-04-09T14:39:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59116160,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think we should reduce duplication here as argument list is the same.",
		"created_at" : "2016-04-09T14:41:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59116180,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I don't know how to do that easily in Bash CC @UniqMartin. ",
		"created_at" : "2016-04-09T14:43:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59116210,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "@bfontaine That's intentional because I think it's easier to parse than `unless..else`",
		"created_at" : "2016-04-09T14:45:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59116279,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-04-09T14:49:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59116307,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Use a variable for url?",
		"created_at" : "2016-04-09T14:52:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59116351,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Not just the URL but e.g. the arguments like `--silent` being omitted and not doing a `&>/dev/null & disown`",
		"created_at" : "2016-04-09T14:54:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59116394,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Use bash array then?",
		"created_at" : "2016-04-09T14:56:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59118135,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Should this just be `CI`(i.e. without `=1`)?",
		"created_at" : "2016-04-09T17:16:21Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 57
	},
	{
		"id" : 59118174,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This should be put outside of this function. Otherwise, a `brew not-exist-command` will trigger an exception log but analytic is never setup.",
		"created_at" : "2016-04-09T17:19:29Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 57
	},
	{
		"id" : 59118179,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I would prefer to putting this line inside `analytics.sh`",
		"created_at" : "2016-04-09T17:19:58Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 57
	},
	{
		"id" : 59118726,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Could be.",
		"created_at" : "2016-04-09T17:59:20Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 57
	},
	{
		"id" : 59118729,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Feels weird to source a file and have that executed a function (we don't do that elsewhere).",
		"created_at" : "2016-04-09T17:59:41Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 57
	},
	{
		"id" : 59118739,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-04-09T18:00:28Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 57
	},
	{
		"id" : 59142009,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "RuboCop doesn't fully approve. `!ENV[\"HOMEBREW_ANALYTICS_DEBUG\"].nil?` maybe?",
		"created_at" : "2016-04-10T21:38:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59142033,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Readability of this would be quite a bit improved using a `%W[`-style array.",
		"created_at" : "2016-04-10T21:40:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59142078,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This looks like it could/should be placed somewhere else, as `aip=1` is set up a bit further up.",
		"created_at" : "2016-04-10T21:42:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59142094,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm missing a space between `{` and `|k, v|`.",
		"created_at" : "2016-04-10T21:43:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59142102,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I see a superfluous space between `\"--silent\",` and `\"--output\"`.",
		"created_at" : "2016-04-10T21:44:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59142149,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Nitpick, but I'd love to see us use spaces around `=` consistently.",
		"created_at" : "2016-04-10T21:45:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59142204,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can we try and make local variables lower case, so that upper case is reserved for global/exported variables? I think this will make it easier to understand our Bash code and the scope of variables therein in the long term.",
		"created_at" : "2016-04-10T21:49:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59142241,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Nitpick, but quoting a literal string without white space or other special characters feels weird to me. Same for the other two instances above. (I guess I can see an argument for consistency with the other `-d` arguments, though.)",
		"created_at" : "2016-04-10T21:51:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59142259,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`[[` and `]]` for consistency?",
		"created_at" : "2016-04-10T21:52:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59142317,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This seems similarly misplaced like the corresponding comment in the Ruby code. (Doesn't it also apply to the debug/`else` branch of this `if`?)",
		"created_at" : "2016-04-10T21:55:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59142363,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Not sure if we want to make that still output `/usr/local` for the reverse case. (It would at least make the code more consistent with the screenshot that is also part of this PR.)",
		"created_at" : "2016-04-10T21:58:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59142486,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Worth adding what commands we track now that we limit this?",
		"created_at" : "2016-04-10T22:05:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59142554,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Here and one line above: `CI` instead of `CI=1`.\r\n\r\nAlso, maybe worth explaining how the label `Mac OS X 10.11, non-/usr/local, CI` is constructed? (Or maybe a bit further up in the “What?” section additional points like “non-standard installation location” and “whether or not invoked as part of CI”?)",
		"created_at" : "2016-04-10T22:10:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59142580,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Maybe “in a separate background process” instead of “in a forked, background process”?",
		"created_at" : "2016-04-10T22:11:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59143896,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "I think a clear and detailed example will help. Identifying buggy formulae is one, since we will report build failures.",
		"created_at" : "2016-04-10T23:34:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59143907,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "\"We will never send analytics from your machine while `HOMEBREW_NO_ANALYTICS=1` is in the environment.\" is a little truthier :)",
		"created_at" : "2016-04-10T23:35:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59162267,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Weird. `!!` will never be `nil`. I'll take a look, thanks.",
		"created_at" : "2016-04-11T07:17:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59162291,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "True.",
		"created_at" : "2016-04-11T07:17:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59162297,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : ":+1: ",
		"created_at" : "2016-04-11T07:17:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59162313,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I agree except in function declarations :wink: ",
		"created_at" : "2016-04-11T07:18:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59162317,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : ":+1: ",
		"created_at" : "2016-04-11T07:18:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59162340,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Yup, missed that.",
		"created_at" : "2016-04-11T07:18:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59162346,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Agreed.",
		"created_at" : "2016-04-11T07:18:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59162362,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Good point.",
		"created_at" : "2016-04-11T07:18:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59170612,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Well, Rubocop complains so who am I to argue?",
		"created_at" : "2016-04-11T08:39:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59170724,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "@UniqMartin It's tempting to just run `rubocop --fix` over the whole of this repo, now.",
		"created_at" : "2016-04-11T08:40:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59173838,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Have changed the screenshot. Would rather keep the prefix and CI consistent with each other, I think, and avoid printing \"the expected case\"",
		"created_at" : "2016-04-11T09:03:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59175777,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "There are many other commands also used in scripts. e.g. `search`(without any option), `list`, `command`(to test the existence of external command) and even `tap`(without any option or `--list-*` option). There is also `--cache` which it's not short circuited as `--repo`/`--prefix` does. ",
		"created_at" : "2016-04-11T09:19:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59176315,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Just a FYI note.",
		"created_at" : "2016-04-11T09:23:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59176943,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Which do you think we should remove? I'd like to know some of them that are actually being run by users.",
		"created_at" : "2016-04-11T09:28:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59178793,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Clearly, current blacklist approach doesn't scale well. It may be better to put all autocompletion script related commands into a separate group at first. e.g. a dedicate command for script autocompletion? (just a random idea)",
		"created_at" : "2016-04-11T09:44:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59179378,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Yeh, I think that'd be a great idea CC @tdsmith @apjanke ",
		"created_at" : "2016-04-11T09:49:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59181338,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "@xu-cheng I don't think this needs to block this PR or even the feature shipping, though, given these are all run in forked background processes.",
		"created_at" : "2016-04-11T10:05:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59184962,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Would be great to have a TODO comment for the time being.",
		"created_at" : "2016-04-11T10:41:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59205806,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I agree. Having a dedicated blacklisted entry point for things used from shell completion sounds like a good solution, that doesn't depend on “magic” like testing `stdout` for a TTY.",
		"created_at" : "2016-04-11T13:45:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59207110,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Looks like this should have been just `formula.tap.private?` for the tests not to fail.",
		"created_at" : "2016-04-11T13:53:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59237107,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This needs to be `--user-agent #{HOMEBREW_USER_AGENT_CURL}`. Otherwise the user agent will be pretty useless. :wink:",
		"created_at" : "2016-04-11T16:37:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59238148,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "In a recently merged PR you used a different style (see [this code](https://github.com/Homebrew/brew/blob/4a7cd160c31969b79979ae9bd20afcf82d9513c0/Library/brew.sh#L234-L235) or below) and I like it more (because it's closer to its Ruby counterpart). Maybe change this to make them more alike?\r\n\r\n```shell\r\n[[ -n \"$HOMEBREW_AUTO_UPDATE\" ]] || return\r\n[[ -z \"$HOMEBREW_NO_AUTO_UPDATE\" ]] || return\r\n```",
		"created_at" : "2016-04-11T16:44:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59241324,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Yeh, yes, nice spot.",
		"created_at" : "2016-04-11T17:04:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59241378,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Sure.",
		"created_at" : "2016-04-11T17:04:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59255094,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Also tap can be nil. ",
		"created_at" : "2016-04-11T18:22:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59259288,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Be aware that the `[[ ... ]] || return` idiom has slightly different behavior: the result of the test becomes the `$?` exit status of the statement in this case, whereas with `if [[ ... ]]` the exit status is still 0 (success). Matters if the exit status of the function will be tested, if `set -e` is enabled, or if it's the last statement run in a script. I'd do an explicit `return 0` in this case to keep exit status in line with the function success.",
		"created_at" : "2016-04-11T18:48:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59262668,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Thanks for pointing this out, @apjanke! If I'm understanding you correctly, the fix that doesn't involve going back to `if` is either (to stay with the above example):\r\n\r\n```shell\r\n[[ -n \"$HOMEBREW_AUTO_UPDATE\" ]] || return 0\r\n[[ -z \"$HOMEBREW_NO_AUTO_UPDATE\" ]] || return 0\r\n```\r\n\r\nor inverting the condition in the tests:\r\n\r\n```shell\r\n[[ -z \"$HOMEBREW_AUTO_UPDATE\" ]] && return\r\n[[ -n \"$HOMEBREW_NO_AUTO_UPDATE\" ]] && return\r\n```\r\n\r\nIs this correct?",
		"created_at" : "2016-04-11T19:08:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59264490,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Correct.",
		"created_at" : "2016-04-11T19:21:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 57
	},
	{
		"id" : 59343294,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "`exception.is_a?(BuildError) && exception.formula.tap && !exception.formula.tap.private?`",
		"created_at" : "2016-04-12T09:01:16Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 57
	},
	{
		"id" : 59346305,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You mean `HOMEBREW_ANALYTICS` not `UPDATE` right?",
		"created_at" : "2016-04-12T09:24:50Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 57
	},
	{
		"id" : 59347065,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "arrrgghh\r\n",
		"created_at" : "2016-04-12T09:30:36Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 57
	},
	{
		"id" : 59414894,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "My code examples shouldn't always be copied verbatim. :wink: Good thing it was noticed before it could create any confusion. :bow:",
		"created_at" : "2016-04-12T17:15:22Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 57
	},
	{
		"id" : 59493048,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Is there no built-in way of doing this already?",
		"created_at" : "2016-04-13T05:03:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 63
	},
	{
		"id" : 59493148,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Do these need to be initialized at some later point if this is called without formula specified?",
		"created_at" : "2016-04-13T05:05:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 63
	},
	{
		"id" : 59496425,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Maybe make sure they get unset if it gets recalled without a formula?",
		"created_at" : "2016-04-13T06:07:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 63
	},
	{
		"id" : 59498369,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Sorry for being late. But you probably want to use `pkg_version` instead of `version`. OR why not just passing formula prefix directly?",
		"created_at" : "2016-04-13T06:24:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 63
	},
	{
		"id" : 59498717,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I'm not actually sure about this: there are lots of `brew` self-calls, and it may be appropriate for it to be inherited from the parent process in some of them if there's a self-call running inside an operation for a specific formula. I'll poke around and see if I can come up with an example or counter-example.",
		"created_at" : "2016-04-13T06:27:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 63
	},
	{
		"id" : 59498916,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I don't think so, since this is a standalone script and not running under `brew`, so we don't have `Formula` objects. Or do you mean the syntax for joining with slashes? I think this form is pretty readable for paths.",
		"created_at" : "2016-04-13T06:30:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 63
	},
	{
		"id" : 59499231,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "@xu-cheng: You're right, it should be `pkg_version` or just the formula prefix. Probably the prefix, since that's really what we care about, and that avoids duplicating path construction logic. Thanks for catching; I'll put in another PR for that.",
		"created_at" : "2016-04-13T06:35:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 63
	},
	{
		"id" : 59499444,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "I meant for getting prefix from here, but I guess not. One potential issue with how it is here is that it will silently use empty strings and silently coerce nil to an empty string, but neither is probably a significant risk.",
		"created_at" : "2016-04-13T06:37:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 63
	},
	{
		"id" : 59501113,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Here's my fix: https://github.com/apjanke/brew/commit/bc51fd5944135cea74c91d7d7a5eff97b1f07f27\r\n\r\nI'll make this a PR in a bit once I've done some more testing on it.",
		"created_at" : "2016-04-13T06:57:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 63
	},
	{
		"id" : 59501282,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "The fix I'm doing for ignoring the revisions should address this, too: it constructs the whole prefix path using the `Formula` log in superenv in the parent `brew` process and just passes the whole path, instead of reconstructing it in the `cc` wrapper script. https://github.com/apjanke/brew/commit/bc51fd5944135cea74c91d7d7a5eff97b1f07f27\r\n\r\nAnd I think in this case, the nil vs empty string distinction doesn't matter because both are false, and it does an `if formula_prefix` check before using it.",
		"created_at" : "2016-04-13T06:59:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 63
	},
	{
		"id" : 59505390,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "PR: https://github.com/Homebrew/brew/pull/80",
		"created_at" : "2016-04-13T07:43:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 63
	},
	{
		"id" : 59161712,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Maybe make this a `ARGV` function?",
		"created_at" : "2016-04-11T07:10:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59161735,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Maybe `Kept`?",
		"created_at" : "2016-04-11T07:10:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59211732,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think this raises the question what files we're talking about (though that's documented). I think `keep_temp?` and `--keep-temp` would be more self-descriptive.",
		"created_at" : "2016-04-11T14:21:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59213460,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`{ :preserve => preserve_files }` should be `:preserve => preserve_files` instead. Also, if you used `ARGV.keep_files?` directly in place of `preserve_files`, there would be no need for a separate `begin`-`ensure`-`end` block and the diff would be more useful. (Just a suggestion.)",
		"created_at" : "2016-04-11T14:29:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59213811,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think a more succinct `ohai \"Retained temporary files in #{@testpath}\" if ARGV.keep_files?` would be sufficient.",
		"created_at" : "2016-04-11T14:31:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59214915,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Also, probably want to use `include?` here to avoid introducing `-k` switch.",
		"created_at" : "2016-04-11T14:37:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59215485,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Another thought is if we only use it in `test`, we probably want to avoid adding this method to `ARGV`. Just use `ARGV.include? \"--keep-files\"` directly in `test.rb`",
		"created_at" : "2016-04-11T14:39:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59219061,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Mike proposed moving this to `ARGV` (see now hidden code comments) and I agree because like Mike I'd like to see this also being used by `brew install`. But good point on using `include?` instead of `flag?`!",
		"created_at" : "2016-04-11T14:57:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59254890,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "`ohai` gets truncated to the terminal width so it could lose the path information, and that's necessary for this to be useful. And I didn't want to do just `puts` because without the `ohai` header it tends to get lost in the build output",
		"created_at" : "2016-04-11T18:21:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59256212,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah, the intention is for `install` to eventually make use of it, too; I just don't have an implementation for it yet.\r\n\r\nChanged to `include?`.",
		"created_at" : "2016-04-11T18:30:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59256343,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Did both these changes; diff looks nicer now.",
		"created_at" : "2016-04-11T18:30:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59259499,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Then make that: `ohai \"Retained temporary files:\", @testpath if ARGV.keep_files?`. `ohai` accepts multiple inputs and all but the first are printed (without styling or truncation) via `puts`. (I find it annoying that `ohai` truncates its first argument, but that's not something that can be solved here.)",
		"created_at" : "2016-04-11T18:49:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59261189,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Cool; I didn't know about the multi-arg `ohai`. I kind of prefer the current output, though. And I added a `!@testpath.nil?` check, so the one-line form becomes pretty long.\r\n\r\n```\r\nohai \"Kept temporary files\", @testpath if ARGV.keep_files? && !@testpath.nil?\r\n```",
		"created_at" : "2016-04-11T18:59:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59634704,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Unfortunately, this doesn't work with Ruby 1.8. The array splat (`*`) only works when used with the last argument. (Same for other instances of this pattern further down.)",
		"created_at" : "2016-04-13T22:08:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59637638,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It's customary to omit an empty argument list (even in a declaration like here).",
		"created_at" : "2016-04-13T22:34:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59649196,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "ARRRGH. Okay, will fix.",
		"created_at" : "2016-04-14T00:33:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59837112,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "The indention need to be aligned here. :wink: ",
		"created_at" : "2016-04-15T07:42:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59894365,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Is `f` actually used? If not, prefix it with an underscore to make that more obvious (and silence RuboCop).\r\n\r\nI think the `stg` is unnecessarily cryptic. What does it stand for? `stage`? What does it actually represent? To me that's a handle to the temporary directory, so something like `temp_directory` (or `staging_directory`, if you prefer) would be nice. (Obviously also applies to the rest of the code.)",
		"created_at" : "2016-04-15T15:40:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59895317,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think this attribute should be read-only, maybe even not exposed at all.",
		"created_at" : "2016-04-15T15:46:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59895392,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`@do_preserve` does not need to be publicly accessible. It is already exposed via `preserve` and `preserve?`.",
		"created_at" : "2016-04-15T15:46:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59895511,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Not entirely sure about Ruby conventions, but to me this feels like a method that deserves a bang, i.e. `preserve!`.",
		"created_at" : "2016-04-15T15:47:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59895845,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd prefer if the PR didn't introduce empty lines unrelated to the changed code.",
		"created_at" : "2016-04-15T15:49:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59895859,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd prefer if the PR didn't introduce empty lines unrelated to the changed code.",
		"created_at" : "2016-04-15T15:49:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59895873,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd prefer if the PR didn't introduce empty lines unrelated to the changed code.",
		"created_at" : "2016-04-15T15:49:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59896312,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I haven't looked into this, but could there be other reasons why the sandbox cannot/couldn't be used in debug/interactive mode? I.e. what is the original reason for this limitation?",
		"created_at" : "2016-04-15T15:52:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59896741,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Is it an oversight that you didn't update the documentation for `install` or are you just postponing this until the PR is basically finalized?",
		"created_at" : "2016-04-15T15:55:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59897114,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah, `stg` for \"stage\", as in \"staging context\"; the context that goes with `stage`-like methods. I didn't want to take up a whole argument slot with just the temporary directory; I think it should apply to staged temporary data besides just the temp directory. If `brew` or `stage` ended up creating other stuff, like database entries or receipt files or ephemeral logs in another directory, `preserve` could also apply to those. Don't think spelled-out `stage` can be used because a `stage` method might be called inside these.\r\n\r\n`stage_context`, `stage_data`, `stage_files`? `tmp_data`, `tmp_context`, maybe?",
		"created_at" : "2016-04-15T15:57:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59898036,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I personally prefer `stage_context`, though `staging_context` sounds more correct to my non-native understanding of the English language.\r\n\r\n> Don't think spelled-out `stage` can be used because a `stage` method might be called inside these.\r\n\r\nA variable will always take precedence over a same-named method. There's no method calling going on in `|<stuff>|` because that's basically an argument list (like in method definitions).",
		"created_at" : "2016-04-15T16:03:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59898941,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Right, I meant, I was avoiding using that name for these `|<foo>|` block parameters, because I wanted to use the same parameter name for all of them, and in some of these blocks, a call to a `stage` method might actually occur, so we need to avoid the local variable masking the same-named method. And since `stage` is a method name used in this functional area, I thought it would be clearer to keep separate names rather than rely on the type precedence to sort things out.\r\n\r\n> I personally prefer stage_context, though staging_context sounds more correct to my non-native understanding of the English language.\r\n\r\n\"Staging context\" is how you'd say it in spoken conversation, but I think `stage_context` works better as a variable, too. If there were several things related to a `stage`, I'd prefix them all with `stage_`, instead of switching between `stage_`, `staged_` and `staging_`.",
		"created_at" : "2016-04-15T16:09:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59899714,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Oversight; thanks.",
		"created_at" : "2016-04-15T16:14:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59900074,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fixed `_f`. Leaving it as `stg` for now; will think about your name suggestions.",
		"created_at" : "2016-04-15T16:17:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59900598,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "About `stage`: I see. Thanks for clarifying! `stage_context` is fine with me. I'm happy with almost everything that is less cryptic than `stg`. :smile_cat: ",
		"created_at" : "2016-04-15T16:20:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59970309,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Not obvious what `_f` or `stg` are; can you use longer variables here?",
		"created_at" : "2016-04-16T16:53:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59970324,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "`stg` to `staging`?",
		"created_at" : "2016-04-16T16:54:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59970326,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "or even `dir`?",
		"created_at" : "2016-04-16T16:54:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59970331,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "`resource, dir`",
		"created_at" : "2016-04-16T16:54:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59970353,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This seems to be a mistake. The preserve is a flag for cp_r. ",
		"created_at" : "2016-04-16T16:56:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59970369,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Personally, I rare see `!` used in option name. ",
		"created_at" : "2016-04-16T16:57:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59970750,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I have to agree. I'm the one who suggested the bang (`!`) in a previous code comment, but in my mind I had restricted that to the `Mktemp#preserve!` method.\r\n\r\nAlso, the `do_` in `@do_preserve` seems unnecessary and carries no information. Let's make this just `@preserve`.",
		"created_at" : "2016-04-16T17:26:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59976006,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "The `!` in the option name was a mistake; result of overzealous search-and-replace. Will fix.",
		"created_at" : "2016-04-17T00:09:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59977423,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The piece about the topmost `mktemp` and the call stack no longer applies, right?",
		"created_at" : "2016-04-17T02:33:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59977488,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "For both brevity and clarity, I would make that `end.brew { |formula, _staging| formula.patch }`. (The shorter `f` seems also acceptable, given how widely that is used in our code base.)",
		"created_at" : "2016-04-17T02:42:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59977494,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Same here.",
		"created_at" : "2016-04-17T02:43:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59977496,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Same here.",
		"created_at" : "2016-04-17T02:43:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59977527,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It looks like the `puts` directly above this line is now obsolete.",
		"created_at" : "2016-04-17T02:46:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59979033,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "The reason it used to be disabled is that it's hard to retain file in interactive shell. So we are safely to remove them for now.",
		"created_at" : "2016-04-17T06:40:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59992869,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah, it leaves redundant output. Removed.",
		"created_at" : "2016-04-17T21:12:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59992871,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Right. Fixed.",
		"created_at" : "2016-04-17T21:12:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59992910,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "This I don't know about... brew's codebase seems to really avoid the `{ ... }` syntax except for short one liners, and this doesn't seem to count as a one-liner since it's attached to that other block. I'll look around and see if I can find similar examples in the existing code.",
		"created_at" : "2016-04-17T21:13:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59993679,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Well, the GitHub Ruby Style Guide says to use `{ ... }` for single-line blocks, but to avoid multiline chaining like this entirely, and to refactor a multi-line chain in to methods. (It's in the bullet point that starts with \"Prefer {...} over do...end for single-line blocks\".)\r\n\r\nSince the multi-line chain was there before, and I'm not sure how to refactor it away without (imho) hurting readability, I'm going to switch this over to `{ ... }` and leave it as a chain. More thorough style fixes can be done in another PR; there's a bunch of other items that `brew style` also complains about in this file.",
		"created_at" : "2016-04-17T21:44:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59995147,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Thanks! Yeah, we still have a lot of work to do to make RuboCop entirely happy with out code, even though we have already disabled or relaxed a lot of its rules in our configuration. :wink: ",
		"created_at" : "2016-04-17T23:16:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 66
	},
	{
		"id" : 59185123,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I don't think we should repeatedly set the config for each update.",
		"created_at" : "2016-04-11T10:43:18Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 67
	},
	{
		"id" : 59185232,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I would prefer to use `brew.private` instead of `remote.origin.private`.",
		"created_at" : "2016-04-11T10:44:26Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 67
	},
	{
		"id" : 59185289,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "If you want to introduce new internal variable, it should be added to `clear_cache` method.",
		"created_at" : "2016-04-11T10:45:04Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 67
	},
	{
		"id" : 59185561,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "For normal tap, i.e. `@private` is false. The cache won't work, as result, it will introduce unnecessary IO.",
		"created_at" : "2016-04-11T10:48:15Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 67
	},
	{
		"id" : 59185735,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Ok, will fix the cache so it checks for not-`nil`.",
		"created_at" : "2016-04-11T10:49:55Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 67
	},
	{
		"id" : 59185905,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "What do you suggest?",
		"created_at" : "2016-04-11T10:51:32Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 67
	},
	{
		"id" : 59185909,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : ":+1: ",
		"created_at" : "2016-04-11T10:51:36Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 67
	},
	{
		"id" : 59185915,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : ":+1: ",
		"created_at" : "2016-04-11T10:51:40Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 67
	},
	{
		"id" : 59185953,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Wait a bit to let me come with something :wink: ",
		"created_at" : "2016-04-11T10:52:05Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 67
	},
	{
		"id" : 59344838,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This should be `--replace-all` instead of `--add`, otherwise we will have multiple values under the same key. ",
		"created_at" : "2016-04-12T09:14:28Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 67
	},
	{
		"id" : 59345044,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It's just occurred to me should we just inline this method in `private?`. It seems there is no point to create a new method here.",
		"created_at" : "2016-04-12T09:15:10Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 67
	},
	{
		"id" : 59345181,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "i.e. `config[\"foo\"]=\"a\"; config[\"foo\"]=\"b\"` should overwrite value a to b instead of adding value b.",
		"created_at" : "2016-04-12T09:16:21Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 67
	},
	{
		"id" : 59346663,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I think it's more readable as a separate method.",
		"created_at" : "2016-04-12T09:27:32Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 67
	},
	{
		"id" : 59346673,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "And intention revealing.",
		"created_at" : "2016-04-12T09:27:39Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 67
	},
	{
		"id" : 59346999,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Switched during testing, sorry. Changed back.",
		"created_at" : "2016-04-12T09:30:02Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 67
	},
	{
		"id" : 59215023,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Thanks for catching and fixing this! :heart: ",
		"created_at" : "2016-04-11T14:37:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 68
	},
	{
		"id" : 59215514,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I would prefer if this was done with a regular expression and `gsub`. I think the code will be shorter and easier to understand.",
		"created_at" : "2016-04-11T14:39:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 68
	},
	{
		"id" : 59215672,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "How to do gsub for this? I have no idea.",
		"created_at" : "2016-04-11T14:40:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 68
	},
	{
		"id" : 59215930,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Similar situation here (use regular expressions and `gsub`). The code probably won't be shorter, but it will be easier to understand and more robust in case `<` and `>` aren't paired properly.",
		"created_at" : "2016-04-11T14:41:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 68
	},
	{
		"id" : 59217664,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The easiest would be:\r\n\r\n```ruby\r\ntext.gsub!(/`([^`]+)`/, \"#{Tty.highlight}\\\\1#{Tty.reset}\")\r\n```",
		"created_at" : "2016-04-11T14:50:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 68
	},
	{
		"id" : 59312636,
		"user" : {
			"login" : "apjanke"
		},
		"body" : ":+1: on the regex. More readable, plus iterated search-and-replace could become a performance problem on even relatively small texts.\r\n\r\nNitpick: should maybe be `*` instead of `+` in\r\n\r\n```\r\n/`([^`]+)`/\r\n```\r\n\r\nso that degenerate backticks-surrounding-empty-string are viewed as paired with each other. Could also be done with a non-greedy match of \"any character\", which scans a little nicer to me since you don't have an unpaired backtick in the middle of the regex.\r\n\r\n```\r\n/`(.*?)`/\r\n```",
		"created_at" : "2016-04-12T02:17:31Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 68
	},
	{
		"id" : 59312915,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Are we sure about this replacement? The `<` and `>` characters might have roles in help text aside from markup, such as \"less than/greater than\" when describing functionality or argument constraints, or input/output redirection in code snippets. And we don't have a means of escaping them in this form.\r\n\r\nMaybe we should hold off on this particular transformation and consider adopting an existing markup like Markdown or AsciiDoc for helptext, instead of doing more ad hoc transformations.",
		"created_at" : "2016-04-12T02:21:42Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 68
	},
	{
		"id" : 59688877,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "You might want to use `counts.fetch(name, 0)` instead of `(counts[name] || 0)`.\r\n\r\nUpdate: or use `.each_with_object(Hash.new(0))` then just `counts[name] += 1`.",
		"created_at" : "2016-04-14T09:40:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 70
	},
	{
		"id" : 59688939,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "Is it really worth caching this?",
		"created_at" : "2016-04-14T09:41:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 70
	},
	{
		"id" : 59728450,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Nice, thanks!",
		"created_at" : "2016-04-14T14:37:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 70
	},
	{
		"id" : 59728930,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Maybe not, I figured it might be worth it to cut the number of `split` calls in half, especially if we're running `desc` with no arguments and iterating over all formulae in all taps.",
		"created_at" : "2016-04-14T14:40:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 70
	},
	{
		"id" : 59777303,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "Shouldn’t that be `k.split(\"/\").last` instead of `v.split(\"/\").last`?",
		"created_at" : "2016-04-14T19:33:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 70
	},
	{
		"id" : 59778422,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "Please add `require \"descriptions\"` too so we can run e.g. `brew tests --only=descriptions`.",
		"created_at" : "2016-04-14T19:41:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 70
	},
	{
		"id" : 59778616,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "How could `short_name` not be in `unique_short_names` since the latter contains all values from `short_names`?",
		"created_at" : "2016-04-14T19:43:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 70
	},
	{
		"id" : 59781074,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Ugh, you're right, sorry. That's what I get for coding before coffee. Will fix this and address your other comments shortly.",
		"created_at" : "2016-04-14T19:59:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 70
	},
	{
		"id" : 59787610,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Fixed in c4abf40.",
		"created_at" : "2016-04-14T20:40:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 70
	},
	{
		"id" : 59787659,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Done in 58d4d33.",
		"created_at" : "2016-04-14T20:40:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 70
	},
	{
		"id" : 59787763,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Fixed in c4abf40.",
		"created_at" : "2016-04-14T20:41:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 70
	},
	{
		"id" : 59290423,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd make that `Homebrew/homebrew-core` for clarity.",
		"created_at" : "2016-04-11T22:08:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 71
	},
	{
		"id" : 59291148,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The repository on GitHub is `Homebrew/homebrew-core`, but the tap is usually lowercased as `homebrew/core`.",
		"created_at" : "2016-04-11T22:14:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 71
	},
	{
		"id" : 59291169,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The repository on GitHub is `Homebrew/homebrew-core`, but the tap is usually lowercased as `homebrew/core`.",
		"created_at" : "2016-04-11T22:14:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 71
	},
	{
		"id" : 59291497,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Instead, I'd make that a link to [`homebrew/core`](https://github.com/Homebrew/homebrew-core) like so:\r\n\r\n```\r\n[`homebrew/core`](https://github.com/Homebrew/homebrew-core)\r\n```\r\n\r\n(That's how we tend to reference taps in the documentation IIRC.)",
		"created_at" : "2016-04-11T22:17:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 71
	},
	{
		"id" : 59291549,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`homebrew/core` for clarity?",
		"created_at" : "2016-04-11T22:17:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 71
	},
	{
		"id" : 59291713,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "And we shouldn't be abbreviating words like **repo**sitory, I guess?",
		"created_at" : "2016-04-11T22:19:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 71
	},
	{
		"id" : 59296107,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Hmm. Do you think we should format all the repo names on this page in fixed-width, like `homebrew/apache`, `homebrew/binary`, etc? Right now they're all highlighted because they're links, but that's incidental. I'm thinking yes.",
		"created_at" : "2016-04-11T22:57:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 71
	},
	{
		"id" : 59298347,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "If it's a tap name, I'm in favor of fixed width, no matter if linked to the GitHub repository or not. For repository names like `Homebrew/homebrew-core` I'm not sure what's best.",
		"created_at" : "2016-04-11T23:19:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 71
	},
	{
		"id" : 59314393,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I gave all-fixed-width a shot (https://github.com/apjanke/brew/blob/5892c3b067c3c817ba488cf8687b52bb6a69841e/share/doc/homebrew/Interesting-Taps-%26-Branches.md) and it looks ugly and \"tech-y\" to me; harder to read. Let's exercise some aesthetic discretion and not do this.\r\n\r\nTech books I've read, like O'Reilly's and Microsoft's, often differentiate between markup for proper/technical names/identifiers and literal code snippets: code snippets are monospace like we do here, but identifiers used in prose are rendered in bold or demibold. (Think I've seen italics, too.) Looks prettier and IMHO easier to scan when reading sections of prose (because you don't have to switch back and forth between monospace and proportional in text runs). I think this is especially true for GitHub pages viewed on the web, where they go so far as to change the background color for the monospace code sections.\r\n\r\nI don't know if demibold is doable here (and there's definitely no Markdown syntax for it).\r\n\r\nBold is a little loud, but doesn't look bad to me on Firefox or Safari on OS X. Did that [here](https://github.com/apjanke/brew/blob/2fac240e3e41054abdf44f250cc9d49e731e0b21/share/doc/homebrew/Interesting-Taps-%26-Branches.md). That doesn't look bad; I think I more dislike how wide the base font is in the first place. Think it's definitely better than monospaced, and better than no markup at all, because it's clear which of these things are Technical Names.\r\n\r\nThoughts?",
		"created_at" : "2016-04-12T02:47:25Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 71
	},
	{
		"id" : 59607681,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Thanks for pondering this! I agree that using fixed width too much degrades readability, even more so due to the added background color. Maybe it's best to limit use of backticks to actual code and use some other highlighting for taps or other things that need to stand out from the regular text. Sadly, there's no demibold in Markdown and bold is indeed a bit loud. I guess our best bet for taps is to always link them to their repository, so they stand out because of the link.",
		"created_at" : "2016-04-13T19:11:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 71
	},
	{
		"id" : 59355225,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "We should add this env in manpage. ",
		"created_at" : "2016-04-12T10:41:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 78
	},
	{
		"id" : 59356047,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : ":+1: ",
		"created_at" : "2016-04-12T10:49:50Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 78
	},
	{
		"id" : 59359207,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Done in https://github.com/Homebrew/brew/pull/79",
		"created_at" : "2016-04-12T11:21:52Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 78
	},
	{
		"id" : 59357571,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Just fixed these up because I noticed the inconsistency.",
		"created_at" : "2016-04-12T11:05:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 79
	},
	{
		"id" : 59556583,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I believe this should be `path.start_with?(\"#{formula_prefix}/\")` if we wanted to be really strict, as we don't want `formula 12.3.1` to be able to access `Cellar/formula/12.3.11` or `Cellar/formula/12.3.1_2`, though that's probably never going to happen in practice.",
		"created_at" : "2016-04-13T14:23:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 80
	},
	{
		"id" : 59558818,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "True. May as well do that, since the \"`1.2.3` vs `1.2.3_1`\" edge case is really close to the edge this PR is fixing in the first place. Amended.",
		"created_at" : "2016-04-13T14:34:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 80
	},
	{
		"id" : 59647706,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Can we retain the \"go to the `homebrew-core` repository and hit the fork button](https://github.com/Homebrew/homebrew-core)\" language that talks about *how* to do the fork? And the \"This is needed...\" sentence seems unnecessary, since that's the normal reason for GitHub forks in general.",
		"created_at" : "2016-04-14T00:14:37Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 84
	},
	{
		"id" : 59647780,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Let's put `YOUR_USERNAME` in brackets as `<YOUR_GITHUB_USERNAME>` so it's clear that it's a placeholder for replacement text, and the GitHub username (not the local machine username).",
		"created_at" : "2016-04-14T00:15:36Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 84
	},
	{
		"id" : 59647814,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "How about `<YOUR_USERNAME> <YOUR_BRANCH_NAME>`, again to make it clear they're placeholders.",
		"created_at" : "2016-04-14T00:16:00Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 84
	},
	{
		"id" : 59970179,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Need a newline before this line. I think you don't need anything after `on GitHub.`",
		"created_at" : "2016-04-16T16:43:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 84
	},
	{
		"id" : 59970186,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Also, feels weird that these are numbered but the rest of the file is not.",
		"created_at" : "2016-04-16T16:43:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 84
	},
	{
		"id" : 71994272,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : ":+1: on the `YOUR_GITHUB_USERNAME` (or `YOUR_GITHUB_HANDLE` if that widely understood) suggestion for greater clarity, also in other places in this document where the GitHub user name is referenced.\r\n\r\nI'm not sure about the “all-caps placeholder with surrounding angle brackets” style. My impression when reading documentation was that we (and others) typically do one of the following two, but not both:\r\n\r\n- All caps: `YOUR_GITHUB_HANDLE`.\r\n- Lowercase or natural capitalization with angle brackets: `<your-github-handle>` or `<your-GitHub-handle>`.\r\n\r\nI'm not particularly tied to any of those styles, but it feels weird combining them. In any case it would be nice to be more consistent with our use of placeholders and I guess we should be picking what is more frequently used in the Homebrew documentation.",
		"created_at" : "2016-07-24T19:52:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 84
	},
	{
		"id" : 59836652,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think we may relax full path for `uname`. Otherwise, it would just make brew unrunable for certain Linux distro.\r\n\r\nAlternatively, we could do something like:\r\n```bash\r\nuname()\r\n{\r\n   [[ -x \"/usr/bin/uname\" ]] && { /usr/bin/uname \"$@\"; return; }\r\n   [[ -x \"/bin/uname\" ]] && { /bin/uname \"$@\"; return;  }\r\n   odie \"...\"\r\n}\r\n```\r\n\r\nWhat do you think?",
		"created_at" : "2016-04-15T07:37:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 86
	},
	{
		"id" : 59838235,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Could use functions for the rest of them too, for readability.\r\n\r\n```\r\nwhich() { /usr/bin/which \"$@\" }\r\nuname() { /usr/bin/uname \"$@\" }\r\nhead() { /usr/bin/head \"$@\" }\r\n...\r\n",
		"created_at" : "2016-04-15T07:52:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 86
	},
	{
		"id" : 59900000,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Yes, I have neglected the Linux side of things and that we might want to run a vanilla `brew` under Linux soon (e.g. for testing). Not good.\r\n\r\nIntroducing shell functions to wrap a bunch of binaries feels somewhat dirty to me. Maybe backing up the user's `PATH` in a variable and then overriding it with a known-sane value (per platform) is a better idea to avoid unexpected inference from the user's `PATH`?",
		"created_at" : "2016-04-15T16:16:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 86
	},
	{
		"id" : 59900403,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I would suggest to use `uname` directly. Consider we haven't seen any breakage caused by user's uname from PATH.",
		"created_at" : "2016-04-15T16:19:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 86
	},
	{
		"id" : 59901225,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> I would suggest to use `uname` directly. Consider we haven't seen any breakage caused by user's uname from PATH.\r\n\r\nI guess that's a good compromise. And the `uname` provided by `coreutils` (if its `gnubin` directory happens to be in `PATH`) seems to be compatible with the stock `uname` for everything we care about.",
		"created_at" : "2016-04-15T16:25:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 86
	},
	{
		"id" : 59970412,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Just want to ask whether it's better to put this Easter egg into `blacklist` rather than a separate if else branch. ",
		"created_at" : "2016-04-16T17:00:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 96
	},
	{
		"id" : 59986546,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think this should be `ofail e.meesage` as you should not raise and interrupt another formula's installation. Noted there is a loop here. ",
		"created_at" : "2016-04-17T15:26:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 101
	},
	{
		"id" : 59989809,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-04-17T18:32:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 101
	},
	{
		"id" : 59990427,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This was a silly oversight. Thanks for noticing and pointing it out! :bow:",
		"created_at" : "2016-04-17T19:07:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 101
	},
	{
		"id" : 59979019,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Should the help messages in the below all be relocated to their corresponding command file?",
		"created_at" : "2016-04-17T06:38:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 102
	},
	{
		"id" : 59979056,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Yes. I plan to do this in a follow-up PR once this is merged. In the follow-up PR I'll also have to tweak the sort order (`uses` needs to come before `--cache`).",
		"created_at" : "2016-04-17T06:42:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 102
	},
	{
		"id" : 59989766,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I'd personally prefer `options={}` with an `[:empty_argv]` just for readability; boolean arguments are often hard to parse from their calling side otherwise.",
		"created_at" : "2016-04-17T18:28:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 103
	},
	{
		"id" : 59989777,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I find the `unless .. &&` really hard to parse. Maybe split this into a few lines/statements?",
		"created_at" : "2016-04-17T18:29:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 103
	},
	{
		"id" : 59990502,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This will make the call site look `Homebrew.help cmd, :empty_argv => empty_argv`. If this doesn't bother you, I'm happy to make the change according to your suggestion.",
		"created_at" : "2016-04-17T19:14:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 103
	},
	{
		"id" : 59990700,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "If you suspect that'll be the only call-site: feel free to leave as-is :+1:",
		"created_at" : "2016-04-17T19:25:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 103
	},
	{
		"id" : 59990909,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Very likely. I presume the call site will always be either `Homebrew.help cmd, empty_argv` or just `Homebrew.help`, i.e. there will never be a literal second argument.",
		"created_at" : "2016-04-17T19:37:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 103
	},
	{
		"id" : 60008588,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Unlike the name suggests, `testable_dependents` are not merely dependents with a test, but dependents that have a test and are bottled (see a bit further up). Switching to `dependents` potentially means that unbottled dependents will be built from source, just for the sake of checking their linkage, which is likely to be alright due to the from-source build.",
		"created_at" : "2016-04-18T06:00:29Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 107
	},
	{
		"id" : 60008727,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Good point. Yeah, testing linkage on non-bottled formulae is probably pointless. I'll modify it to do only bottled ones.",
		"created_at" : "2016-04-18T06:03:16Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 107
	},
	{
		"id" : 60012948,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "It'd be useful but it's too slow.",
		"created_at" : "2016-04-18T07:09:32Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 107
	},
	{
		"id" : 60012973,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "newline",
		"created_at" : "2016-04-18T07:09:53Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 107
	},
	{
		"id" : 60013313,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fixed.",
		"created_at" : "2016-04-18T07:13:29Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 107
	},
	{
		"id" : 60014463,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I find `dylib.start_with?(\"@\")` easier to parse.",
		"created_at" : "2016-04-18T07:24:00Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 107
	},
	{
		"id" : 60014625,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Agreed.",
		"created_at" : "2016-04-18T07:25:34Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 107
	},
	{
		"id" : 60015043,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This information is already encoded in the exit status and it seems to be customary for most CLI programs to output nothing in this case. I think it is sufficient to output only when there is something to report on.",
		"created_at" : "2016-04-18T07:30:17Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 107
	},
	{
		"id" : 60015268,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I find it confusing that the terminology is different depending on whether `--test` was supplied or not. Here it's “Broken” but otherwise it's “Missing”. Could also be worthwhile to split `LinkageChecker#display_normal_output` into smaller methods and reuse the code here.",
		"created_at" : "2016-04-18T07:32:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 107
	},
	{
		"id" : 60015673,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Generally yes. But most other `brew` subcommands, including diagnostic ones like `brew test`, `brew style`, and `brew doctor`, include some output even in the normal \"no problems\" case. Did this to be consistent.",
		"created_at" : "2016-04-18T07:37:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 107
	},
	{
		"id" : 60016534,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Different terminology for the different use contexts. I didn't want to change the wording of the existing `brew linkage` behavior. But when using it in `test-bot`, it's more about detecting broken links which need to be changed than a \"missing\" library which should be installed. I don't think it would be a big deal to change it to \"Missing libraries\" for the `--test` version, too.",
		"created_at" : "2016-04-18T07:45:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 107
	},
	{
		"id" : 60026372,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It may be worth to add this checker to `formula_cellar_checks.rb` as well, i.e. checking linkage of the formula itself rather than the dependents.",
		"created_at" : "2016-04-18T09:06:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 107
	},
	{
		"id" : 60084144,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah, if you're confused about it, that's probably a bad sign. And it is outputting exactly the same info in both cases; probably makes more sense to use the exact same label. I've changed it to do \"Missing libraries\" in both normal and `--test` version.",
		"created_at" : "2016-04-18T15:55:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 107
	},
	{
		"id" : 60084344,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Probably, similar to how we do a check like `brew missing` there. Mind if I put it off to a later PR, though?",
		"created_at" : "2016-04-18T15:56:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 107
	},
	{
		"id" : 60084616,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Switched to doing just the bottled dependents.",
		"created_at" : "2016-04-18T15:58:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 107
	},
	{
		"id" : 60087982,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "No problem. But you may want to put this class in a standalone file if it will be used in other part of core in the future.",
		"created_at" : "2016-04-18T16:17:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 107
	},
	{
		"id" : 60151821,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Though now that I know your thought process, it kinda makes sense to me. Thanks for taking the time to explain and changing it nonetheless. :bow:",
		"created_at" : "2016-04-18T23:26:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 107
	},
	{
		"id" : 60003795,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "If I'm reading the code of `test-bot` correctly, `before_cleanup` will be executed after [installing the tap required for the run](https://github.com/Homebrew/brew/blob/f15b631875ef19599bcb4e774d3e67596d1f93ac/Library/Homebrew/cmd/test-bot.rb#L894-L909). Thus, running `test-bot`, e.g., for `homebrew/versions` will install this tap and then immediately untap it again. Right?\r\n\r\nJust a detail, but I think we prefer using `safe_system` with separate arguments to avoid spawning an intermediate shell and to prevent undesired interpretation of arguments by that shell (unlikely in this particular case).\r\n\r\nFinally, the chained `reject` and `each` can be simplified a little bit by writing:\r\n\r\n```ruby\r\nTap.names.each { |t| safe_system \"brew\", \"untap\", s if s != \"homebrew/core\" }\r\n```",
		"created_at" : "2016-04-18T03:56:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 109
	},
	{
		"id" : 60003934,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Sorry if I'm missing the point, but omitting `\"--exclude=/Library/Taps/\"` here would mean that directory also gets wiped, right? This means that now all taps are gone at the start of the actual test run (including `homebrew/core`). Then why did we bother untapping them individually in the preceding line?",
		"created_at" : "2016-04-18T04:00:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 109
	},
	{
		"id" : 60004019,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Similar story like in the other two comments, only this time we probably don't mind wiping **all taps**, though retaining `homebrew/core` still seems desirable.",
		"created_at" : "2016-04-18T04:02:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 109
	},
	{
		"id" : 60004119,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "No, you're right, I should have left the exclude in regardless. This is what happens when I throw a PR together 15 minutes before I go to sleep. I'll tweak it in the morning.",
		"created_at" : "2016-04-18T04:05:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 109
	},
	{
		"id" : 60004594,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "> If I'm reading the code of test-bot correctly, before_cleanup will be executed after installing the tap required for the run. Thus, running test-bot, e.g., for homebrew/versions will install this tap and then immediately untap it again. Right?\r\n\r\nI'm half-asleep but AFAIK:\r\n\r\n```\r\n    def run\r\n      cleanup_before\r\n      begin\r\n        download\r\n        setup\r\n        homebrew\r\n        formulae.each do |f|\r\n          formula(f)\r\n        end\r\n      ensure\r\n        cleanup_after\r\n      end\r\n      check_results\r\n    end\r\n```\r\n\r\nThe `brew tap` happens during the `formula` stage? But potentially an issue for tap builds, perhaps. If I'm wrong I'll fix it in the morning.",
		"created_at" : "2016-04-18T04:17:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 109
	},
	{
		"id" : 60004610,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Pushed the fix here because it was going to annoy me if I left it 😄.",
		"created_at" : "2016-04-18T04:17:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 109
	},
	{
		"id" : 60070125,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Style nit. Probably want to use same `Pathname#exist?` or vice verse to keep the consistence. ",
		"created_at" : "2016-04-18T14:39:53Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 110
	},
	{
		"id" : 60092033,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Updated!",
		"created_at" : "2016-04-18T16:44:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 110
	},
	{
		"id" : 60027502,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Would it be better to use `-x`?",
		"created_at" : "2016-04-18T09:15:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 111
	},
	{
		"id" : 60029645,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I was wondering about that but there will be readable failures below in that case. I was just trying to address the slightly confusing error when you try to `exec` an empty string.",
		"created_at" : "2016-04-18T09:33:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 111
	},
	{
		"id" : 60064845,
		"user" : {
			"login" : "sjackman"
		},
		"body" : "If you wanted to improve the error message to be more helpful you could suggest some commands to install Ruby or point them to http://linuxbrew.sh#dependencies. I suggest the latter. Eventually I'm hoping to offer to install Ruby for the user at this point using one of the host's package manager, a bottle (which will be a bit tricky without ruby, but possible), or possibly [Traveling Ruby](http://phusion.github.io/traveling-ruby/).",
		"created_at" : "2016-04-18T14:12:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 111
	},
	{
		"id" : 60065609,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "@sjackman Nice idea. I'll leave improving stuff like this to you because you've got more ideas of the audience. Just making it super generic for now.",
		"created_at" : "2016-04-18T14:16:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 111
	},
	{
		"id" : 60190582,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "No idea what `rslt` means 😉 ",
		"created_at" : "2016-04-19T08:28:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60190610,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "`check_style`?",
		"created_at" : "2016-04-19T08:28:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60192735,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Why not just \r\n```ruby\r\nHomebrew.check_style(@formula.path) do |violations|\r\n  violations.each { |violation| problem violation }\r\nend",
		"created_at" : "2016-04-19T08:44:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60192864,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "`Utils.popen_read`?",
		"created_at" : "2016-04-19T08:45:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60193048,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "What will happen if I do `check_style([multiple-files]) { |lines| puts lines }`? ",
		"created_at" : "2016-04-19T08:47:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60193667,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Rubocop supports JSON output. c.f. https://github.com/bbatsov/rubocop#formatters\r\n\r\nI wonder should we use that instead of trying to parsing the output by ourselves. ",
		"created_at" : "2016-04-19T08:51:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60193867,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-04-19T08:52:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60287131,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Sorry; shorthand for \"result\". I'm still learning to remember to spell everything out for `brew` code.\r\n\r\nxu-cheng's version didn't occur to me since I'm still new at Ruby. Switched to that.",
		"created_at" : "2016-04-19T18:40:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60287316,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Nope... the `check_style` calls are moved way down below at the end of each individual formula audit. Running it here would either make the output separate, or give the results for many formulae, requiring additional parsing work.",
		"created_at" : "2016-04-19T18:41:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60287469,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "`popen_read` returns the results in `BINARY` and would require a separate `force_encoding('UTF-8')` call and check for Ruby 1.9+. I thought just doing a `popen` with a `r` instead of `rb` would be simpler.",
		"created_at" : "2016-04-19T18:42:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60287702,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "> What will happen if I do check_style([multiple-files]) { |lines| puts lines }? \r\n\r\nYou will get bogus output with extra lines including the formula name headers.\r\n\r\nI didn't know about the Rubocop formatters. Yeah, that would be more appropriate to use here. I'll look at switching it over. Thanks!",
		"created_at" : "2016-04-19T18:43:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60358432,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Looks like documentation to me 😉. Will this be enabled with `--debug`? If so I think it can just be omitted.",
		"created_at" : "2016-04-20T07:03:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60358463,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Maybe split `RUBY_VERSION.split(\".\").first.to_i >= 2` into a separate variable (perhaps even a global constant)?",
		"created_at" : "2016-04-20T07:04:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60358532,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Could just do `files = files.to_a`",
		"created_at" : "2016-04-20T07:04:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60358719,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Or, we could make it always accept an Array as input, which seems already to be the case.",
		"created_at" : "2016-04-20T07:06:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60366086,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Surprisingly, no, because it takes a capital `D` instead of a lowercase `d` like `--debug`. I don't know why it's different, but it's a distinct option.",
		"created_at" : "2016-04-20T08:10:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60366572,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Weird. Given I've been working on Homebrew for a long time and had no idea I think it's worth just using `ARGV.debug?` instead.",
		"created_at" : "2016-04-20T08:14:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60369873,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I took a closer look at it. All this one does is turn on instrumentation for profiling the `audit_*` methods. It doesn't turn on all the other verbose debugging stuff. And since it does profiling, it probably doesn't want to enable the other debugging stuff, since that would skew the timings.\r\n\r\nI reworded the comment and factored out that bit of code to make it more understandable.",
		"created_at" : "2016-04-20T08:39:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60369977,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Done.",
		"created_at" : "2016-04-20T08:39:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60370110,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "`String` doesn't support `to_a`.\r\n\r\nI just removed the conversion line: anything coming in is `concat`-able with arrays; the conversion guard isn't really needed with the current code.",
		"created_at" : "2016-04-20T08:40:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60464545,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Just wanted to mention that [`brew doctor` has the exact same feature](https://github.com/Homebrew/brew/blob/b53f0c5ada753d5ded6f6fbe4f920a4a43696394/Library/Homebrew/cmd/doctor.rb#L16). It is equally undocumented.",
		"created_at" : "2016-04-20T18:40:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60466738,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It would be better to turn it to a method of `FormulaAuditor` like what `brew doctor` does. ",
		"created_at" : "2016-04-20T18:53:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60466879,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This check is superfluous ",
		"created_at" : "2016-04-20T18:53:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60466976,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Two issues:\r\n\r\n1. This line needs to end in a colon (compare with other commands). Otherwise the styling as a definition list is broken and this is causing the huge diff in `brew.1.html` and `brew.1`.\r\n\r\n2. `<targets>` are optional, i.e. make that `[<targets>]`. IMO, even better would be to make that `[<formulae>|<paths>]` and to adjust the text below accordingly.",
		"created_at" : "2016-04-20T18:54:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60467045,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This should be called inside `audit` method rather than when we load this file. ",
		"created_at" : "2016-04-20T18:54:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60467116,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "What are we checking for? The current wording is a bit too vague. Also misses a trailing full stop.",
		"created_at" : "2016-04-20T18:55:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60467183,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You could also make this method the same name as used in `brew doctor`. ",
		"created_at" : "2016-04-20T18:55:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60467426,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This seems to be used multiple times thoroughout the codebase. We probably need a method in `utils.rb` for this. ",
		"created_at" : "2016-04-20T18:57:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60469127,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can we add the RuboCop option `--display-cop-names` (short `-D`) here? It makes it a lot easier to look up information when researching how to resolve a style violation (or what needs to be adjusted, if changing the code is not desirable). Compare:\r\n\r\n```\r\n$ rubocop --format simple --force-exclusion --config Library/.rubocop.yml Library/brew.rb\r\n== Library/brew.rb ==\r\nW:139:  1: Avoid rescuing the Exception class. Perhaps you meant to rescue StandardError?\r\n```\r\n\r\nwith\r\n\r\n```\r\n$ rubocop -D --format simple --force-exclusion --config Library/.rubocop.yml Library/brew.rb\r\n== Library/brew.rb ==\r\nW:139:  1: Lint/RescueException: Avoid rescuing the Exception class. Perhaps you meant to rescue StandardError?\r\n```",
		"created_at" : "2016-04-20T19:07:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60471107,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Let's put this `require` at the top of the file and reserve this kind of on-demand `require` for cases where it makes more sense (e.g. loading code that only works with a certain Ruby version or when the performance impact is non-negligible).",
		"created_at" : "2016-04-20T19:21:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60472195,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm not sure why we'd want to scan all of `Library` (including the code in `Library/Homebrew`) in this case, as this command is only about auditing formulae. I'd make that just `files = ff.map(&:path)` or if that creates a too long argument list for invoking `rubocop`, make that `Tap.map(&:formula_dir)` instead (array of formula directories of all installed taps).\r\n\r\nHere's my proposal for this line and some of the surrounding code:\r\n\r\n```ruby\r\nff = if ARGV.named.empty?\r\n  Formula\r\nelse\r\n  ARGV.resolved_formulae\r\nend\r\n\r\nif style\r\n  # Check style in a single batch run up front for performance\r\n  files = ff.map(&:path)\r\n  style_results = check_style_json(files, :realpath => true)\r\nend\r\n```",
		"created_at" : "2016-04-20T19:28:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60472828,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think we can completely eliminate the `unless output_header` block. It only existed in the past because if you passed `--strict` it would be difficult to distinguish between when the output of `brew style` ends and the output of `brew audit` begins. Now that the style violations are folded into the list of audit problems, this header is no longer necessary. Just like with `brew audit` (without `--strict`) before this PR.",
		"created_at" : "2016-04-20T19:32:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60473123,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "That's probably personal preference, but I find the additional empty lines inserted here don't contribute to the readability of the output and can be omitted. The indentation and the bullets (`*`) are enough for me.",
		"created_at" : "2016-04-20T19:33:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60473582,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm not really happy with this code being in the global scope. Can we make that nicer, maybe by drawing some inspiration [from `Homebrew::Diagnostic.inject_dump_stats!`](https://github.com/Homebrew/brew/blob/b53f0c5ada753d5ded6f6fbe4f920a4a43696394/Library/Homebrew/diagnostic.rb#L88-L101)?",
		"created_at" : "2016-04-20T19:36:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60477952,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yes. In fact, we can probably just call `inject_dump_stats!` since it looks like the same functionality. Thanks for pointing that out.",
		"created_at" : "2016-04-20T20:06:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60478072,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "My personal preference would also be to not do the empty lines; I'm preserving additional behavior here.",
		"created_at" : "2016-04-20T20:07:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60478176,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Ohhhhh. That explains it. Yes, let's just remove it.",
		"created_at" : "2016-04-20T20:07:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60484070,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Okay, I refactored it to share an implementation with `Diagnostic.inject_dump_stats!`.",
		"created_at" : "2016-04-20T20:45:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60484128,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Oops, wait, still some globals left. Hold on...",
		"created_at" : "2016-04-20T20:45:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60484807,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I refactored this to share `brew doctor`'s implementation, and added a similar \"Undocumented options\" comment at the top of `brew doctor`. Are you folks okay with the comment there? That way the `-D` is still hidden in the man page, but when you're looking at the source there's something to indicate the intent, which, judging from this string of comments and my own experience, was not clear.",
		"created_at" : "2016-04-20T20:49:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60485510,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fixed.",
		"created_at" : "2016-04-20T20:53:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60485679,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fixed.",
		"created_at" : "2016-04-20T20:54:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60486349,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Superfluous empty line here.",
		"created_at" : "2016-04-20T20:58:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60486726,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think I prefer this to have no default for `pattern`. Now that this method is used by multiple commands, it should definitely be moved out of `diagnostic.rb`. Maybe `utils.rb` is a sensible place, probably even better a new file in `utils/`.",
		"created_at" : "2016-04-20T21:00:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60487033,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "We don't expect `inject_dump_stats!` to be called multiple times in a single invocation, are we? Because of this, this check seems unnecessary.",
		"created_at" : "2016-04-20T21:02:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60487325,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This still needs to be moved into `def audit`. We don't want this code already to run for `require \"cmd/audit\"`.",
		"created_at" : "2016-04-20T21:04:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60487517,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Superfluous empty line here. Sorry if I'm sounding pedantic, but looking at the diff prior to commit usually avoids this kind of diff noise.",
		"created_at" : "2016-04-20T21:05:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60487881,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Sorry; I've been addressing these feedback items individually without re-reading the whole diff on this. Will fix.",
		"created_at" : "2016-04-20T21:07:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60488892,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "No worries. I guess I (or we) should give you some time to catch up with all the feedback. :smiley_cat:",
		"created_at" : "2016-04-20T21:13:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60490436,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah, that makes sense: you'd almost never actually want to do `/.*/` because there are so many small methods in most modules and classes, and if you do, it should be explicit. Removed the default and moved it to Utils.",
		"created_at" : "2016-04-20T21:23:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60490532,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Not right now, but why write code to be brittle like that when being robust is easy?\r\n\r\nI added a check to make sure that methods are not double-instrumented, either.",
		"created_at" : "2016-04-20T21:24:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60490584,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Ah. I see why that matters now. Moved.",
		"created_at" : "2016-04-20T21:24:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60491257,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Added the ability to do this, with an `--display-cop-names` option on `brew audit` and `brew style`, so people can try it both ways. Don't know if it should be the default: it's easier to identify, but it gets a little long and noisy-looking.",
		"created_at" : "2016-04-20T21:29:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60491541,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "That makes sense. This code is just preserving existing behavior for the old `brew style` call it did. Makes more sense just to do taps. I'll look at changing it, with something like your example.",
		"created_at" : "2016-04-20T21:31:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60494582,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah. Same with the test for whether encodings are supported. I'd rather defer that to another PR, though.",
		"created_at" : "2016-04-20T21:53:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60505310,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "You know what? Style checks weren't running anyway when no formula argument was supplied, because `resolved_formulae` was empty in that case.\r\n\r\n```\r\nstyle = strict && ARGV.resolved_formulae.any? && RUBY_2_OR_LATER\r\n```\r\n\r\nI think that was just a limitation of the implementation of `style` there, so I'm changing it to do style for the check-all case, too.",
		"created_at" : "2016-04-20T23:29:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60506427,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "`Tap.map(&:formula_dir)` works great. Used that and activated the style checks.",
		"created_at" : "2016-04-20T23:42:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60507340,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`|offense|` should be at the end of the preceding line, not at the start of this line.",
		"created_at" : "2016-04-20T23:53:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60507482,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "And here continues my crusade against spurious changes. :wink:",
		"created_at" : "2016-04-20T23:54:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60507676,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fixed.",
		"created_at" : "2016-04-20T23:56:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60507822,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Okay, okay, amended. Happy now? :)",
		"created_at" : "2016-04-20T23:58:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60507871,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I know this is legacy code, but multi-line blocks should use `do`-`end` (same problem also two lines above). Also the block arguments are again misplaced on the next line.",
		"created_at" : "2016-04-20T23:58:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60508251,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`do`-`end` for multi-line blocks please.",
		"created_at" : "2016-04-21T00:02:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60508283,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The correct way to get `col_width` into the format string is (note that `format` is also to be preferred over `String#%`, according to RuboCop):\r\n\r\n```ruby\r\nformat(\"%-*s %0.4f sec\", col_width, \"#{method}:\", time)\r\n```",
		"created_at" : "2016-04-21T00:03:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60508365,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I guess this can be removed now that `inject_dump_stats!` lives somewhere else.",
		"created_at" : "2016-04-21T00:04:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60508379,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I pulled the block arguments up to the first line, and did the `do ... end` for the `at_exit` block.\r\n\r\nBut when I switch this particular `{ ... }` to a `do ... end`, the behavior changes. Instead of printing a list of lines\r\n\r\n```\r\nError: 4 problems in 3 formulae\r\naudit_github_repository:    0.0000 sec\r\naudit_style:                0.0000 sec\r\naudit_bottle_spec:          0.0000 sec\r\naudit_conflicts:            0.0000 sec\r\n```\r\n\r\nit does a stringification of an Enumerator like this.\r\n\r\n```\r\nError: 4 problems in 3 formulae\r\n#<Enumerator:0x007fb78c6c0d68>\r\n```\r\n\r\nKnow what's going on there? `ruby` 2.0.0p643 on OS X 10.9.5.",
		"created_at" : "2016-04-21T00:04:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60508742,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Done",
		"created_at" : "2016-04-21T00:08:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60508753,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Changed to use this.",
		"created_at" : "2016-04-21T00:09:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60508857,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Same problem as before - if I change this `{ ... }` to `do ... end`, it will print \"`Enumerator<#...>`\" instead of displaying the individual lines.\r\n\r\nMaybe it's a weird parsing issue related to precedence and the fact that there are two blocks introduced in this statement?",
		"created_at" : "2016-04-21T00:10:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60509098,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Happy. :grinning: I hope I'm not driving you nuts with my pedantry …",
		"created_at" : "2016-04-21T00:13:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60509226,
		"user" : {
			"login" : "dunn"
		},
		"body" : "I think it's trying to `map` the result of `puts` instead of vice-versa (http://stackoverflow.com/a/5513622); I guess you could add parentheses like `($times.sort_by ... )` or just stick with the braces.",
		"created_at" : "2016-04-21T00:15:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60509514,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This must be the result of different operator precedence. `{ }` has precedence different from `do end`. If in doubt, saving an intermediate result in a variable is not the worst solution. Or in this particular instance you should be able to replace `sort_by { |_k, v| v }` with `sort_by(&:last)` to address the issue.",
		"created_at" : "2016-04-21T00:19:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60509587,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Sorry for the nagging! Hadn't seen your other related comment. :see_no_evil: ",
		"created_at" : "2016-04-21T00:20:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60510091,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Actually, the most sensible solution to this style issue seems to be to move the `puts` into the block (and to replace `map` with `each`):\r\n\r\n```ruby\r\n$times.sort_by { |_k, v| v }.each do |method, time|\r\n  puts format(\"%-*s %0.4f sec\", col_width, \"#{method}:\", time)\r\nend\r\n```",
		"created_at" : "2016-04-21T00:27:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60519236,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Not at all. This is stuff I care about too; it's just slipping past me in my edit / amend / comment / push cycle. I need to figure out a better work flow for this.",
		"created_at" : "2016-04-21T02:39:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60519416,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I already tried sticking parentheses in a couple places there, but didn't find an arrangement that worked.\r\n\r\nSwitched to Martin's suggestion.",
		"created_at" : "2016-04-21T02:42:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60520712,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Alright, switching into super-pedantic mode: The project name is “Rubo**C**op”, not “Rubocop”. (This is just one of several instances.)",
		"created_at" : "2016-04-21T03:04:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60520824,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I don't think we include the dollar sign in other parts of our man page when referring to environment variables.",
		"created_at" : "2016-04-21T03:06:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60523661,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Well, I'll be a monkey's uncle. IMDB says the movie is \"RoboCop\", too. Fixed.\r\n\r\nI left capitalization of class names as `RubocopResults` and the like, following the Java CamelCase convention that internal capitalization styling is ignored for single words and acronyms, e.g. `JsonParser`, not `JSONParser`.",
		"created_at" : "2016-04-21T04:04:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60523760,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Looks like we don't. Fixed.",
		"created_at" : "2016-04-21T04:06:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60540241,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 to another PR.",
		"created_at" : "2016-04-21T08:05:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 112
	},
	{
		"id" : 60190351,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "`[COMMAND]`",
		"created_at" : "2016-04-19T08:26:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 113
	},
	{
		"id" : 60190378,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Let's pull all this reordering into another PR for discussion.",
		"created_at" : "2016-04-19T08:26:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 113
	},
	{
		"id" : 60191041,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "My thinking was that this is the output of `brew help`, thus executing a plain `brew help` won't actually provide any “further help” (as the section title claims).",
		"created_at" : "2016-04-19T08:32:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 113
	},
	{
		"id" : 60191060,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Agreed.",
		"created_at" : "2016-04-19T08:32:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 113
	},
	{
		"id" : 60191881,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "They may have got this just from running `brew` so I think it's almost just a question of documentation of command arguments.",
		"created_at" : "2016-04-19T08:38:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 113
	},
	{
		"id" : 60192323,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "And then they run `brew help` and get the exact same output (just a different exit code). But I don't mind adding the square brackets.",
		"created_at" : "2016-04-19T08:41:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 113
	},
	{
		"id" : 60194000,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-04-19T08:53:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 113
	},
	{
		"id" : 60342209,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Feel free to throw something at me for being this anal but the `then` seems too indented here.",
		"created_at" : "2016-04-20T02:20:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60345631,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Arg, good catch. This was one that didn't cherry-pick cleanly. I'll fix it.",
		"created_at" : "2016-04-20T03:19:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60345669,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Fixed!",
		"created_at" : "2016-04-20T03:20:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60345791,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Thanks! 🙈 ",
		"created_at" : "2016-04-20T03:22:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60348190,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Should similar change apply to `JavaRequirement`?",
		"created_at" : "2016-04-20T04:09:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60348295,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "The `MacOS` is superfluous.",
		"created_at" : "2016-04-20T04:12:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60356162,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Added in a new commit.",
		"created_at" : "2016-04-20T06:36:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60356165,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Fixed!",
		"created_at" : "2016-04-20T06:36:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60360636,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Is it maybe worth doing `which java` (or `which java_home`) here instead in case it's manually installed? Would be useful on `Linuxbrew` too.",
		"created_at" : "2016-04-20T07:27:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60360777,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Maybe share all these lines and just append the `or ...`?",
		"created_at" : "2016-04-20T07:28:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60360916,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Wondering if this is worth detecting from `make --version` so e.g. it may help Linuxbrew too? Feel free to ignore that, though.",
		"created_at" : "2016-04-20T07:29:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60361049,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "This Xcode is old enough we could maybe just unconditionally use our own autotools. Thoughts?",
		"created_at" : "2016-04-20T07:31:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60361114,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "A comment to explain the `:leopard` would be handy here; presumably it's just not provided these.",
		"created_at" : "2016-04-20T07:31:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60361170,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "See comments above about perhaps checking for `java` and `java_home` in the `$PATH`",
		"created_at" : "2016-04-20T07:31:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60361314,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Where will this method be called? Would it be better to have this make path logic been implemented in superenv?",
		"created_at" : "2016-04-20T07:32:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60361663,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I believe older versions of OS X don't use superenv, FYI.",
		"created_at" : "2016-04-20T07:35:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60361974,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "While, may I ask could we make it use superenv? How hard is it? Because mixing code which may should belong to superenv in formula class feels a bit code smell to me.",
		"created_at" : "2016-04-20T07:37:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60362336,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "We could check `JAVA_HOME` set by users in this case.",
		"created_at" : "2016-04-20T07:39:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60426511,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "That was the intention, yeah - this marks Xcodes 2.5 and older as not providing autotools, so Homebrew uses its own.",
		"created_at" : "2016-04-20T15:11:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60426685,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Leopard uses superenv, but Tiger doesn't yet. I did a few experiments, but was limited by a) system Ruby version, b) Tiger not shipping `xcrun`. I'm planning to try to reenable it once I have Tigerbrew using Ruby 2.0.",
		"created_at" : "2016-04-20T15:12:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60428149,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Sorry, I mean that 4.3 is old enough that I wonder if this method could just be `false` without really causing much grief?",
		"created_at" : "2016-04-20T15:20:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60443280,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "I'm happy to move this when we get it working, but in the meantime I'd like to keep it here so it works like how it does in Tigerbrew - or move it into the FileUtils extensions.",
		"created_at" : "2016-04-20T16:34:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60444184,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Added a comment.",
		"created_at" : "2016-04-20T16:40:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60444428,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Grepping the source, it looks like this actually does almost nothing these days - it's a leftover from when we still had the symbol deps. The method and the single place that uses it (to, presumably, no effect) never got removed.",
		"created_at" : "2016-04-20T16:42:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60447254,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Cool. Think we can just delete all that and make the symbol deps always turn into their non-symbol versions?",
		"created_at" : "2016-04-20T16:59:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60447772,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Updated to check `make --version`.",
		"created_at" : "2016-04-20T17:03:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60447805,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Moved this into FileUtils and made it like the other helpers there.",
		"created_at" : "2016-04-20T17:03:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60465386,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Looks like that was done in d22ad92a8479501b080312dbc1570476cda8172f, and the deps themselves were moved to compat in d108bf0a55446df39592604bbfefa641d9c0e734. I can drop this commit and make a followup PR that removes this method (and places that call it) and/or moves it to compat.",
		"created_at" : "2016-04-20T18:45:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60466902,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Sounds good 👍 ",
		"created_at" : "2016-04-20T18:53:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60490489,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "I had a version that tried to do this but it was really ugly. :( I ended up deciding duplicating it was better.",
		"created_at" : "2016-04-20T21:24:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60492793,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Followed up in #125!",
		"created_at" : "2016-04-20T21:40:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60535032,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Could just build the string outside the if, append the lines to the string in the if and then `super` the string? I don't feel strongly though so feel free to punt on it.",
		"created_at" : "2016-04-21T07:13:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60614183,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "The main thing there is the order: on 10.4 it's more useful to suggest apple-gcc42 first (since it can build ObjC and a few other Apple-specific features).",
		"created_at" : "2016-04-21T16:35:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60698961,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Ah, ok, I see. Ignore me then 👍 ",
		"created_at" : "2016-04-22T07:11:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 118
	},
	{
		"id" : 60347762,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You could:\r\n```ruby\r\nDir.glob([\"#{HOMEBREW_LIBRARY}/brew.rb\", \"#{HOMEBREW_LIBRARY}/Homebrew/**/*.rb\"]).each\r\n```",
		"created_at" : "2016-04-20T04:01:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 119
	},
	{
		"id" : 60358648,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "When would it not exist?",
		"created_at" : "2016-04-20T07:05:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 119
	},
	{
		"id" : 60358724,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Feels weird to have separate paths here. Could we just use `popen_read` and `$?` to do this on 1.8?",
		"created_at" : "2016-04-20T07:06:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 119
	},
	{
		"id" : 60397858,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Good idea!",
		"created_at" : "2016-04-20T12:29:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 119
	},
	{
		"id" : 60398606,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "When running the test suite, where `HOMEBREW_LIBRARY` is altered to point somewhere else. But that's addressed by @xu-cheng's suggestion in a more elegant way.",
		"created_at" : "2016-04-20T12:36:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 119
	},
	{
		"id" : 60399848,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "We need to capture `stderr` (normally discarded by `popen_read`) instead of `stdout`. I guess we could make that\r\n\r\n```ruby\r\nUtils.popen_read(\"ruby -c -w #{rb} 2>&1 > /dev/null\")\r\n```\r\n\r\nto keep it compatible, if you feel strongly about this. I have a personal distaste for solutions where I'm forced to leave argument splitting to some intermediate shell (think whitespace in file names). That's why I implemented it like this. (And in the hopes that dropping 1.8 is a not too distant future.)",
		"created_at" : "2016-04-20T12:45:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 119
	},
	{
		"id" : 60402066,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I'd prefer the `2>&1` solution, yeh 👍 ",
		"created_at" : "2016-04-20T13:01:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 119
	},
	{
		"id" : 60407375,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I was afraid this would be your answer. :sob: Changing it …",
		"created_at" : "2016-04-20T13:35:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 119
	},
	{
		"id" : 60358884,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Is this doing `name.is_a? String`? If so, I'd find that more obvious personally.",
		"created_at" : "2016-04-20T07:09:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 120
	},
	{
		"id" : 60370413,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yes. I prefer `is_a?` too. But the existing lines around it are using the `===` case equals operator, so I stuck with it for local consistency.\r\n\r\nThe Ruby style guides (and the Ruby books I've been reading) say to never explicitly use `===`, and to use `is_a?` instead. If we want all the code to pass audit, we should take a pass and convert all of the `===`s.",
		"created_at" : "2016-04-20T08:43:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 120
	},
	{
		"id" : 60456826,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I also think that `is_a?` would be preferable and one step towards making `brew style` actually useful on our code base. That said, I can see the motivation for using `===` in this case.",
		"created_at" : "2016-04-20T17:56:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 120
	},
	{
		"id" : 60477006,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah, if nobody has objections, I plan on doing a PR soon to change `===` to `is_a?` throughout the core codebase to bring it in line with the style guide and make everything audit&style-clean.",
		"created_at" : "2016-04-20T20:00:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 120
	},
	{
		"id" : 60477601,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "@apjanke You might be interested in reading https://github.com/Homebrew/brew/pull/116#issuecomment-212579880 and preceding comments. Let's try to coordinate this effort (possibly in a new issue/PR)!",
		"created_at" : "2016-04-20T20:03:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 120
	},
	{
		"id" : 60506452,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Thanks. I'll catch up on 116 once I'm done with this issue.",
		"created_at" : "2016-04-20T23:42:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 120
	},
	{
		"id" : 60480405,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think this should be moved further down (below the help handling) to bring it closer to where we actually dispatch to an external command.",
		"created_at" : "2016-04-20T20:22:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 121
	},
	{
		"id" : 60481443,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Suggested line? My concern was removing it before we'd required any `internal_cmd`",
		"created_at" : "2016-04-20T20:29:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 121
	},
	{
		"id" : 60483690,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> Suggested line?\r\n\r\nHere: https://github.com/Homebrew/brew/blob/b53f0c5ada753d5ded6f6fbe4f920a4a43696394/Library/brew.rb#L80\r\n\r\n> My concern was removing it before we'd required any `internal_cmd`.\r\n\r\nWhy would that be an issue?",
		"created_at" : "2016-04-20T20:43:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 121
	},
	{
		"id" : 60481972,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Let's not populate a global variable (that is no longer used) for a no-op. We could also omit this line completely, as `--rebase` will be handled (ignored) further down by `--*) ;;`.",
		"created_at" : "2016-04-20T20:32:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 123
	},
	{
		"id" : 60493310,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "An alternative would be to retain the test, but prefix it with `needs_compat`. See [`test_audit_class_github_gist_formula` from `test_cmd_audit.rb`](https://github.com/Homebrew/brew/blob/b53f0c5ada753d5ded6f6fbe4f920a4a43696394/Library/Homebrew/test/test_cmd_audit.rb#L253-L265) for an example.",
		"created_at" : "2016-04-20T21:44:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 125
	},
	{
		"id" : 60494090,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "The test is for the doctor check rather than the method itself; I'm removing the doctor check because it's obsolete.",
		"created_at" : "2016-04-20T21:49:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 125
	},
	{
		"id" : 60494322,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Sorry, please ignore me. My suggestion doesn't make any sense. Since the `doctor` check is being removed, there's nothing that could be tested. When first reading this, I somehow thought this was only testing `MacOS::Xcode.provides_autotools?`.",
		"created_at" : "2016-04-20T21:51:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 125
	},
	{
		"id" : 60540357,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I don't think we generally use the Oxford comma. Otherwise 👍 ",
		"created_at" : "2016-04-21T08:06:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60540466,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "It doesn't actually call `git pull` now so this can probably be tweaked.",
		"created_at" : "2016-04-21T08:07:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60540523,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Or maybe just say to use `git commit` and specify the filename?",
		"created_at" : "2016-04-21T08:08:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60618024,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "We can probably just drop the parentheses and their contents. Who cares what `brew update` uses internally? And it's far too sophisticated nowadays to explain it in a side note.",
		"created_at" : "2016-04-21T17:01:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60618216,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "My gut feeling is that having separate `git add` and `git commit` steps is more idiomatic use of Git. I might be totally wrong on that, though.",
		"created_at" : "2016-04-21T17:02:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60619062,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> “[…], you need to send the pull request to the appropriate **one of** Homebrew's main repositories.”\r\n\r\nShould be (?): “[…], you need to send the pull request to **one of** the appropriate Homebrew's main repositories.”\r\n\r\n> “If you want to submit a change **in** Homebrew core code […]”\r\n\r\nShould be (?): “If you want to submit a change **to** Homebrew core code […]”\r\n\r\n> “[…], based the formula type.”\r\n\r\nShould be (?): “[…], based **on** the formula type.”",
		"created_at" : "2016-04-21T17:08:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60619394,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> “[…] to the **main** repositories.”\r\n\r\nMaybe better (?): “[…] to the **official** repositories.”",
		"created_at" : "2016-04-21T17:10:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60619486,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Sensible. Removed.",
		"created_at" : "2016-04-21T17:11:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60619607,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> “[…] to the **main** repositories.”\r\n\r\nMaybe better (?): “[…] to the **official** repositories.”",
		"created_at" : "2016-04-21T17:12:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60619756,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "My guess is also that separate `git add` and `git commit` steps is more common, at least for beginners. And separate steps lets you do multiple `git add`s before a `git commit`, so you don't have to worry about `--amend` or `rebase --interactive` at this point. I prefer the current language, though not strongly.",
		"created_at" : "2016-04-21T17:13:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60619867,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm not sure what meaning is implied by “central taps”. To me that “central” has no meaning, so I'd just drop it.",
		"created_at" : "2016-04-21T17:14:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60620394,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "> > “[…], you need to send the pull request to the appropriate **one of** Homebrew's main repositories.”\r\n>\r\n> Should be (?): “[…], you need to send the pull request to **one of** the appropriate Homebrew's main repositories.”\r\n\r\nI disagree here. For any PR, there's exactly one repo which is appropriate for it, and part of the point of this paragraph is that you have to pick the right one.\r\n\r\nThe wording here *is* a little clunky, but I think the use of \"one\" is the problem, not the placement of \"appropriate\". But alternatives like \"...to the appropriate repository amongst the several main Homebrew repositories\" sound both stuffy and less clear to my ear.\r\n\r\n> > “If you want to submit a change **in** Homebrew core code […]”\r\n>\r\n> Should be (?): “If you want to submit a change **to** Homebrew core code […]”\r\n\r\nI think both work here, though \"to\" is more idiomatic. I'll change it.\r\n\r\n> > “[…], based the formula type.”\r\n>\r\n> Should be (?): “[…], based **on** the formula type.”\r\n\r\nYep, thanks. Changing.",
		"created_at" : "2016-04-21T17:17:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60620597,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah, we need to pick one preferred term. Main/official/central/??? Gonna ask around on this.",
		"created_at" : "2016-04-21T17:19:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60620778,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I always thought the Oxford comma is limited to lists of more than two elements?!",
		"created_at" : "2016-04-21T17:20:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60621871,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Is “you need to send the pull request to the appropriate one of Homebrew's main repositories” supposed to be parsed as “you need to send the pull request to the appropriate repository, which should be one of Homebrew's main/official repositories”? If so, that doesn't really work out for me.\r\n\r\nMaybe a simplification like so is sufficient (as the following text goes into detail what is the right repository): “Depending on the change you want to make, you need to send the pull request to the appropriate repository.”",
		"created_at" : "2016-04-21T17:27:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60622334,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "It is. This is not an \"Oxford comma\". I'm not sure what you'd call this comma, but I think it's correct (though not mandatory). Maybe I'm just misapplying the rule about independent clauses here, though. (Since the stuff after the comma isn't an independent clauses.)",
		"created_at" : "2016-04-21T17:30:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60623046,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Okay, yeah, I think you're right and this comma is bogus. Removing.",
		"created_at" : "2016-04-21T17:34:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60624304,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Oxford comma removed; didn't see any others in this file.",
		"created_at" : "2016-04-21T17:41:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 127
	},
	{
		"id" : 60532883,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "Typo here: “to to make”.",
		"created_at" : "2016-04-21T06:46:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60533071,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "As a non-native speaker, I need to google that to know what is it; we could add a couple examples for each of these points.",
		"created_at" : "2016-04-21T06:49:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60539097,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fixed.",
		"created_at" : "2016-04-21T07:55:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60540724,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-04-21T08:09:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60540739,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 🇬🇧 😉 ",
		"created_at" : "2016-04-21T08:09:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60540777,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👎 on this one. I personally hate them and odn't think they are widely used.",
		"created_at" : "2016-04-21T08:10:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60540818,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I'd say the exact opposite 😀 I think a lot of people comma-spam things unnecessarily.",
		"created_at" : "2016-04-21T08:10:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60540840,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-04-21T08:10:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60540885,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Might want to reword `a priori deference` but agreed 👍 ",
		"created_at" : "2016-04-21T08:11:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60540893,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👏 ",
		"created_at" : "2016-04-21T08:11:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60552308,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "How about:\r\n\r\n```\r\n* No deference to nonstandard capitalization, typesetting, or other styling of brand names, aside from the normal capitalization of proper nouns\r\n```",
		"created_at" : "2016-04-21T09:38:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60554660,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "It's probably not just being non-native-English; the \"delivery-pacing\" view is a minority, descriptive view. The \"structural/syntactic\" approach is that punctuation is part of syntax, and that the correct punctuation is determined by the written language itself, mostly by grammatical rules. The \"delivery-pacing\" approach is that punctuation – commas, semicolons, periods – is more a guide to how you would read and deliver the prose if you were speaking out loud, and that using punctuation to indicate cadence is a lot more informal but still legitimate.\r\n\r\nI probably wouldn't have mentioned this, except some of the existing Homebrew documentation seems to follow the more informal delivery-pacing approach.\r\n\r\nWe should probably just delete this point altogether. Everyone probably assumes \"structural/syntactic\", and making it a point of discussion is probably just a distraction.",
		"created_at" : "2016-04-21T09:55:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60555667,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Removed.",
		"created_at" : "2016-04-21T10:03:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60589413,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-04-21T14:26:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60589496,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Might be worth mentioning we want to avoid all unnecessary gendering in our writing, too.",
		"created_at" : "2016-04-21T14:26:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60618438,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Added a line for that:\r\n\r\n```\r\n* Avoid gender-specific language when not necessary\r\n```",
		"created_at" : "2016-04-21T17:04:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60621472,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "> Don't use this document to be a jerk.\r\n\r\n👏 ",
		"created_at" : "2016-04-21T17:25:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60621745,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "❤️ ",
		"created_at" : "2016-04-21T17:26:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60622433,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "We do this with a few, for example \"GitHub\", right now - is that a practice we want to discontinue?",
		"created_at" : "2016-04-21T17:30:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60622655,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Expand this, based on the line above?",
		"created_at" : "2016-04-21T17:32:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60625264,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Oh, crap. I think I need to soften this language. Simple internal capitalization like \"GitHub\" an \"RuboCop\" is something I think we want to respect, like the spelling of someone's name. I'm thinking more of stuff like setting \"UNIX\" in small caps, or big spans of capital letters.",
		"created_at" : "2016-04-21T17:47:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60626173,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Expanded.",
		"created_at" : "2016-04-21T17:53:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60626841,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I softened the language a bit; maybe need to do so more. I think we want to treat brand names as proper nouns and use their owner's spelling, including internal capitalization, but some brands do things that I think are ridiculous, like capitalizing a whole word inside their name, insisting on trademark annotation, using non-alphanumeric characters, and so on. I think that's the sort of thing we want —well, not strictly avoid, but not feel compelled to follow. That's also why I phrased it as \"not defer to\" instead of \"avoid\".\r\n\r\nDoes that make sense? Maybe could be worded to be clearer. I'm definitely not trying to start a campaign saying \"you can't style it GitHub; it must be Github\". I'm willing to respect \"GitHub\", and think its camel case is more readable than \"Github\" would be.",
		"created_at" : "2016-04-21T17:57:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60630282,
		"user" : {
			"login" : "sjackman"
		},
		"body" : "I find that \"for example\" and \"that is\" more accessible and readable and less prone to be used incorrectly.",
		"created_at" : "2016-04-21T18:18:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60631169,
		"user" : {
			"login" : "sjackman"
		},
		"body" : "One down-side to using `<` and `>` for this purpose is that they are valid shell operators which can be confusing. I don't have a better suggestion. This notation may be the lesser of evils.",
		"created_at" : "2016-04-21T18:24:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60631272,
		"user" : {
			"login" : "sjackman"
		},
		"body" : "Missing a closing angle bracket. Change\r\n```\r\nhttps://github.com/<my-user-name/homebrew-core.git\r\n```\r\nto\r\n```\r\nhttps://github.com/<my-user-name>/homebrew-core.git\r\n```",
		"created_at" : "2016-04-21T18:24:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60633020,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fixed the missing angle bracket.\r\n\r\n> One down-side to using `<` and `>` for this purpose is that they are valid shell operators which can be confusing. I don't have a better suggestion. This notation may be the lesser of evils.\r\n\r\nYeah, this is a bummer. I think using them is still better than just using all caps though; lesser evil.\r\n\r\nSome other markup formats support italicization within monospace/code spans, which would probably be ideal. But it's probably not worth switching away from Markdown, given how widely it's used within Homebrew and GitHub as a whole. Maybe for individual files that have lots of code snippets with placeholders.",
		"created_at" : "2016-04-21T18:34:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60633747,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I agree, but the existing Homebrew documents seem to heavily favor \"e.g.\"/\"i.e.\". Let's see if there's a consensus in favor of changing that?",
		"created_at" : "2016-04-21T18:40:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60643825,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I'd probably go with \"We respect an individual's choice of personal pronoun\" or something? `all people's` has a slightly odd ring to it off the tongue.",
		"created_at" : "2016-04-21T19:47:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60644248,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "IMO, possibly `Pull request` rather than `pull request` just because it matches GitHub's usage and we actively refer to filed Issues as `Issue #xyz` rather than `issue #xyz`.",
		"created_at" : "2016-04-21T19:50:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60644383,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Possibly not `Mac OS X` these days? I don't think Apple uses that internally for any modern release?",
		"created_at" : "2016-04-21T19:51:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60644761,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I think `communication` may be a little easier here; the plural isn't quite the same thing in all contexts. You could use `communique` I guess but that's probably hostile to the purpose of the document.",
		"created_at" : "2016-04-21T19:54:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60645448,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "This is intended to match GitHub's usage, and I think \"pull request\" is preferred. It's capitalized in some places on the web interface, but in GitHub's prose documentation like [Using Pull Requests](https://help.github.com/articles/using-pull-requests/) and [Creating a Pull Request](https://help.github.com/articles/creating-a-pull-request/), it is \"pull request\". I think the capitalization on the GitHub UI is a matter of structure, not \"pull request\" being a proper noun.",
		"created_at" : "2016-04-21T19:58:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60646719,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Agreed. Changed.",
		"created_at" : "2016-04-21T20:07:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60646721,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Apple's all \"OS X\" these days. \"Mac OS X\" is just using \"Mac\" as an adjective for OS X. Yeah, we should probably prefer just \"OS X\". Changing.",
		"created_at" : "2016-04-21T20:07:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60646840,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Fair comment.",
		"created_at" : "2016-04-21T20:08:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60646958,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I'm sure they'll change this at the upcoming WWDC just to annoy you now, but 😄.",
		"created_at" : "2016-04-21T20:09:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60649726,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Sounds good to me as is? Maybe \"each individual's\" or \"all individuals'\"?",
		"created_at" : "2016-04-21T20:28:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60650751,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "\"each individual's\" works for me at least.",
		"created_at" : "2016-04-21T20:35:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60650773,
		"user" : {
			"login" : "chdiza"
		},
		"body" : "Exceptions: \"gaol\"; \"metre\"; \"centre\" :smile:",
		"created_at" : "2016-04-21T20:35:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60699174,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Maybe to be even more specific/strong `avoid gender-specific language when not referring to specific, gendered individuals`",
		"created_at" : "2016-04-22T07:14:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60699262,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Haha. I never see `gaol` used in 🇬🇧 (maybe more Irish?) but the others I'd both use. Don't forget `theatre`!",
		"created_at" : "2016-04-22T07:15:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60699316,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I prefer e.g./i.e. and also think it's worth documenting existing style over defining new style in this document.",
		"created_at" : "2016-04-22T07:16:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 61017175,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I think \"not necessary\" is both pretty clear, and is broader and goes with the \"use judgment\" bit above. I ran it by an editor friend and they agreed. So would like to stick with it as is. Shipping now and we can revise if necessary.",
		"created_at" : "2016-04-26T01:30:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 128
	},
	{
		"id" : 60557171,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I think it would be good to break this into multiple lines/statements. It was unwieldy before and it's a bit crazy now.",
		"created_at" : "2016-04-21T10:15:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 129
	},
	{
		"id" : 60646470,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "👍 ",
		"created_at" : "2016-04-21T20:06:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 129
	},
	{
		"id" : 60829254,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : ":+1: for mike's advice on breaking to multiple lines. (Current format can be a little hard to follow)\r\n\r\nAlso you probably want to update `brew used` as well ",
		"created_at" : "2016-04-23T14:21:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 129
	},
	{
		"id" : 60829505,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Actually I think we can just remove the `&& !dependent.build.with?(dep)`\r\n\r\n```\r\nDependency.prune if ignores.any? { |ignore| dep.send(ignore) } && !includes.any? { |include| dep.send(include) } \r\n```",
		"created_at" : "2016-04-23T14:45:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 129
	},
	{
		"id" : 60700065,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Same comment as https://github.com/Homebrew/homebrew-services/pull/48/files#r60700044",
		"created_at" : "2016-04-22T07:26:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 130
	},
	{
		"id" : 60829229,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You could use `quiet_system` directly. ",
		"created_at" : "2016-04-23T14:19:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 130
	},
	{
		"id" : 60625900,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This code example is preceded by\r\n\r\n>  You can also use the block form:\r\n\r\nMy suggestion would be to make it a bit more explicit:\r\n\r\n>  You should use the block form if you need to make multiple replacements in a file:",
		"created_at" : "2016-04-21T17:51:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 131
	},
	{
		"id" : 60646306,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "👍 to Martin's comment but with that change 👍 to the overall PR.",
		"created_at" : "2016-04-21T20:05:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 131
	},
	{
		"id" : 60649457,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Nice 👍 ",
		"created_at" : "2016-04-21T20:27:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 131
	},
	{
		"id" : 60766243,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "World's smallest nit: Should possibly be `Bintray` rather than `bintray` given it's a trademark.",
		"created_at" : "2016-04-22T16:27:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60776860,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fixed. Thanks.",
		"created_at" : "2016-04-22T17:47:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60812805,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "If the usage pattern is always `concat` and `uniq!`, then a `Set` might be the more appropriate data structure. (In any case, this construct looks a bit weird to me, to be honest.)",
		"created_at" : "2016-04-22T22:47:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60812830,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "If the usage pattern is always `concat` and `uniq!`, then a `Set` might be the more appropriate data structure. (In any case, this construct looks a bit weird to me, to be honest.)",
		"created_at" : "2016-04-22T22:47:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60813288,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Probably just a nitpick, but I'd expect the comment and the method name to say “on Bintray” instead of “to Bintray”, as the bottles are already there and we're just changing their visibility.",
		"created_at" : "2016-04-22T22:54:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60813583,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`opoo` is just printing a warning. I imagine if that invocation returned with an error, then the next line will fail hard while trying to load and parse the JSON (unless that's rescued and dealt with somewhere further up the call chain). What is really supposed to happen here?",
		"created_at" : "2016-04-22T22:58:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60820693,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah, looks clumsy to me too. I'm just trying to minimize added code.\r\n\r\nI also need to preserve the ordering of the components as they are added. Do you think it would be appropriate in terms of Homebrew style to add a `UniqueArray` or similar datatype?",
		"created_at" : "2016-04-23T01:39:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60820706,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Oh! Yes, that makes sense.",
		"created_at" : "2016-04-23T01:39:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60820712,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "It's supposed to fail hard and abort any further processing. `ofail`, maybe?",
		"created_at" : "2016-04-23T01:40:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60820851,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "BTW, I personally welcome having my nits picked. I appreciate attention to detail like this, even if it doesn't always show in my code submissions. Thanks!",
		"created_at" : "2016-04-23T01:46:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60820996,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Nope, not `ofail`; that just marks the command as failed. Looks like this should be `raise`. Changing.",
		"created_at" : "2016-04-23T01:54:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60821142,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I take that back; I'm completely wrong: if the lookup doesn't find anything, this is normal in some cases, and it should silently return `nil`; it's the caller that should either `opoo; next` or `raise`. Fixing. Sorry.",
		"created_at" : "2016-04-23T02:02:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60821453,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Amended with a fix for this.",
		"created_at" : "2016-04-23T02:24:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60829006,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Can you inline this argument check, instead of creating unnecessary new method?",
		"created_at" : "2016-04-23T14:06:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60829016,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Use `full_name` if possible. ",
		"created_at" : "2016-04-23T14:07:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60829068,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Similarly here, please use full_name if possible. ",
		"created_at" : "2016-04-23T14:08:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60829081,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think we should just hard code `use_ssl` to be true. Supporting `http` should be considered as a bug(which we don't) :wink: ",
		"created_at" : "2016-04-23T14:09:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60829105,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Similar to my proposal on other PR for `ruby2orabove?` method, I think we should create similar global method for encoding fix. ",
		"created_at" : "2016-04-23T14:11:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60829177,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Also this variable seems to be never used. ",
		"created_at" : "2016-04-23T14:15:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 60829193,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You could just `concat` here and only apply `uniq` when this variable is used as input for next step. ",
		"created_at" : "2016-04-23T14:16:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 132
	},
	{
		"id" : 61009504,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I'd probably make this `rm -f` instead of `rm -rf`, just as a bit of safety measure in case there's a bug in execution somehow. `rm -rf` is a bit punchy if it borks.",
		"created_at" : "2016-04-25T23:48:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 146
	},
	{
		"id" : 61009672,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Good point. Will get on that.",
		"created_at" : "2016-04-25T23:49:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 146
	},
	{
		"id" : 61009977,
		"user" : {
			"login" : "albus522"
		},
		"body" : "Yikes. Yeah, works for tonight but quite dangerous. At least most people don't `sudo` the commands.",
		"created_at" : "2016-04-25T23:52:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 146
	},
	{
		"id" : 61010377,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Was fixed in the merged commit: https://github.com/Homebrew/brew/commit/df489cfde25b9ea59fdf12c67876a18c13dde4aa",
		"created_at" : "2016-04-25T23:56:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 146
	},
	{
		"id" : 61045003,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think in such case, HOMEBREW_NO_ANALYTICS check can be just removed right?",
		"created_at" : "2016-04-26T08:19:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 155
	},
	{
		"id" : 61045636,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I would think so, but I'm being extra defensive here, just in case a code path some how got to this point without going through the normal `setup-analytics`. Which it shouldn't, if it was run in a supported manner, but I don't want to rely on that caveat here. Want to make sure a user-supplied `HOMEBREW_NO_ANALYTICS` is respected no matter what.",
		"created_at" : "2016-04-26T08:24:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 155
	},
	{
		"id" : 61045934,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "🆒 🚢 ed",
		"created_at" : "2016-04-26T08:26:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 155
	},
	{
		"id" : 61339996,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "We should probably remove the `homebrew.analyticsuuid` setting from the git config when disabling analytics here, to preserve the old behavior of getting rid of the UUID.",
		"created_at" : "2016-04-27T21:30:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61340261,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Actually I left it there intentionally, so that if you reenable analytics the UUID won't change. IMO the old behavior was justifiable because it was an outstanding file; same doesn't hold for new behavior. Of course it is debatable.",
		"created_at" : "2016-04-27T21:32:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61340627,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "That makes sense. And the user can manually remove it if they really do want to reset their ID for some reason.",
		"created_at" : "2016-04-27T21:34:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61340895,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Yeah.",
		"created_at" : "2016-04-27T21:36:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61347933,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I think it would be good to just remove it, actually. Err on the side of paranoia 😉 ",
		"created_at" : "2016-04-27T22:29:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61349654,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Sure, I can actually picture more people feeling \"violated\" when they see this... Removed.",
		"created_at" : "2016-04-27T22:44:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61603405,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Would be good to just make this an `if` and split to multiple lines for readability.",
		"created_at" : "2016-04-29T16:17:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61603447,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Might want to pull `$HOMEBREW_REPOSITORY/.git/config` into a shared variable in `setup-analytics`?",
		"created_at" : "2016-04-29T16:17:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61648352,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This variable is only used in `setup-analytics` if I'm not mistaken. IMHO, good reason to shorten it (drop the `HOMEBREW_` prefix) and to make it a local variable (this would also mean make it lower-case) to avoid further pollution of the global scope.",
		"created_at" : "2016-04-29T21:37:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61648460,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This variable is only used in `setup-analytics` if I'm not mistaken. IMHO, this is good reason to shorten it (drop at least the `HOMEBREW_` prefix) and to make it a local variable (this would also mean make it lower-case) to reduce pollution of the global scope.",
		"created_at" : "2016-04-29T21:38:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61648922,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "I agree.",
		"created_at" : "2016-04-29T21:42:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61648954,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I realize this has been here before, but since we're touching this anyway, I'd love to see this simplified (and readability massively improved) by using two local variables approximately like so:\r\n\r\n```shell\r\nlocal message_seen=\"$(git config --file=\"$HOMEBREW_GIT_CONFIG_FILE\" --get homebrew.analyticsmessage)\"\r\nlocal analytics_off=\"$(git config --file=\"$HOMEBREW_GIT_CONFIG_FILE\" --get homebrew.analyticsdisabled)\"\r\n\r\nif [[ \"$message_seen\" != true || \"$analytics_off\" = true ]]\r\nthen\r\n  …\r\n```",
		"created_at" : "2016-04-29T21:42:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61649254,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can we pull this entire block into a separate function (call it, e.g., `migrate-legacy-uuid-file`) that is invoked from here? This will make the `setup-analytics` function more digestible (as we link to this file and want people to actually look at it) and reduce distraction from what is actually going on in here.",
		"created_at" : "2016-04-29T21:45:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61649495,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Suggestion: Use “the repository-specific Git configuration variable” instead of “the config variable”.",
		"created_at" : "2016-04-29T21:48:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61649642,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Then I'd go even further and define functions `homebrew-config-set` (for `git config --set`), `homebrew-config-get`, `homebrew-config-unset`. `git-config` should be a lower level implementation detail and should be swappable without changing analytics logic. Maybe these should go into `brew.sh` at some point, but I'm okay with having them here now. Thoughts?",
		"created_at" : "2016-04-29T21:49:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61649731,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "That's better.",
		"created_at" : "2016-04-29T21:50:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61649753,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "👍 ",
		"created_at" : "2016-04-29T21:51:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61649773,
		"user" : {
			"login" : "apjanke"
		},
		"body" : ":+1:  Yep, that's the only file it appears in. Should `local`-ize it to minimize scope and avoid looking like an API element.\r\n\r\n```\r\n$ grep -rl HOMEBREW_ANALYTICS_USER_UUID_FILE Homebrew\r\nHomebrew/utils/analytics.sh\r\n[/usr/local/Library on ⇄ master]\r\n$\r\n```",
		"created_at" : "2016-04-29T21:51:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61650723,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think creating a bunch of new functions would be overkill at this point and might actually reduce readability. The maximum I would find agreeable would be to package\r\n\r\n```\r\ngit config --file=\"$HOMEBREW_GIT_CONFIG_FILE\"\r\n```\r\n\r\nas a shell function, so that all those invocations in `setup-analytics` get more succinct/readable.",
		"created_at" : "2016-04-29T22:01:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61651493,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "I'll be conservative and stick with git commands then, because I don't think `funcname --replace-all` will be very readable. One optimization would be to set `GIT_CONFIG` at the beginning of `setup-analytics` and unset it at the end, so we don't need to have `--file` everywhere.",
		"created_at" : "2016-04-29T22:09:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61651995,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think once that's a local variable, something like `git config --file=\"$brew_config_file\"` will be sufficiently readable again (while still being quite explicit, which is a good thing in this case).",
		"created_at" : "2016-04-29T22:15:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61652085,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "It's readable, but just verbose and worse, repeated a million times.",
		"created_at" : "2016-04-29T22:16:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61664827,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "We probably want to avoid nested function. ",
		"created_at" : "2016-04-30T04:36:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61664882,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "@xu-cheng I put `migrate_legacy_uuid_file` inside solely because it's part of `setup-analytics` logically speaking. There's no \"local function\" in bash, once you evaluate it, it's available everywhere (which is why I unset it after using it to keep the global scope as clean as possible). I can surely move it out, but it shouldn't be called from elsewhere anyway.",
		"created_at" : "2016-04-30T04:41:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61664902,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I agree with @xu-cheng. When I proposed this, I was thinking about making it a top-level function. This has the disadvantage that we have to redefine `git_config_file=\"$HOMEBREW_REPOSITORY/.git/config\"`, but I think that's better than relying on the somewhat obscure access to the local variable in the surrounding function.\r\n\r\nAlso, for consistency with other shell function names, it would be good to replace underscores with dashes, i.e. make that `migrate-legacy-uuid-file`, and avoid the space between the name and the parentheses.",
		"created_at" : "2016-04-30T04:43:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61664950,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "You get what you want. I'll just leave it in global namespace.\r\n\r\n> Also, for consistency with other shell function names, it would be good to replace underscores with dashes, i.e. make that migrate-legacy-uuid-file, and avoid the space between the name and the parentheses.\r\n\r\nYes, I didn't pay too much attention to existing style.",
		"created_at" : "2016-04-30T04:46:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61664983,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Fixed.",
		"created_at" : "2016-04-30T04:49:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61669789,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Minor style note: [`cmd/update.sh`](https://github.com/Homebrew/brew/blob/b0d906f0f8d90c08b0b799d5cf0fd18bf78c30da/Library/Homebrew/cmd/update.sh) is using underscores/snake_case in its function names. Maybe we should change one of these to match the other?",
		"created_at" : "2016-04-30T13:45:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 162
	},
	{
		"id" : 61469027,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Tiny nit, but let's replace `5|6` with `[5-6]`. This will make it easier to make future changes, assuming GCC isn't going to overthrow their new versioning scheme any time soon.",
		"created_at" : "2016-04-28T17:32:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 163
	},
	{
		"id" : 61476655,
		"user" : {
			"login" : "zbeekman"
		},
		"body" : "@UniqMartin Is it possible to add a range here too? I'm not familiar enough with ruby syntax to answer that question",
		"created_at" : "2016-04-28T18:18:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 163
	},
	{
		"id" : 61479844,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "We could try to come up with some elaborate Ruby code, but for now this list is both sufficiently short and probably easier to read than any code we would replace it with.",
		"created_at" : "2016-04-28T18:36:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 163
	},
	{
		"id" : 61656329,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Any reason this couldn't be `rm -f \"$HOMEBREW_UPDATE_FAILED_FILE\"` per the discussion we had the other day?",
		"created_at" : "2016-04-29T23:11:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61656517,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`-f` instead of `-rf` should be enough to remove this file (and less dangerous).",
		"created_at" : "2016-04-29T23:14:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61656576,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Let's use `[[ … ]]` instead of `[ … ]`.",
		"created_at" : "2016-04-29T23:14:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61656717,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You can make that `odie < \"$HOMEBREW_UPDATE_FAILED_FILE\"` instead.",
		"created_at" : "2016-04-29T23:16:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61656790,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Let's use `[[ … ]]` instead of `[ … ]`.",
		"created_at" : "2016-04-29T23:18:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61656814,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Let's use `[[ … ]]` instead of `[ … ]`.",
		"created_at" : "2016-04-29T23:18:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61675883,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : ":+1:",
		"created_at" : "2016-04-30T21:47:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61675887,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "One day I will remember to do this consistently 😉 ",
		"created_at" : "2016-04-30T21:47:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61676218,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "- This should be calling `onoe` instead of itself.\r\n- Please make that `onoe \"$@\"` instead. It's going to misbehave otherwise if `odie` is called as `odie <<EOS`. (`\"$*\"` joins all arguments into a single argument, but it will always pass one argument. `\"$@\"` transparently forwards all arguments as individual arguments.)",
		"created_at" : "2016-04-30T22:15:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61676251,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`HOMEBREW_UPDATE_FAILED_FILE` is only used in this function. Let's call it `update_failed_file` and make it local.",
		"created_at" : "2016-04-30T22:18:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61676272,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm awaiting this day. 😀 It's not fixed yet. 😉",
		"created_at" : "2016-04-30T22:19:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61676281,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Unless that doesn't work with the subshell it is used with later on. Not entirely sure about that …",
		"created_at" : "2016-04-30T22:19:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61676300,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Let's hope that not too many taps fail. Otherwise we're going to get some garbage at some point when true parallelism strikes …",
		"created_at" : "2016-04-30T22:21:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61676341,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "It's not appending e.g. a character at a time so it's actually fine. Unplug your internet and try yourself; definitely better than before (I wrote this on a ✈️ without internet 😉 )",
		"created_at" : "2016-04-30T22:25:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61676366,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Yeh, made it not local for the subshell.",
		"created_at" : "2016-04-30T22:27:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61676371,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-04-30T22:27:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61676372,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "😭 👍 ",
		"created_at" : "2016-04-30T22:27:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61676397,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "It's still racy, I think: the writes are non-atomic and non-locking AFAIK, so if there are two simultaneous write attempts, one of them might fail when the reads and writes get interleaved (e.g A opens for append & seeks to end; B opens for append & seeks to end; A writes at end+1 and closes; B writes at end+1 – using the old value of end – and closes). Odds of it happening are pretty low though.",
		"created_at" : "2016-04-30T22:30:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61676555,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You can safely make it local; it will still be visible to the subshell. Just tested this on my system (both with `/bin/bash` and a more up-to-date Bash from Homebrew).",
		"created_at" : "2016-04-30T22:47:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61676600,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Shouldn't this be `if [[ -n \"$HOMEBREW_UPDATED\" || -n \"$HOMEBREW_UPDATE_FAILED\" ]]` to get the correct error behavior? Otherwise, e.g., failing to fetch updates for all repositories will print the error, but still exit with a zero exit status.",
		"created_at" : "2016-04-30T22:54:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61676609,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I wonder if this should have a comment briefly explaining how this is used, as the variable is evaluated just a few lines below after apparently being unset. It might not be immediately clear that it is modified in the `pull` function.",
		"created_at" : "2016-04-30T22:56:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 165
	},
	{
		"id" : 61657622,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This likely needs to be relative to `f.tap.path` instead of `HOMEBREW_REPOSITORY`.",
		"created_at" : "2016-04-29T23:30:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61658050,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think the following might be clearer and will avoid one unnecessary merge:\r\n\r\n```ruby\r\nif bottles_hash.nil?\r\n  bottles_hash = bottle_hash\r\nelse\r\n  bottles_hash.merge! bottle_hash\r\nend\r\n```\r\n\r\nthough initializing `bottles_hash` to an empty hash and then doing `bottles_hash.merge! bottle_hash` unconditionally seems even shorter and clearer.",
		"created_at" : "2016-04-29T23:37:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61664864,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Can we now store `--keep-old` in the json file now? so we don't need to pass it again for merging. ",
		"created_at" : "2016-04-30T04:40:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61664953,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Why keep old can be removed now?",
		"created_at" : "2016-04-30T04:46:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61665067,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Also, probably want to use `relative_path_from` instead of `gsub`. ",
		"created_at" : "2016-04-30T04:56:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61675805,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "@UniqMartin This way will include the tap path so I don't think it _needs_ to be either. You'll note we don't include the tap as a separate field; it's actually not needed for anything beyond the path.",
		"created_at" : "2016-04-30T21:40:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61675811,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "See my comment below.",
		"created_at" : "2016-04-30T21:40:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61675820,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "It's only needed for the initial bottle revision now and not merging.",
		"created_at" : "2016-04-30T21:41:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61675832,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "If it seems shorter and clearer I'd rather leave it as-is. If this was code where the `.merge!` made a performance difference it'd be worth avoiding but it's negligible here.",
		"created_at" : "2016-04-30T21:42:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61677216,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You could also use `f.path.to_s.strip_prefix(\"#{HOMEBREW_REPOSITORY}/\")`. It's a bit clearer and won't be tripped up by `HOMEBREW_REPOSITORY` appearing in the middle of the path (though that's unlikely to happen).",
		"created_at" : "2016-05-01T00:08:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61677308,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "How about the following for both brevity and readability?\r\n\r\n```ruby\r\nbottles_hash = ARGV.named.reduce({}) do |hash, json_file|\r\n  hash.merge! Utils::JSON.load(IO.read(json_file))\r\nend\r\n```",
		"created_at" : "2016-05-01T00:17:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61679561,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Sorry, I have some hard time to understand why it can work. Have you test it?",
		"created_at" : "2016-05-01T05:01:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61679566,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Why this can be removed now? For example, how can merge work if you don't pull the new formula first? Sorry, if i'm missing something.",
		"created_at" : "2016-05-01T05:01:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61679617,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It seems that this will never happen. If the bottle is disabled, this function will return at the very early stage.",
		"created_at" : "2016-05-01T05:11:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61684283,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Yeh, works for me.",
		"created_at" : "2016-05-01T09:24:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61684293,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍. Need to do more testing here around edge-cases like that to figure out what I want to do.",
		"created_at" : "2016-05-01T09:24:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61684295,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-05-01T09:25:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61684304,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I'll do more testing but basically we don't need the old bottle specification for merging any more; all the information we need is in the JSON file.",
		"created_at" : "2016-05-01T09:26:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61684317,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I need to do more testing but as this only is modifying the bottle block it should be able to change this part of the file without needing the latest changes. That may be overkill or conflicty, though, so it might make sense to just add this back in.",
		"created_at" : "2016-05-01T09:27:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61684848,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This also applies to a duplicate of this code in `test-bot.rb` in case you haven't noticed yet.",
		"created_at" : "2016-05-01T10:23:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61684864,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I guess having independent changes on top of the original formula can work in many cases, but will create problems when more extensive changes happen to formulae and could quite easily create a merge conflict later on.",
		"created_at" : "2016-05-01T10:25:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61686073,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Just want to point out that the JSON file don't store the old spec in current implementation. ",
		"created_at" : "2016-05-01T11:56:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61686075,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "At least, it will definitely not work for new formula.",
		"created_at" : "2016-05-01T11:57:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64156325,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "The goal is to avoid reading the formula file. I'm going to add it to the top of the existing bottle block.",
		"created_at" : "2016-05-22T21:09:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64156326,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "(added a TODO)",
		"created_at" : "2016-05-22T21:09:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64165541,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Just FYI, this won't stop subprocess to load formula. For example, `brew pull`.",
		"created_at" : "2016-05-23T03:19:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64165554,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think this maybe better to keep as it is for the time being.",
		"created_at" : "2016-05-23T03:19:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64165586,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think you can load this information in `brew bottle` instead of `brew bottle --merge`",
		"created_at" : "2016-05-23T03:20:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64165631,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This is a dead code because a bottle disabled formula will never generate json file in the first place for merging ",
		"created_at" : "2016-05-23T03:21:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64165658,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think you can skip this as it will never be disabled. ",
		"created_at" : "2016-05-23T03:22:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64165876,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "A good way to test it is adding code like `File.write` in the first line of formula. ",
		"created_at" : "2016-05-23T03:27:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64180974,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yeh, I know about subprocess, it's to make sure we don't in the upload job itself.",
		"created_at" : "2016-05-23T07:54:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64181002,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "We're not loading the formula DSL in subprocesses now.",
		"created_at" : "2016-05-23T07:54:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64186659,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I prefer the bottle JSON to only contain the generated bottles. Besides, I think it's more secure to check this on both sides.",
		"created_at" : "2016-05-23T08:42:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64190691,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It seems to me that `brew pull` in the below will load the formula. ",
		"created_at" : "2016-05-23T09:13:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64190830,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I suggest it as an easy workaround to read existing bottle without loading formula. ",
		"created_at" : "2016-05-23T09:14:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64192411,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Good point. I'll need to fix it so it does not.",
		"created_at" : "2016-05-23T09:27:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64202823,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think this change was made accidentally and is unintended. (Not that it matters much as `--legacy` is used very infrequently by now.)",
		"created_at" : "2016-05-23T10:50:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64990254,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Please use `s[regex, 1]` for better readability ",
		"created_at" : "2016-05-28T15:31:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64990265,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This makes rest of code unexecuteable. ",
		"created_at" : "2016-05-28T15:32:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64990281,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It seems to be an exploit to me, the key should be checked against a whitelist. ",
		"created_at" : "2016-05-28T15:34:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64990430,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I don't think this really matters given the situations in which `--keep-old` is run and the object it's run on (`BottleSpecification`) but will tweak it anyway.",
		"created_at" : "2016-05-28T15:46:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64990435,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Done all of these in 9edb1a7.",
		"created_at" : "2016-05-28T15:46:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64990437,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Was meant to be scoped on `ARGV.include? \"--keep-old\"`",
		"created_at" : "2016-05-28T15:47:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64990482,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think both of them can be bypassed.\r\n* By insert code in formula file, I think it's quite possible to make `test-bot` think any PR as a `--keep-old` situation, and trigger `keep-old` for downstream bottle upload job.\r\n* By make `key` as `eval` or other similar dangerous method, it will be able to run arbitrary code.",
		"created_at" : "2016-05-28T15:50:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64990632,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Are you saying this is not fixed by https://github.com/Homebrew/brew/commit/9edb1a7a87f9ce7383c8ec6322a0f74a5487a0c4?",
		"created_at" : "2016-05-28T15:59:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 64990663,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Oh, my comment is meant to reply https://github.com/Homebrew/brew/pull/166#discussion_r64990430\r\n\r\nIt has been fixed now. :wink: ",
		"created_at" : "2016-05-28T16:01:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 166
	},
	{
		"id" : 61657113,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Looks like it should have been `Utils::Analytics.report_event`.",
		"created_at" : "2016-04-29T23:22:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 167
	},
	{
		"id" : 61657148,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Looks like it should have been `Utils::Analytics.report_exception` here and in the two instances below.",
		"created_at" : "2016-04-29T23:23:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 167
	},
	{
		"id" : 61664851,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You could use `extend self` instead of introducing `class ... end` block ",
		"created_at" : "2016-04-30T04:38:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 167
	},
	{
		"id" : 61664960,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "One motivation might be that RuboCop by default complains about `extend self`, though that is quite a widely used pattern in Homebrew.",
		"created_at" : "2016-04-30T04:46:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 167
	},
	{
		"id" : 61675836,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Will leave as-is for now until we pick one approach and make code consistent for it,",
		"created_at" : "2016-04-30T21:43:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 167
	},
	{
		"id" : 61675837,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-04-30T21:43:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 167
	},
	{
		"id" : 61675838,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-04-30T21:43:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 167
	},
	{
		"id" : 61675867,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Both actually work but I agree that your suggestion is more idiomatic.",
		"created_at" : "2016-04-30T21:45:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 167
	},
	{
		"id" : 61668358,
		"user" : {
			"login" : "rwhogg"
		},
		"body" : "Some Linux distros don't have `tar` installed in /usr/bin, but rather in /bin.",
		"created_at" : "2016-04-30T11:21:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 61672360,
		"user" : {
			"login" : "sjackman"
		},
		"body" : "I prefer to use `tar` and other utilities from `PATH`. Or alternatively, prefer the brewed utility over the host's utility, found in either `/usr/bin/` or `/bin`. Either `PATH` could be modified to search these three directories, or we could add our own path searching wrapper function.",
		"created_at" : "2016-04-30T17:28:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 61675667,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "This is something we can consider in future but for now this is just a copy-paste from the existing code.",
		"created_at" : "2016-04-30T21:30:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 61676975,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I guess it's not the time yet to comment on individual parts of the code, but I can't help but notice that this work in progress is still a bit messy. Namely:\r\n\r\n- This file `os/mac/cmd/config.rb` clearly shouldn't be here.\r\n- There's at least one instance where two `private`s immediately follow each other.\r\n- Maybe more? It's hard to spot this stuff when things are moved around and refactored in the same commit, causing Git to lose the connection between files (at least when viewed on GitHub).\r\n\r\nSorry for this pedantry …",
		"created_at" : "2016-04-30T23:35:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 61684208,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "That's not pedantry; it's still a bit messy, I agree. This is why I tried to keep this PR a bit smaller; reviewing individual commits should help but once I've nailed the approach it'll be easier to split future things into individual PRs.",
		"created_at" : "2016-05-01T09:17:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 62398626,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Feels odd that this `require`s `utils/bottles` which in turn `require`s this file. This would be a cyclic dependency if `require` wasn't more sophisticated. Is this really intended? If I'm not mistaken, this has the effect that `require`ing either of those will bring in all of `Utils::Bottles`, but I feel like this file here should never be required outside of `utils/bottles.rb`. (I hope this wasn't confusing.)\r\n\r\nIf you agree, a bold way to enforce this instead of silently doing the supposedly right thing would be to fail in this line if `Utils::Bottles` hasn't been defined yet.",
		"created_at" : "2016-05-06T22:18:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 62399086,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Yeh, feels fine to just remove this redundant `require`.",
		"created_at" : "2016-05-06T22:23:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 62399421,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This also applies to a few similar files currently residing in `extend/os/`.",
		"created_at" : "2016-05-06T22:27:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 62400024,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Yep.",
		"created_at" : "2016-05-06T22:34:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 62422068,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "What is the purpose of this file? I was of the impression that the OS-X-specific code of `cmd/config.rb` is now in `Library/Homebrew/extend/os/mac/system_config.rb`.",
		"created_at" : "2016-05-07T20:09:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 62422164,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`bottle_native_regex` has been renamed to `native_regex` (or `Utils::Bottles::native_regex`). See a few lines below.",
		"created_at" : "2016-05-07T20:15:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 62422167,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`bottle_native_regex` has been renamed to `native_regex` (or `Utils::Bottles::native_regex`). See a few lines below.",
		"created_at" : "2016-05-07T20:15:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 62422186,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`tag` should be `Regex.escape`d here.",
		"created_at" : "2016-05-07T20:17:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 62422268,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "GCC 4.0, GCC 4.2, and LLVM-GCC all look pretty Mac-specific to me. But can probably be fixed in a follow-up PR.",
		"created_at" : "2016-05-07T20:23:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 62433632,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "The current cross-platform work is to have code that works on Linux and OS X without any custom `Homebrew/brew` changes. Stuff around e.g. `gcc_40` is a stage of porting that is still a while off.",
		"created_at" : "2016-05-08T15:24:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 62433662,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Although `Regexp` 😉 ",
		"created_at" : "2016-05-08T15:27:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 62433684,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Yes, I guessed so and am totally fine with that. (Hence my last sentence above.)",
		"created_at" : "2016-05-08T15:30:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 62433703,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Added by mistake, not needed.",
		"created_at" : "2016-05-08T15:32:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 62433730,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "That will always be a point of confusion for me, as different languages tend to abbreviate this differently. I guess I was most influenced by the recent demand for replacing `/PATTERN/` with `/REGEX/` (note the missing “P”) in the output of `brew help`. :wink:",
		"created_at" : "2016-05-08T15:33:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 168
	},
	{
		"id" : 61677932,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "- I think it would be good to make the pattern `^parent: +\\h+ (.+)$` instead of `^parent: *\\h* (.*)$`. Judging from the example output it seems reasonable to expect that there is always whitespace after the colon, always a hexadecimal ID, and always a non-empty date/time.\r\n- Looking at the example output you provided makes me think we should be parsing the `uuid:` line instead of the `parent:` line. I tried to confirm that by searching Fossil's online documentation, but failed to find a definitive answer. Can you check that and/or point me at the relevant documentation?",
		"created_at" : "2016-05-01T01:35:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 171
	},
	{
		"id" : 61678015,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "@UniqMartin agree on regex.\r\n\r\nThanks a lot about `parent` and `uuid` stuff, I can't explain why I wrote `parent` instead of `uuid`. It's something wrong with me.",
		"created_at" : "2016-05-01T01:45:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 171
	},
	{
		"id" : 61678101,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> It's something wrong with me.\r\n\r\nThere's nothing wrong with you! That's just human and happens to all of us all the time. 😸",
		"created_at" : "2016-05-01T01:56:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 171
	},
	{
		"id" : 61684374,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Would be good to point to the analytics documentation in here and use the language from there (anonymous user behaviour analytics)",
		"created_at" : "2016-05-01T09:35:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 173
	},
	{
		"id" : 61685298,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This should be\r\n\r\n```\r\n#:  * `analytics` (`on`|`off`):\r\n```\r\n\r\nto be consistent with other documentation we have where there's a list of mandatory alternatives.",
		"created_at" : "2016-05-01T11:02:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 173
	},
	{
		"id" : 61685403,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd like to see every `when` clause of this `case` to be refactorded into a separate method to keep `Homebrew.analytics` short and readable. And I wonder if we should also complain when passing more than one named argument. (Let's try to be more strict in our argument handling for new `brew` commands we introduce.)",
		"created_at" : "2016-05-01T11:09:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 173
	},
	{
		"id" : 61685918,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "done",
		"created_at" : "2016-05-01T11:41:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 173
	},
	{
		"id" : 61685920,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "done.",
		"created_at" : "2016-05-01T11:41:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 173
	},
	{
		"id" : 61685935,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I keep it is for now. Although I think it's better to put them into separate methods, I think we should wait when we implement command in class. Otherwise, it's too easy to pollute global namespace. ",
		"created_at" : "2016-05-01T11:42:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 173
	},
	{
		"id" : 61687304,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Minor nit, but so far we seem to prefer either\r\n\r\n```shell\r\ncase \"$HOMEBREW_COMMAND\" in\r\n  --prefix|analytics|command|commands)\r\n    return\r\n    ;;\r\nesac\r\n```\r\n\r\nor\r\n\r\n```shell\r\ncase \"$HOMEBREW_COMMAND\" in\r\n  --prefix|analytics|command|commands) return;;\r\nesac\r\n```",
		"created_at" : "2016-05-01T13:45:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 173
	},
	{
		"id" : 61686975,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This should be updated to a url in homebrew/core as it's just an example.",
		"created_at" : "2016-05-01T13:19:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 175
	},
	{
		"id" : 61687241,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I agree. Fixed it!",
		"created_at" : "2016-05-01T13:39:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 175
	},
	{
		"id" : 61687047,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "\"direction of the project\" -> \"direction of the project,\"\r\n\"to influence\" -> \"to influence it\"",
		"created_at" : "2016-05-01T13:26:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 176
	},
	{
		"id" : 61687143,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "As delightful as this title is, perhaps there's a less provocative way to say the same thing.",
		"created_at" : "2016-05-01T13:34:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 176
	},
	{
		"id" : 61687543,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I can live with the tone of this title, as this document is primarily aimed at maintainers. That said, I'd prefer to substitute the greater-than sign with a word like “Above”, “Trump”, …",
		"created_at" : "2016-05-01T14:07:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 176
	},
	{
		"id" : 61688980,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "“`to not be`” → “`not to be`”?",
		"created_at" : "2016-05-01T16:07:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 176
	},
	{
		"id" : 61722793,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I wonder if `REGEX` makes more sense than `PATTERN`",
		"created_at" : "2016-05-02T10:06:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 177
	},
	{
		"id" : 61764515,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Probably, because IIRC \"pattern\" in Ruby and `make`/CMake documentation usually refers to a file globbing pattern instead of a regex, and there are often areas that support both.",
		"created_at" : "2016-05-02T16:42:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 177
	},
	{
		"id" : 61766697,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`/REGEX/` works equally well for me and I'm happy to make that change. Has anyone else an opinion on that?",
		"created_at" : "2016-05-02T16:58:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 177
	},
	{
		"id" : 61722499,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "typo on `HOMWBREW_LOCK_PID_FILE`",
		"created_at" : "2016-05-02T10:02:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61722538,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Would be good to avoid repeating this text.",
		"created_at" : "2016-05-02T10:02:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61722635,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "What's the license?",
		"created_at" : "2016-05-02T10:04:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61722664,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I wonder if just using `ps aux | grep` isn't enough?",
		"created_at" : "2016-05-02T10:04:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61723012,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "That definitely won't work. You need an atomic operation to create a lock.",
		"created_at" : "2016-05-02T10:09:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61723051,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Thanks for catching this.",
		"created_at" : "2016-05-02T10:10:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61723059,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Fixed.",
		"created_at" : "2016-05-02T10:10:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61723999,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Sure, I don't mean to create a mutex, I meant to avoid executing two `update`s at once.",
		"created_at" : "2016-05-02T10:25:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61724270,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "But without mutex, you cannot avoid multiple updates. e.g. two updates are started at almost the same time. ",
		"created_at" : "2016-05-02T10:30:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61724363,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Also this lock is crucial for future `install-vendor` command. ",
		"created_at" : "2016-05-02T10:32:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61724690,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I don't agree; `ps` will show the process before a single line of code is executed.",
		"created_at" : "2016-05-02T10:39:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61731526,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "OK, I see your point. However, such approach is kinda limit. For example, `ps` will show relative path if you run brew by `./bin/brew ...`.\r\n\r\nEven more, it doesn't support lock inside brew invoking, which is what I needed when we start to auto install vendor ruby for old OS.",
		"created_at" : "2016-05-02T12:15:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61732032,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "There is no mention of license on that website. However, I think I have somehow reimplemented it on my own.",
		"created_at" : "2016-05-02T12:22:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61733055,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Ok. I'd remove the ref if we don't have one and you've reimplemented.",
		"created_at" : "2016-05-02T12:35:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61733297,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I think that approach could work fine for both but if other maintainers don't agree I don't feel strongly.",
		"created_at" : "2016-05-02T12:38:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61765696,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I agree with xu-cheng here; just using `ps` will probably have a larger window of possible failure. This current implementation is racy too, because these file I/O operations are not atomic, especially if I/O buffering is involved. But it seems less likely to fail in practice, and would be easier to diagnose failure on.\r\n\r\nMaybe we could use `File.flock` to do true atomic locking operations? That could actually eliminate the race condition, and has the bonus that the lock is automatically released when the process exits so less \"cleanup\" code would be needed.",
		"created_at" : "2016-05-02T16:50:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61776358,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I was wrong about this still being meaningfully racy: that mkdir is atomic, and that's what's doing the locking; the subsequent non-atomic I/O operations are protected by the mkdir.",
		"created_at" : "2016-05-02T18:01:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61785651,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm in favor of the current implementation. Using an atomic `mkdir` as a mutex is a pretty standard technique in shell scripting as far as I know.",
		"created_at" : "2016-05-02T19:01:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61787420,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This looks a bit weird, given that we've managed to capitalize all directory names in there thus far. But I'm not feeling too strongly about this.",
		"created_at" : "2016-05-02T19:13:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61787764,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Like in Ruby code with `require`s, I'd prefer to move this `source` to the top of the file unless there's a very good reason for it to be here. (I don't think there is.)",
		"created_at" : "2016-05-02T19:15:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61788180,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Probably the most important thing about this is that all the shell code that will be executed is loaded and parsed before we enter `homebrew-update`.",
		"created_at" : "2016-05-02T19:18:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61789334,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "This also feels like it should live in either `tmp` or wherever Homebrew's existing locks live.",
		"created_at" : "2016-05-02T19:25:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61789458,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Use `-eq` for numerical comparison instead of `=`.",
		"created_at" : "2016-05-02T19:26:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61789783,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Agreed. That should probably be a place where we're also unlikely to be affected by permission issues and sadly `/usr/local/Library` doesn't always fall into that category.",
		"created_at" : "2016-05-02T19:28:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61794984,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm not sure this will behave 100% correctly. I believe it could be stealing the lock from another process, but I have to think some more about this (and maybe run some tests). But I'm happy to hear about why I'm mistaken.",
		"created_at" : "2016-05-02T20:05:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61800685,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah, would make more sense. One minor thing: it should be a per-repo lock, not a system-wide one, if we're being sticklers for correctness.\r\n\r\nI could see this actually being a use case, bc if I were running multiple brew installations for testing; I'd sometimes want to fire off an update for all of them, and would be convenient if it were safe to do that in parallel. Including a lunging of the repo path (and maybe host) in the file name of the actual lock directory would be sufficient.\r\n\r\nCould also go on /var/lock, which I think is conventional for this sort of thing.",
		"created_at" : "2016-05-02T20:43:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61910533,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Maybe use `TMPDIR` if set instead as OS X differentiates between system and use temporary directories.",
		"created_at" : "2016-05-03T16:20:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61910945,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I think it'd be more robust to `trap \"unlock update\" EXIT` rather than manually adding an `unlock` at each exit point.",
		"created_at" : "2016-05-03T16:22:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61911391,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "However, we have different trap used in update. And bash doesn't support nested trap, right?",
		"created_at" : "2016-05-03T16:25:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61916430,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Think it supports multiple traps on different signals.",
		"created_at" : "2016-05-03T16:59:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61916466,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "And, if not, I think it would be best if all traps called a function.",
		"created_at" : "2016-05-03T16:59:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62663836,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Please let's not introduce a Python dependency.",
		"created_at" : "2016-05-10T12:43:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62663971,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This doesn't introduce a Python dependency. It is just another alternative if you don't have ruby and flock. But that to be said, I'm fine to remove this case. ",
		"created_at" : "2016-05-10T12:44:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62664001,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Would be good to explain why `3` is used everywhere.",
		"created_at" : "2016-05-10T12:45:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62664171,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "There is no reason any number above 2 can be used.",
		"created_at" : "2016-05-10T12:46:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62664176,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Wondering if this should be `$TMPDIR`",
		"created_at" : "2016-05-10T12:46:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62664272,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I don't think any of these need to look at `/usr/bin` specifically.",
		"created_at" : "2016-05-10T12:47:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62664310,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I would avoid the $TMPDIR env variable. Because if it is set to different path, the lock won't work.",
		"created_at" : "2016-05-10T12:47:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62664429,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "What if another script is running and also using `3`? Regardless, the justification should be documented and `3` pulled into a variable where possible.",
		"created_at" : "2016-05-10T12:48:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62664486,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "When would it be set to a different path?",
		"created_at" : "2016-05-10T12:48:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62664638,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Probably a stupid question but colour me curious. Why are we only explicitly checking system tools here instead of more broadly using something like `/usr/bin/env ruby`?",
		"created_at" : "2016-05-10T12:50:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62664743,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It is just that users can set this env variable. One of common example is that on multi-users machines, different users may set it to different path.",
		"created_at" : "2016-05-10T12:50:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62664866,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Rethink a bit, I think I will just use `ruby`",
		"created_at" : "2016-05-10T12:51:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62665093,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "👍. I missed Mike's comment on a similar note just above as I didn't refresh beforehand. Apologies.",
		"created_at" : "2016-05-10T12:53:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62665387,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "OK.",
		"created_at" : "2016-05-10T12:55:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62665485,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Honestly I think we can just use `ruby` and skip even `flock` for now. We're not introducing additional requirements on Linuxbrew which already requires a Ruby to be installed and is a long way off being able to use an unmodified `brew`.",
		"created_at" : "2016-05-10T12:55:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62665515,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Thanks.",
		"created_at" : "2016-05-10T12:56:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62665824,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "OK, I tried to use a variable. However, Bash 3 doesn't support to use variable for FD.",
		"created_at" : "2016-05-10T12:57:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62665992,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : ">  Linuxbrew which already requires a Ruby to be installed and is a long way off being able to use an unmodified brew.\r\n\r\nI think this will change in this month. i.e. after `install-vendor` PR.",
		"created_at" : "2016-05-10T12:58:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62666738,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "So may I ask what kind of document do you want for this?",
		"created_at" : "2016-05-10T13:04:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62667551,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "An explanation of why `3` and not `4` etc. and what will happen if another process is also locking `3` (I know it'll be fine but that's not obvious without an understanding of what `3` refers to).",
		"created_at" : "2016-05-10T13:09:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62667660,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "And would still be good to use a variable elsewhere where you can e.g. in `_create_lock`",
		"created_at" : "2016-05-10T13:10:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62667858,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Should I change 3 to a higher value like 100 or something?",
		"created_at" : "2016-05-10T13:11:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62668038,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "It'll still be a long way off being able to use an unmodified `brew`; `brew tests` does not even pass yet.",
		"created_at" : "2016-05-10T13:12:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62668212,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "`3` is fine: there just needs to be a comment explaining why it was chosen and not 0, 1, 2, 4, 800 and what happens if another process also uses `flock` on `3` at the same time.",
		"created_at" : "2016-05-10T13:13:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62668330,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Oh, I was meaning that this will help Linuxbrew when it merged this PR's change. ",
		"created_at" : "2016-05-10T13:14:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62668962,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Updated.",
		"created_at" : "2016-05-10T13:18:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62713389,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "My main issue with this, but that's unlikely to impact many users, is that there's no distinction between different Homebrew installations on the same machine. Once this is merged I won't be able to fire off a `brew update` in all of them simultaneously, or will I?",
		"created_at" : "2016-05-10T17:17:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62715609,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "“[…] in process.” ➡️ “[…] in progress.”",
		"created_at" : "2016-05-10T17:29:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62718588,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Can this be used by multiple processes using this file descriptor at once?",
		"created_at" : "2016-05-10T17:47:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62799051,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "@UniqMartin There are two solutions, one is to put LOCK_DIR into HOMEBREW_LIBRARY. The second is to do some thing like\r\n```bash\r\nlock_file=\"/tmp/homebrew${HOMEBREW_REPOSITORY//\\//-}-${name}.lock\"\r\n```\r\n\r\nWhich one do you think is better?",
		"created_at" : "2016-05-11T06:50:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62799152,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "FD is unique per process. It is only shared to subprocess. So I don't think there is a problem here.",
		"created_at" : "2016-05-11T06:51:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62805665,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think both these options are not optimal. Using `HOMEBREW_LIBRARY` or something similar is more likely to break due to permission issues. Including `HOMEBREW_REPOSITORY` in `lock_file` can lead to pretty long and ugly lock file names. I think the latter comes with fewer problems, so I'd prefer that.",
		"created_at" : "2016-05-11T07:59:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62806400,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can we make this a local variable and move it into `lock`? It could be passed to `_create_lock` via function arguments.",
		"created_at" : "2016-05-11T08:05:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62807919,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Yeh, that's what I was trying to tease out into a comment 😉 ",
		"created_at" : "2016-05-11T08:19:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62807932,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "(as it's not necessarily obvious to everyone)",
		"created_at" : "2016-05-11T08:19:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62811767,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Updated",
		"created_at" : "2016-05-11T08:48:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 62811780,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Updated",
		"created_at" : "2016-05-11T08:48:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 181
	},
	{
		"id" : 61840591,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "You can use `java_home = ENV[\"JAVA_HOME\"]` to git it directly instead of shelling out.",
		"created_at" : "2016-05-03T05:53:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 183
	},
	{
		"id" : 61840608,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "If `$JAVA_HOME` isn't defined, this should fall back to the old behavior of calling `/usr/libexec/java_home`.",
		"created_at" : "2016-05-03T05:54:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 183
	},
	{
		"id" : 61840730,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "In fact, since `describe_java` returns a list of all the installed Java versions, it should probably do both `$JAVA_HOME` and `/usr/libexec/java_home` and combine their results (removing duplicates).",
		"created_at" : "2016-05-03T05:57:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 183
	},
	{
		"id" : 61840758,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I'd make this `java_exe = \"#{java_home}/bin/java\"`, since this is distinct from what `java_home` means.",
		"created_at" : "2016-05-03T05:58:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 183
	},
	{
		"id" : 61840803,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "See if you can do this parsing using native Ruby string manipulation code instead of shelling out to awk. And we prefer `popen_read` or something similar to `%x(...)`.",
		"created_at" : "2016-05-03T05:59:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 183
	},
	{
		"id" : 61810971,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "- You need to escape the dot in the regular expression: `.` ➡️ `\\.`.\r\n- Aside from that, is there a reason not to make that `/^\\d+\\.\\d+$/`?\r\n  - We don't really care how many digits there are in the individual parts of the version number, but not making this assumption makes things more robust.\r\n  - The surrounding parentheses are also not needed.\r\n  - We probably don't want to match things like `garbage5.18more-garbage`, hence the anchors.",
		"created_at" : "2016-05-02T21:49:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 184
	},
	{
		"id" : 61812431,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Looking at the `perl --version` output I think it's worth making the match a bit stricter, too (a bit like in the other comment). I think this should have essentially the same effect, but be more robust:\r\n\r\n```ruby\r\nperl_version = Utils.popen_read(perl, \"--version\")[/\\(v(\\d+\\.\\d+)(?:\\.\\d+)?\\)/, 1]\r\n```\r\n\r\nThis will match the version inside `(v5.16.3)` when seeing a version line like `This is perl 5, version 16, subversion 3 (v5.16.3) built for darwin-thread-multi-2level` and return `5.16`.\r\n\r\nIt also works if the output should happen to be just `(v5.16)`.",
		"created_at" : "2016-05-02T22:00:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 184
	},
	{
		"id" : 61813652,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "> You need to escape the dot in the regular expression: . ➡️ \\..\r\n\r\n👍 Nice spot, I missed that. \r\n\r\n> Aside from that, is there a reason not to make that /^\\d+\\.\\d+$/?\r\n\r\nTo be honest, I mostly ripped this requirement straight out of the Ruby one because they serve the same purpose and now the `keg_only` status isn't a problem it didn't need the \"special touches\" of the previous one.\r\n\r\nThe change of regex from `/(\\d\\.)+\\d/` in Ruby to `/(\\d.\\d{1,2})/` here is because we care about the difference between say Perl 5.18 and Perl 5.19, whereas the Ruby Req only cares about the `2.3` of `2.3.1` and such. \r\n\r\nIt also felt relatively safe to stick to the two digits because a Perl version `x.100.x` seems unlikely 😄. Your suggestion seems fine, poked it locally.",
		"created_at" : "2016-05-02T22:10:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 184
	},
	{
		"id" : 61813908,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Yeah, it outputs the same thing entirely as far as I can see. I'm perfectly happy to let my preference for as much simplicity as possible die a little if it makes you happier on robustness here.",
		"created_at" : "2016-05-02T22:12:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 184
	},
	{
		"id" : 61814545,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Thanks! It does.",
		"created_at" : "2016-05-02T22:17:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 184
	},
	{
		"id" : 61844065,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "How about:\r\n```ruby\r\nformula.deps.any? { |d| d.name == \"check\" && (d.optional? || d.recommended?) }\r\n```\r\n\r\nNote, the `recommended?` is used to fix the false positive of `--without-check`.",
		"created_at" : "2016-05-03T07:02:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 188
	},
	{
		"id" : 61849994,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-05-03T08:14:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 188
	},
	{
		"id" : 61870782,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah. Changed to use that.",
		"created_at" : "2016-05-03T12:10:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 188
	},
	{
		"id" : 62199734,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think you could just check `which(@language.to_s)` for this, which is a more generalized approach.",
		"created_at" : "2016-05-05T15:02:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 194
	},
	{
		"id" : 62199794,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Style nit. Probably want to use `+=` instead of `<<``. ",
		"created_at" : "2016-05-05T15:03:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 194
	},
	{
		"id" : 62200310,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I don't think we want a general approach here; we only want to flag stuff not installed with the system.",
		"created_at" : "2016-05-05T15:06:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 194
	},
	{
		"id" : 62200479,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "You and Baptiste disagreed about this in the original PR, but I have no strong opinions on which method is better 🙈 ",
		"created_at" : "2016-05-05T15:07:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 194
	},
	{
		"id" : 62200597,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "^ 👍 Yup. We essentially want to make sure if a formula says:\r\n\r\n```ruby\r\ndepends_on \"virtualenv\" => :python\r\n```\r\nUsers aren't told they may need to `brew install python`.",
		"created_at" : "2016-05-05T15:08:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 194
	},
	{
		"id" : 62201248,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Technically, `<<` is better from performance aspect. But `<< <<-EOS` is a little weird to me from code readability aspect. I have no strong perference as well.",
		"created_at" : "2016-05-05T15:12:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 194
	},
	{
		"id" : 62201468,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "But `which` will cover the system installation situation. So I don't see any problem here. In addition, it will check whether users install non system staff,say python3, from different source other than Homebrew.",
		"created_at" : "2016-05-05T15:14:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 194
	},
	{
		"id" : 62202088,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "It'll also mean if someone has it installed outside of Homebrew it won't prompt them to install. I don't think this is correct behaviour.",
		"created_at" : "2016-05-05T15:18:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 194
	},
	{
		"id" : 62202270,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I'm happy to favour readability with `+=` over tiny performance gains if nobody else objects.",
		"created_at" : "2016-05-05T15:19:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 194
	},
	{
		"id" : 61919137,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Maybe name this `GIT_URL` or `git_url`; mixed case seems weird for Bash.",
		"created_at" : "2016-05-03T17:16:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61919351,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Need to cleanup every time? Probably should do it after `install`?",
		"created_at" : "2016-05-03T17:18:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61919366,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I choose Git, because it will be part of path name.",
		"created_at" : "2016-05-03T17:18:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61919512,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I'd avoid mixed-case in the path name too; make it consistent with the Cellar.",
		"created_at" : "2016-05-03T17:18:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61919666,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Probably worth doing just `git/1.2.3` to be consistent with the `Cellar`. Putting this in `HOMEBREW_LIBRARY` also feels a bit odd when we pretty much just keep libraries in there.",
		"created_at" : "2016-05-03T17:19:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61919749,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Is this a symlink?",
		"created_at" : "2016-05-03T17:20:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61919789,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Also I'd `vendor` rather than `Vendor`",
		"created_at" : "2016-05-03T17:20:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61919861,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Yes.",
		"created_at" : "2016-05-03T17:20:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61920009,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I'd just sniff the `which ruby` version instead; means users with Rubys installed from elsewhere e.g. `rbenv` can have this work and makes it easier for Linuxbrew too.",
		"created_at" : "2016-05-03T17:21:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61920054,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "`Failed`",
		"created_at" : "2016-05-03T17:22:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61920191,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Technically you only need `install-vendor` for Ruby commands. ",
		"created_at" : "2016-05-03T17:22:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61920305,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I'm not sure I understand what this symlink does?",
		"created_at" : "2016-05-03T17:23:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61920322,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "FYI, I'm just choosing the file structure which is similar to what Apple does in `/System/Library/Frameworks/Ruby.framework/Versions/`",
		"created_at" : "2016-05-03T17:23:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61920453,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "FWIW, All of current directories in HOMEBREW_LIBRARY has a upper case in first letter.",
		"created_at" : "2016-05-03T17:24:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61920723,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This is for OS X to speed up performance by avoiding unnecessary subprocess. Noted that most of users will just continue to use Ruby 2.0 offered by Apple.  ",
		"created_at" : "2016-05-03T17:25:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61920822,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Parsing argument is hard. 😉 ",
		"created_at" : "2016-05-03T17:26:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61920932,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Cleanup first can (a) support reinstall (b) simplify the logic of clean.",
		"created_at" : "2016-05-03T17:27:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61921161,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : ">  Putting this in HOMEBREW_LIBRARY also feels a bit odd when we pretty much just keep libraries in there.\r\n\r\nThis is part of library. As all of these vendor tools are designed to only work by Homebrew internally. ",
		"created_at" : "2016-05-03T17:28:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61922225,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "We will always use symlink to find the vendor tool. As result, to update it(e.g. OpenSSL Security update) is as simple as updating the symlink.  ",
		"created_at" : "2016-05-03T17:34:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62002212,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "🆒 ",
		"created_at" : "2016-05-04T08:11:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62002262,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "You could add a function call into the if/else at the end of the file.",
		"created_at" : "2016-05-04T08:12:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62002298,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "What if you cleanup and then install fails?",
		"created_at" : "2016-05-04T08:12:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62002439,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Will let other maintainers chip in here. Other places that feel like they might be a better fit are:\r\n- Library/Homebrew/vendor/ruby/2.0.0/\r\n- opt/vendor/ruby/2.0.0",
		"created_at" : "2016-05-04T08:13:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62002492,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "This isn't a framework or app bundle, though, and regular Unix-installs don't use this pattern.",
		"created_at" : "2016-05-04T08:14:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62002539,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Ok.",
		"created_at" : "2016-05-04T08:14:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62080943,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "- `Library/Vendor` – Works for me (including the capitalized name for consistency with other directories in `Library`) and would help to keep the hierarchy flat.\r\n- `Library/Homebrew/vendor` – Also works for me, but is a bit more buried and is somewhat less friendly to grepping all of `Library/Homebrew`.\r\n- `opt/vendor` – Feels a bit out of place and I wouldn't want it to be confused with regular formulae that are symlinked there.",
		"created_at" : "2016-05-04T17:34:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62082548,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "On the stuff placed inside this directory: Like Mike I prefer to keep it simple, thus `ruby/2.x.y` would be preferable over `Ruby/Versions/2.x.y`. But I don't have strong feelings. Depending on where this ends up in, stuff like `ruby` will need to be capitalized (or not) to not look odd.",
		"created_at" : "2016-05-04T17:44:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62172902,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "`Library/Homebrew/vendor/ruby/2.x.y` would be my favourite choice. It's not uncommon that you want to do a `grep` with tools that allow you to exclude folders and this would allow excluding just `Library/Homebrew/vendor` rather than both `Library/Homebrew/vendor` and `Library/Vendor`.",
		"created_at" : "2016-05-05T10:51:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62173008,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I think this misses the case that they are are on e.g. 10.8 but already have a valid Ruby 2.0 in their path. `ruby --version` is really quick:\r\n```\r\n/usr/bin/time ruby --version\r\nruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin15]\r\n        0.08 real         0.02 user         0.04 sys\r\n```",
		"created_at" : "2016-05-05T10:53:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62380935,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "I like `Library/Homebrew/vendor` as well, especially since it's consistent with where Homebrew (and Tigerbrew) have placed vendored content in the past.",
		"created_at" : "2016-05-06T19:43:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62987948,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Use `$HOMEBREW_CURL`?",
		"created_at" : "2016-05-12T09:13:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62987975,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I keep it as it is because this is more simple.",
		"created_at" : "2016-05-12T09:14:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62988018,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "May just check the name too and then this code will be self-documenting?",
		"created_at" : "2016-05-12T09:14:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62988140,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "`Cannot verify the checksum ('shasum' or 'sha256sum' not found)!` ",
		"created_at" : "2016-05-12T09:15:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62988176,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Noted, for most of use case, `brew install-vendor` should be invoked automatically by brew itself. And we don't want to use unnecessary disk for old unused version.",
		"created_at" : "2016-05-12T09:15:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62988179,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Also output what the expected/actual value is.",
		"created_at" : "2016-05-12T09:15:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62988328,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Can we remove the Git stuff for now and make this PR just about Ruby?",
		"created_at" : "2016-05-12T09:16:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62988424,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : ":+1: for doc. \r\n\r\n> May just check the name too\r\n\r\nYou mean check both file type and opt name. Or only one of them?",
		"created_at" : "2016-05-12T09:17:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62988497,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Another ping on this.",
		"created_at" : "2016-05-12T09:17:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62988528,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Why does this need to move?",
		"created_at" : "2016-05-12T09:18:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62988549,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Or just makes more sense with the other Ruby stuff?",
		"created_at" : "2016-05-12T09:18:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62988576,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Ok, I put git stuff here in order  to illustrate how vendor name choosing will work. Will remove it for this PR.",
		"created_at" : "2016-05-12T09:18:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62988644,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I think we should do this even on `HOMEBREW_OSX` if `HOMEBREW_RUBY_PATH` does not exist.",
		"created_at" : "2016-05-12T09:18:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62988691,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Put ruby related logic together.",
		"created_at" : "2016-05-12T09:19:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62988778,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I think we should be stricter about the Ruby version here. We should check for at least Ruby 2 (not `0` or `3`) and consider doing e.g. Ruby 2.0.0 if we hit backwards compatibility issues.",
		"created_at" : "2016-05-12T09:19:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62988992,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "If I recall correctly, we try to avoid this before because user's ruby may be buggy(e.g. jruby). And I think we should only use system ruby or vendor ruby.\r\n\r\nAnother case we want to avoid this is that, if `which ruby` returns homebrew ruby and users try to `brew reinstall/upgrade ruby` , it will crash.",
		"created_at" : "2016-05-12T09:21:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62989124,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "This should be on the Homebrew org so more than just you can publish releases. 👍 for them being Homebrew formulae although I'd like to see them more documented in case there's bugs with how we build this Ruby. Did you have any luck with a 32-bit build (that's the default on 10.5 anyway)?",
		"created_at" : "2016-05-12T09:22:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62989323,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Yeh, check both or just name 👍 ",
		"created_at" : "2016-05-12T09:24:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62989368,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This is for test purpose for time being. We could move my `homebrew-portable` repo to homebrew if needed in the future.\r\n\r\nThis is built with 64bit on 10.5. I can build 32bit, but I think 64bit is the default for most OS X.",
		"created_at" : "2016-05-12T09:24:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62989402,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Will cleanup ensure there's always at least one good version?",
		"created_at" : "2016-05-12T09:24:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62989425,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "(even if outdated)",
		"created_at" : "2016-05-12T09:24:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62989589,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Sorry, missed your note. I think it would be good to put this in a function and only use it for Ruby commands.",
		"created_at" : "2016-05-12T09:26:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62989795,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Outdated version will not work because we should always use `opt` path for this.",
		"created_at" : "2016-05-12T09:27:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62989965,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I don't know; I think the majority of cases I've seen a missing system Ruby have been when people have used an official Ruby installer, `rbenv` or `rvm` and deleted it. I think we should try to let people use those tools instead of requiring our vendored Ruby if possible. Ideally I'd even add a `.ruby-version` to the `HOMEBREW_REPOSITORY` root which would ensure those tools pick the \"right\" Ruby. Otherwise we're not letting people have an option to build from source, really.",
		"created_at" : "2016-05-12T09:28:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62991332,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I don't think we want to more customize in this area. IMO, robust is more important here. ",
		"created_at" : "2016-05-12T09:36:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62991544,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "So a `Library/Homebrew/utils/ruby.sh` file for `setup-ruby-path` function?",
		"created_at" : "2016-05-12T09:38:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62991932,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Then I'm 👎 on cleanup up the old version (or even updating the symlink) until we know we have a good, working, new version. Otherwise if I `brew update` on a ✈️ but Ruby hasn't been downloaded/installed yet then it'll cleanup before failing the download.",
		"created_at" : "2016-05-12T09:41:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62991955,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Yeh, seems good 👍 ",
		"created_at" : "2016-05-12T09:41:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62992234,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Well, currently you'll not be handling the e.g. `jruby` case on non-OS X. Some people will be upset if they are required by Homebrew to run binaries provided by us and unable to build from source. I'm happy for this to be very strict and we check the exact version (or at least major/minor version) of Ruby matches Homebrew's.",
		"created_at" : "2016-05-12T09:42:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62993732,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "But how do you propose to solve the problem of auto update vendor ruby? Noted, vendor ruby may be updated not only because ruby update but possible security update in our end.",
		"created_at" : "2016-05-12T09:54:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62996160,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "The typical pattern/flow I've seen for deployment like this:\r\n- update the checksum/version in a PR on our end\r\n- if the checksum/version is different to what's expected, try to install the new Ruby\r\n- if the new Ruby is installed and passes a simple test: switch the symlink over to point to it\r\n- when the symlinked Ruby is working: cleanup the non-symlinked Rubies\r\n- if the new Ruby doesn't work or couldn't be installed: fall back to using the old Ruby and don't cleanup.\r\n\r\nIt's also worth considering how the case will be handled if someone is checking out an old branch and a new branch and switching between them: perhaps if `HOMEBREW_DEVELOPER` is set it should keep the ~2 oldest Rubies rather than only the newest.",
		"created_at" : "2016-05-12T10:12:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62996280,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Can this be moved to after the Bash command check is so it's only done for Ruby commands? Thanks.",
		"created_at" : "2016-05-12T10:13:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62996426,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "As the comment was lost earlier: do we have a 32-bit 10.5 Ruby we can use/test on 10.11?",
		"created_at" : "2016-05-12T10:14:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62996580,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "`Cannot find a vendored version of $VENDOR_NAME\" for your platform!`",
		"created_at" : "2016-05-12T10:15:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62997049,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I think this will handle Ruby bash commands incorrectly?",
		"created_at" : "2016-05-12T10:19:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62997415,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "That produces a desirable edge-case actually: what if a Bash command calls a Ruby command? We'll need to handle that case anyway when someone runs `brew update` which will run the old version of this shell script and then the `master` version of `brew update-report` which will require Ruby 2.0.",
		"created_at" : "2016-05-12T10:22:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 62997429,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Sorry, my mistake, I'm wrong here.",
		"created_at" : "2016-05-12T10:22:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63000623,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I didn't save the 32bit build yet. I can build one if you needed. But why cannot we use 64bit version? ",
		"created_at" : "2016-05-12T10:51:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63002023,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "The default on 10.5 is 32-bit not 64-bit and both 10.5 and 10.6 do not mandate a 64-bit processor.",
		"created_at" : "2016-05-12T11:05:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63004276,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "First of all, It is important to notice that for most of users they will continue to use system ruby/git. vendor version is only used for old systems.\r\n\r\n> if the checksum/version is different to what's expected\r\n\r\nThis is the step that has the trouble. How do you compare the version, especially for git(which will be invoked by ENV/scm/git script)?\r\n\r\n> perhaps if HOMEBREW_DEVELOPER is set it should keep the ~2 oldest Rubies rather than only the newest.\r\n\r\nHow do you know version difference between old and new in Bash? I would like not to over complicate the bash code.",
		"created_at" : "2016-05-12T11:29:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63005039,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Would be good to move before this PR is merged. 32-bit should be used on 10.5 as I believe it should still work up to 10.11 and will work on more systems (as you don't seem to be checking for 32-bit support here).",
		"created_at" : "2016-05-12T11:37:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63005455,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I have updated to use 32bit ruby. \r\n\r\nAlso FYI, if we move to ruby 2.1, I will be able to build universal version ruby.",
		"created_at" : "2016-05-12T11:41:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63005474,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "> First of all, It is important to notice that for most of users they will continue to use system ruby/git. vendor version is only used for old systems.\r\n\r\nSure but it's important that we make sure we don't break things for those users if we want to continue to support Homebrew there.\r\n\r\n> This is the step that has the trouble. How do you compare the version, especially for git(which will be invoked by ENV/scm/git script)?\r\n\r\nHave a file e.g. `vendor/ruby-version` that contains the latest version rather than the `opt` symlink and only move the symlink or remove the last version when that version is known to be working.\r\n\r\n> How do you know version difference between old and new in Bash? I would like not to over complicate the bash code.\r\n\r\nCould always keep the latest and the next newest (using created/modification dates) e.g.\r\n\r\n`ls -t | grep -Ev '^(opt|$current_version)' | tail -n +4 | xargs rm -rf`\r\n",
		"created_at" : "2016-05-12T11:42:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63005898,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "> Have a file e.g. vendor/ruby-version that contains the latest version rather than the opt symlink and only move the symlink or remove the last version when that version is known to be working.\r\n\r\nMy current question is how to handle it for git. For example, if we add following code to `ENV/scm/git`\r\n```ruby\r\nif File.exist?(HOMEBREW_LIBRARY/\"vendor/git/opt/bin/git\")\r\n  exec HOMEBREW_LIBRARY/\"vendor/git/opt/bin/git\", *ARGV\r\nend\r\n```\r\nBut the `ENV/scm/git` should not invoke `brew install-vendor git`, it should be called by `brew update` or `Utils.ensure_git_installed!`.\r\n",
		"created_at" : "2016-05-12T11:46:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63007453,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "🆒 on 32-bit. I think we should stick on Apple's version for now.",
		"created_at" : "2016-05-12T12:00:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63007705,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "@xu-cheng Can we pull this into PR comments? It's hard to \"find\" these comments now. Assuming there has been a `git --version` check before the initial `opt` symlink is set I think that code is fine: a symlink there means we know it's been setup correctly. I also think it's worth worrying about Git issues in a future PR; I'm still not convinced using `install-vendor` is necessarily the best approach for Git when we have bottles and the ability to install using the formula directly.",
		"created_at" : "2016-05-12T12:03:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63032644,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Maybe just put this in `HOMEBREW_CACHE` instead to avoid unnecessary redownloading if the already downloaded version has the same checksum.",
		"created_at" : "2016-05-12T14:43:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63032816,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "As mentioned below, Bintray feels like it may be a better fit for storage here and this repo should be moved into the Homebrew org before we merge this.",
		"created_at" : "2016-05-12T14:44:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63032909,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Could combine these `if`s for now so only one `else` is needed.",
		"created_at" : "2016-05-12T14:45:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63032946,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Can remove the comment now that the code documents this.",
		"created_at" : "2016-05-12T14:45:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63037904,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I will try to figure how to create a bash version of `HOMEBREW_CACHE` logic.",
		"created_at" : "2016-05-12T15:11:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63038020,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "As I said, this is for test only. A final build will be hosted by bintary.",
		"created_at" : "2016-05-12T15:12:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63038073,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : ":+1: ",
		"created_at" : "2016-05-12T15:12:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63038315,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "You mean to e.g. find the path? 👍 ",
		"created_at" : "2016-05-12T15:13:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63038358,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Before merge, right? 👍 ",
		"created_at" : "2016-05-12T15:14:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63038643,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I'm not sure what do you mean here. Noted, there will be three builds: OS X Intel, OS X PPC, Linux,",
		"created_at" : "2016-05-12T15:15:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 63042823,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Will they all be filled out before this PR is merged? If so: can ignore this.",
		"created_at" : "2016-05-12T15:37:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 64156163,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@xu-cheng Just occurred to me: might also be nice to have an opt-in variable to use the vendored Ruby even if `HOMEBREW_RUBY_PATH` is correct. I could see this being useful for CI to make sure we're testing our vendored Ruby there on e.g. Mavericks.",
		"created_at" : "2016-05-22T20:59:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 195
	},
	{
		"id" : 61980866,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "When would `poured_from_bottle` be neither `true` nor `false`? If that's really possible, I think it would be best to make this an `else` clause in the above `case` statement.",
		"created_at" : "2016-05-04T01:11:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 196
	},
	{
		"id" : 61980884,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Any reason not to include the time, too?",
		"created_at" : "2016-05-04T01:11:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 196
	},
	{
		"id" : 61981073,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "When `poured_from_bottle` is missing from `INSTALL_RECEIPT.json`. This line is also found in the `used_options` block below. I suppose it's for backward compatibility.\r\n\r\n> I think it would be best to make this an else clause in the above case statement.\r\n\r\nIndeed, will fix.",
		"created_at" : "2016-05-04T01:15:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 196
	},
	{
		"id" : 61981094,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "No particular reason.",
		"created_at" : "2016-05-04T01:15:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 196
	},
	{
		"id" : 61981241,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "> I think it would be best to make this an else clause in the above case statement.\r\n\r\nWell actually no, because \"Installed\" shouldn't be printed if `time` is not available and `used_options` is empty. I'm not sure if a missing `time` is possible though. If that's impossible, then we can certainly move `s << \"Installed\" if s.empty?` into an else clause.",
		"created_at" : "2016-05-04T01:18:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 196
	},
	{
		"id" : 61983669,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "I could change it to something like\r\n\r\n```ruby\r\ns << Time.at(time).strftime(\"on %Y-%m-%d at %H-%M-%S\")\r\n```\r\n\r\nif time is also wanted. Full ISO 8601 doesn't make sense in a phrase or sentence, unfortunately.",
		"created_at" : "2016-05-04T02:03:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 196
	},
	{
		"id" : 62113520,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think `s << Time.at(time).strftime(\"on %Y-%m-%d at %H:%M:%S\")` would be better (colons instead of dashes as separators for the time). I'm definitely in favor of adding the time, too.",
		"created_at" : "2016-05-04T20:57:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 196
	},
	{
		"id" : 62113648,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You're right, thanks for explaining it. Keeping the code as is makes sense.",
		"created_at" : "2016-05-04T20:58:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 196
	},
	{
		"id" : 62118941,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "The colons were typos... Sure, will add.",
		"created_at" : "2016-05-04T21:35:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 196
	},
	{
		"id" : 62164602,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Can we just make it:\r\n```ruby\r\nif poured_from_bottle\r\n  s << \"Poured from bottle\"\r\nelse\r\n  s << \"Built from source\"\r\nend\r\n```",
		"created_at" : "2016-05-05T09:15:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 196
	},
	{
		"id" : 62173852,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Or just `if time`?",
		"created_at" : "2016-05-05T11:02:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 196
	},
	{
		"id" : 62173913,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Could we use one of Ruby's default time outputs? Bonus points if it's localised.",
		"created_at" : "2016-05-05T11:03:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 196
	},
	{
		"id" : 62173954,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "It feels like it might be nicer to have the `s << \"Installed\" if s.empty?` in a single place rather than two. ",
		"created_at" : "2016-05-05T11:03:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 196
	},
	{
		"id" : 62236574,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Default is something like `2016-05-05 11:57:27 -0700`, doesn't work well in a phrase or a sentence. As for localization, `Poured from bottle`/`Built from source` are not localized, so only localizing the datetime part would be pretty weird.",
		"created_at" : "2016-05-05T18:59:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 196
	},
	{
		"id" : 62236878,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "I went with @xu-cheng's suggestion because I can't think of a third way a formula could have been installed other than \"poured from bottle\" or \"built from source\", even for backward compatibility purposes.",
		"created_at" : "2016-05-05T19:01:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 196
	},
	{
		"id" : 62087170,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Your version is more explicit, but I think in this case readability will benefit by using either:\r\n\r\n- `(MacOS::Xcode.version && MacOS::Xcode.version > \"4.1\")` or\r\n- `(MacOS::Xcode.version || \"0\") > \"4.1\"`.",
		"created_at" : "2016-05-04T18:11:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 197
	},
	{
		"id" : 62087418,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Same idea like in my other code comment.",
		"created_at" : "2016-05-04T18:13:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 197
	},
	{
		"id" : 62102161,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "That's a good idea; the current version is a bit hard to read. I'll switch to one of those.",
		"created_at" : "2016-05-04T19:46:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 197
	},
	{
		"id" : 62173281,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Please don't make whitespace only style change like the above two, thanks.",
		"created_at" : "2016-05-05T10:56:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62173389,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Only need one newline here (and elsewhere). Please follow the existing style used in the file.",
		"created_at" : "2016-05-05T10:57:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62173459,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "`return name if VALID_SHELLS.include? name`",
		"created_at" : "2016-05-05T10:57:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62173528,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Don't need `return` as the last statement of a function in Ruby and `nil` is implicit if you haven't already passed something.",
		"created_at" : "2016-05-05T10:57:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62173555,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Use `ARGV.value` rather than parsing.",
		"created_at" : "2016-05-05T10:58:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62173603,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "This feels a little smelly/overkill to me. I think it's reasonable to just rely on `$SHELL` if it's not passed explicitly.",
		"created_at" : "2016-05-05T10:58:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62173661,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Feels like it'd be nicer to ensure this is never an empty string.",
		"created_at" : "2016-05-05T10:59:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62173703,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Probably worth pulling these into separate functions that are passed either `key` or `env_keys`",
		"created_at" : "2016-05-05T11:00:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62195338,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "You can simplify all these `if`s with something like:\r\n```rb\r\ndef canonicalize_shell(path)\r\n    name = File.basename(path).sub(/^[-]/, \"\")\r\n    return name if VALID_SHELLS.include? name\r\nend\r\n```",
		"created_at" : "2016-05-05T14:34:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62195519,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "You should exit with a non-zero code if there was an error.",
		"created_at" : "2016-05-05T14:35:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62196033,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "Shorter: `shell = get_ancestor_shell || DEFAULT_SHELL`. Also you might want to rename `get_ancestor_shell` to `ancestor_shell`.",
		"created_at" : "2016-05-05T14:39:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62196838,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "You should probably put quotes around `#{ENV[key]}`.",
		"created_at" : "2016-05-05T14:44:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62197219,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "You can also use `odie` to exit with the correct code and puts to stderr.",
		"created_at" : "2016-05-05T14:46:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62203169,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I disagree. (It was me who asked OP to do it this way instead of using `$SHELL` in the first place.) We know there are some users who switch between shells at run time, including me. And especially if they run in to problems: we're likely to ask them to try things out in `bash` instead of their main shell.\r\n\r\nAnd just from experience working with Oh My Zsh, `$SHELL` is often \"wrong\" about what shell is currently running. It's like `$EDITOR`: tells you what to run, but not what is running. If we're going to detect at all, we should do it this way.\r\n\r\nIf including this much code is a problem, then let's fall back to defaulting to bash/Bourne style, and requiring an explicit `--shell` for other shells, but not use `$SHELL`.",
		"created_at" : "2016-05-05T15:25:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62263235,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "And use `.strip_prefix(\"-\")` instead of `.sub(/^[-]/, \"\")`.",
		"created_at" : "2016-05-05T22:05:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62263855,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Also using a `for` loop is highly unidiomatic Ruby. In this case, a simple\r\n\r\n```ruby\r\nMAX_ITERATIONS.times do\r\n  # Loop body.\r\nend\r\n```\r\n\r\nwill do (and also reads much nicer).",
		"created_at" : "2016-05-05T22:11:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62437514,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Prefer `||` over `and not`",
		"created_at" : "2016-05-08T20:06:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62437521,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Also you can do `||=` instead of `unless shell` or `and not shell`",
		"created_at" : "2016-05-08T20:07:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62437524,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Don't need the `then`",
		"created_at" : "2016-05-08T20:07:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62437540,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Don't need to append `()` ",
		"created_at" : "2016-05-08T20:07:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62437545,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "(for functions in general)",
		"created_at" : "2016-05-08T20:07:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62437553,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "The last `return` is unnecessary.",
		"created_at" : "2016-05-08T20:08:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62437571,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Can this not just be a `nil` value?",
		"created_at" : "2016-05-08T20:09:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62437593,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Could could combine all these `when`s and use `to_sym` on the string value.",
		"created_at" : "2016-05-08T20:10:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62438190,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"body" : "`explicit_shell` returns `nil` when no shell has been passed in through the command line and `:noshell` when `--shell=none` has been specified. `--shell=none` is probably not the right way to do this but I wanted some way to force the `key: value` format. Originally I was using `--shell=`, but `ARGV.value` returns nil when an explicit empty value is passed and when the option is not passed at all.",
		"created_at" : "2016-05-08T20:48:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62439741,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "More lines, but (in my opinion) easier to read would be to make this and the following line:\r\n\r\n```ruby\r\nif shell == \"none\"\r\n  :noshell\r\nelsif shell\r\n  Utils::Shell.path_to_shell(shell)\r\nend\r\n```",
		"created_at" : "2016-05-08T22:29:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62439801,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This block of code probably originates from the merge conflict you resolved manually. It should no longer be here, but instead in `extend/os/mac/diagnostic.rb`.",
		"created_at" : "2016-05-08T22:32:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62439885,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Please always use double quotes for strings. More importantly: The `shellwords` module doesn't exist in Ruby 1.8.7, a version of Ruby we still support, though we're in the process of phasing out that support. This is the main reason why tests on our OS 10.9 test bot fail. I can think of two solutions to this problem:\r\n\r\n1. Only use `shellwords` with Ruby 2.0 and above, fall back to not quoting (like before) for older Rubies.\r\n2. Re-implement the required functionality, like you already did with `csh_quote`, and drop the `shellwords` dependency completely (if that's feasible).",
		"created_at" : "2016-05-08T22:39:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62439995,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It would be nice to have these cases sorted by name. Even better (I think) would be to move the mapping into a constant `Hash` and fetch the entries from it. This could look something like this:\r\n\r\n```ruby\r\nSHELL_PROFILE_MAP = {\r\n  :bash => \"~/.bash_profile\",\r\n  :csh => \"~/.cshrc\",\r\n  :fish => \"~/.config/fish/config.fish\",\r\n  :ksh => \"~/.kshrc\",\r\n  :sh => \"~/.bash_profile\", # /bin/sh is POSIX-mode bash on OS X\r\n  :tcsh => \"~/.tcshrc\",\r\n  :zsh => \"~/.zshrc\",\r\n}.freeze\r\n\r\ndef self.shell_profile\r\n  SHELL_PROFILE_MAP.fetch(preferred_shell, \"~/.bash_profile\")\r\nend\r\n```",
		"created_at" : "2016-05-08T22:49:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62440027,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Minor detail, but I'd prefer to keep these sorted alphabetically.",
		"created_at" : "2016-05-08T22:51:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62440031,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Minor detail, but I'd prefer to keep these sorted alphabetically.",
		"created_at" : "2016-05-08T22:51:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62440079,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Minor detail, but I'd prefer to keep these sorted alphabetically.",
		"created_at" : "2016-05-08T22:55:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62440110,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The `else nil` case seems redundant. You could also replace the entire `case` statement with the following line:\r\n\r\n```ruby\r\nshell_name.to_sym if %w[bash csh fish ksh sh tcsh zsh].include?(shell_name)\r\n```",
		"created_at" : "2016-05-08T22:57:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62440214,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You can make `s.gsub(/([\\n!])/) { '\\\\' + $1 }` more efficient if you provide it directly with a replacement string instead of passing a block:\r\n\r\n```ruby\r\ns.gsub(/[\\n!]/, \"\\\\\\\\\\\\0\")\r\n```\r\n\r\n(The many backslashes look somewhat horrible, but they are required because one level of backlash escapes is needed for the string and another level is needed for the replacement placeholders `\\<n>`.)",
		"created_at" : "2016-05-08T23:06:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62455764,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Can you elaborate a bit on what format you want displayed with no `--shell`, `--shell=none` and `--shell=$SHELL`? Thanks!",
		"created_at" : "2016-05-09T06:54:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62485539,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "My mistake; I suggested `shellwords` without checking if it was available for 1.8.7 :see_no_evil: ",
		"created_at" : "2016-05-09T11:46:55Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 201
	},
	{
		"id" : 62579755,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"body" : "With no `--shell`, I was going to keep the behavior the same as it is now.\r\nWith an explicit `--shell=$SHELL`, I was going to print the values in a format appropriate for the specified shell.\r\nWith an explicit `--shell=none`, I was going to print the values in the `key: value` format.\r\n\r\nRight now, if stdout is a tty, `brew --env` outputs in the `key: value` format.\r\n\r\ncurrent behavior:\r\n\r\nstdout is tty\r\n\r\n    $ brew --env\r\n    CMAKE_PREFIX_PATH: /usr/local\r\n    ...\r\n    PATH: /usr/local/Library/ENV/4.3:/usr/bin:/bin:/usr/sbin:/sbin\r\n\r\nstdout is not tty\r\n\r\n    $ brew --env | cat\r\n    export CC=\"clang\"\r\n    ...\r\n    export ACLOCAL_PATH=\"/usr/local/share/aclocal\"\r\n\r\nThere is currently no way to force `brew --env` to print the environment variables and their values in the `key: value` format, stdout has to really be a tty. That's why I was thinking of adding something like `--shell=none`.",
		"created_at" : "2016-05-09T21:53:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62621673,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Am I correct saying that `--shell` if your shell is Bash/ZSH or `--shell=bash` will preserve the same behaviour as there is currently? If so, I think that's enough to just require `--shell=bash` rather than a `--shell=none` which implies the same.",
		"created_at" : "2016-05-10T07:07:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62783290,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"body" : "Right now `--shell` or `--shell=` is not handled distinctly from the no arguments case (because `ARGV.value(\"shell\")` doesn't distinguish these cases, I think.) and has the original behavior if your shell happens to be `bash`, yes.\r\n\r\n`--shell=bash`, however, does not currently preserve the original behavior, since it overrules the interactiveness check.\r\n\r\n`--shell=none` is a silly hack to force the `brew --env` to output in `key: value` format. Without `--shell=none` there isn't a way to get the colon format for the environment variables without faking a tty as far as I know. `--shell=none` should probably be renamed.\r\n\r\nJust out of curiosity, why does the original behavior of `brew --env` care about whether output is a tty or not? It might make sense to remove that check if `brew --env` is going to take arguments anyway.",
		"created_at" : "2016-05-11T02:13:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62792125,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Our `ARGV.value` has a few problems, one of them being that it doesn't accept an empty value after the equals sign (it expects at least one character). I find this surprising and undesirable, thus opened #231 to address this. You could start using `--shell=` if that goes through.\r\n\r\nHere's a proposal (both regarding behavior and option names):\r\n\r\n- `brew --env` preserves existing behavior, i.e. uses the colon-delimited format for TTY and `bash`-compatible format otherwise. (We want to preserve this behavior as not not break existing scripts that may rely on this.)\r\n- `brew --env --plain` always uses the colon-delimited format (currently `--shell=none`).\r\n- `brew --env --export[=auto]` auto-detects the shell and uses a format suitable for exporting to the detected shell.\r\n- `brew --env --export=<shell>` uses a format suitable for exporting to the explicitly selected shell.\r\n\r\n(Or maybe just use `--format=(plain|auto|<shell>)` to cover the latter three cases?)",
		"created_at" : "2016-05-11T05:02:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62795459,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"body" : "@UniqMartin, I like that better then what I have now, I'll make the changes. Just a few questions.\r\n\r\n- for autodetecting the shell, do we still want to check the argv[0] of the parent process and then fall back to the value of `SHELL`? That seems to be what folks have settled on but I want to make sure.\r\n- now that `--env` is a bona fide subcommand does it make sense to make it `brew env` (and keep the `--env` for backward compatibility)?",
		"created_at" : "2016-05-11T06:03:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62796484,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> for autodetecting the shell, do we still want to check the argv[0] of the parent process and then fall back to the value of `SHELL`? That seems to be what folks have settled on but I want to make sure.\r\n\r\nYes, that was also my understanding and I'm in support of this approach.\r\n\r\n> now that `--env` is a bona fide subcommand does it make sense to make it `brew env` (and keep the `--env` for backward compatibility)?\r\n\r\nI agree that passing additional options to that feels a bit weird, but let's stick with this command name for now. We've already renamed it from `environment` to `--env` in the past and I'm pretty hesitant to add yet another alias. (In any case, and if other maintainers feel like you, that's something that should go into a follow-up PR. Let's keep this one more focused, so that it can be merged sooner than later.)",
		"created_at" : "2016-05-11T06:19:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62985414,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think this should be\r\n```ruby\r\n`ps -p #{Process.ppid} -o ucomm=`.strip\r\n```\r\n\r\nNoted with `ucomm=`, there won't be leading - from login shell. ",
		"created_at" : "2016-05-12T08:54:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62985536,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This function doesn't seem to handle case that shell path is appended with version. e.g. `zsh-5.2`",
		"created_at" : "2016-05-12T08:55:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62985718,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Considering we start to support shell like fish, the `echo 'export ...` part have to be handled in a shell by shell case.",
		"created_at" : "2016-05-12T08:56:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62985859,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "as mentioned in https://github.com/Homebrew/brew/pull/201/files#r62985414, `strip_prefix(\"-\")` can be avoid if use different ps command argument.",
		"created_at" : "2016-05-12T08:58:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 63080873,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I think you can make shell `nil` in this case and use that everywhere you should have used `:noshell`.",
		"created_at" : "2016-05-12T19:21:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 63131073,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"body" : "I'm really not sure what to do here, since this is a user-facing message. Were you thinking of detecting the shell and sending an appropriate message?\r\n\r\nIn that case, I think the fish message should show something like this for `fish`.\r\n\r\n    fish: \r\n      1) universal variable.\r\n      set -U fish_user_paths #{HOMEBREW_PREFIX}/sbin $fish_user_paths\r\n\r\n      2) modify /.config/fish/fish.config\r\n      echo 'set -x PATH \"#{HOMEBREW_PREFIX}\"/sbin $PATH' >> #{Utils::Shell.shell_profile}\r\n\r\nFrom the fish tutorial: http://fishshell.com/docs/current/tutorial.html#tut_path\r\n\r\n> A faster way is to modify the $fish_user_paths universal variable, which is automatically prepended to $PATH. For example, to permanently add /usr/local/bin to your $PATH, you could write:\r\n\r\n`tcsh` would just be \r\n\r\n    tcsh:\r\n        set path = ( #{HOMEBREW_PREFIX}/sbin $path:q )",
		"created_at" : "2016-05-13T04:09:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 63999179,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It would be still nice to fix this. Maybe by creating a new method like.\r\n```ruby\r\n<<-EOS.undent\r\n Consider setting the PATH for example like so\r\n   #{Utils::Shell.prepend_path_in_shell_profile(HOMEBREW_PREFIX/\"sbin\")}\r\nEOS\r\n```\r\n\r\nAnd\r\n```ruby\r\ndef prepend_path_in_shell_profile(path)\r\n  case preferred_shell\r\n  when :bash, :zsh\r\n    \"echo '#{sh_quote(path)}:$PATH >> #{shell_profile}'\r\n  when ...\r\n  end\r\nend",
		"created_at" : "2016-05-20T07:02:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 65697339,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd inline this variable so it's easier to follow as it's only used once.",
		"created_at" : "2016-06-03T12:14:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 65697414,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`to a shell name`?",
		"created_at" : "2016-06-03T12:15:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 65697517,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This looks identical to the method below; maybe worth pulling out into a shared method?",
		"created_at" : "2016-06-03T12:16:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 65698148,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "`:$PATH` should be removed.",
		"created_at" : "2016-06-03T12:22:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 65698153,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "`:$PATH` should be removed.",
		"created_at" : "2016-06-03T12:22:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 65698226,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Missing right `\\\"`, it should be \r\n```\r\n \"echo 'export PATH=\\\"#{sh_quote(path)}:$PATH'\\\" >> #{shell_profile}\"\r\n```",
		"created_at" : "2016-06-03T12:23:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 65698373,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "insert path should before fish_user_paths right? Considering we are perpending path.",
		"created_at" : "2016-06-03T12:25:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 65797914,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"body" : "`csh_quote` is almost the same except for the way it handles newlines. `\\n` gets mapped to `'\\\\\\n'` in `csh` to avoid stopping the command prematurely if there's a newline.",
		"created_at" : "2016-06-04T05:49:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 65803109,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sorry, I mean the regex on this line looks identical and could be pulled out.",
		"created_at" : "2016-06-04T14:21:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 65805946,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"body" : "Oh. Yes the initial backslash escaping is shared between sh_quote and csh_quote. I'll fix it when I get home.",
		"created_at" : "2016-06-04T18:38:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 68752913,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "There seems to be a misplaced quote here. `'\\\"` -> `\\\"'`",
		"created_at" : "2016-06-28T13:13:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 70186119,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"body" : "Fixed.",
		"created_at" : "2016-07-10T18:11:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 201
	},
	{
		"id" : 62338291,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I don't reckon we need this option but we should still document the env.",
		"created_at" : "2016-05-06T14:39:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62338323,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Or, if having the option makes the code easier, just leave it undocumented.",
		"created_at" : "2016-05-06T14:39:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62339545,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Doesn't affect the code difficulty. I was including it because I think it's more convenient than the environment variable: it could be included in our tab completion definitions, and if a user is doing a `-s` install and realizes they need to switch to `-S`, or vice versa, it's easy to edit the command line by just adding or removing the `all-` or switching case, instead of having to remember and add the whole environment variable.",
		"created_at" : "2016-05-06T14:48:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62340072,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I feel like the option itself isn't useful; if you want to build everything from source always you probably want to set the variable.",
		"created_at" : "2016-05-06T14:51:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62340209,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fair enough. I'll remove it in favor of just the variable, and include doco of the variable in the helptext.",
		"created_at" : "2016-05-06T14:52:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62348364,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "This feels weird; it could just use a ARGV or another method in here and save that logic for formula_installer itself?",
		"created_at" : "2016-05-06T15:47:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62350987,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I see what you mean. And that's needed for correct behavior for `install --build-bottle`, too. I amended the PR to do so. Look good now?\r\n\r\nTests out for `fetch`:\r\n\r\n```\r\n$ brew fetch --build-bottle --deps analog xz\r\nFetching: analog, xz, pkg-config, libpng, freetype, fontconfig, jpeg, libtiff, gd\r\n==> Downloading https://mirrors.ocf.berkeley.edu/debian/pool/main/a/analog/analog_6.0.orig.tar.gz\r\n######################################################################## 100.0%\r\nDownloaded to: /Library/Caches/Homebrew/analog-6.0.tar.gz\r\nSHA256: 31c0e2bedd0968f9d4657db233b20427d8c497be98194daf19d6f859d7f6fcca\r\n==> Downloading https://fossies.org/linux/misc/xz-5.2.2.tar.gz\r\n######################################################################## 100.0%\r\nDownloaded to: /Library/Caches/Homebrew/xz-5.2.2.tar.gz\r\nSHA256: 73df4d5d34f0468bd57d09f2d8af363e95ed6cc3a4a86129d2f2c366259902a2\r\n==> Downloading https://homebrew.bintray.com/bottles/pkg-config-0.29.1.mavericks.bottle.tar.gz\r\nAlready downloaded: /Library/Caches/Homebrew/pkg-config-0.29.1.mavericks.bottle.tar.gz\r\nSHA256: a27ddccd93c19c3e492c6dba674140340b9ac18253066b5a91933d7ca4dd0992\r\n==> Downloading https://homebrew.bintray.com/bottles/libpng-1.6.21.mavericks.bottle.tar.gz\r\n######################################################################## 100.0%\r\nDownloaded to: /Library/Caches/Homebrew/libpng-1.6.21.mavericks.bottle.tar.gz\r\nSHA256: 22b421d6d8034884fb0b697001b0965cb19f3b3a32c0c619ead86250e6f2a40d\r\n==> Downloading https://homebrew.bintray.com/bottles/freetype-2.6.3.mavericks.bottle.tar.gz\r\nAlready downloaded: /Library/Caches/Homebrew/freetype-2.6.3.mavericks.bottle.tar.gz\r\nSHA256: ecfb1b9f4dcce361d4c40367dc205842411cbcbb6628238da571aff84caf05c3\r\n```",
		"created_at" : "2016-05-06T16:05:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62351500,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Sorry, here too.",
		"created_at" : "2016-05-06T16:09:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62351540,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I'd split this into multiple `return` statements for readability.",
		"created_at" : "2016-05-06T16:10:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62352535,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Wait - I'm not sure what you mean here?",
		"created_at" : "2016-05-06T16:17:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62352702,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I mean it'd be good if this wasn't calling `FormulaInstaller` here given it's just a class method anyway.",
		"created_at" : "2016-05-06T16:19:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62352991,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Added an early return to get the line under 80 characters and have single-line expressions. If it's still too long I could add a temporary or something to decompose it further.",
		"created_at" : "2016-05-06T16:21:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62353092,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Ah, gotcha. Do you think `build_formula_from_source?` makes more sense on `ARGV`?",
		"created_at" : "2016-05-06T16:22:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62354708,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Not sure; maybe just on `Formula`?",
		"created_at" : "2016-05-06T16:34:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62354921,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "I'd put `return false if !ARGV.build_from_source? && !ARGV.build_bottle?` and then have the `.any` on a new line.",
		"created_at" : "2016-05-06T16:36:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62355825,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I broke it into another early return, but with an `unless` instead of `if` to avoid the conjunction of \"not\"s.",
		"created_at" : "2016-05-06T16:42:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62355989,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Okay, gotcha.\r\n\r\nI think `ARGV` is pretty good, since it's mostly testing the combination of options and arguments in `ARGV`. The fact that it has several `ARGV` references inside it is an indicator, and that disappears once it's moved to `ARGV`.\r\n\r\nMoved it there.",
		"created_at" : "2016-05-06T16:44:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62364392,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Can 💀 this now",
		"created_at" : "2016-05-06T17:47:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 205
	},
	{
		"id" : 62434469,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Why the output to `$stderr` here, but not in `cmd` (the other changed code block)?",
		"created_at" : "2016-05-08T16:28:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 213
	},
	{
		"id" : 62434524,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "One having a `0` (passing) and the other having a `1` (failing) exit code. I don't feel strongly either way, though.",
		"created_at" : "2016-05-08T16:33:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 213
	},
	{
		"id" : 62434797,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "But you don't even know where the output came from, as `cmd_output` is capturing both standard output and standard error. And in my opinion the question is more about where this output should go to as seen from the perspective of the test suite and less about where it originally came from. If you agree, this should be the same output stream in both cases, though I'm not sure whether `$stdout` or `$stderr` is more suitable.",
		"created_at" : "2016-05-08T16:51:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 213
	},
	{
		"id" : 62434586,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can you expand on this and make it more like those special documentation comments for other commands, e.g. [`deps`](https://github.com/Homebrew/brew/blob/504152038cb591a661721b09e989f428bbc6ae0a/Library/Homebrew/cmd/deps.rb#L1-L36), i.e. explain the purpose and document the options/arguments? What you see there is basically a snippet of Markdown as understood by `ronn`. To get the correct output, both the indentation and the formatting need to be matched exactly.\r\n\r\nYou'll need to check that the output of `brew help deps` and `brew help gist-logs` looks similar in terms of formatting. As a further step, you'll need to run `brew man` to regenerate the man page and then check the formatting of `man brew`.",
		"created_at" : "2016-05-08T16:39:14Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 217
	},
	{
		"id" : 62435410,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The cause for the different rendering is not a different Gem version but a very subtle detail in this line: It needs to end with a trailing colon (`:`). Otherwise the whole list will no longer be recognized as a definition list and instead rendered as a plain list (the man page is also rendered quite differently, if you look closely).",
		"created_at" : "2016-05-08T17:27:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 217
	},
	{
		"id" : 62435415,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Please make that “Gist” instead of “gist”.",
		"created_at" : "2016-05-08T17:28:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 217
	},
	{
		"id" : 62435428,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Please make that “GitHub” instead of “github” and “Gist” instead of “gist”.",
		"created_at" : "2016-05-08T17:28:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 217
	},
	{
		"id" : 62435481,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think this needs to be `[SPECIFYING FORMULAE][]` to be recognized and rendered correctly, but hard to tell given the many spurious changes in the current version of the man page and HTML version of it.\r\n\r\nAlso: “specified several different ways” ➡️ “specified **in** several different ways”.",
		"created_at" : "2016-05-08T17:31:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 217
	},
	{
		"id" : 62441287,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I see spurious changes. Did someone forget to re-run `brew man` when making some final adjustments in #205? :wink: I fixed that for you in 815edc06862fc4c01ca6ac09a5a3a0b36cfcaa24. They will go away if you rebase this PR.",
		"created_at" : "2016-05-09T00:14:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 221
	},
	{
		"id" : 62441760,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I believe they did. Rebased and fixed.",
		"created_at" : "2016-05-09T00:45:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 221
	},
	{
		"id" : 62456604,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Everything below this needs indented and an extra `end` may be required.",
		"created_at" : "2016-05-09T07:07:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 222
	},
	{
		"id" : 62456983,
		"user" : {
			"login" : "koraktor"
		},
		"body" : "Sorry, you're right. Did only a quick fix on GitHub.",
		"created_at" : "2016-05-09T07:12:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 222
	},
	{
		"id" : 62457134,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "No worries, breakage is my bad so appreciate the fix.",
		"created_at" : "2016-05-09T07:14:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 222
	},
	{
		"id" : 62458681,
		"user" : {
			"login" : "koraktor"
		},
		"body" : "Fixed.",
		"created_at" : "2016-05-09T07:35:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 222
	},
	{
		"id" : 62791125,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm not sure whether this should raise an exception instead of silently ignoring an invalid `arg` argument. Feedback welcome!",
		"created_at" : "2016-05-11T04:43:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 231
	},
	{
		"id" : 62792434,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I'd say malformed/invalid option names should raise an exception instead of just be ignored. Would make it easier for formula and `brew` authors to diagnose errors. And unlike options which simply aren't supported by a particular formula, it seems like there's never a case in which those option names would become valid, so it wouldn't rule out any functionality we use.",
		"created_at" : "2016-05-11T05:07:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 231
	},
	{
		"id" : 62792981,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👍 to exception.",
		"created_at" : "2016-05-11T05:17:18Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 231
	},
	{
		"id" : 62793028,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Tiny nit but generally I've seen `match` used for Regex objects so might be worth another name? Feel free to ignore, though.",
		"created_at" : "2016-05-11T05:18:08Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 231
	},
	{
		"id" : 62793252,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I agree. But naming variables is hard. I'll try to come up with a better name …",
		"created_at" : "2016-05-11T05:22:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 231
	},
	{
		"id" : 62793699,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "This value is what's going to become the output of the method, after some more intermediate processing. I use `out` for variables like that. Does that fit in with Homebrew style? Maybe `val` (as an abbreviation for `value`, since it's what the `value` method returns) or `optarg` (short for \"option argument\", and the conventional name for this thing in `getopt()`)?",
		"created_at" : "2016-05-11T05:32:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 231
	},
	{
		"id" : 63736830,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The two comment lines and the `source` are obsolete now that this is no longer calling the `homebrew-update` function directly … fixed in 406fdbb391e844ea604c3eac1075c3f2562d07a9.",
		"created_at" : "2016-05-18T16:30:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 237
	},
	{
		"id" : 63253641,
		"user" : {
			"login" : "geoff-codes"
		},
		"body" : "Aptly named branch Mr. Tiller...\r\n\r\nFor the sake of thoroughness:\r\n```sh\r\n> cd $(brew --prefix) \r\n> find . -name \\*.pem -o -name \\*.crt -type f | # Try to exclude as much as possible.\r\n                                 grep -v gems          | # Not our problem.\r\n                                 grep -v node_modules  | # Not our problem.\r\n                                 grep -v site-packages | # Not our problem.\r\n                                 grep -v python        | # 'site-packages' doesn't seem to cut it.\r\n                                 grep -v test          | # Not actually used. Hopefully.\r\n                                 grep -v example       | # Not actually used. Hopefully.\r\n                                 grep -v sample        | # Not actually used. Hopefully.\r\n                                 sort | uniq\r\n```\r\nleaves\r\n\r\n```\r\n./Cellar/android-sdk/24.4.1_1/tools/lib/ca-bundle.pem\r\n./Cellar/app-engine-go-32/1.9.34/share/app-engine-go-32/lib/requests/requests/cacert.pem\r\n./Cellar/app-engine-go-64/1.9.37/share/app-engine-go-64/lib/requests/requests/cacert.pem\r\n./Cellar/arcanist/5/libphutil/resources/ssl/default.pem\r\n./Cellar/couchpotatoserver/3.0.1/libexec/libs/certifi/cacert.pem\r\n./Cellar/couchpotatoserver/3.0.1/libexec/libs/requests/cacert.pem\r\n./Cellar/crash/1.3.1/share/doc/crash/src/crash/hostkey.pem\r\n./Cellar/drush/8.0.5/libexec/vendor/phpunit/phpunit/build/ca.pem\r\n./Cellar/ec2-ami-tools/1.5.7/libexec/etc/ec2/amitools/cert-ec2-cn-north-1.pem\r\n./Cellar/ec2-ami-tools/1.5.7/libexec/etc/ec2/amitools/cert-ec2-gov.pem\r\n./Cellar/ec2-ami-tools/1.5.7/libexec/etc/ec2/amitools/cert-ec2.pem\r\n./Cellar/ettercap/0.8.2/share/ettercap/etter.ssl.crt\r\n./Cellar/freeradius-server/3.0.11/etc/raddb/certs/01.pem\r\n./Cellar/freeradius-server/3.0.11/etc/raddb/certs/02.pem\r\n./Cellar/freeradius-server/3.0.11/etc/raddb/certs/ca.pem\r\n./Cellar/freeradius-server/3.0.11/etc/raddb/certs/client.crt\r\n./Cellar/freeradius-server/3.0.11/etc/raddb/certs/client.pem\r\n./Cellar/freeradius-server/3.0.11/etc/raddb/certs/server.crt\r\n./Cellar/freeradius-server/3.0.11/etc/raddb/certs/server.pem\r\n./Cellar/gnupg2/2.0.30/share/gnupg/com-certs.pem\r\n./Cellar/gtmess/0.97_1/share/gtmess/root.pem\r\n./Cellar/gwenhywfar/4.15.3/share/gwenhywfar/ca-bundle.crt\r\n./Cellar/headphones/0.5.9/libexec/lib/requests/cacert.pem\r\n./Cellar/heroku/3.43.2/libexec/data/cacert.pem\r\n./Cellar/i2p/0.9.21/libexec/certificates/news/ampernand_at_gmail.com.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/news/echelon_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/news/killyourtv_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/news/str4d_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/news/zzz_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/plugin/cacapo_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/plugin/str4d_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/plugin/zzz-plugin_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/reseed/backup_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/reseed/bugme_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/reseed/cheezybudz_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/reseed/echelon_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/reseed/matt_at_drollette.com.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/reseed/meeh_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/reseed/parg_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/router/echelon_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/router/killyourtv_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/router/str4d_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/router/zzz_at_mail.i2p.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/ssl/193.150.121.66.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/ssl/i2p.mooo.com.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/ssl/i2pseed.zarrenspry.info.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/ssl/ieb9oopo.mooo.com.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/ssl/link.mx24.eu.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/ssl/netdb.i2p2.no.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/ssl/netdb.rows.io.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/ssl/reseed.i2p-projekt.de.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/ssl/reseed.i2p.vzaws.com.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/ssl/uk.reseed.i2p2.no.crt\r\n./Cellar/i2p/0.9.21/libexec/certificates/ssl/us.reseed.i2p2.no.crt\r\n./Cellar/jruby/9.1.0.0/libexec/lib/ruby/truffle/pr-zlib/certs/djberg96_pub.pem\r\n./Cellar/macvim/7.4-103/MacVim.app/Contents/Resources/dsa_pub.pem\r\n./Cellar/mysql-cluster/7.4.9/share/mysql/mcc/cfg.pem\r\n./Cellar/nmap/7.12/share/ncat/ca-bundle.crt\r\n./Cellar/openlitespeed/1.3.10/admin/conf/webadmin.crt\r\n./Cellar/passenger/5.0.26/libexec/resources/union_station_gateway.crt\r\n./Cellar/phan/0.4/vendor/phpunit/phpunit/build/ca.pem\r\n./Cellar/phpmyadmin3/3.5.8.2/share/phpmyadmin3/libraries/auth/swekey/musbe-ca.crt\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/AOL_Member_CA.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/AddTrust_External_Root.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/America_Online_Root_Certification_Authority_1.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/Baltimore_CyberTrust_Root.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/CAcert_Class3.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/CAcert_Root.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/Certum_Root_CA.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/Certum_Trusted_Network_CA.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/Deutsche_Telekom_Root_CA_2.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/DigiCertHighAssuranceCA-3.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/DigiCertHighAssuranceEVRootCA.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/Entrust.net_2048.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/Entrust.net_Secure_Server_CA.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/Equifax_Secure_CA.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/Equifax_Secure_Global_eBusiness_CA-1.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/GTE_CyberTrust_Global_Root.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/Go_Daddy_Class_2_CA.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/Microsoft_Internet_Authority_2010.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/Microsoft_Secure_Server_Authority_2010.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/StartCom_Certification_Authority.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/Thawte_Premium_Server_CA.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/Thawte_Primary_Root_CA.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/ValiCert_Class_2_VA.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/VeriSign_Class3_Extended_Validation_CA.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/VeriSign_Class_3_Primary_CA-G2.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/VeriSign_Class_3_Primary_CA-G5-2.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/VeriSign_Class_3_Primary_CA-G5.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/VeriSign_International_Server_Class_3_CA.pem\r\n./Cellar/pidgin/2.10.12_1/share/purple/ca-certs/Verisign_Class3_Primary_CA.pem\r\n./Cellar/poretools/0.5.1_3/libexec/vendor/R/library/openssl/cacert.pem\r\n./Cellar/qca/2.1.0/certs/rootcerts.pem\r\n./Cellar/racket/6.5/share/racket/collects/openssl/dh4096.pem\r\n./Cellar/sickrage/4.0.76.2/libexec/autoProcessTV/lib/requests/cacert.pem\r\n./Cellar/sickrage/4.0.76.2/libexec/lib/certifi/cacert.pem\r\n./Cellar/sickrage/4.0.76.2/libexec/lib/certifi/mkcert.pem\r\n./Cellar/sickrage/4.0.76.2/libexec/lib/certifi/old_root.pem\r\n./Cellar/sickrage/4.0.76.2/libexec/lib/requests/cacert.pem\r\n./Cellar/sslmate/1.5.1/share/sslmate/dhparams/dh2048-group14.pem\r\n./Cellar/sslmate/1.5.1/share/sslmate/dhparams/dh3072-group15.pem\r\n./Cellar/sslmate/1.5.1/share/sslmate/dhparams/dh4096-group16.pem\r\n./Cellar/sslmate/1.5.1/share/sslmate/dhparams/dh6144-group17.pem\r\n./Cellar/sslmate/1.5.1/share/sslmate/dhparams/dh8192-group18.pem\r\n./Cellar/sslyze/0.12.0/libexec/plugins/data/trust_stores/apple.pem\r\n./Cellar/sslyze/0.12.0/libexec/plugins/data/trust_stores/google.pem\r\n./Cellar/sslyze/0.12.0/libexec/plugins/data/trust_stores/java.pem\r\n./Cellar/sslyze/0.12.0/libexec/plugins/data/trust_stores/microsoft.pem\r\n./Cellar/sslyze/0.12.0/libexec/plugins/data/trust_stores/mozilla.pem\r\n./Cellar/ucspi-tools/1.2_10/libexec/vendor/libressl/etc/cert.pem\r\n./Cellar/wp-cli/0.23.0/vendor/rmccue/requests/library/Requests/Transport/cacert.pem\r\n./Cellar/yaws/2.0/etc/yaws/yaws-cert.pem\r\n./Cellar/yaws/2.0/etc/yaws/yaws-key.pem\r\n./Cellar/znapzend/0.15.5/lib/Mojo/IOLoop/resources/server.crt\r\n./etc/libressl/cert.pem\r\n./etc/openssl/cert.pem\r\n./etc/raddb/certs/01.pem\r\n./etc/raddb/certs/02.pem\r\n./etc/raddb/certs/ca.pem\r\n./etc/raddb/certs/client.pem\r\n./etc/raddb/certs/server.pem\r\n./etc/shibboleth/sp-cert.pem\r\n./etc/shibboleth/sp-key.pem\r\n./etc/stunnel/stunnel.pem\r\n./etc/yaws/yaws-cert.pem\r\n./etc/yaws/yaws-key.pem\r\n./share/gnupg/com-certs.pem\r\n./var/mysql/ca-key.pem\r\n./var/mysql/ca.pem\r\n./var/mysql/client-cert.pem\r\n./var/mysql/client-key.pem\r\n./var/mysql/private_key.pem\r\n./var/mysql/public_key.pem\r\n./var/mysql/server-cert.pem\r\n./var/mysql/server-key.pem\r\n```\r\n\r\nNot all of those are root CA lists, obviously.\r\nAnd I'd argue a case could be made that any of these that:\r\n- doesn't provide libraries, and\r\n- don't have any dependent formula  \r\n\r\ncould be excluded.",
		"created_at" : "2016-05-13T21:27:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63253866,
		"user" : {
			"login" : "geoff-codes"
		},
		"body" : "```ruby\r\nunless ! BREWED_OPENSSL.exist? && ! BREWED_GNUTLS.exist? && ! BREWED_GNUTLS.exist? && !  ...\r\n```",
		"created_at" : "2016-05-13T21:29:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63253949,
		"user" : {
			"login" : "geoff-codes"
		},
		"body" : "```ruby\r\nunless ! BREWED_OPENSSL.exist? && ! BREWED_GNUTLS.exist? && ! BREWED_GNUTLS.exist? && ! ...\r\n```",
		"created_at" : "2016-05-13T21:30:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63253986,
		"user" : {
			"login" : "geoff-codes"
		},
		"body" : "```ruby\r\nunless ! BREWED_OPENSSL.exist? && ! BREWED_GNUTLS.exist? && ! BREWED_GNUTLS.exist? && !  ...\r\n```",
		"created_at" : "2016-05-13T21:30:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63254576,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I'm not seeing much of an upside to that choice of syntax. Elaborate?",
		"created_at" : "2016-05-13T21:35:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63254765,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Yeah, I don't have much of a desire to create a command that updates every cert, only really the OpenSSL/LibreSSL/GnuTLS ones because we create them.\r\n\r\nI think it's reasonable to presume that if we create them we'll provide a easy method of keeping them refreshed, but beyond that we don't police packages.",
		"created_at" : "2016-05-13T21:37:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63254870,
		"user" : {
			"login" : "geoff-codes"
		},
		"body" : "Ah, never mind, I thought this block was identical to the one above. But then again, why *does* libressl get its own dir, but openssl and gnutls share?",
		"created_at" : "2016-05-13T21:38:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63255283,
		"user" : {
			"login" : "geoff-codes"
		},
		"body" : "That's fair. But since you _do_ \"police\" formula versions, it might be nice to have a list for formula that install certs, and make sure their update PRs don't languish. Or something. Just a suggestion.",
		"created_at" : "2016-05-13T21:42:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63255317,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "LibreSSL & OpenSSL both ship configuration files and miscellaneous tools required for some functionality, and those files have no promises of being similar, whereas the only thing GnuTLS is interested in is the PEM.",
		"created_at" : "2016-05-13T21:42:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63256324,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "People file PRs, we'll accept them as fast as we can, more or less. We don't intentionally ice updates unless there's a hard blocking reason that we can't workaround sanely.",
		"created_at" : "2016-05-13T21:52:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63256753,
		"user" : {
			"login" : "geoff-codes"
		},
		"body" : "Ah, right.\r\n\r\nI still think it might be easier to simply just pem file to worry about and link it in, but I trust you know what you're doing, ",
		"created_at" : "2016-05-13T21:56:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63279882,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Just assume `OS.mac?` for now and/or pull that part to `extend/os`",
		"created_at" : "2016-05-14T18:10:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63279886,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "👎 personally for `unless` with more than a single condition.",
		"created_at" : "2016-05-14T18:10:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63279891,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Can probably skip `for this operating system`.",
		"created_at" : "2016-05-14T18:10:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63287281,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I would avoid all these paths and `#exist?` method in the blow. Instead, I think using formula is better. So it would be like `safe_system \"brew\", \"postinstall\", \"openssl\" if Formula[\"openssl\"].installed?`",
		"created_at" : "2016-05-15T07:06:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63287288,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "All `quiet_system` should be `safe_system` in my opinion. ",
		"created_at" : "2016-05-15T07:06:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63287296,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "`Pathname.new` is superfluous. ",
		"created_at" : "2016-05-15T07:08:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 241
	},
	{
		"id" : 63279909,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Can you elaborate what this is needed for; just developing this PR?",
		"created_at" : "2016-05-14T18:13:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 242
	},
	{
		"id" : 63279924,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Oh, I see. I think the `return if exist?` can probably be skipped and do `puts \"mkdir #{self}\" if ARGV.verbose? && exist?` instead?",
		"created_at" : "2016-05-14T18:14:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 242
	},
	{
		"id" : 63280527,
		"user" : {
			"login" : "Blaisorblade"
		},
		"body" : "I see what you're saying. That looks not quite equivalent, it'd have to be something like:\r\n```\r\npathExisted = exist?\r\nsuper\r\nputs \"mkdir #{self}\" if ARGV.verbose? && !pathExisted\r\n```\r\nbecause the goal is to log directory creation if the directory didn't exist.\r\nI can change it to that if you prefer, but it seems more complicated.\r\n\r\nIn fact, to make it even simpler, I'd maybe log the action unconditionally, and log `mkdir -p` so that the log keeps being a valid Unix script.\r\n```\r\ndef mkpath\r\n    super\r\n    puts \"mkdir -p #{self}\" if ARGV.verbose?\r\n  end\r\n```\r\n\r\nAnd on reflection, this should be `ObserverPathnameExtension.verbose?` like everything here, not `ARGV.verbose?`, to follow the other refactorings.",
		"created_at" : "2016-05-14T19:05:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 242
	},
	{
		"id" : 63280676,
		"user" : {
			"login" : "Blaisorblade"
		},
		"body" : "I've changed this to use `ObserverPathnameExtension.verbose?` instead of `ARGV.verbose?`.",
		"created_at" : "2016-05-14T19:16:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 242
	},
	{
		"id" : 63473793,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Let's use `formula.tap && formula.tap.repo.downcase.end_with?(\"head-only\")`.",
		"created_at" : "2016-05-17T07:14:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 248
	},
	{
		"id" : 63549266,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I presume you mean:\r\n\r\n```ruby\r\nformula.tap && !formula.tap.repo.downcase.end_with?(\"head-only\")\r\n```\r\n?",
		"created_at" : "2016-05-17T15:50:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 248
	},
	{
		"id" : 63549393,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Otherwise it'll _specifically_ flag devel/head only formulae as problematic in those taps, which isn't what we want.",
		"created_at" : "2016-05-17T15:51:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 248
	},
	{
		"id" : 63643776,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Oh, sorry about that. In that case, it should be:\r\n```ruby\r\n!(formula.tap && formula.tap.repo.downcase.end_with?(\"head-only\"))\r\n```",
		"created_at" : "2016-05-18T04:32:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 248
	},
	{
		"id" : 63644968,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "To reduce parentheses, I'd probably prefer\r\n\r\n```\r\n!formula.tap || !formula.tap.repo.downcase.end_with?(\"head-only\")\r\n```",
		"created_at" : "2016-05-18T04:58:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 248
	},
	{
		"id" : 63655426,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Or make a single `if formula.tap` for both as you're checking it twice and then the relevant check for each.",
		"created_at" : "2016-05-18T07:12:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 248
	},
	{
		"id" : 63718376,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Pushed changes. New opinions welcome.",
		"created_at" : "2016-05-18T14:54:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 248
	},
	{
		"id" : 63721675,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This is not what we want. We want to filter head only tap, but check other tap or non tap formulae. Therefore I think we need to stick with \r\n\r\n```ruby\r\n!(formula.tap && formula.tap.repo.downcase.end_with?(\"head-only\"))\r\n```",
		"created_at" : "2016-05-18T15:09:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 248
	},
	{
		"id" : 63794660,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "If we decide to go with `formula.tap.repo` instead of `formula.tap.to_s`, that's probably what the code in question should look like:\r\n\r\n```ruby\r\nif head_only?(formula) && formula.tap && formula.tap.repo !~ /(^|-)head-only$/i\r\n  problem \"Head-only (no stable download)\"\r\nend\r\n```\r\n\r\n(Note that this is semantically different from what @xu-cheng suggested, prefers a case-insensitive match instead of using `downcase`, and accepts both `head-only` and `<prefix>-head-only` in the repo part, but not `<prefix>head-only`.)",
		"created_at" : "2016-05-18T22:33:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 248
	},
	{
		"id" : 63763508,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Why is this conditional on whether Xcode is installed or not?",
		"created_at" : "2016-05-18T19:10:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 251
	},
	{
		"id" : 63767475,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "I found that it breaks some builds to specify it if Xcode isn't there.",
		"created_at" : "2016-05-18T19:36:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 251
	},
	{
		"id" : 63788120,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Could those be considered special cases and treated individually? I just want to avoid replacing a good default with something that appeases a few broken build systems, but creates more harm than good. (As far as I'm aware `MACOSX_DEPLOYMENT_TARGET` is just a different way of passing the `-mmacosx-version-min=<version>` compiler and `-macosx_version_min <version>` linker flag and should otherwise be completely transparent to the build system.)",
		"created_at" : "2016-05-18T21:45:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 251
	},
	{
		"id" : 63796233,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This cannot be simply replaced as `clang_version` is distinct from `llvm_build_version`. Unless this can be substituted with something else, we'll probably have to drop the entire `case` **except for** the contents of the `else` clause. As this is about inferring a fake Xcode version from the compilers provided on a CLT-only system, that's not a big loss.",
		"created_at" : "2016-05-18T22:45:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 252
	},
	{
		"id" : 63796640,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Now that this is gone, resetting this instance variable in `clear_version_cache` further down doesn't make any sense.",
		"created_at" : "2016-05-18T22:49:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 252
	},
	{
		"id" : 63798333,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "What's the reason for retaining the method, but making it return `nil` instead? Could that be made more explicit by making the code look as follows? (I think an empty method is somewhat confusing.)\r\n\r\n```ruby\r\n# Brief explanation.\r\nnil\r\n```",
		"created_at" : "2016-05-18T23:03:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 252
	},
	{
		"id" : 63798558,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Any reason why `MacOS.llvm_build_version` is retained but `ENV.llvm` (this here) can be safely dropped? (Or should the latter be moved to `compat/` instead?)",
		"created_at" : "2016-05-18T23:05:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 252
	},
	{
		"id" : 63829849,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "It's a compatibility method hence: to avoid breaking the DSL. The previous invocation can return `nil` so this is an acceptable value. ",
		"created_at" : "2016-05-19T06:51:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 252
	},
	{
		"id" : 63955358,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Thanks!",
		"created_at" : "2016-05-19T21:11:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 252
	},
	{
		"id" : 63955622,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I didn't realize the `llvm` method in the superclass is auto-generated from the now removed `:llvm` symbol and is unlikely to be called directly via its name. And I found no trace of it being used anywhere, so I guess my point about `compat/` is moot.",
		"created_at" : "2016-05-19T21:13:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 252
	},
	{
		"id" : 63753451,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This would cause many false positives if the `gsub` is not in the `inreplace` block. For example,\r\n```\r\ninreplace \"foo\" do |s|\r\n  s.change_make_var! ...\r\nend\r\n...\r\nbar.gsub!\r\n```\r\n\r\nAt the same time, it will fail to catch when multiple `inreplace` exist. \r\n\r\nI suggest use a multi-line regex, such as:(not tested yet)\r\n```\r\n/inreplace .* do .*$\\n.*\\.g?sub!?.*$\\n.*end/m\r\n```\r\n ",
		"created_at" : "2016-05-18T18:11:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 254
	},
	{
		"id" : 63754972,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Also, I think we should only catch `gsub`. Because `inreplace \"foo\", \"bar\", \"baz\"` is equivalent to using `gsub`. If you want to use `sub`, you have to use the block.",
		"created_at" : "2016-05-18T18:20:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 254
	},
	{
		"id" : 63807798,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Because `/…/m` causes `.` to also match `\\n`, this produces many false positives for valid use cases. (Also, having `$\\n` inside the regular expression looks weird.) A few examples: `brew audit afl-fuzz akka ansible bsdmake`.",
		"created_at" : "2016-05-19T00:47:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 254
	},
	{
		"id" : 63833168,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It that case we could replace `.` to `[^\\n]`.",
		"created_at" : "2016-05-19T07:28:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 254
	},
	{
		"id" : 63833815,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I also noticed now that we should only catch `gsub!` instead of `gsub` for the similar reason.",
		"created_at" : "2016-05-19T07:34:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 254
	},
	{
		"id" : 63837370,
		"user" : {
			"login" : "mikemcquaid"
		},
		"body" : "Yeh, that fixes all these cases 👍 Pushing.",
		"created_at" : "2016-05-19T08:08:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 254
	},
	{
		"id" : 63754075,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "The dot before `com` should be escaped.",
		"created_at" : "2016-05-18T18:15:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 256
	},
	{
		"id" : 63754167,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Same here, the dot before `com` should be escaped ",
		"created_at" : "2016-05-18T18:15:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 256
	},
	{
		"id" : 64204956,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think this will always be true, right?",
		"created_at" : "2016-05-23T11:09:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 268
	},
	{
		"id" : 64205711,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I would suggest to avoid `select` but use `find` directly to gain better performance. Such as\r\n```ruby\r\nmax_mtime = Time.at(0)\r\ncached_location.find do |f|\r\n  if f.directory?\r\n    if f.basename.to_s == \"CVS\"\r\n      Find.prune\r\n    else\r\n      next\r\n    end\r\n  end\r\n  mtime = f.mtime\r\n  max_mtime = mtime if mtime > max_mtime\r\nend\r\nmax_mtime\r\n```",
		"created_at" : "2016-05-23T11:16:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 268
	},
	{
		"id" : 64206453,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Since this branch will never be executed, I suggest to remove it.",
		"created_at" : "2016-05-23T11:22:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 268
	},
	{
		"id" : 64346423,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You probably want to remove this line.",
		"created_at" : "2016-05-24T08:15:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 268
	},
	{
		"id" : 64351828,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "Oh, it wasn't meant to be in the commit.",
		"created_at" : "2016-05-24T08:54:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 268
	},
	{
		"id" : 64362784,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Parentheses (in contrast to square brackets) are used to denote mandatory arguments. Thus, they only make sense when there are multiple alternatives of which exactly one needs to be used. You probably want to use square brackets here and we'll need to document the effect of that switch. (Check out other commands in our man page for how that typically looks like.)",
		"created_at" : "2016-05-24T10:02:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 270
	},
	{
		"id" : 64363482,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "We'll need to find another solution for documenting the alias, as this breaks our man page that is auto-generated from this comment. (But I don't have an idea yet what a good solution for this would be.) The least invasive, but probably a bit confusing variant would be to make all of the above items start with:\r\n\r\n```\r\n(`search`|`-S`)\r\n```\r\n\r\nInstead of:\r\n\r\n```\r\n`search`, `-S`\r\n```",
		"created_at" : "2016-05-24T10:06:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 270
	},
	{
		"id" : 64531754,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think this section is too specific for here. The longer we make this document the less likely people will read any of it. Would be good to pull into a separate \"Contributing documentation changes\" document that's linked from here.",
		"created_at" : "2016-05-25T08:13:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 272
	},
	{
		"id" : 64531822,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Think this line is worth killing, it doesn't say much.",
		"created_at" : "2016-05-25T08:14:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 272
	},
	{
		"id" : 64532040,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'm not convinced we need this section, really. It's too generic to be particularly useful unless it's just a single bullet pointing to https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md#how-to-open-a-homebrew-pull-request-and-get-it-merged ",
		"created_at" : "2016-05-25T08:16:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 272
	},
	{
		"id" : 64633746,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Agreed. I just wanted to get this documented so it's easier for people to discover (or get linked to). Wasn't sure where to best put this, but a separate document seems reasonable.",
		"created_at" : "2016-05-25T19:06:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 272
	},
	{
		"id" : 66716506,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Maybe just call it `parse`",
		"created_at" : "2016-06-12T05:53:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 66716523,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I suggest to put internal method into private scope. ",
		"created_at" : "2016-06-12T05:55:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 66716539,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I don't think we need this method which is duplicated with latter one. ",
		"created_at" : "2016-06-12T05:56:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 66719276,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "I called it `parse_version`, because `parse` already defined in `Version`.\r\nhttps://github.com/vladshablinsky/brew/blob/0ae9114dc1c621a51f7f73ff0fdb508fddf34d48/Library/Homebrew/version.rb#L283-L286",
		"created_at" : "2016-06-12T10:44:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 66720155,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Can you merge these two methods as one?",
		"created_at" : "2016-06-12T12:19:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 66796778,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "`parse_version` is called only in those places where `Version.new` used to be called, `parse` and `parse_version` are for different purposes, I think. `parse` is more helpful for parsing url and different `Pathname`'s, but `parse_version` is only used to decide whether we need a `Version` or `HeadVersion`. But I'll merge if you still think it's better.",
		"created_at" : "2016-06-13T14:06:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 66802600,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I agree that using `parse` for that would be complete overkill. Maybe a better approach than creating this method would be to add a `Version.create` that dispatches to either `Version.new` or `HeadVersion.new` depending on the given string. This would also avoid some duplication of this logic in other code from this PR.",
		"created_at" : "2016-06-13T14:36:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 66803218,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Just realized this actually is part of the `Version` class and the only difference to my suggestion is the method name. Sorry for the noise and please ignore my stupid comment!",
		"created_at" : "2016-06-13T14:40:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 66803589,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Should this be using `Version.parse_version` to avoid the slight code duplication?",
		"created_at" : "2016-06-13T14:42:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 66803753,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Personally I would prefer a universal interface, so anyone who wasn't familiar with internal implementation can easy use this interface and won't be confusing on two seemly similar methods.",
		"created_at" : "2016-06-13T14:43:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 67613812,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Use `return unless head?`",
		"created_at" : "2016-06-19T09:32:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 67613835,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think for better robustly you should also check whether the local clone exists. Only update commit when it does.",
		"created_at" : "2016-06-19T09:34:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 67613842,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Besides this place. You also need to update head version in clean logic https://github.com/Homebrew/brew/blob/master/Library/Homebrew/formula_installer.rb#L599",
		"created_at" : "2016-06-19T09:34:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 67613888,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This doesn't seem to be right. Also why we need this method anyway? Where will we use it?",
		"created_at" : "2016-06-19T09:37:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 67613909,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You can just inline this method in `update_commit`",
		"created_at" : "2016-06-19T09:38:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 67613931,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Why not just\r\n```ruby\r\ndef to_s\r\n  version\r\nend",
		"created_at" : "2016-06-19T09:40:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 67613994,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Actually, you don't need to implement `to_s`. It's already there in parent class.",
		"created_at" : "2016-06-19T09:41:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 67614016,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Briefly scanning the codes, I find this condition seems to be true for any cases.",
		"created_at" : "2016-06-19T09:44:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 67614087,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "After double checking, I think you can drop this method. All you need to do is updating https://github.com/Homebrew/brew/blob/master/Library/Homebrew/version.rb#L199 to `return unless other.is_a? Version`",
		"created_at" : "2016-06-19T09:51:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 67618454,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "@vladshablinsky I still find it's confusing to have both this method and existing `parse`. How about we name this method to `create` as `Version.create(foo)`?",
		"created_at" : "2016-06-19T15:08:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 68030035,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "What's your thought on calling this `Version.create`?",
		"created_at" : "2016-06-22T10:29:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 68030252,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "@vladshablinsky These kind of discarded changes should be removed from git history by squashing the commit.",
		"created_at" : "2016-06-22T10:31:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 71034442,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "`quiet_system` doesn't check exit code like safe_system does.",
		"created_at" : "2016-07-15T20:14:15Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 274
	},
	{
		"id" : 71035030,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "`git rev-parse --short=7 HEAD` does not necessary return string with the length of 7 (It could be more). This makes me wonder should we just store full length commit in the file structure?",
		"created_at" : "2016-07-15T20:19:18Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 274
	},
	{
		"id" : 71035369,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "`%r{^https?://github\\.com/[^/]+/[^/]+\\.git$}`\r\n\r\nNoted that you should only match GitDownloadStrategy, therefore the trailing `.git` cannot be omitted.",
		"created_at" : "2016-07-15T20:22:04Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 274
	},
	{
		"id" : 71035397,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "unnecessary blank line",
		"created_at" : "2016-07-15T20:22:21Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 274
	},
	{
		"id" : 71035476,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think this should be named as `head_prefix_up_to_date?`, because it is only used by head.",
		"created_at" : "2016-07-15T20:23:01Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 274
	},
	{
		"id" : 71035565,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "`return all_versions.sort unless head_versions.empty?`",
		"created_at" : "2016-07-15T20:23:53Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 274
	},
	{
		"id" : 71036084,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Use `max { }` instead of `sort_by { }.last` for better performance.",
		"created_at" : "2016-07-15T20:28:00Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 274
	},
	{
		"id" : 71036528,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "For document, I think `Guess whether head prefix is up to date by checking whether stable or devel version has been changed.`",
		"created_at" : "2016-07-15T20:32:06Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 274
	},
	{
		"id" : 71041617,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Agreed. Wherever possible, we should be operating on the full commit hash and only truncate it to a length of 7 or more characters (by using `git rev-parse --short=7`) when exposing it to the user (and the full commit hash would be unwieldy).",
		"created_at" : "2016-07-15T21:12:35Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 274
	},
	{
		"id" : 71041842,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "And omit the intermediate `Keg.new`. `Tab.for_keg` can directly operate on a keg path.",
		"created_at" : "2016-07-15T21:14:36Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 274
	},
	{
		"id" : 71056653,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "This piece seems to be changed in the other opened PR with `HEAD` versions. I just didn't changed this PRs commits. When https://github.com/Homebrew/brew/pull/478 is merged I'll just remove some of the commits and everything will be fine.",
		"created_at" : "2016-07-16T00:28:55Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 274
	},
	{
		"id" : 71056733,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "Probably `return all_versions.sort if head_versions.empty?`",
		"created_at" : "2016-07-16T00:30:52Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 274
	},
	{
		"id" : 71056831,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This explains why this looked so familiar. Sorry for the duplicate advice!",
		"created_at" : "2016-07-16T00:32:53Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 274
	},
	{
		"id" : 71063377,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You are right.",
		"created_at" : "2016-07-16T08:55:18Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 274
	},
	{
		"id" : 71971149,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I don't think you need this method.",
		"created_at" : "2016-07-23T11:10:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 71971153,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Just `head.version.commit`",
		"created_at" : "2016-07-23T11:11:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 71971155,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think this entry is unnecessary.",
		"created_at" : "2016-07-23T11:11:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 71971157,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You need to update `Tab#empty` as well.",
		"created_at" : "2016-07-23T11:12:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 71971165,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Rethink a bit. The `start_with?` is kinda bother me. At the same time, I do want to keep prefix short. So can we try to use short commit in the prefix but store the full length commit to tab file?",
		"created_at" : "2016-07-23T11:13:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 71971168,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Do we really need to cache it? will it cause any side effect? ",
		"created_at" : "2016-07-23T11:14:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 71971174,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Why do you need this method? And what does it mean?",
		"created_at" : "2016-07-23T11:15:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 71971193,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Oh, may be we should just use full length commit everywhere. ",
		"created_at" : "2016-07-23T11:16:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 71971925,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "I need this method to know If we need to fetch upstream repo or not. It's tightly related to `GitHubGitDownloadStrategy`.\r\n\r\nThe purpose of `GitHubGitDownloadStrategy` is to easily understand if installed package is up-to-date. If it's not, then we need to fetch it from upstream. So, `local_commit?` shows whether we need to fetch the repo or not. With this method we can call \r\n`downloader.fetch unless downloader.local_commit?` for any `downloader` descendant of `VCSDownloadStrategy`.\r\n\r\nThat said, I'm not sure about this behaviour, because probably we need to fetch only if we upgrade the package, but if we do need it, then there arise many cases of how we behave in `outdated` methods. E.g. if we use `GitDownloadStrategy`, we need to fetch the repo to know it's outdated, the same is true for any `VCSDownloadStrategy` except `GitHubGitDownloadStrategy`, so, if we want fetch to be performed only when we upgrade package, we need some additional checks for the `downloader` to be `GitHubGitDownloadStrategy` (and I'm not sure where we put these checks). Thus, I made `local_commit?` method for now and used `VCSDownloadStrategy` interface.",
		"created_at" : "2016-07-23T12:38:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 274
	},
	{
		"id" : 64699949,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`opts` -> `options`. `s` -> `string`",
		"created_at" : "2016-05-26T07:08:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64699981,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "What's `:gloe`? I'd remove it unless we need this option.",
		"created_at" : "2016-05-26T07:08:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64699993,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Newline after this.",
		"created_at" : "2016-05-26T07:09:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64700037,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Spaces around `-`",
		"created_at" : "2016-05-26T07:09:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64700079,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Newline (and configure your editor to always write it out.",
		"created_at" : "2016-05-26T07:10:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64700105,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd probably flip this around to do the `raise` here instead so `out` is the final statement and it's successful.",
		"created_at" : "2016-05-26T07:10:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64700963,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Changed `opts` to `options`.\r\n\r\nIs `s` not a conventional Ruby/brew abbreviation for \"string\"? The suffix `_s` is used elsewhere in both brew and main Ruby, so I figured the variable name followed suit.",
		"created_at" : "2016-05-26T07:21:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64701125,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "`:glue` (typo fixed) = thing that's put between other string elements derived from the truncation. It's not necessary for implementation anywhere now, but this really feels like a place where there should be an external control knob on this function, so I put it in.",
		"created_at" : "2016-05-26T07:23:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64701142,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Added.",
		"created_at" : "2016-05-26T07:23:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64701156,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fixed.",
		"created_at" : "2016-05-26T07:23:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64701192,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Added.\r\n\r\nSorry, still working on getting my editor configurations set up right.",
		"created_at" : "2016-05-26T07:23:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64701794,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I don't see a way to do this cleanly. I could move the \"raise ... if\" up to the top of the loop, leaving the `scale = scale - 0.05` at the bottom. But that means the return is still not the last statement. And if I move the `scale = ...` statement elsewhere, that means that either a) at the point of exit, the `scale` value is inconsistent with the rest of the variables, or b) we start from `scale = 1.04` outside the loop and decrement at the top, which is IMHO both ugly and less readable, because the `scale` variable is initialized to a value which it should never take on in use, for the sake of control flow.\r\n\r\nAn early exit from an open-ended loop kind of makes sense to me. If it reads better, maybe we could constrain the loop and pull the `raise` outside of it, so at least the `return` is the last statement inside the loop body.",
		"created_at" : "2016-05-26T07:30:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64702135,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yeh, that's fine with `s` 👍 ",
		"created_at" : "2016-05-26T07:34:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64702157,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd say YAGNI; it's easy enough to add if we do.",
		"created_at" : "2016-05-26T07:34:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64702396,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`scale -= 0.05`",
		"created_at" : "2016-05-26T07:36:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64702470,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Looping here feels a bit weird; we should be able to calculate this so that we can calculate the maximum bytes in advance before we do any string manipulation and avoid the loop?",
		"created_at" : "2016-05-26T07:36:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64703135,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I don't think that's the case here, because UTF-8 is a variable-length encoding. You may be able to express it more succinctly, but you have to traverse the string from the beginning, and traverse the string from the end _with a look-behind window_ to go the other way. That's the downside of UTF-8: you do not have O(1) random access to array elements when viewing it as a character array.\r\n\r\nThe loop here is a way to do \"chunky\" truncation without paying for the more expensive iteration over variable-length Unicode code units.",
		"created_at" : "2016-05-26T07:43:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64703320,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "And the \"impedance mismatch\" here is that we're trying to hit a size limit expressed in bytes, but doing truncation in terms of characters (which are represented in variable numbers of bytes). If we were doing both in bytes, or this were a fixed-width encoding, you could compute it exactly without a loop.",
		"created_at" : "2016-05-26T07:45:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64703468,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "(And when I say, \"UTF-8 is a variable-length encoding\", that's a simplification: this implementation works for all encodings, not just UTF-8. But it has to be done this way because some possible input encodings, including UTF-8 which is what we use pretty much everywhere, are variable-width. I believe this implementation is not encoding-dependent.)",
		"created_at" : "2016-05-26T07:47:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64703695,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think in this case as we're picking a relatively arbitrary/safe 1MB anyway I'd just restrict this to assuming the worst-case scenario of every UTF-8 character being maximum length and just truncating more than necessary if needed. Another option is reencoding this in a fixed-length encoding.",
		"created_at" : "2016-05-26T07:49:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64704370,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fixed.",
		"created_at" : "2016-05-26T07:56:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64704832,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Maybe this is the part that deserves emphasis: this function doesn't just truncate a string; it truncates it while a) guaranteeing an upper limit on the byte size of the encoded representation, and b) preserving validity in the original input encoding. I don't see a way to do that without at least one loop.",
		"created_at" : "2016-05-26T08:00:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64706586,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "> I think in this case as we're picking a relatively arbitrary/safe 1MB anyway I'd just restrict this to assuming the worst-case scenario of every UTF-8 character being maximum length and just truncating more than necessary if needed.\r\n\r\nThat gets us down to about 128 KB max per log file (1 MB per file to prevent unicorns and allow for multiple log files / 8 bytes max encoding per character), which is feeling kind of small for me. And yeah, I know I was one of the folks advocating for truncation in the first place.\r\n\r\n> Another option is reencoding this in a fixed-length encoding.\r\n\r\nGiven the existence of surrogate pairs, you'd have to either use UTF-32 and accept a 4x size error in the vast majority of our use cases (making the effective limit 256 KB per file instead of 1 MB) or accept possible truncation-related encoding errors (and given our nerdy and Asian-leaning user base, that's not inconceivable). Still better than the worst-case UTF-8 scenario, though.\r\n\r\nI guess a 4x error storage size error should be negligible in any healthy system, but I feel like that's a lot to pay for getting rid of one level of looping and four or so lines of code.\r\n\r\nWish I had a) stats, and b) a full record of our bottle builds for the last few months so we could see what log file sizes in the wild are like.",
		"created_at" : "2016-05-26T08:15:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64707270,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fair enough. Switched this to an inline constant and no externally-exposed options.",
		"created_at" : "2016-05-26T08:20:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64707381,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Unsure how to read this: by \"that' do you mean \"the _s suffix is okay, but this usage is not\", or \"okay, this usage of `s` is fine too\"?",
		"created_at" : "2016-05-26T08:21:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64707383,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> That gets us down to about 128 KB max per log file (1 MB per file to prevent unicorns and allow for multiple log files / 8 bytes max encoding per character), which is feeling kind of small for me. And yeah, I know I was one of the folks advocating for truncation in the first place.\r\n\r\nI think that's fine. The pragmatic solution, I think, is to assume a given number of 8 bytes encoding and just accept that this will fail in the case where every single character is an 8 byte encoded one.\r\n\r\n\r\n\r\n> Given the existence of surrogate pairs, you'd have to either use UTF-32 and accept a 4x size error in the vast majority of our use cases (making the effective limit 256 KB per file instead of 1 MB) or accept possible truncation-related encoding errors (and given our nerdy and Asian-leaning user base, that's not inconceivable). Still better than the worst-case UTF-8 scenario, though.\r\n\r\nI think truncation is totally fine. IIRC we already do that somewhere else. Build output is all we're interested in here and if a 漢 becomes a � I'm not sure that's any worse for someone who doesn't speak Japanese (e.g. all maintainers). I honestly think we could probably just use ASCII, here.\r\n\r\n> I guess a 4x storage size error should be negligible in any healthy system, but I feel like that's a lot to pay for getting rid of one level of looping and four or so lines of code.\r\n> \r\n> Wish I had a) stats, and b) a full record of our bottle builds for the last few months so we could see what log file sizes in the wild are like.\r\n\r\nThe simple solution is going to be much easier to understand and fixes the actual problem we have rather than speculatively fixing e.g. encoding problems that we don't actually see in the wild. It's easy to iterate if we do see them rather than have code that's potentially doing nothing but we'll never actually know either way.",
		"created_at" : "2016-05-26T08:21:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64707653,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sorry, your current version is fine as-is: \"okay, this usage of s is fine too\"",
		"created_at" : "2016-05-26T08:23:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64708057,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "> Another option is reencoding this in a fixed-length encoding.\r\n\r\nAw, crap, this doesn't actually work: the worst-case scenario for variable-length encodings may be longer than fixed-length encodings. That's part of the fixed/variable trade-off. Concrete example: UTF-32 is 4 bytes per character, but UTF-8 may be up to 8 bytes per character. Fundamentally, truncating in one encoding can't guarantee you a max byte size in another encoding unless both encodings are fixed-length.",
		"created_at" : "2016-05-26T08:26:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64708351,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "(And we have to maintain the same input/output encoding here because the calling method is using JSON and UTF-8 (or whatever) to upload to GitHub (which is surely using UTF-8 internally), which is the real limitation which needs to be met here. So the output of this function must be encoded using the same encoding as the input.)",
		"created_at" : "2016-05-26T08:28:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64710584,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "If we convert to something that's a subset of UTF-8 but only using single-byte characters e.g. ASCII, that'll work, no?",
		"created_at" : "2016-05-26T08:46:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64711938,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "If you convert to 7-bit ASCII and back (lossily) you are guaranteed to be correct, both in size and encoding validity. But I think that will lose useful diagnostic information. There are enough non-US programs and users in Homebrew that non-US characters – even just accented vowels, or names of font files – might well make it in to build script output. No non-US characters will survive the round-trip, which is a bummer.\r\n\r\nAnd if \"weird\" characters do make it in to a build script's execution, that might cause problems, and being able to see that clearly might be helpful in diagnosing them.\r\n\r\nAlso because of the Ruby encoding issues, I'm not entirely sure about the behavior of round-tripping strings through 7-bit ASCII under Ruby 1.8 vs 1.9 vs 2.0.",
		"created_at" : "2016-05-26T08:57:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64713024,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It feels like the best solution is probably to take a look at existing gists and see if we can find cases where our debugging would have needed non-ASCII characters. I'm pretty sure you'll struggle to find (m)any.",
		"created_at" : "2016-05-26T09:04:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64713945,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Probably true, and I don't have the time to do the legwork on this right now. I see where you're coming from.\r\n\r\nWhat do you think about just changing this to just round-trip it through ASCII for the time being, and change it to the looped version if we find a case that breaks or a user complains? I'm down with that.",
		"created_at" : "2016-05-26T09:11:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64714110,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> What do you think about just changing this to just round-trip it through ASCII for the time being, and change it to the looped version if we find a case that breaks or a user complains? I'm down with that.\r\n\r\n👍 ",
		"created_at" : "2016-05-26T09:12:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64714325,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Cool. Going to bed now, so don't expect a rapid reply. Will send and amendment on this tomorrow.\r\n\r\nChanging to in-progress.",
		"created_at" : "2016-05-26T09:14:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64714791,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Great, thanks!",
		"created_at" : "2016-05-26T09:18:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64787097,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think all of this complication can be avoided by converting the input string to binary encoding, then cutting off the front/back parts at a fixed byte offset dictated by the limits we've chosen, and then re-interpreting the bytes again as UTF-8 (while dropping/replacing invalid byte sequences). This should be pretty similar to [this `test-bot` code](https://github.com/Homebrew/brew/blob/aa747b915a080633e626cd741fa8f74ae6c5c9d8/Library/Homebrew/cmd/test-bot.rb#L1011-L1017). IMO that's a clearer approach.\r\n\r\nAnother, also simpler, approach might be to split the log into individual lines, count the bytes in a line, and then use that to determine an appropriate number of leading/trailing lines. This assumes that the length of individual lines doesn't get out of hand, but has the benefit that it won't cut in the middle of a line.",
		"created_at" : "2016-05-26T17:34:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64790307,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "```\r\nfront_weight = options.fetch(:front_weight, 0.5)\r\n```",
		"created_at" : "2016-05-26T17:53:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64790740,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can also be moved down to where it is being validated, as it isn't used in the first early return.",
		"created_at" : "2016-05-26T17:56:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64791043,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The curly braces can be omitted. (`brew style` should have pointed this out.)",
		"created_at" : "2016-05-26T17:57:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64792183,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Do we have a valid use case for setting this to 0 or 1? If not, I'd be more conservative and clamp this value to no less than 0.1 and no greater than 0.9. I'd be also tempted to *always* just clamp to this range if an invalid value is supplied instead of raising an exception here. (The exception can still be raised for `ARGV.homebrew_developer?`.)\r\n\r\nThough to be honest, I'd prefer if we just hard-coded the value and only added the option back once a need arises.",
		"created_at" : "2016-05-26T18:04:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64793335,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "If we really need to stick with this loop or a variation thereof:\r\n\r\n```ruby\r\nfront = s[0..(scale * max_bytes * front_weight).floor]\r\nback = s[-(scale * max_bytes * (1.0 - front_weight)).ceil..-1]\r\n```",
		"created_at" : "2016-05-26T18:11:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64854468,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I wanted to put all the valid `options` at the top so you could read them as part of the function signature without having to read through the whole function for them.",
		"created_at" : "2016-05-27T03:50:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64854604,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "`brew test-bot` truncates step output by chopping off the beginning of the file, effectively doing `front_weight = 0`. If this has support for it, `test-bot` could be refactored to share this code instead of having a separate text-aware truncation implementation.",
		"created_at" : "2016-05-27T03:52:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64857467,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah, that `test-bot` style approach works nicely. Changing it to do that.",
		"created_at" : "2016-05-27T04:52:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64858772,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think you either want to assign the output of this to `out` (since `encode` returns a new string and doesn't modify its receiver, unlike `force_encoding`) or you want to use `encode!` instead. Otherwise the replacement of invalid bytes won't actually happen, I'm afraid. Alternatively, and maybe also clearer:\r\n\r\n```ruby\r\nif ruby_has_encoding?\r\n  out.force_encoding(\"UTF-8\").encode(\"UTF-16\", :invalid => :replace).encode(\"UTF-8\")\r\nelse\r\n  out\r\nend\r\n```\r\n\r\n(I'm also a bit surprised that we need a round-trip through UTF-16. Isn't there a more direct way to achieve the same result?)",
		"created_at" : "2016-05-27T05:22:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64859185,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think this needs to be changed a bit for clarity. `force_encoding` modifies its receiver and returns it, too. Thus `bytes` and `s` will be the same object. On the other hand `encode` returns a new string, thus `glue` and `glue_bytes` will be different objects in the `ruby_has_encoding?` case.\r\n\r\nI think I can see where you're coming from with introducing new variables for the byte strings here, but to me it feels like something like this could be clearer:\r\n\r\n```ruby\r\nif ruby_has_encoding?\r\n  s.force_encoding(\"BINARY\")\r\n  glue = glue.encode(\"BINARY\")\r\nend\r\n```",
		"created_at" : "2016-05-27T05:30:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64859272,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Okay, the round-trip seems to be necessary as that's already in `fix_encoding!` used in the test bot.",
		"created_at" : "2016-05-27T05:33:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64860437,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yep, I meant `encode!`. Switched.\r\n\r\nAnd it seems necessary: `encode(\"UTF-8\", :invalid => :replace)` appears to be a no-op if it's already encoded in UTF-8, even if the string is not valid. I didn't see a way to trigger a validity-check-with-replacement without changing the encoding.",
		"created_at" : "2016-05-27T05:56:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64860824,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Sorry for being a bit annoying, but you missed to change the other `encode` to `encode!`. This line is pretty long and convoluted. How about rewriting this as follows?\r\n\r\n```ruby\r\nout = front + glue_bytes + back\r\nif ruby_has_encoding?\r\n  out.force_encoding(\"UTF-8\")\r\n  out.encode!(\"UTF-16\", :invalid => :replace)\r\n  out.encode!(\"UTF-8\")\r\nend\r\nout\r\n```",
		"created_at" : "2016-05-27T06:03:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64862043,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah, that reads better. Switching to that.",
		"created_at" : "2016-05-27T06:27:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64864505,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Given these both use ternary operators with the same conditional: an `if/else` would be nice.",
		"created_at" : "2016-05-27T07:01:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64864526,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Does this comparison work to just use `0` and `1`?",
		"created_at" : "2016-05-27T07:01:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64864579,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👏 ",
		"created_at" : "2016-05-27T07:01:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64960886,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Done.",
		"created_at" : "2016-05-27T20:14:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64960924,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "It does. I just thought it read better as 0.0 and 1.0 since we're expecting floats as inputs. Would `1` and `0` be more idiomatic for Ruby or Homebrew?",
		"created_at" : "2016-05-27T20:15:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64961360,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think it's maybe more idiomatic but don't feel strongly either way; was mostly curious 😉 ",
		"created_at" : "2016-05-27T20:18:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64966815,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Not sure about Ruby customs here, but from overall programming experience I like the subtle hint here that the variable is supposed to contain a float value.",
		"created_at" : "2016-05-27T21:10:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64972062,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think it's worth moving this range check further up to where `front_weight` is fetched, so that option fetching and validation are in the same spot and the validation happens every time, not just when the input happens to exceed the given limit. This will also help avoid the scenario where this function is invoked incorrectly, but isn't noticed because most inputs tend to be below the threshold. (The only reason I can think of to have the validation here is to elide the cost of the check for smaller inputs, but this sounds like premature optimization to me.)",
		"created_at" : "2016-05-27T22:01:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64972480,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "If I can convince you to continue to use `s` and `glue` beyond this point, then the `else` could be omitted and this block could become:\r\n\r\n```ruby\r\nif ruby_has_encoding?\r\n  s.force_encoding(\"BINARY\")\r\n  glue.encode!(\"BINARY\")\r\nend\r\n```\r\n\r\n(I guess one reason not to do this would be that this will modify `s`, so this could cause issues on the call site if this argument continues to be used there—and its encoding changes surprisingly.)",
		"created_at" : "2016-05-27T22:06:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64973325,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This needs a `+ 1` added inside the parentheses:\r\n\r\n```ruby\r\nback = bytes[-(max_bytes_in * (1.0 - front_weight) + 1).ceil..-1]\r\n```\r\n\r\nOtherwise it will do the wrong thing for the case of `front_weight = 1.0` as this will result in a range `0..-1` and this will yield the complete string instead of the bare minimum (the last character). I believe there's no simple way to end up with an empty string for the back part for `front_weight = 1.0`. (I guess the same can be said about the front part and the special case `front_weight = 0.0`.)",
		"created_at" : "2016-05-27T22:17:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64977766,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Oh. yeah, the front_weight = 0.0 and 1.0 probably just need to be special-cased since there's nothing in the `range` semantics that lets you produce an empty set easily and readably.",
		"created_at" : "2016-05-27T23:26:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64977967,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I'd really rather stick with two different variable sets, so it's clear when we're working in the character domain versus the byte domain, and make it less likely that a change to this would forget a `.dup` and modify `s` in the caller, which isn't the intent.",
		"created_at" : "2016-05-27T23:30:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64980981,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You might want to modify this a bit to avoid other (less likely) edge cases, e.g. if `front_weight != 0.0`, but `(max_bytes_in * front_weight).floor == 0`:\r\n\r\n```ruby\r\nfront_bytes = (max_bytes_in * front_weight).floor\r\nback_bytes = max_bytes_in - front_bytes\r\nif front_bytes == 0\r\n  front = bytes[1..0]\r\n  back = bytes[-max_bytes_in..-1]\r\nelsif back_bytes == 0\r\n  front = bytes[0..(max_bytes_in - 1)]\r\n  back = bytes[1..0]\r\nelse\r\n  front = bytes[0..(front_bytes - 1)]\r\n  back = bytes[-back_bytes..-1]\r\nend\r\n```\r\n\r\nNotice also the slight change in the upper limit for `front` (added `- 1`). Just a very minor detail, but otherwise you'll get one more byte than desired. (We're in the popular category of off-by-one errors. 😄)",
		"created_at" : "2016-05-28T00:52:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64981199,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Makes sense!\r\n\r\nI just thought of: Maybe rename `bytes` to `s_bytes` and/or maybe even rename `s` to `text`. `s` is nice and short and not likely to cause confusion, but `text` is a tad more expressive and nicely aligns with `glue`. Getting increasingly irrelevant: Maybe even `head` and `tail` (reminiscent of the command line tools) instead of `front` and `back`?",
		"created_at" : "2016-05-28T01:02:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 68492969,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "http://bot.brew.sh/job/Brew%20Pull%20Requests/704/version=el_capitan/testReport/junit/brew-test-bot/el_capitan/readall___syntax/; needs some parens.",
		"created_at" : "2016-06-25T19:43:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 68748727,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Minor nit, but if you wanted to make sure there's nothing else other than `x`es before and after the glue, you'd need to anchor the regular expression at the start and end of the string using `^` and `$`. If you just want to check that the glue appears somewhere in the middle (i.e. there is at least one `x` before and after it), then the following is basically equivalent to the current check, but simpler:\r\n\r\n```ruby\r\nassert_match \"x#{glue}x\", s\r\n```",
		"created_at" : "2016-06-28T12:44:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 68748917,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The expected value needs to be the first argument to any `assert_*` method, otherwise the output will be confusing once the assertion isn't satisfied.",
		"created_at" : "2016-06-28T12:45:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 68748950,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Same here. The expected value needs to be the first argument to any `assert_*` method, otherwise the output will be confusing once the assertion isn't satisfied.",
		"created_at" : "2016-06-28T12:46:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 68749171,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Also: Binary operators (except `/` when applied to `Pathname` objects) should always be surrounded with spaces.",
		"created_at" : "2016-06-28T12:47:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 68842267,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You have to be a bit careful with using parentheses inside arguments if the argument list is not embedded in parentheses, as this can be ambiguous (that's why CI with Ruby 1.8.7 is complaining, even though this particular usage is fine and thus it's truly just a warning). You experienced another such case with the regular expression, where the `/` could be interpreted as a division instead of the start of a regular expression and which also raises a syntax warning. That's the downside to the beauty of method invocations without parentheses.\r\n\r\nOne possible workaround is string interpolation, i.e. \"#{\"x\" * (n - glue.length)}#{glue}\", and another one is sticking the expected value into a temporary variable like so:\r\n\r\n```ruby\r\ns_expected = (\"x\" * (n - glue.length)) + glue\r\nassert_equal s_expected, s\r\n```",
		"created_at" : "2016-06-28T21:00:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 68846106,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Would it be consistent with Homebrew style to just add the method invocation parentheses?\r\n\r\n```\r\nassert_equal((\"x\" * (n - glue.length)) + glue, s)\r\n```",
		"created_at" : "2016-06-28T21:22:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 68848238,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Yep! I'm certainly not the authority on our style rules, but my interpretation is: Use parentheses when necessary and avoid them when that's unambiguously possible and is unlikely to cause confusion for the reader.\r\n\r\nPersonally, I'm in favor of always using parentheses (probably due to my experience with other programming languages and because I don't like the inconsistency of doing the same thing in two different ways, just like `map` vs. `collect`). I do appreciate the beauty of DSLs made possible by this (like our formula DSL) and a few other use cases.",
		"created_at" : "2016-06-28T21:35:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 68951032,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fixed it by adding the extra parentheses.",
		"created_at" : "2016-06-29T14:03:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 279
	},
	{
		"id" : 64992224,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Can we avoid this? I'm kinda down to add new method to Formualry. ",
		"created_at" : "2016-05-28T18:19:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 64992233,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It looks weird to have this line inside block, especially considering the ensure block ",
		"created_at" : "2016-05-28T18:20:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 64992241,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "The main is a little confusing. ",
		"created_at" : "2016-05-28T18:21:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 64992264,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "And I think it should be avoid, you can always pass the type in the sandbox rules, which is the only place it's used. ",
		"created_at" : "2016-05-28T18:22:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 64992268,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "We could switch it to detect formulae the other way, by excluding the names known to be installation steps (\"install\", \"postinstall\", \"test\") and assuming everything else is a formula.\r\n\r\nCome to think of it, that may be more correct anyway, because formulae may have been removed or renamed over the course of a `brew update` since the installation was initially done.\r\n\r\nIt would accidentally move the logs from any external commands which are dropping their own log files under `HOMEBREW_LOGS`, but that seems like a small risk with low impact.",
		"created_at" : "2016-05-28T18:22:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 64992287,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Moved outside the block.",
		"created_at" : "2016-05-28T18:24:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 64992322,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I'm not sure that works, because the per-step subdirectories are created conditionally inside the sandboxed processes only as needed, and I think that counts as a modification to the parent directory. I'll test it to be sure.\r\n\r\nWould a different name help?\r\n\r\nI think it's useful to be able to get the path to the top log directory for a given formula, e.g. for code that doesn't know or care what all steps might exist under it, like if you wanted to `cd` the user to it for manual examination, or just create a tarball of everything under it.",
		"created_at" : "2016-05-28T18:27:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 64992367,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Nope, the mkpath for log is happening outside of sandbox. ",
		"created_at" : "2016-05-28T18:31:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 65011511,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> We could switch it to detect formulae the other way, by excluding the names known to be installation steps (\"install\", \"postinstall\", \"test\") and assuming everything else is a formula.\r\n\r\n👍 ",
		"created_at" : "2016-05-29T21:08:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 65011520,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Could maybe always upload them all? Either way, not sure this makes sense to be an end-user option.",
		"created_at" : "2016-05-29T21:09:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 65011522,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Also maybe worth thinking about `postinstall`",
		"created_at" : "2016-05-29T21:09:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 65011569,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Would be nice to avoid renaming this if possible.",
		"created_at" : "2016-05-29T21:10:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 65018194,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah. After seeing other folks' feedback about alternate dir organization, I think \"just always upload everything\" is the right behavior, too. Going to remove this option and fix `gist-logs` to include the logs from all steps, with some rename logic to make it sensible.",
		"created_at" : "2016-05-30T02:29:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 65018455,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "It's possible, but ugly, with this general approach: like `run_test`, `install` is overridden by the DSL definitions, so we can't modify it directly, but we need a level of indirection to introduce the logging setup before calling it directly. We could avoid a it by adding that `with_logging` call at this point in `build.rb`, but I think that's the wrong place, because it should _always_ be called when `install` will be run, not just when it's done through this `build.rb` file. The way to avoid introducing a `run_install` is to make an implicit rule that \"every place that calls `install` needs to wrap it with a `with_logging do` call\", which seems worse than introducing a new method that does that. Introducing a `run_install` level formalizes that and puts it in the code structure, instead of doco which contributors may or may not have read.",
		"created_at" : "2016-05-30T02:36:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 65049133,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Makes sense 👍 ",
		"created_at" : "2016-05-30T09:47:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 74727596,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Why add the `()`?",
		"created_at" : "2016-08-15T07:27:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 74727645,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "But what does `--test-logs` do? 😉 ",
		"created_at" : "2016-08-15T07:28:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 74821482,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Oops. Just an incomplete reversion of the prior change to `logs(log_type)`. Fixed.",
		"created_at" : "2016-08-15T19:44:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 74821508,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fixed. :)",
		"created_at" : "2016-08-15T19:45:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 74899528,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Another `()`",
		"created_at" : "2016-08-16T09:05:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 74899627,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd generally flip the test to be just for `@active_log_type` rather than `.nil?`",
		"created_at" : "2016-08-16T09:05:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 74899672,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Also: why use `@active_log_type` here and `active_log_type` below?",
		"created_at" : "2016-08-16T09:06:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 74899747,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Split this into two assignments.",
		"created_at" : "2016-08-16T09:06:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 75184934,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Old Java habits. Fixed.",
		"created_at" : "2016-08-17T18:58:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 75383848,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Is this indeed no longer needed? This looks like a leftover from the original implementation of this PR.",
		"created_at" : "2016-08-18T20:34:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 75384557,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Strictly speaking, this is now the log file prefix, not the log file location, right? Maybe it would even make sense to explicitly enumerate all the values this can be set to in this documentation comment.",
		"created_at" : "2016-08-18T20:38:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 75385113,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It would be nice if the documentation comments were always complete sentences, i.e. I'm missing a trailing full stop here and in a few other places that is present in (most?) other such comments.",
		"created_at" : "2016-08-18T20:41:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 75385569,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think you can simplify this to the following without any change in meaning (unless we can expect the first assignment to fail):\r\n\r\n```ruby\r\ndef with_logging(log_type)\r\n  old_log_type = @active_log_type\r\n  @active_log_type = log_type\r\n  yield\r\nensure\r\n  @active_log_type = old_log_type\r\nend\r\n```",
		"created_at" : "2016-08-18T20:44:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 75386081,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Is this still needed? This looks like a leftover from the original implementation of this PR.",
		"created_at" : "2016-08-18T20:47:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 75386590,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm a bit surprised there's a `Formula#with_logging` invocation both here and in the `Formula#run_test` method called from here. Which one of these is redundant? Or are they both needed and why?",
		"created_at" : "2016-08-18T20:50:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 75426270,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "You're right; probably still needed. Restoring.",
		"created_at" : "2016-08-19T04:29:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 75426415,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Well, a file name is still a location, right? ;) And I still think of it is a \"type\" rather than just a prefix; the prefix is derived from it.\r\n\r\nThe values are unconstrained and unchecked now, and you could stick any (valid file name substring) value in there. Could enumerate the ones the rest of the code uses, but if we want to do that, maybe it should go back to being a constrained symbol type? It feels a little un-Rubyish to document a limit that's just the state of current usage by the rest of the code.",
		"created_at" : "2016-08-19T04:32:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 75426565,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Few of the method comments we have in existing code seem to be complete sentences. This seems more consistent with the existing style. (Though not many methods are have method-level comments, so it's not clear there's a consistent style.)",
		"created_at" : "2016-08-19T04:36:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 75426610,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Yeah, leftover. Removing.",
		"created_at" : "2016-08-19T04:37:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 75427031,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "They're redundant. Doesn't really matter which one, since they guard the same potential `system` calls. Removing this one in favor of the one inside `run_test`, for consistency with `run_postinstall`, and because it's possible `run_test` could get called from elsewhere, and it should probably establish that logging context regardless of the caller.",
		"created_at" : "2016-08-19T04:46:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 75427882,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I think that's true, and it tested out when I tried it. Switched to that form. Look better?",
		"created_at" : "2016-08-19T05:05:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 75439534,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I don't feel strongly about this, thus feel free to leave this as-is.\r\n\r\nThis was just an idea to try and standardize a little bit on our (generally lacking) API documentation. If the description consists of complete sentences, it's fairly easy to add something to it. Otherwise I'm often wondering: Do I add a full stop now and continue with a new sentence? Do I delimit with a somewhat awkward semicolon? (And maybe I'm just overthinking such simple matters. 😀)",
		"created_at" : "2016-08-19T07:39:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 75439789,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm definitely against overengineering this and prematurely constraining this to a fixed set of symbols. Feel free to leave everything as-is; and thanks for your thoughts!",
		"created_at" : "2016-08-19T07:41:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 285
	},
	{
		"id" : 64990407,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Current, this is always passed. As result, tap as nil wouldn't happen. ",
		"created_at" : "2016-05-28T15:44:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 286
	},
	{
		"id" : 64990445,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@xu-cheng What's the tap set to for Homebrew/brew PRs? It seems wrong for it to be set in that case.",
		"created_at" : "2016-05-28T15:48:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 286
	},
	{
		"id" : 64990511,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "The problem is hard to know what tap you are testing, supporting you want to run `brew test-bot <formula>` locally.",
		"created_at" : "2016-05-28T15:52:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 286
	},
	{
		"id" : 64990685,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It's not necessary to know that. Regardless, fix incoming.",
		"created_at" : "2016-05-28T16:02:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 286
	},
	{
		"id" : 64990703,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Shouldn't this be put in the first line of this method instead of inside a loop.",
		"created_at" : "2016-05-28T16:04:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 286
	},
	{
		"id" : 64990792,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This is now addressed so this isn't always passed.",
		"created_at" : "2016-05-28T16:10:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 286
	},
	{
		"id" : 64990797,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "(or at least: does not always have a value)",
		"created_at" : "2016-05-28T16:11:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 286
	},
	{
		"id" : 64994952,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The `--syntax` flag for `brew readall` causes it to check the syntax of Ruby files in `Homebrew/Library/` (package manager files) *in addition* to trying to read all formulae, which I think can be omitted for the taps. On the other I think we want to add `readall --syntax` as a step for the `@tap.nil?` case, otherwise we'll be missing Ruby syntax warnings introduced by PRs in Homebrew/brew.\r\n\r\n(A better solution beyond this quick fix might be to untangle `brew readall` a bit, as it performs two very different tasks and there's no way to disable the “read all formulae” function, something we might want to do for Homebrew/brew.)",
		"created_at" : "2016-05-28T22:09:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 286
	},
	{
		"id" : 64991844,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "This seems likely to fail in a lot of cases.",
		"created_at" : "2016-05-28T17:44:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64991853,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "should this be checking in advance if there's actually enough disk space to perform such an operation?",
		"created_at" : "2016-05-28T17:45:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64991858,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Is this re-runnable when it fails?",
		"created_at" : "2016-05-28T17:46:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64991863,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "what about world writable subdirectories?",
		"created_at" : "2016-05-28T17:46:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64991872,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Which ones 😉? We should handle them (silently if necessary).",
		"created_at" : "2016-05-28T17:47:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64991875,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "We're not in the habit of checking for disk space.",
		"created_at" : "2016-05-28T17:47:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64991876,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yeh.",
		"created_at" : "2016-05-28T17:47:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64991882,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think there's always going to be potential edge-cases and I think this is a reasonable one.",
		"created_at" : "2016-05-28T17:48:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64991884,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "(to ignore)",
		"created_at" : "2016-05-28T17:48:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64991904,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "We're also not in the habit of cp -R'ing potentially gigabytes of files.",
		"created_at" : "2016-05-28T17:49:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64991935,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "We need a mechanism to auto create this directory when missing. ",
		"created_at" : "2016-05-28T17:52:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64991943,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "If the user doesn't have write access to every single item in the folder recursively and the top folder itself this will fail. If multiple users have been using the system at any time and writing into the folder, that seems quite likely.",
		"created_at" : "2016-05-28T17:52:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64991961,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It seems to me this method will keep running for each update if it fails. Noted that many fail reason won't be auto fixed if it's run second time. ",
		"created_at" : "2016-05-28T17:53:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64991972,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Doesn't look like the cp -R deletes as it goes along. So it could trigger multi-gigabyte copying over and over.",
		"created_at" : "2016-05-28T17:54:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64991981,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I don't think it is unsafe to do the migration in this case. Because we will do checksum check when reusing them in the safe new folder. ",
		"created_at" : "2016-05-28T17:55:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992141,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "True. `mv` instead?",
		"created_at" : "2016-05-28T18:11:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992150,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This is why I thought to copy rather than move.",
		"created_at" : "2016-05-28T18:12:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992159,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "That's handled elsewhere. The case here was just to ensure that it was created `chmod 775`.",
		"created_at" : "2016-05-28T18:12:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992164,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Another argument to move.",
		"created_at" : "2016-05-28T18:13:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992167,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Given this is a migration I'd rather play it safe here and let users migrate in that case.",
		"created_at" : "2016-05-28T18:13:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992277,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "May I ask where?",
		"created_at" : "2016-05-28T18:23:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992296,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "I'm thinking maybe start over clean and treat it as a documentation issue, with a notice pointing to a support article explaining how to move the directory with Finder and/or Terminal if desired, and leave it at the users' and adminstrators' discretion. That also has the benefit of leaving the original /Library/Caches/Homebrew unmolested in case someone's desire (not mine to be clear – I switched to ~/Library/Caches/Homebrew a long time ago) is to just set `export HOMEBREW_CACHE=/Library/Caches/Homebrew` and move on.",
		"created_at" : "2016-05-28T18:25:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992336,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "move would still trigger copy if there are multiple disk volumes involved ",
		"created_at" : "2016-05-28T18:29:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992403,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "That's an acceptable edge-case; we need to do some migration.",
		"created_at" : "2016-05-28T18:35:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992404,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yes. What do you propose?",
		"created_at" : "2016-05-28T18:36:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992408,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👎 to starting over clean. People won't see this documentation and it screws over users with bad internet connections.",
		"created_at" : "2016-05-28T18:36:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992413,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Well, see the above code never calls `mkpath`.",
		"created_at" : "2016-05-28T18:37:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992417,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "If there's bugs elsewhere: 👍 to fixing them but that's unrelated to this PR.",
		"created_at" : "2016-05-28T18:37:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992432,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "By \"notice\" I mean an inline notice when /Library/Caches/Homebrew exists and the environment variable HOMEBREW_CACHE has not been set to point at it. How can they miss it if the notice just won't go away unless they take some kind of action?",
		"created_at" : "2016-05-28T18:39:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992449,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I've a preference for starting over clean, but I'm fortunate to have a decent internet connection and appreciate it's hell for those who don't.\r\n\r\nWe should definitely `mv` rather than `cp_r` though, we've had more than a few Issues/Tweets/etc where people don't know how to clean their cache & finally discovered it only for `cleanup` to remove over 10GB of data.",
		"created_at" : "2016-05-28T18:41:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992471,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "1. Starting fresh.\r\n2. Remember migration has been attempted. ",
		"created_at" : "2016-05-28T18:43:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992512,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "If\r\n1. ~/Library/Caches/Homebrew does not exist\r\n2. /Library/Homebrew/Caches does exist\r\n3. /Library/Homebrew/Caches passes a recursive ownership check\r\n4. /Library/Homebrew/Caches passes a recursive permissions check\r\n5. /Library/Homebrew/Caches passes a same volume check\r\n6. migration has not already been attempted\r\n\r\nthen\r\n\r\n```\r\nmv /Library/Caches/Homebrew ~/Library/Caches/Homebrew\r\n```\r\nelse do not pass Go, do not collect $200.",
		"created_at" : "2016-05-28T18:49:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992821,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> 1. ~/Library/Caches/Homebrew does not exist\r\n\r\n👍 \r\n\r\n\r\n\r\n> 2. /Library/Homebrew/Caches does exist\r\n\r\n👍 \r\n\r\n\r\n\r\n> 3. /Library/Homebrew/Caches passes a recursive ownership check\r\n> 4. /Library/Homebrew/Caches passes a recursive permissions check\r\n\r\nOn every file or just directories? I think it's worth moving some stuff, even if some files have bad permissions, no?\r\n\r\n\r\n> 5. /Library/Homebrew/Caches passes a same volume check\r\n\r\nSuggestions for implementing said check?\r\n\r\n> 6. migration has not already been attempted\r\n\r\nSuggestions for storing this? ",
		"created_at" : "2016-05-28T19:15:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992823,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> know how to clean their cache & finally discovered it only for cleanup to remove over 10GB of data.\r\n\r\nNote: we clean the cache first.",
		"created_at" : "2016-05-28T19:15:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992828,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Starting fresh screws all our users with bad internet connections. How do you propose we remember?",
		"created_at" : "2016-05-28T19:16:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64993020,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "👍 Missed that amongst the various lengthy diff discussions, apologies. That should help limit how much is retained, although I think `mv` is probably still reasonable.",
		"created_at" : "2016-05-28T19:31:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64993076,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : ">On every file or just directories? I think it's worth moving some stuff, even if some files have bad permissions, no?\r\n\r\nYeah, on everything. The goal would be to have them fix it first. The permissions-fixer-tool-thingy could potentially be used to fix the permissions such that it would then pass the test. You can use `find /Library/Caches/Homebrew -not -uid ... -not -gid ...` etc.` to do the recursive check, which should turn up no results if it's good to go.\r\n\r\nFor same volume check, you can use the same method xucheng does for the size computation by comparing stat.dev: https://github.com/Homebrew/brew/blob/master/Library/Homebrew/extend/pathname.rb#L40\r\n\r\nFor checking whether migration has been attempted, probably a dot file at like `$(brew --prefix)/.sh.brew.didAttemptCacheMigration` as Apple does for things like recording whether the user said a given volume should never be presented as a possible Time Machine destination.",
		"created_at" : "2016-05-28T19:37:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64995643,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "For the same volume check: We also have [`Homebrew::Diagnostic::Volumes`](https://github.com/Homebrew/brew/blob/adc293637f58993bb52792d664cc38bf865eeab4/Library/Homebrew/diagnostic.rb#L31-L70) that is used by a few doctor checks.",
		"created_at" : "2016-05-28T23:25:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64995674,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Note also that we keep Git repositories and other non-checksummed stuff around in the cache, so I agree that it's not entirely safe to do the migration in this case.",
		"created_at" : "2016-05-28T23:28:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64997725,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Good point. ",
		"created_at" : "2016-05-29T05:15:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64997727,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Creating a dot file in the old cache directory?",
		"created_at" : "2016-05-29T05:16:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 65010743,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Done.",
		"created_at" : "2016-05-29T20:15:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 292
	},
	{
		"id" : 64992191,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This may should be deleted as well ",
		"created_at" : "2016-05-28T18:15:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 293
	},
	{
		"id" : 64992405,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "The whole retry block can be deleted as well",
		"created_at" : "2016-05-28T18:36:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 293
	},
	{
		"id" : 64992773,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "60cb841\r\n",
		"created_at" : "2016-05-28T19:12:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 293
	},
	{
		"id" : 64995184,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This will need to be something like `[curl] + flags.split + [HOMEBREW_USER_AGENT_CURL] + args` to make Ruby 1.8.7 happy.",
		"created_at" : "2016-05-28T22:37:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 64995248,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "What do you think about making this an array instead? This will also make proper argument assembly where this is used easier, and filtering individual `curl` arguments won't need to rely on `String#sub` and could instead use `Array#-` (e.g. `HOMEBREW_CURL_ARGS - %w[--progress-bar]`). It seems like adding the user agent at this stage would make sense, too. (But I'm less sure about this second part.) To be more specific:\r\n\r\n```ruby\r\nHOMEBREW_CURL_ARGS = %W[\r\n  --fail\r\n  --progress-bar\r\n  --remote-time\r\n  --location\r\n  --user-agent #{HOMEBREW_USER_AGENT_CURL}\r\n]\r\n```\r\n\r\n(Code using this will of course need to be adjusted slightly, but mostly just can omit the `.split`.)",
		"created_at" : "2016-05-28T22:46:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 64995275,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It seems that `HOMEBREW_USER_AGENT_RUBY` is no longer used anywhere in the code.",
		"created_at" : "2016-05-28T22:49:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 64995335,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Perhaps it should be, in `brew pull`. My new code isn't setting the user agent anywhere, I think.",
		"created_at" : "2016-05-28T22:53:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 64995358,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`curl_args` seems to always be called with a preassembled array. Maybe you want to get rid of the “collect” (`*`) here and omit the splat (`*`) at the two call sites I've seen?",
		"created_at" : "2016-05-28T22:54:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 64995473,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You mean the “Waiting on Bintray” code? Yes, I think it should be using this, but nobody noticed the omission thus far.",
		"created_at" : "2016-05-28T23:02:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 64995562,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Maybe this is overkill, but the `Tempfile` documentation suggests to explicitly clean up the temporary file by doing something like this:\r\n\r\n```ruby\r\ntmpfile = Tempfile.new(\"github_api_headers\", HOMEBREW_TEMP)\r\nbegin\r\n  # Use `tmpfile`.\r\nensure\r\n  tmpfile.close\r\n  tmpfile.unlink\r\nend\r\n```\r\n\r\n(It should be fine as-is, too, as it is being removed once the `Tempfile` instance is garbage collected.)",
		"created_at" : "2016-05-28T23:14:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 65001804,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Added in https://github.com/Homebrew/brew/pull/295/commits/b0262f37155ac681ceb119df2e7f852832027bb0",
		"created_at" : "2016-05-29T10:52:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 65002026,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "One small nit here and something I forgot in my previous suggestion: Maybe append a `.freeze`? It would both slightly benefit performance and—more importantly—prevent us from accidentally modifying this constant. (I believe RuboCop would have suggested this, too.)",
		"created_at" : "2016-05-29T11:07:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 65002069,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I believe the `&_block` argument can be dropped from the argument list since this method never needs to pass the block as a regular argument and only ever uses `yield`.",
		"created_at" : "2016-05-29T11:11:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 65058660,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "A style nit, these functions may be more suitable to add into Github module from a semantics aspect. ",
		"created_at" : "2016-05-30T11:22:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 65058739,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Any chance to drop these environment by put `login!` into Github module, so users won't set this env by their own. ",
		"created_at" : "2016-05-30T11:23:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 65088917,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yeh, perhaps. It feels a little weird if they are only used in this file, though, so I'd rather hold off for now.",
		"created_at" : "2016-05-30T16:02:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 65088927,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Good idea.",
		"created_at" : "2016-05-30T16:02:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 65815843,
		"user" : {
			"login" : "tkelman"
		},
		"body" : "was this test url left in intentionally?",
		"created_at" : "2016-06-05T11:29:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 65815932,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It was definitely not, thanks.",
		"created_at" : "2016-06-05T11:37:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 65815972,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Fixed in 14657443ce4346254ede3df52670c5e641796cd4",
		"created_at" : "2016-06-05T11:40:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 295
	},
	{
		"id" : 65000536,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👎 to monkeypatching Hash to add this.",
		"created_at" : "2016-05-29T09:47:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 296
	},
	{
		"id" : 65000540,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Add it to the `Utils::Hash` module instead.",
		"created_at" : "2016-05-29T09:48:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 296
	},
	{
		"id" : 65001244,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Why? Current PR (a) makes code much easy to read and use from OO respective, (b) it will has its own build-in type check.",
		"created_at" : "2016-05-29T10:16:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 296
	},
	{
		"id" : 65001350,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I don't think it's easier to read and I don't think monkey patching is good practice on system-provided types.",
		"created_at" : "2016-05-29T10:24:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 296
	},
	{
		"id" : 65058476,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think we could remove this function at this point. And inline `full_clone?` maybe?",
		"created_at" : "2016-05-30T11:19:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 297
	},
	{
		"id" : 65088818,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 to removing but in a future PR 😉 ",
		"created_at" : "2016-05-30T16:01:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 297
	},
	{
		"id" : 65012059,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Do you know why this is limited to Ruby 2.0+? I just ran it both with the system Ruby (on 10.11) and with a brewed Ruby 1.8.7 and it completed without any issues, thus I would suggest to make this unconditional.",
		"created_at" : "2016-05-29T21:41:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 300
	},
	{
		"id" : 65012103,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I realize this is not directly related to the topic of this PR, but I wonder if we even need to distinguish between `@tap.core_tap?` and all other `!@tap.nil?` cases. (Not passing the tap name currently means to check all currently tapped taps, something that could be wasteful, though not a lot.)",
		"created_at" : "2016-05-29T21:44:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 300
	},
	{
		"id" : 65012146,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Could make sense to include `--aliases` here as well, as the alias verification also correctly works with taps (though most taps probably don't even have an `Aliases/` directory—none of the official non-core taps currently have).",
		"created_at" : "2016-05-29T21:47:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 300
	},
	{
		"id" : 65052604,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It shouldn't be; confusion with `brew audit --syntax` which relies on Rubocop 👍 ",
		"created_at" : "2016-05-30T10:18:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 300
	},
	{
		"id" : 65052809,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yep, good point, we don't.",
		"created_at" : "2016-05-30T10:20:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 300
	},
	{
		"id" : 65110607,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd probably make this `elsif` and fuse it with the preceding `if` block, as these cases are mutually exclusive. Speaking of `case`s, maybe worth making this a `case`-`when` construct to mirror the structure of the preceding `urls.each do |p|` block?",
		"created_at" : "2016-05-30T23:31:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 302
	},
	{
		"id" : 65110660,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Until you feel strongly about using a regular expression: It doesn't really buy as anything in this particular case, thus a `p.end_with?(\"/download\")` seems preferable to me.",
		"created_at" : "2016-05-30T23:33:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 302
	},
	{
		"id" : 65110714,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Nope, perfectly happy to go with `end_with`. Just wanted to get Rubocop off my back 😉 ",
		"created_at" : "2016-05-30T23:35:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 302
	},
	{
		"id" : 65110736,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Yeah, this also being a `case` block makes sense to me 👍.",
		"created_at" : "2016-05-30T23:36:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 302
	},
	{
		"id" : 65243654,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Please try not to change the indentation of existing code. Also notice there's trailing whitespace in this line (though GitHub sadly doesn't highlight it). Most programming editors can be configured to automatically trim trailing whitespace on save, something I can highly recommend. 😸",
		"created_at" : "2016-05-31T19:04:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 305
	},
	{
		"id" : 65254458,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Ack! I'm embarrassed. Thanks for the note; I've updated my editor's settings. 😃 ",
		"created_at" : "2016-05-31T20:15:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 305
	},
	{
		"id" : 65272533,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Some maintainers (including me) have either created or merged code with whitespace issues in the past, thus no need to be too embarrassed about this. We all make mistakes (and this is a tiny one). Thankfully there are also often tools/settings that help avoid them. 😸",
		"created_at" : "2016-05-31T22:11:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 305
	},
	{
		"id" : 65451274,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Just a stylistic nit: Can you wrap this like the other `assert_equal` in this method? I think this makes it more readable. We try to stay below the 80-column limit which helps with seeing the full code in a narrow editor window without vertical scrolling.",
		"created_at" : "2016-06-01T22:01:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 305
	},
	{
		"id" : 65454470,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "> Just a stylistic nit: Can you wrap this like the other assert_equal in this method? I think this makes it more readable. We try to stay below the 80-column limit which helps with seeing the full code in a narrow editor window without vertical scrolling.\r\n\r\nYes! Thanks for pointing this out. In my editor, I've added a ruler at 80 columns for future reference.",
		"created_at" : "2016-06-01T22:25:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 305
	},
	{
		"id" : 65325379,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`if additional_inherited` is simpler. I also personally hate `unless` .. `else` as I find the double-negatives hard to parse.",
		"created_at" : "2016-06-01T09:01:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 308
	},
	{
		"id" : 65325733,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I _think_ you can just do:\r\n```ruby\r\noptions = inherited_options[dep.name] || []\r\noptions += additional_inherited if additional_inherited\r\noptions\r\n```",
		"created_at" : "2016-06-01T09:03:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 308
	},
	{
		"id" : 65336269,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "maybe\r\n```\r\ninherited_options[dep.name] ||= Options.new\r\noptions = inherited_options[dep.name] += inherited_options_for(dep)\r\n```",
		"created_at" : "2016-06-01T10:22:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 308
	},
	{
		"id" : 65337046,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 except you'll probably need to handle the `nil` `inherited_options_for(dep)` case but could do `Array(inherited_options_for(dep))`",
		"created_at" : "2016-06-01T10:29:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 308
	},
	{
		"id" : 65337738,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Right, but looks like `inherited_options_for` always returns at least `Options.new`, at least as currently implemented. But maybe best not to assume that implementation detail will always be true?",
		"created_at" : "2016-06-01T10:35:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 308
	},
	{
		"id" : 65338981,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Nah, I think that's a fine assumption 👍 ",
		"created_at" : "2016-06-01T10:47:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 308
	},
	{
		"id" : 65447328,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I found the previous double assignment not exactly readable and it only got worse. How about the following?\r\n\r\n```ruby\r\ninherited_options[dep.name] ||= Options.new\r\ninherited_options[dep.name] += inherited_options_for(dep)\r\noptions = inherited_options[dep.name]\r\n```\r\n\r\nAnd maybe just drop the assignment to `options` completely? If I'm not overlooking something, it is only used once in the following code and that instance could as well be replaced with `inherited_options[dep.name]`.",
		"created_at" : "2016-06-01T21:34:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 308
	},
	{
		"id" : 65488242,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Yeah I'd been wondering why there was a separate copy if it was only then being passed by value in `dep.satisfied?(options)`.",
		"created_at" : "2016-06-02T06:07:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 308
	},
	{
		"id" : 65491718,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "A small nit. Maybe `<<` instead of `+=`.",
		"created_at" : "2016-06-02T06:51:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 308
	},
	{
		"id" : 65492021,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Good idea.",
		"created_at" : "2016-06-02T06:54:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 308
	},
	{
		"id" : 65510645,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Maybe just `six` and `eight` for these; I don't tend to hear `octacore` used and it's probably less obvious to non-europeans?",
		"created_at" : "2016-06-02T09:37:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 313
	},
	{
		"id" : 65511641,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm not sure that's true, but maybe some non-Europeans like @ilovezfs can comment on that. I've been doing some Googling and checked relevant Wikipedia articles in English and those prefixes were all over the place.",
		"created_at" : "2016-06-02T09:44:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 313
	},
	{
		"id" : 65512301,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "by non-europeans I more meant \"people who haven't come across much Latin/Greek\" which may or may not apply to @ilovezfs 😀 ",
		"created_at" : "2016-06-02T09:50:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 313
	},
	{
		"id" : 65670540,
		"user" : {
			"login" : "chdiza"
		},
		"body" : "\"Single\" and \"dual\" are not Latin/Greek prefixes, and also they're already not of consistent style.  (That would require pairing \"single\" with \"double\".)  Even if we ignore that, the closest stylistic extension would be \"quadruple\", \"sextuple\", \"octuple\".\r\n\r\nWe're just not gonna get sylistically consistent prefixes.\r\n\r\nIn English, \"hexacore\" is about a thousand times more awkward then \"hexcore\" or \"hex core\" or \"hex-core\", and those are about a thousand times more awkward than \"six core\" and \"six-core\".",
		"created_at" : "2016-06-03T08:11:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 313
	},
	{
		"id" : 65674027,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "From Amazon it looks like the most common usage is \"hex core\" and \"octa core\"; \"hexa core\" returned no results for me and tried to autocorrect.",
		"created_at" : "2016-06-03T08:39:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 313
	},
	{
		"id" : 65726747,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Amazon.com is giving me tons of results for “hexa-core”, but like all of these you have to spell it with the hyphen (like we do in our `brew config` output). FYI, https://en.wikipedia.org/wiki/Multi-core_processor is my primary source. I do agree that “six-core” seems to be much more widely used if Googling “six-core CPU” has any meaning, but “hex-core CPU” reads super-awkward to me and actually yields fewer results than “hexa-core CPU”, so I'm not quite sure which source to trust or whether I should just drop this PR.\r\n\r\nOn the bright side, this PR sparked a nice and useful discussion about physical vs. logical cores.\r\n\r\nIf there are really no good terms that are universally understood, maybe it's best to actually backtrack a little bit. How about we replace the existing logic with either of these three outputs?\r\n\r\n- `single-core`\r\n- `multi-core (N cores)`\r\n- `multi-core (N physical, M logical cores)` for `N != M`",
		"created_at" : "2016-06-03T15:29:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 313
	},
	{
		"id" : 65802955,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> If there are really no good terms that are universally understood, maybe it's best to actually backtrack a little bit. How about we replace the existing logic with either of these three outputs?\r\n\r\nTo be fair: I think any of these terms would be understood now so I'm 👍 to 🚢ping as-is.",
		"created_at" : "2016-06-04T14:08:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 313
	},
	{
		"id" : 65804264,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Tweak `typically` to `by default`, thanks!",
		"created_at" : "2016-06-04T16:07:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 316
	},
	{
		"id" : 65804372,
		"user" : {
			"login" : "lucafavatella"
		},
		"body" : "Done - force pushed. Thanks for the quick feedback.",
		"created_at" : "2016-06-04T16:17:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 316
	},
	{
		"id" : 65813786,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Is the `unless` a typo; that variable is never set here?",
		"created_at" : "2016-06-05T08:42:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 65813796,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'm pretty 👎 on modifying `formulary` to improve the output of a `--dry-run` option just used by developers.",
		"created_at" : "2016-06-05T08:43:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 65813799,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Could maybe just write it out to a temporary file or use StringIO instead?",
		"created_at" : "2016-06-05T08:43:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 65813800,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Yup, came from before I factored out formula_contents_from_path.",
		"created_at" : "2016-06-05T08:43:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 65813860,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "The point was to avoid copying the set_encoding logic.",
		"created_at" : "2016-06-05T08:49:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 65813982,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Cool. Feels like StringIO may be your best fit here.",
		"created_at" : "2016-06-05T08:59:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66895543,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Use `raise Utils::InreplaceError.new(formula.path => s.errors)` instead. It's preferable to omit the curly braces and the surrounding spaces. (Make sure to check for other style violations I might have overlooked via `brew style <file>`.)",
		"created_at" : "2016-06-14T01:13:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66895776,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Any thoughts on adding a dryrun argument to the inreplace function itself (defaulting to dryrun =false)?",
		"created_at" : "2016-06-14T01:16:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66896070,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Consider splitting this into two lines for readability. Repeating the `s` doesn't feel like a burden and avoiding the awkward parentheses seems like a win to me.\r\n\r\n```\r\ns = formula.path.open(\"r\") { |f| Formulary.set_encoding(f).read }\r\ns.extend(StringInreplaceExtension)\r\n```",
		"created_at" : "2016-06-14T01:18:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66896426,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "More duplicative code that would be avoided if inreplace had a dryrun argument.",
		"created_at" : "2016-06-14T01:23:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66896574,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd probably make this check `old_formula_version >= new_formula_version` instead or handle that as two separate cases (`==` and `>`). This will avoid accidentally downgrading a formula, particularly in sometimes surprising cases like `Version.new(\"1.0.2a\") < Version.new(\"1.0.2\")`.",
		"created_at" : "2016-06-14T01:26:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66896743,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can this line be made shorter (and thus more readable)? Maybe with a helper method (as the same construct is used once more below) or by simply wrapping the line a bit:\r\n\r\n```ruby\r\nold_formula_version = Formulary.from_contents(\r\n  formula.name, formula.path, s, requested_spec\r\n).version\r\n```",
		"created_at" : "2016-06-14T01:28:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66896887,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "We can do old_formula = ... on one line and then old_formula_version = old_formula.version on the next maybe?",
		"created_at" : "2016-06-14T01:30:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66897240,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "I wonder if this should be encapsulated in the Version class with a method like .validate_version_is_new that raises its own exception type?",
		"created_at" : "2016-06-14T01:36:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66897814,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It doesn't seem like a dry-run mode would be that useful for our primary use case in formulae. And given that subsequent replacements might depend on each other (including situations where order matters), the implementation of that would be slightly more than just trivial.",
		"created_at" : "2016-06-14T01:42:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66898287,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I don't mind having nice abstractions, but it would be nice to have more than one client (currently this command only) who will use it. I think a dedicated exception class for this kind of error might be useful (e.g. for use in `brew audit`), but hiding `raise BazException if foo < bar` behind `Version#validate_version_is_new` seems a bit too much to me and actually feels less readable.",
		"created_at" : "2016-06-14T01:48:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66898301,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "I'm unhappy with a couple things in this PR. 1) It's not just using the standard inreplace function in the non-dry-run case 2) the multiple inline `if ARGV.dry_run?` checks 3) fixing either of those two issues would seem to require duplication of the specific replacements in a separate dry-run block. I'm leaning toward (3) as the least bad option if inreplace itself cannot have a dryrun parameter. But perhaps you have another idea?",
		"created_at" : "2016-06-14T01:48:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66898532,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Works for me. Though since `old_formula_version` is exactly as long as `old_formula.version`, using `old_formula.version` directly seems more desirable than creating a separate variable.",
		"created_at" : "2016-06-14T01:52:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66898542,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "I don't think I'd hide. It would be begin ... rescue and then a specific message about needing to bump the formula manually.",
		"created_at" : "2016-06-14T01:52:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66898763,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Right, but in that case I think all uses of new_formula_version in the file should also be replaced with new_formula.version",
		"created_at" : "2016-06-14T01:55:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66899029,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Of course that's what I implied, though that might be undesirable from the perspective of keeping the differences small (and avoiding changing unrelated code).",
		"created_at" : "2016-06-14T01:59:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66899139,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "which is precisely the reason I did it the way it is here :)",
		"created_at" : "2016-06-14T02:00:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66899250,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "I think I prefer your original suggestion above unless we're also changing new_formula_version to new_formula.version",
		"created_at" : "2016-06-14T02:03:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 66899400,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "My inclination would be to create a helper function that receives a list of replacement pairs and then uses that information to print the `ohai` lines and to make the actual replacements. It wouldn't even need a dry-run flag, as I think it's useful to print those messages when not in dry-run mode.\r\n\r\nThe only difference in dry-run mode would be that the modified file contents are not written to disk.",
		"created_at" : "2016-06-14T02:05:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 67325409,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This duplication between the two branches of the `if` bothers me. Why not just take the first half and squeeze in the following line before returning `s` and get rid of the `else` branch?\r\n\r\n```ruby\r\nformula.path.atomic_write(s) unless ARGV.dry_run?\r\n```",
		"created_at" : "2016-06-16T10:57:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 67325525,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It would feel more appropriate if the first argument were a `Pathname` instance. This method doesn't need to know that it is operating on a formula (and it could as well operate on an arbitrary file).",
		"created_at" : "2016-06-16T10:58:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 67325568,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Because I'd prefer to use the \"real\" inreplace for the non-dry-run. That was my main gripe with the way it was before this.",
		"created_at" : "2016-06-16T10:59:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 67325690,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Maybe `new_contents` or even `new_formula_code` for clarity?",
		"created_at" : "2016-06-16T11:00:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 67325780,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "new_contents sounds good.",
		"created_at" : "2016-06-16T11:01:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 67325927,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This could be simplified to (it gets a bit longer, but less repetition):\r\n\r\n```ruby\r\nreplacement_pairs = if new_url_hash\r\n  [\r\n    [formula_spec.url, new_url],\r\n    [old_hash, new_hash],\r\n  ]\r\nelse\r\n  [\r\n    [formula_spec.specs[:tag], new_tag],\r\n    [formula_spec.specs[:revision], new_revision],\r\n  ]\r\nend\r\n```",
		"created_at" : "2016-06-16T11:02:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 67326692,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "What do we gain from using the “real” `inreplace` that offsets this duplication?",
		"created_at" : "2016-06-16T11:09:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 67326967,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "The confidence in knowing that the non-dry-run path will automatically get whatever changes are made to inreplace in the future. But this duplication is exactly why I was saying I wish inreplace itself had a dry-run mode since this whole function feels like a big hack around that deficiency.",
		"created_at" : "2016-06-16T11:12:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 67327700,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "@UniqMartin I would feel much more comfortable with removing the duplication if we moved this function into Utils::Inreplace, so that it would be \"guaranteed\" to be updated appropriately whenever Utils::Inreplace changes.",
		"created_at" : "2016-06-16T11:19:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 318
	},
	{
		"id" : 65822173,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Not that this has been different before this PR, but am I the only one to find it weird that this message is printed after `git stash pop` has already been invoked? And doesn't the following `git status --short --untracked-files` somewhat duplicate the output of `git stash pop`?",
		"created_at" : "2016-06-05T18:42:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 320
	},
	{
		"id" : 65824443,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "I think both of your observations are correct.",
		"created_at" : "2016-06-05T20:43:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 320
	},
	{
		"id" : 65824831,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "But then again I guess almost nobody really cares about the verbose output. :wink:",
		"created_at" : "2016-06-05T21:05:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 320
	},
	{
		"id" : 65849736,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yeh, 👍  to moving it afterwards (although it predates this PR).",
		"created_at" : "2016-06-06T07:57:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 320
	},
	{
		"id" : 65849871,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "The reason this message was afterwards is because it was easiest to use `git status` show show what was popped but I appreciate there may be a better approach.",
		"created_at" : "2016-06-06T07:58:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 320
	},
	{
		"id" : 66096050,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can we use the following snippet instead? I think it's easier to understand, doesn't require filtering `.` and `..`, and we nowadays prefer `Pathname` over strings for path-related code.\r\n\r\n```ruby\r\ntarget.install Pathname.pwd.children\r\n```",
		"created_at" : "2016-06-07T15:39:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 329
	},
	{
		"id" : 66176853,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I have to admit that I'm not particularly thrilled with this. Do you have any ideas how to avoid this downside? This is going to be annoying when frequently running tests locally (a fetch of the `bundler` Gem for every run) and even worse when trying to do the same while offline, e.g. on a train or plane.",
		"created_at" : "2016-06-08T00:37:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 332
	},
	{
		"id" : 66177145,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "One of the assignments in the above two lines is redundant. I'd eliminate the one above this line, as I really hate chained assignments on a single line. (Quite possible not everyone shares this view.)\r\n\r\nIs there any reason why `@env_home` needs to be a `Pathname` instance, but `@old_home` is just a string?",
		"created_at" : "2016-06-08T00:41:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 332
	},
	{
		"id" : 66177268,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I don't feel super strongly about this, but I'm not sure if `@old_name` and `@env_home` are clear enough. How about `@true_home` and `@test_home`?",
		"created_at" : "2016-06-08T00:43:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 332
	},
	{
		"id" : 66177771,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Actually, I have an idea: Move this code back before the `begin` and then once the temporary test home has been set up in `sanitize_env!`, create a symlink in that test home that points to the `.gem` subdirectory in the original home directory. (This assumes that the tests themselves won't mess with the `.gem` directory in `ENV[\"HOME\"]`, which seems a reasonable assumption thus far.)",
		"created_at" : "2016-06-08T00:49:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 332
	},
	{
		"id" : 66179123,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This should be placed before the `begin`. Better yet, make `sanitize_env!` accept a block and move the cleanup into that method. As it is responsible for sanitizing the environment, it should be equally responsible for tearing down things afterwards. To be more specific, here's a sketch:\r\n\r\n```ruby\r\ndef with_sanitized_env\r\n  old_env = ENV.to_hash\r\n  # Current contents of `sanitize_env!`, but use local variables instead of instance variables.\r\n\r\n  yield old_home, env_home\r\nensure\r\n  ENV.replace(old_env)\r\n  # Remaining cleanup code that wipes `env_home`.\r\nend\r\n```\r\n\r\nAnd then use it here like:\r\n\r\n```ruby\r\nwith_sanitized_env do |old_home, env_home|\r\n  # The gist of the code currently between `begin` and `ensure`.\r\nend\r\n```\r\n\r\n(I think this makes for a cleaner control flow.)",
		"created_at" : "2016-06-08T01:04:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 332
	},
	{
		"id" : 66202434,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I believe we could just set `GEM_PATH` or `GEM_HOME` or something instead of needing symlinks.",
		"created_at" : "2016-06-08T07:08:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 332
	},
	{
		"id" : 66202571,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'm not sure this is necessary; this just stops usage of system (not global/`$HOME`) configuration, right?",
		"created_at" : "2016-06-08T07:09:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 332
	},
	{
		"id" : 66264204,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Yes, I agree that setting `GEM_PATH` and `GEM_HOME` sounds more like the solution that should work and that we'd want to adopt. (Obvious solution in hindsight.)",
		"created_at" : "2016-06-08T14:20:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 332
	},
	{
		"id" : 66265097,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Yes. It's a lot less likely to be problematic than a user's Git configuration, but it contributes to a more predictable environment per https://github.com/Homebrew/brew/pull/324#issuecomment-223963764. I don't see any downside to this.",
		"created_at" : "2016-06-08T14:24:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 332
	},
	{
		"id" : 66173667,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This new test is pretty complicated and involves some setup. I think it's worth moving it into a separate test method (maybe `test_log_with_formula`) to keep it cleanly separated from what is already here, especially since there doesn't seem to be any shared code.",
		"created_at" : "2016-06-08T00:00:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 333
	},
	{
		"id" : 66174199,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The `.chomp` doesn't look like it belongs here. Better yet, use the [`Pathname#cd` method](https://github.com/Homebrew/brew/blob/21ca138edf584daebf1795a52d6edd6ec34ce605/Library/Homebrew/extend/pathname.rb#L327-L329), i.e. `core_tap.path.cd do`, instead of `FileUtils.cd`.",
		"created_at" : "2016-06-08T00:06:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 333
	},
	{
		"id" : 66184914,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "> The `.chomp` doesn't look like it belongs here. Better yet, use the `Pathname#cd` method, i.e. `core_tap.path.cd do`, instead of `FileUtils.cd`.\r\n\r\nOops -- thanks for catching this. I was looking at [this line in `log.rb`](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cmd/log.rb#L22) and mistakenly applied the same logic to the return value of `core_tap.path`.\r\n\r\nJust curious, what's the advantage of using `Pathname#cd` over `FileUtils.cd`? I see that `Pathname#cd` is part of the Homebrew DSL, but I'm still not sure why it might be preferred.",
		"created_at" : "2016-06-08T02:36:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 333
	},
	{
		"id" : 66185402,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It's more concise and whenever possible we prefer to use `Pathname` and its methods when dealing with paths. Other than that, `FileUtils.cd core_tap.path` and `core_tap.path.cd` are pretty much equivalent.",
		"created_at" : "2016-06-08T02:45:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 333
	},
	{
		"id" : 66204293,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@UniqMartin I think it might be nice to keep the `test_$CMDNAME` format for the integration tests. This \"write a formula into the core tap` is used in multiple places in this file, though, and could be pulled into a utility method.",
		"created_at" : "2016-06-08T07:23:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 333
	},
	{
		"id" : 66253898,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think the `test_$CMDNAME_$VARIANT` format in addition to `test_$CMDNAME` for the integration tests gives us a bit more flexibility, particularly in cases like these where the two tests in the method are completely orthogonal and combining them in a single method just makes them harder to read due to the interleaving of setup, test, and teardown code. (This also aids with isolating tests from each other, so they don't accidentally influence each other.)\r\n\r\nThat said, I agree that with some refactoring the code in this particular test method could become simple enough to make a split unnecessary.",
		"created_at" : "2016-06-08T13:23:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 333
	},
	{
		"id" : 66319348,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "@MikeMcQuaid We've discussed the idea of updating the existing `test/testball.rb` in lieu of relying on a `testball` formula being written into the core tap, so this update is on my to-do list. 😄 \r\n\r\nUntil I figure out how to do that, would it be OK to go ahead and submit a separate PR for this refactoring?\r\n\r\nThere are 18 declarations of `formula_file` in the file (including the one in my PR). If we pull these into a utility method, would the method live in the same file?",
		"created_at" : "2016-06-08T19:06:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 333
	},
	{
		"id" : 66163381,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I suppose that should have been something like “[…] if neither the CLT nor Xcode is installed […]”, right?",
		"created_at" : "2016-06-07T22:19:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 334
	},
	{
		"id" : 66163453,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Use `-n` instead of `! -z`.",
		"created_at" : "2016-06-07T22:20:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 334
	},
	{
		"id" : 66219537,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Maybe just `$HOMEBREW_LIBRARY/Locks` instead? The `.d` looks weird to me.",
		"created_at" : "2016-06-08T09:10:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 337
	},
	{
		"id" : 66563058,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I believe that when splitting a string across multiple lines a continuation using `\\` is preferable over using explicit concatenation via `+`. The former should also be a tiny bit more efficient. (To be fair, I haven't checked that.)",
		"created_at" : "2016-06-10T05:23:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 341
	},
	{
		"id" : 66716467,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Can we instead create a keg-only virtualenv formula, similar to our current sphinx-doc formula?",
		"created_at" : "2016-06-12T05:50:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 66716553,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "We could; adding a `virtualenv` package that isn't intended to be used will probably be confusing to users, and that means interacting with the dependency system, which frightens me. It also means having to think harder about python/python3 interactions; this approach avoids letting python3 get out of sync with whatever version of python was used to install the virtualenv in the Cellar.",
		"created_at" : "2016-06-12T05:58:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 66716647,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I'm thinking we could handle Python/Python 3 in the similar approach as regular deps. For example, similar to `Language::Hask::Cabal`, we can have:\r\n```Ruby\r\nmodule Language\r\n  module Python\r\n    module Virtualenv\r\n      def self.included(base)\r\n        base.class_eval do\r\n          if build.with? (\"python3\")\r\n            depends_on \"virtualenv\" => [:build, \"with-python3\"]\r\n          else\r\n            depends_on \"virtualenv\" => :build\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nAnd use it:\r\n```ruby\r\nclass Foo < Formula\r\n  include Language::Python::Virtualenv\r\nend ",
		"created_at" : "2016-06-12T06:09:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 66716667,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Also, personally, I think it's better to create a Virtualenv module for better readability.",
		"created_at" : "2016-06-12T06:11:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 66717851,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Or rethink a bit we could also do this if virtualenv formula is not of option:\r\n```ruby\r\nmodule Language\r\n  module Python\r\n    module Virtualenv\r\n      def self.included(base)\r\n        base.class_eval do\r\n          resource \"virtualenv\" do\r\n            url \"\"\r\n             sha256sum \"\"\r\n           end\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nBut I think a standalone formula is still preferable.",
		"created_at" : "2016-06-12T08:25:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 67602840,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Thanks for the review, btw. Can you explain how the `module` technique would be different from the current implementation? I don't understand the distinction, sorry.\r\n\r\nWhy do you prefer making virtualenv a resource on the Formula class instead of instantiating a Resource directly?",
		"created_at" : "2016-06-18T16:11:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 67623921,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think that's probably a good reason to just pull `Formula#system` into a utility function; there's been a few other places where we've wanted something similar.",
		"created_at" : "2016-06-19T21:14:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 67624224,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Are you envisioning something like `system_for formula, \"my_command\"`?",
		"created_at" : "2016-06-19T21:36:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 67624548,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "— though if we do that it seems like we could just pass a Formula instance into the Virtualenv constructor and call `formula.system`.",
		"created_at" : "2016-06-19T21:54:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 67639176,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : ">  Can you explain how the module technique would be different from the current implementation?\r\n\r\nThe biggest advantage is it can help you solve the scope issue. By `include Language::Python::Virtualenv` inside `Formula`, you can use `system` normally which will be fall into the scope of that formula class. Beside, I think it helps with code readability and is more consistency with existing codebase.\r\n\r\n> Why do you prefer making virtualenv a resource on the Formula class instead of instantiating a Resource directly?\r\n\r\nBecause, the way you initialize resource directly involves private API in codebase, especially the `owner` hack. ",
		"created_at" : "2016-06-20T05:57:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 67639664,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "I see, re: scope; thanks. Ruby!\r\n\r\n> Because, the way you initialize resource directly involves private API in codebase, especially the owner hack.\r\n\r\nThe `owner` hack isn't great, right. If I change the `Resource` class to work correctly with a nil `owner`, would you still feel that instantiating a `Resource` is using API I shouldn't touch?",
		"created_at" : "2016-06-20T06:05:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 67641293,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : ">  If I change the Resource class to work correctly with a nil owner, would you still feel that instantiating a Resource is using API I shouldn't touch?\r\n\r\nI would still prefer you not touch `owner` at all. It's very likely the internal owner logic will be changed in the future to support deps prioritize. ",
		"created_at" : "2016-06-20T06:33:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 67643040,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yeh, passing in the formula makes sense 👍 ",
		"created_at" : "2016-06-20T06:55:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 69398004,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "This is an arbitrary set of formulas, cribbed from the `python` formula; should we expose all keg-only formulas?",
		"created_at" : "2016-07-03T22:07:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 69399078,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Nevermind; this is unnecessary under superenv! I forgot to declare a dependency when I was testing.",
		"created_at" : "2016-07-03T23:43:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 70163816,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "It seems redundant to have to call pip install twice and awkward to have the most important step buried inside a block passed to link_scripts.",
		"created_at" : "2016-07-09T07:21:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 70163841,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "I think it's reasonable to break up \"install the dependencies\" and \"install the main event\" but I'm open to suggestions.",
		"created_at" : "2016-07-09T07:25:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 70163997,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "See comment in main section.",
		"created_at" : "2016-07-09T07:46:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 71771505,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Still think a formula (or at least a separate file) would make this more discoverable and obvious how to update it.",
		"created_at" : "2016-07-21T19:31:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 71771572,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Probably `resource`s as that's what people are used to using.",
		"created_at" : "2016-07-21T19:31:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 71771603,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Also backticks for `setup.py` and `pip`A.",
		"created_at" : "2016-07-21T19:32:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 71771718,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Concerns me a little that e.g. I would have no idea how to create a virtualenv and install my package and dependencies. Could we maybe provide a helper script/command for this?",
		"created_at" : "2016-07-21T19:33:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 71771742,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-07-21T19:33:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 71967897,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Split these out as constants into a separate file; let me know if you prefer that approach.",
		"created_at" : "2016-07-23T05:56:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 71967901,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "✅ ",
		"created_at" : "2016-07-23T05:56:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 344
	},
	{
		"id" : 66792293,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can you replace `5|6` with `[5-6]` to make it easier to extend this in the future?",
		"created_at" : "2016-06-13T13:38:43Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 349
	},
	{
		"id" : 66792329,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can you replace `5|6` with `[5-6]` to make it easier to extend this in the future?",
		"created_at" : "2016-06-13T13:38:54Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 349
	},
	{
		"id" : 66797581,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "May even be worth having a method for this regex in `ENV/shared.rb` as they are the same in both places.",
		"created_at" : "2016-06-13T14:10:09Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 349
	},
	{
		"id" : 66801270,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> May even be worth having a method for this regex in ENV/shared.rb as they are the same in both places.\r\n\r\nMaybe even a proper version check (`>= 4.8`) so we don't need to fix this with the next release. It's unlikely GCC is going to drop C++11 support in a future release. Something like this maybe?\r\n```ruby\r\nelsif compiler =~ /gcc-(\\d+(?:\\.\\d)?)/ && Version.new($1) >= Version.new(\"4.8\")\r\n  append \"CXX\", \"-std=c++11\"\r\n```\r\n\r\n(I'm not super happy with the use of `$1` here, as that looks way too magical.)",
		"created_at" : "2016-06-13T14:29:26Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 349
	},
	{
		"id" : 66819152,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 sounds smart.",
		"created_at" : "2016-06-13T16:02:23Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 349
	},
	{
		"id" : 67256219,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You can shorten this a bit by using `%w[gcc gcc-4.7]` as the array.",
		"created_at" : "2016-06-15T22:16:14Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 349
	},
	{
		"id" : 67256588,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I would prefer if we didn't make more assumptions about `HOMEBREW_CCCFG` than strictly necessary. (Our build defaults unrelated to C++11 might change at some point.) Thus, I'd modify this to check that there is no `x` in the environment variable:\r\n\r\n```ruby\r\nrefute_match \"x\", @env[\"HOMEBREW_CCCFG\"]\r\n```",
		"created_at" : "2016-06-15T22:19:05Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 349
	},
	{
		"id" : 67256877,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "In the same vein like the other comment, let's make as few assumptions as possible. Also, the expected value is supposed to be passed as the first argument. Hence, please make this:\r\n\r\n```ruby\r\nassert_match \"x\", @env[\"HOMEBREW_CCCFG\"]\r\n```\r\n\r\n(Also applies to the following two instances of basically the same check.)",
		"created_at" : "2016-06-15T22:21:25Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 349
	},
	{
		"id" : 67289985,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "What are the backslashes doing in here? They shouldn't be necessary.",
		"created_at" : "2016-06-16T05:45:01Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 356
	},
	{
		"id" : 67290332,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You can initialize an empty `Hash` instance simply by using `{}` (equivalent to `Hash.new`, but shorter and generally preferred). Better yet, to avoid having to spell out `flags` for every assignment and construct the entire hash with all its entries at once, do something like:\r\n\r\n```ruby\r\nflags = {\r\n  \"macports\" => \"https://www.macports.org/ports.php?by=name&substr=testball\",\r\n  \"fink\" => \"http://pdb.finkproject.org/pdb/browse.php?summary=testball\",\r\n  # …\r\n}\r\n```",
		"created_at" : "2016-06-16T05:49:45Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 356
	},
	{
		"id" : 67290429,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You can replace `\"#{value}\"` with `value` for simplicity. No need to use string interpolation here.",
		"created_at" : "2016-06-16T05:51:31Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 356
	},
	{
		"id" : 67290548,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You can omit the curly braces. Trailing arguments of the form `key => value` are automatically collected in a `Hash` that is passed to the method that is being invoked as its last argument.",
		"created_at" : "2016-06-16T05:53:44Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 356
	},
	{
		"id" : 67290728,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Prefer `Pathname#unlink` over `FileUtils.rm`, i.e. `(HOMEBREW_CACHE/\"desc_cache.json\").unlink`. You could even consider keeping `HOMEBREW_CACHE/\"desc_cache.json\"` in a local variable as it is used multiple times throughout this test.",
		"created_at" : "2016-06-16T05:56:32Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 356
	},
	{
		"id" : 67399512,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Ah, you're right. I've removed them.",
		"created_at" : "2016-06-16T18:31:13Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 356
	},
	{
		"id" : 67495090,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I would prefer if we used `/` more consistently when dealing with `Pathname` objects. We already do that in all our formulae and it would be nice to move in the same direction in the package manager code (at least for code that is being added, ironing out style issues in old code is a totally different issue). But really just a style nit.",
		"created_at" : "2016-06-17T11:13:43Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 356
	},
	{
		"id" : 67495273,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Another minor style nit: The last item of an array/hash should also have a trailing comma. (Makes it easier to swap the lines without any hassle and makes for nicer diffs if a line has to be added, as then the last line doesn't need to be modified, too.)",
		"created_at" : "2016-06-17T11:15:22Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 356
	},
	{
		"id" : 67495420,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`key` and `value` are really generic names. Maybe make them more indicative of what they actually contain, e.g. `flag` and `url`, but feel free to come up with better names (I know, naming stuff is hard). 😸",
		"created_at" : "2016-06-17T11:16:57Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 356
	},
	{
		"id" : 67495483,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This may come across as massively pedantic, but still: This is off by one space (doesn't align with anything, not even `value` in the preceding line).",
		"created_at" : "2016-06-17T11:17:48Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 356
	},
	{
		"id" : 67570697,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Interesting. I was actually unaware that a trailing comma was allowable! I just read through [this discussion](https://github.com/bbatsov/ruby-style-guide/issues/76) and while I see the merits of using it, my slight preference is still to do without it (but maybe this will change someday)... anyway, I'll incorporate this.\r\n\r\nI saw that @apjanke started this [doc](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Prose-Style-Guidelines.md) a few months ago; are there any plans to make a similar document for coding style to fill the gaps between the Ruby style guide and the Homebrew DSL... when time allows? 😄 ",
		"created_at" : "2016-06-17T20:28:52Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 356
	},
	{
		"id" : 67571079,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "`flag` and `url` sound good; they're concise and descriptive. 👍 ",
		"created_at" : "2016-06-17T20:31:49Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 356
	},
	{
		"id" : 67571729,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "I can't remember why/how that line was indented that way... fixing it to just have a two-space indentation. 👍 ",
		"created_at" : "2016-06-17T20:36:43Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 356
	},
	{
		"id" : 67584479,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "We've mostly settled on that trailing comma in the not to distant past, particularly in formulae, but it's of course good to be consistent in here. Though `%W[`-style arrays are also often possible in formulae and avoid the trailing comma discussion. :wink:\r\n\r\nI don't think anyone is currently planning to produce such a document or wants to set aside time to do that. [Our RuboCop configuration](https://github.com/Homebrew/brew/blob/96cbce015e0b327bd7d30fc101cbd25452cd2fd8/Library/.rubocop.yml) documents our style to some degree, but other than that it's just word of mouth and looking at what has been done before. ",
		"created_at" : "2016-06-17T22:35:53Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 356
	},
	{
		"id" : 66911615,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This will print hideous things like “OS X Sierra” if triggered on 10.11, as `MacOS.os_name` would need to be context-aware and print something adjusted to `@version` in this case (not the static `MacOS.version`). I'm also missing the companion change in `maximum_macos_requirement.rb`. :wink:",
		"created_at" : "2016-06-14T05:46:14Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 359
	},
	{
		"id" : 68510073,
		"user" : {
			"login" : "paulmillr"
		},
		"body" : "Mac os X if version <= 10.8",
		"created_at" : "2016-06-26T21:25:35Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 359
	},
	{
		"id" : 67157275,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can use string interpolation for this e.g. \r\n```ruby\r\n\"#{new_tap_name}/#{name}\"\r\n```\r\n\r\n(although in this case you can hard-code `caskroom/cask`",
		"created_at" : "2016-06-15T13:07:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 363
	},
	{
		"id" : 67157399,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This will need to use `system \"brew\", \"cask\", \"install\", name` rather than `formula.install`.",
		"created_at" : "2016-06-15T13:08:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 363
	},
	{
		"id" : 67157422,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "You can use string interpolation for this too.",
		"created_at" : "2016-06-15T13:08:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 363
	},
	{
		"id" : 67507856,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Will probably be somewhat clearer (and shorter) like this:\r\n\r\n```ruby\r\nreplacement_pairs = []\r\nif requested_spec == :stable && formula.revision != 0\r\n  replacement_pairs << [/^  revision \\d+\\n/m, \"\"]\r\nend\r\n```\r\n\r\n(Or move that below the mandatory replacements, so you won't even have to initialize the variable.)",
		"created_at" : "2016-06-17T13:15:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 369
	},
	{
		"id" : 67524371,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Hehe. I feel like that's something I would write, and then you'd request it be replaced with what's in the PR right now!",
		"created_at" : "2016-06-17T15:02:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 369
	},
	{
		"id" : 67525016,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm glad you noticed. I was secretly hoping to get this comment. 🙈 Of course which one is more appropriate completely depends on the context.",
		"created_at" : "2016-06-17T15:06:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 369
	},
	{
		"id" : 67525656,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Or perhaps it's simply dependent on which version is in the initial PR :smirk: ",
		"created_at" : "2016-06-17T15:10:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 369
	},
	{
		"id" : 67476713,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Where is `balltest` coming from? A typo?",
		"created_at" : "2016-06-17T08:37:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 370
	},
	{
		"id" : 67476852,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I reckon you could pull the repeated `.unlink`s into methods too to save leaking the `@formula_file` into a method and just to be more consistent, even the same number of lines of code.",
		"created_at" : "2016-06-17T08:38:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 370
	},
	{
		"id" : 67476926,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Could maybe return `@formula_file` from this method so you can use it elsewhere.",
		"created_at" : "2016-06-17T08:38:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 370
	},
	{
		"id" : 67476973,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Also perhaps `@content`",
		"created_at" : "2016-06-17T08:39:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 370
	},
	{
		"id" : 67534129,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`balltest` is an alias for the `testball` formula that is being set up here and in the following two lines, if I'm not misreading the code.",
		"created_at" : "2016-06-17T16:00:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 370
	},
	{
		"id" : 67538096,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Yes, preferably just `content` to avoid creating too many harder-to-keep-track-of instance variables. If a test really needs to retrieve the formula text, it can easily do `formula_path.read` (assuming `formula_path` is the local variable name of the `Pathname` instance representing the created formula).",
		"created_at" : "2016-06-17T16:29:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 370
	},
	{
		"id" : 67795545,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "I added this line solely for `test_options`, but only now realized that it seems wrong to nest `#{content}` inside a declaration for `content`. Still, the test seems to pass...",
		"created_at" : "2016-06-21T01:31:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 370
	},
	{
		"id" : 67796349,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Would it be preferable to use `setup_test_formula \"foo\" && setup_test_formula \"bar\"` instead of\r\n```\r\nsetup_test_formula \"foo\"\r\nsetup_test_formula \"bar\"\r\n```\r\n?",
		"created_at" : "2016-06-21T01:43:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 370
	},
	{
		"id" : 67796490,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This and the above two lines should be outdented by two spaces.",
		"created_at" : "2016-06-21T01:45:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 370
	},
	{
		"id" : 67796514,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This and the above two lines should be outdented by two spaces.",
		"created_at" : "2016-06-21T01:46:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 370
	},
	{
		"id" : 67796760,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "That's perfectly fine. You're not doing anything different from modifying an existing variable, e.g. `content = \"a prefix: #{content} and some extra test\"` is basically the same thing, its just not using a here document.",
		"created_at" : "2016-06-21T01:49:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 370
	},
	{
		"id" : 67797253,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm definitely in favor of the latter. Intuitively, using `&&` here has the same effect but doesn't make much sense, but maybe I'm just missing the point.",
		"created_at" : "2016-06-21T01:55:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 370
	},
	{
		"id" : 67526039,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Use the simpler `%r{^https?://pypi.python.org/(.*)}`. I intentionally left out the `i` modifier because I don't see why we should be doing a case-insensitive match, but I'm happy to learn why that might be needed. (Of course the `$2` in the following line also needs to be adjusted.)",
		"created_at" : "2016-06-17T15:12:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 373
	},
	{
		"id" : 67518446,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Why not auto install cask tap?",
		"created_at" : "2016-06-17T14:26:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67518563,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "These logics are for formula that should not be appiled to cask migration. ",
		"created_at" : "2016-06-17T14:27:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67519569,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"body" : "Thought that if somebody never used cask he could decide if he wants to install it or not.",
		"created_at" : "2016-06-17T14:32:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67519839,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"body" : "Ok. Updated",
		"created_at" : "2016-06-17T14:34:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67519931,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I suggested this logic. I think think rather than testing whether it's tapped we'll also need to test if it's done it's \"first time setup sudo\" thing too.",
		"created_at" : "2016-06-17T14:35:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67623844,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`ohai \"#{name} has been moved to Homebrew Cask. Installing #{name}...\"",
		"created_at" : "2016-06-19T21:06:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67623845,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can remove this message.",
		"created_at" : "2016-06-19T21:06:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67623858,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "```ruby\r\nohai <<-EOS.undent\r\n  #{name} has been moved to Homebrew Cask. To install it run:\r\n    brew cask install #{name}\r\nEOS\r\n```",
		"created_at" : "2016-06-19T21:08:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67644138,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sorry, tiny nit: indent `brew cask install` by two spaces here.",
		"created_at" : "2016-06-20T07:09:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67740949,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "If the information in caskroom/homebrew-cask#21857 is accurate (I'm not a Cask user myself) then `Caskroom` can actually live in any `HOMEBREW_REPOSITORY`, so hard-coding `/usr/local` seems wrong and this should be instead:\r\n\r\n```ruby\r\nif new_tap.installed? && (HOMEBREW_REPOSITORY/\"Caskroom\").directory?\r\n```",
		"created_at" : "2016-06-20T18:26:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67741474,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"body" : "They've recently migrated as far as I understood and have usr/local as new default path\r\nhttps://github.com/caskroom/homebrew-cask/issues/21913",
		"created_at" : "2016-06-20T18:29:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67742359,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`related to formulae deduplication.` sounds like a comment that is relevant now, but won't make any sense if this was looked at in a few months. Maybe the whole comment can be rephrased and also moved into the block following `if new_tap_name == \"caskroom/cask\"`? Here's as suggestion:\r\n\r\n> For formula migrated to cask: Auto-install cask or provide install instructions.",
		"created_at" : "2016-06-20T18:35:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67742974,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm aware of this, but still: [According to this piece of code](https://github.com/vitorgalvao/homebrew-cask/blob/377c29cfa331c5ce7ea52e818a0c57e7017ff5a4/lib/hbc/locations.rb#L11-L13) the new default location is not hard-coded to use `/usr/local` but wherever Homebrew happens to be installed (and this doesn't have to be `/usr/local`).",
		"created_at" : "2016-06-20T18:39:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67743158,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"body" : "Will update.",
		"created_at" : "2016-06-20T18:40:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67747872,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`ohai` isn't suitable for multi-line output, not to mention that it truncates its output. This snippet in `brew irb`:\r\n\r\n```ruby\r\nname = \"abi-compliance-checker\"\r\nohai <<-EOS.undent\r\n  #{name} has been moved to Homebrew Cask. To install it run:\r\n    brew cask install #{name}\r\nEOS\r\n```\r\n\r\nProduces the following output on my 120-column wide terminal (notice the truncation):\r\n\r\n```\r\n==> abi-compliance-checker has been moved to Homebrew Cask. To install it run:\r\n  brew cask install abi-compliance-checke\r\n```\r\n\r\nI'd either switch to a simple `puts` or (if the highlighting is really important) use something like:\r\n\r\n```ruby\r\nohai \"#{name} has been moved to Homebrew Cask.\", <<-EOS.undent\r\n  To install it run:\r\n    brew cask install #{name}\r\nEOS\r\n```",
		"created_at" : "2016-06-20T19:07:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67769868,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "[Like in `Library/brew.rb`](https://github.com/Homebrew/brew/blob/b05a596d570c8e5686fbb45331da8f101179f49a/Library/brew.rb#L114) and other places, `\"brew\"` needs to be replaced with `HOMEBREW_BREW_FILE`.",
		"created_at" : "2016-06-20T21:27:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67769881,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "[Like in `Library/brew.rb`](https://github.com/Homebrew/brew/blob/b05a596d570c8e5686fbb45331da8f101179f49a/Library/brew.rb#L114) and other places, `\"brew\"` needs to be replaced with `HOMEBREW_BREW_FILE`.",
		"created_at" : "2016-06-20T21:27:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67822393,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Good point @UniqMartin, thanks.",
		"created_at" : "2016-06-21T07:52:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67822471,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 to the last highlighting form",
		"created_at" : "2016-06-21T07:52:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 68046015,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I don't think we should uninstall it unconditionally. ",
		"created_at" : "2016-06-22T12:47:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 68046510,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Missed that, think it was unintentional so removed in 915eed4",
		"created_at" : "2016-06-22T12:50:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 375
	},
	{
		"id" : 67551736,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Maybe just a `git diff` of the modified formula file followed by restoring the backed up original? Would prevent one temporary file from lying around and possibly being forgotten.",
		"created_at" : "2016-06-17T18:05:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 376
	},
	{
		"id" : 67552421,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd prefer if the backup resided in memory (`original_code = formula.path.read`). No need to check for file name collisions and no files that need to be cleaned up if anything goes wrong. And restoring is no more difficult than moving a file.",
		"created_at" : "2016-06-17T18:09:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 376
	},
	{
		"id" : 67623999,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-06-19T21:20:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 376
	},
	{
		"id" : 67624014,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Maybe worth autorunning `brew style --fix`",
		"created_at" : "2016-06-19T21:21:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 376
	},
	{
		"id" : 67601831,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This is a sensible fix, but this fix alone only further masks the bug introduced in 6ba466f5d858c5e6f9d162c11ec03134df6e686e. The following `begin`-`rescue` block is now rather useless and needs to be relocated to the `changed_formulae_names.each do` block a few lines further down. Can you fix that, too? (Skipping non-formula files at this early stage as is done here is still necessary to avoid ending up with bogus stuff in `changed_formulae_names`.)",
		"created_at" : "2016-06-18T14:37:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 377
	},
	{
		"id" : 67602387,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "@UniqMartin Is this what you had in mind? If I’m not mistaken it’s the only place we could get a syntax error.",
		"created_at" : "2016-06-18T15:28:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 377
	},
	{
		"id" : 67602631,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Yes, that's exactly what I had in mind. Thanks! ❤️",
		"created_at" : "2016-06-18T15:51:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 377
	},
	{
		"id" : 67592719,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd rather we stick with explicitly enumerating all the officially supported architectures instead of accepting everything that `ruby-macho` accepts. This will also avoid the `:ppc` vs. `:ppc7400` mismatch. I was thinking of something like:\r\n\r\n```ruby\r\narch = case m.cputype\r\nwhen :x86_64, :i386, :ppc64 then m.cputype\r\nwhen :ppc then :ppc7400\r\nelse :dunno\r\nend\r\n```",
		"created_at" : "2016-06-18T01:22:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 378
	},
	{
		"id" : 67592895,
		"user" : {
			"login" : "woodruffw"
		},
		"body" : "That sounds good to me! ",
		"created_at" : "2016-06-18T01:31:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 378
	},
	{
		"id" : 67600377,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : ":+1:",
		"created_at" : "2016-06-18T12:33:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 378
	},
	{
		"id" : 67602279,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I just realized that we're no longer compatible with Ruby 1.8.7 that continues to be used on our 10.9 test bot. Because of this, we'll need to guard this as follows:\r\n\r\n```ruby\r\nENV[\"HOMEBREW_RUBY_MACHO\"] = \"1\" if RUBY_VERSION.split(\".\").first.to_i >= 2\r\n```\r\n\r\n(We can remove this trailing guard clause once Homebrew finally drops support for older Ruby versions or we restore Ruby 1.8.7 compatibility in `ruby-macho`.)",
		"created_at" : "2016-06-18T15:19:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 378
	},
	{
		"id" : 67602488,
		"user" : {
			"login" : "woodruffw"
		},
		"body" : "Got it, I'll add this now.",
		"created_at" : "2016-06-18T15:35:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 378
	},
	{
		"id" : 67626538,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can we combine these two checks and avoid the unnecessary (and possibly a bit too lenient) regular expression match? Here's what I have in mind:\r\n\r\n```ruby\r\nif %w[.pyc .pyo].include?(src.extname) && src.to_s.include?(\"/site-packages/\")\r\n  Find.prune\r\nend\r\n```",
		"created_at" : "2016-06-20T00:23:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 382
	},
	{
		"id" : 67626612,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Maybe merge this with the existing `delete_pyc_files!` method to avoid traversing the entire formula prefix twice to delete some very closely related file types? Or is it reasonable to expect that we would want to turn these on and off independently of each other?",
		"created_at" : "2016-06-20T00:28:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 382
	},
	{
		"id" : 67639170,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "I think we'd always want to do both.",
		"created_at" : "2016-06-20T05:56:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 382
	},
	{
		"id" : 67642952,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Agreed on always wanting to do both 👍 ",
		"created_at" : "2016-06-20T06:54:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 382
	},
	{
		"id" : 67767529,
		"user" : {
			"login" : "lucafavatella"
		},
		"body" : "Changed locally, need to test.",
		"created_at" : "2016-06-20T21:13:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 382
	},
	{
		"id" : 67917426,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This no longer causes any problems?",
		"created_at" : "2016-06-21T17:49:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 386
	},
	{
		"id" : 67918005,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Nope. Last upstream stable release that caused this problem was 3 years ago, last upstream unstable release that caused this problem was 4 years ago.\r\n\r\nAt this point I think it's safe to treat as an obscure user configuration issue rather than something Homebrew needs to be constantly vigilant for. Even the newest GPGTools/MacGPG2 is supported back to 10.6, so there's no reason for anyone to be running a version from 3+ years ago.",
		"created_at" : "2016-06-21T17:51:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 386
	},
	{
		"id" : 67918506,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Gotcha, read commit message, 👍 ",
		"created_at" : "2016-06-21T17:54:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 386
	},
	{
		"id" : 67918575,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Why we need to check version number? It's not like we will support `depends_on :gpg => \"version\"`.\r\n\r\nAnd it's definitely bad to have a fixed version value.",
		"created_at" : "2016-06-21T17:54:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 386
	},
	{
		"id" : 67918644,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Why? No explanation in the commit message.",
		"created_at" : "2016-06-21T17:55:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 386
	},
	{
		"id" : 67919032,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Because `gpg` does not always equal `gpg` 1.x & `gpg2` does not always equal 2.0, and 2.1 was a really _very_ breaking release. Note that we're only comparing the first two numbers, and there will never be a `gpg` 1.5 release, and we're intentionally avoiding `2.1` here.\r\n\r\nCurrently with the requirement you wrote previously if you've MacGPG2 installed `which(\"gpg\")` is expected to point to GPG 1.x but _actually_ points to 2.0.x, for example.",
		"created_at" : "2016-06-21T17:57:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 386
	},
	{
		"id" : 67919311,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I also think it makes sense to check the version number for now.",
		"created_at" : "2016-06-21T17:58:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 386
	},
	{
		"id" : 67920518,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Long-term support, essentially. 1.x only receives important bug fixes, upstream doesn't really recommend it for much beside portability and everyone else is moving away from it. I'd rather move away on our timetable so we can control the transition.\r\n\r\nThere's enough hacks in other projects usage in terms of _\"If we're using 2.x use this feature, if we're using 1.x don't bother\"_ that I think by defaulting to `gnupg` 1.x we're contributing to that.",
		"created_at" : "2016-06-21T18:04:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 386
	},
	{
		"id" : 67921489,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "> Note that we're only comparing the first two numbers,\r\n\r\nIt's not very abvious here.Maybe call the variable `gpg_short_version`.\r\n\r\n>  and there will never be a `gpg` 1.5 release, \r\n\r\nI think a comment is required in the code.\r\n\r\n> and we're intentionally avoiding `2.1` here.\r\n\r\nSame as above, a comment is needed for better understanding. However, I don't think current `==2.0` is a right approach for following reasons:\r\n\r\n* It would be weird and unexpected to users. For users who have `gpg 2.1` installed, it almost seems Homebrew cannot find gpg. \r\n* It fails to consider future 2.2+ release?\r\n* What about when upstream fixes the issue?\r\n\r\nThe latter two reasons can be very harmful if a user in the future somehow stucks in the old version of brew code. In that case, we are forcing them to use old and obsolete gpg.\r\n\r\nMay I suggest something like?\r\n```ruby\r\ngpg2_version >= \"2.0\" && !known_break_releases.include?(gpg2_version) ",
		"created_at" : "2016-06-21T18:10:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 386
	},
	{
		"id" : 67923686,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Some Google reading shows me that `gpg 2.1` is not a buggy release, but a new release with some API breakage change. That means `gpg 2.1` alone works just fine, it's just some formulae who depend on it may break.\r\n\r\nIf my above understanding is correct, I think it does not make much sense to completely block gpg 2.1 in core code. A more suiteable and semantics solution is to allow each individual formula choose their own perference on gpg version by passing argument. \r\n\r\nI think this is important, because otherwise unless most if not all of gpg dependent formulae support gpg 2.1, we will be keeping block gpg 2.1 in the codebase. ",
		"created_at" : "2016-06-21T18:21:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 386
	},
	{
		"id" : 67923739,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "> Maybe call the variable gpg_short_version.\r\n\r\nSure, happy to do that.\r\n\r\n> It fails to consider future 2.2+ release?\r\n\r\nThat's a monster hypothetical, to be honest. GPG 1.x last changed the x in 2004, GPG 2.x started as 2.0 in 2006 & the first release of 2.1 which is an entirely separate branch was cut at the end of 2014.\r\n\r\nDespite \"2.0\" and \"2.1\" seeming fairly related they are enormously different releases & upstream consider them unique branches. 2.2 would be the same situation, unless upstream decide to drop the versioning scheme they've used for 15+ years now.\r\n\r\n> What about when upstream fixes the issue?\r\n\r\nIf you mean GnuPG, it won't be fixed. 2.1 was intentionally breaking for the sake of a less fragmented codebase & introduction of new features.",
		"created_at" : "2016-06-21T18:22:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 386
	},
	{
		"id" : 67927284,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "> That means gpg 2.1 alone works just fine, it's just some formulae who depend on it may break.\r\n\r\nYeah, this is a fairly big deal given that Requirements exist to satisfy formulae...\r\n\r\nAccording to GA 325 people have downloaded `gnupg21` from Versions since GA went live, Bintray says half that.\r\n\r\nStatistically there's not a huge rush to switch over to `gnupg21`, it complicates the requirement for us to do so, and you're effectively volunteering me to go back & extensively test every `gpg`-using core formulae to determine an upper limit on what they'll support, which frankly as much as I use `gpg` I'm not qualified to make a determination on that much of an intimate level of how every upstream is using `gpg` internally.",
		"created_at" : "2016-06-21T18:40:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 386
	},
	{
		"id" : 68035445,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> Despite \"2.0\" and \"2.1\" seeming fairly related they are enormously different releases & upstream consider them unique branches. 2.2 would be the same situation, unless upstream decide to drop the versioning scheme they've used for 15+ years now.\r\n\r\nGiven the research @DomT4 has done into this topic and has been involved with it for a while I'd like us to defer to his judgement here.",
		"created_at" : "2016-06-22T11:17:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 386
	},
	{
		"id" : 68075165,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can remove this empty line.",
		"created_at" : "2016-06-22T15:29:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68075237,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`if ENV[\"HOMEBREW_ARTIFACT_DOMAIN\"] && @url.include?(ENV[\"HOMEBREW_ARTIFACT_DOMAIN\"])`",
		"created_at" : "2016-06-22T15:29:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68075429,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`if @url.include?(BottleSpecification::DEFAULT_DOMAIN)`",
		"created_at" : "2016-06-22T15:30:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68075474,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`@url.sub!(BottleSpecification::DEFAULT_DOMAIN, ENV[\"HOMEBREW_ARTIFACT_DOMAIN\"])`",
		"created_at" : "2016-06-22T15:30:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68075772,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "```ruby\r\n@url.sub!(/^((ht|f)tps?:\\/\\/)?.*/,\r\n  \"#{ENV[\"HOMEBREW_ARTIFACT_DOMAIN\"]}/#{Utils::Bottles::Bintray.repository(tap)}/\")`",
		"created_at" : "2016-06-22T15:31:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68091963,
		"user" : {
			"login" : "jainishshah17"
		},
		"body" : "I am using ```@url.sub(/^((ht|f)tps?:\\/\\/)?/, \"#{ENV[\"HOMEBREW_ARTIFACT_DOMAIN\"]}/#{Utils::Bottles::Bintray.repository(tap)}/\") ``` as I need rest of the part in URL",
		"created_at" : "2016-06-22T16:58:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68092153,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This can also use `@url.sub!`. It also looks really general; can you elaborate on what the input/output URLs should be for this? It'd be even better if you can write a test for both of these cases too.",
		"created_at" : "2016-06-22T16:59:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68097482,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Better yet: `@url.start_with?(BottleSpecification::DEFAULT_DOMAIN)`. Or are we expecting to replace this in the middle of the URL string?",
		"created_at" : "2016-06-22T17:30:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68097911,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You can drop the assignment (`@url = `) now that you're suing `sub!`.",
		"created_at" : "2016-06-22T17:32:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68101427,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "We definitely don't want this. ",
		"created_at" : "2016-06-22T17:51:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68101603,
		"user" : {
			"login" : "jainishshah17"
		},
		"body" : "#CASE 1: \r\n###HOMEBREW_ARTIFACT_DOMAIN is set and formula is bottled\r\n\r\nexport HOMEBREW_ARTIFACT_DOMAIN=http://localhost:8080/artifactory\r\n\r\nWhen user installs formula \r\n\r\n```brew install node```\r\n\r\nDownloading http://localhost:8080/artifactory/bottles/node-6.2.2.el_capitan.bottle.tar.gz\r\n\r\n#CASE 2: \r\n###HOMEBREW_ARTIFACT_DOMAIN is set and formula is non-bottled\r\n\r\nexport HOMEBREW_ARTIFACT_DOMAIN=http://localhost:8080/artifactory\r\n\r\nWhen user installs formula \r\n\r\n```brew install riak```\r\n\r\nDownloading http://localhost:8080/artifactory/bottles/s3.amazonaws.com/downloads.basho.com/riak/2.1/2.1.4/osx/10.8/riak-2.1.4-OSX-x86_64.tar.gz\r\n\r\nNote: For non-bottled formulas, it replaces Protocol with HOMEBREW_ARTIFACT_DOMAIN",
		"created_at" : "2016-06-22T17:52:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68101717,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Considering all the subclasses, I wonder this probably would be better to put in `_fetch`. ",
		"created_at" : "2016-06-22T17:53:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68102143,
		"user" : {
			"login" : "jainishshah17"
		},
		"body" : "How can I get value of tap without using this?",
		"created_at" : "2016-06-22T17:55:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68102153,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "So `HOMEBREW_ARTIFACT_DOMAIN` will overwrite `HOMEBREW_BOTTLE_DOMAIN`. And any reason bottles should be treated differently?",
		"created_at" : "2016-06-22T17:55:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68102189,
		"user" : {
			"login" : "jainishshah17"
		},
		"body" : "can you please explain in detail. ",
		"created_at" : "2016-06-22T17:55:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68102459,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You cannot. Also, it is worth noting this value in your PR is never set. ",
		"created_at" : "2016-06-22T17:56:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68102672,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I mean putting these logic inside `_fetch` method instead of `fetch`. ",
		"created_at" : "2016-06-22T17:57:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68102794,
		"user" : {
			"login" : "jainishshah17"
		},
		"body" : "As bottles are hosted in Bintray which is another product of JFrog. Its east to fetch it in Artifctory. No Specific reason.",
		"created_at" : "2016-06-22T17:58:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68103452,
		"user" : {
			"login" : "jainishshah17"
		},
		"body" : "you mean putting it in:\r\n``` private\r\n\r\n  # Private method, can be overridden if needed.\r\n  def _fetch```",
		"created_at" : "2016-06-22T18:02:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68104710,
		"user" : {
			"login" : "jainishshah17"
		},
		"body" : "Still it returns default value which is bottles",
		"created_at" : "2016-06-22T18:08:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68110968,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Yes",
		"created_at" : "2016-06-22T18:41:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68111557,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I fail to see why you need to know the tap. And it's super weird to have non-bottle url contains \"bottle\". Even more, as I said, this value is never set. So it will be \"bottle\" for any tap.\r\n\r\nWhy cannot you just name your Artifactoy repo to e.g. `Homebrew`. And use it by:\r\n```\r\nexport HOMEBREW_ARTIFACT_BOTTLE=https://example.com/artifactory/homebrew\r\n```",
		"created_at" : "2016-06-22T18:44:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68113029,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Will making the bottle artifact url structure the same as non-bottle one cause any troubles? If not, I would prefer a consistent and unanimous way to handle artifact. Presuming you fetching bottle resources the same way as non-bottle ones, I think they are equally easy.\r\n\r\nThe more important issue here is that if we want to add support for artifact, let's make it more generalize to all the users instead of specific to your settings. That means other users can use the same function without setting bottles fetch policy differently for bottles even when they are using services other than JForg Aritfactory. ",
		"created_at" : "2016-06-22T18:52:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68122080,
		"user" : {
			"login" : "jainishshah17"
		},
		"body" : "I can do this.",
		"created_at" : "2016-06-22T19:48:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68124126,
		"user" : {
			"login" : "jainishshah17"
		},
		"body" : "Handling bottles are easy as its coming from only one source which is ```https://homebrew.bintray.com/bottles``` but for non-bottle we don't know from where to fetch it until we read URL from Formula definition.\r\nwhat we do underneath is  \r\nfor ex  when a user says ```brew install riak```\r\nwe get the archive of riak from ```https://s3.amazonaws.com/downloads.basho.com/riak/2.1/2.1.4/osx/10.8/riak-2.1.4-OSX-x86_64.tar.gz``` and store it in homebrew repository.",
		"created_at" : "2016-06-22T20:00:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68304962,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@xu-cheng Thoughts?",
		"created_at" : "2016-06-23T20:05:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68358935,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "IMHO, I think `HOMEBREW_ARTIFACT_DOMAIN` should work in the way to be oblivious of bottles. My defenses are following:\r\n\r\n* It's unexpected to let `HOMEBREW_ARTIFACT_DOMAIN` overwrite `HOMEBREW_BOTTLE_DOMAIN`.\r\n* If users want to use artifact services other than JForg Aritfactory(e.g. self hosted in enterprise settings). They should get it without any special settings. This means that bottle should not get special treatment. More specially the download urls would be like these:\r\n  * For bottles:  `https://example.com/artifactory/homebrew/homebrew.bintray.com/bottles/gcc-6.1.0.el_capitan.bottle.tar.gz`\r\n   * For non bottles: `https://example.com/artifactory/homebrew/s3.amazonaws.com/downloads.basho.com/riak/2.1/2.1.4/osx/10.8/riak-2.1.4-OSX-x86_64.tar.gz`\r\n\r\n> Handling bottles are easy as its coming from only one source which is https://homebrew.bintray.com/bottles\r\n\r\n* This is not correct. We have different sources for different taps.\r\n* Even with full url like `https://example.com/artifactory/homebrew/homebrew.bintray.com/bottles/gcc-6.1.0.el_capitan.bottle.tar.gz`. You can still easily handle bottles fetching. The only different is the url prefix is different. \r\n\r\nMy main intention is we should support such feature in a general fashion. So any artifact services can be applied to this. At the same time, users don't have to know anything about bottles to make it work.",
		"created_at" : "2016-06-24T06:36:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68359290,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Let's remove `tap`.",
		"created_at" : "2016-06-24T06:42:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68636147,
		"user" : {
			"login" : "jainishshah17"
		},
		"body" : "@xu-cheng : Solution you have provided is really Awesome. I have tested it with bottle and non-bottle formula both.",
		"created_at" : "2016-06-27T19:02:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68705198,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "@jainishshah17 you should remove this line.",
		"created_at" : "2016-06-28T06:51:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 69218009,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`provide the mirror URL like:`",
		"created_at" : "2016-06-30T21:59:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 69218120,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Should this not just be `HOMEBREW_ARTIFACT_DOMAIN=https://$URL_OF_ARTIFACT_MANAGER`? What would you set the repository name to?",
		"created_at" : "2016-06-30T21:59:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 69238580,
		"user" : {
			"login" : "jainishshah17"
		},
		"body" : "Repository name is user's choice. We will recommend using repository name `bottle` for bottled and `homebrew` for non-bottled formulas.",
		"created_at" : "2016-07-01T02:05:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 69246107,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This implementation doesn't allow you to differentiate between bottled and non-bottled. It's worth just recommending a repository name here e.g. `homebrew`",
		"created_at" : "2016-07-01T04:31:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 69246155,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think we could probably just remove the `note` altogether and save it for Artifactory's documentation as this note is artifactory specific but the variable is not.",
		"created_at" : "2016-07-01T04:32:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 69320901,
		"user" : {
			"login" : "jainishshah17"
		},
		"body" : "@MikeMcQuaid: I will do that.",
		"created_at" : "2016-07-01T15:57:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 69397755,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Please don't change this file in this PR; open another for it.",
		"created_at" : "2016-07-03T21:37:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 387
	},
	{
		"id" : 68492875,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Try wrapping this line and the one below with:\r\n```ruby\r\nBundler.with_clean_env do\r\n...\r\nend\r\n```\r\n\r\nand remove the Gemfile* changes.",
		"created_at" : "2016-06-25T19:35:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 388
	},
	{
		"id" : 68651608,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Just curious, why wrap only these 2 lines?\r\n```\r\nassert_match \"1 file inspected, 1 offense detected\", cmd_fail(\"style\", \"#{foo_file}\")\r\nassert_match \"1 file inspected, 1 offense detected\", cmd_fail(\"style\", \"foo\")\r\n```\r\nIn any case, I removed the `Gemfile*` changes and tried wrapping those 2 lines (and all 3 lines). Received the same error in both cases. :-/",
		"created_at" : "2016-06-27T20:39:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 388
	},
	{
		"id" : 68743131,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm not sure what the problem and what the correct solution is, but `Bundler.with_clean_env` sadly isn't going to help (or change anything) here. It is already used in the implementation of `cmd[_fail]`, or to be more precise [in `cmd_output`](https://github.com/Homebrew/brew/blob/cab97cf4d782ce36762f0cd615ca59718f55b0d5/Library/Homebrew/test/test_integration_cmds.rb#L45-L66) where it is used to start a separate Homebrew process (but with the necessary adjustments for the testing environment) in which it then executes the specified Homebrew command.",
		"created_at" : "2016-06-28T12:01:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 388
	},
	{
		"id" : 67993866,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I don't think we need to extend `Formulary`. All of this can be simplified to:\r\n\r\n```ruby\r\nreturn if @name.nil?\r\n@path = Formulary.path(\"#{tap || \"homebrew/core\"}/#{name}\")\r\n```",
		"created_at" : "2016-06-22T04:45:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 389
	},
	{
		"id" : 67993989,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd probably make this `fc.tap = Tap.fetch(tap || \"homebrew/core\")` which would slightly simplify the logic in `FormulaCreator`. I'd also check via `Tap#installed?` that the tap is already installed and raise an exception if not.",
		"created_at" : "2016-06-22T04:48:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 389
	},
	{
		"id" : 67994148,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Probably doesn't matter much, as my other code comments suggest to eliminate this code. But you don't normally want to use `Tap.new`. Always use `Tap.fetch`, which will make sure to return the correct object even if `homebrew/core` is specified. It will also automatically split the string for you, if you pass a single argument.",
		"created_at" : "2016-06-22T04:51:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 389
	},
	{
		"id" : 67996620,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This will produce wrong results if `@name` happens to include upper-case letters. For simplicity and consistency with previous behavior, I'd make that just `@path = Formulary.path(\"#{@tap}/#{@name}\")`. (Note also the somewhat inconsistent use of the `tap`/`name` readers and corresponding instance variables in this and the preceding line.)",
		"created_at" : "2016-06-22T05:32:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 389
	},
	{
		"id" : 67996927,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Fixed.",
		"created_at" : "2016-06-22T05:37:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 389
	},
	{
		"id" : 68030976,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "`tap = Tap.fetch(user, repo)`",
		"created_at" : "2016-06-22T10:37:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68031002,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You can use `tap.path`",
		"created_at" : "2016-06-22T10:37:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68031071,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "`tap == \"homebrew/services\"`. We have implemented `Tap#==` for this kind of need.",
		"created_at" : "2016-06-22T10:38:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68031147,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "`system \"brew\", \"tap\", tap` You don't need to check tap existence. ",
		"created_at" : "2016-06-22T10:38:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68031191,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Should we check `vendor/bundle` is in `.gitignore` for all theses taps.",
		"created_at" : "2016-06-22T10:39:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68031272,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "So `--official-cmd-taps` won't run tests for homebrew?",
		"created_at" : "2016-06-22T10:40:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68033087,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It warns otherwise.",
		"created_at" : "2016-06-22T10:54:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68033117,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "If we're not committing: I don't think it matters but probably not a bad idea anyway.",
		"created_at" : "2016-06-22T10:54:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68033134,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Maybe, yes.",
		"created_at" : "2016-06-22T10:54:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68034123,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "If so, how about:\r\n`system \"brew\", \"tap\", tap unless tap.installed?`\r\nor\r\n`tap.install unless tap.installed?`",
		"created_at" : "2016-06-22T11:04:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68034550,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think we can just store `homebrew/bundle`. Also if you want to support cmd, maybe:\r\n```ruby\r\nOFFICIAL_CMD_TAPS = {\r\n  \"homebrew/bundle\" => %w[bundle, ...]\r\n  ...\r\n }.freeze\r\n```\r\n\r\nSo for `brew.rb`\r\n```\r\npossible_tap = OFFICIAL_CMD_TAPS.detect do |name, cmds|\r\n  cmds.include? cmd\r\nend.map { |name| Tap.fetch(name) }\r\n```",
		"created_at" : "2016-06-22T11:08:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68092231,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "But if `Tap#==` didn't exist, `tap.to_s` would still be preferable over `\"#{tap}\"`.",
		"created_at" : "2016-06-22T16:59:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68092851,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "If we stick with the `system` version, use `HOMEBREW_BREW_FILE` instead of `\"brew\"` like we do in most other places like [`Library/brew.rb`](https://github.com/Homebrew/brew/blob/915eed4c6427271c5b4c01fa36239361c3680c40/Library/brew.rb#L112-L113).",
		"created_at" : "2016-06-22T17:03:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68093785,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Should we maybe instead check for the presence of a `Rakefile` instead of hard-coding this? Though that would uselessly install the tap and then do nothing with it, if there is none.",
		"created_at" : "2016-06-22T17:09:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68094109,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "```ruby\r\nHomebrew.failed = true unless $?.success?\r\n```\r\n\r\nOtherwise a later success may mask a previous failure.",
		"created_at" : "2016-06-22T17:11:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68094554,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Not sure if we need a separate command instead of using `tests` for that, but the whole `if ARGV.include? \"--official-cmd-taps\"` block should best live in a separate method. Otherwise the `tests` method becomes increasingly unreadable.",
		"created_at" : "2016-06-22T17:13:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68095326,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Quickly getting into bike-shedding territory, but maybe `--official-external-commands`? Sounds a bit clearer to me.",
		"created_at" : "2016-06-22T17:17:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 69332159,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Are you intentionally dropping support for auto-tapping when `brew bundle` is invoked with the alternative commands `brewdle`,  `brewdler`, and  `bundler`? (I'm not opposing this change, just making sure.)",
		"created_at" : "2016-07-01T17:33:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 69339655,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can you please add the file implementing this command to your commit? It's difficult to review and/or test otherwise. :wink:",
		"created_at" : "2016-07-01T18:33:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 69340598,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Why don't we use the dictionary approach in the above? i.e.\r\n```ruby\r\nOFFICIAL_CMD_TAPS = {\r\n  \"homebrew/bundle\" => %w[bundle, ...]\r\n  ...\r\n }.freeze\r\n```\r\n\r\nI am however opposite to only check cmd with tap name, which it's a bad assumption for future commands or taps.",
		"created_at" : "2016-07-01T18:42:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 69363075,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> Are you intentionally dropping support for auto-tapping when brew bundle is invoked with the alternative commands brewdle, brewdler, and bundler? (I'm not opposing this change, just making sure.)\r\n\r\nYes. PR incoming for homebrew-bundle to do that.\r\n\r\n\r\n\r\n> I am however opposite to only check cmd with tap name, which it's a bad assumption for future commands or taps.\r\n\r\nI don't think it's a bad assumption but we can correct it when it's no longer correct as it's an implementation detail.",
		"created_at" : "2016-07-01T22:34:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 69363138,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yeh, whoops, re-added.",
		"created_at" : "2016-07-01T22:35:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 69444229,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@UniqMartin 👍. I think we should probably be using `FileUtils.rm_rf` for all these cases to avoid the failure when it doesn't exist and avoid guarding them all with `.exist?`",
		"created_at" : "2016-07-04T11:23:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 69448430,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Probably not for this PR, but we could also consider adding a method that basically does “register this path for cleanup” and that is called every time a new path in a test is used. This would delegate the removal of files and directories to `teardown` instead of relying on `ensure` in every single test method (where this file/directory cleanup is dominating). I'm not sure though, whether this is the right approach or if it makes the tests less readable.",
		"created_at" : "2016-07-04T12:07:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 69451918,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "The redundancy and speculation annoys me a bit here but will defer to you to get this merged.",
		"created_at" : "2016-07-04T12:39:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 69455594,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This probably needs a `require \"tap\"` at the top of the file. Here's what I currently get:\r\n\r\n```console\r\n$ brew tests --no-compat --official-cmd-taps\r\nError: uninitialized constant Homebrew::Tap\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/opt/brewery/dummy/Library/Homebrew/cmd/tests.rb:14:in `block in tests'\r\n/opt/brewery/dummy/Library/Homebrew/cmd/tests.rb:13:in `each'\r\n/opt/brewery/dummy/Library/Homebrew/cmd/tests.rb:13:in `tests'\r\n/opt/brewery/dummy/Library/brew.rb:87:in `<main>'\r\n```",
		"created_at" : "2016-07-04T13:09:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 390
	},
	{
		"id" : 68291533,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "We should use `HOMEBREW_BREW_FILE`",
		"created_at" : "2016-06-23T18:40:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 396
	},
	{
		"id" : 68291614,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This line should not be removed. Noted it's to remove the parent folder. ",
		"created_at" : "2016-06-23T18:41:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 396
	},
	{
		"id" : 68358560,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I guess it doesn't hurt to check the aliases of the to-be-installed tap, too. Thus, I'd suggest:\r\n\r\n```ruby\r\nsafe_system HOMEBREW_BREW_FILE, \"readall\", \"--aliases\", name\r\n```",
		"created_at" : "2016-06-24T06:30:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 396
	},
	{
		"id" : 69448684,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It does work. Given it's affecting only the integration tests and they pass I personally don't see the problem. Do you have a suggestion for another approach?",
		"created_at" : "2016-07-04T12:10:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 396
	},
	{
		"id" : 69451008,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "(note tests are now 💚)",
		"created_at" : "2016-07-04T12:32:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 396
	},
	{
		"id" : 69453099,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "One problem is that these instances re-use the same test identifier and thus overwrite each other's coverage data when running with `--coverage`. There might be more issues, but to be honest, I haven't spent much time thinking about this.",
		"created_at" : "2016-07-04T12:49:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 396
	},
	{
		"id" : 69455429,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Assuming this is what `cmd_id_from_args`/`HOMEBREW_INTEGRATION_TEST` are doing: the arguments here will be handled correctly.",
		"created_at" : "2016-07-04T13:08:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 396
	},
	{
		"id" : 69455551,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "And the coverage looks correct from local inspection.",
		"created_at" : "2016-07-04T13:09:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 396
	},
	{
		"id" : 69458549,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Yes, that's what `cmd_id_from_args` is for. The nested `brew readall` spawned from `brew tap` doesn't go through this code again (unless I'm missing something). Thus it re-uses the same ID and gets its result overwritten by the `brew tap` process that finishes later.\r\n\r\nIf this worked as it probably should, I'd expect `brew tests --coverage --only=integration_cmds/tap` to have nonzero coverage for `cmd/readall.rb`, but that's not something I can observe locally.",
		"created_at" : "2016-07-04T13:34:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 396
	},
	{
		"id" : 69462743,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I see what you mean, will check this out further.",
		"created_at" : "2016-07-04T14:08:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 396
	},
	{
		"id" : 68492890,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "As we're not testing that `install` works or doesn't in this function you can skip the `assert_match` here. `cmd` is sufficient as it'll verify the return code.",
		"created_at" : "2016-06-25T19:37:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 398
	},
	{
		"id" : 68492913,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "think it's worth separating `unlink` into another test.",
		"created_at" : "2016-06-25T19:39:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 398
	},
	{
		"id" : 70085604,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'm wondering if you can just do e.g. `FileUtils.rm_rf HOMEBREW_LOCK_DIR` and skip the glob?",
		"created_at" : "2016-07-08T14:48:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 398
	},
	{
		"id" : 70085920,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "There's still a leak unfortunately 😭 http://bot.brew.sh/job/Brew%20Pull%20Requests/869/version=el_capitan/testReport/junit/brew-test-bot/el_capitan/tests___official_cmd_taps/",
		"created_at" : "2016-07-08T14:50:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 398
	},
	{
		"id" : 70093459,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I've taken this approach in https://github.com/Homebrew/brew/pull/475.",
		"created_at" : "2016-07-08T15:33:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 398
	},
	{
		"id" : 70127246,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@eirinikos Now #475 is merged you can forget about ensure blocks in future 😀 ",
		"created_at" : "2016-07-08T19:21:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 398
	},
	{
		"id" : 70382703,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I wonder if you could, instead of moving this case to the bottom, just modify this to `/^testball/` so that it matches all formula names that start with “testball”. This would keep the diff smaller and we could more easily add additional cases in the future (if needed) without causing any name conflict.",
		"created_at" : "2016-07-12T06:21:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 398
	},
	{
		"id" : 70382794,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "If you're happy with my `/^testball/` suggestion, this would of course need to stay modified.",
		"created_at" : "2016-07-12T06:23:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 398
	},
	{
		"id" : 68492978,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This might warrant a comment.",
		"created_at" : "2016-06-25T19:44:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 400
	},
	{
		"id" : 68700354,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Should be `pn.stat`, not `path.stat`",
		"created_at" : "2016-06-28T05:44:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 400
	},
	{
		"id" : 68738047,
		"user" : {
			"login" : "woodruffw"
		},
		"body" : "> Should be pn.stat, not path.stat\r\n\r\nWhoops, that's a major mistake on my part :sweat_smile: ",
		"created_at" : "2016-06-28T11:13:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 400
	},
	{
		"id" : 68740261,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd move this even further down, such that `hardlinks` only contains Mach-O files. No need to keep track of hard links of *all* the files in the keg.",
		"created_at" : "2016-06-28T11:33:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 400
	},
	{
		"id" : 68740464,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd personally prefer if we used `Pathname#/` instead of `Pathname#join` in all our test code (or at least the newly added one). I find it easier to read and it's closer to what we do in some (most?) of Homebrew and particularly in our formulae.",
		"created_at" : "2016-06-28T11:35:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 400
	},
	{
		"id" : 68740484,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd personally prefer if we used `Pathname#/` instead of `Pathname#join` in all our test code (or at least the newly added one). I find it easier to read and it's closer to what we do in some (most?) of Homebrew and particularly in our formulae.",
		"created_at" : "2016-06-28T11:35:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 400
	},
	{
		"id" : 68850617,
		"user" : {
			"login" : "woodruffw"
		},
		"body" : "Just to make sure I'm understanding correctly, something like this?\r\n\r\n```ruby\r\npath.find do |pn|\r\n  next if pn.symlink? || pn.directory?\r\n  next unless pn.dylib? || pn.mach_o_bundle? || pn.mach_o_executable?\r\n  # if we've already processed a file, ignore its hardlinks (which have the same dev ID and inode)\r\n  # this prevents relocations from being performed on a binary more than once\r\n  next unless hardlinks.add? [pn.stat.dev, pn.stat.ino]\r\n  mach_o_files << pn\r\nend\r\n```",
		"created_at" : "2016-06-28T21:50:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 400
	},
	{
		"id" : 68853502,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You only need the parentheses if you need to invoke a method on the `Pathname` instance, like in `(a/\"lib\").mkpath`. In this case, the expression is evaluated from left-to-right anyway, so the parentheses don't provide any benefit. Though that's only of secondary importance, as we don't usually chain `Pathname#/` invocations and instead prefer to use something like this:\r\n\r\n```ruby\r\na = HOMEBREW_CELLAR/\"a/1.0\"\r\n```\r\n\r\n(That means all the fixed trailing path components are in a single string instead of incrementally appending individual path components.)",
		"created_at" : "2016-06-28T22:10:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 400
	},
	{
		"id" : 68853962,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This should also fix the syntax warnings and errors produced by Ruby 1.8.7 that gets confused by the lack of parentheses in some of the `assert_*` method invocations (or rather re-interprets the parentheses used for grouping as parentheses surrounding an argument list).",
		"created_at" : "2016-06-28T22:13:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 400
	},
	{
		"id" : 68854309,
		"user" : {
			"login" : "woodruffw"
		},
		"body" : "Yep, I wasn't thinking. I'll fix this now.\r\nFunny that Ruby 1.8.7 chokes on that whitespace ambiguity :smile: ",
		"created_at" : "2016-06-28T22:15:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 400
	},
	{
		"id" : 68854657,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Ruby 1.8.7 can be a real pain. I'm so looking forward to #404 and the freedom this will grant us. (Hopefully, Ruby 1.8.7 becomes a distant memory very soon.)",
		"created_at" : "2016-06-28T22:18:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 400
	},
	{
		"id" : 68511006,
		"user" : {
			"login" : "usmonster"
		},
		"body" : "Most uses of this are simplified if kegs are sorted by version, so I did it here. Hope it's fine?",
		"created_at" : "2016-06-26T22:14:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 401
	},
	{
		"id" : 68511050,
		"user" : {
			"login" : "usmonster"
		},
		"body" : "Would it be useful to add \"...sorted by version.\" in the comment here?",
		"created_at" : "2016-06-26T22:17:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 401
	},
	{
		"id" : 68512565,
		"user" : {
			"login" : "usmonster"
		},
		"body" : "This is obviously no longer needed because of the above change in `installed_kegs`, so I removed it.",
		"created_at" : "2016-06-26T23:48:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 401
	},
	{
		"id" : 68512618,
		"user" : {
			"login" : "usmonster"
		},
		"body" : "Is this reasonable logic? Should completely unlinked formulas just get cleaned up no matter what? (It would be a LOT more aggressive than the current behavior, though.)",
		"created_at" : "2016-06-26T23:51:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 401
	},
	{
		"id" : 68512700,
		"user" : {
			"login" : "usmonster"
		},
		"body" : "Should I just use `Keg.new(...)` (or something) here for maybe-slightly-clearer semantics? Or something else? Or is this fine?",
		"created_at" : "2016-06-26T23:55:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 401
	},
	{
		"id" : 68512794,
		"user" : {
			"login" : "usmonster"
		},
		"body" : "Is it OK to not additionally mention any newer (similarly-outdated, unlinked) kegs that are also being skipped here?",
		"created_at" : "2016-06-27T00:00:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 401
	},
	{
		"id" : 69203125,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Yes, definitely.",
		"created_at" : "2016-06-30T20:20:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 401
	},
	{
		"id" : 69203476,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You can simplify this a little bit: Use `.sort_by(&:version)` instead of what you appended.\r\n\r\nI think this should be fine. (There are currently no assumptions being made in what order `installed_kegs` returns its results, thus changing that shouldn't cause any issues.)",
		"created_at" : "2016-06-30T20:22:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 401
	},
	{
		"id" : 68858717,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This creates a spurious empty line in the `brew help` output, because the magic token is removed, but not the line that contains the magic token. Can you modify the filtering to instead drop the entire line that contains this token? Maybe even make the matching a bit stricter and only accept the token if it is the only thing in a documentation line.",
		"created_at" : "2016-06-28T22:54:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 402
	},
	{
		"id" : 68858866,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> Maybe even make the matching a bit stricter and only accept the token if it is the only thing in a documentation line.\r\n\r\nThis chunk in one of my other code comment basically references this piece of code.",
		"created_at" : "2016-06-28T22:55:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 402
	},
	{
		"id" : 68859123,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "If you don't have very strong feelings about the placement of this, I'd prefer that to be the very first comment line instead of being tucked underneath all the documentation (possibly extensive once it fully explains all options) and thus where it's more easily overlooked.",
		"created_at" : "2016-06-28T22:58:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 402
	},
	{
		"id" : 68868587,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Stripping leading and trailing whitespace is straightforward and seems equally good.",
		"created_at" : "2016-06-29T00:38:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 402
	},
	{
		"id" : 68707743,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "In a followup PR, I'd like to look into vendoring curl as well; older platforms won't be able to fetch from all hosts without.",
		"created_at" : "2016-06-28T07:17:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68707999,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This is on my watch list. However, I haven't figured out how to download vendor curl itself. Maybe a separate fetching strategy using system curl with `--insecure` flag?",
		"created_at" : "2016-06-28T07:19:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68709525,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "It's a bit of a chicken and egg problem, huh? Yes, maybe...",
		"created_at" : "2016-06-28T07:32:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68766187,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Assuming they got Homebrew from some trusted source, maybe the way to address this would be to ignore transport security and only rely on the SHA-256 to validate the integrity of the download?",
		"created_at" : "2016-06-28T14:24:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68768513,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "A minor detail, but could be relevant in a context where the exit code of such a line is used. If the condition isn't met, this returns exit code 1 indicating failure. If you invert the condition and use `||` instead of `&&`, then the exit code will always indicate success. In this particular example:\r\n\r\n```sh\r\n[[ -n \"$HOMEBREW_QUIET\" ]] || echo \"==> Downloading $VENDOR_URL\"\r\n```",
		"created_at" : "2016-06-28T14:34:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68770084,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "“Install” 👉 “Installing”.",
		"created_at" : "2016-06-28T14:40:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68770228,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "“Install vendor” 👉 “Installing vendored”.",
		"created_at" : "2016-06-28T14:40:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68771172,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can you add a comment that explains what this does? I think it is non-obvious. Better yet, is there a way to achieve a similar effect using `find` or `find` with `xargs`? I have to admit that parsing the output of `ls` and then grepping with an externally supplied unescaped string bothers me a little bit.",
		"created_at" : "2016-06-28T14:45:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68772253,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The trailing semicolons in the above three lines are unnecessary.",
		"created_at" : "2016-06-28T14:51:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68775334,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I might not understand the full context, but it feels wrong that this is added in a previous commit and then removed in this commit. Is that intentional?",
		"created_at" : "2016-06-28T15:05:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68776018,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The semicolons are unnecessary and we mostly try to use lowercase names for local variables to distinguish them from global variables (all caps) and exported variables (all caps and with a `HOMEBREW_` prefix).",
		"created_at" : "2016-06-28T15:08:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68777922,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Does that mean that every time a Homebrew command is run (even if the system Ruby is sufficiently up-to-date) we have to call `ruby` once to learn its version number and then a second time to execute the command? (Unless of course the command is implemented in shell code.) If so, this sounds like it could be a major performance regression, particularly for commands that tend to finish fairly quickly. Can you comment on this?",
		"created_at" : "2016-06-28T15:18:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68778352,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Another unrelated note: Should the comparison maybe use `-lt 2` instead of `!= \"2\"`?",
		"created_at" : "2016-06-28T15:20:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68780879,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Mike askes me to keep several old copies in case of installation failure. This command comes from here. I don't know whether there is a better implementation. Will add a comment.",
		"created_at" : "2016-06-28T15:31:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68781168,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "oops, squash mistake.",
		"created_at" : "2016-06-28T15:32:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68781692,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I agree that keeping around a few (one?) older versions in case of failure is a good thing.",
		"created_at" : "2016-06-28T15:35:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68782854,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The unneeded semicolons are still here. :wink:",
		"created_at" : "2016-06-28T15:40:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68782870,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Both checking system ruby version and comparing ruby version with 2(i.e. not allowing 3) come from Mike's requests. See https://github.com/Homebrew/brew/pull/195#discussion_r61920009 and https://github.com/Homebrew/brew/pull/195#discussion_r62988778\r\n\r\nI do think we should skip checking system ruby for better performance as for now any brew commands will invoke a dozen system calls before do any job.",
		"created_at" : "2016-06-28T15:40:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68782994,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "oops, thanks for catching up.",
		"created_at" : "2016-06-28T15:41:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68783202,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "More places that might benefit from using `[[ <inverse-condition> ]] ||` instead of `[[ <condition> ]] &&`.",
		"created_at" : "2016-06-28T15:42:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68783250,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "One ore place that might benefit from using `[[ <inverse-condition> ]] ||` instead of `[[ <condition> ]] &&`.",
		"created_at" : "2016-06-28T15:42:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68783305,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "One more place that might benefit from using `[[ <inverse-condition> ]] ||` instead of `[[ <condition> ]] &&`.",
		"created_at" : "2016-06-28T15:42:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68783697,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I don't think these places should. Noted these are the same logic in update.sh",
		"created_at" : "2016-06-28T15:44:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68784959,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Could we use `ruby --version` and parse the output with some Bash built-ins instead of making it execute actual Ruby code to get the major version? `ruby --version` is significantly faster on my machine than `ruby -e \"<some-trivial-code>\"`. (Still, finding a reliable way to completely omit this check on every run would be great.)",
		"created_at" : "2016-06-28T15:50:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68785331,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Would you mind give me a more detail example of using bash comparing version?\r\n\r\n>  finding a reliable way to completely omit this check on every run would be great.",
		"created_at" : "2016-06-28T15:52:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68785549,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Well, the argument is the same like in all other instances, but I agree that it doesn't make a difference under normal circumstances. (`update.sh` probably needs some cleanup though, if anyone finds some time for that.)",
		"created_at" : "2016-06-28T15:53:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68785702,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Or we could check system version, which it's already done by previous bash script. ",
		"created_at" : "2016-06-28T15:54:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68788642,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> Would you mind give me a more detail example of using bash comparing version?\r\n\r\nHow about the following (obviously needs to be adapted a bit)?\r\n\r\n```sh\r\nruby_major=\"$(ruby --version)\"\r\nruby_major=\"${ruby_major#ruby }\"\r\nruby_major=\"${ruby_major%%.*}\"\r\n```\r\n\r\n(This works for me locally with Ruby 1.8.7, 1.9.3, and 2.0-2.3.)",
		"created_at" : "2016-06-28T16:08:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68847407,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "If we're talking about performance problems: please let's measure the actual performance differences when they are trivial to measure. Thanks!",
		"created_at" : "2016-06-28T21:30:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68848344,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Could turn the shared args into a shared variable. Also, can you use the long form of these flags to make it more readable.",
		"created_at" : "2016-06-28T21:35:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68855867,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "My very simplistic experiment yielded about 10 ms for `ruby --version` and about 60 ms for the `ruby -e` variant. Probably not much if seen individually, but it adds up in the grand scheme of things and further contributes to the increasing number of commands we run in our shell setup code before we start executing any of Homebrew's commands.\r\n\r\nI didn't want to suggest premature optimization, but my gut feeling was that the impact would be noticeable, particularly because it's affecting every single Homebrew installation, even the 90%+ users that have a perfectly fine system Ruby as they are on a sufficiently modern ~~OS X~~ macOS.",
		"created_at" : "2016-06-28T22:28:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 70253640,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Think we can hide this from the manpage (for now at least).",
		"created_at" : "2016-07-11T13:10:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 70253751,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "e.g. with `#: @hide_from_man_page` as the first line.",
		"created_at" : "2016-07-11T13:10:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 404
	},
	{
		"id" : 68796909,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You might want to use `ENV.to_hash` and `ENV.replace` for backing up and restoring the environment. This would also improve consistency with other tests, e.g. [these lines from `test_utils.rb`](https://github.com/Homebrew/brew/blob/cab97cf4d782ce36762f0cd615ca59718f55b0d5/Library/Homebrew/test/test_utils.rb#L36-L44), and I believe also other environment handling code we have in Homebrew.",
		"created_at" : "2016-06-28T16:54:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 405
	},
	{
		"id" : 68797344,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Please use a more self-descriptive argument name like `extra_env`. (Feel free to come up with an even better name!)",
		"created_at" : "2016-06-28T16:56:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 405
	},
	{
		"id" : 68797810,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`pairs` is a nice name for the structure of this thing, but what does it actually contain? (Subtle hint to maybe come up with a better variable name.)",
		"created_at" : "2016-06-28T16:58:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 405
	},
	{
		"id" : 68801599,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "That `--tap=spam/homebrew-eggs` is recognized is more of a convenience (no need to adjust the Travis CI repository slug beforehand), but I'd actually expect this to test `--tap=spam/eggs` or possibly both.",
		"created_at" : "2016-06-28T17:19:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 405
	},
	{
		"id" : 68802001,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This is a nice way to avoid duplicate code. Does it also provide a meaningful output if any of the assertions fail, i.e. is it easy to understand for which case and which `assert_*` invocation the failure occurred?",
		"created_at" : "2016-06-28T17:21:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 405
	},
	{
		"id" : 68802772,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Prefer `Homebrew.resolve_test_tap` for invoking methods (should have been pointed out by `brew style`).",
		"created_at" : "2016-06-28T17:25:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 405
	},
	{
		"id" : 68802781,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Use `assert_nil`.",
		"created_at" : "2016-06-28T17:25:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 405
	},
	{
		"id" : 68811546,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Nice, thanks!",
		"created_at" : "2016-06-28T18:12:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 405
	},
	{
		"id" : 68811798,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "It provides good feedback about which assertion but not which case; I'll add a message parameter to the block.",
		"created_at" : "2016-06-28T18:13:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 405
	},
	{
		"id" : 69397671,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It's pretty hard to follow on what's going on here, can you elaborate?",
		"created_at" : "2016-07-03T21:28:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 405
	},
	{
		"id" : 69397956,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "`resolve_test_tap` is responsive to parameters delivered through either the environment or through ARGV. This tests delivering parameters through each of the supported environments and then ARGV.",
		"created_at" : "2016-07-03T22:01:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 405
	},
	{
		"id" : 69037700,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I picked this line, but please always quote uses of a variable in the parts you modified/extended. We prefer to do that for consistency and in this case also for correctness because we're dealing with user input. In this particular example: Use `\"$1\"` instead of `$1`.",
		"created_at" : "2016-06-29T22:09:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 407
	},
	{
		"id" : 69190778,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Another minor thing for consistency: Could you please add a trailing `;;` to terminate this case like all the others? (I know it's not strictly necessary.)",
		"created_at" : "2016-06-30T19:00:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 407
	},
	{
		"id" : 68794421,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It looks like this pattern is repeated in every single test method (sometimes multiple times) which tells me that all of this should be consolidated in the helper function. And the returned `Tab` object isn't actually needed. How about renaming `tab_for_prefix` to `setup_tab_with_tap` and using it as follows?\r\n\r\n```ruby\r\nsetup_tab_with_tap(same_prefix, \"homebrew/core\")\r\n```\r\n\r\nThis could be the implementation (untested):\r\n\r\n```ruby\r\ndef setup_tab_with_tap(prefix, tap_string = nil)\r\n  prefix.mkpath\r\n  tab = Tab.empty\r\n  tab.tabfile = prefix/\"INSTALL_RECEIPT.json\"\r\n  tab.source[\"tap\"] = tap_string if tap_string\r\n  tab.write\r\n  tab # Not needed and not currently used anywhere (if I didn't overlook anything).\r\nend\r\n```\r\n\r\nThis method would also make `rewrite_tab_with_tap` obsolete (i.e. `setup_tab_with_tap` should create the tab file and the prefix if it doesn't already exist yet and overwrite it otherwise).",
		"created_at" : "2016-06-28T16:41:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 411
	},
	{
		"id" : 68808573,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : ":+1: I didn't remove `tab` at the end of the method, did I need to? Now it's not used, that is true, but I'm not sure if I need to remove it.",
		"created_at" : "2016-06-28T17:56:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 411
	},
	{
		"id" : 68819785,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The return value assigned to the local variable is never used, thus the assignment can be dropped.",
		"created_at" : "2016-06-28T18:54:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 411
	},
	{
		"id" : 68819811,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The return value assigned to the local variable is never used, thus the assignment can be dropped.",
		"created_at" : "2016-06-28T18:54:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 411
	},
	{
		"id" : 69217519,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Could this be tweaked in a future PR so you `return false` for each of those cases rather than chaining with `&&`? It makes it much easier to follow.",
		"created_at" : "2016-06-30T21:55:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 411
	},
	{
		"id" : 69316200,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : ":+1: https://github.com/Homebrew/brew/pull/432",
		"created_at" : "2016-07-01T15:25:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 411
	},
	{
		"id" : 68975361,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Could it create problems that the same file is closed a second time further down? Would using `IO#flush` instead of `IO#close` also fix the problem?",
		"created_at" : "2016-06-29T16:00:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 418
	},
	{
		"id" : 68979701,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Repeated `close`s are a no-op. (It's not really clear from the documentation, but it worked without error when I tested it, and the source code for `Tempfile#close` shows the implementation is happy with repeated closes.)\r\n\r\n`IO#flush` might fix it, too; I'm not sure of the semantics. I'm thinking maybe not necessarily: the [IO#flush doco](http://ruby-doc.org/core-1.9.2/IO.html#method-i-flush) says that \"this is Ruby internal buffering only; the OS may buffer the data as well\". I'm not sure what that means with respect to visibility to external processes doing an `open`.\r\n\r\nRegardless, I prefer `close`, because that makes it clear that you're not going to do any more writing to the file and are completely done with it before the reader starts reading, so you won't be doing interleaved reads and writes. I think that's the only way to be sure you always get a complete and consistent data transfer with plain files (otherwise the reader might do a buffered read ahead of the writer and get a premature EOF). The way we're using it here, `flush` could work too because we never actually do another write to that filehandle. But using `close` ensures we stick with that safe behavior.\r\n\r\nMaybe that's not the most idiomatic Ruby way, though.",
		"created_at" : "2016-06-29T16:24:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 418
	},
	{
		"id" : 68990122,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think the only concern with `IO#flush` is that this doesn't guarantee the data is written to disk. That's what `IO#fsync` is for. But despite the buffering by the OS, the OS should be offering the same consistent view of the file if any process-specific buffers have been flushed.\r\n\r\nBut that's just for context and my understanding of these methods. It makes a lot of sense to close the file as soon as we're done writing to it, and I'd leave it as-is. I'm not sure either what the most idiomatic Ruby code is to do what is done here, but the change seems fine to me.",
		"created_at" : "2016-06-29T17:25:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 418
	},
	{
		"id" : 68998185,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`ENV[\"TRAVIS\"].inspect` instead of `ENV[\"TRAVIS\"] || \"nil\"`?",
		"created_at" : "2016-06-29T18:09:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 419
	},
	{
		"id" : 68998855,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Definitely Ruby 1.8 compatibility. That's the reason why we actively enforce the style without comma [in our RuboCop configuration](https://github.com/Homebrew/brew/blob/db76a0f4cc3838658919570b3453edbcb9ed2fcd/Library/.rubocop.yml#L133-L134), though there's no comment to that end (unlike for many other style rules).",
		"created_at" : "2016-06-29T18:13:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 419
	},
	{
		"id" : 69030502,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "👍 ",
		"created_at" : "2016-06-29T21:21:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 419
	},
	{
		"id" : 69011211,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Very tiny nit, but I'd like to see an empty line before this comment.",
		"created_at" : "2016-06-29T19:25:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 421
	},
	{
		"id" : 69011614,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Sure, why not.",
		"created_at" : "2016-06-29T19:28:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 421
	},
	{
		"id" : 69335998,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : ":+1: on the `Homebrew.failed`, but this line is definitely too long. Could you add methods `broken_dylibs?` and `undeclared_deps?` to `LinkageChecker` and let them handle the check?\r\n\r\nI also think that we should stop using `any?` as the inverse of `empty?`, because it is not equivalent to `!empty?`. (But that's a different discussion.)",
		"created_at" : "2016-07-01T18:04:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 424
	},
	{
		"id" : 69337187,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Updated. I also amend the PR with tweaking the logic of undeclared_deps to handle some edge cases.",
		"created_at" : "2016-07-01T18:13:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 424
	},
	{
		"id" : 69349792,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I wonder if we can centralize this logic somewhere. It feels like we're duplicating this, with small (and possibly undesirable) differences, in `brew deps`, `brew uses`, maybe some other places I'm not aware of, and now here.",
		"created_at" : "2016-07-01T20:08:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 424
	},
	{
		"id" : 69340416,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can we move this to `cmd/tests.rb` and hide it behind an `--offline` argument? I'm not too happy disabling this unconditionally and only for the integration tests (some other parts of the tests might exercise the GitHub API in the future) as I consider this to be a temporary measure until we have a better solution for offline testing.",
		"created_at" : "2016-07-01T18:40:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 430
	},
	{
		"id" : 69362985,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think no tests shouldn't require you to be online to pass but it's currently only integration tests that have this issue. I could instead add this to `brew tests` and apply it globally but I'd rather the flag be `--online` rather than `--offline` for that reason.",
		"created_at" : "2016-07-01T22:33:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 430
	},
	{
		"id" : 69363252,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Agreed; this makes more sense. I mainly wanted to avoid special casing the integration tests (even though they are currently the only ones that do require a network connection).\r\n\r\n:+1: on setting `HOMEBREW_NO_GITHUB_API` in `cmd/tests.rb` unless `--online` is passed (also better aligns with `brew audit` where we also use `--online`).",
		"created_at" : "2016-07-01T22:37:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 430
	},
	{
		"id" : 69342995,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I don't think we should be dropping anything from the output, no matter how popular the library is. (Yes, I realize that basically everything in OS X has to link to this particular library. That's actually not a bad thing, as this will effectively be a list of all Mach-O binaries in the keg.)",
		"created_at" : "2016-07-01T19:02:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 431
	},
	{
		"id" : 69343015,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think this should be indented by two spaces (or alternatively the “Links to:” line completely dropped). Right now the indentation of the output looks just off.",
		"created_at" : "2016-07-01T19:02:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 431
	},
	{
		"id" : 69343264,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "I regard this is as a human-parseable diagnostic tool and having libSystem in the output interferes with that goal.\r\n\r\nI think a list of mach-o binaries could be implemented as `brew ls --mach-o` but I don't think that's what this should be.",
		"created_at" : "2016-07-01T19:04:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 431
	},
	{
		"id" : 69343391,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Use `f.strip_prefix(\"#{@keg}/\")`. (Notice also there's no need for the `.to_s` when using a variable with string interpolation.)",
		"created_at" : "2016-07-01T19:05:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 431
	},
	{
		"id" : 69343416,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Similarly to the previous comment, I think this needs to be indented by two more spaces if the “Links to:” header shall stay.",
		"created_at" : "2016-07-01T19:06:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 431
	},
	{
		"id" : 69343438,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Dropping it sounds good!",
		"created_at" : "2016-07-01T19:06:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 431
	},
	{
		"id" : 69343702,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm finding these empty lines annoying and the indentation is sufficient to see the individual parts of the output. (But that's just personal preference and I'm not feeling too strongly about this.)",
		"created_at" : "2016-07-01T19:07:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 431
	},
	{
		"id" : 69344464,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd find the omission surprising. Where is the line between dropping system dylibs and not dropping them from the output? And what's the bother with the extra output? All the binaries linking to it are in a separate indented part, so one can easily skip this entire block when scanning the output …",
		"created_at" : "2016-07-01T19:15:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 431
	},
	{
		"id" : 69367933,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Agree with @UniqMartin on this, personally.",
		"created_at" : "2016-07-02T00:00:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 431
	},
	{
		"id" : 69369964,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "I was looking at postgresql when I implemented this and it felt like just a whole page of executables to skip; I'm having trouble imagining caring that something is linking to libSystem but it seems y'all feel strongly so I can add it back.",
		"created_at" : "2016-07-02T01:02:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 431
	},
	{
		"id" : 69316345,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Might want to split the `dir =` out onto the previous line",
		"created_at" : "2016-07-01T15:26:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 432
	},
	{
		"id" : 69316385,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Could skip the `return` here.",
		"created_at" : "2016-07-01T15:26:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 432
	},
	{
		"id" : 69345536,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "That's a tiny detail, but I think since this and the line above reference `old_cellar_dir` in their condition, it would be more logical to group them with the `old_cellar_dir =` line than with the line below, i.e. that's how I would expect the empty lines to be distributed:\r\n\r\n```ruby\r\nreturn false unless oldname\r\nreturn false if rack.exist?\r\n\r\nold_cellar_dir = HOMEBREW_CELLAR/oldname\r\nreturn false unless old_cellar_dir.directory?\r\nreturn false if old_cellar_dir.subdirs.empty?\r\n\r\ntap == Tab.for_keg(old_cellar_dir.subdirs.first).tap\r\n```\r\n\r\nDoes that make sense?",
		"created_at" : "2016-07-01T19:25:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 432
	},
	{
		"id" : 69345668,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think you can rename `old_cellar_dir` to `old_rack` because that's what it is.",
		"created_at" : "2016-07-01T19:27:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 432
	},
	{
		"id" : 69351596,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I don't think the boldface is necessary here (it also has no effect on the header).",
		"created_at" : "2016-07-01T20:25:44Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69351944,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm sorry, but this just makes the section longer without actually adding value. There are also more than the listed three ways to find packages and the list isn't intended to be exhaustive (it's just a starting point for new users).\r\n\r\nHowever, I agree with most of the wording changes and the different order of the items. Note that it's “on the command line”, not “in”. (We can discuss other details once this section has been reverted to a numbered list without an introductory line.)",
		"created_at" : "2016-07-01T20:29:16Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69352183,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Again, “on the command line” instead of “in”. The “online” is really redundant as it should be pretty clear from the fact that this is rendered as a link (and seen by users that read this on GitHub).",
		"created_at" : "2016-07-01T20:31:21Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69353653,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm not sure we want to expand on this section. The longer we make it, the fewer people will actually read it. I think it's fine adding a “(twice)” to “please run `brew update`”, but otherwise I'd prefer to keep this section as-is. Everything else is already covered in the linked Troubleshooting Checklist.\r\n\r\nAlso, if a link to creating a new issue is the first thing people see in this section, they will most likely stop reading the additional instructions and just go ahead creating an issue. Sadly, people are often enough like that and the link just encourages this behavior.",
		"created_at" : "2016-07-01T20:45:03Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69353802,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I still believe we don't need the boldface in this line, too. It doesn't look as nice and that's not really something that needs to be emphasized …",
		"created_at" : "2016-07-01T20:46:18Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69353931,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "How about dropping “Alternatively, you can” and directly starting with “Visit”? Feels also more consistent with the other two items.",
		"created_at" : "2016-07-01T20:47:36Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69354339,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I don't think the address renders as it should, neither before your change nor now. Would you mind looking into how this can be improved? I think we could add some delimiter between what are individual lines here (in the Markdown) or we could change the markup so these actually render as individual lines in GitHub's rendering of the README.",
		"created_at" : "2016-07-01T20:51:57Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69354468,
		"user" : {
			"login" : "fdizile"
		},
		"body" : "I'll take a peak.",
		"created_at" : "2016-07-01T20:53:17Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69354477,
		"user" : {
			"login" : "fdizile"
		},
		"body" : "Will do.",
		"created_at" : "2016-07-01T20:53:22Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69354489,
		"user" : {
			"login" : "fdizile"
		},
		"body" : "To be removed.",
		"created_at" : "2016-07-01T20:53:31Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69354920,
		"user" : {
			"login" : "fdizile"
		},
		"body" : "Very true. Modifications imminent. ",
		"created_at" : "2016-07-01T20:57:37Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69355056,
		"user" : {
			"login" : "fdizile"
		},
		"body" : "Possible address display.",
		"created_at" : "2016-07-01T20:58:23Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69367820,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I'm a bit \"eh\" about the addition of \"on the command line\" here. _In this context_, I think the use of backtics is sufficiently clear enough, but I'm happy to bow to the change if people are actually getting confused here.",
		"created_at" : "2016-07-01T23:57:38Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69367879,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Let's soften this a bit, something like `please consider using our...`. I'd rather not put someone off reporting something they think is suspicious because they'd need to go read PGP documentation first.",
		"created_at" : "2016-07-01T23:59:02Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69397710,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Agreed to removing `on the command line`. I also don't think `of packages` adds information given the heading.",
		"created_at" : "2016-07-03T21:32:33Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69397718,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Don't think the two preceding line changes add any information.",
		"created_at" : "2016-07-03T21:33:22Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69397721,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Don't think this adds information.",
		"created_at" : "2016-07-03T21:33:33Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69397730,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd rather not add this at all, PGP isn't something even all the maintainers use.",
		"created_at" : "2016-07-03T21:34:16Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69796005,
		"user" : {
			"login" : "fdizile"
		},
		"body" : "I've asked a few friends who would say that the adding of \"on the command line\" would clear things up for them. Two of whom are experienced NodeJS developers and work extensively with Term. ",
		"created_at" : "2016-07-06T19:28:37Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69798658,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Where else would it be run? Genuinely curious.",
		"created_at" : "2016-07-06T19:44:26Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 435
	},
	{
		"id" : 69424446,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`Open3.popen3`in Ruby 1.8.7 unfortunately doesn't provide the fourth `status` block argument, thus things will fail further up the call chain.",
		"created_at" : "2016-07-04T08:30:54Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 441
	},
	{
		"id" : 69448872,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Suggestions for an API to use instead for Ruby 1.8.7?",
		"created_at" : "2016-07-04T12:11:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 441
	},
	{
		"id" : 69452457,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Unfortunately, I'm not aware of a somewhat elegant solution …\r\n\r\nWe could re-implement `Open3.popen3` adapting it from a more modern Ruby, as I believe all the building blocks exist, but this surely feels like a bad solution.",
		"created_at" : "2016-07-04T12:44:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 441
	},
	{
		"id" : 69454533,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "how much code is it",
		"created_at" : "2016-07-04T13:01:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 441
	},
	{
		"id" : 69457403,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "At most a few dozen. Mostly things like setting up pipes, then `fork` and `exec` with some massaging of the pipes depending on whether a block was given or not.",
		"created_at" : "2016-07-04T13:25:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 441
	},
	{
		"id" : 69481730,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yuck. Given the imminent Ruby 2 usage I might just figure out an interim solution.",
		"created_at" : "2016-07-04T17:33:22Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 441
	},
	{
		"id" : 69591071,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'd probably lean towards using the new code for Ruby 2.0+ and falling back to `Utils.popen_read_text` for older Rubies. That way most of our users will benefit from an improved error handling and we can rip out the legacy code path as soon as we enforce Ruby 2.0+. A very rough and untested sketch (that would also require some minor adjustments on the call site):\r\n\r\n```ruby\r\ndef curl_output(*args)\r\n  curl_args = curl_args(args) - [\"--fail\"]\r\n  if RUBY_VERSION.split(\".\").first.to_i >= 2\r\n    result = Open3.popen3(*curl_args) do |_, stdout, stderr, status|\r\n      [stdout.read, stderr.read, status]\r\n    end\r\n    result[0..1] + [result.last.success?]\r\n  else\r\n    output = Utils.popen_read_text(*curl_args)\r\n    [output, \"(Curl error message unavailable.)\", $?.success?]\r\n  end\r\nend\r\n```",
		"created_at" : "2016-07-05T16:06:56Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 441
	},
	{
		"id" : 70398894,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Done!",
		"created_at" : "2016-07-12T08:45:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 441
	},
	{
		"id" : 70411457,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : ":+1:",
		"created_at" : "2016-07-12T10:11:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 441
	},
	{
		"id" : 70414484,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Turns out, sometimes you have to check my suggestions. The fourth argument to the block is not actually a status but the associated wait thread, thus this part should be:\r\n\r\n```ruby\r\nOpen3.popen3(*curl_args) do |_, stdout, stderr, wait_thread|\r\n  [stdout.read, stderr.read, wait_thread.value]\r\nend\r\n```\r\n\r\nOtherwise you'll get this error (e.g. when the rate limit hits):\r\n\r\n```console\r\n$ brew search thing\r\nsyncthing                                                    syncthing-inotify\r\nError: undefined method `success?' for #<Thread:0x007fca8387d9f8 dead>\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/opt/brewery/tests/Library/Homebrew/utils/github.rb:163:in `open'\r\n/opt/brewery/tests/Library/Homebrew/cmd/search.rb:133:in `block in search_tap'\r\n/opt/brewery/tests/Library/Homebrew/cmd/search.rb:150:in `yield'\r\n/opt/brewery/tests/Library/Homebrew/cmd/search.rb:150:in `search_tap'\r\n/opt/brewery/tests/Library/Homebrew/cmd/search.rb:117:in `block (2 levels) in search_taps'\r\n```",
		"created_at" : "2016-07-12T10:33:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 441
	},
	{
		"id" : 70415548,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Cheers.",
		"created_at" : "2016-07-12T10:41:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 441
	},
	{
		"id" : 69443653,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd rather leave this as-is; it was really useful when debugging as otherwise if a particular `git fetch` is happening/taking a long time it's really hard to figure out which one. Reminder this is for `--verbose` only. If you'd rather we can make it only for `HOMEBREW_DEBUG` but I personally want/need this output for debugging.",
		"created_at" : "2016-07-04T11:18:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 442
	},
	{
		"id" : 69443777,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "All the previous variables in here aren't local so although a local variable might be nice I personally prefer consistency.",
		"created_at" : "2016-07-04T11:19:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 442
	},
	{
		"id" : 69449234,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "One day I'll remember the double `[`",
		"created_at" : "2016-07-04T12:15:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 442
	},
	{
		"id" : 69449483,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Sorry, but I'm not sure I can understand this argument. Shouldn't a variable always have the smallest possible scope that is necessary so that the code can do its job? Assuming this is something we could agree on, that scope should be reflected in the naming of the variable, where I believe we have agreed on all-caps for global and lower case for local variables. (There are some outliers, but I don't think that's a reason to be less consistent with new code.)",
		"created_at" : "2016-07-04T12:18:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 442
	},
	{
		"id" : 69450070,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I guess I'm just finding the following output not very useful, particularly since all the `echo` calls happen before the actual Git fetches, so this doesn't help understand the (due to parallelism) intermingled output of `git fetch`. But since I rarely use `--verbose` in combination with `brew update`, I don't feel strongly about removing this output.\r\n\r\n```console\r\n$ brew update --verbose\r\nFetching /opt/brewery/tests...\r\nFetching /opt/brewery/tests/Library/Taps/caskroom/homebrew-cask...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-aliases...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-apache...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-binary...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-boneyard...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-bundle...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-command-not-found...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-completions...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-core...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-dev-tools...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-devel-only...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-dupes...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-emacs...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-fuse...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-games...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-gui...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-head-only...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-nginx...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-php...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-python...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-science...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-services...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-tex...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-versions...\r\nFetching /opt/brewery/tests/Library/Taps/homebrew/homebrew-x11...\r\nFetching /opt/brewery/tests/Library/Taps/uniqmartin/homebrew-bento...\r\nFetching /opt/brewery/tests/Library/Taps/uniqmartin/homebrew-tools...\r\nFetching /opt/brewery/tests/Library/Taps/xu-cheng/homebrew-portable...\r\nremote: Counting objects: 5, done.\r\nremote: Total 5 (delta 4), reused 4 (delta 4), pack-reused 1\r\nUnpacking objects: 100% (5/5), done.\r\nFrom https://github.com/Homebrew/homebrew-tex\r\n   4f96da55..75885801  master     -> origin/master\r\nremote: Counting objects: 4, done.\r\nremote: Total 4 (delta 3), reused 3 (delta 3), pack-reused 1\r\nUnpacking objects: 100% (4/4), done.\r\nFrom https://github.com/Homebrew/homebrew-x11\r\n   e858b375..ed64be3a  master     -> origin/master\r\nremote: Counting objects: 4, done.\r\nremote: Compressing objects: 100% (4/4), done.\r\nremote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0\r\nUnpacking objects: 100% (4/4), done.\r\nFrom https://github.com/xu-cheng/homebrew-portable\r\n   2bdfb192..afa9fa33  master     -> origin/master\r\n * [new tag]           20160630   -> 20160630\r\nremote: Counting objects: 15, done.\r\nremote: Counting objects: 4, done.\r\nremote: Compressing objects: 100% (3/3), done.\r\nremote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0\r\nUnpacking objects: 100% (4/4), done.\r\nremote: Compressing objects: 100% (13/13), done.\r\nremote: Total 15 (delta 10), reused 7 (delta 2), pack-reused 0\r\nFrom https://github.com/Homebrew/brew\r\n   0926f920..310d7067  master     -> origin/master\r\nFrom https://github.com/Homebrew/homebrew-bundle\r\n   5db1322c..07ef740d  master     -> origin/master\r\nremote: Counting objects: 9, done.\r\nremote: Compressing objects: 100% (8/8), done.\r\nremote: Total 9 (delta 4), reused 1 (delta 1), pack-reused 0\r\nUnpacking objects: 100% (9/9), done.\r\nFrom https://github.com/Homebrew/homebrew-binary\r\n   36e0486f..d8129452  master     -> origin/master\r\nUnpacking objects: 100% (15/15), done.\r\nFrom https://github.com/Homebrew/homebrew-command-not-found\r\n   8617f442..7f2573d4  master     -> origin/master\r\nremote: Counting objects: 6, done.\r\nremote: Total 6 (delta 4), reused 4 (delta 4), pack-reused 2\r\nUnpacking objects: 100% (6/6), done.\r\nFrom https://github.com/Homebrew/homebrew-python\r\n   90621036..ed8d5c5b  master     -> origin/master\r\nremote: Counting objects: 24, done.\r\nremote: Compressing objects: 100% (21/21), done.\r\nremote: Total 24 (delta 11), reused 3 (delta 3), pack-reused 0\r\nremote: Counting objects: 36, done.\r\nremote: Compressing objects: 100% (20/20), done.\r\nremote: Total 36 (delta 23), reused 29 (delta 16), pack-reused 0\r\nUnpacking objects: 100% (24/24), done.\r\nUnpacking objects: 100% (36/36), done.\r\nFrom https://github.com/Homebrew/homebrew-emacs\r\n   b7f01ada..2287b7c8  master     -> origin/master\r\nFrom https://github.com/Homebrew/homebrew-games\r\n   e535cffc..fdcbcceb  master     -> origin/master\r\nremote: Counting objects: 22, done.\r\nremote: Total 22 (delta 19), reused 19 (delta 19), pack-reused 3\r\nUnpacking objects: 100% (22/22), done.\r\nFrom https://github.com/Homebrew/homebrew-dupes\r\n   b8bc2dc5..3ee82285  master     -> origin/master\r\nremote: Counting objects: 53, done.\r\nremote: Compressing objects: 100% (19/19), done.\r\nremote: Total 53 (delta 26), reused 18 (delta 18), pack-reused 16\r\nUnpacking objects: 100% (53/53), done.\r\nFrom https://github.com/Homebrew/homebrew-versions\r\n   a8b2acfe..f8c59174  master     -> origin/master\r\nremote: Counting objects: 60, done.\r\nremote: Total 60 (delta 46), reused 46 (delta 46), pack-reused 14\r\nUnpacking objects: 100% (60/60), done.\r\nremote: Counting objects: 96, done.\r\nremote: Compressing objects: 100% (13/13), done.\r\nremote: Total 96 (delta 37), reused 32 (delta 32), pack-reused 51\r\nUnpacking objects: 100% (96/96), done.\r\nFrom https://github.com/Homebrew/homebrew-php\r\n   8be4a9e6..d768beb9  master     -> origin/master\r\nremote: Counting objects: 1231, done.\r\nremote: Compressing objects: 100% (34/34), done.\r\nFrom https://github.com/Homebrew/homebrew-science\r\n   c22e05e9..6ce62c0d  master     -> origin/master\r\nremote: Total 1231 (delta 703), reused 684 (delta 684), pack-reused 513\r\nReceiving objects: 100% (1231/1231), 1.12 MiB | 782.00 KiB/s, done.\r\nResolving deltas: 100% (916/916), completed with 238 local objects.\r\nFrom https://github.com/Homebrew/homebrew-core\r\n   14be2111..0a598ccc  master     -> origin/master\r\nremote: Counting objects: 369, done.\r\nremote: Compressing objects: 100% (5/5), done.\r\nremote: Total 369 (delta 214), reused 214 (delta 214), pack-reused 150\r\nReceiving objects: 100% (369/369), 138.00 KiB | 0 bytes/s, done.\r\nResolving deltas: 100% (246/246), completed with 74 local objects.\r\nFrom https://github.com/Caskroom/homebrew-cask\r\n   98f70727..c7fbf76e  master     -> origin/master\r\n```",
		"created_at" : "2016-07-04T12:23:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 442
	},
	{
		"id" : 69443920,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I thought it did render more nicely than that case as it's not truncated and the first argument (the typical case) is displayed on the same line.",
		"created_at" : "2016-07-04T11:20:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 444
	},
	{
		"id" : 69447548,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Aesthetically, the changing indentation and that only the first line is prefixed with “Editing” for the atypical case is bothering me more, even if the common case becomes nicer and shorter.\r\n\r\nBut to be honest, I'll probably be slightly annoyed by this output anyway, no matter how it is styled, because I basically never want to know where the formula I'm editing is and when I do, my editor can tell me quickly and efficiently. But I'll certainly manage as I guess this is a minority opinion.",
		"created_at" : "2016-07-04T11:57:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 444
	},
	{
		"id" : 69470543,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It's not actually missing at this point. Looks like this should have been part of #455 instead.",
		"created_at" : "2016-07-04T15:13:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 448
	},
	{
		"id" : 69471812,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This file seems to be missing a trailing `require \"extend/os/emoji\"`.",
		"created_at" : "2016-07-04T15:24:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 450
	},
	{
		"id" : 69472238,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I wonder whether this line better be put in `extend/os/mac/emoji.rb`. The “alias previous implementation and then immediately override” pattern seems to be more prevalent in the Ruby code that I've come across.",
		"created_at" : "2016-07-04T15:28:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 450
	},
	{
		"id" : 69472440,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Would you mind swapping the `else` and `elsif` bodies to avoid the negation in this condition?",
		"created_at" : "2016-07-04T15:30:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 450
	},
	{
		"id" : 69472481,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Would you mind swapping the `else` and `elsif` bodies to avoid the negation in this condition?",
		"created_at" : "2016-07-04T15:30:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 450
	},
	{
		"id" : 70019284,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "To be honest, I think minimal diffs has already fallen on its sword when it comes to refactoring as major as this 🙈.",
		"created_at" : "2016-07-08T02:45:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 450
	},
	{
		"id" : 70383481,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Could you change this and all other `alias` instances to use `alias_method` instead, as we've done in the past and is now codified in our RuboCop configuration as of #489?",
		"created_at" : "2016-07-12T06:31:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 456
	},
	{
		"id" : 70384102,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "And the test now disclosed, what I had also missed, namely that this should have been `extend/ENV/std`. Which naturally raises the question how logical our hierarchy is or whether this file should be named `extend/os/extend/ENV/std.rb` instead of `extend/os/ENV/std.rb`.",
		"created_at" : "2016-07-12T06:37:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 456
	},
	{
		"id" : 70385803,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "🆗, didn't see our Rubocop change.",
		"created_at" : "2016-07-12T06:57:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 456
	},
	{
		"id" : 70386642,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I only merged it a few moments ago, but you :+1:ed it. :wink:",
		"created_at" : "2016-07-12T07:06:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 456
	},
	{
		"id" : 70167098,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> A bit unfair considering this is the same logic as before without the `.reject`.\r\n\r\nNot unfair at all! It actually discloses a bug in the refactoring (and my `HOMEBREW_ENV_PATH/\"scm\"` suggestion was also bogus). With the `.reject` and the comparison:\r\n\r\n- It's clearer what is being picked here and what is the criterion.\r\n- It actually rejects all non-version directories like `pkgconfig` and `scm`.\r\n\r\nHence the correct refactoring of this for a generic OS would be to always return `nil`.",
		"created_at" : "2016-07-09T13:28:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 457
	},
	{
		"id" : 70167133,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I find this massively confusing, also when compared to what `x11` means in `stdenv`. But oh well, I guess legacy …",
		"created_at" : "2016-07-09T13:33:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 457
	},
	{
		"id" : 70384769,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Now that's a good question and one I've been completely overlooking! I don't have a good answer, but I guess the directory currently picked here (namely `scm`) an that only contains wrappers for `git` and `svn` doesn't make for a good platform-agnostic `superenv` either.\r\n\r\nAnd given that all our true `superenv` directories are symlinks to a single directory, that further raises the question (though that's not exactly a topic for this PR), whether we need this complicated selection logic at all. I guess not. (Unless the wrapper scripts take that directory into account somehow, but a cursory search didn't reveal anything.)",
		"created_at" : "2016-07-12T06:45:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 457
	},
	{
		"id" : 70385061,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Fixing this revealed that this line itself should have been `require \"extend/ENV/super\"` which raises the question how logical the proposed directory structure is, or to be more specific, how logical it is that the platform-specific wrapper omits the `extend/` prefix. (I'm thinking here that `<path>` should always translate to `extend/os/<path>` and `extend/os/mac/<path>`.)",
		"created_at" : "2016-07-12T06:49:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 457
	},
	{
		"id" : 70385882,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yeh, `extend/os/extend` felt weird but happy to use that if it makes more sense to you.",
		"created_at" : "2016-07-12T06:58:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 457
	},
	{
		"id" : 70386001,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I agree. I think the theory was we might require different files for different versions but this was never needed. A refactoring of this feels like a good idea.",
		"created_at" : "2016-07-12T07:00:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 457
	},
	{
		"id" : 70386930,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I agree that `extend/os/extend` feels weird. But I think this is trumped by a more mechanical mapping where it is guaranteed that the platform-specific bits of `<path>` always live in `extend/os/<path>` (the dispatcher) and `extend/os/<platform>/<path>` (the implementation).",
		"created_at" : "2016-07-12T07:10:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 457
	},
	{
		"id" : 70178350,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Would be good to have comparisons between different HEAD versions here too.",
		"created_at" : "2016-07-10T08:51:07Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70179435,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "@MikeMcQuaid  :+1: Thanks, helped me to notice that I've forgotten to rewrite `Version` comparator a little, but have been relying on the behaviour when the comparator is rewritten. It doesn't change anything too much if it all worked without that comparator, but anyway.\r\n\r\nI suppose that `HEAD` version equals to any other `HEAD` version. If we want to get latest `HEAD` prefix, we can do it on keg level, like I do that in [`Formula#latest_head_prefix`.](https://github.com/Homebrew/brew/pull/478/files#diff-b4a6fcb9de3a9163fd8cdac432ad8270R417)",
		"created_at" : "2016-07-10T10:26:05Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70179849,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> I suppose that HEAD version equals to any other HEAD version. If we want to get latest HEAD prefix, we can do it on keg level, like I do that in Formula#latest_head_prefix.\r\n\r\nI think we should consider making the version comparison take into account `latest_head_prefix` (if it doesn't already) so that we can e.g. `brew upgrade` between HEAD versions. It might also not be a bad idea to mandate a `version` if e.g. `git describe --tags` doesn't return anything so we can compare between HEAD versions and normal versions (but obviously that doesn't need to be part of this PR).",
		"created_at" : "2016-07-10T10:56:48Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70181426,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "The idea with `HEAD` versions is that if there is some upstream version that differs from one of installed `HEAD`s, then all of installed `HEAD`s are outdated. So we can compare `HEAD`-versions, but not using `HeadVersion#<=>` because to compare `HEAD`-versions inside `HeadVersion` we need more than just their versions strings, we need add `downloader` or `formula` to `HeadVersion`. \r\n\r\n> It might also not be a bad idea to mandate a version if e.g. git describe --tags doesn't return anything so we can compare between HEAD versions and normal versions (but obviously that doesn't need to be part of this PR).\r\n\r\nIn the original PR there is some logic added to the `Tab` which can allow us to compare `HEAD` versions with normal versions: tabs store latest `stable` and `devel` versions at the moment the keg is installed, so if `HEAD` keg's  `stable` is less than current stable version, then `HEAD`-keg is outdated.",
		"created_at" : "2016-07-10T12:50:11Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70181535,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> The idea with HEAD versions is that if there is some upstream version that differs from one of installed HEADs, then all of installed HEADs are outdated.\r\n\r\nCool 👍 \r\n\r\n\r\n\r\n> In the original PR there is some logic added to the Tab which can allow us to compare HEAD versions with normal versions: tabs store latest stable and devel versions at the moment the keg is installed, so if HEAD keg's stable is less than current stable version, then HEAD-keg is outdated.\r\n\r\n👍 ",
		"created_at" : "2016-07-10T12:58:44Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70186432,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You can use `max_by { … }` instead of `sort_by { … }.last` if you're not actually interested in the sorted array. (Sorting the array just to discard it afterwards is more expensive and makes the purpose of the code less obvious.)",
		"created_at" : "2016-07-10T18:31:49Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70186519,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Two remarks:\r\n\r\n1. You can drop the intermediate `Keg.new` as `Tab.for_keg` also directly operates on `Pathname` instances. (This will also skip checks in `Keg.new`, but they shouldn't be necessary here.)\r\n\r\n2. Please use `pn` instead of `p` when enumerating `Pathname` instances (here and in the code above). I'm not sure we've been consistent with this in the existing code, but `pn` makes it a bit clearer that it's a `Pathname` object.",
		"created_at" : "2016-07-10T18:37:18Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70186599,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think this can be made a little bit more readable with additional early returns like this:\r\n\r\n```ruby\r\ndef update_head_version\r\n  return unless head?\r\n\r\n  downloader = head.get_resource.downloader\r\n  return unless downloader.is_a?(VCSDownloadStrategy)\r\n  return unless downloader.cached_location.exist?\r\n\r\n  head.get_resource.version.update_commit(downloader.last_commit)\r\nend\r\n```",
		"created_at" : "2016-07-10T18:43:12Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70186742,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Attribute readers in Ruby don't normally have a `get_` prefix. Is there any reason we cannot name this `resource` and replace the entire method with a simple `attr_reader :resource`.",
		"created_at" : "2016-07-10T18:55:07Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70186814,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This is purely a style issue, but here's a suggestion that is easier to read in my opinion:\r\n\r\n```ruby\r\ndef self.create(val)\r\n  unless val.respond_to?(:to_str)\r\n    raise TypeError, \"Version value must be a string; got a #{val.class} (#{val})\"\r\n  end\r\n\r\n  if val.start_with?(\"HEAD\")\r\n    HeadVersion.new(val)\r\n  else\r\n    Version.new(val)\r\n  end\r\nend\r\n```\r\n\r\nAn even more radical version would be to replace the final `if` statement with (but I'm not sure this is considered good style and would only adopt it if other maintainers agree):\r\n\r\n```ruby\r\nklass = val.start_with?(\"HEAD\") ? HeadVersion : Version\r\nklass.new(val)\r\n```",
		"created_at" : "2016-07-10T19:02:51Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70186842,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Regular expressions are greedy by default, thus I can't think of a situation where this wouldn't already do the right thing. Nonetheless I'd prefer to be more explicit: `/^HEAD-(.+)$/`.",
		"created_at" : "2016-07-10T19:06:39Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70186846,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This is purely a style issue, but here's a suggestion that is easier to read in my opinion (similarly to another such comment I made earlier):\r\n\r\n```ruby\r\ndef initialize(val)\r\n  unless val.respond_to?(:to_str)\r\n    raise TypeError, \"Version value must be a string; got a #{val.class} (#{val})\"\r\n  end\r\n\r\n  @version = val.to_str\r\n  @commit = @version[/HEAD-(.+)/, 1]\r\nend\r\n```",
		"created_at" : "2016-07-10T19:07:06Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70186866,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can we avoid adding this method and instead modify the `version` method directly above to use `Version.create`?",
		"created_at" : "2016-07-10T19:09:01Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70187040,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "These new cases look like they should be using `Version.create`, not `Version.new`. Or am I misunderstanding the purpose of this test?",
		"created_at" : "2016-07-10T19:22:39Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70187141,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "Absolutely! Thanks!",
		"created_at" : "2016-07-10T19:30:46Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70187151,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "`HeadVersion.new` is also OK though.",
		"created_at" : "2016-07-10T19:31:41Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70187306,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Yes, it is. But see my other code comments and my non-code comment https://github.com/Homebrew/brew/pull/478#issuecomment-231606435 below (in case you agree with that) for where I'm coming from and why I'm suggesting `Version.create`.",
		"created_at" : "2016-07-10T19:46:25Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70221383,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "Yes, there is a reason for that. `SoftwareSpec#resourse` already exists.\r\nhttps://github.com/Homebrew/brew/blob/master/Library/Homebrew/software_spec.rb#L99-L108",
		"created_at" : "2016-07-11T08:49:36Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70222701,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "I've grepped where I use `get_resource`, it seems I don't need it at all anymore. Maybe at the first place there was more sense in it, but now I don't need to get `resource`, all I need is `downloader` and `version` and I can get them using delegators already defined in `SoftwareSpec`.\r\n\r\n```ruby\r\n  def_delegators :@resource, :version, :mirror, *Checksum::TYPES\r\n  def_delegators :@resource, :downloader\r\n```",
		"created_at" : "2016-07-11T08:59:22Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70355894,
		"user" : {
			"login" : "dunn"
		},
		"body" : "Since `HeadVersion.new` is only used by `Version.create`, which already does the type-checking, is this needed?",
		"created_at" : "2016-07-11T23:32:56Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70379164,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "I'm not sure. It seems that it's not needed, but it ensures that if someone calls `HeadVersion.new`, it'll fail if `val` doesn't respond to `to_str`.\r\n\r\nHow about this?\r\n```ruby\r\ndef initialize(val)\r\n  super\r\n  @commit = @version[/^HEAD-(.+)$/, 1]\r\nend\r\n```\r\n\r\nAlso we can add  `private_class_method :new` to `HeadVersion` and don't do the `to_str` check, but again, I'm not sure this is a good idea.\r\n",
		"created_at" : "2016-07-12T05:34:34Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70443335,
		"user" : {
			"login" : "dunn"
		},
		"body" : ">  it ensures that if someone calls HeadVersion.new, it'll fail if val doesn't respond to to_str.\r\n\r\nGood point.\r\n\r\nIf you think it's a better idea to leave it as-is, that's fine.",
		"created_at" : "2016-07-12T13:59:18Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70535339,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Sorry for the noise! I completely overlooked the existing `resource` method, but given how widely used it is, my comment feels a bit silly in retrospect. Thanks for checking nonetheless and if we don't need it anymore, that's even better.\r\n\r\nHowever, should we find out we still need it, I think it could be called `url_resource` or something similar (to make it clear that it is not some random resource but the one associated with the primary `url` statement of the formula).",
		"created_at" : "2016-07-12T22:37:49Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70536196,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "> Thanks for checking nonetheless and if we don't need it anymore, that's even better.\r\n\r\nInitially I wanted to call it `resource`, but eventually I couldn't. :)",
		"created_at" : "2016-07-12T22:44:10Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70537662,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Using the base class initializer is of course a good thing. :+1: I'm not overly bothered with the duplicate check, but I think we could fairly safely remove it in the constructors, as we no longer expect to call `[Head]Version.new` directly.",
		"created_at" : "2016-07-12T22:56:15Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 71061844,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "We probably need to check revision as well, like:\r\n```ruby\r\npn_pkgversion = PkgVersion.parse(pn.basename)\r\npn_pkgversion.head? && pn_pkgversion.revision == revision",
		"created_at" : "2016-07-16T06:17:29Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 71063077,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "As far as I understood it helps us to detect if `HEAD` is outdated, so we don't use it's prefix in `installed_prefix` if `head?`.\r\nIs it true that once revision is assigned to a formula it cannot decrease or be removed even if new version is bumped?",
		"created_at" : "2016-07-16T08:21:55Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 71063256,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "The revision will be reset to zero once there is a stable version bump.\r\n\r\nMy previous thought is that if there is a revision bump during same stable version, we may have multi HEAD installations with the same source_modified_time. Therefore, we need to check revision number. Considering we will have check `head_prefix_up_to_date?`, I think we should be fine even the revision is reset to zero after stable version bump.\r\n\r\nTo make this method more readable, how about:\r\n```ruby\r\ndef latest_head_prefix\r\n  head_vesrions = {}\r\n  installed_prefxies.each do |pn|\r\n    pn_pkgversion = PkgVersion.parse(pn.basename)\r\n    next unless pn_pkgversion.head?\r\n    head_versions[pn_pkgversion] = Tab.for_keg(pn).source_modified_time\r\n  end\r\n\r\n  latest_source_modified_time = head_versions.values.max\r\n  latest_head_version = head_versions.detect do |v, t|\r\n    v.revision == revision && t == latest_source_modfied_time \r\n  end\r\n  prefix(latest_head_version.first) if latest_head_version\r\nend\r\n```",
		"created_at" : "2016-07-16T08:41:25Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 71063933,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "I finally got it. Yes, it seems to work. Please, correct me if I'm wrong: `head_prefix_up_to_date?(prefix)` for this logic is called in two cases: \r\n\r\n1. When it definitely returns false (revision haven't been skipped since that prefix had been installed, which implies that stable haven't been changed) \r\n2. When we skip revision to `0` and it increments until it's the same as `prefix` has. When revisions are the same, `head_prefix_up_to_date` can be called, but it'll return false.\r\n",
		"created_at" : "2016-07-16T09:46:51Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 71064063,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "@xu-cheng but we'll need different cleanup behaviour if we apply described above logic, because we don't know the reason why `latest_head_prefix` returns `nil` and whether it's because no head prefixes exist or it's because all of them are outdated. So we need either to check if there is at least one `HEAD` installed or make `latest_head_prefix` behave like this:\r\n\r\n```ruby\r\ndef latest_head_prefix\r\n  head_vesrions = Hash.new { |hash, key| hash[key] = [] }\r\n  installed_prefxies.each do |pn|\r\n    pn_pkgversion = PkgVersion.parse(pn.basename)\r\n    next unless pn_pkgversion.head?\r\n    head_versions[Tab.for_keg(pn).source_modified_time] << pn_pkgversion\r\n  end\r\n\r\n  latest_source_modified_time = head_versions.keys.max\r\n  latest_head_version = head_versions[latest_source_modified_time].max_by do |pkg_version|\r\n    pkg_version.revision\r\n  end\r\n  prefix(latest_head_version) if latest_head_version\r\nend\r\n```",
		"created_at" : "2016-07-16T10:01:30Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 71064173,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "How about:\r\n```ruby\r\ndef latest_head_prefix\r\n  head_versions = installed_prefixes.map do |pn|\r\n    pn_pkgversion = PkgVersion.parse(pn.basename)\r\n    pn_pkgversion if pn_pkgversion.head?\r\n  end.compact\r\n\r\n  latest_head_version = head_versions.max_by do | pn_pkgversion|\r\n    [Tab.for_keg(prefix(pn_pkgversion)).source_modified_time, pn_pkgversion.revision]\r\n  end\r\n  prefix(latest_head_version) if latest_head_version\r\nend\r\n```",
		"created_at" : "2016-07-16T10:13:13Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 71064196,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Or, we may consider to split it into two methods: `latest_head_version` and `latest_head_prefix`. Because we still need to check revision number inside `head_version_up_to_date?`",
		"created_at" : "2016-07-16T10:16:17Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 71064204,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "Then, for cleanup we can make this:\r\n\r\n```ruby\r\neligible_kegs = if head? && (head_prefix = latest_head_prefix)\r\n  if head_prefix_up_to_date?(head_prefx)\r\n    installed_kegs - [Keg.new(head_prefix)]\r\n  else\r\n    installed_kegs\r\n  end\r\nelse\r\n  installed_kegs.select { |k| pkg_version > k.version }\r\nend\r\n```",
		"created_at" : "2016-07-16T10:17:10Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 71064235,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I don't think you need to check `head_prefix_up_to_date` inside `eligible_kegs`. Noted, if `head_prefix_up_to_date` returns false, `installed?`(one line above `eligible_kegs =`) will return false as well.",
		"created_at" : "2016-07-16T10:19:54Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 71064339,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "FYI, we can ignore `head_prefix_up_to_date` for now in this PR.  It should be part of #274, after we merge this PR.",
		"created_at" : "2016-07-16T10:27:51Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 71064412,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "I also noticed this. I think we need to add \"Tab stores stable/devel/HEAD\" logic to this PR, because it's getting difficult to keep in mind both this branch and the other PR(#274) branch in mind. We began to discuss `head_prefix_up_to_date?` here and there is no such method at all on this branch. Or we should carefully think what we merge in this PR, which seems to be more difficult.",
		"created_at" : "2016-07-16T10:36:28Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 71064525,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think for this PR, we just assume head prefix is always up to dated(just like homebrew has always assumed before this PR). Therefore, you don't need to consider `head_prefix_up_to_date` at all in this PR. As result, brew install/reinstall/cleanup should work fine. The only thing missing is brew upgrade, which should be targeted in the other PR. ",
		"created_at" : "2016-07-16T10:48:30Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 478
	},
	{
		"id" : 70169905,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I was so hoping for the first nested heredoc. :wink:\r\n\r\nBut in all seriousness, you might want to add a `return 0;` to that `main` function, as some older versions of Clang tend to produce code that generates a random exit code otherwise. (Which will be annoying if we decide to use this formula/binary to test `brew test`.)",
		"created_at" : "2016-07-09T17:38:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 479
	},
	{
		"id" : 70169913,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Should this be `ENV.cc` instead of `\"clang\"`?",
		"created_at" : "2016-07-09T17:39:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 479
	},
	{
		"id" : 70169931,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Or at least \"cc\" for better cross-platform support?",
		"created_at" : "2016-07-09T17:41:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 479
	},
	{
		"id" : 70173441,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "There's a very subtle problem with these two lines. If formulae happen to be moved within a tap *and* a formula gets renamed before or afterwards (thus `src_full_name != dst_full_name`) and the update covers both operations, then the report will look something like this (I experimented a bit with my local copy of the `homebrew/gui` tap):\r\n\r\n```\r\nUpdated 1 tap (homebrew/gui).\r\n==> New Formulae\r\nhomebrew/gui/xchat2\r\n```\r\n\r\nBut it should have looked something like this:\r\n\r\n```\r\nUpdated 1 tap (homebrew/gui).\r\n==> Renamed Formulae\r\nhomebrew/gui/xchat -> homebrew/gui/xchat2\r\n```\r\n\r\nThe reason is that `if tap.formula_file?(src)` will always be `false` as it checks against the current `Tap#formula_dir`. It's admittedly a rare corner case, but this should solve it:\r\n\r\n```ruby\r\nif tap.formula_file?(dst)\r\n  @report[:D] << src_full_name\r\n  @report[:A] << dst_full_name\r\nend\r\n```",
		"created_at" : "2016-07-09T23:16:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 480
	},
	{
		"id" : 70175035,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Nice catch! Fixed in f1a7eb6",
		"created_at" : "2016-07-10T02:37:07Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 480
	},
	{
		"id" : 70183411,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Thanks for finding an even more elegant solution and particularly for adding a nice test case! ",
		"created_at" : "2016-07-10T15:14:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 480
	},
	{
		"id" : 70183442,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I just realized this check can be dropped completely, as there's a check preceding the `case` statement that already makes sure that at least one of the modified paths is a formula file:\r\n\r\n```ruby\r\nnext unless paths.any? { |p| tap.formula_file?(p) }\r\n```",
		"created_at" : "2016-07-10T15:16:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 480
	},
	{
		"id" : 70188089,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Got it, removed in 7195878.",
		"created_at" : "2016-07-10T20:48:08Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 480
	},
	{
		"id" : 70178378,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's drop the probably; anyone who knows enough to disagree won't blindly follow the instruction.",
		"created_at" : "2016-07-10T08:52:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 481
	},
	{
		"id" : 70179174,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Do you want it dropped from the doctor output as well, or just here?",
		"created_at" : "2016-07-10T10:02:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 481
	},
	{
		"id" : 70179853,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "May as well do both 👍 ",
		"created_at" : "2016-07-10T10:56:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 481
	},
	{
		"id" : 70182637,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The tiniest nit, but there's a missing space between `$DIR` and `...` which sticks out because it is present in the other message you added.",
		"created_at" : "2016-07-10T14:22:01Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 486
	},
	{
		"id" : 70182800,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd probably rather remove the space in the other location if that's 🆒?",
		"created_at" : "2016-07-10T14:33:44Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 486
	},
	{
		"id" : 70183017,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm fine with either solution as long as it's consistent and I'm not 100% sure about typographical conventions about this in the English language. Still I'm a tiny bit bothered that the `...` could be misinterpreted to be a part of the directory (as silly as that might sound).",
		"created_at" : "2016-07-10T14:47:08Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 486
	},
	{
		"id" : 70183109,
		"user" : {
			"login" : "retokromer"
		},
		"body" : "Typographically `…` (not `...`) without space before. Yet…",
		"created_at" : "2016-07-10T14:51:39Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 486
	},
	{
		"id" : 70183308,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Sure, in normal text I always use “…” (it's even directly accessible from my keyboard layout). It looks kinda weird in output on the command line though (squeezed into a single column) and can be problematic in source code, where we tend to stick to ASCII-only.",
		"created_at" : "2016-07-10T15:07:08Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 486
	},
	{
		"id" : 70183862,
		"user" : {
			"login" : "retokromer"
		},
		"body" : "Personally, in \"ASCII art\" I would not use \"LaTeX quality\" and add a space before `...` in this case, in order to avoid the misinterpretation you pointed out.",
		"created_at" : "2016-07-10T15:41:25Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 486
	},
	{
		"id" : 70410341,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think you can omit this here and instead move the `echo` to the top of the `pull` function, before `Updating $DIR...` is output, which simplifies things a tiny bit and will also create a visual separation between the fetch phase and the rebase/merge phase.\r\n\r\nBut you could still add this line after the loop over all repositories in `homebrew-update` to create some visual separation between the rebase/merge phase and the output of `update-report`.",
		"created_at" : "2016-07-12T10:05:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 486
	},
	{
		"id" : 70412769,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Fetch doesn't echo every time; put it at the beginning of this line and you will sometimes see the first line of output as an empty line.",
		"created_at" : "2016-07-12T10:19:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 486
	},
	{
		"id" : 70417987,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "True. I didn't think about this case, probably because I'm running `brew update` at most every few hours, so there's essentially always something that needs to be fetched. Feel free to leave things as-is or eliminate this line of code completely, whichever you prefer.\r\n\r\nThe important change is that the output now contains some extra lines that announce what repository `brew update` is currently operating on and that's valuable information. A few missing or superfluous empty lines for readability won't detract from that.",
		"created_at" : "2016-07-12T11:01:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 486
	},
	{
		"id" : 70184059,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It's probably a non-issue (or an irrelevant corner case), as most in-formula requirements tend to provide their own `message` method, but if that wasn't the case, this would result in pretty ugly output like:\r\n\r\n```console\r\n$ brew install slimerjs\r\nslimerjs: Formulary::FormulaNamespace4237eb49a894bb8c7e324716724ef7cb::FirefoxRequirement unsatisfied!\r\n\r\nYou can install with Homebrew Cask:\r\n  brew cask install firefox\r\nError: An unsatisfied requirement failed this build.\r\n```",
		"created_at" : "2016-07-10T15:53:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 487
	},
	{
		"id" : 70184142,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Maybe even better as follows? (It feels much more readable to me, despite the two extra lines.)\r\n\r\n```ruby\r\n%w[\r\n  /Library/Extensions/tun.kext\r\n  /Library/Extensions/tap.kext\r\n  /Library/LaunchDaemons/net.sf.tuntaposx.tun.plist\r\n  /Library/LaunchDaemons/net.sf.tuntaposx.tap.plist\r\n].all? { |file| File.exist?(file) }\r\n```",
		"created_at" : "2016-07-10T15:56:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 487
	},
	{
		"id" : 70208097,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 will strip everything up to and including the `::`",
		"created_at" : "2016-07-11T06:44:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 487
	},
	{
		"id" : 70184635,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Feel free to ignore this, but I'm feeling like we shouldn't be using regular expressions where they aren't needed, even if that makes for slightly less uniform code. In this case I'd be advocating for `String#include?`. One issue is that it's easy to forget to escape some special characters in regular expressions (not the case here), another that (in theory) a simple substring search should be significantly cheaper.",
		"created_at" : "2016-07-10T16:27:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 488
	},
	{
		"id" : 70184729,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Use `!ARGV.homebrew_developer?` instead of directly querying `ENV`.",
		"created_at" : "2016-07-10T16:35:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 488
	},
	{
		"id" : 70184771,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Let's add some nesting to avoid repeating the condition (which makes the code less obvious in my opinion):\r\n\r\n```ruby\r\nif resources.empty?\r\n  if ARGV.homebrew_developer?\r\n    odie \"tried to stage empty Language::Go resources array\"\r\n  else\r\n    opoo \"tried to stage empty Language::Go resources array\"\r\n  end\r\nend\r\n```\r\n\r\nThis duplication makes me want to have a `opoo_for_mere_mortals_and_odie_for_developers` method (obviously with a better name than this). Maybe something like this (not available today), would make sense:\r\n\r\n```ruby\r\nopoo \"tried to stage empty Language::Go resources array\",\r\n     :fatal => ARGV.homebrew_developer?\r\n```",
		"created_at" : "2016-07-10T16:38:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 488
	},
	{
		"id" : 70184784,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Use `!ARGV.homebrew_developer?` instead of directly querying `ENV`.",
		"created_at" : "2016-07-10T16:39:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 488
	},
	{
		"id" : 70184798,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Heh, it's funny you mention this because we had almost the exact same discussion a fair while ago now. I'll hollowly echo my comments from then which were more or less that the idea sounds good but I'd prefer not to conflate that change with this PR. Less hollowly, I'm happy to push a fresh PR afterwards.",
		"created_at" : "2016-07-10T16:40:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 488
	},
	{
		"id" : 70184808,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I hate nested `if` arguments & find them a pain to visually parse quickly, so that was deliberately avoided, but I'm happy to adopt it if I'm in the minority there.",
		"created_at" : "2016-07-10T16:41:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 488
	},
	{
		"id" : 70184813,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Forgot that existed, to be honest 👍.",
		"created_at" : "2016-07-10T16:41:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 488
	},
	{
		"id" : 70184871,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I know. That's why I included parts like “even if that makes for slightly less uniform code”. But really, feel free to ignore this. I just felt the urge to waste some time and express my feelings (again). :wink:",
		"created_at" : "2016-07-10T16:46:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 488
	},
	{
		"id" : 70184915,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Well, I hate having to parse what is basically the same condition twice, If I could have parsed it only once and then skipped the whole block. 😛",
		"created_at" : "2016-07-10T16:49:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 488
	},
	{
		"id" : 70368229,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "It's 3am, so I could be in idiot mode. I probably am, to be fair. But `text.include?` is vomiting some errors for me in audit:\r\n```ruby\r\nif text.include?(\"def plist\") && !text.include?(\"plist_options\")\r\n  problem \"Please set plist_options when using a formula-defined plist.\"\r\nend\r\n```\r\n```\r\n~> brew audit a2ps\r\nError: undefined method `include?' for #<FormulaText:0x007ff6a21512d8>\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/usr/local/Library/Homebrew/cmd/audit.rb:682:in `audit_text'\r\n/usr/local/Library/Homebrew/cmd/audit.rb:1006:in `audit'\r\n/usr/local/Library/Homebrew/cmd/audit.rb:69:in `block in audit'\r\n/usr/local/Library/Homebrew/cmd/audit.rb:65:in `each'\r\n/usr/local/Library/Homebrew/cmd/audit.rb:65:in `audit'\r\n/usr/local/Library/brew.rb:87:in `<main>'\r\n```\r\n\r\nIt works outside of `audit` though if I drop into `brew irb`:\r\n```ruby\r\ntext = \"blob\"\r\ntext.include?(\"blob\") && !text.include?(\"blos\")\r\n=> true\r\n```\r\n\r\nIn which way am I missing something obvious here?",
		"created_at" : "2016-07-12T02:14:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 488
	},
	{
		"id" : 70381685,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Well, `text` is not a `String` instance (like in your `irb` example), but a `FormulaText` instance as you can learn from the backtrace. Unfortunately, the latter doesn't exactly behave like a plain string (though it implements `=~` and thus gives a good first impression), so my suggestion to use `include?` is somewhat moot …",
		"created_at" : "2016-07-12T06:07:32Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 488
	},
	{
		"id" : 70208536,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Maybe put all these last in the file?",
		"created_at" : "2016-07-11T06:50:56Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 489
	},
	{
		"id" : 70211331,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I don't have a strong preference. It felt nice to “reuse” this comment and to keep it at the top as a constant reminder for every reader of this file that we're still stuck with Ruby 1.8 (until this is no longer the case).",
		"created_at" : "2016-07-11T07:23:04Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 489
	},
	{
		"id" : 70211513,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sorry, I see now it's right at the top. Seems fine 👍 ",
		"created_at" : "2016-07-11T07:24:54Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 489
	},
	{
		"id" : 70387404,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Drop the capital `W`",
		"created_at" : "2016-07-12T07:15:13Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 495
	},
	{
		"id" : 70387457,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Why the move? It's not liked you sorted things alphabetically. :wink:",
		"created_at" : "2016-07-12T07:15:49Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 495
	},
	{
		"id" : 70387832,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I wonder how many people not familiar with our implementation will be confused by this part of the sentence (and fail to recognized that `:ruby` and `RubyRequirement` are related).",
		"created_at" : "2016-07-12T07:19:48Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 495
	},
	{
		"id" : 70455712,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I wanted to blob the two bigger `EOS` elements together so we didn't have a short one, a bigger one, a short one, a bigger one, and so on. Anal, I'm aware 😄.",
		"created_at" : "2016-07-12T14:58:42Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 495
	},
	{
		"id" : 70455853,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "will do 👍 ",
		"created_at" : "2016-07-12T14:59:21Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 495
	},
	{
		"id" : 70456021,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Some, probably. I wasn't overly keen on including the explicit `RubyRequirement` mention but we've been doing so for `open-mpi` for a while & nobody's publicly gone _\"Huh?\"_.",
		"created_at" : "2016-07-12T15:00:05Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 495
	},
	{
		"id" : 70532375,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "And completely irrational, if you'd ask me. (Or just an argument that doesn't work given how my brain is wired.) :wink: But I can deal with that.",
		"created_at" : "2016-07-12T22:14:22Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 495
	},
	{
		"id" : 70532602,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I don't have a good alternative I can suggest. Just wanted to see if you had thought about this and maybe had a clever idea how to rephrase that. I guess we can easily deal with the few cases that will be confused by that, but most will probably get the idea.",
		"created_at" : "2016-07-12T22:16:15Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 495
	},
	{
		"id" : 70533520,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Hey, I've never claimed to be rational 😉.",
		"created_at" : "2016-07-12T22:22:44Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 495
	},
	{
		"id" : 70534020,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I can't wrap my head around an easy way to necessarily explain `:blah` consistently relates to special Requirement magic sadly. I'm not sure it's an easy concept to grasp if you're unfamiliar with Homebrew's codebase. We've seen enough examples of people doing things like:\r\n\r\n```ruby\r\ndepends_on \"ruby\" => \"1.8\"\r\n```\r\nBefore being corrected.",
		"created_at" : "2016-07-12T22:26:30Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 495
	},
	{
		"id" : 70704673,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Isn't this still indirectly modifying `@url` as `url` is referencing the same `String` instance? If so, this should be fixable by doing `url = @url.dup` or (probably better) by using `String#sub` here.",
		"created_at" : "2016-07-13T20:44:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 504
	},
	{
		"id" : 70749600,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "28861ac",
		"created_at" : "2016-07-14T05:16:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 504
	},
	{
		"id" : 70747921,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "(nit: is the line continuation on 657 necessary?)",
		"created_at" : "2016-07-14T04:45:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 505
	},
	{
		"id" : 70756579,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "You mean `\\` or the linebreak?",
		"created_at" : "2016-07-14T06:54:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 505
	},
	{
		"id" : 70756734,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "the `\\`",
		"created_at" : "2016-07-14T06:56:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 505
	},
	{
		"id" : 70762745,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It wasn't, cheers.",
		"created_at" : "2016-07-14T07:47:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 505
	},
	{
		"id" : 70761006,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Don't need to fix this now but I'd actually check for Linux and otherwise do just `Homebrew/homebrew-core` so we don't assume non-OS X == Linux.",
		"created_at" : "2016-07-14T07:34:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 510
	},
	{
		"id" : 70762171,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "c2ece46",
		"created_at" : "2016-07-14T07:42:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 510
	},
	{
		"id" : 70992594,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Should be able to do this without `awk`: CC @UniqMartin for Bash skills 😁 ",
		"created_at" : "2016-07-15T15:32:28Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 518
	},
	{
		"id" : 71055513,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can we move this check into a shell function? This would allow for early returns (avoiding an `ls` invocations who's output will never be used in the typical case) and local variables (avoiding additional global variables like `brew_file_ls_info`).\r\n\r\nFor performance reasons it would also be desirable to exchange the inner and outer check, i.e. first check if we've been invoked with a command that we prefer not to run as root, and only if that's the case, check whether we're root and `bin/brew` is owned by root.\r\n\r\nHere's a suggestion (untested), that also incorporates my desire to avoid parsing `ls` output:\r\n\r\n```sh\r\ncheck-run-command-as-root() {\r\n  case \"$HOMEBREW_COMMAND\" in\r\n    analytics|\\\r\n    create|\\\r\n    install|\\\r\n    link|\\\r\n    migrate|\\\r\n    pin|\\\r\n    postinstall|\\\r\n    reinstall|\\\r\n    switch|\\\r\n    tap-pin|\\\r\n    tap|\\\r\n    update|\\\r\n    upgrade|\\\r\n    vendor-install)\r\n      # Continue check as we prefer to not run these as root.\r\n      ;;\r\n    *)\r\n      return\r\n      ;;\r\n  esac\r\n\r\n  [[ \"$(id -u)\" = 0 ]] || return\r\n\r\n  # Assume BSD user space, but fall back to GNU if this fails.\r\n  local brew_file_uid\r\n  brew_file_uid=\"$(/usr/bin/stat -f%u \"$HOMEBREW_BREW_FILE\" 2>/dev/null)\"\r\n  : \"${brew_file_uid:=\"$(stat --format=%u \"$HOMEBREW_BREW_FILE\" 2>/dev/null)\"}\"\r\n  [[ \"$brew_file_uid\" != 0 ]] || return\r\n\r\n  odie <<EOS\r\nCowardly refusing to 'sudo brew $HOMEBREW_COMMAND'\r\nYou can use brew with sudo, but only if the brew executable is owned by root.\r\nHowever, this is both not recommended and completely unsupported so do so at\r\nyour own risk.\r\nEOS\r\n}\r\n\r\ncheck-run-command-as-root\r\n```",
		"created_at" : "2016-07-16T00:02:48Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 518
	},
	{
		"id" : 71068580,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Would you mind sorting the entries alphabetically like I did in my code snippet? The order currently makes no sense (to me) and this is making it harder to see whether a command is included in this list or not.",
		"created_at" : "2016-07-16T16:39:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 518
	},
	{
		"id" : 71068601,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm still not thrilled with parsing `ls` output, but if I'm the only one concerned about this, then I guess this is a concern that can be ignored.",
		"created_at" : "2016-07-16T16:40:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 518
	},
	{
		"id" : 71069754,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I keep to use `ls`. The reasons are:\r\n* It would mean shellout only once instead of twice.\r\n* It avoids surprised behaviors like a failed `stat` outputs something we thought it's success. ",
		"created_at" : "2016-07-16T18:15:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 518
	},
	{
		"id" : 71069929,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Thanks! I can see an argument for using `ls`. Hopefully few people are running `brew` as root (I never do) and even fewer with a `brew` command we don't want them to run as root, so this check will need to be performed fairly infrequently.\r\n\r\nI'm glad we were able to rearrange this, so this isn't shelling out every single time to `id`, even if the command being invoked doesn't care at all whether it is invoked as root or not.",
		"created_at" : "2016-07-16T18:28:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 518
	},
	{
		"id" : 71061824,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Need the `--online` check we talked about for this one.",
		"created_at" : "2016-07-16T06:15:25Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 525
	},
	{
		"id" : 71061825,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Need the `--online` check we talked about for this one.",
		"created_at" : "2016-07-16T06:15:33Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 525
	},
	{
		"id" : 71061828,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Need the `--online` check we talked about for this one.",
		"created_at" : "2016-07-16T06:15:53Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 525
	},
	{
		"id" : 71061832,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Might be worth having `test_pull_offline` and `test_pull` and add the `skip` to the latter.",
		"created_at" : "2016-07-16T06:16:21Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 525
	},
	{
		"id" : 71209124,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Cool. I split the tests and added `skip if ENV[\"HOMEBREW_NO_GITHUB_API\"]` to `test_pull`. Does that work? Also, should a `skip` be added to `test_search`?",
		"created_at" : "2016-07-18T19:08:02Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 525
	},
	{
		"id" : 71248146,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Last thing: `skip \"Needs online access\"` or similar just to provide a bit more information.",
		"created_at" : "2016-07-18T23:13:43Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 525
	},
	{
		"id" : 71249383,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Whoops, forgot about that. Sure thing. 👌 ",
		"created_at" : "2016-07-18T23:25:58Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 525
	},
	{
		"id" : 71069993,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm not sure the added ` File.exist?(name)` makes sense. Isn't `name` just the argument given via the command line, i.e. typically something like `ack`? What I'm trying to say, doesn't this simply check for a file of the same name in the current working directory? What was the original intention of adding this?",
		"created_at" : "2016-07-16T18:33:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 529
	},
	{
		"id" : 71070035,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Sorry, after re-reading the commit message I think I understand this better. But I think the check should be a bit stricter, e.g. something like:\r\n\r\n```ruby\r\n(File.file?(name) && name.end_with?(\".rb\"))\r\n```\r\n\r\nAnd could you please explain what issue this solves, as I'm still unsure about this?",
		"created_at" : "2016-07-16T18:38:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 529
	},
	{
		"id" : 71070039,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This is for loading formula from file path, e.g. `brew foo bar.rb`",
		"created_at" : "2016-07-16T18:38:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 529
	},
	{
		"id" : 71070101,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "The issue tried to solve is as following. You have a custom formula `foo.rb`. You should be able to do thing like `brew install/reinstall foo.rb`. And it should be loading the custom formula. \r\n\r\nYou are right we probably should check file ext. ",
		"created_at" : "2016-07-16T18:43:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 529
	},
	{
		"id" : 71070163,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Similar comment here about a bit stricter checking. I don't think it's helpful to accept arbitrary file names that might or might not exist in the current working directory. Maybe it's worth doing the check in a separate method named `formula_file?` as this check is already done in two different locations.\r\n\r\nFrom the comment above this: “not paths, bottle filenames”. – This doesn't seem to be the case, and apparently already for a long time. 😕",
		"created_at" : "2016-07-16T18:47:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 529
	},
	{
		"id" : 71070210,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Thanks for the explanation! It's going to be interesting (though very unlikely) once there's a file named `foo.rb` and a formula named `foo.rb` (perfectly legal formula name in file `foo.rb.rb`). I have no idea what this will resolve to in this case. 😀\r\n\r\n> You are right we probably should check file ext.\r\n\r\n:+1:",
		"created_at" : "2016-07-16T18:51:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 529
	},
	{
		"id" : 71070242,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Just for completeness' sake: Same comment about stricter check and maybe a `formula_file?` helper method to avoid duplicate and inconsistent checks.",
		"created_at" : "2016-07-16T18:53:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 529
	},
	{
		"id" : 71070247,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Actually, until this PR, `brew reinstall foo.rb` will complain that formula unfound. ",
		"created_at" : "2016-07-16T18:54:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 529
	},
	{
		"id" : 71071033,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can you extend the comment above this line to explain why `exitstatus` can be `nil`? I think that's non-obvious and thus worth documenting. Maybe something like “exitstatus can be nil if the RuboCop process crashes, e.g. due to problems with native Ruby extensions”?\r\n\r\nWhile you're here, can you also fix the capitalization of RuboCop (👈 that's how it should be spelled) in the message string?",
		"created_at" : "2016-07-16T19:59:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 532
	},
	{
		"id" : 71071415,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I would suggest `version.head? ? HeadVersion.new(\"HEAD\") : version`\r\n\r\nAs the commit of formula should have nothing to do with the version of resources. ",
		"created_at" : "2016-07-16T20:26:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 534
	},
	{
		"id" : 71071475,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think the `dup` is cleaner and safer, not to mention that we don't want to instantiate `HeadVersion` directly (only via `Version.create`), but that's just a detail.",
		"created_at" : "2016-07-16T20:31:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 534
	},
	{
		"id" : 71071494,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Is there any scenario where it does make sense that resources reference the same `Version` (or `HeadVersion`) instance as the formula itself and where changes to one of them should influence all the others? If not, I'm strongly in favor of `dup`.",
		"created_at" : "2016-07-16T20:32:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 534
	},
	{
		"id" : 71071554,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "My main thought is we should discard the commit of HEAD-commit from formula when passing to resources  \r\n\r\nWe could certainly add `dup` to non-head version as `... : version.dup`. ",
		"created_at" : "2016-07-16T20:36:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 534
	},
	{
		"id" : 71071580,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "Does the `version` store the commit at the moment we call `version.dup`?",
		"created_at" : "2016-07-16T20:39:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 534
	},
	{
		"id" : 71071591,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "That's why I think we should only call `dup` for non-Head version, which doesn't have commit. ",
		"created_at" : "2016-07-16T20:41:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 534
	},
	{
		"id" : 71071603,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Also FYI, the reason that we need discard commit is otherwise we will have to redownload sources every time we install formula. (Resource version will interfere the cache file name)",
		"created_at" : "2016-07-16T20:42:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 534
	},
	{
		"id" : 71071612,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I see, makes sense! So based on that, I think this is the best short-term fix:\r\n\r\n```ruby\r\nr.version ||= (version.head? ? Version.create(\"HEAD\") : version.dup)\r\n```",
		"created_at" : "2016-07-16T20:43:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 534
	},
	{
		"id" : 71071624,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "I mean what if we call `dup` on HEAD version, is there commit at the moment we `call` dup? So, `Version.create` and `version.dup` are almost the same things, however `Version.create` is easier to understand.",
		"created_at" : "2016-07-16T20:45:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 534
	},
	{
		"id" : 71071632,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "I see @UniqMartin :+1:'d your suggestion, so I'm fixing it that way.",
		"created_at" : "2016-07-16T20:45:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 534
	},
	{
		"id" : 71071670,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "> I see, makes sense! So based on that, I think this is the best short-term fix:\r\n> r.version ||= (version.head? ? Version.create(\"HEAD\") : version.dup)\r\n\r\nThe same as I committed before refreshing the webpage! 👍 ",
		"created_at" : "2016-07-16T20:49:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 534
	},
	{
		"id" : 71078726,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "do you mean `==`?",
		"created_at" : "2016-07-17T08:21:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 536
	},
	{
		"id" : 71078747,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "No, this checks whether `latest_head_pkg_version` is `nil` or not i.e. there is at least one  `HEAD` installed. I use `head_pkg_version` in the following line.",
		"created_at" : "2016-07-17T08:23:07Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 536
	},
	{
		"id" : 71078759,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This is definitely incorrect. You should never update head commit to the `latest_head_pkg_version` unconditionaly, because it's quite possible that current active version is not `latest_head_pkg_version`.",
		"created_at" : "2016-07-17T08:23:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 536
	},
	{
		"id" : 71078762,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "OK, in that case you should probably do the assignment on its own line.",
		"created_at" : "2016-07-17T08:24:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 536
	},
	{
		"id" : 71092845,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think this is a case where `unless` would improve readability, i.e.:\r\n\r\n```ruby\r\nnext false unless dep.optional? || dep.recommended?\r\n```",
		"created_at" : "2016-07-18T00:13:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 538
	},
	{
		"id" : 71084242,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "The markdown for `submit a pull request` is broken. Double `((` at the start should be a single one. Typo, I'd presume 🙈.",
		"created_at" : "2016-07-17T15:27:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 541
	},
	{
		"id" : 71086517,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Will sort it out 👍 Other thoughts @DomT4?",
		"created_at" : "2016-07-17T17:59:08Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 541
	},
	{
		"id" : 71089039,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "If I was being anal, and let's face it, that's my MO, the `Please` shouldn't be capitalised.",
		"created_at" : "2016-07-17T20:39:57Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 541
	},
	{
		"id" : 71089164,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Seems reasonable to me, and I think explicitly highlighting the desire to diversify our contributor base is a very welcome thing. I'm sure someone will take this as a slight against white men, but _insert eye rolling emoji here_ to that really.",
		"created_at" : "2016-07-17T20:47:26Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 541
	},
	{
		"id" : 71089278,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "> We can help take a partially working pull request and help you get it merged.\r\n\r\nIs a bit clunky. Perhaps:\r\n\r\n\"We can help build on a partially working pull request with the aim of getting it merged\"\r\n\r\nOr something?",
		"created_at" : "2016-07-17T20:52:20Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 541
	},
	{
		"id" : 71089351,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I'd maybe use `formulae` instead of `packages`, unless we're actually going for a whole rename there. Consistency is probably useful to new folk.",
		"created_at" : "2016-07-17T20:55:52Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 541
	},
	{
		"id" : 71089644,
		"user" : {
			"login" : "dunn"
		},
		"body" : "The 'women and PoC' construction is always a little awkward since it's not clear where women of color are included.  Maybe 'contributions from members of historically marginalized groups' but that's a bit wordy so idk.",
		"created_at" : "2016-07-17T21:11:32Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 541
	},
	{
		"id" : 71091018,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I have a similar remark about “Contribution guide”. I think it should be “Contribution Guide” (better aligns with the CoC) or “contribution guide”.",
		"created_at" : "2016-07-17T22:25:49Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 541
	},
	{
		"id" : 71091067,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Also feels awkward to me, given this in some way limits diversity to gender and color, despite there being a lot more axes in the diversity spectrum. Maybe something like “[…] and especially welcome contributions from people underrepresented in tech/IT”? Sadly, I don't have a better idea on how to improve the wording.",
		"created_at" : "2016-07-17T22:29:00Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 541
	},
	{
		"id" : 71251492,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Cool with either.",
		"created_at" : "2016-07-18T23:47:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 541
	},
	{
		"id" : 71251616,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "The previous wording here was suggested by a women PoC in case that counts for anything but I'm also up for wording it however.",
		"created_at" : "2016-07-18T23:48:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 541
	},
	{
		"id" : 71251645,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> Seems reasonable to me, and I think explicitly highlighting the desire to diversify our contributor base is a very welcome thing. I'm sure someone will take this as a slight against white men, but insert eye rolling emoji here to that really.\r\n\r\nIf it works as a reverse honeypot to make those people go away: 👏 ",
		"created_at" : "2016-07-18T23:49:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 541
	},
	{
		"id" : 71252687,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Yes, it's certainly a challenge to make this sound tangible and not overly clunky without unintentionally excluding anyone, though perhaps women and people of color are the majority among the minority/minorities we're addressing here. I also really like the phrase “people from all walks of life” that I've increasingly heard being used in similar contexts.",
		"created_at" : "2016-07-18T23:59:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 541
	},
	{
		"id" : 72291591,
		"user" : {
			"login" : "jinjorge"
		},
		"body" : "This is what Swift has in the contribution section. Figure it's an extra set of well constructed words that one can draw inspiration from.\r\n```\r\nTo be a truly great community, Swift.org needs to welcome developers from all walks of life, with different backgrounds, and with a wide range of experience. A diverse and friendly community will have more great ideas, more unique perspectives, and produce more great code. We will work diligently to make the Swift community welcoming to everyone.\r\n```\r\n",
		"created_at" : "2016-07-26T16:59:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 541
	},
	{
		"id" : 71084311,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I don't think we should do this, which has been discussed before https://github.com/Homebrew/legacy-homebrew/pull/38433#issuecomment-90551522\r\n\r\nOne example is, if user's have a formula using `md5`, with this change. `brew upgrade` or any command which will load this formula will just exit unexpectedly.",
		"created_at" : "2016-07-17T15:34:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 71092254,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The argument name in this method is `dependency`, not `spec`.",
		"created_at" : "2016-07-17T23:38:07Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 542
	},
	{
		"id" : 71092322,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`Formula.fails_with_llvm`",
		"created_at" : "2016-07-17T23:41:13Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 542
	},
	{
		"id" : 71092334,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`Formula.fails_with` … and the “the” looks like it doesn't belong here.",
		"created_at" : "2016-07-17T23:41:57Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 542
	},
	{
		"id" : 71092402,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Looks like `Formula#patches` …",
		"created_at" : "2016-07-17T23:45:24Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 542
	},
	{
		"id" : 71092444,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This comment needs to stay on the same line like the `def` to have the desired effect. I don't think we want to disable this style check for the rest of the entire file, though maybe that's what you indeed intended …",
		"created_at" : "2016-07-17T23:48:19Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 542
	},
	{
		"id" : 71092470,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Again, better to put this on the same line like the `def` to limit it to that one affected method.",
		"created_at" : "2016-07-17T23:51:11Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 542
	},
	{
		"id" : 71092519,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "As before, please put it at the end of `def chmod_R(perms)` to limit the scope of this special comment.",
		"created_at" : "2016-07-17T23:54:25Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 542
	},
	{
		"id" : 71092587,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Why the sudden use of `__method__` here?",
		"created_at" : "2016-07-17T23:56:55Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 542
	},
	{
		"id" : 72370849,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "That is what I intended here as it's used more than once.",
		"created_at" : "2016-07-27T02:12:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72370882,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Again, I'm intentionally disabling for the whole file. Ideally we'd disable this for all of `compat/`",
		"created_at" : "2016-07-27T02:12:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72370961,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Again, I think this shouldn't have limited scope.",
		"created_at" : "2016-07-27T02:14:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72371039,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I was going to use them everywhere but changed my mind and missed this one 😀 ",
		"created_at" : "2016-07-27T02:15:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72372524,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> Ideally we'd disable this for all of `compat/`.\r\n\r\nThat would be fine by me and I would either prefer that or prefer to make the effect of those comments more fine-grained by moving them to the end of the respective `def` lines. The former can be achieved by adding a `.rubocop.yml` into the `compat/` directory and disabling the annoying rules in there, e.g.:\r\n\r\n```yaml\r\ninherit_from: ../../.rubocop.yml\r\n\r\nStyle/MethodName:\r\n  Enabled: false\r\nStyle/PredicateName:\r\n  Enabled: false\r\n```\r\n\r\nThis works well with editor integration and invoking RuboCop directly, because it starts the search for such a file in the directory of the file that is being inspected. `brew style` defeats this logic by directly providing a configuration file, so it will still complain and ignore the extra `.rubocop.yml` file. (I think we should adjust `brew style` not to do that.)\r\n\r\n(Naturally this extends to the other related code comments.)",
		"created_at" : "2016-07-27T02:38:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72375666,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "We've pencilled in the end of September. Don't know if that's worth mentioning more explicitly.",
		"created_at" : "2016-07-27T03:27:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72410579,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This is still executed in load time ",
		"created_at" : "2016-07-27T09:45:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72410592,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This is still executed in load time ",
		"created_at" : "2016-07-27T09:45:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72431321,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Would raising an appropriate exception address this, as it would prevent the formula from being loaded, but won't instantly kill the `brew` process like `odie` does? Is this what you are suggesting to do instead of using `odie`?",
		"created_at" : "2016-07-27T12:40:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72431827,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "The most we can do is to print warning. Both odie and raise will just kill brew. ",
		"created_at" : "2016-07-27T12:44:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72435230,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I see. My impression was that formula loading in general was guarded by some exception handling, but that's apparently only happening in `brew readall`, `brew update-report`, and maybe a few other places. I wonder whether this is something that could (and should) be addressed in `Formulary` …\r\n\r\nThough I'm not sure if killing the process is a real issue. The greater issue in my opinion that there's no indication which formula is causing the error, unless `--debug` is also supplied to the invocation that failed.",
		"created_at" : "2016-07-27T13:08:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72435687,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "We can create a new exception like `DeprecatedDSLError` . Then in the formula loading we can choose to raise (for developer) or print warning with backtrace (for users). ",
		"created_at" : "2016-07-27T13:11:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72459251,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "For MD5 we want to kill brew.",
		"created_at" : "2016-07-27T15:15:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72497445,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "> For MD5 we want to kill brew.\r\n\r\nI disagree. Noted we are talking load time(i.e. any brew command that load formulae) not run time (like brew install). Therefore, to users, it would be appear that some random commands will cause brew exit simply because one bad formula. \r\n\r\nWhat makes it worse is that `odie` unlike `raise RuntimeError` won't be properly caught. One of examples is `brew tap` will just exit without untap the tap if one of formulae happens to use such DSL. ",
		"created_at" : "2016-07-27T18:37:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72503152,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> What makes it worse is that `odie` unlike `raise RuntimeError` won't be properly caught. One of examples is `brew tap` will just exit without untaping the tap if one of formulae happens to use such DSL.\r\n\r\nThis is IMO a very strong argument for at least “downgrading” to an exception instead of killing the `brew` process, so that the deprecation error can be properly caught by `brew readall` (as part of `brew tap`) and proper cleanup can happen when trying to install a tap that still uses the deprecated DSL.\r\n\r\nI don't think anybody in here is campaigning for keeping MD5 support alive in the sense that we allow formulae that rely on that to be successfully loaded (or even installed).",
		"created_at" : "2016-07-27T19:07:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72517114,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> I don't think anybody in here is campaigning for keeping MD5 support alive in the sense that we allow formulae that rely on that to be successfully loaded (or even installed).\r\n\r\n> We can create a new exception like DeprecatedDSLError . Then in the formula loading we can choose to raise (for developer) or print warning with backtrace (for users).\r\n\r\nThis sounds a lot like \"we should allow users to have a warning but install formulae using `md5`\"",
		"created_at" : "2016-07-27T20:30:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72538779,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I don't really mind about how we go about it, but trying to _install_ formulae with `md5` being anything less than a hard raise is unacceptable, IMO.",
		"created_at" : "2016-07-27T22:51:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72545346,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> This sounds a lot like \"we should allow users to have a warning but install formulae using `md5`\"\r\n\r\nCould you please stick with the facts? Nobody stated anything to that end. Everybody agreed that we don't want to load or even install formulae that use those deprecated and security-related methods. @xu-cheng and I only kindly asked to use a solution that doesn't kill the Homebrew process, e.g., in the middle of a `brew tap`, leaving the user with a tap that contains such a broken formula, because `odie` intervened before `readall` could finish its work and `brew tap` could untap the problematic tap again.\r\n\r\nIf this doesn't make clear why `odie` is problematic then I don't know what else does and I guess I have to give up …",
		"created_at" : "2016-07-27T23:56:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72564903,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Mike, I think you are missing the very fact that md5 for formula installation is already not allowed even before this PR. It's disabled by `odie` in the `Pathname#md5`. ",
		"created_at" : "2016-07-28T04:45:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72565199,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "As I said, all of these can only be warning. The md5 support is already long gone because the below odie in `Pathname#md5`  \r\n\r\nAlso as for warning, I'm not sure it should be printed repeatedly. ",
		"created_at" : "2016-07-28T04:49:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 72651128,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It should be printed everywhere it is used as each provides a backtrace.",
		"created_at" : "2016-07-28T16:03:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 542
	},
	{
		"id" : 71091183,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`alias_method` for consistency.",
		"created_at" : "2016-07-17T22:34:55Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 543
	},
	{
		"id" : 71091190,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Is this deviation from the `generic_<method>` pattern intentional?",
		"created_at" : "2016-07-17T22:35:34Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 543
	},
	{
		"id" : 71091212,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Sorry, never mind. Didn't realize this is outside of a class/module context.",
		"created_at" : "2016-07-17T22:37:14Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 543
	},
	{
		"id" : 71091375,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Sorry, again missed the point. Should have been looking at the diff further down first …",
		"created_at" : "2016-07-17T22:46:36Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 543
	},
	{
		"id" : 71091587,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I realize you have already shuffled around quite a few test methods. Would you consider a more fine-grained approach to excluding certain tests when they are platform-specific?\r\n\r\nI was thinking of something like `needs_os :mac` at the top of those tests (similar to other `needs_*` methods used in tests), that would cause the test to be skipped. One advantage would be that this will require a lot less shuffling around and the diff (at least in the `test/` directory) will be minimal. We had already discussed something like this with @sjackman on Slack.",
		"created_at" : "2016-07-17T22:59:53Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 543
	},
	{
		"id" : 71091674,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "RuboCop strongly objects to using the “case equality operator” outside of a `case` statement and I agree with the reasoning (though that's quite a widespread pattern in the Homebrew code base). This should work equally well and is clearer:\r\n\r\n```ruby\r\n/darwin/i =~ RUBY_PLATFORM && !ENV[\"HOMEBREW_TEST_GENERIC_OS\"]\r\n```",
		"created_at" : "2016-07-17T23:05:06Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 543
	},
	{
		"id" : 71091937,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think this and the other `case` statement might need some tweaking, based on the following results for `RUBY_PLATFORM` (most from my local machine running 10.11.5):\r\n\r\n- `universal.x86_64-darwin15` with system Ruby on 10.11.5\r\n- `i686-darwin15.5.0` with `ruby187` from Homebrew\r\n- `x86_64-darwin15.5.0` with `ruby193` and `ruby20` from Homebrew\r\n- `x86_64-darwin15.0` with `ruby21` from Homebrew\r\n- `x86_64-darwin15` with `ruby22` and `ruby` from Homebrew\r\n- `x86_64-linux-gnu` with system Ruby on Debian 8\r\n\r\nMost of these aren't matched by any of the regular expressions in the `case` statements.",
		"created_at" : "2016-07-17T23:18:26Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 543
	},
	{
		"id" : 71092020,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The missed class rename here might be contributing to the test failures.",
		"created_at" : "2016-07-17T23:22:49Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 543
	},
	{
		"id" : 71092090,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`OSMacLinkTests`?",
		"created_at" : "2016-07-17T23:27:03Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 543
	},
	{
		"id" : 71092106,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`OSMacDependencyCollectorTests`?",
		"created_at" : "2016-07-17T23:27:46Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 543
	},
	{
		"id" : 71249624,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I copy-pasted from `os.rb`. Update in both? I also thing `RUBY_PLATFORM.include?(\"darwin\")` is sufficient.",
		"created_at" : "2016-07-18T23:28:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 543
	},
	{
		"id" : 71249709,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I don't like the \"skipping\" here. We should endeavour to push platform-specific code into different files (but I'm definitely open to a different approach within those constraints).",
		"created_at" : "2016-07-18T23:29:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 543
	},
	{
		"id" : 71250763,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Yes, the `include?` check is even better. I've never seen a different capitalization of `darwin` and the case-insensitive match wasn't actually necessary, though I'm not 100% sure (maybe back in the old days, way before my time …).",
		"created_at" : "2016-07-18T23:40:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 543
	},
	{
		"id" : 71251249,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "That's a convincing argument. I hope others will also join the discussion, so it's not only the two of us exchanging opinions. Maybe there are options we haven't thought of yet.",
		"created_at" : "2016-07-18T23:45:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 543
	},
	{
		"id" : 71093208,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I guess there are different alternatives here, but generating the coverage report during `brew tests --no-compat` felt like the safest and most desirable option. This would also be consistent with what we have been doing in the past before some refactoring changed this `test-bot` code.",
		"created_at" : "2016-07-18T00:38:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 546
	},
	{
		"id" : 71247531,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think these args are much harder to follow than what there was before, personally. I'd be in favour of inlining all non-Ruby 2 stuff.",
		"created_at" : "2016-07-18T23:08:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 546
	},
	{
		"id" : 71249330,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Fair point. I was personally more concerned with line length and with a more uniform look (and making sure that all invocations have individual variables for their arguments to avoid false sharing of arguments).",
		"created_at" : "2016-07-18T23:25:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 546
	},
	{
		"id" : 72263880,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Mostly out of curiosity: Why is the Git repository initialized in the middle of the test and how does (or doesn't) this influence the commands that are issued before and after this block?",
		"created_at" : "2016-07-26T14:46:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 558
	},
	{
		"id" : 72313371,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Hmmm. I had thought that the Git repository needed to be initialized before running `cmd(\"analytics\", \"regenerate-uuid\")`, but this `cmd` seems to run smoothly regardless. I would have expected an error and I thought I remembered receiving one last week...\r\n\r\nIt does need to be initialized before toggling between `brew analytics on` and `brew analytics off`; running those `cmd`s without first initializing the repo does result in this error:\r\n\r\n```\r\nerror: could not lock config file /tmp/homebrew-tests-20160726-97875-1wboued/prefix/.git/config:\r\nNo such file or directory\r\nError: Failure while executing:\r\ngit config --file=/tmp/homebrew-tests-20160726-97875-1wboued/prefix/.git/config\r\n--replace-all homebrew.analyticsdisabled false[true]\r\n```\r\n\r\nIn any case, I guess there's no solid reason for the Git repository to be initialized in the middle of the test. It seems to be fine to initialize it at the beginning. 😄 \r\n\r\n\r\n",
		"created_at" : "2016-07-26T18:52:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 558
	},
	{
		"id" : 72369223,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Thanks for the detailed response! I'm happy with the conclusion you drew from this (moving the repository initialization to the top of the test). :+1:",
		"created_at" : "2016-07-27T01:49:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 558
	},
	{
		"id" : 72266962,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It's a bit of a technicality, but this should be`testball_rack`. Here's why:\r\n\r\n- `HOMEBREW_CELLAR` - cellar (home to all installed formulae)\r\n- `HOMEBREW_CELLAR/name` – rack (home to all installed versions of a formula)\r\n- `HOMEBREW_CELLAR/name/pkg_version` - keg (home to a specific version plus revision of a formula)\r\n\r\nThe `name` and `pkg_verison` placeholders above are references to the corresponding `Formula` instance methods.",
		"created_at" : "2016-07-26T15:00:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 559
	},
	{
		"id" : 72324554,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Makes sense! Thank you for pointing this out and tying it all together.",
		"created_at" : "2016-07-26T19:55:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 559
	},
	{
		"id" : 72369995,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The implicit assumption that is always made on the command line is that any nonzero exit code counts as failure. For this reason, the best way to address the too restrictive assumption previously made here would be to simply consider every nonzero exit code a failure (in the sense that the command failed) and thus a success (in terms of that the failure was expected in the test).\r\n\r\nOr to be a bit more specific, this should do (and yes, ideally is done in a separate commit):\r\n\r\n```ruby\r\n$stderr.puts \"\\n#{output}\" if status == 0\r\nrefute_equal 0, status\r\n```",
		"created_at" : "2016-07-27T02:00:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 559
	},
	{
		"id" : 72505240,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think this would also benefit from an additional `assert_match` on the command output. If I'm not mistaken, it's checking [this part](https://github.com/Homebrew/brew/blob/39453691ba3208dbd2e6ce1fd341d430b31dff55/Library/Homebrew/cmd/switch.rb#L25-L33) of the `brew switch` code, which isn't entirely obvious from the `cmd_fail` call alone.",
		"created_at" : "2016-07-27T19:20:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 559
	},
	{
		"id" : 72510144,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Makes sense! 👍 ",
		"created_at" : "2016-07-27T19:50:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 559
	},
	{
		"id" : 72541728,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Thanks! Much better now. 😸",
		"created_at" : "2016-07-27T23:19:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 559
	},
	{
		"id" : 71623600,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Probably worth adding a new function `cask_dir` and use that instead?",
		"created_at" : "2016-07-20T23:14:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 562
	},
	{
		"id" : 71655024,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This should just be `path/Casks` as I don't remember cask supporting put cask file in the top directory, right?",
		"created_at" : "2016-07-21T06:53:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 562
	},
	{
		"id" : 71655166,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "👎 I suggest you to create a new method `cask_file?`",
		"created_at" : "2016-07-21T06:55:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 562
	},
	{
		"id" : 71655208,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Core tap, i.e.`homebrew/core` doesn't have casks. So you don't need this method.",
		"created_at" : "2016-07-21T06:55:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 562
	},
	{
		"id" : 71769976,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Would be nice to capture both of these with a single regex.",
		"created_at" : "2016-07-21T19:21:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 72464129,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Splitting this into a `return` on the line before would be nice.",
		"created_at" : "2016-07-27T15:38:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 72464165,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Splitting this into two other returns would be nice.",
		"created_at" : "2016-07-27T15:39:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 72464222,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It's not obvious what this does; can you explain?",
		"created_at" : "2016-07-27T15:39:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 72464422,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Is it possible to avoid changing this?",
		"created_at" : "2016-07-27T15:40:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 73686805,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Fixed by using `flag` directly.",
		"created_at" : "2016-08-05T12:51:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 73686812,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Fixed by using `flag` directly.",
		"created_at" : "2016-08-05T12:51:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 73686823,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Fixed by using `flag` directly.",
		"created_at" : "2016-08-05T12:52:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 73686945,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "The idea is that `Options.new` will become a private implementation detail after this PR, it should not be called outside of `Options`.",
		"created_at" : "2016-08-05T12:53:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 73801919,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "What's the advantage of that? Feels better to move the logic into the current constructor.",
		"created_at" : "2016-08-07T13:29:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 73863038,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It cannot. The default constructor is used to create object directly for the output of operator like `|`, `&`, etc. While `create` method is used to initialize `Options` from an array of flags. They are different.",
		"created_at" : "2016-08-08T11:58:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 73874206,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can you elaborate on why `new` and `create` need to have different behaviour? Will you make `new` private? If not, the API seems pretty confusing.",
		"created_at" : "2016-08-08T13:27:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 73884770,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I have to say that I was wondering the same and it feels like this is perfectly doable within the regular constructor (so there would be no need to have a `create` method).",
		"created_at" : "2016-08-08T14:29:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 73886431,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "* First of all, although `Options` is used to present an array of flags, in order to handle value part for flags like `--with-foo=bar`, the options are stored in a `Hash` internally.\r\n* `Options.create` is used to initialize Options from an array of flags. It will do some preprocess to generate the hash object we will used to present this array of flags.\r\n* `Options.new` will just take hash object directly to create a new options object. This is useful for operators like `+`, `-`, `&`, etc. (See the logic of these methods for example).\r\n\r\n>  Will you make new private?\r\n\r\nYes. But how to tag it as private?",
		"created_at" : "2016-08-08T14:37:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 73898233,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Why cannot the constructor make the distinction between what is being passed to it and then act accordingly? (Sorry, I haven't found the time to carefully look at the code, but a cursory glance didn't reveal anything that would make this behavior impossible.)\r\n\r\n> Yes. But how to tag it as private?\r\n\r\n```ruby\r\nprivate_class_method :new\r\n```",
		"created_at" : "2016-08-08T15:38:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 73938314,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Agreed 👍 ",
		"created_at" : "2016-08-08T19:28:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 74041470,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "> Why cannot the constructor make the distinction between what is being passed to it and then act accordingly? (Sorry, I haven't found the time to carefully look at the code, but a cursory glance didn't reveal anything that would make this behavior impossible.)\r\n\r\nWe certainly can. The only question is will it hurts the readability and usage. As it will look like something like this:\r\n```ruby\r\ndef initialize(args)\r\n  case args\r\n  when Array then .... # input is `[\"--foo=A\", \"--bar\"]`\r\n  when Hash then ....  # input is `{\"--foo\" => Option(\"--foo=A\"), \"--bar\" => Option(\"--bar\") }`\r\n  end\r\nend\r\n```\r\nI don't think we should expose this to the outside. As it's worthy to mention that `Options.create` has been there long before this PR.",
		"created_at" : "2016-08-09T11:38:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 74043506,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "That syntax seems better to me. Another option is to have `Option.from_hash` and `Options.from_array` methods.\r\n\r\n\r\n\r\n> As it's worthy to mention that Options.create has been there long before this PR.\r\n\r\nSure and it may be worth removing. My main complaints are that you're have to alter so many tests to use it and stating that it shouldn't be used without using anything like `private` to ensure it is not.",
		"created_at" : "2016-08-09T11:56:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 566
	},
	{
		"id" : 72149114,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I wonder if we need these args given that this only ever makes sense for HTTPS and GitHub.",
		"created_at" : "2016-07-25T21:32:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 581
	},
	{
		"id" : 72149208,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think the `Hash[]` approach is less obvious in what it's actually doing, personally.",
		"created_at" : "2016-07-25T21:33:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 581
	},
	{
		"id" : 72149271,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Why reverse the order, here?",
		"created_at" : "2016-07-25T21:34:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 581
	},
	{
		"id" : 72350082,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "They made it easier to locally test my fix because I don't have the GitHub credentials in my Keychain, but I do have other credentials accessible by the Git credentials helper. That said, I'll remove the arguments.",
		"created_at" : "2016-07-26T22:29:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 581
	},
	{
		"id" : 72350157,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'll drop the refactoring commit and revert to the previous code.",
		"created_at" : "2016-07-26T22:30:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 581
	},
	{
		"id" : 72350313,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Because this fixes a bug. Please see the commit message of the commit that changes this and the way the return value of `api_credentials` is used elsewhere.",
		"created_at" : "2016-07-26T22:31:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 581
	},
	{
		"id" : 72350653,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Cool. Would be good to put stuff like that in the PR body too, I think.",
		"created_at" : "2016-07-26T22:33:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 581
	},
	{
		"id" : 72350760,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Making it easier to locally test your fix is a good enough reason for me 👍 ",
		"created_at" : "2016-07-26T22:34:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 581
	},
	{
		"id" : 72351243,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I did in https://github.com/Homebrew/brew/pull/581#issuecomment-234932442 and updated the PR body to reference this comment. What else could/should I have done? (Only noticed the bug after addressing the first feedback.)",
		"created_at" : "2016-07-26T22:38:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 581
	},
	{
		"id" : 72353973,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "That's more than enough, I missed it, thanks!",
		"created_at" : "2016-07-26T23:00:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 581
	},
	{
		"id" : 72433750,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You probably need to cache the upstream last commit.",
		"created_at" : "2016-07-27T12:58:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 72436051,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I have to admit that I'm not a big fan of chaining multiple multi-line `do` blocks. Would the following be also acceptable to you?\r\n\r\n```ruby\r\noutdated_formulae = formulae.select do |f|\r\n  f.outdated?(:fetch_head => fetch_head)\r\nend\r\n\r\noutdated_formulae.each do |f|\r\n  …\r\n```",
		"created_at" : "2016-07-27T13:14:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 72436625,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Now that you're modifying this anyway: Can you please replace `*\", \"` with `.join(\", \")` here and two lines above? The former is a lot more obscure.",
		"created_at" : "2016-07-27T13:17:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 72437498,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Please use spaces around the assignment (i.e. `options = {}`).",
		"created_at" : "2016-07-27T13:23:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 72437517,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Please use spaces around the assignment (i.e. `options = {}`).",
		"created_at" : "2016-07-27T13:23:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 72437602,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Please use spaces around the assignment (i.e. `options = {}`).",
		"created_at" : "2016-07-27T13:24:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 72438084,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Also this pattern of checking for outdated formulae appears in at least three places in this diff. I wonder if there's a good way to refactor this to avoid repeating this three-line `select` code snippet everywhere.",
		"created_at" : "2016-07-27T13:26:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 72440011,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think in addition to this you will also need to populate `attributes[\"source\"][\"versions\"]` in `Tab.from_file_content`. Otherwise `Tab#versions` will return `nil` for existing tabs that were created before this change and this will cause `Tab#stable_version` and `Tab#devel_version` to fail.",
		"created_at" : "2016-07-27T13:37:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 72440200,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Is there a reason there's both `Tab#stable_version` and `Tab#devel_version` but no`Tab#head_version`? This feels like a surprising omission to me.",
		"created_at" : "2016-07-27T13:38:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 72452079,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : ":+1: Already implemented it locally. Haven't pushed the changes yet, but I will.",
		"created_at" : "2016-07-27T14:40:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 72462663,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "Do I cache it in `Formula` or in `VCSDownloadStrategy`?",
		"created_at" : "2016-07-27T15:31:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 72785450,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The test failure is actually happening here. (You cannot fully trust the line numbers in the test bot output because your PR is being merged on top of an up-to-date `master`, so things might move a little bit.) The problem is that `OpenStruct` in Ruby 1.8.7 doesn't have a `[]=` method. If you change it to the following, it will work:\r\n\r\n```ruby\r\ntab_a.versions = { \"stable\" => f.version }\r\n```",
		"created_at" : "2016-07-29T12:46:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 72786161,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I wonder if it is still appropriate to cache the return value in a single instance variable, as the result can change based on the given `options`. I would expect the following sequence to produce different results, but it probably won't because the first one will have already populated the cache, so the options on the second invocation don't have any effect:\r\n\r\n```ruby\r\nf.outdated_versions\r\nf.outdated_versions(:fetch_head => true)\r\n```",
		"created_at" : "2016-07-29T12:53:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 72788210,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "Thanks!",
		"created_at" : "2016-07-29T13:10:20Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 584
	},
	{
		"id" : 72788378,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "What should I do about it? We can cache outdated versions in two instance variables, but I think we shouldn't give up caching.",
		"created_at" : "2016-07-29T13:11:18Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 584
	},
	{
		"id" : 72791165,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think a simple solution would be to cache based on the given options, though I assume this will continue to be slightly incorrect, as I think `:fetch_head => true` means “fetch HEAD now (possibly again) and then return a result based on this most recent fetch”.\r\n\r\nA cleaner solution would be to think about what doesn't change during the lifetime of a Homebrew process and only cache that. Then refactor the method to compute the final result from the information in the cache and add to that the information that can potentially change on every invocation of this method.",
		"created_at" : "2016-07-29T13:30:09Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 584
	},
	{
		"id" : 72814853,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "I'm not sure but I think that we don't need to fetch remote repository twice when we already have outdated versions with `:fetch_head => true` cached somewhere.\r\n\r\nAs I can see we only use `Formula#outdated` and `Formula#outdated_versions` in `cmd/upgrade` and `cmd/outdated`. For `outdated` we don't need to reassign anything (at least now). For `upgrade` we  need `outdated` only to understand that it's time to upgrade.\r\n\r\nAlso, supposing we don't cache anything at all, is it possible that `outdated_versions` returns something different from what it returns on its first call? It seems that no, otherwise we would have the same caching problem we have now. And assuming that our further behaviour depends only on what is returned by `outdated_versions` on its first call, if `outdated_versions(:fetch_head => true)` is not empty on its first call it won't change from what it is on first call. If `outdated_versions(:fetch_head => true)` is empty on its first call, I think it's even worse if it gets not empty somewhere in the middle of the process. So, I think having `outdated_versions` with and without the flag isn't that bad.",
		"created_at" : "2016-07-29T15:50:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 73128500,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's go for `< latest HEAD`",
		"created_at" : "2016-08-02T10:10:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 73128560,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Would be nice to avoid repeating this if possible.",
		"created_at" : "2016-08-02T10:11:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 73128751,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Use long `curl` arguments here so it's more obvious what the do.",
		"created_at" : "2016-08-02T10:12:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 73129172,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Tiny nit: add `,` after last elements in hashes.",
		"created_at" : "2016-08-02T10:13:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 73344243,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Instead of introducing two variable and some complicated logics, you can actually do this:\r\n```ruby\r\ndef outdated_versions(options = {})\r\n  @outdated_versions ||= Hash.new do |options|\r\n    @outdated_versions[options] = _outdated_versions(options)\r\n  end\r\n  @outdated_versions[options]\r\nend\r\n```",
		"created_at" : "2016-08-03T14:07:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 73345884,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "A nitpick: I would prefer to using `all_version.sort` in this line and the line above. After all, you are using the return value.",
		"created_at" : "2016-08-03T14:17:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 73432621,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "Am I missing something or could it be simplified?\r\n```rb\r\n# before\r\nif head_version\r\n  head_version_outdated?(head_version, options) ? all_versions.sort! : []\r\nelse\r\n  all_versions.sort!\r\nend\r\n\r\n# after\r\nif head_version && !head_version_outdated?(head_version, options)\r\n  []\r\nelse\r\n  all_versions.sort!\r\nend\r\n```",
		"created_at" : "2016-08-03T22:22:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 73437268,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "@bfontaine looks good, thanks. Probably it was similar to your suggestion at some point locally.",
		"created_at" : "2016-08-03T23:03:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 73521625,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "@MikeMcQuaid Any ideas on how we can achieve it? I can think of adding some methods to `ARGV` for that purpose, but that's not the best solution, I guess.",
		"created_at" : "2016-08-04T13:31:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 73681158,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I would avoid to introduce this method, as `tab_version_outdated?` should be implementation details that should not be exposed.\r\n\r\nCan we merge it into `head_version_outdated?`? ~~The only place I see you use `tab_version_outdated?` is in `outdated?` in which case, you can just use `head_version_outdated?(version, :fetch_head => false)`.~~ Actually, you don't need to call `head_version_outdated?` in outdated version at all. See my comment in `cmd/outdated`",
		"created_at" : "2016-08-05T11:58:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 73681264,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "a nitpick, can we have a `else false end` here. A method with `?` in name should only return true or false, but not nil.",
		"created_at" : "2016-08-05T11:59:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 73683607,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It's bad practice to use `f.latest_head_version`, because it's only referred to one of version and has different semantical meaning with `outdated_versions`.\r\n\r\nThis can(should) be `if f.head? && outdated_versions.any? { |v| v.to_s ==  f.pkg_version.to_s }\r\n`. The idea is that:\r\n(1) You should check whether it's a head formula.\r\n(2) If `f.pkg_version` is the same as one of installed versions, it means that you didn't fetch latest HEAD.\r\n",
		"created_at" : "2016-08-05T12:22:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 73684318,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This part is overcomplicated, you should use the same logic as below `print_outdated_json`, i.e.\r\n```ruby\r\n      current_version = if f.head? && outdated_versions.any? { |v| v.to_s == f.pkg_version.to_s }\r\n        \"latest HEAD\"\r\n      else\r\n        f.pkg_version.to_s\r\n      end\r\n      puts \"#{f.full_name} (#{outdated_versions.join(\", \")}) < #{current_version}\"\r\n\r\n```",
		"created_at" : "2016-08-05T12:29:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 584
	},
	{
		"id" : 72158246,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Could this just be `\"years ago\"` & avoid `//` entirely given we're not actually using a regex here or am I missing something?",
		"created_at" : "2016-07-25T22:40:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 72159172,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Makes sense to me!",
		"created_at" : "2016-07-25T22:47:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 72380347,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The substitution of `#{File::PATH_SEPARATOR}` with `File::PATH_SEPARATOR.to_s` is wrong and the same applies to the `#{sbin}` and `sbin.to_s` pair. A relatively easy way to check this is to enter both regular expressions into `brew irb` (though we'll need to also provide `sbin`):\r\n\r\n```console\r\n$ brew irb\r\n==> Interactive Homebrew Shell\r\nExample commands available with: brew irb --examples\r\nirb(main):001:0> sbin = HOMEBREW_PREFIX/\"sbin\"\r\n=> #<Pathname:/opt/homebrew/sbin>\r\nirb(main):002:0> %r{(?:^|#{File::PATH_SEPARATOR})#{sbin}}\r\n=> /(?:^|:)\\/opt\\/homebrew\\/sbin/\r\nirb(main):003:0> /(?:^|File::PATH_SEPARATOR.to_s)sbin.to_s/\r\n=> /(?:^|File::PATH_SEPARATOR.to_s)sbin.to_s/\r\n```\r\n\r\nThe correct substitution should be:\r\n\r\n```ruby\r\n/(?:^|#{Regexp.escape(File::PATH_SEPARATOR)})#{Regexp.escape(sbin)}/\r\n```\r\n\r\n(`Regexp.escape` makes additionally sure to properly handle any characters that we want to be interpreted literally, but that have special meaning when used inside a regular expression.)",
		"created_at" : "2016-07-27T04:48:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 72381618,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Nothing wrong here, but now that you're touching this it would good to escape the embedded string, i.e.:\r\n\r\n```ruby\r\n/CMAKE_PREFIX_PATH=\"#{Regexp.escape(HOMEBREW_PREFIX)}[:\"]/\r\n```\r\n\r\n(This is generally a good idea to avoid misinterpretation of characters with special meaning in regular expressions. And we don't know in advance whether `HOMEBREW_PREFIX` might contain such problematic characters.)",
		"created_at" : "2016-07-27T05:13:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73127363,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This needs to be wrapped with `()`: http://bot.brew.sh/job/Brew%20Pull%20Requests/1111/version=el_capitan/testReport/junit/brew-test-bot/el_capitan/readall___syntax/",
		"created_at" : "2016-08-02T10:01:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73127464,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's just rename the method instead.",
		"created_at" : "2016-08-02T10:02:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73127551,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's rename the method instead.",
		"created_at" : "2016-08-02T10:02:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73127581,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's rename the method instead",
		"created_at" : "2016-08-02T10:03:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73127591,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's rename the method instead.",
		"created_at" : "2016-08-02T10:03:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73127617,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's rename the method instead.",
		"created_at" : "2016-08-02T10:03:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73127648,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's rename the method instead",
		"created_at" : "2016-08-02T10:03:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73127662,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's rename the method instead.",
		"created_at" : "2016-08-02T10:03:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73127873,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Instead of all these, add a `.rubocop.yml` file in `Library/Homebrew/test` with:\r\n\r\n```\r\ninherit_from: ../../.rubocop.yml\r\n\r\n# `formula do` needs uses method definitions\r\nStyle/NestedMethodDefinition:\r\n  Enabled: false\r\n```",
		"created_at" : "2016-08-02T10:05:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73197133,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Oops. Got it. 👍 ",
		"created_at" : "2016-08-02T17:13:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73198443,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "...though now Rubocop is saying `Don't use parentheses around a literal`... 😑 ",
		"created_at" : "2016-08-02T17:21:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73198867,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sorry, needs to be this line and the next",
		"created_at" : "2016-08-02T17:23:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73201718,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Do you mean like this?\r\n```\r\nassert_match(/CMAKE_PREFIX_PATH=\"#{Regexp.escape(HOMEBREW_PREFIX)}[:\"]/,\r\n             cmd(\"--env\"))\r\n```",
		"created_at" : "2016-08-02T17:40:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73204292,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yep!",
		"created_at" : "2016-08-02T17:54:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73499383,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Add a newline at the end of this file (ideally configure your editor to do this automagically!)",
		"created_at" : "2016-08-04T10:39:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73522220,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Minor nit, but it's nicer to put parentheses around the method argument(s) instead of wrapping the method invocation as a whole in parentheses, i.e.:\r\n\r\n```ruby\r\n(bin/File.basename(Dir[\"/usr/bin/*\"].first)).mkpath\r\n```",
		"created_at" : "2016-08-04T13:34:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73584449,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Got it! 👍 ",
		"created_at" : "2016-08-04T19:10:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 73584833,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Makes sense. 👍 ",
		"created_at" : "2016-08-04T19:13:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 587
	},
	{
		"id" : 72369860,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Could maybe move this line above so it's shared between both?",
		"created_at" : "2016-07-27T01:58:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 588
	},
	{
		"id" : 72369913,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`#{name} has been moved to Homebrew. Installing #{name}...\"`",
		"created_at" : "2016-07-27T01:58:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 588
	},
	{
		"id" : 72369947,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "You may need to run `brew link --force` to overwrite any symlinks that Homebrew Cask has created.",
		"created_at" : "2016-07-27T01:59:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 588
	},
	{
		"id" : 72382253,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The assignment to `dir` seems unnecessary. This variable is not used in the rest of this code block, unless I'm overlooking something.",
		"created_at" : "2016-07-27T05:24:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 588
	},
	{
		"id" : 72382722,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "- The indentation inside the `<<-EOS.undent`–`EOS` block is to deep. It needs to be only be indented by two additional spaces (currently four).\r\n\r\n- As mentioned in a previous PR, the first argument of `ohai` is more of a title and subject to truncation and thus isn't really suitable for multi-line output like this. We need either to switch to `puts` or provide a relatively short header like in the migration below from Homebrew to Cask.\r\n\r\n  Or maybe with some rearrangement this can be combined with the `ohai` above the `system HOMEBREW_BREW_FILE, \"install\", name` line.",
		"created_at" : "2016-07-27T05:32:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 588
	},
	{
		"id" : 72432057,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I know you've just moved around existing code, but I think it would be easier to follow (and also avoid an overly long line) if this was split into two lines. Assignments in conditions are sometimes surprising and a careless reader could think that's actually a check for equality. Here's what I'm suggesting:\r\n\r\n```ruby\r\nnew_tap_name = tap.tap_migrations[name]\r\nnext if new_tap_name.nil? # skip if not in tap_migrations list.\r\n```",
		"created_at" : "2016-07-27T12:46:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 588
	},
	{
		"id" : 72432309,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Thanks for addressing the problem with `ohai`'s arguments, but now this is somewhat awkwardly output *after* the formula has already been installed and linked. Shouldn't this be placed before the preceding two lines?",
		"created_at" : "2016-07-27T12:48:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 588
	},
	{
		"id" : 72432421,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"body" : "Agree. For me it was quite surprising when I saw this first time.",
		"created_at" : "2016-07-27T12:48:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 588
	},
	{
		"id" : 72432843,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm not sure if this is a problem of practical relevance, but it feels like it could be safer to use `full_name` instead of just `name` in case a Cask is ever migrated to a non-core formula and there is some ambiguity. But I have to admit that I haven't fully though this through, thus feel free to educate me if that's not going to happen or not an issue …",
		"created_at" : "2016-07-27T12:52:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 588
	},
	{
		"id" : 72433917,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"body" : "For now casks are only migrated to taps within Homebrew organisation and I don't think that there are some duplicated or ambiguous formulas here. But it will definitely be no harm if I change `name` to `full_name`, I guess.",
		"created_at" : "2016-07-27T12:59:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 588
	},
	{
		"id" : 72434141,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Can you check whether the formula is keg only before force link?  ",
		"created_at" : "2016-07-27T13:00:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 588
	},
	{
		"id" : 72434539,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"body" : "Could you explain a bit about \"Keg only\"?",
		"created_at" : "2016-07-27T13:03:29Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 588
	},
	{
		"id" : 72442858,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> Edit: but it should be not full_name but new_tap_name/name\r\n\r\nYes, you're right. Thanks for noticing this. :+1:",
		"created_at" : "2016-07-27T13:54:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 588
	},
	{
		"id" : 72445629,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "@AnastasiaSulyagina http://www.rubydoc.info/github/Homebrew/brew/master/Formula#keg_only-class_method",
		"created_at" : "2016-07-27T14:09:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 588
	},
	{
		"id" : 72498956,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Loading formulae need to be guarded by `begin ... rescue Execption ... end`. You can see the example codes in this very file at below. \r\n\r\nAlso I think it's worth to check whether this formula is installed before to install it. ",
		"created_at" : "2016-07-27T18:44:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 588
	},
	{
		"id" : 72383293,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It feels like this would look more natural if placed before `if link.to_s.start_with?(string)` or is the concern that this could somehow clash with `string` and lead to incorrect results?",
		"created_at" : "2016-07-27T05:41:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 592
	},
	{
		"id" : 72383940,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Oh, no, I think you're right here",
		"created_at" : "2016-07-27T05:51:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 592
	},
	{
		"id" : 72471999,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`if prefix != prefix_check`",
		"created_at" : "2016-07-27T16:19:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 592
	},
	{
		"id" : 72472099,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can you split this into a few `= true if`s instead? I know that's the case above but it's confusing there too.",
		"created_at" : "2016-07-27T16:19:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 592
	},
	{
		"id" : 72520297,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Might be worth flipping this to be `not_relocatable` or similar and using `||=` so you can avoid running `keg_contains` multiple times when not necessary.",
		"created_at" : "2016-07-27T20:47:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 592
	},
	{
		"id" : 72520382,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Why drop the `?`? Does it not return a boolean?",
		"created_at" : "2016-07-27T20:48:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 592
	},
	{
		"id" : 72520469,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`result || keg...` feels slightly more idiomatic and avoids calling the function if unnecessary.",
		"created_at" : "2016-07-27T20:48:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 592
	},
	{
		"id" : 72532271,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "I decided that the current implementation was intentionally avoiding short circuiting so that all issues are always flagged in verbose mode so I followed suit; I think it makes sense to maintain that behavior. ",
		"created_at" : "2016-07-27T21:59:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 592
	},
	{
		"id" : 72532498,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "It does, but I thought it was better fung shui to match style with the existing `keg_contains`. What do you prefer? ",
		"created_at" : "2016-07-27T22:01:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 592
	},
	{
		"id" : 72532547,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Good point but may be worth only doing that in verbose mode to speed up non-verbose bottling. Feel free to leave as-is, though.",
		"created_at" : "2016-07-27T22:01:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 592
	},
	{
		"id" : 72532584,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's make them both have a trailing `?`.",
		"created_at" : "2016-07-27T22:02:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 592
	},
	{
		"id" : 72532602,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "(assuming they both only return boolean values)",
		"created_at" : "2016-07-27T22:02:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 592
	},
	{
		"id" : 72542556,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm in favor of retaining the current behavior (always complete check). Would be good to know how expensive this really is before we start optimizing it away …",
		"created_at" : "2016-07-27T23:27:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 592
	},
	{
		"id" : 72542963,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think we want to retain this order, too. We want the side effect of output in verbose mode, if there are any offending symlinks.",
		"created_at" : "2016-07-27T23:31:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 592
	},
	{
		"id" : 72550114,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The “[…] to your compiler.” reads kinda awkward to me. Maybe “[…] during the build.” works better?",
		"created_at" : "2016-07-28T00:50:11Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 597
	},
	{
		"id" : 72541003,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think there has been universal agreement that the broken dylib check is actually helpful (please correct me if I'm wrong), i.e. everything above this line. That's basically `brew linkage --test` for the formula itself that is being linked (if viewed from the perspective of `brew test-bot`).\r\n\r\nEverything from this line to the end of the method is the controversial and problematic check for undeclared dependencies and I'd be in favor of only removing this second chunk.",
		"created_at" : "2016-07-27T23:12:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 598
	},
	{
		"id" : 72541379,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I mentioned it elsewhere, but for completeness sake: This can only be reverted once all `depends_on \"giraffe\" => :linked` lines have been eliminated from formulae, i.e. after Homebrew/homebrew-core#3370 is merged. (And I haven't checked, but hopefully those lines haven't also trickled into other official taps or even taps not maintained by us.)",
		"created_at" : "2016-07-27T23:16:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 598
	},
	{
		"id" : 72541646,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "There's a bunch in `homebrew/science` as well. That's the only other tap I can see this syntax has leaked into. Hard to check for external taps because we gave it such a generic name, albeit entirely understandably.",
		"created_at" : "2016-07-27T23:19:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 598
	},
	{
		"id" : 72542396,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "👍 that check is useful. The explanation message isn't great for that check either, but the check itself is useful at catching things that should have been revision bumped at some point but were not, in particular.",
		"created_at" : "2016-07-27T23:26:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 598
	},
	{
		"id" : 72716311,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Decided to add it back to avoid breaking our DSL but have removed from homebrew/core and science.",
		"created_at" : "2016-07-28T22:40:47Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 598
	},
	{
		"id" : 72716483,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "With the intent of removing it for good, I assume, once all the references are yanked?",
		"created_at" : "2016-07-28T22:42:19Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 598
	},
	{
		"id" : 72716567,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "My concern is then we end up breaking random taps that have added it based on our `audit`.",
		"created_at" : "2016-07-28T22:43:08Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 598
	},
	{
		"id" : 72716575,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Re-added.",
		"created_at" : "2016-07-28T22:43:13Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 598
	},
	{
		"id" : 72543993,
		"user" : {
			"login" : "scpeters"
		},
		"body" : "I think travis is not acknowledging these newlines. Maybe use more `-` at the beginning of the line or add some `;` in choice places?",
		"created_at" : "2016-07-27T23:41:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 599
	},
	{
		"id" : 72550626,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can we move this to the `matrix:`? Feels more organized to me.\r\n\r\n```yaml\r\nmatrix:\r\n  include:\r\n    - os: linux\r\n      rvm: 2.0.0\r\n    - os: osx\r\n      env: OSX=10.11\r\n      osx_image: xcode7.3\r\n      rvm: system\r\n```",
		"created_at" : "2016-07-28T00:56:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 599
	},
	{
		"id" : 72551077,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Travis maybe would, but being YAML these newlines have no meaning. The shell code needs to be written such as if it was all on one line. Thus a few more `;` here and there need to be added. An often used alternative is to put such code into a dedicated script and source it from here.",
		"created_at" : "2016-07-28T01:02:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 599
	},
	{
		"id" : 72551181,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Are you sure none of this stuff from `before_install:` is needed for the regular Travis runs on macOS after a push to `master`?",
		"created_at" : "2016-07-28T01:04:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 599
	},
	{
		"id" : 72561058,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "That's not how the matrix works, unfortunately; that'll imply another matrix option with those set to the default values.",
		"created_at" : "2016-07-28T03:35:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 599
	},
	{
		"id" : 72561098,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yes; it's needed for e.g. checking `/usr/local` bottles are valid but not for running unit tests (which is all this is doing).",
		"created_at" : "2016-07-28T03:36:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 599
	},
	{
		"id" : 72568499,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It can be done see https://github.com/Homebrew/homebrew-science/blob/master/.travis.yml for example. ",
		"created_at" : "2016-07-28T06:06:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 599
	},
	{
		"id" : 72872500,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I've experienced issues doing it that way before so would rather leave it as-is.",
		"created_at" : "2016-07-29T23:01:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 599
	},
	{
		"id" : 72884941,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Would you mind sharing what kind of issues you've experienced?\r\n\r\n[We've been running such a setup](https://github.com/Homebrew/brew/blob/eec323aed81c14db6fd519aa734394ffe1071db8/.travis.yml#L3-L16) before the core/formula split in the legacy repository and while Travis too frequently had some issues, I'm not aware of any issues that could have been traced back to how we had setup this testing matrix.",
		"created_at" : "2016-07-30T09:44:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 599
	},
	{
		"id" : 72888092,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@UniqMartin In the past I've seen sporadic duplication of jobs that went away when I moved to this format.",
		"created_at" : "2016-07-30T13:49:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 599
	},
	{
		"id" : 73128061,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Better to add this to the `rm_rf` list above otherwise if this fails before `formula_renames` is created the `ensure` will fail.",
		"created_at" : "2016-08-02T10:07:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 601
	},
	{
		"id" : 72893153,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "does this ignore optional & required?",
		"created_at" : "2016-07-30T19:44:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 608
	},
	{
		"id" : 72893169,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "`formula.build.with?(d)` handles optional and recommended.",
		"created_at" : "2016-07-30T19:46:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 608
	},
	{
		"id" : 72893307,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "can this be named anything?",
		"created_at" : "2016-07-30T19:57:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 608
	},
	{
		"id" : 72893337,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "should this be `recursive_dependencies`?",
		"created_at" : "2016-07-30T20:00:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 608
	},
	{
		"id" : 72893601,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Yes.",
		"created_at" : "2016-07-30T20:15:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 608
	},
	{
		"id" : 72893690,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "It could be; I think either behavior is probably okay.",
		"created_at" : "2016-07-30T20:22:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 608
	},
	{
		"id" : 72903465,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`%w[perllocal.pod .packlist].include?(path.basename.to_s)` could have been used to keep this a single case, as those items seem to be closely related, but the split approach is equally fine and is probably a bit easier to understand code-wise. (Just some random thoughts.)",
		"created_at" : "2016-07-31T12:28:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 609
	},
	{
		"id" : 72904946,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Yeah, I thought about that but I wanted to include the comment about it being a hidden file to clarify I wasn't being an idiot about not using the `extname` further up, and I wasn't sure if that would be confusing clumped in with the same comments about `perllocal.pod`.",
		"created_at" : "2016-07-31T14:21:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 609
	},
	{
		"id" : 72902976,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You'll want to use `assert_raises` (that also returns the expected caught exception for further inspection) instead of this construct.",
		"created_at" : "2016-07-31T11:50:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 611
	},
	{
		"id" : 72903112,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`[\\w-]+` is a reasonable assumption, but I don't think we're making this (still restrictive) assumption anywhere else in the code. For simplicity, I'd make this just `[^/]+`. Also please anchor the regular expression and always escape interpolated strings (you can't guarantee they won't contain characters with special meaning in regular expressions). Everything combined:\r\n\r\n```ruby\r\nif line =~ %r{^#{Regexp.escape(HOMEBREW_LIBRARY)}/Taps/([^/]+)/([^/]+)/}\r\n```\r\n\r\nYou could also further simplify and leave splitting of the argument to `Tap.fetch` by using:\r\n\r\n```ruby\r\nif line =~ %r{^#{Regexp.escape(HOMEBREW_LIBRARY)}/Taps/([^/]+/[^/]+)/}\r\n  tap = Tap.fetch($1)\r\n```",
		"created_at" : "2016-07-31T12:01:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 611
	},
	{
		"id" : 72907925,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Just a tiny style nit, but would you mind wrapping this rather long line?",
		"created_at" : "2016-07-31T17:51:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 611
	},
	{
		"id" : 72907950,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm sorry to have to be annoying, but the regular expression is still not anchored at the start (unlike what I suggested), thus is a regression on the `start_with?` used before.",
		"created_at" : "2016-07-31T17:54:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 611
	},
	{
		"id" : 72908177,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sorry, missed the `^`.",
		"created_at" : "2016-07-31T18:11:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 611
	},
	{
		"id" : 72903375,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This nested `if` will mess up the logic in the following `elsif keg.linked?` and what follows, i.e. you'll have to keep the condition in one piece. Note you can use multiple arguments to express “starts with any of?”, so this might be short enough to stay on a single line:\r\n\r\n```ruby\r\nif HOMEBREW_PREFIX.to_s == \"/usr/local\" && keg.name.start_with?(\"openssl\", \"libressl\")\r\n```\r\n\r\n(My personal belief is that the prefix check could be completely dropped so that users get a more uniform behavior independently of where they chose to install Homebrew, though I do understand that there isn't any issue with non-`/usr/local` prefixes. Just a thought—I'm happy either way.)",
		"created_at" : "2016-07-31T12:21:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 612
	},
	{
		"id" : 72903387,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The message itself will need some tweaking to avoid being confusing when a non-`openssl` argument is passed.",
		"created_at" : "2016-07-31T12:22:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 612
	},
	{
		"id" : 72905086,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "> (My personal belief is that the prefix check could be completely dropped so that users get a more uniform behavior independently of where they chose to install Homebrew, though I do understand that there isn't any issue with non-/usr/local prefixes. Just a thought—I'm happy either way.)\r\n\r\nI'd prefer we kept exempting non-`/usr/local` prefixes since there's not actually a problem there. I'd argue `openssl` shouldn't even really be `keg_only` outside of `/usr/local`, but there we go.\r\n\r\n👍 on the rest of Martin's comment though.",
		"created_at" : "2016-07-31T14:28:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 612
	},
	{
		"id" : 72905749,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> I'd prefer we kept exempting non-`/usr/local` prefixes since there's not actually a problem there. I'd argue `openssl` shouldn't even really be `keg_only` outside of `/usr/local`, but there we go.\r\n\r\nMaybe to provide a rationale for my thinking: Since those users have to supply custom paths to their compiler and linker invocations anyway, they could as well supply the `PREFIX/opt/openssl/{include,lib}` paths. The upside would be that their scripts/etc. will continue to work even if they decide to switch from a non-`/usr/local` to a `/usr/local` installation or share their work with other Homebrew users.\r\n\r\nBut as I said, it's just a thought. I'm fine with limiting this to `/usr/local` installations.",
		"created_at" : "2016-07-31T15:06:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 612
	},
	{
		"id" : 72906926,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Part of me wants to get Travis building in `/opt/brew` as well so we know how much breaks in that directory. I'd generally like us to stop vilifying non-`/usr/local` installations & think it'd be reasonably easy to support, as well as opening up the option of moving in future if Apple clamps down even more or we decide it's worthwhile.\r\n\r\nBut that's not strictly related to this discussion, so I'll leave that be.",
		"created_at" : "2016-07-31T16:35:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 612
	},
	{
		"id" : 72907789,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> I'd generally like us to stop vilifying non-/usr/local installations & think it'd be reasonably easy to support, as well as opening up the option of moving in future if Apple clamps down even more or we decide it's worthwhile.\r\n\r\nMy main issue is bottles. They massively improve the user experience and reduce support burden for us.",
		"created_at" : "2016-07-31T17:39:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 612
	},
	{
		"id" : 72907853,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "We're making progress on that front though.\r\n\r\n2356 formulae currently have some form of `cellar :any`, another 451 are `bottle :unneeded`, another 5 are `bottle :disable`. So that leaves... 783 non-portable bottles. Rough numbers, obviously, but we're making solid progress here.\r\n\r\nWe'll get a lot more wrapped up once we work out how to relocate NLS stuff as well.",
		"created_at" : "2016-07-31T17:44:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 612
	},
	{
		"id" : 72907882,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "If we got everything `cellar :any` my objection goes away. There's things like `git` that'll require upstream changes, though. The best middle ground I've heard is leaving the cellar as-is but just moving the default prefix/repo checkout to `/usr/local/homebrew`, `/opt/homebrew` or whatever using @chdiza's method.",
		"created_at" : "2016-07-31T17:47:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 612
	},
	{
		"id" : 72909062,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "What does this do?",
		"created_at" : "2016-07-31T19:07:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 613
	},
	{
		"id" : 72909077,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "The `with` block instructs the mock object about how we expect it should be called; the block should return true if the call is what we expected and shouldn't have any side effects.",
		"created_at" : "2016-07-31T19:08:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 613
	},
	{
		"id" : 72909091,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Not related, but why do we prefer this style?",
		"created_at" : "2016-07-31T19:10:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 613
	},
	{
		"id" : 72909101,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Single-line version of:\r\n\r\n```ruby\r\n```",
		"created_at" : "2016-07-31T19:10:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 613
	},
	{
		"id" : 72909103,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "I think you mean `@formula.bin` here?",
		"created_at" : "2016-07-31T19:10:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 613
	},
	{
		"id" : 72909117,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Can we spell that out? I think the reference to `tap` is confusing.",
		"created_at" : "2016-07-31T19:12:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 613
	},
	{
		"id" : 72909129,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Because it results in a clearer message if the assertion fails. Instead of just saying “assertion failed” (no message is provided) it dumps the `Pathname` instance and the predicate of that instance that was supposed to be true/false.",
		"created_at" : "2016-07-31T19:13:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 613
	},
	{
		"id" : 72909164,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I was trying to avoid repeating `bin` again and used something every Ruby object has. I used (or maybe abused) `Object#tap`.",
		"created_at" : "2016-07-31T19:15:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 613
	},
	{
		"id" : 72909263,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> Can we spell that out?\r\n\r\nYes, we can!",
		"created_at" : "2016-07-31T19:21:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 613
	},
	{
		"id" : 72909280,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Indeed. That's a stupid last-minute change I made because I was shuffling variable names back and forth and sadly I failed to run the test suite afterwards.",
		"created_at" : "2016-07-31T19:22:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 613
	},
	{
		"id" : 72909303,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can you suggest the correct way how I can make the underlying `pip_install` invocation produce a side effect? Aside from that, I guess in this test I should be doing something like `@venv.expects(:pip_install).yields(nil)` instead …",
		"created_at" : "2016-07-31T19:24:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 613
	},
	{
		"id" : 72911340,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "I learned a thing today!",
		"created_at" : "2016-07-31T21:30:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 613
	},
	{
		"id" : 72913050,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "You can just say `.with(\"foo\")`: http://gofreerange.com/mocha/docs/Mocha/Expectation.html#with-instance_method",
		"created_at" : "2016-07-31T23:15:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 613
	},
	{
		"id" : 72913544,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Thanks! I didn't realize this could be simplified like that for simple cases like this one.",
		"created_at" : "2016-07-31T23:42:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 613
	},
	{
		"id" : 73010635,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It's a minor concern, but I'm wondering how much switching back and forth environments for every single file affects performance. I think we could safely move this outside of `path.find do` without adverse effects. The only disadvantage would be that it's a bit more disconnected from the `/usr/bin/file` invocation.",
		"created_at" : "2016-08-01T16:41:43Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 616
	},
	{
		"id" : 73012169,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "How do you feel about generalizing this method a bit? Making it accept arbitrary changes to the environment would be simple, in fact it would only mean stealing [this code from `testing_env.rb`](https://github.com/Homebrew/brew/blob/7a00f03c92607f65336be0285584e8351ad8a73a/Library/Homebrew/test/testing_env.rb#L128-L136). That way we wouldn't have to come up with a special-purpose method for every case where we need to temporarily alter the environment. On the call site, this would be used as:\r\n\r\n```ruby\r\nwith_environment(\"LC_ALL\" => \"C\") { … }\r\n```\r\n\r\nJust an idea. Feel free to ignore it, particularly if others also think generalizing this wouldn't be as useful.",
		"created_at" : "2016-08-01T16:51:44Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 616
	},
	{
		"id" : 73082152,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "```\r\nvim (Known problematic), before PR:\r\n\r\nbrew bottle vim  25.07s user 12.28s system 101% cpu 36.910 total\r\nbrew bottle vim  24.97s user 11.92s system 100% cpu 36.651 total\r\nbrew bottle vim  24.89s user 11.90s system 101% cpu 36.350 total\r\n\r\nvim (Known problematic), after PR:\r\n\r\nbrew bottle vim  24.86s user 11.82s system 100% cpu 36.363 total\r\nbrew bottle vim  24.56s user 11.81s system 102% cpu 35.538 total\r\nbrew bottle vim  24.59s user 11.65s system 103% cpu 35.085 total\r\n\r\n\r\nopenssl (Known fine), before PR:\r\n\r\nbrew bottle openssl  17.76s user 7.23s system 102% cpu 24.395 total\r\nbrew bottle openssl  17.53s user 7.00s system 103% cpu 23.736 total\r\nbrew bottle openssl  17.47s user 6.77s system 103% cpu 23.402 total\r\n\r\n\r\nopenssl (Known fine), after PR:\r\n\r\nbrew bottle openssl  18.17s user 7.14s system 102% cpu 24.722 total\r\nbrew bottle openssl  17.68s user 6.97s system 102% cpu 24.099 total\r\nbrew bottle openssl  17.61s user 6.89s system 102% cpu 23.856 total\r\n\r\n\r\nMartin's proposed rejig:\r\nbrew bottle openssl  17.47s user 6.79s system 103% cpu 23.374 total\r\nbrew bottle openssl  17.56s user 6.97s system 103% cpu 23.723 total\r\nbrew bottle openssl  17.46s user 6.96s system 103% cpu 23.644 total\r\nbrew bottle vim  23.81s user 11.49s system 105% cpu 33.582 total\r\nbrew bottle vim  23.72s user 11.52s system 106% cpu 33.034 total\r\nbrew bottle vim  24.24s user 11.70s system 104% cpu 34.358 total\r\n```\r\n\r\nNot a giant different either way, but agree there's a minor performance gain here so will adopt the proposed rejiggle.",
		"created_at" : "2016-08-02T01:36:43Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 616
	},
	{
		"id" : 73085552,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I lean 👎 on this for now.\r\n\r\nI'll reconsider if it gets to the point where we're carrying around a silly amount of custom methods for relatively small cases, but I _personally_ find generic methods make handling a large codebase sometimes unpleasant, particularly around navigating & tying together specific elements efficiently.\r\n\r\nBut as said, if it gets to a point where this gets silly I'll accept the need. Hopefully that's a reasonable compromise.",
		"created_at" : "2016-08-02T02:30:45Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 616
	},
	{
		"id" : 73086281,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Two cents: I wrote the testing code ;) but I think it makes sense in the main codebase and I like that it's more explicit than `with_custom_locale`. I'm happy either way.",
		"created_at" : "2016-08-02T02:42:19Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 616
	},
	{
		"id" : 73086583,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Let's stick with `with_custom_locale` for now. I kind of want to get it shipped & see whether we see an appreciable difference in bottles being relocatable, and these discussions have tended to get bogged down indefinitely on minor issues like this.\r\n\r\nHappy to reconsider later, or even review a follow-up PR to introduce more generic handling throughout the codebase, but yeah, I'm relatively wary of this kind of discussion by now having seen it delay or outright derail core PRs for weeks on end too much over the last ~6 months 😕.",
		"created_at" : "2016-08-02T02:46:58Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 616
	},
	{
		"id" : 73498683,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It basically says: loop through all the Taps and run `.path` on each of them and return an array containing the result.",
		"created_at" : "2016-08-04T10:33:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 618
	},
	{
		"id" : 73573499,
		"user" : {
			"login" : "lewisinc"
		},
		"body" : "Okay, that makes sense. However, if I create some empty directories in the `$(brew --prefix)/Library/Taps` folder with `mkdir`, `Tap.map(&:path)` doesn't report them. At least from the `brew irb` instance. It only reports directories in `$(brew --prefix)/Library/Taps/*/`.",
		"created_at" : "2016-08-04T18:08:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 618
	},
	{
		"id" : 73575463,
		"user" : {
			"login" : "lewisinc"
		},
		"body" : "Another note, running `find . -empty -type d` to find all the empty directories in the Taps folder reveals that some Taps leave empty directories themselves, so just deleting all the empty directories recursively won't solve the problem either. However, limiting the depth of the deletion to two levels might solve both problems, which we can do with `find $(brew --prefix)/Library/Taps -empty -type d -depth 2 | xargs rmdir`. It won't delete nested empty directories however.",
		"created_at" : "2016-08-04T18:19:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 618
	},
	{
		"id" : 73781626,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Unless I'm misunderstanding you, I think what you want is to detect empty directories that would be removed by `rmdir Library/Taps/* Library/Taps/*/*`. Is this correct? If so, here's a suggestion how to achieve this:\r\n\r\n```ruby\r\ntaps_dir = HOMEBREW_LIBRARY/\"Taps\"\r\nreturn unless taps_dir.directory?\r\n\r\nuser_dirs = taps_dir.children.select { |pn| !pn.symlink? && pn.directory? }\r\nrepo_dirs = user_dirs.flat_map(&:children).select { |pn| !pn.symlink? && pn.directory? }\r\nempty_dirs = (user_dirs + repo_dirs).select { |pn| pn.children.empty? }\r\nreturn if empty_dirs.empty?\r\n```\r\n\r\nThis will additionally make sure to skip over any symbolic links, to avoid deleting them and recursing into them (I think that's desirable).",
		"created_at" : "2016-08-06T06:13:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 618
	},
	{
		"id" : 73781646,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Please use `.size` instead if `.length`. It's a minor detail, but using `.size` for collections (like arrays) and `.length` for strings is relatively common in Ruby land and helps avoid confusion.",
		"created_at" : "2016-08-06T06:16:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 618
	},
	{
		"id" : 73781701,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You can make this suggestion more useful and explicit by listing all the empty directories like this:\r\n\r\n```ruby\r\ninject_file_list empty_dirs.map{ |pn| \"rmdir #{pn}\" }, <<-EOS.undent\r\n  Found empty directories in your Taps directory […rest of message…]\r\n  The fix the issue and remove the empty directories run:\r\nEOS\r\n```",
		"created_at" : "2016-08-06T06:22:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 618
	},
	{
		"id" : 73781841,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The comment seems broken still: “If the formula name is **a** fully-qualified name let's silently”?",
		"created_at" : "2016-08-06T06:37:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 619
	},
	{
		"id" : 73781811,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think we might want to always run `Readall.valid_tap?` because it has side effects (e.g. reporting of invalid formulae) that we don't want to miss. To accommodate the use case of this PR, we could keep the outer condition the same, but make raising the exception conditional:\r\n\r\n```ruby\r\nunless Readall.valid_tap?(self, :aliases => true)\r\n  unless ARGV.homebrew_developer?\r\n    raise \"Cannot tap #{name}: invalid syntax in tap!\"\r\n  end\r\nend\r\n```",
		"created_at" : "2016-08-06T06:33:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 622
	},
	{
		"id" : 73838910,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I like it 👍 ",
		"created_at" : "2016-08-08T08:31:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 622
	},
	{
		"id" : 73781168,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "this one is still caps",
		"created_at" : "2016-08-06T05:22:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 623
	},
	{
		"id" : 73781193,
		"user" : {
			"login" : "scpeters"
		},
		"body" : "thanks for catching that",
		"created_at" : "2016-08-06T05:24:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 623
	},
	{
		"id" : 73346978,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This probably should be just `@cask_dir ||= path/\"Casks\"`",
		"created_at" : "2016-08-03T14:23:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 624
	},
	{
		"id" : 73498971,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Probably want to extend this to if it's `:devel` and the relevant dependency also defines a `devel` spec.",
		"created_at" : "2016-08-04T10:36:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 625
	},
	{
		"id" : 73499024,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can make the `formula = if tags`... instead",
		"created_at" : "2016-08-04T10:36:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 625
	},
	{
		"id" : 73783202,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "I don't see the use case for this. It smells like feature patching. If the software require's a devel dependency, it should be in an explicit development spec of the main software.",
		"created_at" : "2016-08-06T08:42:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 625
	},
	{
		"id" : 73833818,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Agreed 👍 ",
		"created_at" : "2016-08-08T07:45:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 625
	},
	{
		"id" : 73783306,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The lines between `<<-EOS.undent` and `EOS` should be indented by two spaces. The escaped double quotation signs also look a bit wrong here. However, even better than constructing JSON data by hand (where it's easy to make a mistake) would be to just use:\r\n\r\n```ruby\r\nformula_renames.write Utils::JSON.dump(old_name => new_name)\r\n```",
		"created_at" : "2016-08-06T08:57:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 626
	},
	{
		"id" : 73925826,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Thanks! I did make some mistakes in the process of manually constructing the JSON data. Good to know about this `Utils::JSON` method.",
		"created_at" : "2016-08-08T18:17:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 626
	},
	{
		"id" : 73351160,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Maybe an environment variable instead might be nicer?",
		"created_at" : "2016-08-03T14:45:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 627
	},
	{
		"id" : 73351275,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can probably/may need to add this to a few places where `tab.used_options` are used.",
		"created_at" : "2016-08-03T14:46:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 627
	},
	{
		"id" : 73677337,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "We tend to prefer `args.last` instead of `args[-1]`. However, I wonder why we need this handling at all if an `options = {}` in the method signature will do just fine. It's not like we need the flexibility of mixing an arbitrary number of non-option arguments (currently none) and option arguments right now.",
		"created_at" : "2016-08-05T11:17:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73677523,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "@UniqMartin https://github.com/Homebrew/brew/blob/master/Library/Homebrew/language/haskell.rb#L75\r\n\r\nJust trying to keep some consistency.",
		"created_at" : "2016-08-05T11:20:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73679138,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The problem with this method is that absence of any Python 2 requirement or hard-coded dependency doesn't mean the formula doesn't support or want the system Python, thus `python2`. Even checking the stand-alone `--with-python` or `--without-python` options isn't sufficient, unless I'm misreading [`Language::Python.each_python`](https://github.com/Homebrew/brew/blob/38209aadbfe4fd0c6772467c4bc5c63325d53f6c/Library/Homebrew/language/python.rb#L16-L29). That means it should be legal that a formula specifies\r\n\r\n```ruby\r\ndepends_on :python if MacOS.version <= :snow_leopard\r\ndepends_on :python3\r\n```\r\n\r\nwith the intention of always providing both Python 2 and Python 3 support.",
		"created_at" : "2016-08-05T11:38:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73679315,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Not your fault, but it feels like `PythonRequirement` and `Python3Requirement` having a parent-child relationship instead of being siblings is a design flaw that is exposed by this.",
		"created_at" : "2016-08-05T11:39:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73679323,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "That's why it can be manually specified as well. The goal is not to read the formula authors' minds but to provide better default behavior.",
		"created_at" : "2016-08-05T11:39:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73679421,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "You read my mind ;)",
		"created_at" : "2016-08-05T11:40:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73679870,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Acknowledged. It's a flexibility that we don't need here and it's unnecessarily bloating the method. `args` is never used beyond this point (contrary to the method you linked).",
		"created_at" : "2016-08-05T11:45:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73680215,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Changed.",
		"created_at" : "2016-08-05T11:49:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73680531,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think the way forward here, which will also massively simplify the logic and avoid having separate methods for Python 2 and Python 3 is to just use `Requirement#name`, i.e. modify this check to be `req.name == \"python\"` or `req.name == \"python3\"`.",
		"created_at" : "2016-08-05T11:52:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73680794,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I agree that it does a decent job providing a better default and I'm happy with this. Just wanted to point out that it won't be able to get all cases right automagically.",
		"created_at" : "2016-08-05T11:54:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73681493,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Yeah, I agree. I think the main question is whether there are more ambiguous cases that should force an error unless it's specified manually. It seems reasonable to me that in the above scenario\r\n```\r\ndepends_on :python if MacOS.version <= :snow_leopard\r\ndepends_on :python3\r\n```\r\nthat the default would be python3 without forcing it to be specified manually. Ditto in the case of \"without-python\" and :python3. But I could see someone reasonably wanting those cases to raise unless manually specified.",
		"created_at" : "2016-08-05T12:01:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73681725,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Are you suggesting a single method that accepts a version argument that's a \"2\" or a \"3\"?",
		"created_at" : "2016-08-05T12:04:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73682137,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm suggesting a method that is invoked as either `needs_python?(\"python\")` or `needs_python?(\"python3\")`. This would also help simplify the logic in `virtualenv_install_with_resources`.",
		"created_at" : "2016-08-05T12:08:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73682159,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Or maybe you mean a generic `needs_req_or_dep_with_name?(fooreqdepname)`?",
		"created_at" : "2016-08-05T12:08:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73682560,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> Or maybe you mean a generic `needs_req_or_dep_with_name?(fooreqdepname)`?\r\n\r\nThat's what it basically boils down and the method name is certainly very descriptive, but I'm not insisting on generalizing this (unless existing code paths in Homebrew would immediately benefit from such a generalization).",
		"created_at" : "2016-08-05T12:12:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73683094,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "I guess the same pattern is used for both perl and ruby but they don't have elaborate DSLs (yet) that would benefit at this point.\r\n\r\nSo one question is whether to also include dependency-less and requirement-less `without-python` and `with-python` options as cases for needs_python?(\"python\") to return true.",
		"created_at" : "2016-08-05T12:17:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73684273,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> So one question is whether to also include dependency-less and requirement-less `without-python` and `with-python` options as cases for `needs_python?(\"python\")` to return true.\r\n\r\nI think this should be the case. That's a very widely used pattern in our formulae.",
		"created_at" : "2016-08-05T12:29:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73684998,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "As for the case of `:python` if snow leopard + `:python3` scenario, it occurs in `gdal`, `hashpump`, `pyside`, `shiboken`, `sip`, `uwsgi`, and `z3`.",
		"created_at" : "2016-08-05T12:35:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73686031,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "@UniqMartin ok so here's a combo method",
		"created_at" : "2016-08-05T12:44:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73687995,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I have to say that I dislike the duplication in these `<whatever>.any? do` blocks and even more so that those multi-line blocks are joined via a Boolean operation. Can you try and make this a bit nicer?",
		"created_at" : "2016-08-05T13:01:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73688017,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : ":+1: Would you mind making the argument name `python` as this is more in line with other methods in this file?",
		"created_at" : "2016-08-05T13:01:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73688165,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "I originally had it nicer but `brew style` barked at me :(",
		"created_at" : "2016-08-05T13:02:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73688447,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You can try `(requirements | deps).any?`",
		"created_at" : "2016-08-05T13:04:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73688661,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think the following code is more succinct and manages to be equally understandable:\r\n\r\n```ruby\r\nwanted = %w[python python3].select { |py| needs_python?(py) }\r\nraise \"ambiguous python, please specify\" if wanted.size > 1\r\npython = wanted.first || \"python\"\r\n```",
		"created_at" : "2016-08-05T13:06:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73689769,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "looks like it would have to be `(requirements.to_a | deps)` or `(deps.to_a | requirements)` or `(requirements.to_a | deps.to_a)`",
		"created_at" : "2016-08-05T13:15:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73692083,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "How about\r\n```\r\n      def needs_python?(python)\r\n        return true if build.with?(python)\r\n        (requirements.to_a | deps).any? { |r| r.name == python && r.required? }\r\n      end\r\n```",
		"created_at" : "2016-08-05T13:31:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73694879,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "This is also bizarre and unlikely so raising seems good :)",
		"created_at" : "2016-08-05T13:50:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73695013,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "These are mostly not applications, so they'll never see this code.",
		"created_at" : "2016-08-05T13:51:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73699024,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I like that a lot more. :+1:",
		"created_at" : "2016-08-05T14:16:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73699801,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This exception message is a bit vague. I wonder if you can improve it and make it more actionable, as it seems not entirely unlikely that it will be presented to contributors.",
		"created_at" : "2016-08-05T14:21:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73700099,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "yeah I intend to make it a \"real\" exception class, of course :)",
		"created_at" : "2016-08-05T14:22:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73700405,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It would be nice to add documentation to this method (to follow Tim's precedent when he introduced the `virtualenv` code) and as this method is only used internally, either make it private or at least document it as private via `@api private`.",
		"created_at" : "2016-08-05T14:25:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73700771,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The method documentation will need to be updated for the new argument. And I suspect @tdsmith would prefer this to be a plain `python = nil` instead of the option hash, though I can see an argument for the flexibility the latter offers if we decide to add more optional arguments at a later stage.",
		"created_at" : "2016-08-05T14:27:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73702386,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "```\r\nvirtualenv_install_with_resources :python => \"python3\"\r\nvirtualenv_install_with_resources :python => \"python\"\r\n```\r\nlooks more sane to me than\r\n```\r\nvirtualenv_install_with_resources \"python3\"\r\nvirtualenv_install_with_resources \"python\"\r\n```\r\nor\r\n```\r\nvirtualenv_install_with_resources(\"python3\")\r\nvirtualenv_install_with_resources(\"python\")\r\n```\r\n\r\n```\r\n$ virtualenv --help|grep python\r\n  -p PYTHON_EXE, --python=PYTHON_EXE\r\n                        --python=python2.5 will use the python2.5 interpreter\r\n                        (/usr/local/opt/python/bin/python2.7)\r\n```\r\nSo there's a case for calling it `:python_exe` if anyone is concerned about confusion with adding a third `:python` to the code, the other two being\r\n```\r\ndepends_on :python\r\n```\r\nand\r\n```\r\ndepends_on \"numpy\" => :python\r\n```\r\nIncidentally, I'm wondering if the `depends_on \"numpy\" => :python` usage should be entirely deprecated.",
		"created_at" : "2016-08-05T14:36:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73712934,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I agree almost universally. I'm not a big fan of `:python_exe` as it smells too much like Windows, but `:python_binary` or something similar would be fine. Maybe to avoid the slightly bogus look of `:python => \"python\"` at the cost of hard-coding binary names we could make that `:version => 2` or `python_version => 2` or `python_major => 2` (naming is hard!) and leave mapping that to an appropriate Python binary name to the method.\r\n\r\nOne major downside would be the confusingly different interface of `virtualenv_create` and this method, so it might be prudent to adjust the former if we decide to tweak the latter.",
		"created_at" : "2016-08-05T15:38:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73713656,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "We could always break out the tried-and-true `:using` :)",
		"created_at" : "2016-08-05T15:42:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73714150,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`virtualenv_install_with_resources :using => \"python3\"` actually reads quite nicely to me!",
		"created_at" : "2016-08-05T15:45:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73714482,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "@UniqMartin the specter of https://github.com/Homebrew/brew/issues/38 has me worried, but as you know I think that one should be closed.",
		"created_at" : "2016-08-05T15:47:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 636
	},
	{
		"id" : 73689971,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can you move the assignment before the `if`? Assignments in conditions can be easily misunderstood to be a comparison or missed, particularly when they are hidden in surrounding logic like in this case.",
		"created_at" : "2016-08-05T13:16:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 638
	},
	{
		"id" : 73694421,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "This should actually be `any?` because using `next` in `map` may collect `nil` values that we want to disregard.",
		"created_at" : "2016-08-05T13:48:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 638
	},
	{
		"id" : 73694687,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I see. I think I will append `.compact` in the expression above, which makes the code more readable.",
		"created_at" : "2016-08-05T13:49:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 638
	},
	{
		"id" : 73780757,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm afraid `include method` is going to be confusing, as `foo method` tends to refer to `def foo` (see below). How do you feel about referring to it as simply `include` or maybe `include directive`?",
		"created_at" : "2016-08-06T04:38:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 648
	},
	{
		"id" : 73786713,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "`include directive` sounds 👍 to me. Will change.",
		"created_at" : "2016-08-06T14:24:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 648
	},
	{
		"id" : 73786191,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "May I propose to eliminate `HOMEBREW_LIBRARY_PATH` completely. It's quiet confusing to have it, especially we have another variable called `HOMEBREW_LIBRARY`.",
		"created_at" : "2016-08-06T13:34:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 649
	},
	{
		"id" : 73786207,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "~~I think this is bad, as you are altering an immutable value(value whose name are all capitalized). It will cause ruby raising warnings.~~",
		"created_at" : "2016-08-06T13:36:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 649
	},
	{
		"id" : 73792139,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm not sure I understand. Unless I'm missing a piece of the puzzle, I'm simply converting a `Pathname` instance to a string (this should yield a new `String` instance) and assigning it to a new constant, that didn't previously exist. How is that going to cause a warning?",
		"created_at" : "2016-08-06T21:18:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 649
	},
	{
		"id" : 73792278,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I don't think we can easily eliminate it, but I agree that the name can be confusing (and is known to have caused confusion in the past), thus we should try to find a better name.\r\n\r\nWe cannot eliminate it as easily because in regular execution `HOMEBREW_LIBRARY_PATH` is simply `HOMEBREW_LIBRARY/\"Homebrew\"`, thus we might be tempted to replace the former with the latter. However, in the testing code, they point to completely different locations in the file system and there is no obvious relationship between them. Here, `HOMEBREW_LIBRARY_PATH` is still the root of the Homebrew source code, but `HOMEBREW_LIBRARY` points to a temporary location and is not the parent directory of `HOMEBREW_LIBRARY_PATH`.\r\n\r\nI'm happy to spend some time on this and to come up with a better name/solution, but I would prefer to do that in a separate follow-up PR. Is that fine by you?",
		"created_at" : "2016-08-06T21:28:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 649
	},
	{
		"id" : 73796454,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Sorry my bad, I misread the code to `HOMEBREW_LIBRARY_PATH = HOMEBREW_LIBRARY_PATH.to_s`. Please ignore my last comment ",
		"created_at" : "2016-08-07T06:15:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 649
	},
	{
		"id" : 73837654,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I don't think this quite works the same as the previous version as Bash reads line-by-line and if this file is modified as part of the update process the new version may fail.",
		"created_at" : "2016-08-08T08:20:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 649
	},
	{
		"id" : 73857449,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You're right, Bash normally reads line-by-line. But that's not what we're relying on here. Instead it's the curly braces (search for “group command” in the Bash man page) that cause the expression to be read as a whole before it gets executed. Whether it extends over several lines or not doesn't matter.\r\n\r\nHere are four self-modifying scripts that demonstrate both your point (normally execution line by line) and mine (the different behavior of a group command):\r\n\r\n```sh\r\n#!/bin/bash\r\nself=\"$(<\"$0\")\"\r\nsed -e 's/H[e]llo/Goodbye/' <<<\"$self\" >\"$0\"\r\necho \"test-1: Hello World!\"\r\nexit 0\r\n```\r\n\r\n```sh\r\n#!/bin/bash\r\nself=\"$(<\"$0\")\"\r\n{\r\n  sed -e 's/H[e]llo/Goodbye/' <<<\"$self\" >\"$0\"\r\n  echo \"test-2: Hello World!\"\r\n  exit 0\r\n}\r\n```\r\n\r\n```sh\r\n#!/bin/bash\r\nself=\"$(<\"$0\")\"\r\nsed -e 's/H[e]llo/Goodbye/' <<<\"$self\" >\"$0\"; echo \"test-3: Hello World!\"; exit 0\r\n```\r\n\r\n```sh\r\n#!/bin/bash\r\nself=\"$(<\"$0\")\"\r\n{ sed -e 's/H[e]llo/Goodbye/' <<<\"$self\" >\"$0\"; echo \"test-4: Hello World!\"; exit 0; }\r\n```\r\n\r\nAnd here's the output of those test scripts:\r\n\r\n```console\r\n$ ./test-1\r\ntest-1: Goodbye World!\r\n$ ./test-2\r\ntest-2: Hello World!\r\n$ ./test-3\r\ntest-3: Hello World!\r\n$ ./test-4\r\ntest-4: Hello World!\r\n```",
		"created_at" : "2016-08-08T11:02:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 649
	},
	{
		"id" : 73857940,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "By the way, things will become funny in most cases if the `exit 0` is omitted:\r\n\r\n```console\r\n$ ./test-1\r\ntest-1: Goodbye World!\r\n$ ./test-2\r\ntest-2: Hello World!\r\n./test-2: line 7: syntax error near unexpected token `}'\r\n./test-2: line 7: `}'\r\n$ ./test-3\r\ntest-3: Hello World!\r\n./test-3: line 4: unexpected EOF while looking for matching `\"'\r\n./test-3: line 5: syntax error: unexpected end of file\r\n$ ./test-4\r\ntest-4: Hello World!\r\n./test-4: line 4: syntax error near unexpected token `}'\r\n./test-4: line 4: `}'\r\n```\r\n\r\nThat's another important thing we rely on: Stop before leaving this group command.",
		"created_at" : "2016-08-08T11:07:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 649
	},
	{
		"id" : 73875046,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Gotcha, ignore me then 👍 ",
		"created_at" : "2016-08-08T13:32:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 649
	},
	{
		"id" : 73878151,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "No, actually thanks for asking!\r\n\r\n1. That's definitely behavior few shell users know about and in many situations they don't need to know about it. But in our case it's important and it's better to be safe.\r\n2. Your comment made me think again about some other code in this PR and I think I identified a problem that has the potential to affect users. I'm investigating this now.",
		"created_at" : "2016-08-08T13:52:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 649
	},
	{
		"id" : 73834082,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@vladshablinsky Current text reads a bit weird. How about (assuming it's accurate): \r\n\r\n```\r\nIf `--fetch-HEAD` is passed, fetch the upstream repository to detect if the HEAD\r\ninstallation of the formula is outdated. Otherwise, the repository's HEAD will be\r\nchecked for updates when a new stable or devel version has been released.\r\n```\r\n",
		"created_at" : "2016-08-08T07:48:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 650
	},
	{
		"id" : 73834137,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Also, how long does this operation take on e.g. a standard GitHub repo?",
		"created_at" : "2016-08-08T07:48:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 650
	},
	{
		"id" : 73839047,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "> How about (assuming it's accurate)\r\n\r\nLooks good.\r\n\r\n\r\n",
		"created_at" : "2016-08-08T08:32:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 650
	},
	{
		"id" : 73839488,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "> how long does this operation take on e.g. a standard GitHub repo?\r\n\r\n@MikeMcQuaid, I will test, but shouldn't be too time-consuming for GitHubGitDownloadStrategy. However, for GitDownloadStrategy we need to fetch the repo, so it takes some time. How do I understand whether results are OK or not OK when I do some benchmarks?",
		"created_at" : "2016-08-08T08:35:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 650
	},
	{
		"id" : 73842440,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Just post them here 😀. I think we could do it automatically for GitHub, then?",
		"created_at" : "2016-08-08T09:00:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 650
	},
	{
		"id" : 73861638,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "> I think we could do it automatically for GitHub, then?\r\n\r\nI would avoid it otherwise we may get formula tagged as outdated for a popular repo too often whenever we run `brew upgrade/outdated`. We need a flag to control the behaviors, whether you want prompt update or not.\r\n\r\nBesides the time is still relative consuming:\r\n```\r\n$ time brew outdated\r\nbrew outdated  0.59s user 0.14s system 79% cpu 0.921 total\r\n$ time brew outdated --fetch-HEAD\r\nneovim/neovim/neovim (HEAD-4dc4efc) < HEAD-abb0928dfbf71d5358b56e888db9ed8ff66d8933\r\nbrew outdated --fetch-HEAD  0.54s user 0.10s system 13% cpu 4.918 total\r\n```",
		"created_at" : "2016-08-08T11:44:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 650
	},
	{
		"id" : 73803016,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Maybe we should use `$HOMEBREW_PREFIX/opt/ant` directly, similar to what we are doing in `pod2man`",
		"created_at" : "2016-08-07T14:39:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 654
	},
	{
		"id" : 73803042,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "It seems that there are multiple styles for resolving the current directory. I'm wondering should we make them consistence as well?\r\n\r\nAlso, we probably want to a different name than `pwd` for variable.",
		"created_at" : "2016-08-07T14:40:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 654
	},
	{
		"id" : 73803577,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "True. Note that I avoided all changes to functionality, however subtle, and focused on the style issues only, so not addressing this was intentional.",
		"created_at" : "2016-08-07T15:11:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 654
	},
	{
		"id" : 73803605,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Like in the other comment, I tend to agree. (But as before, not changing functionality and focusing on style changes only was intentional.)",
		"created_at" : "2016-08-07T15:13:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 654
	},
	{
		"id" : 73858697,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Minor detail, but how about using `.rstrip` instead or even the following?\r\n\r\n```ruby\r\naction = ([formula.full_name] + options).join(\" \")\r\n```",
		"created_at" : "2016-08-08T11:14:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 659
	},
	{
		"id" : 73859221,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think technically this part is fine. I wonder though:\r\n\r\n- Should we prefix this to the options instead of appending it? If other options are involved, this will give a more uniform look as all list entries will start with `<formula> --devel` (e.g. for the devel spec).\r\n- Does it make sense to have a completely separate category (e.g. `install/devel` and `install/head`) instead of mixing them into the big bowl of regular installs? Or is the same category fine and the analytics UI does a good enough job of filtering the entries for us afterwards?",
		"created_at" : "2016-08-08T11:20:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 659
	},
	{
		"id" : 73859994,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "According to the `curl(1)` man page, the name (the thing before the `=`) is expected to be already URL-encoded. If you wanted to be on the safe side, it would make sense to simply reject keys that are too fancy (I think anything that doesn't match `/^\\w+$/` falls into that category) or alternatively URL-encode them on the Ruby side.",
		"created_at" : "2016-08-08T11:28:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 659
	},
	{
		"id" : 73860249,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You will need to stick the URL (`https://www.google-analytics.com/debug/collect`) between the `curl` binary and the arguments if you want this output to match what is executed (and to match the code you added in the Bash version of this code).\r\n\r\nOtherwise :+1: on adding this.",
		"created_at" : "2016-08-08T11:31:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 659
	},
	{
		"id" : 73860479,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "For `echo`ing this, I think it's better to put everything in a single string (like in the Ruby code) instead of passing everything as separate arguments to `echo`:\r\n\r\n```sh\r\necho \"$HOMEBREW_CURL https://www.google-analytics.com/debug/collect ${args[*]}\"\r\n```",
		"created_at" : "2016-08-08T11:33:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 659
	},
	{
		"id" : 73874671,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Will let @DomT4 chime in on the latter but the prior makes sense 👍 ",
		"created_at" : "2016-08-08T13:30:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 659
	},
	{
		"id" : 73874718,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Either makes sense to me 👍 ",
		"created_at" : "2016-08-08T13:30:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 659
	},
	{
		"id" : 73874818,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yeh 👍 ",
		"created_at" : "2016-08-08T13:31:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 659
	},
	{
		"id" : 73874838,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-08-08T13:31:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 659
	},
	{
		"id" : 73874853,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-08-08T13:31:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 659
	},
	{
		"id" : 73882087,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm fine with either. I guess the `.rstrip` version is easier to understand.",
		"created_at" : "2016-08-08T14:15:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 659
	},
	{
		"id" : 74115100,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Done!",
		"created_at" : "2016-08-09T18:19:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 659
	},
	{
		"id" : 74120694,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I like how you handled this in the Ruby code. How about doing something similar here?\r\n\r\n```shell\r\nlocal url=\"https://www.google-analytics.com/debug/collect\"\r\necho \"$HOMEBREW_CURL $url ${args[*]}\"\r\n\"$HOMEBREW_CURL\" \"$url\" \"${args[@]}\"\r\n```\r\n\r\n(Note how I used both `[*]` and `[@]` depending on context. The former, if it appears inside a string, is essentially equivalent to `args.join(\" \")` in Ruby. The latter expands to individual arguments, a bit like `*args` in Ruby.)",
		"created_at" : "2016-08-09T18:46:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 659
	},
	{
		"id" : 74198551,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I see you did so in 5f4111d24a7ced6220ffa92d088559a86bc1c335, thanks.",
		"created_at" : "2016-08-10T07:40:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 659
	},
	{
		"id" : 74235343,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Yes. Sorry that I forgot to post a note here about my commit. (It felt uncontroversial enough that I committed straight away after briefly testing it locally.)",
		"created_at" : "2016-08-10T12:38:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 659
	},
	{
		"id" : 74150322,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I missed this in my style PR. Could you please quote this?",
		"created_at" : "2016-08-09T21:42:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74151549,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`$TAP_VAR` is being used here before it is populated (further below). However, I wonder if we should just remove the `--simulate-from-current-branch` option and the associated code from the update. It complicates things and makes the code a bit harder to understand and is probably rarely used, if ever.\r\n\r\nIf we wanted to retain the functionality (use local changes to test the migration code that kicks in after an update), I think this could nowadays better live in a `dev-cmd` that is custom-tailored to this use case. It could refrain from fetching and doing other modifications to the repositories and instead just set up the necessary environment variables and then invoke `brew update-report` (which will do most of the work).",
		"created_at" : "2016-08-09T21:50:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74152346,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I guess this needs a `2>/dev/null` per #671 and to resolve the merge conflict.",
		"created_at" : "2016-08-09T21:56:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74153175,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Is this a good indicator that something was fetched? Would comparing the `origin/master` commit hash before and after the fetch maybe be a better indicator? (Not sure what the best solution is, but this feels like a strange criterion. It also impacts the non-`--preinstall` case which it probably shouldn't?)\r\n\r\nHowever, if we stick with this, this should get a `2>/dev/null` just in case.",
		"created_at" : "2016-08-09T22:01:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74216350,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "should the hard-coded 60 be a configurable number instead?",
		"created_at" : "2016-08-10T09:53:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74217238,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Interesting idea. Using an environment variable?",
		"created_at" : "2016-08-10T10:00:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74218182,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "That seems simplest until there's some more formal config file and/or mechanism for brew generally like a `brew get foo` and `brew set foo=bar` or however that ends up working. Alternatively, it could be exposed now with a specific command like `brew analytics` is for the on/off value.",
		"created_at" : "2016-08-10T10:07:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74241520,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@ilovezfs Added in eaec152.",
		"created_at" : "2016-08-10T13:18:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74241734,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Perfect, thank you!",
		"created_at" : "2016-08-10T13:20:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74243941,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "If you don't consider this too much voodoo witchcraft, the canonical (and much shorter) way to initialize variables with default values in Bash is to use expansion like this:\r\n\r\n```shell\r\n: \"${HOMEBREW_AUTO_UPDATE_SECS:=60}\"\r\n```",
		"created_at" : "2016-08-10T13:32:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74244919,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "`-${HOMEBREW_AUTO_UPDATE_SECS}s` should be quoted for safety and consistency:\r\n\r\n```shell\r\n[[ -n \"$(find \"$DIR/.git/FETCH_HEAD\" -type f -mtime \"-${HOMEBREW_AUTO_UPDATE_SECS}s\" 2>/dev/null)\" ]] && exit\r\n```",
		"created_at" : "2016-08-10T13:37:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74245868,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Why remove this again? The reason for this addition wasn't speed issues and unless I'm missing something, this PR is only about improving the speed of the auto-update (or update in general).",
		"created_at" : "2016-08-10T13:42:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74246321,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "\"These times are now fast enough to avoid any further special-casing for `--preinstall`\"  in commit message",
		"created_at" : "2016-08-10T13:45:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74246647,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "So I think the idea is subject bot to the same new behavior as users get?",
		"created_at" : "2016-08-10T13:47:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74246733,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "See https://github.com/Homebrew/brew/pull/669/commits/3c901a972fc57d94763c86965f23e9796a9504c5. It's moved to `brew.sh` instead which means it doesn't need duplicated around every command that needs it.",
		"created_at" : "2016-08-10T13:47:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74248286,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm confused. How does removing this from the `brew test-bot` code ensure the auto-update doesn't later mess with the state of the repositories once `brew test-bot` has pulled some PR commits or similar activities that involve temporarily modifying the local repository and creating a divergent `master` branch?\r\n\r\nFrom a typical run of `brew test-bot`:\r\n\r\n```\r\n# This modifies the master branch locally, making it diverge from upstream:\r\n==> brew pull --clean https://github.com/Homebrew/homebrew-core/pull/3704\r\n[…]\r\n# This causes the auto-update to kick in if it hasn't been disabled in test-bot:\r\n==> brew install --only-dependencies --build-bottle --verbose mesos\r\n```",
		"created_at" : "2016-08-10T13:56:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74248688,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Will leave it as-is for now just because I think it's a bit more explicit. 👍 to maybe fixing such things in bulk in future though.",
		"created_at" : "2016-08-10T13:58:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74248979,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> brew install --only-dependencies --build-bottle --verbose mesos\r\n\r\nBecause the `test-bot` was run through `brew.sh` which has already exported `HOMEBREW_NO_AUTO_UPDATE`. It'll basically handle all cases where a `brew` invocation ends up calling other processes. This also handles the case for e.g. `brew bundle` and other external commands that may call `brew install` in quick succession. ",
		"created_at" : "2016-08-10T13:59:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74249316,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Basically: you run `brew`: you get one chance for an auto-update within that process or all child processes. ",
		"created_at" : "2016-08-10T14:01:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74251217,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "bin/brew\r\n28:source \"$HOMEBREW_LIBRARY/Homebrew/brew.sh\"\r\n\r\nQ.E.D.",
		"created_at" : "2016-08-10T14:10:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74252139,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Thanks for bearing with me! :bow: I misread the code and thought `HOMEBREW_NO_AUTO_UPDATE` would only be exported if a `brew install` or `brew upgrade` command runs, but I see now that it's always set. Sorry for the noise!",
		"created_at" : "2016-08-10T14:15:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74397616,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This line broke `brew update` for anyone who updated between this commit being merged and the fix in 985c672bac4dc20d369b451c484eb6553762dbcf. It read the current revision of that branch rather than the e.g. `origin/master` revision.",
		"created_at" : "2016-08-11T10:13:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74398836,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Open to thoughts on best course of action. My thinking is: mailing list post, Twitter post, IRC room post.",
		"created_at" : "2016-08-11T10:23:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74404387,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Did those three. Twitter post is getting decent number of RTs.",
		"created_at" : "2016-08-11T11:16:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74406078,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Do the analytics show how many `brew update`s occurred in that period?",
		"created_at" : "2016-08-11T11:32:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74408100,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Apologies for the obviously too hasty :+1: as this was a bug I should have been able to spot, but I got too caught up in some minor details and the `test-bot` discussion. 😭\r\n\r\nGiven how important a functioning `brew update` is for the rest of Homebrew, I think the morale of the story and how we approach future changes to the update should be:\r\n\r\n- Don't rush `brew update` changes that aren't urgent bug fixes. (This was about 6 hours from an almost complete rewrite to merging this. Probably too quick.)\r\n- Self-review your own changes after not looking at them for 24 hours.\r\n- If possible, give more co-maintainers a chance to review.\r\n- Do more local testing. If non-obvious, provide instructions how to test this locally, including what you think should happen in various scenarios.\r\n\r\nI'm not blaming anyone here. Mistakes happen, but given this incident let's try to learn from them. `brew update` is way too critical to treat changes to it like any other PR.",
		"created_at" : "2016-08-11T11:51:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74408825,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "The scariest scenario is if this type of bug ever gets pushed out via the auto-update.",
		"created_at" : "2016-08-11T11:57:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74409061,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "@UniqMartin do you have any idea why `update-test` didn't catch this?",
		"created_at" : "2016-08-11T11:59:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74409332,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@ilovezfs I also assumed it would catch this but it doesn't verify the update actually happened until my change in https://github.com/Homebrew/brew/commit/b9d5b11f321a359b462aa2c353c2bdb483930fb3.",
		"created_at" : "2016-08-11T12:02:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74409474,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@UniqMartin Agreed with all your learning points. Post 1.0.0 I'm hoping we can slow Homebrew/brew changes right down.",
		"created_at" : "2016-08-11T12:03:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74409502,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "(and I don't see us needing to change `update` similarly again).",
		"created_at" : "2016-08-11T12:03:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74409542,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Yeah, I'm looking at that commit right now. Still surprising to me that it didn't catch it without that commit. My apologies for the :+1: as well :(",
		"created_at" : "2016-08-11T12:04:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74413404,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I was also surprised but basically without that commit: there's no error, it just thinks it's up-to-date.",
		"created_at" : "2016-08-11T12:35:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74413606,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "After a night's sleep and reviewing the changes, I think we might have to make some more tweaks to the logic changed here. 😢 The fix isn't actually fixing the problem, though it's improving the situation to a point where people won't be indefinitely stuck:\r\n\r\n```console\r\n$ cd \"$(brew --repository)\"\r\n$ git checkout master\r\n$ git fetch origin\r\n$ git reset --hard 985c672b # move back to fix commit (not up-to-date with upstream)\r\nHEAD is now at 985c672b update.sh: check upstream SHA prefetch not local.\r\n$ git push --force . 985c672b:origin/master # pretend we didn't fetch the latest commit\r\nTotal 0 (delta 0), reused 0 (delta 0)\r\nTo .\r\n + b9d5b11f...985c672b 985c672b -> origin/master (forced update)\r\n$ brew update\r\nAlready up-to-date.\r\n$ git rev-parse master\r\n985c672bac4dc20d369b451c484eb6553762dbcf\r\n$ git rev-parse origin/master\r\nb9d5b11f321a359b462aa2c353c2bdb483930fb3\r\n```\r\n\r\nNote how `brew update` is claiming up-to-date, but `master` hasn't been updated to `origin/master`. A second `brew update` will actually update, but with the current fix every user will have to run `brew update` twice in a row to actually get updated.\r\n\r\nIt might also be doing unintended things if something different from `master` is checked out, as it's comparing whatever is currently checked out to `origin/master` (but before any new commits have been fetched and the `origin/master` ref updated).",
		"created_at" : "2016-08-11T12:37:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74415885,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@UniqMartin sorted in https://github.com/Homebrew/brew/commit/24b5db53672843647da29073060bff3f81b05b90.",
		"created_at" : "2016-08-11T12:53:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 669
	},
	{
		"id" : 74196183,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'm a bit confused about these methods; they are both looking for `gpg 2.0` but just looking with different names? If so, would be good to make the requirement named `GPG2Requirement` and share code between the two methods (as their only difference as far as I can see is the `which_all` parameter).",
		"created_at" : "2016-08-10T07:18:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 675
	},
	{
		"id" : 74235571,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Yeah, I ended up dropping 1.x support because 1) Upstream is trying to discourage people from using it unless they actively need something extremely portable, 2) Very few things should ever specifically need 1.x, 3) We're renaming the executables in the top-level prefix for `gpg` & I didn't want to start plonking `PATH` env scripting into every formula.\r\n\r\nNo issue with calling the requirement `GPG2Requirement`. Will do that. IRT the sharing code, 👍 depending on what we do with the discussion in the other PR around this logic needing replicating in two different places currently.",
		"created_at" : "2016-08-10T12:40:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 675
	},
	{
		"id" : 74243327,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think these two methods could share a bunch of logic for now. Once the other PR is merged I think it makes sense for more of this code to live there rather than have non-requirement code calling a requirement.",
		"created_at" : "2016-08-10T13:29:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 675
	},
	{
		"id" : 74646998,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "May want to add `GPGRequirement = GPG2Requirement` too.",
		"created_at" : "2016-08-12T19:22:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 675
	},
	{
		"id" : 74196274,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "You could/should probably do the reverse and have the `GPGRequirement` use the code from here. If that still doesn't work, shout and I'll try to get it working.",
		"created_at" : "2016-08-10T07:19:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 676
	},
	{
		"id" : 74196325,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think `File.executable?` may check existence without barfing. May also want to check it's not a directory.",
		"created_at" : "2016-08-10T07:20:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 676
	},
	{
		"id" : 74237361,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I thought about that. Wasn't sure if it was acceptable or not, but if it is, sounds reasonable.\r\n\r\nI had some issues around `which_all` always returning a `Pathname` even if you forced `to_s` on it but I think I've just worked out why that wasn't working. Will double check with a fuller test locally.",
		"created_at" : "2016-08-10T12:52:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 676
	},
	{
		"id" : 74277110,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "`which_all` (which I've switched back to locally) already does [some checks](https://github.com/Homebrew/brew/blob/604f4b6a0785e0295e548e6d033823303da19061/Library/Homebrew/utils.rb#L430) the file is executable & a file. This is mostly a smoke test so we actually have something for `available?`.",
		"created_at" : "2016-08-10T16:15:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 676
	},
	{
		"id" : 74245662,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's not use a newline every time unless needed. Instead, mirror the styling but without the truncation.",
		"created_at" : "2016-08-10T13:41:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 677
	},
	{
		"id" : 74250447,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Would it make sense to address this instead by allowing `oh1` to accept options and to optionally disable the truncation, i.e. in cases like these where we want the styling but not the truncation even in non-verbose mode? E.g. something like this:\r\n\r\n```ruby\r\ndef oh1(title, options = {})\r\n  if $stdout.tty? && !ARGV.verbose? && options.fetch(:allow_truncation, true)\r\n    title = Tty.truncate(title)\r\n  end\r\n  puts \"#{Tty.green}==>#{Tty.white} #{title}#{Tty.reset}\"\r\nend\r\n\r\noh1 \"I shall not be truncated\", :allow_truncation => false\r\n```",
		"created_at" : "2016-08-10T14:06:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 677
	},
	{
		"id" : 74250583,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I was thinking the same 👍 ",
		"created_at" : "2016-08-10T14:07:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 677
	},
	{
		"id" : 74272266,
		"user" : {
			"login" : "sjackman"
		},
		"body" : "@UniqMartin Would you like to submit a PR with the above code, or shall I add it to this PR?",
		"created_at" : "2016-08-10T15:51:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 677
	},
	{
		"id" : 74278218,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "@sjackman I'm happy for you to pick it up and make it a part of this PR.",
		"created_at" : "2016-08-10T16:21:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 677
	},
	{
		"id" : 74325130,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Could you use the `unless` block form? Makes it a bit easier to follow this. Thanks!",
		"created_at" : "2016-08-10T20:36:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 677
	},
	{
		"id" : 74421239,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "One reason why I suggested to name the option `:allow_truncation` (though that's a bit unwieldy) is that it's less confusing than a plain `:truncate` with a Boolean value. Example:\r\n\r\n```ruby\r\noh1 \"This should always be truncated\", :truncate => true # default\r\noh1 \"This should never be truncated\", :truncate => false\r\n```\r\n\r\nI would expect the first line to be always truncated, but instead it means “may truncate”, depending on environmental factors like output to a TTY or the presence of the `--verbose` flag. One idea I have to resolve this is to do the following (though I'm happy to hear about other/better ideas):\r\n\r\n```ruby\r\noh1 \"This will sometimes be truncated\", :truncate => :auto # default\r\noh1 \"This should never be truncated\", :truncate => :never\r\n```",
		"created_at" : "2016-08-11T13:28:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 677
	},
	{
		"id" : 74647921,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@UniqMartin Agreed 👍 ",
		"created_at" : "2016-08-12T19:28:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 677
	},
	{
		"id" : 74678009,
		"user" : {
			"login" : "sjackman"
		},
		"body" : "Fixed.",
		"created_at" : "2016-08-13T00:56:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 677
	},
	{
		"id" : 74630532,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Could you make an `options = {}` for the `patch`? Will make it a bit more readable.",
		"created_at" : "2016-08-12T17:40:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 682
	},
	{
		"id" : 74630634,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Should read `must have` as its describing the assertion rather than the method or success. Same with values below.",
		"created_at" : "2016-08-12T17:41:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 682
	},
	{
		"id" : 74630692,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`assert_match \"Valid\", ft`",
		"created_at" : "2016-08-12T17:41:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 682
	},
	{
		"id" : 74630761,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Use `EOS.undent` here rather than embedding newlines.",
		"created_at" : "2016-08-12T17:42:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 682
	},
	{
		"id" : 74630794,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "(and in other cases you've modified above)",
		"created_at" : "2016-08-12T17:42:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 682
	},
	{
		"id" : 74654515,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Do you mean `def formula_text(name, body = nil, options = {})` ?",
		"created_at" : "2016-08-12T20:20:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 682
	},
	{
		"id" : 74655794,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Unfortunately, this raises an error (`TypeError: no implicit conversion of FormulaText into String`). And `ft`'s `@text` can't be accessed, either.",
		"created_at" : "2016-08-12T20:30:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 682
	},
	{
		"id" : 74658667,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Thanks. But I'm having trouble using `EOS.undent ` and getting the test to pass. 😞 \r\n\r\nWith it written this way:\r\n```\r\n  def test_has_end\r\n    ft = formula_text \"end\", \"\", <<-EOS.undent\r\n      __END__\r\n      a patch here\r\n    EOS\r\n    assert ft.has_END?, \"The formula must have __END__\"\r\n    assert_equal <<-EOS.undent, ft.without_patch\r\n      class End < Formula\r\n      end\r\n    EOS\r\n  end\r\n```\r\n\r\nThe test returns this discrepancy:\r\n```\r\n \"class End < Formula\r\n-end\r\n-\"\r\n+  \r\n+end\"\r\n```\r\n\r\nI've tried adding newlines here and there, but with no luck so far.",
		"created_at" : "2016-08-12T20:53:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 682
	},
	{
		"id" : 74659113,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yep!",
		"created_at" : "2016-08-12T20:57:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 682
	},
	{
		"id" : 74659284,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Cool, that's fine as-is then, thanks for checking 👍 ",
		"created_at" : "2016-08-12T20:58:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 682
	},
	{
		"id" : 74659386,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "That's cool, feel free to leave it as it was, thanks for trying 👍 ",
		"created_at" : "2016-08-12T20:59:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 682
	},
	{
		"id" : 74378119,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Does this strip the newlines too or need a ` \\n`?",
		"created_at" : "2016-08-11T07:30:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 684
	},
	{
		"id" : 74378184,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Maybe worth making it multiline and checking that other lines aren't truncated. I know they aren't from the code above but might be worth making the test a little more robust.",
		"created_at" : "2016-08-11T07:30:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 684
	},
	{
		"id" : 74435235,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "It'd have to be a multiline regex, it turns out; I don't know why I thought `strip` would fix this. ☕☕☕ Tried an approach with `.lines` instead; let me know how you like it.",
		"created_at" : "2016-08-11T14:43:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 684
	},
	{
		"id" : 74435359,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "While looking at this, discovered that all my `assert_match`es were backwards, oops. Agree that it improves the test~!",
		"created_at" : "2016-08-11T14:44:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 684
	},
	{
		"id" : 74698534,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It's true for `bar` because the length is 3 * 25 + 3 = 78 which is less than 80. Change it to `* 30` above and it'll work. Additionally, the line below is nicer (and works) as `assert_match formula[:problem], fa.problems.first.to_s`",
		"created_at" : "2016-08-14T09:17:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 704
	},
	{
		"id" : 74848584,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Wow, thanks! I should have double-checked that arithmetic. 😳 \r\n\r\nIt looks like `\"bar: #{'bar' * 25}\".length` actually works out to 80, but as you pointed out, it would need to be more than 80 to trigger the warning.\r\n\r\n> Additionally, the line below is nicer (and works) as `assert_match formula[:problem], fa.problems.first.to_s`\r\n\r\n👍  I've changed it to `assert_match formula[:problem], fa.problems.first`.\r\n(Forgot that `assert_match` would work here!)",
		"created_at" : "2016-08-15T22:38:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 704
	},
	{
		"id" : 74904398,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Why is `hombrew` not spelt correctly?",
		"created_at" : "2016-08-16T09:40:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 717
	},
	{
		"id" : 74904422,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Capitalise the `Adds`",
		"created_at" : "2016-08-16T09:40:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 717
	},
	{
		"id" : 74905197,
		"user" : {
			"login" : "joshka"
		},
		"body" : "Typo was on the package and has now been fixed https://github.com/josa42/atom-language-homebrew-formula/issues/3#issuecomment-240013203",
		"created_at" : "2016-08-16T09:46:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 717
	},
	{
		"id" : 74905518,
		"user" : {
			"login" : "joshka"
		},
		"body" : "Nope. This is correct as it matches the sentence. It's likely the diff doesn't make this obvious.",
		"created_at" : "2016-08-16T09:48:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 717
	},
	{
		"id" : 74905968,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I see 👍 ",
		"created_at" : "2016-08-16T09:52:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 717
	},
	{
		"id" : 74906054,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Another `fomula` typo in the GitHub readme, FYI.",
		"created_at" : "2016-08-16T09:53:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 717
	},
	{
		"id" : 75012987,
		"user" : {
			"login" : "joshka"
		},
		"body" : "https://github.com/josa42/atom-language-homebrew-formula/pull/4",
		"created_at" : "2016-08-16T20:27:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 717
	},
	{
		"id" : 75081764,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Thanks! can you fix the package name here too and then we should be good to merge.",
		"created_at" : "2016-08-17T08:29:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 717
	},
	{
		"id" : 74907670,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can you split this into multiple statements/lines somehow? Quite a bit of logic being chained here; perhaps having 2-3 separate variables would help.",
		"created_at" : "2016-08-16T10:05:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 719
	},
	{
		"id" : 74907726,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`shemes` -> `schemes`",
		"created_at" : "2016-08-16T10:06:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 719
	},
	{
		"id" : 74907820,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Might want to note explicitly the e.g. moving from 20151020 scheme to 1.0.0 and note that, without this, the prior scheme will always equate to a higher version.",
		"created_at" : "2016-08-16T10:06:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 719
	},
	{
		"id" : 74912174,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "I can come up with this:\r\n\r\n```ruby\r\n      if !version.head?\r\n        return [] if epoch == tab.epoch && pkg_version <= version\r\n      end\r\n```",
		"created_at" : "2016-08-16T10:42:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 719
	},
	{
		"id" : 74912996,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "How about:\r\n```ruby\r\noutdated_version = pkg_version <= version\r\nequal_epoch = epoch == tab.epoch\r\nnot_head_version = !version.head?\r\nreturn [] if outdated_version && equal_epoch && not_head_version\r\n\r\n```",
		"created_at" : "2016-08-16T10:48:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 719
	},
	{
		"id" : 74913747,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "`outdated_version` is actually `not_outdated_version`.\r\n\r\nI don't really like `not` prefixes, but If you're OK with them I make the change. Also, `equal_epoch` can be done `same_epoch`.\r\n",
		"created_at" : "2016-08-16T10:54:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 719
	},
	{
		"id" : 74913959,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`latest_version`, `same_epoch`, `not_head` perhaps (as I can't think of a way of decribing \"not head\" without \"not\").",
		"created_at" : "2016-08-16T10:56:24Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 719
	},
	{
		"id" : 74914675,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : ":+1: will make the change.",
		"created_at" : "2016-08-16T11:03:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 719
	},
	{
		"id" : 75125409,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "I think this should be:\r\n```ruby\r\nlatest_version = pkg_version <= version\r\nlatest_version_scheme = version_scheme <= tab.version_scheme\r\nnot_head = !version.head?\r\nreturn [] if (latest_version || latest_version_scheme) && not_head",
		"created_at" : "2016-08-17T13:47:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 719
	},
	{
		"id" : 75129563,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's pull it out to:\r\n```ruby\r\nlatest_version = pkg_version <= version\r\nlatest_version_scheme = version_scheme <= tab.version_scheme\r\nlatest_version_or_scheme = latest_version || latest_version_scheme\r\nnot_head = !version.head?\r\nreturn [] if latest_version_or_scheme && not_head\r\n```\r\n\r\n(to simplify humans parsing the binary logic)",
		"created_at" : "2016-08-17T14:07:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 719
	},
	{
		"id" : 75130217,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "How about:\r\n```ruby\r\n installed_kegs.each do |keg|\r\n  version = keg.version\r\n  tab = Tab.for_keg(keg)\r\n  all_versions << version\r\n  next if version.head?\r\n  next if version_scheme > tab.version_scheme\r\n  next if pkg_version > version\r\n  return []\r\nend\r\n```",
		"created_at" : "2016-08-17T14:11:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 719
	},
	{
		"id" : 75130668,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Even better. Could skip creating the `tab` until after `version.head?` when we know it's needed, too.",
		"created_at" : "2016-08-17T14:13:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 719
	},
	{
		"id" : 75250624,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Actually, I just realize I gave an incorrect suggestion in the first place. The correct way is:\r\n```ruby\r\ninstalled_kegs.each do |keg|\r\n  version = keg.version\r\n  tab = Tab.for_keg(keg)\r\n  all_versions << version\r\n  next if version.head?\r\n  next if version_scheme > tab.version_scheme\r\n  next if version_scheme == tab.version_scheme && pkg_version > version\r\n  return []\r\nend\r\n```\r\n\r\nNoted that the correct way to compare two version is:\r\n```ruby\r\n(version_scheme <=> other.version_scheme).nonzero? || pkg_version <=> other.pkg_version\r\n```",
		"created_at" : "2016-08-18T05:33:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 719
	},
	{
		"id" : 75268075,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Would be good to make `next if version_scheme == tab.version_scheme && pkg_version > version` into two variables which are `&&` to again make the boolean logic better.",
		"created_at" : "2016-08-18T08:35:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 719
	},
	{
		"id" : 75268126,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "And, again, moving `Tab.for_keg(keg)` after `version.head?` so it's not read unnecessariy.",
		"created_at" : "2016-08-18T08:35:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 719
	},
	{
		"id" : 74966371,
		"user" : {
			"login" : "dunn"
		},
		"body" : "I'll miss them 🚀 ",
		"created_at" : "2016-08-16T16:09:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 724
	},
	{
		"id" : 75083275,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`ARGV.value` only ever returns a single value. To allow something like `brew tests --only=cmd_audit/audit_desc --only=formulary/to_rack` to work you'd need to declare something like:\r\n\r\n```diff\r\n--- a/Library/Homebrew/extend/ARGV.rb\r\n+++ b/Library/Homebrew/extend/ARGV.rb\r\n@@ -107,6 +107,13 @@ module HomebrewArgvExtension\r\n     flag_with_value.strip_prefix(arg_prefix) if flag_with_value\r\n   end\r\n \r\n+  def values(name)\r\n+    arg_prefix = \"--#{name}=\"\r\n+    flags_with_values = select { |arg| arg.start_with?(arg_prefix) }\r\n+    return [] if flags_with_values.empty?\r\n+    flags_with_values.map { |arg| arg.strip_prefix(arg_prefix) }\r\n+  end\r\n+\r\n```\r\n\r\nand do:\r\n\r\n```diff\r\n--- a/Library/Homebrew/cmd/tests.rb\r\n+++ b/Library/Homebrew/cmd/tests.rb\r\n@@ -39,11 +39,9 @@ module Homebrew\r\n \r\n       args = []\r\n       args << \"--trace\" if ARGV.include? \"--trace\"\r\n-      if ARGV.value(\"only\")\r\n+      unless (only = ARGV.values(\"only\")).empty?\r\n         ENV[\"HOMEBREW_TESTS_ONLY\"] = \"1\"\r\n-\r\n-        pairs = ARGV.value(\"only\").split\r\n-        pairs.each do |pair|\r\n+        only.each do |pair|\r\n           test_name, test_method = pair.split(\"/\", 2)\r\n```\r\n\r\nHowever, even with that the multiple `TEST=` arguments don't seem to do anything 😭 ",
		"created_at" : "2016-08-17T08:40:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 726
	},
	{
		"id" : 75235107,
		"user" : {
			"login" : "eirinikos"
		},
		"body" : "Ah... I'd thought that `ARGV.value(\"only\")` could work for something like `--only=integration_cmds cmd_audit`, but I see that is not the case. 😢 ",
		"created_at" : "2016-08-18T01:13:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 726
	},
	{
		"id" : 75257528,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It will work if you make the thing after `--only=` a single argument as seen from the shell, e.g. by using comma (`,`) as a delimiter, or quoting the entire argument that includes the space like `--only=\"integration_cmds cmd_audit\"` or `--only=integration_cmds\\ cmd_audit`.",
		"created_at" : "2016-08-18T07:08:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 726
	},
	{
		"id" : 75333342,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think this could be a tad clearer if it was “bottle rebuild” instead of just “rebuild”.",
		"created_at" : "2016-08-18T15:42:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 731
	},
	{
		"id" : 75333467,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think this could be a tad clearer if it was “Bottle rebuild” instead of just “rebuild”.",
		"created_at" : "2016-08-18T15:43:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 731
	},
	{
		"id" : 75146563,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Does that file exist and is executable on e.g. 10.5 but just doesn't work? If not I think we can leave it as-is.",
		"created_at" : "2016-08-17T15:32:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 735
	},
	{
		"id" : 75146583,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 to this.",
		"created_at" : "2016-08-17T15:32:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 735
	},
	{
		"id" : 75148076,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "You can see commit message for explanation. Basically it exists but too old to support DSL we use. ",
		"created_at" : "2016-08-17T15:40:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 735
	},
	{
		"id" : 75150017,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Ok 🆒 👍 ",
		"created_at" : "2016-08-17T15:50:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 735
	},
	{
		"id" : 75295646,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This has quite bad performance. As it's loading formula twice(which it's quite costly).",
		"created_at" : "2016-08-18T12:08:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 743
	},
	{
		"id" : 75295757,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "This is incorrect. `version_scheme` is different than `revision` as it should never be removed or decreased.",
		"created_at" : "2016-08-18T12:09:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 743
	},
	{
		"id" : 75297538,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "What do you suggest? Pass multiple attributes to `version_attribute_map`?",
		"created_at" : "2016-08-18T12:24:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 743
	},
	{
		"id" : 75297653,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-08-18T12:25:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 743
	},
	{
		"id" : 75312585,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Presumably you mean https://github.com/Homebrew/homebrew-core/pull/4006 instead of 3900?",
		"created_at" : "2016-08-18T13:59:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 743
	},
	{
		"id" : 75312699,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Great change 👍. This is something we could/should have already been doing really, heh.",
		"created_at" : "2016-08-18T14:00:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 743
	},
	{
		"id" : 75313265,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I didn't before, I do now.",
		"created_at" : "2016-08-18T14:04:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 743
	},
	{
		"id" : 75506918,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Would it be enough to have these installed systemwide on the build machines? This means they would likely not be kept particularly up-to-date but might be nicer than sticking them here.",
		"created_at" : "2016-08-19T15:56:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 747
	},
	{
		"id" : 75507662,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "If that's possible, yes, as long as they can extract the containers I don't care if they are up-to-date. ",
		"created_at" : "2016-08-19T16:01:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 747
	},
	{
		"id" : 75584731,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "Can’t you do `case type` instead of `if`/`elsif`/etc?",
		"created_at" : "2016-08-20T20:57:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 770
	},
	{
		"id" : 75585106,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "For that matter, you could replace the entire block with `f.requirements.select(&:\"#{type}?\")`",
		"created_at" : "2016-08-20T21:33:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 770
	},
	{
		"id" : 75587770,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Not sure what would be the best way to reuse this method.",
		"created_at" : "2016-08-21T01:53:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 771
	},
	{
		"id" : 75587794,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I somehow missed that https://github.com/Homebrew/brew/blob/bd1ded93ec46b2ae9c37dbf17dd6d74d3f727440/Library/Homebrew/cask/spec/support/shutup_helper.rb exists. ",
		"created_at" : "2016-08-21T01:56:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 771
	},
	{
		"id" : 76419661,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Better to remove this block than leave it commented out, no?",
		"created_at" : "2016-08-26T13:40:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 773
	},
	{
		"id" : 76420772,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Should already be removed in the other commit I pushed before.",
		"created_at" : "2016-08-26T13:47:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 773
	},
	{
		"id" : 75857824,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It would be best to make `GIT_EXECUTABLE_{RELATIVE,BASE,DIR}` local variables of the `git` function to keep pollution of the environment down. (And then lowercase them to make it clearer they don't have global scope.)",
		"created_at" : "2016-08-23T12:48:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 778
	},
	{
		"id" : 75860158,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Please use a single `=` for string comparison in shell code (the style we use everywhere else).",
		"created_at" : "2016-08-23T13:02:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 779
	},
	{
		"id" : 75860201,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Please use a single `=` for string comparison in shell code (the style we use everywhere else).",
		"created_at" : "2016-08-23T13:03:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 779
	},
	{
		"id" : 75862380,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Why is it necessary to run the code in this `if` block when `HOMEBREW_USR_LOCAL_HOMEBREW_TEST` is set? It doesn't seem to do anything useful.\r\n\r\nThe result returned by this particular line is an empty string if `HOMEBREW_USR_LOCAL_HOMEBREW_TEST` is set, but `HOMEBREW_BREW_FILE_LINK` isn't, i.e. if `HOMEBREW_BREW_FILE` isn't a symlink. Exploiting that `dirname` returns `.` for an empty argument seems a bit hacky.",
		"created_at" : "2016-08-23T13:15:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 779
	},
	{
		"id" : 75865468,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> Why is it necessary to run the code in this if block when HOMEBREW_USR_LOCAL_HOMEBREW_TEST is set? It doesn't seem to do anything useful.\r\n\r\nTo get `BREW_FILE_DIRECTORY` that is required for both cases but used differently.\r\n\r\n\r\n\r\n\r\n> The result returned by this particular line is an empty string if HOMEBREW_USR_LOCAL_HOMEBREW_TEST is set\r\n\r\nI should have temporarily set `HOMEBREW_BREW_FILE` to `/usr/local/bin/brew` before this which would have provided the behaviour I'm looking for without duplicating these three lines. I'm open to a better approach, though.",
		"created_at" : "2016-08-23T13:33:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 779
	},
	{
		"id" : 75865520,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Also, the second part of the test (the `\"$BREW_FILE_DIRECTORY\" = \"$HOMEBREW_REPOSITORY/bin\"`) is always true unless I'm missing something.",
		"created_at" : "2016-08-23T13:33:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 779
	},
	{
		"id" : 75866155,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> To get `BREW_FILE_DIRECTORY` that is required for both cases but used differently.\r\n\r\n`BREW_FILE_DIRECTORY` is already properly populated prior to this code and its contents won't change unless `HOMEBREW_BREW_FILE` is indeed a symlink.\r\n\r\n> I should have temporarily set `HOMEBREW_BREW_FILE` to `/usr/local/bin/brew` before this which would have provided the behaviour I'm looking for without duplicating these three lines. I'm open to a better approach, though.\r\n\r\nMove this resolution logic to a function instead of duplicating the code. As it is now, the code doesn't do what it should be doing (if I'm reading it correctly).",
		"created_at" : "2016-08-23T13:36:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 779
	},
	{
		"id" : 75887159,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> As it is now, the code doesn't do what it should be doing (if I'm reading it correctly).\r\n\r\nTo be more specific, if I have symbolic links\r\n\r\n- `/usr/local/bin/brew -> /usr/local/homebrew/bin/brew` and\r\n- `/opt/brewery/tests/bin/brew -> /opt/brewery/tests/repo/bin/brew`,\r\n\r\nthen invoking `/opt/brewery/tests/repo/bin/brew` or its symlink `/opt/brewery/tests/bin/brew` will incorrectly determine the Homebrew prefix to be `/usr/local`.",
		"created_at" : "2016-08-23T15:12:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 779
	},
	{
		"id" : 75875081,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Please use a single `=` for string comparison in shell code for consistency with existing code.",
		"created_at" : "2016-08-23T14:17:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 780
	},
	{
		"id" : 75875254,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Please move the negation (`!`) inside `[[ … ]]`.",
		"created_at" : "2016-08-23T14:18:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 780
	},
	{
		"id" : 75931239,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Please use `Pathname.new` for consistency or preferably replace this and the preceding line with:\r\n\r\n```ruby\r\nPathname.glob(\"#{HOMEBREW_REPOSITORY}/share/man/man1/*.1\").each do |src|\r\n```",
		"created_at" : "2016-08-23T19:08:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 783
	},
	{
		"id" : 76005298,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'll do it but: consistency with what?",
		"created_at" : "2016-08-24T07:16:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 783
	},
	{
		"id" : 76026949,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Consistency with the rest of Homebrew (this is a few days old, before Cask was merged):\r\n\r\n```console\r\n$ ack 'Pathname\\(' | wc -l\r\n       9\r\n$ ack 'Pathname\\.new\\(' | wc -l\r\n     128\r\n```",
		"created_at" : "2016-08-24T09:49:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 783
	},
	{
		"id" : 76027420,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think we could also drop this completely. `brew man` has never been documented (as far as I'm aware of) and its `--link` option is probably even more obscure and unknown.",
		"created_at" : "2016-08-24T09:53:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 783
	},
	{
		"id" : 76027519,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "But I'm equally fine with this solution and the deprecation notice, too.",
		"created_at" : "2016-08-24T09:53:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 783
	},
	{
		"id" : 76028273,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It'll likely be used by existing maintainers, probably @adamv.",
		"created_at" : "2016-08-24T09:58:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 783
	},
	{
		"id" : 76107174,
		"user" : {
			"login" : "adamv"
		},
		"body" : "I'm not using it.",
		"created_at" : "2016-08-24T17:59:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 783
	},
	{
		"id" : 75792843,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Updated it because I thought being API documentation it should reflect the type of formula we'd accept, but I'm happy to drop the rest if you like. Agreed on `gpg` for now though & dropped that.",
		"created_at" : "2016-08-23T02:10:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 786
	},
	{
		"id" : 75792862,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Seems to work `¯\\_(ツ)_/¯`",
		"created_at" : "2016-08-23T02:11:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 786
	},
	{
		"id" : 75792882,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Dropped in favour of the delegators 👍.",
		"created_at" : "2016-08-23T02:11:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 786
	},
	{
		"id" : 75792887,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Done.",
		"created_at" : "2016-08-23T02:11:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 786
	},
	{
		"id" : 75816767,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This is currently `rw` as you're accepting a `nil` val as the reader. Just checking this is intentional.",
		"created_at" : "2016-08-23T07:51:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 786
	},
	{
		"id" : 75849113,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Left over from earlier testing I think. Tweaked it.",
		"created_at" : "2016-08-23T11:43:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 786
	},
	{
		"id" : 75874460,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "My two cents is that we need to check the checksum of the signature file. \r\n\r\nSo may I suggest a DSL like: `gpg \"<url>\", :sha256 => \"checksum\"`",
		"created_at" : "2016-08-23T14:14:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 786
	},
	{
		"id" : 75874602,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I disagree with adding another checksum for this 👎 ",
		"created_at" : "2016-08-23T14:15:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 786
	},
	{
		"id" : 75874816,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Also, I'm interesting to know how do you indent to manage the trustiness of public key?",
		"created_at" : "2016-08-23T14:16:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 786
	},
	{
		"id" : 75875070,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "A checksum is pretty redundant, IMO. If the signature changes `gpg --verify` breaks. If the tarball/zipball/whatever changes, `gpg --verify` breaks. I can't see an attack method that an extra SHA256 solves.",
		"created_at" : "2016-08-23T14:17:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 786
	},
	{
		"id" : 75877622,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "> Also, I'm interesting to know how do you indent to manage the trustiness of public key?\r\n\r\nVerification _works_ without having to know a key in advance, but I was planning to improve this, even if not immediately immediately. It took me about two weeks to reconfigure the project after initial feedback & test those changes, so I've had to shove things together less coherently than initially desired or planned 😕.\r\n\r\n```ruby\r\ngpg \"https://blah.com/blah-1.2.3.sig\", :key => \"0x872524DB9D74326C\"\r\n```\r\nOr such.",
		"created_at" : "2016-08-23T14:30:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 786
	},
	{
		"id" : 75878129,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "> A checksum is pretty redundant, IMO.\r\n\r\nI made a mistake here. You are right.\r\n\r\nThe real problem is I'm not sure how do you indent to manage the public keys? Because the most comment attack is replacing the source the signature at the same time",
		"created_at" : "2016-08-23T14:32:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 786
	},
	{
		"id" : 75879436,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "> gpg \"https://blah.com/blah-1.2.3.sig\", :key => \"0x872524DB9D74326C\"\r\n\r\nThis is probably best way other than asking users to verify on their own. Also may I suggest to use full fingerprint instead of any shorter version of it.",
		"created_at" : "2016-08-23T14:38:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 786
	},
	{
		"id" : 75881588,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I'm not planning to declare it safe day one & pour champagne everywhere, to reassure you. Current mindset is that there won't (for now) be a command line flag for it and you'll have to set both `HOMEBREW_DEVELOPER` and `HOMEBREW_ENABLE_GPG` for it to ever come into play. \r\n\r\nThat will likely remain the situation for at least a while until I'm happy to call it safe & robust.\r\n\r\n> Also may I suggest to use full fingerprint instead of any shorter version of it.\r\n\r\nYup.",
		"created_at" : "2016-08-23T14:47:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 786
	},
	{
		"id" : 75880043,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "FYI, `allow_write_path` requires the path to be absolute or it will raise error.",
		"created_at" : "2016-08-23T14:41:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 787
	},
	{
		"id" : 76005357,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "`HOMEBREW_TEMP` and `HOMEBREW_CACHE` could also be set to a relative path or even random junk if a user wants to. IMO the user should be responsible for making these paths absolute (if set), because it doesn't make sense to have a relative `TMPDIR`.",
		"created_at" : "2016-08-24T07:16:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 787
	},
	{
		"id" : 75829784,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think it's alright to leave this stuff alone (unless Rubocop told you otherwise).",
		"created_at" : "2016-08-23T09:23:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 793
	},
	{
		"id" : 75829842,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd use `/` unless there's a `/` in the regex.",
		"created_at" : "2016-08-23T09:23:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 793
	},
	{
		"id" : 75834657,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "We'll need to merge our RuboCop configurations, so this will probably be a discussion on its own.",
		"created_at" : "2016-08-23T09:54:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 793
	},
	{
		"id" : 75835042,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-08-23T09:56:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 793
	},
	{
		"id" : 75908738,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think both the old and the new code could be improved and made more understandable by dropping reliance on magic global state and doing something like:\r\n\r\n```ruby\r\nbottle_ext = path[BOTTLE_EXTNAME_RX, 1]\r\nreturn bottle_ext if bottle_ext\r\narchive_ext = path[/(\\.(tar|cpio|pax)\\.(gz|bz2|lz|xz|Z))$/, 1]\r\nreturn archive_ext if archive_ext\r\n```",
		"created_at" : "2016-08-23T17:04:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 793
	},
	{
		"id" : 75909915,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm also a bit curious why `zip` is included in that list imported from Cask. I wouldn't expect it to be used in this context, i.e. I've never seen `.tar.zip` or `.dmg.zip` files.",
		"created_at" : "2016-08-23T17:11:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 793
	},
	{
		"id" : 76025463,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Did you intentionally drop the `.dmg` and `.zip` extensions again? They were present in the Cask version and in your original version of this PR, but maybe they are indeed no longer needed.",
		"created_at" : "2016-08-24T09:39:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 793
	},
	{
		"id" : 76030740,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Yes, dropped them again since I added the `--name` flag to `gunzip`, which takes care of preserving the extension.",
		"created_at" : "2016-08-24T10:16:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 793
	},
	{
		"id" : 75811018,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Only the `==>` should be blue here.",
		"created_at" : "2016-08-23T06:54:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 794
	},
	{
		"id" : 75811869,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Missing `reset` here.",
		"created_at" : "2016-08-23T07:03:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 794
	},
	{
		"id" : 75812272,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "#️⃣ ",
		"created_at" : "2016-08-23T07:08:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 794
	},
	{
		"id" : 75829406,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"body" : "`Tty.bold` is private in HB's Tty for some reasons. should I use Tty just on `==>`?",
		"created_at" : "2016-08-23T09:20:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 794
	},
	{
		"id" : 75860440,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's go for just the `==>` as blue and bold and make the `Success` unbolded.",
		"created_at" : "2016-08-23T13:04:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 794
	},
	{
		"id" : 75873766,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I believe it's private just because it's not used on its own anywhere, and it's a \"composing\" implementation method that requires a color argument. Only the actually-used \"style\" methods are public. If a bold-but-unchanged-color style ends up being needed, I'd see no reason you couldn't rename the existing `Tty.bold` to `Tty.bold_and` and make a public `Tty.bold` method.",
		"created_at" : "2016-08-23T14:12:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 794
	},
	{
		"id" : 75874783,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It's private basically because we don't want bold being used for styling outside of the existing colour palette.",
		"created_at" : "2016-08-23T14:16:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 794
	},
	{
		"id" : 75906040,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "There's `Tty.highlight` (slightly more semantic name), that is currently defined as “bold using the foreground color”, so that would work as a replacement. It's used in `pretty_installed` that is used for highlighting installed formulae in update reports and `brew info`. Somewhat confusingly, there's also `Tty.white` with the exact same definition and that's what used in `oh1` and `ohai` for bolding the text after the arrow.\r\n\r\nI suggest to use the latter for consistency with `oh1` and `ohai`.",
		"created_at" : "2016-08-23T16:49:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 794
	},
	{
		"id" : 75946732,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Very minor nit, but I think the trailing space should remain after the final `#{Tty.reset}`, not moved before it.",
		"created_at" : "2016-08-23T20:43:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 794
	},
	{
		"id" : 75820791,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Glad to have this but the `version unknown` worries me a bit. Could we maybe try to bump it to a known revision at some point?",
		"created_at" : "2016-08-23T08:22:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 795
	},
	{
		"id" : 75821347,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Will look into it. Let's leave this open for now so I don't forget.",
		"created_at" : "2016-08-23T08:25:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 795
	},
	{
		"id" : 75822637,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "🆒 thanks.",
		"created_at" : "2016-08-23T08:33:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 795
	},
	{
		"id" : 76006748,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "😍 ",
		"created_at" : "2016-08-24T07:30:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 795
	},
	{
		"id" : 76072477,
		"user" : {
			"login" : "xu-cheng"
		},
		"body" : "Kindly remind you that `$dir` will be used in the while block for next iteration. As result, you cannot use `abspath` directly like this.",
		"created_at" : "2016-08-24T14:55:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 801
	},
	{
		"id" : 76082491,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Will split out the `dir` part into a function too as it's duplicated above.",
		"created_at" : "2016-08-24T15:43:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 801
	},
	{
		"id" : 76107825,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "That's not what I suggested, though. The whole point of my suggestion was to construct an absolute path *without* resolving any symbolic links and the `pwd -P` in here at least partially does exactly that.\r\n\r\nIt may not resolve `/usr/local/bin/git`, but I'm pretty sure it will resolve `/usr/local/opt/git/bin/git` to `/usr/local/Cellar/git/<version>/bin/git` which seems undesirable.",
		"created_at" : "2016-08-24T18:03:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 801
	},
	{
		"id" : 76108465,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You can simplify this to: `abspath \"$arg0\"`. (No need to catch the output and then echo it again.)",
		"created_at" : "2016-08-24T18:06:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 801
	},
	{
		"id" : 76108756,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "If you wanted to reuse `abspath` in `realpath`, the above `if` is what you would need to refactor (this is also essentially my suggested `abspath` implementation).",
		"created_at" : "2016-08-24T18:08:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 801
	},
	{
		"id" : 76216684,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@UniqMartin As usual, I simultaneously thank you for the review and hate you for pointing out an edge case 😆. PR updated!",
		"created_at" : "2016-08-25T10:13:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 801
	},
	{
		"id" : 76216989,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@UniqMartin Not sure how I missed this before but if you'd prefer I change it further can you elaborate on this?",
		"created_at" : "2016-08-25T10:15:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 801
	},
	{
		"id" : 76201144,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "@jawshooah, do you know why fonts are excluded from search?",
		"created_at" : "2016-08-25T08:30:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 806
	},
	{
		"id" : 76294501,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Looks like the filter was added in https://github.com/caskroom/homebrew-cask/pull/3025. Not sure why fonts would be too noisy unless you just search `font`. Probably fine to remove this.",
		"created_at" : "2016-08-25T18:02:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 806
	},
	{
		"id" : 76272252,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The following should also do the trick and avoids building and immediately discarding a new array:\r\n\r\n```ruby\r\nindex = @lines.rindex { |line| line =~ regex }\r\nindex ? index + 1 : nil\r\n```",
		"created_at" : "2016-08-25T15:59:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 807
	},
	{
		"id" : 76272340,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "What does this do? This looks like a no-op to me.",
		"created_at" : "2016-08-25T16:00:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 807
	},
	{
		"id" : 76273622,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The following will avoid constructing an intermediate array with `drop`:\r\n\r\n```ruby\r\nindex = @lines.each_with_index.find_index { |line, index| index >= skip && line =~ regex }\r\n```\r\n\r\n(But if you prefer to stick with your version, it has a bug as `skip` needs to be added to the returned index.)",
		"created_at" : "2016-08-25T16:06:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 807
	},
	{
		"id" : 76274138,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "yeah that's dead code. it used to be fa.problems.uniq! which is no longer needed. thanks for spotting it.",
		"created_at" : "2016-08-25T16:09:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 807
	},
	{
		"id" : 76274731,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I'm afraid I don't understand this condition. Can it be modified so that it is easier to parse and understand?",
		"created_at" : "2016-08-25T16:13:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 807
	},
	{
		"id" : 76275405,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "I add offset back in later which is why the code currently works, but absolute line number is probably better.",
		"created_at" : "2016-08-25T16:16:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 807
	},
	{
		"id" : 76277445,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "It should be simpler to understand when the offsets don't have to be added back in here, but it's just saying, current found problem != previous pair.",
		"created_at" : "2016-08-25T16:27:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 807
	},
	{
		"id" : 76251779,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "There are two spaces between “unless” and “you” in this line.",
		"created_at" : "2016-08-25T14:19:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 809
	},
	{
		"id" : 76311420,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Open to opinions on whether this is sane. It might be a bit broad.",
		"created_at" : "2016-08-25T19:43:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 812
	},
	{
		"id" : 76311775,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Not sure what the intent is here?",
		"created_at" : "2016-08-25T19:45:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 812
	},
	{
		"id" : 76311840,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Ah because of the `.`? Could consider just removing that.",
		"created_at" : "2016-08-25T19:46:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 812
	},
	{
		"id" : 76311933,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "May want to avoid matching at the beginning or end of the class_name",
		"created_at" : "2016-08-25T19:46:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 812
	},
	{
		"id" : 76312597,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Yeah, it interprets the `.` in something like `openssl@1.1` as a failed desire to regex.",
		"created_at" : "2016-08-25T19:50:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 812
	},
	{
		"id" : 76317330,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Something like:\r\n```ruby\r\nclass_name.gsub!(/\\b[@]\\b/, \"AT\")\r\n```\r\n? Or is that too simple/complicated? 🙈 ",
		"created_at" : "2016-08-25T20:21:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 812
	},
	{
		"id" : 76504469,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "agree that `.` without a modifier isn't a strong regex signal; the current version makes sense 👍 ",
		"created_at" : "2016-08-26T23:59:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 812
	},
	{
		"id" : 76511949,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Don't think you need the `[]`. Also, maybe can go for `/.@\\d` to enforce a digit (for now at least, we can tweak it later). After that 👍 to shipping this.",
		"created_at" : "2016-08-27T07:14:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 812
	},
	{
		"id" : 76525025,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "`/.@\\d` matches `l@1` in this case, which produces things like:\r\n```\r\nExpected to find class OpenssAT1, but only found: OpensslAT11.\r\n```\r\nI'm not sure how to shake that off in the context of `gsub`.",
		"created_at" : "2016-08-28T02:26:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 812
	},
	{
		"id" : 76573844,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Capture parts of the matched text and use them in the replacement:\r\n\r\n```ruby\r\n\"openssl@1.1\".gsub!(/(.)@(\\d)/, \"\\\\1AT\\\\2\")\r\n```\r\n\r\n(And a `sub!` should be sufficient since we don't expect to have multiple `@` in a formula name for now.)",
		"created_at" : "2016-08-29T08:53:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 812
	},
	{
		"id" : 76623120,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Thanks! Pushed in the https://github.com/Homebrew/brew/pull/832 PR.",
		"created_at" : "2016-08-29T15:04:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 812
	},
	{
		"id" : 76353670,
		"user" : {
			"login" : "scpeters"
		},
		"body" : "this build isn't in the jenkins cache anymore\r\n\r\n* https://bot.brew.sh/job/Homebrew%20Testing/",
		"created_at" : "2016-08-26T01:45:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 816
	},
	{
		"id" : 76353830,
		"user" : {
			"login" : "scpeters"
		},
		"body" : "The command will still fail, but I think for the wrong reason?",
		"created_at" : "2016-08-26T01:47:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 816
	},
	{
		"id" : 76353906,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "It's just a placeholder, it could point to anything in the testing section, even something that doesn't exist:\r\n\r\n```\r\n~> brew pull https://bot.brew.sh/job/Homebrew\\%20Testing/9999/\r\nError: Testing URLs require `--bottle`!\r\n```\r\nI'm only really updating it to `https` for the sake of consistency.",
		"created_at" : "2016-08-26T01:49:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 816
	},
	{
		"id" : 76361141,
		"user" : {
			"login" : "scpeters"
		},
		"body" : "Thanks for the explanation!",
		"created_at" : "2016-08-26T03:53:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 816
	},
	{
		"id" : 76362492,
		"user" : {
			"login" : "dunn"
		},
		"body" : "These can be chained in Ruby, I think? \r\n```ruby\r\nENV[\"TMPDIR\"] = ENV[\"TEMP\"] = ENV[\"TMP\"] = HOMEBREW_TEMP\r\n```\r\nMight make the duplication a little less unpleasant.",
		"created_at" : "2016-08-26T04:18:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 817
	},
	{
		"id" : 76363315,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Yeah, they can be chained, but AFAIK some people detest this style and I've seen style guides (in other languages) that explicitly advise against chaining assignments before. I guess Homebrew maintainers don't mind?",
		"created_at" : "2016-08-26T04:37:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 817
	},
	{
		"id" : 76363421,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "I've chained them up. Let's see if anyone has an objection.",
		"created_at" : "2016-08-26T04:39:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 817
	},
	{
		"id" : 76463175,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "I think it's much cleaner to either make `strip_ansi` a module method or just monkeypatch `String`. It doesn't make sense to extend each individual string just to call this method.",
		"created_at" : "2016-08-26T18:12:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 76513846,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Reverted it to being a module method.",
		"created_at" : "2016-08-27T10:02:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 76518102,
		"user" : {
			"login" : "chdiza"
		},
		"body" : "Looks like the word \"Warning\" got broken up.",
		"created_at" : "2016-08-27T15:29:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 76518947,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "This is intentional, so the `g` doesn't get underlined.",
		"created_at" : "2016-08-27T16:32:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 76519033,
		"user" : {
			"login" : "chdiza"
		},
		"body" : "If you don't mind me asking, why is underlining being added here where there was none before?",
		"created_at" : "2016-08-27T16:41:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 76519081,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "It's not being added. Before, [`yellow`](https://github.com/Homebrew/brew/pull/823/files#diff-cef16ceb727f1d5a841e0295b083611fL36) was actually a shortcut to `yellow.underline`.",
		"created_at" : "2016-08-27T16:47:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 76519095,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Wait, why are we underlining everything but the \"g\"?",
		"created_at" : "2016-08-27T16:48:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 76519308,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Because the underline would collide with the `g`. This is really a minor detail. 😄 ",
		"created_at" : "2016-08-27T17:10:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 76519324,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "That it is, just a weird one. But it makes sense now 👍 ",
		"created_at" : "2016-08-27T17:11:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 76575169,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "> Because the underline would collide with the `g`. This is really a minor detail. 😄\r\n\r\nI don't understand this. Would you mind explaining it in a little more detail? Thanks!",
		"created_at" : "2016-08-29T09:02:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 77411377,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Note to self: `Formatter.error`",
		"created_at" : "2016-09-02T21:01:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78696134,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Tiny nit: just indent these at four spaces in and use hash rockets for now (we'll do a mass update 🔜)",
		"created_at" : "2016-09-14T07:11:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78696148,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Similarly here.",
		"created_at" : "2016-09-14T07:11:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78696229,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This is the bit I'm not sure I understand what/why it's doing what it is.",
		"created_at" : "2016-09-14T07:12:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78696276,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Maybe worth making the `\\033` a constant somewhere; used in a couple of places.",
		"created_at" : "2016-09-14T07:12:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78699320,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Since `@sequence` can be `nil` (initially), we simply use the splat operator to ensure that the end result is always an array which consists of the current `@sequence` followed by the `code`.",
		"created_at" : "2016-09-14T07:39:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78699400,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Why *four* spaces, not two?",
		"created_at" : "2016-09-14T07:40:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78700029,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "The only other place this is used is in the tests. And I'd rather not use constants that are defined inside the to-be-tested class.",
		"created_at" : "2016-09-14T07:45:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78702015,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Just because it's in a module hence 2+2.",
		"created_at" : "2016-09-14T08:01:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78702166,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sorry, higher-level: why do we need a `@sequence` variable now and didn't before?",
		"created_at" : "2016-09-14T08:02:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78702289,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Used in `strip_ansi` above?",
		"created_at" : "2016-09-14T08:04:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78800522,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "So we can use chaining like `Tty.red.underline`.",
		"created_at" : "2016-09-14T17:53:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78802097,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It feels like this might be done nicer by returning actual instances?",
		"created_at" : "2016-09-14T18:01:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78805220,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Or if not: can we split it into more methods to make what's going on more obvious.",
		"created_at" : "2016-09-14T18:17:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78813005,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Ah, I missed that. However, how would I do this? The regex needs a literal `'\\033\\['`, while the `to_s` method needs the escaped `\"\\033\\[\"`.",
		"created_at" : "2016-09-14T18:54:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78813893,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I think returning actual instances would only complicate this. And what do you want to split into more methods here? There's only one `each` loop defining methods, how do you split an `each` loop?",
		"created_at" : "2016-09-14T18:58:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78818067,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Was this left in by accident? Doesn't the first line of `colorize_text_before_colon` take care of this?",
		"created_at" : "2016-09-14T19:16:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78826011,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Yes, good catch.",
		"created_at" : "2016-09-14T19:54:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78903538,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Ah I see, fine as-is then 👍 ",
		"created_at" : "2016-09-15T07:28:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 78904218,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I don't know, really. I just find the current implementation confusing; it's not obvious that it's for changing and how the `@sequence` stuff works.\r\n\r\nSome vague thoughts:\r\n```ruby\r\n@sequence ||= []\r\n@sequence << code\r\nself\r\n```\r\nsignals intent a bit more. Even then, I'd be tempted to make a module-level method that is called `append_code` that encapsulates this logic so the `define_singleton_method` just ends up calling it. Similarly with `[*@sequence].empty?` below; having that be a separate module-level method would be good. Finally, using an attribute reader for `sequence` seems better than having raw access given how it's intended to be used. ",
		"created_at" : "2016-09-15T07:33:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79092536,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Ok, I changed it to\r\n\r\n```ruby\r\n@sequence ||= []\r\n@sequence << code\r\nself\r\n```\r\n\r\nI don't see why there is a need for an attribute reader, because `sequence` is only used internally.",
		"created_at" : "2016-09-16T01:04:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79126036,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I still think it would be good to split this into separate intent-signaling methods. I have my head around the `@sequence` stuff now but it's still a lot more complex to understand from the previous code. My preference is self-documenting code by splitting things into multiple methods that explain clearly what they do through their names. If you'd rather not do that: please add a lot more comments explaining what this is doing, how and why. Thanks!",
		"created_at" : "2016-09-16T08:28:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79249955,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The automatic detection of the prefix that needs to be styled/underlined might be problematic here, e.g. if the class is nested in a module, e.g. `MyModule::MyClass`. This could be somewhat mitigated by splitting at `:_` (`_` denoting a space as GitHub unfortunately strips it) but I wonder if a simpler and more robust solution could be achieved by making the prefix and the actual error message separate arguments to `Formatter.error`, `Formatter.warning` et al.",
		"created_at" : "2016-09-16T20:58:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79250190,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This looks like a superfluous empty line to me.",
		"created_at" : "2016-09-16T20:59:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79250232,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This looks like a superfluous empty line to me.",
		"created_at" : "2016-09-16T21:00:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79250779,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Using `Formatter.success` in this and several other contexts below where it encloses a formula/dependency name feels somewhat strange to me. Should there be a dedicated formatter for these cases?",
		"created_at" : "2016-09-16T21:03:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79251035,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Why the change? In any case, this feels misplaced as this is completely unrelated to the changes in this PR (unless I'm missing something).",
		"created_at" : "2016-09-16T21:05:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79251903,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I don't feel too strongly about this, but my impression is we want to avoid introducing the new hash syntax until we update our RuboCop configuration and make a sweeping change, thus `:color => :blue` here and similarly in other places.",
		"created_at" : "2016-09-16T21:11:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79254771,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Why is this excluding `-`, `+`, and `:` that are clearly characters that stay above the baseline? Think about the `:` in `Formatter.url(\"http://example.com\")`; not underlining this colon looks really weird.\r\n\r\nAside from that, I'm really against this kind of micro-optimization, not to mention that it only looks decent for letters where the descender spans the width of the entire character, e.g. `g` in most fonts, but looks like something is missing for letters like `p`. The problem with the underline is not that it touches descenders but the underline itself that is undesirable from a typographical point of view. Furthermore, this manual treatment will defeat proper treatment by the font and/or the font rendering of my terminal (assuming it did have some clever handling of underlines like a word processor often has).\r\n\r\nFinally, check out e.g. the `Security` link on the bottom of every GitHub page. If you hover over it, the whole text is underlined (including the `y`). Like everyone else, we shouldn't bother special-casing this.\r\n\r\nPractical suggestions:\r\n\r\n- Underline all characters of a URL unconditionally.\r\n- Underline all characters of an error/warning label unconditionally or simply avoid underlining if this feels like it looks too ugly (and yes, underlines are always ugly).",
		"created_at" : "2016-09-16T21:31:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79255060,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Just a nit pick, but this actually colorizes the text before the colon *and* the colon itself (which IMO is good from a stylistic point of view), so the method name isn't 100% spot-on.",
		"created_at" : "2016-09-16T21:33:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79255783,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Should we optimize for the next invocation and initialize this to an empty array instead? I guess the downside would be that this method would need to check for both `@sequence.nil?` and `@sequence.empty?` in its first line, though I that's probably only going to be the case for `\"#{Tty}\"` or `Tty.to_s` which would be bogus anyway, right?",
		"created_at" : "2016-09-16T21:38:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79257374,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I agree. I only changed this so it would show up in the diff, so we could discuss a better name or format.",
		"created_at" : "2016-09-16T21:51:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79257682,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Yes, this is unrelated, somehow got in from working on the coverage PR.",
		"created_at" : "2016-09-16T21:53:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79257735,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "`colorize_label`, maybe? ",
		"created_at" : "2016-09-16T21:53:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79258037,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I can live with your practical suggestions. 👍 ",
		"created_at" : "2016-09-16T21:56:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79258178,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "That's exactly why I had a check for `[*@sequence].empty?` here before, which would have included both cases.",
		"created_at" : "2016-09-16T21:57:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79258631,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "All these empty lines are so the places where `Tty` is used instead of a `Formatter` show up in the diff. I wasn't sure if these warrant a `Formatter`, or what to name it.",
		"created_at" : "2016-09-16T22:01:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79258834,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I suppose we could do something like `Formatter.error(e, label: e.class.name)`.",
		"created_at" : "2016-09-16T22:03:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79278112,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Judging from what I've seen in the code, `Formatter.error([<label>, ]<message>)` would be more practical, as I don't think it makes sense to omit “label” (or more precisely the thing that should be styled). This is how it would be used and what it would yield:\r\n\r\n```ruby\r\nFormatter.error(\"Custom label\", \"Message\") # => \"_Custom label:_ Message\"\r\nFormatter.error(\"Error message\") # => \"_Error:_ Error message\"\r\n```\r\n\r\nHere, `_<whatever>_` denotes the styled part. Would that work?",
		"created_at" : "2016-09-17T07:08:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79278193,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I see; this makes sense. I didn't realize this and (if mentioned) overlooked it in previous comments. I think it's important to take our first few steps in the right direction (like with the error message and URL formatting), but we don't necessarily have to eliminate all direct uses of `Tty` in this PR, though we should consider doing so in the not too distant future. But as usual, naming is hard as is identifying the necessary styles while consolidating the probably too many different styles currently in use.",
		"created_at" : "2016-09-17T07:13:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79278218,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "How about `Formatter.identifier` or `Formatter.name`?",
		"created_at" : "2016-09-17T07:15:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79278256,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Yep, `colorize_label` or possibly a more opaque `style_label` would have worked. (I guess that method name is no longer needed given the changes you pushed since then.)",
		"created_at" : "2016-09-17T07:17:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79278334,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I have to agree with Mike that I find the splatting and collecting a bit harder to follow. A possibly easier to read and still succinct alternative for the check could be:\r\n\r\n```ruby\r\nreturn \"\" if (@sequence || []).empty?\r\n```",
		"created_at" : "2016-09-17T07:23:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79279240,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I think I'd like to preserve the boldface in the first line (`#{Tty.bold}Please report this bug:#{Tty.reset}`) and, since we're touching this anyway, adjust the indentation of the second line to two spaces which better aligns with most (if not all) similar user-visible output.",
		"created_at" : "2016-09-17T08:27:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79279335,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Also, in this specific case I would prefer to swap the underline for something else. `Tty.bold` would be fine by me, but I'm definitely open to alternative suggestions. It's just that the underline seriously and unnecessarily degrades legibility of those hex numbers.",
		"created_at" : "2016-09-17T08:34:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79279415,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I would personally not bother highlighting this URL, as it's a command line argument to be copy-pasted together with the `curl` rather than a URL we expect users to check out in isolation (most, if not all, other instances where `Formatter.url` is used). But I don't feel overly strongly about this.",
		"created_at" : "2016-09-17T08:37:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79279515,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "IMO, it would be nicer to highlight the individual elements and keep the delimiting comma and space unstyled instead of styling the entire string only after joining the array elements.",
		"created_at" : "2016-09-17T08:42:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79279639,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Sorry if I'm making you go back and forth a bit, but after giving this some more thought, I think the combined handling of label and message string just complicates things without providing sufficient benefit. I think it would be best to keep the concatenation of label and message string on the call site and let `Formatter.error` et al. just wrap the given string like other `Formatter` methods. I.e. it should be used as follows:\r\n\r\n```ruby\r\nFormatter.error(\"FAILED\")\r\n\"#{Formatter.error(\"Error:\")} #{message}\"\r\n\"#{Formatter.error(\"READ THIS:\")} #{Formatter.url(\"https://example.com/\")}\"\r\n```",
		"created_at" : "2016-09-17T08:50:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79279659,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Would personally prefer to stick with the underline only (no color), but I don't feel very strongly about this.",
		"created_at" : "2016-09-17T08:51:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79279827,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Please ignore my most recent comment; it doesn't make much sense after reviewing the code once more. https://github.com/Homebrew/brew/pull/823#r79279639 is a much saner suggestion.",
		"created_at" : "2016-09-17T09:03:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79290806,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I think this would be a step back, as this gets us to basically start *formatting* on the call side again, which kinda defeats the purpose of having a formatter in the first place.",
		"created_at" : "2016-09-17T19:50:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79315955,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "I kinda agree. How do you suggest we proceed? The following works for me:\r\n\r\n```ruby\r\nFormatter.error(message) # default label \"Error\"\r\nFormatter.error(message, label: \"READ THIS\") # custom label\r\n```\r\n\r\nBut I don't know how to deal with the case where there's neither a label nor a message, but just a string that should be styled like the error label. Should that be a separate method?",
		"created_at" : "2016-09-18T21:58:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79327191,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Without a label, the message will be styled the same as the label\r\n\r\n`Formatter.error(\"This string is red.)`\r\n\r\n`Formatter.error(\"This message is not red.\", label: \"Red Label\")`.",
		"created_at" : "2016-09-19T04:35:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 79336170,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I think we can leave this as-is. I don't even think *optimizing* would be worth it, since you will alway lose the last `[]`.",
		"created_at" : "2016-09-19T07:16:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 81448790,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> I don't feel too strongly about this, but my impression is we want to avoid introducing the new hash syntax until we update our RuboCop configuration and make a sweeping change\r\n\r\nThis was done.",
		"created_at" : "2016-10-01T11:42:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 81448790,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "> I don't feel too strongly about this, but my impression is we want to avoid introducing the new hash syntax until we update our RuboCop configuration and make a sweeping change\r\n\r\nThis was done.",
		"created_at" : "2016-10-01T11:42:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 81448792,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'm fine with highlighting it.",
		"created_at" : "2016-10-01T11:42:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 81448805,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I like the current version as-is.",
		"created_at" : "2016-10-01T11:43:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 81448805,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I like the current version as-is.",
		"created_at" : "2016-10-01T11:43:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 81448808,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Also don't feel strongly either way.",
		"created_at" : "2016-10-01T11:43:31Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 823
	},
	{
		"id" : 81448812,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Actually, no, let's leave it colourless for now.",
		"created_at" : "2016-10-01T11:43:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 823
	},
	{
		"id" : 76644795,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "This isn't doing what it is supposed to do:\r\n\r\n```console\r\n$ brew irb\r\n==> Interactive Homebrew Shell\r\nExample commands available with: brew irb --examples\r\nirb(main):001:0> Utils::Bottles::Bintray.package(\"gcc\")\r\n=> nil\r\nirb(main):002:0> Utils::Bottles::Bintray.package(\"gcc@6.2\")\r\n=> \"gccAT6.2\"\r\nirb(main):003:0> Utils::Bottles::Bintray.package(\"crf++\")\r\n=> nil\r\n```\r\n\r\nYou'll need to either append a `sub` (without bang) to the `tr` or introduce a local variable:\r\n\r\n```ruby\r\nformula_name.to_s.tr(\"+\", \"x\").sub(/(.)@(\\d)/, \"\\\\1AT\\\\2\")\r\n\r\n# or\r\n\r\npackage_name = formula_name.to_s.dup\r\npackage_name.tr!(\"+\", \"x\")\r\npackage_name.sub!(/(.)@(\\d)/, \"\\\\1AT\\\\2\")\r\npackage_name\r\n\r\n# or\r\n\r\npackage_name = formula_name.to_s.tr(\"+\", \"x\")\r\npackage_name.sub!(/(.)@(\\d)/, \"\\\\1AT\\\\2\")\r\npackage_name\r\n```\r\n\r\n(I'm favoring the 1st variant, that can be split across multiple lines to improve readability, if that's desired.)",
		"created_at" : "2016-08-29T17:04:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 832
	},
	{
		"id" : 76645426,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Thanks. I did actually test this a bit, but I managed to confuse myself by doing:\r\n\r\n```ruby\r\nfname = Formula[\"wget\"].name\r\nfname.to_s.sub!(/(.)@(\\d)/, \"\\\\1AT\\\\2\")\r\n=> nil\r\nfname\r\n=> \"wget\"\r\n```\r\nI managed to miss the `fname` part wouldn't be automatically triggered.",
		"created_at" : "2016-08-29T17:08:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 832
	},
	{
		"id" : 76789858,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Pull this logic into `all_development_tools_checks` instead to avoid duplication and using `OS.mac?` here.",
		"created_at" : "2016-08-30T13:05:03Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 833
	},
	{
		"id" : 76862349,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "I've never understood the logic behind the full path thing, but figured there was some esoteric reason for this rule that I had not yet come to fully appreciate.",
		"created_at" : "2016-08-30T19:24:24Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 834
	},
	{
		"id" : 77456120,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "We're still mostly using hash rockets until we mass change them at some later point. Were still on Ruby 1.8 until recently!",
		"created_at" : "2016-09-04T17:49:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77456126,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This will probably need to be a fully-qualified path.",
		"created_at" : "2016-09-04T17:50:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77456134,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "or alternatively you could return `name` or `install_name` rather than `path` and build the fully-qualified one where it's needed?",
		"created_at" : "2016-09-04T17:50:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77456137,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Similarly here wrt hash rockets.",
		"created_at" : "2016-09-04T17:51:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77456149,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I was wondering if things would 💥 if we used the `@install_name` as the actual value for `name` instead? That means we could avoid having to add new fields. Thoughts?",
		"created_at" : "2016-09-04T17:51:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77457379,
		"user" : {
			"login" : "penman"
		},
		"body" : "I was afraid to try. :P\r\n\r\nI imagine `Formula#name` is used pretty widely across Homebrew. This would, for example, change the install prefix for a formula based on the alias used to install it, which doesn't seem like a great idea to me.",
		"created_at" : "2016-09-04T19:34:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77457392,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "A good argument 👍 ",
		"created_at" : "2016-09-04T19:35:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77457398,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Could maybe be something like `unresolved_name` or something?",
		"created_at" : "2016-09-04T19:36:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77457401,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "(naming is hard)",
		"created_at" : "2016-09-04T19:36:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77457473,
		"user" : {
			"login" : "penman"
		},
		"body" : "`unresolved_name` would imply to me that it could be a URL, for a file path, which currently it'll never be…",
		"created_at" : "2016-09-04T19:41:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77457488,
		"user" : {
			"login" : "penman"
		},
		"body" : "Doesn't look like it's possible to use hash rockets to declare a keyword argument.",
		"created_at" : "2016-09-04T19:42:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77457490,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`alias_name`?",
		"created_at" : "2016-09-04T19:42:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77457495,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "or, if we went with the full path for above, `alias_path`",
		"created_at" : "2016-09-04T19:43:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77457503,
		"user" : {
			"login" : "penman"
		},
		"body" : "(I'll change the calls to `new` to use hash rockets, though.)",
		"created_at" : "2016-09-04T19:43:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77457510,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Ah, my mistake, missed this was a kwarg. Fine as-is then 👍 ",
		"created_at" : "2016-09-04T19:43:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77457513,
		"user" : {
			"login" : "penman"
		},
		"body" : "Didn't occur to me that I could return the path to the alias, but it's obvious in hindsight!",
		"created_at" : "2016-09-04T19:44:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77457544,
		"user" : {
			"login" : "penman"
		},
		"body" : "How about we go for `alias_path`, and make it return `nil` rather than the formula path if an alias wasn't used?\r\n\r\nThen we could use `formula.alias_path || formula.path` when passing a reference to it, and the meaning would be clearer all round.",
		"created_at" : "2016-09-04T19:47:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77457574,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sounds good 👍. ",
		"created_at" : "2016-09-04T19:49:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77552309,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Think this logic may be worth pulling into a formula method that just does this `||`. `alias_path_or_path` or something with a better name?",
		"created_at" : "2016-09-05T19:36:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77552333,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Probably worth doing `(alias_path.to_s if alias_path)` just to match style below.",
		"created_at" : "2016-09-05T19:37:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77555566,
		"user" : {
			"login" : "penman"
		},
		"body" : "I thought about this. My reasoning for leaving it as-is is that having a method called `alias_path_or_path` wouldn't really be reducing repetition at all. It just occurred to me that `specified_path` would work as a name, though, so I'll move it into a method.",
		"created_at" : "2016-09-05T21:03:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77803477,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd maybe put this in `source` below and perhaps consider overriding `path` there unless it would break existing functionality relying on this in the tab.",
		"created_at" : "2016-09-07T11:22:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77803480,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Same here.",
		"created_at" : "2016-09-07T11:22:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77898167,
		"user" : {
			"login" : "penman"
		},
		"body" : "As far as I can tell nothing uses source.path, so this should be 👍",
		"created_at" : "2016-09-07T20:33:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77898167,
		"user" : {
			"login" : "penman"
		},
		"body" : "As far as I can tell nothing uses source.path, so this should be 👍",
		"created_at" : "2016-09-07T20:33:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 863
	},
	{
		"id" : 77456193,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This is a bit different to what I think we want. Instead of considering this satisfied it should be considered unsatisfied, refuse to upgrade and print out a message telling the user to `unpin`.",
		"created_at" : "2016-09-04T17:56:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 864
	},
	{
		"id" : 77461612,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "Ah, I see, will change it this way then and ask for the comments.",
		"created_at" : "2016-09-05T00:32:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 864
	},
	{
		"id" : 77556585,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "TODO: remove.",
		"created_at" : "2016-09-05T21:38:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 864
	},
	{
		"id" : 77799911,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I wonder if it's worth making this an `onoe` and using `next` so it'll print a warning for all of them rather than just the first?",
		"created_at" : "2016-09-07T10:52:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 864
	},
	{
		"id" : 77800015,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "May be worth clarifying a little bit `as installing formula.full_name requires the latest version of pinned_deps`",
		"created_at" : "2016-09-07T10:53:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 864
	},
	{
		"id" : 77456657,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Not sure what `rsrl_url` means, can you use a longer name?",
		"created_at" : "2016-09-04T18:40:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 871
	},
	{
		"id" : 77456667,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can you document this?",
		"created_at" : "2016-09-04T18:41:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 871
	},
	{
		"id" : 77678605,
		"user" : {
			"login" : "scpeters"
		},
		"body" : "Yeah, I guess that's the issue with using `InReplace`. I can think of two options:\r\n\r\n1. Figure out the range of line numbers where the appropriate spec starts and end, and limit the `InReplace` call to those lines (not sure if `InReplace` can do that, but I've done something similar with `sed`).\r\n\r\n2. Modify the formula data structure and serialize it to the file. This would probably strip comments and seems like it would be hard to get right.",
		"created_at" : "2016-09-06T17:16:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 871
	},
	{
		"id" : 77679636,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "It'll be fine with inreplace, just needs an appropriate regex, which shouldn't be too hard, I just haven't looked at it yet. Basically, (devel do)(one url)(any number of mirrors)(version)(anything)(end) -> \\1\\2\\3\\5\\6",
		"created_at" : "2016-09-06T17:22:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 871
	},
	{
		"id" : 77469533,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "You shouldn't need to do this anymore if you're having `#shell_profile` call to the fully-qualified name.",
		"created_at" : "2016-09-05T04:25:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 876
	},
	{
		"id" : 77552230,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's just go for: `echo \"Checking out $UPSTREAM_BRANCH in $DIR...\"`\r\n\r\nand, either here or a sensible place below, do:\r\n```bash\r\n  echo \"To checkout $INITIAL_BRANCH in $DIR run:\"\r\n  echo \"  'cd $DIR && git checkout $INITIAL_BRANCH\"\r\n```\r\n\r\n Want to avoid recommending setting `HOMEBREW_DEVELOPER` for now; I've got a solution incoming for this problem.",
		"created_at" : "2016-09-05T19:33:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 879
	},
	{
		"id" : 77800120,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I reckone you can revert all this stuff for now.",
		"created_at" : "2016-09-07T10:53:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 879
	},
	{
		"id" : 77800120,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I reckone you can revert all this stuff for now.",
		"created_at" : "2016-09-07T10:53:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 879
	},
	{
		"id" : 77939401,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "To be pedantic, you need to quote `$DIR` and `$INITIAL_BRANCH` for robustness:\r\n\r\n```bash\r\necho \"  cd $(printf %q \"$DIR\") && git checkout $(printf %q \"$INITIAL_BRANCH\")\"\r\n```\r\n\r\nBut I guess I'm just being pedantic.\r\n\r\nP.S. In Zsh the completely robust version (with even nicer output than the Bash version above) would be\r\n\r\n```zsh\r\ncd \"${(qq)DIR}\" && git checkout \"${(qq)INITIAL_BRANCH}\"\r\n```\r\n\r\nThis is one of the things I dislike about Bash: wimpy parameter expansion.",
		"created_at" : "2016-09-08T02:59:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 879
	},
	{
		"id" : 77939401,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "To be pedantic, you need to quote `$DIR` and `$INITIAL_BRANCH` for robustness:\r\n\r\n```bash\r\necho \"  cd $(printf %q \"$DIR\") && git checkout $(printf %q \"$INITIAL_BRANCH\")\"\r\n```\r\n\r\nBut I guess I'm just being pedantic.\r\n\r\nP.S. In Zsh the completely robust version (with even nicer output than the Bash version above) would be\r\n\r\n```zsh\r\ncd \"${(qq)DIR}\" && git checkout \"${(qq)INITIAL_BRANCH}\"\r\n```\r\n\r\nThis is one of the things I dislike about Bash: wimpy parameter expansion.",
		"created_at" : "2016-09-08T02:59:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 879
	},
	{
		"id" : 77961881,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Not quoting in `echo` is fine, I think, but thanks for the review anyway @zmwangx; definitely would rather have pedantry than the other extreme!",
		"created_at" : "2016-09-08T08:06:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 879
	},
	{
		"id" : 77555454,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "Shouldn't these be in the same order as above in the ruby version?",
		"created_at" : "2016-09-05T20:58:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 77556254,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "I may be wrong here, but this seem to do the same as `command_path` in help.rb now, but much nicer. If it does, we can just use this one instead, but I'm not sure where it should live.",
		"created_at" : "2016-09-05T21:26:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 77556259,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "See https://github.com/Homebrew/brew/pull/881/files#r77556254",
		"created_at" : "2016-09-05T21:27:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 77559434,
		"user" : {
			"login" : "chdiza"
		},
		"body" : "Isn't this going to add overhead to every brew incantation?  I'm all for making the dev-cmd's available to anyone, but I'm not sure I see why there needs to be this git config file trick.  I can't think of why someone would want HOMEBREW_DEVELOPER *un*set but have something in the repo's gitconfig saying \"I'm a developer\".",
		"created_at" : "2016-09-05T23:34:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 77883935,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Updated for consistency, thanks.",
		"created_at" : "2016-09-07T19:02:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 77883935,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Updated for consistency, thanks.",
		"created_at" : "2016-09-07T19:02:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 77885227,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "The overhead is tiny (0.004s on my machine) and already exists for analytics checks.\r\n\r\n\r\n\r\n\r\n\r\n> I can't think of why someone would want HOMEBREW_DEVELOPER unset but have something in the repo's gitconfig saying \"I'm a developer\".\r\n\r\nThat's kinda the point of this PR 😉 ",
		"created_at" : "2016-09-07T19:10:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 77885227,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "The overhead is tiny (0.004s on my machine) and already exists for analytics checks.\r\n\r\n\r\n\r\n\r\n\r\n> I can't think of why someone would want HOMEBREW_DEVELOPER unset but have something in the repo's gitconfig saying \"I'm a developer\".\r\n\r\nThat's kinda the point of this PR 😉 ",
		"created_at" : "2016-09-07T19:10:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 77885385,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Good point, done.",
		"created_at" : "2016-09-07T19:11:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 77885385,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Good point, done.",
		"created_at" : "2016-09-07T19:11:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 77885391,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Good point, done.",
		"created_at" : "2016-09-07T19:11:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 77889990,
		"user" : {
			"login" : "chdiza"
		},
		"body" : "> That's kinda the point of this PR\r\n\r\nAnd that's what I don't think I understand.  I thought the point was to stop requiring HOMEBREW_DEVELOPER be set in order to use the dev-cmds (et al).  Why not just remove the \"don't do anything unless `HOMEBREW_DEVELOPER` is set\" guard on the dev-cmds (et al), instead of checking and setting things in a gitconfig to stealthily set HOMEBREW_DEVELOPER?",
		"created_at" : "2016-09-07T19:42:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 77890314,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Good question. Basically because we want `brew update` and other things that change behaviour (e.g. printing backtraces) to be different for Homebrew developers.",
		"created_at" : "2016-09-07T19:44:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 77892332,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "Just some nitpicking, but I thought the other implementation, `interal_command_path`, was much cleaner. I never liked the not quite switch statement/list of ifs this turned out to.",
		"created_at" : "2016-09-07T19:57:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 77892332,
		"user" : {
			"login" : "maxnordlund"
		},
		"body" : "Just some nitpicking, but I thought the other implementation, `interal_command_path`, was much cleaner. I never liked the not quite switch statement/list of ifs this turned out to.",
		"created_at" : "2016-09-07T19:57:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 77935145,
		"user" : {
			"login" : "chdiza"
		},
		"body" : "Yeah, but that's compatible with not using the gitconfig trick.  I still don't see what the point of the gitconfig modifications are.  If we want certain cmds to always exhibit dev-modeish behavior, then those cmds should just stop checking for developerhood, rather than being tricked into thinking they're dealing with a developer.  The non-dev cmds can continue checking for developerhood.",
		"created_at" : "2016-09-08T01:51:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 881
	},
	{
		"id" : 78126243,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Can we use `Utils.popen_read` instead here? Backticks are inconsistent with the rest of the file here... and kind of gross to look at 😄.",
		"created_at" : "2016-09-09T04:06:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 897
	},
	{
		"id" : 78135911,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-09-09T06:52:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 897
	},
	{
		"id" : 78135959,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Also is it worth using `gsub`? I'd also favour `//` regexes unless they contain `/`.",
		"created_at" : "2016-09-09T06:53:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 897
	},
	{
		"id" : 78175254,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "You mean `gsub` instead of `.delete.sub` or instead of only `sub`?",
		"created_at" : "2016-09-09T13:00:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 897
	},
	{
		"id" : 78176348,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Either.",
		"created_at" : "2016-09-09T13:07:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 897
	},
	{
		"id" : 78183017,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Leaving as is because I don't think having a complex regex here is worth it.",
		"created_at" : "2016-09-09T13:52:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 897
	},
	{
		"id" : 78183655,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Single quotes is probably a Rubocop violation given Homebrew's Rubocop config?",
		"created_at" : "2016-09-09T13:55:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 897
	},
	{
		"id" : 78185263,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Feels weird on hindsight to return a comma-separated string. `.delete(\"()\\\"\\n \").split(\",\")` seems to do what you want and return an array.",
		"created_at" : "2016-09-09T14:05:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 897
	},
	{
		"id" : 78210106,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Speaking of RuboCop, when was the last time someone actually ran it? Seems there are thousands of violations.",
		"created_at" : "2016-09-09T16:35:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 897
	},
	{
		"id" : 78210350,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "We mass-fixed core code pre-separation, so a while ago. There is stuff Rubocop skips over automatically fixing  though, as well as us having changed various Rubocop rules between then & now.",
		"created_at" : "2016-09-09T16:36:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 897
	},
	{
		"id" : 78754475,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "I don’t think we need this line because the file is sourced rather than executed.",
		"created_at" : "2016-09-14T14:04:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 901
	},
	{
		"id" : 78766799,
		"user" : {
			"login" : "elyscape"
		},
		"body" : "Oh, good catch. That was there for debugging purposes. Will remove.",
		"created_at" : "2016-09-14T15:02:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 901
	},
	{
		"id" : 79306372,
		"user" : {
			"login" : "chaoren"
		},
		"body" : "Please change `~` to `$HOME` so it can get expanded in quotes.",
		"created_at" : "2016-09-18T13:56:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 901
	},
	{
		"id" : 79306537,
		"user" : {
			"login" : "chaoren"
		},
		"body" : "Suppose, in a dystopian future where packages with spaces in their names exist, wouldn't `inst[@]` be more correct than `inst[*]` here?",
		"created_at" : "2016-09-18T14:06:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 901
	},
	{
		"id" : 79310641,
		"user" : {
			"login" : "elyscape"
		},
		"body" : "Ideally yes, but unfortunately `compgen -W` only takes a single argument, which it then splits by the value(s) of `IFS`. `inst[@]` expands to multiple values, which causes this command to fail.",
		"created_at" : "2016-09-18T17:25:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 901
	},
	{
		"id" : 79311780,
		"user" : {
			"login" : "elyscape"
		},
		"body" : "Fixed.",
		"created_at" : "2016-09-18T18:15:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 901
	},
	{
		"id" : 79311782,
		"user" : {
			"login" : "elyscape"
		},
		"body" : "Fixed.",
		"created_at" : "2016-09-18T18:15:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 901
	},
	{
		"id" : 78274057,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I reckon it's worth just making this `/Applications` as that's the default location for copy-pasting and anyone else will figure out it needs to be different. ",
		"created_at" : "2016-09-10T08:44:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 904
	},
	{
		"id" : 78278974,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "👍 Done.",
		"created_at" : "2016-09-10T15:30:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 904
	},
	{
		"id" : 79273889,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I'm sure there is a better place/way to do this. Could need some help here, @jawshooah and @mwean.",
		"created_at" : "2016-09-17T02:06:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 79286334,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "How about the following?\r\n\r\n```ruby\r\nUtils.popen_read(\"defaults\", \"read\", \".GlobalPreferences\", \"AppleLanguages\").scan(/[^ \\n\"(),]+/)\r\n```",
		"created_at" : "2016-09-17T15:28:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 79290720,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Up to you but I'd pull this back to being two-chars in from `@language`.",
		"created_at" : "2016-09-17T19:43:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 79290724,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-09-17T19:44:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 79291090,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "This is the style according to the current RuboCop config for Cask, so I'm leaving this as-is for now as it is used throughout `cask/*`.",
		"created_at" : "2016-09-17T20:09:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 79291890,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : ":cool:. Would be good after https://github.com/Homebrew/brew/pull/989 to try and get a single style and `rubocop`/`brew style` invocation working for both so we can add `brew style` to CI.",
		"created_at" : "2016-09-17T21:01:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 79314105,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Technically, this will return `nil` if there's no default language; previously it returned an empty string. I guess it doesn't matter in practice as there's a slim (or even zero?) chance of this macOS setting to be set to an empty array. Still wanted to point this out.",
		"created_at" : "2016-09-18T20:15:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 79334884,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "> there's a slim (or even zero?) chance of this macOS setting to be set to an empty array\r\n\r\nThere is only one way I can think of this could fail: Manually changing/deleting `.GlobalPreferences`, which is highly unlikely, so I think we're good here. ",
		"created_at" : "2016-09-19T07:01:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 81478491,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "You could clean this up a bit by making `language_eval` return a value instead of having it set `@language`. So here you'd have `@language ||= language_eval`...",
		"created_at" : "2016-10-02T21:33:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 81478491,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "You could clean this up a bit by making `language_eval` return a value instead of having it set `@language`. So here you'd have `@language ||= language_eval`...",
		"created_at" : "2016-10-02T21:33:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 81478504,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "...and you could get rid of this early return...",
		"created_at" : "2016-10-02T21:33:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 81478513,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "...and you could remove the `@language =` here...",
		"created_at" : "2016-10-02T21:34:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 81478513,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "...and you could remove the `@language =` here...",
		"created_at" : "2016-10-02T21:34:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 81478515,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "...and here.",
		"created_at" : "2016-10-02T21:34:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 81479546,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Seems like `each` is a better fit here than `any?` since you're not using the return value, as a boolean or otherwise.",
		"created_at" : "2016-10-02T22:27:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 81479546,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Seems like `each` is a better fit here than `any?` since you're not using the return value, as a boolean or otherwise.",
		"created_at" : "2016-10-02T22:27:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 81482218,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I'll leave this as is because of https://github.com/Homebrew/brew/pull/906/files/3def3b805b139960f11af68e07e3295c6dbe92cb#diff-f85d4948a976b9727959680dbfe1118aR16.\r\n\r\nOtherwise I'd have to call `@dsl.language` to actually “evaluate” the languages, which kind of defeats the purpose of having a `language_eval` method.",
		"created_at" : "2016-10-03T00:46:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 906
	},
	{
		"id" : 78283738,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "You can remove the `cmds` line from the end of this block now.",
		"created_at" : "2016-09-10T20:50:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 910
	},
	{
		"id" : 78283739,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Same here.",
		"created_at" : "2016-09-10T20:50:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 910
	},
	{
		"id" : 78281605,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "`field` should be `key`.",
		"created_at" : "2016-09-10T18:21:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 912
	},
	{
		"id" : 78282039,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "https://github.com/Homebrew/brew/pull/915",
		"created_at" : "2016-09-10T18:50:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 912
	},
	{
		"id" : 78282046,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "👍 ",
		"created_at" : "2016-09-10T18:51:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 912
	},
	{
		"id" : 78285436,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I don't know what this should be doing, but currently it ends up with `coverage_args << \"--coverage\"` no matter what.",
		"created_at" : "2016-09-10T23:14:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 914
	},
	{
		"id" : 78285460,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Is `test-bot` called with `--coverage` on Jenkins? If not, the `if ENV[\"JENKINS_HOME\"]` check should probably be on the same level as `if ARGV.include?(\"--coverage\")`.",
		"created_at" : "2016-09-10T23:17:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 914
	},
	{
		"id" : 78285625,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Shouldn't `coverage_args` be passed to the `--no-compat` tests?",
		"created_at" : "2016-09-10T23:29:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 914
	},
	{
		"id" : 78289829,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Nope, this is an intentional change but thanks 👍 ",
		"created_at" : "2016-09-11T07:57:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 914
	},
	{
		"id" : 79078051,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : " I assume the coverage bump from ~78 to ~83 comes from this change, right?",
		"created_at" : "2016-09-15T22:44:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 914
	},
	{
		"id" : 79125386,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yeh, could be. Not sure.",
		"created_at" : "2016-09-16T08:25:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 914
	},
	{
		"id" : 79125434,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "It'll certainly touch more code.",
		"created_at" : "2016-09-16T08:25:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 914
	},
	{
		"id" : 79126932,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "@MikeMcQuaid, might want to remove Coveralls support before merging, though.",
		"created_at" : "2016-09-16T08:34:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 914
	},
	{
		"id" : 79128501,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yeh, I'll strip all that stuff out.",
		"created_at" : "2016-09-16T08:45:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 914
	},
	{
		"id" : 78680495,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "extra space in \"that  complete\" here",
		"created_at" : "2016-09-14T03:11:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 951
	},
	{
		"id" : 78680510,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Line should end with a \".\"",
		"created_at" : "2016-09-14T03:11:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 951
	},
	{
		"id" : 80744642,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Missing a \"[\" here: \"--strictrun\" --> \"--strict[run\".",
		"created_at" : "2016-09-27T17:12:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 951
	},
	{
		"id" : 80747279,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "I'm not sure the logic here is ideal. It seems to have the effect of not showing `--include-aliases` in the list of options if you just try to complete `brew commands --`. But if you complete `brew commands --i`, it'll complete to `--include-aliases`, regardless of whether `--quiet` is already specified. And if `--quiet` is specified, trying to complete anything fills in `--include-aliases`. Is that intentional? The comment above seems to indicate that `--include-aliases` is a sub-option of `--quiet`, and that matches my reading of the source for `brew commands`.\r\n\r\nStrictly speaking, this might be the right behavior, but it feels a little odd from a usability perspective. I think it might be better to just present both `--quiet` and `--include-aliases` as options, along with a description for each, even though there's a dependency there.\r\n\r\nConcrete example: if you do `brew commands ` and hit tab, it first fills in `--quiet`, and if you hit tab again, it fills in `--include-aliases`. This feels a little odd to me, even though it might be technically correct. I feel like as a user, I'd rather see a menu with both `--quiet` and `--include-aliases` and a description of each, instead of them each popping up in turn.",
		"created_at" : "2016-09-27T17:23:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 951
	},
	{
		"id" : 80748699,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Good TODO. Was just going to leave a comment asking for this, but I see you've already considered it. Definitely would be nice to have, but not a reason to block shipping this.",
		"created_at" : "2016-09-27T17:29:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 951
	},
	{
		"id" : 81090451,
		"user" : {
			"login" : "joshka"
		},
		"body" : "This was the intent. It's a somewhat odd command in that it really only has the following valid forms according to the help (and reading the docs):\r\n```shell\r\nbrew commands\r\nbrew commands --quiet\r\nbrew commands --quite --include-aliases\r\n```\r\n\r\nLearning Zsh completions is hampered by documentation that is fairly obtuse. I kind of like the idea of leaving this in here as it gives someone coming later a very simple example of how to make a dependent flag available.\r\n\r\nThe naked `--i` behavior seems like it's a bug (but one that very likely doesn't matter a bunch).",
		"created_at" : "2016-09-29T08:48:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 951
	},
	{
		"id" : 81091899,
		"user" : {
			"login" : "joshka"
		},
		"body" : "I'm generally not a fan of TODOs in code, but didn't want to have this fall through the cracks / add to the complexity of this PR. This also implies some not obvious questions about whether we should show a description for every command, or instead reduce the shown commands to only the common commands (like how git does). If it's the latter, what does that list look like?",
		"created_at" : "2016-09-29T08:56:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 951
	},
	{
		"id" : 81091955,
		"user" : {
			"login" : "joshka"
		},
		"body" : "Fixed",
		"created_at" : "2016-09-29T08:57:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 951
	},
	{
		"id" : 81183530,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Good questions, which I don't know the answer to. But I don't think we need to answer those before merging this.",
		"created_at" : "2016-09-29T16:56:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 951
	},
	{
		"id" : 81183622,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "That makes sense. I have no problem leaving this as is, then.",
		"created_at" : "2016-09-29T16:56:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 951
	},
	{
		"id" : 80094031,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "note that this may be controversial to enforce on 10.11, but it doesn't bother me",
		"created_at" : "2016-09-22T17:33:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 956
	},
	{
		"id" : 80094655,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Aye, possibly. Since we've updated CI it's probably sensible to make sure people are using the same development tools we test against regardless. I'd tentatively consider 7.3.x on 10.11 an unsupported configuration by us at this point 😕.",
		"created_at" : "2016-09-22T17:36:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 956
	},
	{
		"id" : 80099741,
		"user" : {
			"login" : "chdiza"
		},
		"body" : "How can it be called unsupported if that's the only way to have the CLT?",
		"created_at" : "2016-09-22T17:59:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 956
	},
	{
		"id" : 80100175,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Because that's false.",
		"created_at" : "2016-09-22T18:01:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 956
	},
	{
		"id" : 80100294,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "It's not the only way to have the CLT. Apple have noted in Xcode 8.1's release notes that if you want the CLT on 10.11 you should be using the 7.3.1 CLT, not any 8.x CLT (which doesn't exist for 10.11). Presumably from that they're perfectly happy for people to mix & match Xcode/CLT versions going forwards.\r\n\r\nAlso worth noting, if you only have the CLT and not Xcode, you won't be forced to update anything.",
		"created_at" : "2016-09-22T18:01:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 956
	},
	{
		"id" : 80101233,
		"user" : {
			"login" : "chdiza"
		},
		"body" : "> Presumably from that they're perfectly happy for people to mix & match Xcode/CLT versions going forwards.\r\n\r\nI thought we'd been having a bunch of issues resulting from such mix-n-match on El Cap, and that people were being told \"don't use Xcode 8 with the 7.3 CLT on El Cap\".  Maybe I'm misremembering?  If I'm not, then we will be telling people \"don't use Xcode8 with the 7.3 CLT\", and also \"don't use Xcode 7.3.1 with the 7.3 CLT\", which amounts to \"don't use the CLT on El_Capitan unless you want to forego Xcode\".",
		"created_at" : "2016-09-22T18:06:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 956
	},
	{
		"id" : 80101683,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I thought it was dodgy, but if Apple themselves are pushing it in the Xcode 8.1 release notes I'm presuming they now consider it a valid configuration. I think the situation on 10.11 was that people _should_ install the CLT if they've upgraded to Xcode 8? Misty pushed a PR on that earlier this week IIRC.",
		"created_at" : "2016-09-22T18:08:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 956
	},
	{
		"id" : 78677853,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Should this be `>= \"8.1\"` or `> \"8.0\"` instead of `> 8.1`? 8.0 is the stable version now.",
		"created_at" : "2016-09-14T02:27:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 957
	},
	{
		"id" : 78678447,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Oops. It's supposed to be `>= \"8.1\"`, yeah. Nice spot.",
		"created_at" : "2016-09-14T02:38:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 957
	},
	{
		"id" : 78872511,
		"user" : {
			"login" : "dunn"
		},
		"body" : "Is it possible someone could have their repo at `/usr/local` but not their prefix?",
		"created_at" : "2016-09-15T00:54:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78888007,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Might also need to check writability in the `new_homebrew_repository.exist?` case. If `/usr/local/Homebrew` exists, is empty, but is *not* writable, subsequent `cp_r`'s will fail.",
		"created_at" : "2016-09-15T04:24:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78888335,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Feels a little redundant to print `to /usr/local/Homebrew` twice in quick succession (the second time is the from ... to ... below). Maybe just use `HOMEBREW_REPOSITORY migrated!` as the title (or `Homebrew repository migrated!` since I `HOMEBREW_REPOSITORY` is an internal env var and users don't need to know about it).",
		"created_at" : "2016-09-15T04:29:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78888354,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Also consider replacing `HOMEBREW_REPOSITORY` with `the Homebrew repository` here.",
		"created_at" : "2016-09-15T04:30:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78889765,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Why are `share/doc/homebrew/images` and `share/doc/homebrew` singled out? Shouldn't they be handled by `path.parent.rmdir_if_possible` below (assuming `rmdir_if_possible` does the job; I don't think it's enough though, see comment below)?",
		"created_at" : "2016-09-15T04:54:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78889840,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "I think we need a `rmdir -p` here, or `Library` for instance won't be removed even if empty, because when we got to its immediate children there was still this `Library/Homebrew` in the way.",
		"created_at" : "2016-09-15T04:56:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78890529,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Should this `return`?",
		"created_at" : "2016-09-15T05:08:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78890550,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Same here",
		"created_at" : "2016-09-15T05:09:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78891028,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "Let's explain the migration at the front of these error messages. Something like:...?\r\n\r\n> Homebrew is rearranging some furniture! Nothing will change about how you use Homebrew, but some files are moving to /usr/local/Homebrew to make the Sierra upgrade smoother. In order for this migration to succeed, ...\r\n\r\n(do we think this will make the Sierra upgrade smoother?)",
		"created_at" : "2016-09-15T05:15:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78891263,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "I think this will lose uncommitted changes; is it safe/wise to stash and pop?",
		"created_at" : "2016-09-15T05:19:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78891831,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Yes, explanations would be nice, and this can be combined with my suggestion in https://github.com/Homebrew/brew/pull/963#pullrequestreview-91901.",
		"created_at" : "2016-09-15T05:25:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78901417,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yeh but in that crazy case we want to avoid migration.",
		"created_at" : "2016-09-15T07:11:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78901442,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Should `odie`, thnaks.",
		"created_at" : "2016-09-15T07:11:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78901554,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-09-15T07:12:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78901578,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Should `odie`.",
		"created_at" : "2016-09-15T07:12:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78901670,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Ugh, probably (but only for folks with the same `update` flag set).",
		"created_at" : "2016-09-15T07:13:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78901727,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Good idea 👍 ",
		"created_at" : "2016-09-15T07:14:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78901748,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Good idea, will investigate.",
		"created_at" : "2016-09-15T07:14:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78901774,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sounds good.",
		"created_at" : "2016-09-15T07:14:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78901796,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Will just remove this section.",
		"created_at" : "2016-09-15T07:14:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 963
	},
	{
		"id" : 78884726,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "You'll need to actually pick up the changes I suggested [here](https://github.com/Homebrew/brew/issues/961#issuecomment-247051002). Plain version comparisons like this don't work especially well, you get situations where `10.10` is correctly reported as `OS X` but `10.7` is flagged as `macOS`.\r\n\r\nThe proposed change in the linked issue also allows you to fix the situation where Requirements have their own `@version` we shouldn't be ignoring. My proposed fix in the other issue isn't perfect, and will need some additional testing & tweaking, but it's closer.",
		"created_at" : "2016-09-15T03:29:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78886121,
		"user" : {
			"login" : "JLHwung"
		},
		"body" : "I'd better write a test for that.",
		"created_at" : "2016-09-15T03:53:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78886417,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Is this what it's supposed to be doing? If `OS.mac?` is `false`, how can it be `'macOS'`?",
		"created_at" : "2016-09-15T03:58:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78886672,
		"user" : {
			"login" : "JLHwung"
		},
		"body" : "I use `MacOS.os_name` before but CI complains that `MacOS` is uninitialized constant. Test always pass locally. So I thought may be it's the case when `OS.mac` is false?",
		"created_at" : "2016-09-15T04:02:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78889810,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I think you could just use `version >= \"10.12\"` here.",
		"created_at" : "2016-09-15T04:55:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78890404,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Seems arbitrary that this is the only place where this is happening.",
		"created_at" : "2016-09-15T05:06:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78902493,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Could this maybe just be called `name`?",
		"created_at" : "2016-09-15T07:20:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78903165,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "That's because you need to not use `MacOS` (or `OS.mac?`) outside of `Library/Homebrew/os` or  `Library/Homebrew/extend/os/`. Instead, have an `OS.name` method which uses subclasses in `Library/Homebrew/extend/os/mac` to set the right macOS name.\r\n\r\nAlternatively, edit `brew.sh` to set a `HOMEBREW_OS_NAME` (like `HOMEBREW_OS_VERSION` currently) which uses the correct version and then `OS.name` can just use `ENV[\"HOMEBREW_OS_NAME\"]`\r\n\r\nShout if you need more help with this!",
		"created_at" : "2016-09-15T07:25:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78947968,
		"user" : {
			"login" : "JLHwung"
		},
		"body" : "Like @DomT4 [said before](https://github.com/Homebrew/brew/pull/964#r78884726), plain version comparison doesn't work well as `\"10.7\" > \"10.12\"` in the plain string comparison.",
		"created_at" : "2016-09-15T12:07:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78969910,
		"user" : {
			"login" : "JLHwung"
		},
		"body" : "@MikeMcQuaid I think why CI complains is that when `ENV[\"HOMEBREW_TEST_GENERIC_OS\"]` is set, `MacOS` is not initialized but we can use `OS::Mac.os_name(ENV[\"HOMEBREW_OS_VERSION\"])` here so that both CI and macOS should be happy.\r\n\r\n> Alternatively, edit brew.sh to set a HOMEBREW_OS_NAME (like HOMEBREW_OS_VERSION currently) which uses the correct version and then OS.name can just use ENV[\"HOMEBREW_OS_NAME\"]\r\n\r\nIt think this is over complicated. Basically I aim to adding the pedantry in a single place so that when macOS 10.14 is released we don't have to search everywhere to remove multiple methods and their usage.",
		"created_at" : "2016-09-15T14:00:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78971423,
		"user" : {
			"login" : "JLHwung"
		},
		"body" : "@MikeMcQuaid I think `name` is a bit too general to use as a method name 😄. Well to tell you the truth I just find it cumbersome to rewrite all the commit messages from \"use os_name\" to \"use name\".",
		"created_at" : "2016-09-15T14:07:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78995204,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "In that case you can avoid making `version` a `Version` if it already is one and `10.12` doesn't need to be a `Version`.",
		"created_at" : "2016-09-15T15:41:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78995603,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sorry, this needs to use `ENV[\"HOMEBREW_OS_VERSION\"]` (not `OSX_VERSION`) and be in the OS class so it works on non-OS X platforms. Alternatively, all the OS X references in code need to be moved into `extend/os`.",
		"created_at" : "2016-09-15T15:42:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78998245,
		"user" : {
			"login" : "JLHwung"
		},
		"body" : "@MikeMcQuaid use `Version` here because\r\n- we need to pass `Version` to `os_name` on `macos_requirement`\r\n- `\"10.7\" > \"10.12\"` so plain string comparison is not sufficient",
		"created_at" : "2016-09-15T15:53:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78998758,
		"user" : {
			"login" : "JLHwung"
		},
		"body" : "I think I'd better revert this change to use `MacOS.os_name` unconditionally, and require `os/mac` on `test_formula_support`. Apparently the error message is meaningless on a Linux, isn't it?",
		"created_at" : "2016-09-15T15:55:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78999094,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "```ruby\r\nversion = Version(version) unless version.is_a? Version\r\n```",
		"created_at" : "2016-09-15T15:57:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78999205,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "```ruby\r\nversion = Version(version) unless version.is_a? Version\r\nversion >= \"10.12\"\r\n```\r\n\r\nwill work",
		"created_at" : "2016-09-15T15:57:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78999563,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yep, ideally we'd not have any user-facing messages that say \"OS X\" outside of `Library/Homebrew/os/mac/` or `Library/Homebrew/extend/os/mac.`",
		"created_at" : "2016-09-15T15:59:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78999762,
		"user" : {
			"login" : "JLHwung"
		},
		"body" : "@MikeMcQuaid Ahh, this time I get your point. Thank you.",
		"created_at" : "2016-09-15T15:59:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 79001026,
		"user" : {
			"login" : "JLHwung"
		},
		"body" : "So I think when `test_formula_support` makes assertions on the user-facing messages, it should require `os/mac` otherwise it does not simulate the real cases.\r\nApparently we are facing same `os/mac` loading problem if we write a test for `KegOnlyReason::valid` method.",
		"created_at" : "2016-09-15T16:05:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 79001526,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`os/mac` should not be used/needed outside of those two directories.",
		"created_at" : "2016-09-15T16:07:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 79002263,
		"user" : {
			"login" : "JLHwung"
		},
		"body" : "@MikeMcQuaid Yep, I mean requiring `os/mac` on `test_formula_support`, just like what we do in `test_os_mac_language`.",
		"created_at" : "2016-09-15T16:10:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 79016752,
		"user" : {
			"login" : "JLHwung"
		},
		"body" : "@MikeMcQuaid `version >= \"10.12\"` will fail because `ArgumentError: comparison of Version with String failed`",
		"created_at" : "2016-09-15T17:20:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 79018627,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Check the methods above; if you create a version the same as them (probably with `.new`) then you should be able to compare the same as them.",
		"created_at" : "2016-09-15T17:30:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 79018663,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Or you may need to use/try `>` rather than `>=`",
		"created_at" : "2016-09-15T17:30:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 79020723,
		"user" : {
			"login" : "JLHwung"
		},
		"body" : "@MikeMcQuaid Thank you! `Version.new` LGTM, I'd better add more test to ensure it does not break.",
		"created_at" : "2016-09-15T17:40:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 79029447,
		"user" : {
			"login" : "JLHwung"
		},
		"body" : "@MikeMcQuaid How about I move `Class KegOnlyReason` in `formula_support` to `/extend/os/mac` (as we do for `formula_cellar_checks`) ? As the whole class is macOS-only and ideally we should not have it outside `Library/Homebrew/os/mac`, right? I am wondering how to specify that this method is macOnly and instruct the test should go into the macOs-only branch.",
		"created_at" : "2016-09-15T18:21:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 79032450,
		"user" : {
			"login" : "JLHwung"
		},
		"body" : "@MikeMcQuaid If necessary I can also move other `OS X` referencing user-facing messages to `/extend/os/mac`.",
		"created_at" : "2016-09-15T18:35:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 79137427,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@JLHwung That'd be good, thanks!",
		"created_at" : "2016-09-16T09:43:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 79153589,
		"user" : {
			"login" : "JLHwung"
		},
		"body" : "@MikeMcQuaid CI complains that KegOnlyReason is uninitialized on linuxbrew because I move to os/mac. How would this class be used on Linux?",
		"created_at" : "2016-09-16T11:51:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 964
	},
	{
		"id" : 78910046,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can we go for `el_capitan` here?",
		"created_at" : "2016-09-15T08:12:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 965
	},
	{
		"id" : 78910157,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Worth spelling out this is El Capitan-only to avoid scaring Sierra people?",
		"created_at" : "2016-09-15T08:13:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 965
	},
	{
		"id" : 78917574,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "The warning only prints on El Cap; are you worried about copy/pasted versions of it on the web being misinterpreted?",
		"created_at" : "2016-09-15T08:57:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 965
	},
	{
		"id" : 78919046,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Updated.",
		"created_at" : "2016-09-15T09:06:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 965
	},
	{
		"id" : 78919495,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yeh, or people reading this message when they have a mixed environment and thinking it applies everywhere.",
		"created_at" : "2016-09-15T09:09:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 965
	},
	{
		"id" : 78928369,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Agreed it's probably best to explicitly mention El Cap. It'll only be a matter of time until someone sticks the message on stackoverflow or something without much context 🙈.",
		"created_at" : "2016-09-15T10:02:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 965
	},
	{
		"id" : 78928769,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Maybe a good idea to recommend `sudo` here as `xcode-select` will only abort unless you give it elevated privs.\r\n\r\nIf we're using a vanilla non-sudo recommendation everywhere else though feel free to ignore me. No point introducing an inconsistency.",
		"created_at" : "2016-09-15T10:04:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 965
	},
	{
		"id" : 79076004,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "It's totally inconsistent now I look at it - we have messages using both with and without. 😰 I'll update this now, and make a PR to update other parts for consistency later.",
		"created_at" : "2016-09-15T22:29:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 965
	},
	{
		"id" : 79102713,
		"user" : {
			"login" : "mistydemeo"
		},
		"body" : "Updated!",
		"created_at" : "2016-09-16T03:45:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 965
	},
	{
		"id" : 78911301,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "It would be nice to have a `HOMEBREW_OPT_PREFIX` too if it appears often enough. I didn't check.",
		"created_at" : "2016-09-15T08:20:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 966
	},
	{
		"id" : 78913016,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Given it's a single path below `HOMEBREW_PREFIX` I think it's fine for now. `LinkedKegs` is a bit more involved.",
		"created_at" : "2016-09-15T08:31:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 966
	},
	{
		"id" : 78925186,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Personally I'd add the Xcode check anyway because better safe than sorry but will leave that decision up to you.",
		"created_at" : "2016-09-15T09:42:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 970
	},
	{
		"id" : 78927313,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "```\r\nif MacOS.version == \"10.11\" && DevelopmentTools.clang_build_version >= 800\r\n```\r\nyes?",
		"created_at" : "2016-09-15T09:55:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 970
	},
	{
		"id" : 78927756,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yeh, or you can do `MacOS::Xcode.version >= \"8.0\"`",
		"created_at" : "2016-09-15T09:58:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 970
	},
	{
		"id" : 78928189,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "My concern with that is that it won't fix the problem on a CLT-only install assuming Apple puts the same stuff in the 10.11 Xcode 8 CLT (if there is one actually coming out).",
		"created_at" : "2016-09-15T10:00:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 970
	},
	{
		"id" : 78928393,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Ah, I see. Yes, your version is better then. CC @DomT4 to confirm about the CLT?",
		"created_at" : "2016-09-15T10:02:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 970
	},
	{
		"id" : 78930593,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "I'm not sure about the CLT on 10.11 yet to be honest because Apple releases CLT packages scoped to individual platforms, i.e. there's one available for macOS Sierra but not El Capitan, but when El Capitan gets its version it'll get its own `.pkg`.\r\n\r\nIt seems feasible they could push a CLT for 10.11 without the problems, but who knows until they do.",
		"created_at" : "2016-09-15T10:16:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 970
	},
	{
		"id" : 78932117,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "let's avoid speculatively fixing bugs and just do\r\n```\r\nif MacOS.version == \"10.11\" && MacOS::Xcode.installed? && MacOS::Xcode.version.to_i >= 8\r\n```\r\n\r\nWe can always expand its scope later as needed.",
		"created_at" : "2016-09-15T10:22:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 970
	},
	{
		"id" : 78932353,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Agreed except avoid the `.to_i` and just do `MacOS::Xcode.version >= \"8.0\"` 😉 ",
		"created_at" : "2016-09-15T10:24:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 970
	},
	{
		"id" : 78932550,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Shall I change https://github.com/ilovezfs/brew/blob/2505da3182f48c960e896f42173b4d9809e01001/Library/Homebrew/extend/os/mac/extend/ENV/super.rb#L92 as well? hehe",
		"created_at" : "2016-09-15T10:25:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 970
	},
	{
		"id" : 78933957,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yeh, feel free 😁 ",
		"created_at" : "2016-09-15T10:35:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 970
	},
	{
		"id" : 78993580,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can you use a `.join` instead here?",
		"created_at" : "2016-09-15T15:35:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 971
	},
	{
		"id" : 78994170,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Two separate comparisons may make this easier to follow.",
		"created_at" : "2016-09-15T15:37:23Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 971
	},
	{
		"id" : 79178773,
		"user" : {
			"login" : "penman"
		},
		"body" : "Sure. Just this one, or the line above too?",
		"created_at" : "2016-09-16T14:20:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 971
	},
	{
		"id" : 79182488,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Both ideally, thanks!",
		"created_at" : "2016-09-16T14:37:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 971
	},
	{
		"id" : 79290925,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "`include?` here fails because `remote` returns `nil` if the tap is untapped. I'd suggest falling back to `default_remote` in this case.",
		"created_at" : "2016-09-17T19:59:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 979
	},
	{
		"id" : 79291033,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Also, `URI(remote).host == \"github.com\"` would probably be a better check.",
		"created_at" : "2016-09-17T20:05:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 979
	},
	{
		"id" : 80647252,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "CC @vin047 for making these fixes.",
		"created_at" : "2016-09-27T08:55:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 979
	},
	{
		"id" : 80672712,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "And fixing merge conflicts.",
		"created_at" : "2016-09-27T11:40:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 979
	},
	{
		"id" : 79286566,
		"user" : {
			"login" : "chdiza"
		},
		"body" : "Wow, this particular change is atrocious looking.  What's with the gigantic indents?",
		"created_at" : "2016-09-17T15:46:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 989
	},
	{
		"id" : 79286586,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Because it's confused lol.",
		"created_at" : "2016-09-17T15:47:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 989
	},
	{
		"id" : 79286593,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "This also doesn't look good.",
		"created_at" : "2016-09-17T15:47:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 989
	},
	{
		"id" : 79286598,
		"user" : {
			"login" : "chdiza"
		},
		"body" : "Another case that seems like a bug in rubocop.",
		"created_at" : "2016-09-17T15:47:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 989
	},
	{
		"id" : 79288786,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Feature inparity in this block?",
		"created_at" : "2016-09-17T17:53:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 992
	},
	{
		"id" : 79288854,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "We cannot recover if this symlink is corrupted.",
		"created_at" : "2016-09-17T17:56:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 992
	},
	{
		"id" : 79778790,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Further tweaked the approach to handle if this is empty.",
		"created_at" : "2016-09-21T08:04:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 998
	},
	{
		"id" : 79304497,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Maybe just `macOS < `?",
		"created_at" : "2016-09-18T12:24:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79304508,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Maybe just `macOS > `?",
		"created_at" : "2016-09-18T12:24:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79304515,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`>` rather than `=`, no?",
		"created_at" : "2016-09-18T12:25:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79304516,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`>` rather than `=`, no?",
		"created_at" : "2016-09-18T12:25:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79304524,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`>` rather than `=`, no? Also this should probably differentiate between `1.7` and `1.7+`",
		"created_at" : "2016-09-18T12:25:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79304531,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "As over 80 characters I'd just make this an `if/else` and pull the `req.display_s` into a variable.",
		"created_at" : "2016-09-18T12:25:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79304536,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd prefer `.join` here.",
		"created_at" : "2016-09-18T12:26:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79304541,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`next if reqs.to_a.empty?`",
		"created_at" : "2016-09-18T12:26:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79304547,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Rubocop disagrees.",
		"created_at" : "2016-09-18T12:26:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79318439,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Anything wrong with keeping the `?:` if just pulling `req.display_s` out to a variable gets it under 80 characters?",
		"created_at" : "2016-09-18T23:56:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79318787,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Done.\r\n\r\n```\r\nRequired: macOS <= 10.6 ✘\r\n```",
		"created_at" : "2016-09-19T00:14:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79318801,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Done. Using `>=` instead of `>`, since that matches the version specified in the requirement.\r\n\r\n```\r\nRequired: macOS >= 10.7 ✔\r\n```",
		"created_at" : "2016-09-19T00:14:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79318854,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Actually, `>=`, I think. Done.",
		"created_at" : "2016-09-19T00:17:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79318873,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Also `>=`, i think. Done.\r\n```\r\nRequired: ruby >= 1.9 ✔\r\n```",
		"created_at" : "2016-09-19T00:18:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79318893,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Would be `>=` or `=`, depending on whether the `+` is present. Done.\r\n\r\n```\r\nRequired: java = 1.6 ✘\r\n\r\nRequired: java >= 1.6 ✔\r\n```",
		"created_at" : "2016-09-19T00:19:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79318897,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Fixed.",
		"created_at" : "2016-09-19T00:19:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79318905,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Done.",
		"created_at" : "2016-09-19T00:19:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79318912,
		"user" : {
			"login" : "apjanke"
		},
		"body" : "Done.",
		"created_at" : "2016-09-19T00:20:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79337604,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Do you think `<=` is as understood as `<`? I wasn't sure but happy to defer to you here.",
		"created_at" : "2016-09-19T07:30:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79337618,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Do you think `<=` is as understood as `<`? I wasn't sure but happy to defer to you here.",
		"created_at" : "2016-09-19T07:30:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79337677,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Fine with that if under 80 chars",
		"created_at" : "2016-09-19T07:30:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79337765,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Oh definitely, plus the fact that `>` (strictly greater than) is just wrong here.",
		"created_at" : "2016-09-19T07:31:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79338139,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@zmwangx Obviously I'd mean making the `>` value correct 😆 ",
		"created_at" : "2016-09-19T07:35:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1004
	},
	{
		"id" : 79312313,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "The beginning of this sentence is broken.",
		"created_at" : "2016-09-18T18:37:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1008
	},
	{
		"id" : 79312358,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "You should use `HOMEBREW_LIBRARY_PATH` here. It might matter in tests (now or possibly later) when `HOMEBREW_LIBRARY_PATH != HOMEBREW_LIBRARY/\"Homebrew\"`.",
		"created_at" : "2016-09-18T18:39:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1008
	},
	{
		"id" : 79312412,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "Can you make this check for exactly one `/` or possibly even if all arguments are valid tap names? Otherwise, formula names, that are handled below and can also contain slashes, will be interpreted as taps which will fail.",
		"created_at" : "2016-09-18T18:43:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1008
	},
	{
		"id" : 79312455,
		"user" : {
			"login" : "UniqMartin"
		},
		"body" : "It's not a major departure from the status quo, but will users be confused that they can specify multiple items of the same kind (e.g. two taps) but are not allowed to mix and match (e.g. a file name and a formula name)? Can we address this somehow to make this more user-friendly?",
		"created_at" : "2016-09-18T18:45:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1008
	},
	{
		"id" : 79312962,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think we can but given it's not a departure, as you mention, I think it's fine as-is. The ordering here reflects the code priority.",
		"created_at" : "2016-09-18T19:11:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1008
	},
	{
		"id" : 79313001,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Actually, the ordering isn't consistent so fixing that up.",
		"created_at" : "2016-09-18T19:13:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1008
	},
	{
		"id" : 79313042,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Fixed",
		"created_at" : "2016-09-18T19:16:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1008
	},
	{
		"id" : 79313048,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Fixed",
		"created_at" : "2016-09-18T19:16:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1008
	},
	{
		"id" : 79348577,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "`EnforcedStyle: brackets` can be used now. `UnneededCapitalW` can probably be omitted then.",
		"created_at" : "2016-09-19T08:52:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1008
	},
	{
		"id" : 79350460,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "`Regex: /\\A[a-z0-9]+(-[a-z0-9]+)*(@[a-z0-9.-]+)?(\\.rb)?\\Z/` can be used now.",
		"created_at" : "2016-09-19T09:04:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1008
	},
	{
		"id" : 79352405,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 but will address in follow-up PR.",
		"created_at" : "2016-09-19T09:16:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1008
	},
	{
		"id" : 79352408,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 but will address in follow-up PR.",
		"created_at" : "2016-09-19T09:16:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1008
	},
	{
		"id" : 79308458,
		"user" : {
			"login" : "rwhogg"
		},
		"body" : "\r\n\r\nThis line (and the similar one in the second test) is what I expect to generate the most contention.\r\n\r\nWithout it, you get: `NameError: uninitialized constant DependencyCollectorTests::MacOS.`\r\n\r\nIt's not like these two tests make any sense on Linux, but I did add them at the same time of the original PR.\r\n",
		"created_at" : "2016-09-18T15:31:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79308575,
		"user" : {
			"login" : "rwhogg"
		},
		"body" : "And now I see https://github.com/Homebrew/brew/pull/543, which pushes similar tests out of here. Perhaps it would be wisest to remove these two tests altogether...",
		"created_at" : "2016-09-18T15:38:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79308836,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'm afraid when upstreaming changes you're going to need to do more stylistically involved changes than this. Instead of scattering `if OS.mac?` throughout the codebase the pattern is to make use of `Library/Homebrew/extend/os/linux` to override methods.",
		"created_at" : "2016-09-18T15:54:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79308875,
		"user" : {
			"login" : "rwhogg"
		},
		"body" : "No problem! Just wanted to get the conversation started.\r\n\r\nLet's be honest, I wasn't expecting this to get merged straightaway.",
		"created_at" : "2016-09-18T15:56:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79308900,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "🆒! To be clear, I am excited about more stuff like this moving upstream. I still dream of a day when Linuxbrew/brew isn't needed.",
		"created_at" : "2016-09-18T15:58:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79309382,
		"user" : {
			"login" : "rwhogg"
		},
		"body" : "Decided that doing so was common sense.",
		"created_at" : "2016-09-18T16:24:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79313283,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This should live in `extend/dependency_collector.rb` like the other similar files.",
		"created_at" : "2016-09-18T19:30:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79313287,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can drop the comment, it's self-explanatory.",
		"created_at" : "2016-09-18T19:30:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79313293,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Check out the other files in this directory to see the pattern for porting these.",
		"created_at" : "2016-09-18T19:30:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79313294,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "👍 ",
		"created_at" : "2016-09-18T19:31:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79314010,
		"user" : {
			"login" : "rwhogg"
		},
		"body" : "Did you mean `extend/os/dependency_collector.rb`? That seems to be where all the `OS.mac?` checks are.",
		"created_at" : "2016-09-18T20:10:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79314046,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sorry, yes. Brain: fried.",
		"created_at" : "2016-09-18T20:12:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79988571,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sorry to be annoying and change my mind but: rather than making this in `linux` this could probably just be in `Library/Homebrew/dependency_collector.rb` and have the `os/mac` version override it as it currently does.",
		"created_at" : "2016-09-22T07:42:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79988621,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`return if MacOS.version < :mavericks `",
		"created_at" : "2016-09-22T07:42:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79988700,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Ideally would be good to add a test for this into the non-mac tests just to verify that path works too.",
		"created_at" : "2016-09-22T07:43:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79988805,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Like what we're going for is the code in `os` being OS-specific (including macOS specific) whereas this version is generic enough to be the default.",
		"created_at" : "2016-09-22T07:43:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 80030090,
		"user" : {
			"login" : "rwhogg"
		},
		"body" : "I had another test when I first added this to Linuxbrew. Something very similar should do.",
		"created_at" : "2016-09-22T12:35:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 80142414,
		"user" : {
			"login" : "rwhogg"
		},
		"body" : "No worries!\r\n\r\nThat last comment is a helpful clarification for the future, to be sure.",
		"created_at" : "2016-09-22T21:38:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 80144413,
		"user" : {
			"login" : "rwhogg"
		},
		"body" : "Found it, it's now [here](https://github.com/Homebrew/brew/pull/1014/files#diff-658424c3ddbee14a90e8b8778471edb6R79)",
		"created_at" : "2016-09-22T21:49:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1014
	},
	{
		"id" : 79396872,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This is only run if `HOMEBREW_REPOSITORY` and `HOMEBREW_PREFIX` are both `/usr/local` so it's a no-op and can be removed.",
		"created_at" : "2016-09-19T13:59:56Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1025
	},
	{
		"id" : 79397153,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "These will always be the same path.",
		"created_at" : "2016-09-19T14:01:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1025
	},
	{
		"id" : 79398068,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Ah, ok, will remove this whole section then.",
		"created_at" : "2016-09-19T14:05:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1025
	},
	{
		"id" : 79468745,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I'd change the wording to:\r\n\r\nAccessibility access cannot be enabled on this version of macOS.\r\nEnable it manually via System Preferences.\r\n\r\nSame with “disable”.",
		"created_at" : "2016-09-19T19:22:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1029
	},
	{
		"id" : 79793474,
		"user" : {
			"login" : "vitorgalvao"
		},
		"body" : "We generally favour using `<=` and `else` while “climbing”. So always say `if <= oldest … elsif <= old … elsif <= less_old … else`. So we climb up versioning and leave `else` as something that means “from this version on”.",
		"created_at" : "2016-09-21T09:29:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1029
	},
	{
		"id" : 79848082,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Yes, the order should be:\r\n\r\n```ruby\r\nif MacOS.version <= :mountain_lion\r\nelsif MacOS.version <= :yosemite\r\nelsif MacOS.version <= :el_capitan\r\nelse\r\nend\r\n\r\n\r\n```",
		"created_at" : "2016-09-21T14:34:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1029
	},
	{
		"id" : 79863751,
		"user" : {
			"login" : "wickles"
		},
		"body" : "Done. Now I'm wondering if the two `disable` messages should just be combined? \r\n\r\n<= Mountain Lion: \r\n```\r\n        Accessibility access was enabled for #{@cask}, but it is not safe to disable\r\n        automatically on this version of macOS.  See System Preferences.\r\n```\r\nSierra: \r\n```\r\n        Accessibility access cannot be disabled automatically on this version of macOS.\r\n        See System Preferences to disable it manually.\r\n```",
		"created_at" : "2016-09-21T15:37:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1029
	},
	{
		"id" : 79893203,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Not sure why “it is not safe” on `<= Mountain Lion`, but I think as it is worded now, it can be used for both.",
		"created_at" : "2016-09-21T17:52:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1029
	},
	{
		"id" : 79894135,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "So this would make it:\r\n\r\n```ruby\r\nif MacOS.version >= :mavericks &&  MacOS.version <= :el_capitan\r\nelse\r\nend\r\n```",
		"created_at" : "2016-09-21T17:56:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1029
	},
	{
		"id" : 79894297,
		"user" : {
			"login" : "wickles"
		},
		"body" : "Done. 👍 ",
		"created_at" : "2016-09-21T17:57:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1029
	},
	{
		"id" : 80266826,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "This string needs to be updated as well.",
		"created_at" : "2016-09-23T15:24:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1029
	},
	{
		"id" : 80267701,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "I've gone ahead and pushed the fix. If CI goes green, we should go ahead and merge.",
		"created_at" : "2016-09-23T15:29:11Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1029
	},
	{
		"id" : 80268360,
		"user" : {
			"login" : "wickles"
		},
		"body" : "Shoot, my bad. Thanks! ",
		"created_at" : "2016-09-23T15:32:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1029
	},
	{
		"id" : 80269763,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "No worries!",
		"created_at" : "2016-09-23T15:39:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1029
	},
	{
		"id" : 80040075,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "You can remove this as the cask tests are not run on Travis anymore anyway.",
		"created_at" : "2016-09-22T13:31:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1041
	},
	{
		"id" : 79760335,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "To make sure, `!value.nil?` will only work for `ENV` variables, since those can't be `false`, or can they?",
		"created_at" : "2016-09-21T04:51:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1050
	},
	{
		"id" : 79773001,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "```\r\nmikebook # brew irb                (update-between-tags) [~/Documents/Homebrew]\r\n==> Interactive Homebrew Shell\r\nExample commands available with: brew irb --examples\r\n>> ENV[\"HOMEBREW_DEVELOPER\"] = false\r\nTypeError: no implicit conversion of false into String\r\n\tfrom (irb):1:in `[]='\r\n\tfrom (irb):1\r\n\tfrom /Users/mike/Documents/Homebrew/Library/Homebrew/brew.rb:99:in `<main>'\r\n>> \r\n```\r\n\r\nso 👍 to `.nil?` from me.",
		"created_at" : "2016-09-21T07:23:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1050
	},
	{
		"id" : 80017705,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Just to save me a bit: what command do you use to see this? Thanks!",
		"created_at" : "2016-09-22T11:00:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1052
	},
	{
		"id" : 80017833,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This makes me wonder if it's worth picking another path for storing this.",
		"created_at" : "2016-09-22T11:01:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1052
	},
	{
		"id" : 80017855,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`formula.path.read` may be sufficient?",
		"created_at" : "2016-09-22T11:01:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1052
	},
	{
		"id" : 80104748,
		"user" : {
			"login" : "sjackman"
		},
		"body" : "Do you mean `brew list hello`? Sorry if I misunderstand the question. The goal of this line is to elide `.bottle/hello.rb` from the output of `brew list hello`.",
		"created_at" : "2016-09-22T18:23:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1052
	},
	{
		"id" : 80105941,
		"user" : {
			"login" : "sjackman"
		},
		"body" : "With this change, line 794 now parallels line 790. The two directories `etc` and `var` are installed and then removed from `.bottle`.\r\nhttps://github.com/sjackman/brew/blob/dd27921d6a096fc7f6bbcf8f04786cb669283d95/Library/Homebrew/formula_installer.rb#L790-L794\r\n```ruby\r\n    Pathname.glob(\"#{formula.bottle_prefix}/{etc,var}/**/*\") do |path|\r\n…\r\n    end\r\n    FileUtils.rm_rf Dir[\"#{formula.bottle_prefix}/{etc,var}\"]\r\n```\r\n\r\nMy other suggestion would be `FORMULA/VERSION/.homebrew/FORMULA.rb`",
		"created_at" : "2016-09-22T18:28:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1052
	},
	{
		"id" : 80110703,
		"user" : {
			"login" : "sjackman"
		},
		"body" : "Fixed. Thanks for the tip!",
		"created_at" : "2016-09-22T18:51:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1052
	},
	{
		"id" : 80194970,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Perfect thanks 👍 ",
		"created_at" : "2016-09-23T07:38:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1052
	},
	{
		"id" : 80195148,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "How about just `FORMULA/VERSION/.formula/FORMULA.rb`? If you're 👍 on that and this PR is updated accordingly think this is good to 🚢. Thanks for your patience here 🙇 ",
		"created_at" : "2016-09-23T07:40:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1052
	},
	{
		"id" : 80346685,
		"user" : {
			"login" : "sjackman"
		},
		"body" : "We have two metafiles so far, `INSTALL_RECEIPT.json` and `FORMULA.rb`. On the chance that one day there's another metafile to install, I'd be inclined to name this directory something generic, like `.brew`, so that all the metafiles can live in one suitably-named directory.\r\n\r\nI've updated the PR using `.brew`. I'm happy to change it to whichever name you prefer.",
		"created_at" : "2016-09-24T00:13:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1052
	},
	{
		"id" : 79800206,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "It would be nice if you could also add a new line after the paragraph, thanks. And refill the lines to 70 columns maybe.",
		"created_at" : "2016-09-21T10:09:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1057
	},
	{
		"id" : 79800848,
		"user" : {
			"login" : "e-moe"
		},
		"body" : "@zmwangx done",
		"created_at" : "2016-09-21T10:12:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1057
	},
	{
		"id" : 79801027,
		"user" : {
			"login" : "e-moe"
		},
		"body" : "do I need to squash commits?",
		"created_at" : "2016-09-21T10:14:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1057
	},
	{
		"id" : 79801393,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Yes.",
		"created_at" : "2016-09-21T10:16:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1057
	},
	{
		"id" : 79802084,
		"user" : {
			"login" : "e-moe"
		},
		"body" : "squashed",
		"created_at" : "2016-09-21T10:21:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1057
	},
	{
		"id" : 79826002,
		"user" : {
			"login" : "ddebernardy"
		},
		"body" : "Might be just me, but \"Please note: Homebrew generally works well, _but_...\" reads like \"Heads up, this software will blow up in your face.\" The intent of the original message was to say \"heads up, you're using beta software and we'd love to hear the bugs you find.\" IMHO drop the whole paragraph altogether. Anyway, my $.02.",
		"created_at" : "2016-09-21T12:56:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1057
	},
	{
		"id" : 79826956,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "The paragraph says if you see bugs please report them. Stable software has bugs too.",
		"created_at" : "2016-09-21T13:01:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1057
	},
	{
		"id" : 79985253,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This will stop `brew doctor` showing it which is definitely not what we want.",
		"created_at" : "2016-09-22T07:11:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1058
	},
	{
		"id" : 79867594,
		"user" : {
			"login" : "vitorgalvao"
		},
		"body" : "Brought me back to when we used to have to do something similar when using `/opt`.",
		"created_at" : "2016-09-21T15:53:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1064
	},
	{
		"id" : 80194809,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Maybe `You can override this and force removal with brew uninstall --force ...`",
		"created_at" : "2016-09-23T07:37:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81453156,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Probably worth using a `do` if it's multi-line?",
		"created_at" : "2016-10-01T16:27:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81453168,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Make an `if` as `unless ||` makes my brain hurt.",
		"created_at" : "2016-10-01T16:27:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81453190,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Worth having a cache here so it can be shared between multiple formulae?",
		"created_at" : "2016-10-01T16:28:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81453203,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Probably want to extract this method from `Diagnostic` into somewhere else that makes sense to be shared.",
		"created_at" : "2016-10-01T16:29:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81453203,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Probably want to extract this method from `Diagnostic` into somewhere else that makes sense to be shared.",
		"created_at" : "2016-10-01T16:29:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81453223,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Maybe worth reference the `tab` in the name as it's not checking the fallback?",
		"created_at" : "2016-10-01T16:30:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81453229,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Or putting the fallback code on here rather than on `uninstall`?",
		"created_at" : "2016-10-01T16:31:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81453698,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "AFK so can't verify right now, but I believe the new RuboCop rules enforce the semantic style for blocks, rather than always using `do...end` for multiline.",
		"created_at" : "2016-10-01T16:52:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81455301,
		"user" : {
			"login" : "alyssais"
		},
		"body" : "That's how I wrote them, but Rubocop was unhappy",
		"created_at" : "2016-10-01T18:13:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81455359,
		"user" : {
			"login" : "alyssais"
		},
		"body" : "I had the fallback code in here, but it meant we had to call `missing_deps` multiple times; see earlier conversation between me and @ilovezfs.\r\n\r\nHappy to rename though.",
		"created_at" : "2016-10-01T18:16:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81455378,
		"user" : {
			"login" : "alyssais"
		},
		"body" : "Yep. It's \"use braces for functional blocks\" or something",
		"created_at" : "2016-10-01T18:18:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81455378,
		"user" : {
			"login" : "alyssais"
		},
		"body" : "Yep. It's \"use braces for functional blocks\" or something",
		"created_at" : "2016-10-01T18:18:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81455412,
		"user" : {
			"login" : "alyssais"
		},
		"body" : "Not sure what you mean? This method is only called once per run.",
		"created_at" : "2016-10-01T18:20:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81455863,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Weird, ignore me then.",
		"created_at" : "2016-10-01T18:43:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81455896,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I see that now, ignore me!",
		"created_at" : "2016-10-01T18:44:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81455913,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Could make it a static method or pull out into another class entirely so there's less going on in `uninstall`.",
		"created_at" : "2016-10-01T18:45:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81455913,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Could make it a static method or pull out into another class entirely so there's less going on in `uninstall`.",
		"created_at" : "2016-10-01T18:45:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81456057,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Yes, using braces for functional blocks is nicer for method chaining.\r\n\r\nAn example from `caveats.rb`:\r\n\r\n```ruby\r\n    @keg ||= [f.prefix, f.opt_prefix, f.linked_keg].map do |d|\r\n      begin\r\n        Keg.new(d.resolved_path)\r\n      rescue\r\n        nil\r\n      end\r\n    end.compact.first\r\n```\r\n\r\nvs.\r\n\r\n```ruby\r\n    @keg ||= [f.prefix, f.opt_prefix, f.linked_keg].map { |d|\r\n      begin\r\n        Keg.new(d.resolved_path)\r\n      rescue\r\n        nil\r\n      end\r\n    }.compact.first\r\n```\r\n",
		"created_at" : "2016-10-01T18:51:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81456176,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "The prior reads nicer to me FWIW 😕 ",
		"created_at" : "2016-10-01T18:54:33Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81456231,
		"user" : {
			"login" : "alyssais"
		},
		"body" : "Me too",
		"created_at" : "2016-10-01T18:57:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81456338,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Well, what would we be without different tastes? 😄 \r\n\r\nI'd really like to keep this though, as you know at first sight if the return value of the block is used or not.",
		"created_at" : "2016-10-01T19:01:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81456682,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I don't agree unfortunately; I think the method-names do that alone.",
		"created_at" : "2016-10-01T19:20:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 81466625,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Given what Rubocop says today: feel free to leave as-is.",
		"created_at" : "2016-10-02T08:47:46Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 82421196,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can you document this arg at the top of the file? Thanks!",
		"created_at" : "2016-10-07T16:16:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 82421333,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "❓ ",
		"created_at" : "2016-10-07T16:17:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 82501183,
		"user" : {
			"login" : "alyssais"
		},
		"body" : "We need to be able to differentiate between \"there aren't any runtime dependencies\" and \"runtime dependencies weren't specified\" to know whether to use the fallback.",
		"created_at" : "2016-10-08T11:42:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 82520912,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Great, thanks! Was just curious and that makes sense 👍 ",
		"created_at" : "2016-10-09T11:48:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1082
	},
	{
		"id" : 80118167,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Is there a speed difference here between `SimpleCov::Result.new(Coverage.result)` and [`SimpleCov::Result.new(SimpleCov.add_not_loaded_files(Coverage.result))`](https://github.com/colszowka/simplecov/blob/342a67c986949d9b4280b0e267cd9066fe9fcdaa/lib/simplecov.rb#L83).",
		"created_at" : "2016-09-22T19:29:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1084
	},
	{
		"id" : 80198341,
		"user" : {
			"login" : "penman"
		},
		"body" : "I don't think so. `SimpleCov.add_not_loaded_files(x)` just returns `x`, so I split it out of one long method chain for readability.",
		"created_at" : "2016-09-23T08:05:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1084
	},
	{
		"id" : 80432780,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "What do you think about actually erroring rather than warning on this?",
		"created_at" : "2016-09-26T09:00:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 80433871,
		"user" : {
			"login" : "MatzFan"
		},
		"body" : "I think ideal would be error & halt execution if no similarly named valid flag can be found. If a similarly named valid flag can be found, this should be suggested as alternative. User would then have option to choose it & continue build, or exit.",
		"created_at" : "2016-09-26T09:07:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 80439754,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`deprecated_option` already handles the \"existing to new flag\" migration stuff.",
		"created_at" : "2016-09-26T09:41:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 80439770,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "So this can be fatal.",
		"created_at" : "2016-09-26T09:42:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 80446479,
		"user" : {
			"login" : "MatzFan"
		},
		"body" : "Sorry yes, I think see what `deprecated_option` does, but my idea here was to pick up typos - like `--with-postgreslq` and suggest `did you mean --with-postgresql?`. If the option given is not valid (or deprecated) and not close enough (e.g. Levenshtein - or whatever Homebrew uses) to a valid option it should be fatal yes - IMO. Could provide a continue & ignore option of course, if we go down UI route.",
		"created_at" : "2016-09-26T10:21:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 80447107,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think on typos it's worth just hard failing. We don't use Levenshtein or anything similar currently but would be 👍 on doing so in future.",
		"created_at" : "2016-09-26T10:25:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 80447963,
		"user" : {
			"login" : "MatzFan"
		},
		"body" : "ok I change to hard fail then - if we are sure users don't rely on invalid options silently being ignored behaviour? Oh, and do you want a `--no-invalid-option-warnings` flag to override?",
		"created_at" : "2016-09-26T10:31:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 80448490,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "Isn’t this the same as `@options - @args`, i.e. `unused_options` above?",
		"created_at" : "2016-09-26T10:35:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 80449031,
		"user" : {
			"login" : "MatzFan"
		},
		"body" : "No, `#unused options` lists valid options for the formula not in ARGV. `#invalid_options` lists ARGV 'options' that are not listed in the formula's options at all. See the tests for an example :)",
		"created_at" : "2016-09-26T10:38:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 80449595,
		"user" : {
			"login" : "MatzFan"
		},
		"body" : "It is to catch imperfect user scenario - most of the time `#invalid_options` will be empty.",
		"created_at" : "2016-09-26T10:42:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 80634732,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "Oh right, I read too fast :smile: ",
		"created_at" : "2016-09-27T07:34:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 81010922,
		"user" : {
			"login" : "alyssais"
		},
		"body" : "It's the same as `@args - @options`, though, right?",
		"created_at" : "2016-09-28T20:35:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 81092101,
		"user" : {
			"login" : "bfontaine"
		},
		"body" : "It seems so.",
		"created_at" : "2016-09-29T08:57:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 81099055,
		"user" : {
			"login" : "MatzFan"
		},
		"body" : "Indeed @penman, will change it",
		"created_at" : "2016-09-29T09:38:09Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 81452418,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`invalid_options` because `flags` have a particular meaning for us.",
		"created_at" : "2016-10-01T15:53:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 81452418,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`invalid_options` because `flags` have a particular meaning for us.",
		"created_at" : "2016-10-01T15:53:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 81452427,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Actually, I think you're right about making it a warning for now and we could make it a hard failure later.",
		"created_at" : "2016-10-01T15:54:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1088
	},
	{
		"id" : 80217667,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Might want to use a non-capturing group here to be consistent with everything else, but I want to know why they're used in the first place.",
		"created_at" : "2016-09-23T10:13:53Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1102
	},
	{
		"id" : 80220755,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "I might be paranoid, but what about `/usr/bin/grep` to avoid GNU grep and its troubled (and deprecated) `GREP_OPTIONS` environment variable.",
		"created_at" : "2016-09-23T10:37:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1103
	},
	{
		"id" : 80221078,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "We use it in a couple of other similar places as-is so think it's probably fine.",
		"created_at" : "2016-09-23T10:40:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1103
	},
	{
		"id" : 80221123,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "On second thought idiots who set `GREP_OPTIONS` should be shot, so ignore that.",
		"created_at" : "2016-09-23T10:40:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1103
	},
	{
		"id" : 80355110,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Honestly I think it's probably just worth removing this rule. The message it prints out and the regex itself are both incomprehensible. How about we just allow something much simpler like `[\\w@-\\+]+.rb`?",
		"created_at" : "2016-09-24T07:48:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1112
	},
	{
		"id" : 80355116,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think it's fine now these have been fixed.",
		"created_at" : "2016-09-24T07:48:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1112
	},
	{
		"id" : 80357832,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Yes, that's what I thought right *after* i pushed this and saw your PR on `hombrew/core`. =)",
		"created_at" : "2016-09-24T09:52:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1112
	},
	{
		"id" : 80355161,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Better to try and keep this below 80 chars by e.g. splitting this into an `unless .. end`.",
		"created_at" : "2016-09-24T07:52:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1113
	},
	{
		"id" : 80355166,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Better to try and keep this below 80 chars by e.g. splitting this into an`if .. end`.",
		"created_at" : "2016-09-24T07:52:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1113
	},
	{
		"id" : 80355189,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Ideally split this into a few variables but no worries if you'd rather not.",
		"created_at" : "2016-09-24T07:53:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1113
	},
	{
		"id" : 80355195,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Better to try and keep this below 80 chars by e.g. splitting this into an`if .. end`.",
		"created_at" : "2016-09-24T07:53:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1113
	},
	{
		"id" : 80355201,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Better to try and keep this below 80 chars by e.g. splitting this into an`if .. end`.",
		"created_at" : "2016-09-24T07:53:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1113
	},
	{
		"id" : 80355203,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Better to try and keep this below 80 chars by e.g. splitting this into an`if .. end`.",
		"created_at" : "2016-09-24T07:53:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1113
	},
	{
		"id" : 80355209,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Better to try and keep this below 80 chars by e.g. splitting this into an`if .. end`.",
		"created_at" : "2016-09-24T07:54:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1113
	},
	{
		"id" : 80355211,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Better to try and keep this below 80 chars by e.g. splitting this into an`if .. end`.",
		"created_at" : "2016-09-24T07:54:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1113
	},
	{
		"id" : 80355213,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Better to try and keep this below 80 chars by e.g. splitting this into an`if .. end`.",
		"created_at" : "2016-09-24T07:54:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1113
	},
	{
		"id" : 80355215,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Better to try and keep this below 80 chars by e.g. splitting this into an`if .. end`.",
		"created_at" : "2016-09-24T07:54:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1113
	},
	{
		"id" : 80359076,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I'm leaving this alone for now.",
		"created_at" : "2016-09-24T11:33:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1113
	},
	{
		"id" : 80363527,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "I would use `alpha[0-9]*|a[0-9]+`.",
		"created_at" : "2016-09-24T16:02:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1120
	},
	{
		"id" : 80363529,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "`beta[0-9]*|b[0-9]+`.",
		"created_at" : "2016-09-24T16:02:31Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1120
	},
	{
		"id" : 80363641,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Is this also a documented scheme in the Python world?",
		"created_at" : "2016-09-24T16:08:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1120
	},
	{
		"id" : 80363658,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Yeah, same as `a`, I forgot to mention in my comment.",
		"created_at" : "2016-09-24T16:09:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1120
	},
	{
		"id" : 80363801,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Updated to follow this scheme.",
		"created_at" : "2016-09-24T16:15:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1120
	},
	{
		"id" : 80363802,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Updated to follow this scheme.",
		"created_at" : "2016-09-24T16:15:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1120
	},
	{
		"id" : 80365898,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "It's probably better to simply exclude this file from the `ConstantName` cop instead of this workaround. Opinions?",
		"created_at" : "2016-09-24T18:14:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1125
	},
	{
		"id" : 80366804,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Agreed.",
		"created_at" : "2016-09-24T19:05:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1125
	},
	{
		"id" : 80366810,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Although I might use an inline exclude?",
		"created_at" : "2016-09-24T19:06:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1125
	},
	{
		"id" : 80367465,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "(just so we can start killing the `Exclude` lines in the Rubocop files in favour of inline comments and avoid a similar problem in the same file)",
		"created_at" : "2016-09-24T19:44:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1125
	},
	{
		"id" : 80369800,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Changed it to an inline exclude.",
		"created_at" : "2016-09-24T22:17:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1125
	},
	{
		"id" : 80367501,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Thought using `--max-count` was nicer here.",
		"created_at" : "2016-09-24T19:45:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1127
	},
	{
		"id" : 80367505,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "General cleanup of `shellcheck` warnings.",
		"created_at" : "2016-09-24T19:45:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1127
	},
	{
		"id" : 80382026,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I reckon it's worth not having this because of the realignment required when different length keys are added to a large existing hash and the expanding diff that results.",
		"created_at" : "2016-09-25T13:25:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1128
	},
	{
		"id" : 80382035,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think unless this can be somehow told \"don't put this on the same line if it makes the line exceed >80 characters\" then it's worth omitting.",
		"created_at" : "2016-09-25T13:26:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1128
	},
	{
		"id" : 80382043,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Just to check: does `brew cleanup` still produce the same results afterwards and is this equivalent?",
		"created_at" : "2016-09-25T13:26:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1128
	},
	{
		"id" : 80383103,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "That's actually the default: https://github.com/bbatsov/rubocop/blob/master/config/default.yml#L551-L552",
		"created_at" : "2016-09-25T14:18:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1128
	},
	{
		"id" : 80383430,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Still working as expected.",
		"created_at" : "2016-09-25T14:34:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1128
	},
	{
		"id" : 80386129,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Gotcha. Yeh, that'd be good to use 👍 ",
		"created_at" : "2016-09-25T16:26:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1128
	},
	{
		"id" : 80387722,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Well, it is already in use, it being the default, but apparently it does not work in the other direction: https://github.com/bbatsov/rubocop/issues/3534",
		"created_at" : "2016-09-25T17:51:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1128
	},
	{
		"id" : 80390616,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : ":cool:, probably worth disabling until then.",
		"created_at" : "2016-09-25T20:03:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1128
	},
	{
		"id" : 80390618,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Thanks!",
		"created_at" : "2016-09-25T20:03:21Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1128
	},
	{
		"id" : 80643659,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@reitermarkus Thoughts on this? Did you just update the changes to that they match this?",
		"created_at" : "2016-09-27T08:35:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1128
	},
	{
		"id" : 80673651,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I left this as-is, because disabling doesn't change anything. Corrected two lines manually though which were > 80 characters, which will be caught automatically once this is fixed.",
		"created_at" : "2016-09-27T11:46:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1128
	},
	{
		"id" : 80673991,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Cool, thanks.",
		"created_at" : "2016-09-27T11:49:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1128
	},
	{
		"id" : 80435764,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Not a fan of this name but not sure I can think of a better one. I'm leaning towards saying this should just be part of `clang` above.",
		"created_at" : "2016-09-26T09:19:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1130
	},
	{
		"id" : 80435834,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Use `HOMEBREW_PREFIX`; can't assume `/usr/local`. Regardless: this definitely shouldn't be hardcoded here.",
		"created_at" : "2016-09-26T09:19:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1130
	},
	{
		"id" : 80484931,
		"user" : {
			"login" : "aw1621107"
		},
		"body" : "Yeah. I agree that the approach is lacking.\r\n\r\nIs `HOMEBREW_PREFIX` preferred over `brew --prefix`?",
		"created_at" : "2016-09-26T14:18:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1130
	},
	{
		"id" : 80485344,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Yep.",
		"created_at" : "2016-09-26T14:20:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1130
	},
	{
		"id" : 80485504,
		"user" : {
			"login" : "aw1621107"
		},
		"body" : "Hmmm... That would require quite a few changes to `CompilerFailure`, wouldn't it, since it appears to assume that compiler capabilities can be determined by name and version alone?",
		"created_at" : "2016-09-26T14:20:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1130
	},
	{
		"id" : 80485734,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'm open to debate with other maintainers on that one.",
		"created_at" : "2016-09-26T14:21:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1130
	},
	{
		"id" : 80486091,
		"user" : {
			"login" : "aw1621107"
		},
		"body" : "Is there an environment variable version of `brew --prefix llvm`? Or should I just use the prefix + `opt/llvm`?",
		"created_at" : "2016-09-26T14:23:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1130
	},
	{
		"id" : 80487101,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`Formulary.factory(\"llvm\").opt_prefix`",
		"created_at" : "2016-09-26T14:27:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1130
	},
	{
		"id" : 80640315,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "These should still be filtered for non-`brew_clang`",
		"created_at" : "2016-09-27T08:13:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1130
	},
	{
		"id" : 80699487,
		"user" : {
			"login" : "aw1621107"
		},
		"body" : "Fixed!",
		"created_at" : "2016-09-27T14:03:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1130
	},
	{
		"id" : 80382158,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "May need to use `#{Regexp.escape(regex_or_string)}` here. ",
		"created_at" : "2016-09-25T13:32:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1135
	},
	{
		"id" : 80382168,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Probably worth adding a unit rather than integration test for this, if that's 🆒 ",
		"created_at" : "2016-09-25T13:33:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1135
	},
	{
		"id" : 80383335,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Added a unit test instead.",
		"created_at" : "2016-09-25T14:29:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1135
	},
	{
		"id" : 80391839,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "I'd say `! \"$INITIAL_BRANCH\" =~ ^v[0-9]+\\.[0-9]+\\.[0-9]|stable$`.",
		"created_at" : "2016-09-25T20:56:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1142
	},
	{
		"id" : 80419105,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Thanks, updated.",
		"created_at" : "2016-09-26T07:23:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1142
	},
	{
		"id" : 81448620,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think for the `cmd`s we can remove the `private_class_method`s as we don't really care if they are private or not.",
		"created_at" : "2016-10-01T11:25:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1145
	},
	{
		"id" : 81448620,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think for the `cmd`s we can remove the `private_class_method`s as we don't really care if they are private or not.",
		"created_at" : "2016-10-01T11:25:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1145
	},
	{
		"id" : 81448623,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "```\r\nreturn true if method_defined?(method)\r\nsuper(method, include_private)\r\n```",
		"created_at" : "2016-10-01T11:26:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1145
	},
	{
		"id" : 81448628,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Maybe `return` this and skip the `else`?",
		"created_at" : "2016-10-01T11:26:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1145
	},
	{
		"id" : 81448638,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "There's no equivalent?",
		"created_at" : "2016-10-01T11:27:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1145
	},
	{
		"id" : 81452173,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I didn't check, but why would you keep both?\r\n\r\n`failed == failed?`\r\n\r\n",
		"created_at" : "2016-10-01T15:40:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1145
	},
	{
		"id" : 81452251,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sorry, not this specifically but just being able to use `attr_accessor`",
		"created_at" : "2016-10-01T15:43:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1145
	},
	{
		"id" : 81452251,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sorry, not this specifically but just being able to use `attr_accessor`",
		"created_at" : "2016-10-01T15:43:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1145
	},
	{
		"id" : 81452415,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "```\r\nclass << self\r\n  attr_accessor :something\r\nend\r\n```",
		"created_at" : "2016-10-01T15:53:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1145
	},
	{
		"id" : 81452594,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Reasons to not do that here?",
		"created_at" : "2016-10-01T16:06:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1145
	},
	{
		"id" : 81452630,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "No, just didn't check before. :+1:",
		"created_at" : "2016-10-01T16:09:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1145
	},
	{
		"id" : 81085969,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think you can avoid doing any of this unless `--exit-code` is passed. Also, use `ARGV.include? ` instead of `flag?`. I'd also favour setting `Homebrew.failed` instead of calling `exit`.",
		"created_at" : "2016-09-29T08:21:38Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1177
	},
	{
		"id" : 81089874,
		"user" : {
			"login" : "scpeters"
		},
		"body" : "I had thought it would be fun to display a `git diff --stat` whenever `brew man` was invoked, so you could see if there are changes:\r\n\r\n~~~\r\n$ brew man\r\nWriting HTML fragment to /usr/local/Homebrew/docs/brew.1.html\r\nWriting man page to /usr/local/Homebrew/manpages/brew.1\r\nWriting man page to /usr/local/Homebrew/manpages/brew-cask.1\r\n docs/brew.1.html | 12 +++++++++++-\r\n manpages/brew.1  | 11 ++++++++++-\r\n 2 files changed, 21 insertions(+), 2 deletions(-)\r\n~~~\r\n\r\nIf we only want that to be displayed when `--exit-code` is passed, then I will wrap those commands in an `if` block as you suggest.",
		"created_at" : "2016-09-29T08:45:07Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1177
	},
	{
		"id" : 81090536,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think we can avoid showing any `git diff` output and just saying \"no changes made\" or something and setting the exit code accordingly to `--exit-code`.",
		"created_at" : "2016-09-29T08:49:19Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1177
	},
	{
		"id" : 81097711,
		"user" : {
			"login" : "scpeters"
		},
		"body" : "Ok, since you don't want to display any `git diff`, I switched from `git diff --stat` to `git diff --quiet`, which implies `--exit-code`. I also renamed the `brew man --exit-code` option to `--fail-if-changed`, which is a bit more descriptive, and hopefully not too cumbersome.\r\n\r\nAlso, adding documentation of the `--fail-if-changed` option has made the manpages out of date in a bit of self-reference (updated in e748881).\r\n\r\nThe test-bot PR will be out of date if we stick with the `--fail-if-changed` option, since it's still using `--exit-code`.",
		"created_at" : "2016-09-29T09:30:34Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1177
	},
	{
		"id" : 81100731,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd just inline these as you're not using the var in more than one place and it makes the command easier to follow.",
		"created_at" : "2016-09-29T09:48:10Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1177
	},
	{
		"id" : 81100954,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`No changes to manpage output detected.`",
		"created_at" : "2016-09-29T09:49:24Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1177
	},
	{
		"id" : 81101027,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd just go for an `if system ... else ... end`  block.",
		"created_at" : "2016-09-29T09:49:47Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1177
	},
	{
		"id" : 81101053,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Self-testing PR 👏 ",
		"created_at" : "2016-09-29T09:49:59Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1177
	},
	{
		"id" : 81242179,
		"user" : {
			"login" : "dunn"
		},
		"body" : "Since it only persists for the duration of the subshell, should we just set `HOMEBREW_NO_AUTO_UPDATE` instead of adding another variable?",
		"created_at" : "2016-09-29T21:49:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1190
	},
	{
		"id" : 81243211,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : ":+1: amending.",
		"created_at" : "2016-09-29T21:55:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1190
	},
	{
		"id" : 81244722,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Same goes for `\"-h\"`.",
		"created_at" : "2016-09-29T22:05:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1190
	},
	{
		"id" : 81245810,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "Seems like even more than that. https://github.com/Homebrew/brew/blob/master/Library/Homebrew/brew.rb#L34\r\n```ruby\r\n help_flag_list = %w[-h --help --usage -?]\r\n```",
		"created_at" : "2016-09-29T22:13:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1190
	},
	{
		"id" : 81245920,
		"user" : {
			"login" : "zmwangx"
		},
		"body" : "Yeah. `-?` — didn't know that. Weird one.",
		"created_at" : "2016-09-29T22:13:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1190
	},
	{
		"id" : 81452063,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "`!ENV[\"HOMEBREW_HELP\"].nil?`, maybe, so we get a *nice* boolean.",
		"created_at" : "2016-10-01T15:34:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1190
	},
	{
		"id" : 81451183,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can do the each even if `empty?` as it'll be a no-op.",
		"created_at" : "2016-10-01T14:38:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1192
	},
	{
		"id" : 81451183,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can do the each even if `empty?` as it'll be a no-op.",
		"created_at" : "2016-10-01T14:38:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1192
	},
	{
		"id" : 81451213,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can get this from `Formula#aliases` (which also handles the no-tap case)",
		"created_at" : "2016-10-01T14:39:47Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1192
	},
	{
		"id" : 81451226,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Again, `aliases.each` is a no-op if this is `empty` so you can just use `.each` without the check.",
		"created_at" : "2016-10-01T14:40:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1192
	},
	{
		"id" : 81451235,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Will a `symlink?` not always `exist?`?",
		"created_at" : "2016-10-01T14:41:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1192
	},
	{
		"id" : 81517727,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Broken symlinks return false for exist?",
		"created_at" : "2016-10-03T09:35:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1192
	},
	{
		"id" : 81518646,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "TIL.",
		"created_at" : "2016-10-03T09:41:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1192
	},
	{
		"id" : 81539526,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can you explain why this change is needed?",
		"created_at" : "2016-10-03T12:24:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1193
	},
	{
		"id" : 81539548,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can you explain why this change is needed?",
		"created_at" : "2016-10-03T12:24:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1193
	},
	{
		"id" : 81548381,
		"user" : {
			"login" : "MatzFan"
		},
		"body" : "Not now needed, will change",
		"created_at" : "2016-10-03T13:21:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1193
	},
	{
		"id" : 81548398,
		"user" : {
			"login" : "MatzFan"
		},
		"body" : "Not now needed, will change",
		"created_at" : "2016-10-03T13:21:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1193
	},
	{
		"id" : 81448176,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Maybe just go for `src`, `dst` here for consistency.",
		"created_at" : "2016-10-01T10:52:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1195
	},
	{
		"id" : 81448178,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Or at least `shell`, `dst`",
		"created_at" : "2016-10-01T10:52:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1195
	},
	{
		"id" : 81919150,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd rather leave this as-is.",
		"created_at" : "2016-10-05T08:01:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1195
	},
	{
		"id" : 81919232,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Don't think we need this method.",
		"created_at" : "2016-10-05T08:02:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1195
	},
	{
		"id" : 81919245,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "This class shouldn't live here.",
		"created_at" : "2016-10-05T08:02:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1195
	},
	{
		"id" : 81919322,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd rather we kept this into two separate function calls. Apologies if that contradicts other maintainers.",
		"created_at" : "2016-10-05T08:03:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1195
	},
	{
		"id" : 81919379,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Make all these just standalone methods rather than in classes.",
		"created_at" : "2016-10-05T08:03:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1195
	},
	{
		"id" : 82089016,
		"user" : {
			"login" : "joshka"
		},
		"body" : "Noted. I'll make the convention in taps the same (manpages rather than man).",
		"created_at" : "2016-10-05T23:00:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1195
	},
	{
		"id" : 82089218,
		"user" : {
			"login" : "joshka"
		},
		"body" : "Per the comment on the completions / manpages class, it's likely not a class - just a method. Which likely belongs here as the only user of this. Or should this be extended to allow taps to install to docs?",
		"created_at" : "2016-10-05T23:02:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1195
	},
	{
		"id" : 82089311,
		"user" : {
			"login" : "joshka"
		},
		"body" : "Agreed",
		"created_at" : "2016-10-05T23:02:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1195
	},
	{
		"id" : 82089871,
		"user" : {
			"login" : "joshka"
		},
		"body" : "This allows us to add a unit test for the result of `brew --repair`. See https://github.com/Homebrew/brew/pull/1195/files/d0539cd93c826f0129b2dae148761424d59a94e9#diff-3676702e08834bbec8ee89f8f9869981R279\r\n\r\nWould you be more likely to accept this if it were named just `repair`?",
		"created_at" : "2016-10-05T23:07:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1195
	},
	{
		"id" : 82090229,
		"user" : {
			"login" : "joshka"
		},
		"body" : "Agreed. I wasn't quite sure of Homebrew's OOP vs Procedural code conventions here and kind of expected that this might be your take.",
		"created_at" : "2016-10-05T23:11:04Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1195
	},
	{
		"id" : 82416828,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's just make it a single method in the existing class",
		"created_at" : "2016-10-07T15:52:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1195
	},
	{
		"id" : 82416936,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'm ok with it being one method after all but let's call it `link_additional_files` or similar rather than `repair` anything",
		"created_at" : "2016-10-07T15:53:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1195
	},
	{
		"id" : 82416978,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Thanks, sorry we're a bit inconsistent.",
		"created_at" : "2016-10-07T15:53:30Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1195
	},
	{
		"id" : 81452318,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "This could probably be compressed into a simple:\r\n```ruby\r\nopoo \"`--all` on `brew upgrade` is no longer necessary.\"\r\n```\r\nbut if you're happy with the longer explanation, 👍.",
		"created_at" : "2016-10-01T15:48:40Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1202
	},
	{
		"id" : 81451307,
		"user" : {
			"login" : "retokromer"
		},
		"body" : "Migrating-A-Formula-To-A-Tap.md",
		"created_at" : "2016-10-01T14:45:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1204
	},
	{
		"id" : 81461017,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "Should this be `&&` instead of `;` or is it unimportant if the first command somehow fails?",
		"created_at" : "2016-10-02T00:30:18Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1207
	},
	{
		"id" : 81461305,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "You know, the more I think about this, the more undecided I am.\r\n\r\nIf `uninstall` fails, you're basically back to the beginning, as then `install` will most likely fail due to the cask still being installed.",
		"created_at" : "2016-10-02T01:06:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1207
	},
	{
		"id" : 81466373,
		"user" : {
			"login" : "vitorgalvao"
		},
		"body" : "I’d say `&&` makes more sense. If it were `brew cask uninstall --force #{token}; brew cask install --force #{token}` ( `--force` also in `install`), `;` would suffice (as a kind of “it’ll work one way or another”, but as is, we don’t want the user to be stuck in a loop of it always showing the same message (because it could not install). We want it to fail as soon as possible so they can file a bug.",
		"created_at" : "2016-10-02T08:24:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1207
	},
	{
		"id" : 81465646,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Let's put this in another module if we move it around.",
		"created_at" : "2016-10-02T07:19:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1208
	},
	{
		"id" : 81465659,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "But I think doing that in another PR would be best as it's tricky to review as-is and compare what's changed. Best to leave it as-is in `utils.rb` for now but 👍 to moving it after that.",
		"created_at" : "2016-10-02T07:20:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1208
	},
	{
		"id" : 81465744,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "It needs to be in `Kernel` to work with `IO` objects, i.e. `$stderr.puts_columns`.",
		"created_at" : "2016-10-02T07:27:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1208
	},
	{
		"id" : 81466157,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I see. Personally I'd rather we had a class method that took an argument and move away from monkeypatching system classes.",
		"created_at" : "2016-10-02T08:01:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1208
	},
	{
		"id" : 81474170,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "We could change it to only format the columns, and not output them, and let default `puts` to the rest.\r\n\r\n```ruby\r\nputs Formatter.columns(something)\r\n```",
		"created_at" : "2016-10-02T17:49:34Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1208
	},
	{
		"id" : 81474205,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "That could work.",
		"created_at" : "2016-10-02T17:51:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1208
	},
	{
		"id" : 82646995,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Just stick this inside the existing Formatter class; I dislike objects across multiple files",
		"created_at" : "2016-10-10T17:24:17Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1208
	},
	{
		"id" : 82647156,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can you make this part of `brew tests` instead?",
		"created_at" : "2016-10-10T17:25:08Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1208
	},
	{
		"id" : 81473843,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "`Your Homebrew prefix is not...` makes sense, but `Your Homebrew's prefix` reads a bit oddly. Maybe just to me, I don't know 😄.",
		"created_at" : "2016-10-02T17:29:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1213
	},
	{
		"id" : 81473847,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "👍 ",
		"created_at" : "2016-10-02T17:29:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1213
	},
	{
		"id" : 81473847,
		"user" : {
			"login" : "DomT4"
		},
		"body" : "👍 ",
		"created_at" : "2016-10-02T17:29:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1213
	},
	{
		"id" : 81474015,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'm fine with either but let's merge as-is and then iterate if people are confused (or happy for you to open a PR to modify 😁, just want to get this in for a tag tomorrow).",
		"created_at" : "2016-10-02T17:37:43Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1213
	},
	{
		"id" : 81476290,
		"user" : {
			"login" : "chdiza"
		},
		"body" : "That's going to lead to people deleting it when they shouldn't, and to people opening issues to ask whether they should delete it.\r\n\r\nThis could be offset somewhat if the docs had a page that described the differences between Xcode and the CLT's, and describes clearly under what circumstances one should install which one(s).  This is sorely needed anyway, I think.  I myself don't know whether I should have the CLT if I already have Xcode, otherwise I'd make the page and open a PR.",
		"created_at" : "2016-10-02T19:34:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1213
	},
	{
		"id" : 81477021,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Basically: if you ever need Xcode, we'll tell you and fail to install otherwise.",
		"created_at" : "2016-10-02T20:13:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1213
	},
	{
		"id" : 81477021,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Basically: if you ever need Xcode, we'll tell you and fail to install otherwise.",
		"created_at" : "2016-10-02T20:13:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1213
	},
	{
		"id" : 81477439,
		"user" : {
			"login" : "chdiza"
		},
		"body" : "I already know I need Xcode (for MacVim).  I don't know whether, on top of this, I should have the CLT.",
		"created_at" : "2016-10-02T20:36:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1213
	},
	{
		"id" : 81477257,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd suggest this check by added to the CLT/development tools installed check as if `MacOS::CLT.installed?` returns true but this header is missing then that check is bad.",
		"created_at" : "2016-10-02T20:25:27Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1215
	},
	{
		"id" : 81477646,
		"user" : {
			"login" : "javian"
		},
		"body" : "Why would it be bad ? I'll add it to the dev tools installed check.",
		"created_at" : "2016-10-02T20:48:06Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1215
	},
	{
		"id" : 81497349,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`xcode-select --install` just installs the CLT so if that's the fix then they aren't currently installed correctly. I mean that check is currently bad because it's not checking for a working CLT.",
		"created_at" : "2016-10-03T06:46:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1215
	},
	{
		"id" : 81578734,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Looks like `CoreTap` hasn't been initialized yet at this point: https://travis-ci.org/Homebrew/brew/builds/164644934#L518-L520",
		"created_at" : "2016-10-03T15:48:48Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1220
	},
	{
		"id" : 81578755,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Is it worth maintaining a separate version for the two projects? Longer-term at least this should go away.",
		"created_at" : "2016-10-03T15:48:55Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1220
	},
	{
		"id" : 81578956,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I see this was answered to 👍 to using Homebrew's version.",
		"created_at" : "2016-10-03T15:49:49Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1220
	},
	{
		"id" : 81739785,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Maybe consider just requiring that in `global`?",
		"created_at" : "2016-10-04T11:57:51Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1220
	},
	{
		"id" : 81739824,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Favour `EOS.undent` over embedded `\\n`.",
		"created_at" : "2016-10-04T11:58:02Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1220
	},
	{
		"id" : 81739938,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Could always make it more readable with:\r\n```\r\npretty_revision = git_short_head\r\nreturn \"(no git repository)\" unless pretty_revision\r\n...\r\n```",
		"created_at" : "2016-10-04T11:58:53Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1220
	},
	{
		"id" : 82114371,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Let's do that in a separate PR, as `tap` is `require`d in many other places.",
		"created_at" : "2016-10-06T04:10:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1220
	},
	{
		"id" : 82417741,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "🆒 👍 ",
		"created_at" : "2016-10-07T15:57:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1220
	},
	{
		"id" : 81805962,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "is this going to break if the requirement is fulfilled by non-brew python/python3?",
		"created_at" : "2016-10-04T17:09:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1225
	},
	{
		"id" : 81808376,
		"user" : {
			"login" : "tdsmith"
		},
		"body" : "No; `String#sub!` doesn't error if it doesn't find a match.",
		"created_at" : "2016-10-04T17:21:19Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1225
	},
	{
		"id" : 81908397,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "Since SDKROOT is set to the Xcode SDK when both Xcode and ~~SDK~~ CLT are installed, I think the better move here is to err on the side of caution and opt out on 10.11 only if CLT is installed and Xcode is not installed. That is why I recommended just checking whether DevelopmentTools.clang_build_version >= 800.",
		"created_at" : "2016-10-05T06:39:57Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1227
	},
	{
		"id" : 81911686,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Use `next if MacOS.version > :leopard` etc. to split this into multiple statements.",
		"created_at" : "2016-10-05T07:11:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1227
	},
	{
		"id" : 81911716,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Similarly with the `next if` approach here. ",
		"created_at" : "2016-10-05T07:11:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1227
	},
	{
		"id" : 82503995,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sorry, it would be `next if MacOS.version < :leopard` and `next if MacOS.version > :el_capitan`",
		"created_at" : "2016-10-08T15:09:38Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1227
	},
	{
		"id" : 82088336,
		"user" : {
			"login" : "vladshablinsky"
		},
		"body" : "`formula.deprecated_options.size` is always true.\r\nProbably this is better: `unless formula.deprecated_options.empty?`",
		"created_at" : "2016-10-05T22:54:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1228
	},
	{
		"id" : 82088770,
		"user" : {
			"login" : "jonchang"
		},
		"body" : "Ah, didn't realize that 0 doesn't evaluate to boolean false. Will fix.",
		"created_at" : "2016-10-05T22:58:34Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1228
	},
	{
		"id" : 82234661,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "We don't want to remove the method entirely, as that would break Casks that still have a `license` stanza. Just replace the method body with `odeprecated \"Hbc::DSL#license\"`",
		"created_at" : "2016-10-06T16:58:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1235
	},
	{
		"id" : 82235397,
		"user" : {
			"login" : "abookyun"
		},
		"body" : "@jawshooah ok, got it.",
		"created_at" : "2016-10-06T17:01:56Z",
		"owner" : "Homebrew",
		"repo" : "brew",
		"pullreq_id": 1235
	},
	{
		"id" : 82253192,
		"user" : {
			"login" : "abookyun"
		},
		"body" : "Something went wrong..😑",
		"created_at" : "2016-10-06T18:27:57Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1235
	},
	{
		"id" : 82266269,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Looks like this breaks the `brew cask list` call in `test/test_cask.rb` because `odeprecated` throws an error when running as `HOMEBREW_DEVELOPER`. In `test_cask.rb`, change `cmd(\"cask\", \"list\")`, to `cmd(\"cask\", \"list\", \"--caskroom=#{HOMEBREW_PREFIX}/Caskroom\")`",
		"created_at" : "2016-10-06T19:34:44Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1235
	},
	{
		"id" : 82335479,
		"user" : {
			"login" : "abookyun"
		},
		"body" : "@jawshooah Fixed the IntegrationCommandTestCask failure, now here is File leak detected. 🤔 Trying dig into it.",
		"created_at" : "2016-10-07T06:35:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1235
	},
	{
		"id" : 82355760,
		"user" : {
			"login" : "abookyun"
		},
		"body" : "@jawshooah fixed it by adding `#{HOMEBREW_PREFIX}/Caskroom` into `paths_to_delete`. Please have a look make sure it's okay. thanks!",
		"created_at" : "2016-10-07T09:22:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1235
	},
	{
		"id" : 82397846,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "`arg` is unused, so change this to \r\n\r\n```ruby\r\ndef license(*)\r\n```",
		"created_at" : "2016-10-07T14:18:36Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1235
	},
	{
		"id" : 82401761,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Let's comment this out for now until `license` has been removed from all official taps.",
		"created_at" : "2016-10-07T14:37:35Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1235
	},
	{
		"id" : 82402605,
		"user" : {
			"login" : "vitorgalvao"
		},
		"body" : "@reitermarkus After this is merged and tagged, I don’t foresee even a day passing before `license` is removed from all official taps.",
		"created_at" : "2016-10-07T14:41:50Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1235
	},
	{
		"id" : 82402841,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Ok then, let's merge this.",
		"created_at" : "2016-10-07T14:43:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1235
	},
	{
		"id" : 82403828,
		"user" : {
			"login" : "abookyun"
		},
		"body" : "ok!",
		"created_at" : "2016-10-07T14:47:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1235
	},
	{
		"id" : 82404481,
		"user" : {
			"login" : "abookyun"
		},
		"body" : "Append another commit, and let's merge it. Thanks guys! 👍 ",
		"created_at" : "2016-10-07T14:50:43Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1235
	},
	{
		"id" : 82499477,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I'd suggest commenting this out again for now.",
		"created_at" : "2016-10-08T09:39:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1235
	},
	{
		"id" : 82504542,
		"user" : {
			"login" : "ilovezfs"
		},
		"body" : "sure you want to hard code the \"1\"?",
		"created_at" : "2016-10-08T15:37:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1238
	},
	{
		"id" : 82504560,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "For now, yeh. If we get to 2.0 that'll be enough in advance to change this.",
		"created_at" : "2016-10-08T15:39:03Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1238
	},
	{
		"id" : 82500098,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Can you pull this change into a separate PR?",
		"created_at" : "2016-10-08T10:25:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1241
	},
	{
		"id" : 82500101,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : ":+1:",
		"created_at" : "2016-10-08T10:25:22Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1241
	},
	{
		"id" : 82506105,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "We don't support Ruby < 2.0 anymore, so this check can probably go.",
		"created_at" : "2016-10-08T17:06:12Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1245
	},
	{
		"id" : 82506473,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "One more nitpick: `IO.read(path)` rather than `File.open(path, \"rb\", &:read)`",
		"created_at" : "2016-10-08T17:28:16Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1245
	},
	{
		"id" : 82522566,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Uninstall should only be called if a cask is actually already installed, so add a check for `cask.installed?`. Also, instead of duplicating the code from `CLI::Uninstall`, you can simply call `CLI::Uninstall::run`.",
		"created_at" : "2016-10-09T13:40:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1248
	},
	{
		"id" : 82522622,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Same thing here, instead of duplicating `CLI::Install`, simply call `CLI::Install::run`.",
		"created_at" : "2016-10-09T13:43:11Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1248
	},
	{
		"id" : 82522788,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I don't think we should rescue this, this would mean the `uninstall` step failed.",
		"created_at" : "2016-10-09T13:54:24Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1248
	},
	{
		"id" : 82531064,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Also remove this, as this is basically the same error as `CaskAlreadyInstalledError`.",
		"created_at" : "2016-10-09T20:41:10Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1248
	},
	{
		"id" : 82531081,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Everything above this, except `cask = Hbc.load(cask_token)` should also be inside this `if` statement.",
		"created_at" : "2016-10-09T20:41:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1248
	},
	{
		"id" : 82531170,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "This test should check if the files in `local-transmission` are actually installed.\r\n\r\nThey have to be installed after running `Install`, and they also have to be installed after running `Reinstall`.\r\n\r\nThere should be an equivalent test for the case where the cask is *not* already installed when running `Reinstall`.",
		"created_at" : "2016-10-09T20:46:51Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1248
	},
	{
		"id" : 82552004,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Do not re-load the cask here, instead change the variable used for `uninstall`.",
		"created_at" : "2016-10-10T07:11:41Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1248
	},
	{
		"id" : 82585627,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Not sure if this should be `admin` or `wheel`.",
		"created_at" : "2016-10-10T11:26:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1252
	},
	{
		"id" : 82585728,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "This should still be checked. No need to use `sudo` unless necessary.",
		"created_at" : "2016-10-10T11:27:13Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1252
	},
	{
		"id" : 82593522,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Homebrew installer sets `admin`: https://github.com/Homebrew/install/blob/8dcb739d4356f16079172dc9a5aa66a8a36f9860/install#L196-L204",
		"created_at" : "2016-10-10T12:27:29Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1252
	},
	{
		"id" : 82654261,
		"user" : {
			"login" : "niw"
		},
		"body" : "True, just I was cheating. Let me rework on a patch.",
		"created_at" : "2016-10-10T18:06:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1252
	},
	{
		"id" : 82558555,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Not sure I understand this comment, can you elaborate a bit?",
		"created_at" : "2016-10-10T08:05:37Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1253
	},
	{
		"id" : 82558688,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Good idea on flipping these 👍 ",
		"created_at" : "2016-10-10T08:06:52Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1253
	},
	{
		"id" : 82558751,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "If this is a frozen array I'm not sure I see the advantages of making it a set?",
		"created_at" : "2016-10-10T08:07:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1253
	},
	{
		"id" : 82558837,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "My only concern with putting it in the tab is that this may be a very long list. How many values are there for e.g. `mysql`?",
		"created_at" : "2016-10-10T08:08:02Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1253
	},
	{
		"id" : 82591447,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Here's my `INSTALL_RECEIPT.json` for `mysql`:\r\n\r\n```json\r\n{\r\n  \"used_options\": [],\r\n  \"unused_options\": [\r\n    \"--with-test\",\r\n    \"--with-embedded\",\r\n    \"--with-archive-storage-engine\",\r\n    \"--with-blackhole-storage-engine\",\r\n    \"--with-local-infile\",\r\n    \"--with-debug\"\r\n  ],\r\n  \"built_as_bottle\": true,\r\n  \"poured_from_bottle\": true,\r\n  \"changed_files\": [\r\n    \"INSTALL_RECEIPT.json\",\r\n    \"bin/mysql_config\",\r\n    \"bin/mysqld_multi\",\r\n    \"bin/mysqld_safe\",\r\n    \"homebrew.mxcl.mysql.plist\",\r\n    \"include/mysql/my_config.h\",\r\n    \"lib/pkgconfig/mysqlclient.pc\",\r\n    \"mysql-test/Makefile\",\r\n    \"mysql-test/suite/ndb/include/have_java.inc\",\r\n    \"share/doc/mysql/INFO_BIN\",\r\n    \"share/man/man1/myisam_ftdump.1\",\r\n    \"share/man/man1/mysql.server.1\",\r\n    \"share/man/man1/mysql_config.1\",\r\n    \"share/man/man1/mysql_install_db.1\",\r\n    \"share/man/man1/mysqld_multi.1\",\r\n    \"share/man/man1/mysqld_safe.1\",\r\n    \"share/man/man1/mysqldumpslow.1\",\r\n    \"support-files/mysql-log-rotate\",\r\n    \"support-files/mysql.server\",\r\n    \"support-files/mysqld_multi.server\"\r\n  ],\r\n  \"time\": 1476101424,\r\n  \"source_modified_time\": 1472126415,\r\n  \"HEAD\": null,\r\n  \"stdlib\": \"libcxx\",\r\n  \"compiler\": \"clang\",\r\n  \"runtime_dependencies\": [],\r\n  \"source\": {\r\n    \"path\": \"/usr/local/Library/Taps/homebrew/homebrew-core/Formula/mysql.rb\",\r\n    \"tap\": \"homebrew/core\",\r\n    \"spec\": \"stable\",\r\n    \"versions\": {\r\n      \"stable\": \"5.7.15\",\r\n      \"devel\": null,\r\n      \"head\": null,\r\n      \"version_scheme\": 0\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nNot too bad, I think. Would you rather output to a separate file?",
		"created_at" : "2016-10-10T12:12:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1253
	},
	{
		"id" : 82591573,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "O(1) lookup versus O(n). If order doesn't matter and there are no duplicates, why use an array when you could use a set?",
		"created_at" : "2016-10-10T12:13:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1253
	},
	{
		"id" : 82591897,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Keep in mind that `Keg#text_files` queries this collection once for every file, so bringing the complexity of that lookup down is worthwhile if we care about `brew bottle` runtime.",
		"created_at" : "2016-10-10T12:15:28Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1253
	},
	{
		"id" : 82593622,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Agreed, I'll clean this up.",
		"created_at" : "2016-10-10T12:28:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1253
	},
	{
		"id" : 82594621,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Sure. `Tab.from_file` and `Tab.for_keg` both cache the resulting `Tab` instance so that when either is called with the same path, the same instance is returned. `Tab.from_file_content` bypasses the cache. This is desirable here because `keg.relocate_text_files` will rewrite the tab file, and we want to load in the rewritten file before modifying it and writing it out again a few lines down.",
		"created_at" : "2016-10-10T12:35:45Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1253
	},
	{
		"id" : 82594712,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Nah that seems fine, thanks 👍 ",
		"created_at" : "2016-10-10T12:36:25Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1253
	},
	{
		"id" : 82594846,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "The algorithmic speedup is always nice but given Sets aren't strictly interchangeable with arrays I figure it's usually worth using arrays unless profiling shows using sets produces a measurable speedup. Based on your previous comments it sounds like it does so 👍 ",
		"created_at" : "2016-10-10T12:37:32Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1253
	},
	{
		"id" : 82595519,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "I think it would be clearer to nuke the cache before rereading rather than use a method that's not using the cache (and should probably be `private` as a result).",
		"created_at" : "2016-10-10T12:42:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1253
	},
	{
		"id" : 82595551,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Thanks!",
		"created_at" : "2016-10-10T12:42:14Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1253
	},
	{
		"id" : 82608728,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "@reitermarkus Some local testing looks like it should be, good catch. There's probably a maximum number of arguments we can specify but batching them may well produce a speedup 👍 ",
		"created_at" : "2016-10-10T13:58:07Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1253
	},
	{
		"id" : 82610116,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I tried to get rid of https://github.com/Homebrew/brew/blob/c9c7f462d37500549127efba96c7a25e5c70de4a/Library/Homebrew/cask/lib/hbc/artifact/uninstall_base.rb#L11 before by using `getconf ARG_MAX`, but somehow got side-tracked. 😄 ",
		"created_at" : "2016-10-10T14:05:54Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1253
	},
	{
		"id" : 82677026,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Indent this with `end` and the `text_files` two-characters in",
		"created_at" : "2016-10-10T20:29:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1258
	},
	{
		"id" : 82677058,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "`next unless line.include?(\"text\")`",
		"created_at" : "2016-10-10T20:29:56Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1258
	},
	{
		"id" : 82678160,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Sorry, do you mean align `end` with `Utils`?",
		"created_at" : "2016-10-10T20:37:15Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1258
	},
	{
		"id" : 82678352,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Sorry, yeh.",
		"created_at" : "2016-10-10T20:38:26Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1258
	},
	{
		"id" : 82678935,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "Aye 👍 ",
		"created_at" : "2016-10-10T20:42:01Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1258
	},
	{
		"id" : 82679791,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Done in 513c712e4e39b219e405b305c56cc333a59c5550",
		"created_at" : "2016-10-10T20:47:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1258
	},
	{
		"id" : 82680086,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "I think halving the `ARG_MAX` is kinda radical.\r\n\r\n```ruby\r\nENV.inject(0) { |c, (k, v)| c + 2 + k.length + v.length }\r\n```\r\n\r\nget's the exact length of the environment variables. Doubling that should be enough safety margin.",
		"created_at" : "2016-10-10T20:48:58Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1258
	},
	{
		"id" : 82687747,
		"user" : {
			"login" : "reitermarkus"
		},
		"body" : "Could probably make this\r\n\r\n```ruby\r\n@max_command_length ||= Utils.popen_read(\"/usr/bin/getconf\", \"ARG_MAX\").to_i\r\n@max_command_length - 2 * environment_variables_length\r\n```\r\n\r\nsince the `ARG_MAX` will never change.",
		"created_at" : "2016-10-10T21:36:39Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1258
	},
	{
		"id" : 82690352,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Actually, looks like this broke something somehow: https://gist.github.com/jawshooah/c072dd613cdefd383cebba8883e2244f\r\n\r\nSomething other than environment variables must be eating up command characters.",
		"created_at" : "2016-10-10T21:53:59Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1258
	},
	{
		"id" : 82696743,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Nice, I figured there was a reason it felt right to cut it in half!",
		"created_at" : "2016-10-10T22:44:20Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1258
	},
	{
		"id" : 82739536,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "That makes me wonder a bit if it's worth using `xargs` to do the argument splitting to save us some code rather than duplicate theirs?",
		"created_at" : "2016-10-11T07:50:05Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1258
	},
	{
		"id" : 82783928,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"body" : "If it's no slower: less code == 😄 ",
		"created_at" : "2016-10-11T12:46:00Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1258
	},
	{
		"id" : 82921868,
		"user" : {
			"login" : "jawshooah"
		},
		"body" : "Done in d8a6863283048cd2cc1f7fb78178b2fc19420e0c. Much less code indeed! :smile: ",
		"created_at" : "2016-10-12T01:22:42Z",
		"repo" : "brew",
		"owner" : "Homebrew",
		"pullreq_id": 1258
	}
]
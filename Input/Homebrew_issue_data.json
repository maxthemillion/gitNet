[
	{
		"id" : 192937272,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-03-06T17:09:02Z",
		"body" : ">> When I merge Homebrew into Linuxbrew first as a pull request, all the modified and new formula will be built on CI and will either be bottled or marked as Fails.\r\n\r\n>What CI are you using for this and what's the build timeout, out of interest?\r\n\r\nI'm considering using Docker Cloud on Amazon EC2, so the build timeout would be unlimited. I've got twelve months of free service with Amazon for now using the free tier. If it goes well, I'll try to estimate the the number of machine hours and the cost of keeping up with the builds, and hopefully find a sponsor.\r\n\r\nSee [Automated repository testing](https://docs.docker.com/docker-cloud/feature-reference/automated-testing/)\r\nand [CI/CD the Docker Way](http://blog.tutum.co/2015/07/21/cicd-the-docker-way/",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1
	},
	{
		"id" : 205425786,
		"user" : {
			"login" : "diclophis"
		},
		"created_at" : "2016-04-04T18:09:46Z",
		"body" : "This patch has completely disrupted our automated homebrew workstation setup, can you explain more why this was necessary? ... Also is there a mailing list or some sort of notification that happens when large changes like this happen so we can plan accordingly?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 2
	},
	{
		"id" : 205429016,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-04T18:17:01Z",
		"body" : "Please see https://groups.google.com/d/msg/homebrew-discuss/D_weS6pZesg/jLgZj6mUCQAJ for more info. TL;DR, we are splitting core code and formulae to two repos.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 2
	},
	{
		"id" : 205429796,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-04T18:18:05Z",
		"body" : "If you have more specific problem, please open an new issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 2
	},
	{
		"id" : 204970357,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-03T13:00:48Z",
		"body" : "Done! Needs some minor adjustments.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 3
	},
	{
		"id" : 204970493,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-03T13:03:31Z",
		"body" : "Thanks @UniqMartin! All addressed and merging.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 3
	},
	{
		"id" : 204970320,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-03T12:59:50Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 4
	},
	{
		"id" : 204970540,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-03T13:04:38Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 4
	},
	{
		"id" : 204973945,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-03T13:23:06Z",
		"body" : "You don't need to move over old PRs, by the way.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 5
	},
	{
		"id" : 204974000,
		"user" : {
			"login" : "ScoreUnder"
		},
		"created_at" : "2016-04-03T13:23:29Z",
		"body" : "Oh. I've done so :D Should I move it back?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 5
	},
	{
		"id" : 204974242,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-03T13:24:05Z",
		"body" : "Nah, it's fine now, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 5
	},
	{
		"id" : 216555129,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:56:51Z",
		"body" : "Thanks for your contribution to Homebrew! Without people like you submitting PRs we couldn't run this project. You rock!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 5
	},
	{
		"id" : 205015255,
		"user" : {
			"login" : "chamini2"
		},
		"created_at" : "2016-04-03T17:23:52Z",
		"body" : "For me it happens when it tries pull requests only:\r\n\r\n```\r\n$ brew search dnuos\r\nNo formula found for \"dnuos\".\r\n==> Searching pull requests...\r\nError: Your OS X keychain GitHub credentials do not have sufficient scope!\r\nScopes they have: []\r\nCreate a personal access token: https://github.com/settings/tokens\r\nand then set HOMEBREW_GITHUB_API_TOKEN as the authentication method instead.\r\nError: 422 Unprocessable Entity\r\nValidation Failed\r\n```\r\n\r\n```\r\n$ brew search ffmpeg\r\nffmpeg                                                                          \r\nffmpeg2theora                                                                   \r\nffmpegthumbnailer\r\nhomebrew/versions/gst-ffmpeg010                                                                                        \r\nCaskroom/cask/ffmpegx\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 6
	},
	{
		"id" : 205021327,
		"user" : {
			"login" : "avetamine"
		},
		"created_at" : "2016-04-03T17:49:06Z",
		"body" : "Same thing for me.. funny thing is yesterday worked just fine ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 6
	},
	{
		"id" : 205023460,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-03T18:07:36Z",
		"body" : "Thanks everyone for the reports! It should be fixed after a `brew update`.\r\n\r\n> Same thing for me.. funny thing is yesterday worked just fine\r\n\r\nQuite a few things have changed under the hood in the past 48 hours (see, e.g., [this announcement](https://groups.google.com/forum/#!topic/homebrew-discuss/D_weS6pZesg)). :wink: And that's one thing we unfortunately missed when during our changes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 6
	},
	{
		"id" : 205022441,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-03T18:01:22Z",
		"body" : "Thanks for the pull request! üéâ Homebrew depends on contributions from community members like you and we're grateful for your support.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 7
	},
	{
		"id" : 205023972,
		"user" : {
			"login" : "v1k0d3n"
		},
		"created_at" : "2016-04-03T18:13:00Z",
		"body" : "oddly enough, when i ran the old school \"permissions repair\" at the cli, now I receive the following: \r\n\r\n```\r\n$ sudo /usr/libexec/repair_packages --repair --standard-pkgs --volume /\r\n...\r\n...\r\n...\r\n$ brew update\r\nError: /usr/local must be writable!\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 9
	},
	{
		"id" : 205023988,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-03T18:13:13Z",
		"body" : "This is not directly related to Homebrew, as the message is coming from the system-provided Ruby. Homebrew is just built on top of it, that's why you see those messages when using Homebrew.\r\n\r\nAt some point you must have changed the permissions of `/usr/local` to be writeable for *everyone*. That's usually not a good idea, hence the warning. It should go away if you change the permissions to something more restrictive (e.g. write access only for your user, others get only read access).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 9
	},
	{
		"id" : 205024063,
		"user" : {
			"login" : "v1k0d3n"
		},
		"created_at" : "2016-04-03T18:14:26Z",
		"body" : "i definitely didn't change those permissions, unless the upgrade did something funky? this was a little unexpected, honestly. thanks for the quick reply though!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 9
	},
	{
		"id" : 205024179,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-03T18:16:03Z",
		"body" : "> oddly enough, when i ran the old school \"permissions repair\" at the cli, now I receive the following:\r\n\r\nThat solved the problem of giving too many people access, which is good. But now you've locked yourself out of Homebrew. Please review the [troubleshooting guide](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting), the solution is listed in the ‚ÄúCommon Issues‚Äù section! Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 9
	},
	{
		"id" : 205024402,
		"user" : {
			"login" : "v1k0d3n"
		},
		"created_at" : "2016-04-03T18:19:50Z",
		"body" : "ah ha! did the trick. i've been using home-brew for a long time, but i think i mixed up the order when running `brew doctor`. repaired permissions and _then_ ran `sudo chown -R $(whoami) /usr/local`. problem solved. thank you for the _gentle_ reminder :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 9
	},
	{
		"id" : 205026385,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-03T18:36:07Z",
		"body" : "Thanks for looking into this! I think this TODO was actually meant that at some point we want to make `brew help <command>` and `brew <command> --help` work properly and consistently‚Äîand more importantly‚Äîshow help specific to the given command instead of just printing an overview. What that means is that the TODO you found is, in my understanding, related to [this piece of code from `brew.rb`](https://github.com/Homebrew/brew/blob/fbc5fc3e92587b47ddd8d8a97eb8e3a138d72957/Library/brew.rb#L64-L81). Would you be interested in working on this?\r\n\r\nI'm not sure we want to take your contribution as-is, because it would make the output of `brew update --help` more useful, but unfortunately inconsistent with `brew help update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 205026578,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-04-03T18:39:25Z",
		"body" : "Ah, I see. I'll take a look at right away. It seems like it shouldn't be to hard. However, where should the help text live? In a bunch of small files, or in the man page? The latter will make this a bit tricky, but having a bunch of small files introduces a build step for the man page.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 205033839,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-03T18:57:28Z",
		"body" : "> Ah, I see. I'll take a look at right away.\r\n\r\nThanks! If you can come up with a good solution for this long-standing issue, that would be much appreciated! :heart: \r\n\r\n> However, where should the help text live? In a bunch of small files, or in the man page?\r\n\r\nThat's not easily answered, but ideally we'll find a solution that avoids duplicating the documentation (as separate pieces of documentation tend to diverge easily over time). Maybe you can ponder the different possible options and their pros/cons and present them here. I don't want to stop you, but it might also be a good idea to wait a little bit for other maintainer's opinions.\r\n\r\n> [‚Ä¶], but having a bunch of small files introduces a build step for the man page.\r\n\r\nI don't think that's a major issue. We already use `brew man` to regenerate the man page and a corresponding HTML file from the Markdown version of the man page. A step that combines multiple smaller files into a single file could be added to that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 205042667,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-03T19:47:24Z",
		"body" : "I agree with Martin; I think we'd want to pass on this for now because of the `brew help update` vs `brew --help update` difference; as I understand, they're supposed to be identical. Thank you for the submission though!\r\n\r\n> That's not easily answered, but ideally we'll find a solution that avoids duplicating the documentation (as separate pieces of documentation tend to diverge easily over time).\r\n\r\nThis is a big question and I think it's tied to the need for better processing of command line options, where we'd like to be able to know which options are used by which commands, and provide completion help and feedback on unused/mistyped options.\r\n\r\nI think a good way to do this would be to add support for defining `brew` subcommands as Ruby objects, instead of simple Ruby functions or scripts (with back-compatibility wrappers for the current style of commands and external commands). They could have `helptext()`, `options()`, `summary()` methods, and so on. I think that's probably necessary as a central way of handling the different ways commands can already be implemented now, and need to continue to be supported due to the \"external command\" mechanism. I'm actually working on a proof-of-concept of one way to do this now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 205047855,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-04-03T20:26:28Z",
		"body" : "So, I've implemented this properly, and currently regexping the brew.1.md file to do this. But for the long term this needs to live inside the commands, as you said.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 205196622,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-04T08:37:40Z",
		"body" : "I like that you're trying to make a start on subcommand help, well done. Rather that just trying to parse the manpage I think it may be worth having dedicated help perhaps in the file itself. The nicest pattern I've seen for that was using `#/` as comments at the top of the file and then reading those lines just with `grep` and `tr`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 205262941,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-04T11:55:36Z",
		"body" : "As suggested by @bfontaine, we probably should reimplement our command system using `Command` class. i.e. make each internal command like:\r\n```ruby\r\nclass InstallCommand < Command\r\n  help <<-EOS.undent\r\n    ...\r\n  EOS\r\n\r\n  def run\r\n  end  \r\n  ...\r\nend\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 205265794,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-04T12:05:13Z",
		"body" : "> Rather that just trying to parse the manpage I think it may be worth having dedicated help perhaps in the file itself. The nicest pattern I've seen for that was using `#/` as comments at the top of the file and then reading those lines just with `grep` and `tr`.\r\n\r\nI have to agree with Mike. I think this sounds like a nice pattern. It also keeps the help text close to the implementation, which should help with keeping the help text in sync with the code. It's initially a bit more work, as the individual parts of the man page need to be moved to the command files, but it sounds like this will pay off long term.\r\n\r\n@maxnordlund If you agree this is a sensible approach, can you maybe do that for a few commands so that we get a better idea of how the code could look like? That would also require some adjustments to `brew man` to make it assemble the complete Markdown man page from those individual snippets, then proceed to convert this generated file to `brew.1` and `brew.1.html`. If everyone is happy with how that looks, we could proceed to move the help texts for all commands.\r\n\r\n> As suggested by @bfontaine, we probably should reimplement our command system using Command class. i.e. make each internal command like:\r\n\r\nI think this is a good long-term goal, but what is being suggested here is much easier to implement and provides an immediate benefit. It can be modified further once we're ready to provide a better abstraction for our commands, and then moving those help texts into an `help <<-EOS.undent` block is no big deal.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 205381911,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-04-04T16:34:30Z",
		"body" : "So I've changed it to pull the help text from the top level comment, like @mikemcquaid suggested. It does look a lot nicer, that `sed` was a bit much :smile: \r\n\r\nI've also pulled out the help logic into `brew.sh` to make it snappy, and since I need to read the files anyway, it seemed simpler then doing it in ruby.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 205845183,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-05T14:57:15Z",
		"body" : "This isn't a bad short-term solution, but I think a more robust class-based solution wouldn't be that hard. I've put together a proof-of-concept at #28 for comparison. It lets you define the subcommand help using DSL that looks like that of `Formula`, which might be a nice consistency for Homebrew.\r\n\r\n```\r\nclass ListBrewCmd < BrewCmdClass\r\n  summary \"List installed formulae, or files in installed formula\"\r\n  helptext <<EOS\r\n\r\nbrew list, ls - #{summary}\r\n\r\n  brew list [--full-name]\r\n  brew list --unbrewed\r\n  brew list [--versions [--multiple]] [--verbose] [--pinned] <formulae>\r\n\r\nOptions:\r\n  --full-name  Print fully-qualified formula names\r\n  --unbrewed   List all files in brew prefix not installed by Homebrew\r\n  --versions   Include formula version numbers\r\n  --multiple   Only show formulae with multiple versions installed\r\n  --pinned     Show versions of pinned formulae\r\nEOS\r\n\r\n  def run\r\n    Homebrew.list\r\n  end\r\nend\r\n\r\nmodule Homebrew\r\n  def list\r\n  # ... rest of command definition ...\r\n```\r\n\r\nHave a look and let me know what you think. It could also be expanded to incorporate the syntax discussed here if that's a significant win.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 205927943,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-04-05T18:17:26Z",
		"body" : "The biggest problem I foresee using a Ruby based approach is that it firmly treats shell based commands as secondary citizen. For external commands, this may not be a big problem iff they can handle help themselves. But as @apjanke said, if they ignore it and have side effects, it can turn south fast.\r\n\r\nI would like to keep the approach as consistent as possible, and having a special top level comment solves that quite neatly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 205951318,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-04-05T19:08:39Z",
		"body" : "So I've rewritten into `help.sh`, which I think looks a lot nicer. The only thing left in `brew.sh` is a small normalization to make both `brew help foo` and `brew foo --help` go to `help.sh`.\r\n\r\nAfter thinking a bit more on the command class approach, it makes sense for making autocompletion work smoother, and some other goodies. It'll still make shell commands harder to write, but maybe that's a sacrifice we're willing to make?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 206118155,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-06T04:55:30Z",
		"body" : ">  that it firmly treats shell based commands as secondary citizen.\r\n\r\nSorry, but shell based commands are the secondary citizen for Homebrew. We won't turn every piece of commands into bash. We only use it for special cases where we cannot use Ruby, like `update` and `install-vendor-ruby`(which will happen in the future). So even, I agree using comment is a good short term solution. I'm still :-1: to implement the logic in bash.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 206198315,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T08:02:52Z",
		"body" : "> I'm still  to implement the logic in bash.\r\n\r\nI agree broadly but there's a few command where I can see an argument for doing it in future for speed reasons e.g. `--prefix` with a formula argument or `cleanup` (which I suspect we can make a lot, lot faster than it is currently).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 206859593,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-04-07T12:32:35Z",
		"body" : "I've moved back the logic into ruby, which I guess makes sense. But about shell commands being secondary citizen, you also have to think about external commands. If we want the handling of help to be shared with those as well, it makes a lot of sense (at least to me) to make it as language agnostic as possible. By having this comment syntax, ruby, shell and python are naturally covered.\r\n\r\nFor other language they can do something like:\r\n\r\n```c\r\n/**\r\n#:* `foo` [OPTIONS] [FILES]\r\n#:  ...\r\n*/\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 206864868,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-07T12:37:58Z",
		"body" : "> you also have to think about external commands.\r\n\r\nFor external commands, the help flag should be handled by themselves as whatever they want. \r\n\r\nMore importantly, we should not introduce similar comment based help message to external command. Otherwise, this will become part of public API and I'm still considering this PR as short-term solution(i.e. it will change in the future). ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 206917222,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-07T13:55:01Z",
		"body" : "> ...external commands. If we want the handling of help to be shared with those as well, it makes a lot of sense (at least to me) to make it as language agnostic as possible.\r\n\r\nWe support all languages for external commands, including arbitrary executable binary files, and languages which don't use `#` as their comment character. Nothing that parses the command files themselves will support all languages. For the broadest support and to be truly language-agnostic, you'd treat the command file itself as opaque and put the metadata in an separate file or other location, which would work with any language.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 206969116,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-07T15:59:02Z",
		"body" : "> More importantly, we should not introduce similar comment based help message to external command. Otherwise, this will become part of public API and I'm still considering this PR as short-term solution(i.e. it will change in the future).\r\n\r\nAgreed. That's my only major reservation; if we support it for external commands once, we're adding a new custom file format to our public API. Would rather not commit to supporting it permanently, or have a breaking change in the public API if we can see it coming and avoid it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 206971202,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-04-07T16:05:10Z",
		"body" : "That's very true, I'm in the middle of moving the rest into comments, and when the time comes for something like #28 then it's super simple to refactor.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 207002234,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-04-07T17:16:51Z",
		"body" : "I've updated the `brew man` command to extract the sub commands' help from their files, and added the remaining top level comments, so this should be good to go pending review I think.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 207389830,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-08T11:27:45Z",
		"body" : "For manpage, I think instead of creating `header.md` and `footer.md`. How about making it `brew.1.md.erb`? So we will have one single file with the power of erb.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 207391778,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-08T11:31:05Z",
		"body" : "> I've updated the `brew man` command to extract the sub commands' help from their files, and added the remaining top level comments, so this should be good to go pending review I think.\r\n\r\nI added a whole lot of comments and would like to see them addressed, but most of them are minor and of stylistic nature. What that means: I like very much what I'm seeing! Good job thus far! I think we're getting close to the point where this can get merged.\r\n\r\nOne more thing I'd like to see you do before we finalize this: If you're comfortable working with `git` and rewriting history, could you please consolidate the commits as follows?\r\n\r\n- 1st commit: Actual code changes, i.e. primarily `Library/brew.rb`, `cmd/help.rb`, and `cmd/man.rb`.\r\n- 2nd commit: Moving help texts into individual files in `cmd/*.{rb,sh}` and minor adjustments to those.\r\n- 3rd commit: Add regenerated `brew.1.md`, `brew.1`, and `brew.1.html` after running `brew man`.\r\n\r\nDoes organizing things like this make sense to you?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 207394327,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-08T11:35:33Z",
		"body" : "> How about making it `brew.1.md.erb`? So we will have one single file with the power of erb.\r\n\r\nI'm not opposing this suggestion, but I'm wondering whether we really need this added complexity. The current approach of a header and footer is certainly much easier to understand. Can you make a case that is more compelling than ‚Äúone file instead of two‚Äù?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 207395306,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-08T11:40:00Z",
		"body" : "> Can you make a case that is more compelling than ‚Äúone file instead of two‚Äù?\r\n\r\nMy thinking is it would make `brew.1.md.erb` more easy to read as it will show clear structure on how manpage is organized without reading the code of `brew man`. But sure, this can be done in a follow-up PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 207447936,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-08T14:16:13Z",
		"body" : "This is neat. As a random aside I'd still love to see us use `#/` because I've seen it used in multiple other projects, it reads a little nicer to me and I think it would be good to turn off that RuboCop warning anyway",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 207451693,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-04-08T14:25:23Z",
		"body" : "I've rebased and squashed a bit, and for the rest of the style comments, which I think are mostly good, they can be done in a follow up PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 207789863,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-09T13:31:27Z",
		"body" : "> I've rebased and squashed a bit, and for the rest of the style comments, which I think are mostly good, they can be done in a follow up PR.\r\n\r\nThanks, looking good! :+1: I'd like to see the regression that I pointed out in a code comment to be addressed, but otherwise I agree. Unless there's a very substantial veto from another maintainer, I'm intending to pull this as soon as the regression is addressed. (The work that has been done here is a significant improvement and I would strongly prefer to defer refinements to follow-up PRs.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 207803947,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-04-09T15:04:52Z",
		"body" : "I've fixed the regression now, just like @UniqMartin suggested.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 208071406,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-10T21:08:37Z",
		"body" : "Merged in 10edfcd218daf522db5a9d43a368572441dc0b5a; also took the liberty to make some minor adjustments in 0382134cf87321166fb8f03223e21b1d242ad7cb and to squash your regression fix commit. Thanks a lot for your contribution to Homebrew, @maxnordlund! :tada:\r\n\r\nThe work you've done here is greatly appreciated and I'm happy you followed up on my suggestion to massively expand the scope of your original PR. Looking forward to see more contributions from you! :smile_cat:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 10
	},
	{
		"id" : 208199157,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-11T07:25:58Z",
		"body" : "Great work here @maxnordlund :clap: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 10
	},
	{
		"id" : 208322088,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-04-11T12:45:38Z",
		"body" : "Thanks, it's so much nicer to help when you receive some love :smile: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 208849202,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T11:06:34Z",
		"body" : "Just a random comment for here after using it: I think we should delete `Library/Homebrew/manpages/brew.1.md` and use a different location as the temporary output file. It took me a bit to understand that that file is overwritten when I run `brew man` and I should be editing e.g. `footer.md`. It's also not used for anything except input so it feels safe to :fire: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 10
	},
	{
		"id" : 205040715,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-04-03T19:36:57Z",
		"body" : "> all the changes I has stored locally appear to be gone!\r\n\r\nHow did you store them? Did you add your formulae files directly under `Library/Formula/`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 11
	},
	{
		"id" : 205040862,
		"user" : {
			"login" : "ellio167"
		},
		"created_at" : "2016-04-03T19:39:14Z",
		"body" : "I did `brew create` and then committed the changes to my /usr/local/ repo.  Luckily, I have pushed these changes to my own remote fork of the repo.  So, I'll be able to recover, but it was surprising that the migration didn't check for any changes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 11
	},
	{
		"id" : 205041218,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-04-03T19:41:21Z",
		"body" : "It `reset` the git history during the migration. The supported way to have your own formulae is to host them in a tap: https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/How-to-Create-and-Maintain-a-Tap.md",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 11
	},
	{
		"id" : 205041512,
		"user" : {
			"login" : "ellio167"
		},
		"created_at" : "2016-04-03T19:42:19Z",
		"body" : "Ah!  OK, that's a helpful pointer... Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 11
	},
	{
		"id" : 205383485,
		"user" : {
			"login" : "joneskoo"
		},
		"created_at" : "2016-04-04T16:36:44Z",
		"body" : "Quite scary to lose all local changes without prompt. I was working on a pull request, and did a brew update. Now the change is gone. Would have been a great idea to rename the old directory rather than destroy it without prompt. No luck with Time Machine either. :disappointed: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 11
	},
	{
		"id" : 205387225,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-04T16:44:23Z",
		"body" : "While this is regrettable: putting untracked, uncommitted, unbackuped files in any Git repository is a disaster waiting to happen.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 11
	},
	{
		"id" : 205051311,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-03T20:41:46Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 12
	},
	{
		"id" : 205191540,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-04T08:28:20Z",
		"body" : "Sounds good. Any way of getting it running on Heroku's free tier?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 13
	},
	{
		"id" : 205303865,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-04T13:52:42Z",
		"body" : "Heroku's free tier is only up 18 hours a day. Amazon Lambda seems kind of perfect, though, and it has a pretty big monthly free tier, so I'm planning on moving it there. (Does GitHub have a favorite AWS region?)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 13
	},
	{
		"id" : 205305850,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-04T13:57:43Z",
		"body" : "\"pretty big\" isn't encouraging to me because it implies that it may break at a future point once we're used to this functionality.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 13
	},
	{
		"id" : 205313507,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-04T14:14:43Z",
		"body" : "Maybe \"real big\"? They're, like, really cheap, even if we exceed the free tier, which is pretty generous. SNS has 1 million free requests + $0.50/million afterwards with free inbound data transfer; Lambda's free tier includes 1 million free requests (+ $0.20/million afterwards), and is good for 30 hours/day of execution on their smallest RAM allocation. The first GB of outbound data from Lambda is free.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 13
	},
	{
		"id" : 205320987,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-04T14:27:20Z",
		"body" : "Would be good to have a vague benchmark on what would need to happen for us to exceed that tier. I'd really rather avoid relying on another service unless we're sure it's not going to break and/or require us to pay money.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 13
	},
	{
		"id" : 205324550,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-04T14:35:12Z",
		"body" : "How about I set up SNS with a dummy Lambda hook for a couple of days on Homebrew/core and we'll see what volume looks like?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 13
	},
	{
		"id" : 205353825,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-04T15:34:56Z",
		"body" : "Okay, currently monitoring Homebrew/homebrew-core, Homebrew/brew, and Homebrew/legacy-homebrew with a dummy lambda; I'll let it spin for a couple days and see what it looks like.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 13
	},
	{
		"id" : 206094339,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-06T02:56:49Z",
		"body" : "We're triggering ~300 invocations a day, so we have a safety cushion of about 990,000 invocations a month before we owe about a dollar.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 13
	},
	{
		"id" : 207453082,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-08T14:29:47Z",
		"body" : "@tdsmith Neat. Want to see about applying for http://www.techsoup.org/amazon-web-services too?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 13
	},
	{
		"id" : 207535008,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-08T17:49:19Z",
		"body" : "The Techsoup offer is $175 a year for $2000 worth of credit; do we plan to use AWS more extensively?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 13
	},
	{
		"id" : 207771379,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T11:13:20Z",
		"body" : "@tdsmith I don't know, maybe? I'm wondering if it's something that would be worth considering in future. I know I'd love to consider moving e.g. the Jenkins web server to ELB.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 13
	},
	{
		"id" : 207771392,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T11:13:47Z",
		"body" : "> Does GitHub have a favorite AWS region?\r\n\r\n`us-east`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 13
	},
	{
		"id" : 207856789,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-09T21:40:39Z",
		"body" : "Ah, bummer:\r\n\r\nhttp://www.techsoup.org/support/product-donation-faq\r\n\r\n> **My organization does not have 501(c)(3) nonprofit status but our fiscal sponsor does. Is my organization eligible for donations?**\r\nCharitable organizations in the U.S. that are fiscally sponsored by parent groups, foundations, or business incubators are not eligible to participate in TechSoup donation programs.\r\n\r\n> In almost all cases, each organization that registers is required to have its own federal tax exemption with the IRS. Your organization may be eligible under an IRS group exemption, as is the case with certain national service organizations or church denominations that list their subordinate members. If you're unsure about your eligibility, please contact TechSoup Customer Service before you begin the registration process.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 13
	},
	{
		"id" : 207865242,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-09T22:14:56Z",
		"body" : "I reached out to Techsoup support to see if we can figure out whether we're eligible. I've used Techsoup to get accounting software for a small education non-profit before and found them pretty responsive, so let's see.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 13
	},
	{
		"id" : 207961470,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-10T11:10:30Z",
		"body" : "Thanks @tdsmith!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 13
	},
	{
		"id" : 208993137,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-12T16:30:50Z",
		"body" : "They pretty much said \"no\"; we can reach out to SFC to see if they have any opinions, I guess.\r\n\r\ngithub-snooze-button is turned on and nobody's complained yet so I'll close this. :)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 13
	},
	{
		"id" : 205191913,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-04T08:29:05Z",
		"body" : "Personally I'm üëé on this; I don't think it's well maintained enough and I'd personally really rather we doubled-down on GitHub issues features (labels, assignments, milestones) for this stuff.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 14
	},
	{
		"id" : 205470515,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-04T20:01:34Z",
		"body" : "> I'd personally really rather we doubled-down on GitHub issues features (labels, assignments, milestones) for this stuff\r\n\r\nI think Trello can be better than it is but I'm ultimately agnostic to the system we use; what do you imagine this looking like?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 14
	},
	{
		"id" : 205712093,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-05T08:05:47Z",
		"body" : "@tdsmith A few things we could be doing that we're not (some are mutually exclusive):\r\n- Tracking issues using checkboxes that we link to other issues. These could perhaps even live in a `Homebrew/planning` repository to make it easier for the community to follow along\r\n- Use issue milestones: https://github.com/Homebrew/brew/milestones\r\n- Assign the issues that are being actively worked on (i.e. you'll do some work towards this issue in the next week)\r\n- For every \"feature\" PR mandate an issue describing and discussing the feature\r\n\r\nSome of these are overkill but could improve communication with the community like you mention",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 14
	},
	{
		"id" : 207890261,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-10T00:19:55Z",
		"body" : "Closing for now.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 14
	},
	{
		"id" : 205079575,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-03T23:58:23Z",
		"body" : "I like the new code. Seems more maintainable to me with the native Ruby stuff.\r\n\r\nLooks like the failure is either an output format change, or failure to respect `--local`.\r\n\r\n```\r\n# Running:\r\n\r\nr\n\r\nFinished in 71.055511s, 11.8780 runs/s, 28.6959 assertions/s.\r\n\r\n  1) Failure:\r\nIntegrationCommandTests#test_prune [/usr/local/Library/Homebrew/test/test_integration_cmds.rb:697]:\r\nExpected /Nothing\\ pruned\\nNo\\ apps\\ unlinked\\ from\\ \\/Applications\\nNo\\ apps\\ unlinked\\ from\\ \\/Users\\//\r\n to match \"Nothing pruned\\nNo apps unlinked from /Applications\"\r\n.\r\n\r\n844 runs, 2039 assertions, 1 failures, 0 errors, 0 skips\r\nrake aborted!\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 15
	},
	{
		"id" : 205195799,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-04T08:35:00Z",
		"body" : "Looks good to me except the test failure.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 15
	},
	{
		"id" : 206065503,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-06T01:29:42Z",
		"body" : "Addressed the comments and (hopefully) fixed the test failure.\r\n\r\n> I like the new code. Seems more maintainable to me with the native Ruby stuff.\r\n\r\nThanks!\r\n\r\n> Looks like the failure is either an output format change, or failure to respect `--local`.\r\n\r\nThat was just my somewhat naive assumption that the user we're testing with by default has an `Applications` directory in their home directory. I have now relaxed the test to only assume that `/Applications` exists and that should get rid of the failure.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 15
	},
	{
		"id" : 206190349,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T07:49:44Z",
		"body" : "LGTM!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 15
	},
	{
		"id" : 205146590,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-04T05:52:29Z",
		"body" : "Looks like there are a couple other issues besides the pattern for valid XML characters.\r\n\r\nThe output from the test steps is [buffered one byte at a time](https://github.com/Homebrew/brew/blob/ac8088304603a95e2ae4d187016a50c36c622605/Library/Homebrew/cmd/test-bot.rb#L158-L163), because the IO streams for the `pipe` are encoded as BINARY.\r\n\r\n```\r\n      begin\r\n        pid = fork do\r\n          read.close\r\n          $stdout.reopen(write)\r\n          $stderr.reopen(write)\r\n          write.close\r\n          working_dir.cd { exec(*@command) }\r\n        end\r\n        write.close\r\n        while buf = read.read(1)\r\n          if verbose\r\n            print buf\r\n            $stdout.flush\r\n          end\r\n          @output << buf\r\n        end\r\n      ensure\r\n        read.close\r\n      end\r\n```\r\n\r\nSince `buf` is a `BINARY` aka `ASCII-8BIT` stream, I think that means each individual byte will be coerced to a `UTF-8` character, not code unit, when it's appended to `@output`. So multibyte UTF-8 characters will be transcoded wrong.\r\n\r\nThen later on, long output is truncated. At this point, it's a UTF-8 string, so `slice()` takes offsets in character counts. But the bounds are calculated in terms of bytes, so they may be off, and it's possible that output with lots of multibyte characters could cause the offsets to fall outside the bounds of the string, erroneously producing `nil` instead of a substring. Or if there are lots of multibyte characters, the resulting truncated string could still be significantly longer than 1 MB, which could be a problem if that 1 MB is a hard limit.\r\n\r\n```\r\n            if output.bytesize > BYTES_IN_1_MEGABYTE\r\n              output = \"truncated output to 1MB:\\n\" \\\r\n                + output.slice(-BYTES_IN_1_MEGABYTE, BYTES_IN_1_MEGABYTE)\r\n            end\r\n```\r\n\r\nWorking on fixing those up as part of this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 16
	},
	{
		"id" : 205176454,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-04T07:38:37Z",
		"body" : "I think I have a fix for this ‚Äì https://github.com/apjanke/brew/commit/eb8db209c3a79145be49191978ef2328e602abee. But I don't know how to write a unit test for it, since `test-bot` is already a testing scaffold, and (I think) is dependent on the state of your local git repos.\r\n\r\nSeems to work when I run it locally on my 10.9 and 10.11 boxes. And I found why the issue might be occurring for this case: one of the file names in the `akka` distribution has spaces and an oddball multibyte character in its name: `akka-2.4.2/lib/akka/i have sp+ÔøΩces.jar`. Looks like it's there to exercise encoding and escaping issues just like this.\r\n\r\nWhen I look at the diff in the output between the current code and my patch, it shows up as different. But I'm having trouble pulling out exactly the difference, because the text editors and stuff I'm working with are probably doing their own invalid-character-replacement stuff.\r\n\r\n```\r\n4784c4784\r\n<   inflating: akka-2.4.2/lib/akka/i have sp+ÔøΩces.jar\r\n---\r\n>   inflating: akka-2.4.2/lib/akka/i have sp+ÔøΩces.jar\r\n```\r\n\r\nNext up: finding a simple command-line XML validator that I can pass the \"before\" and \"after\" `brew-test-bot.xml` output to, to see if validation is fixed. Preferably one using the same Java XML libraries that Jenkins does. Seems like I ought to know one, but my XML-fu all involves developing big Java programs.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 16
	},
	{
		"id" : 205177195,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-04T07:42:09Z",
		"body" : "Oh, ha ha: it's just `xmllint`, included with OS X.\r\n\r\nIt likes my changes.\r\n\r\n```\r\n[~/tmp/test-bot]\r\n$ xmllint --noout brew-test-bot-orig.xml\r\nbrew-test-bot-orig.xml:4784: parser error : Input is not proper UTF-8, indicate encoding !\r\nBytes: 0xF1 0x63 0x65 0x73\r\n  inflating: akka-2.4.2/lib/akka/i have sp+ÔøΩces.jar\r\n                                           ^\r\n[‚úò ~/tmp/test-bot]\r\n$ xmllint --noout brew-test-bot-after.xml\r\n[~/tmp/test-bot]\r\n$\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 16
	},
	{
		"id" : 205194645,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-04T08:33:13Z",
		"body" : "@apjanke Nice work on this. When you're happy with it I think it's fine to just push to `master` for the `test-bot.rb` to run and just keep an eye on it for a few jobs.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 16
	},
	{
		"id" : 205197991,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-04T08:44:06Z",
		"body" : "Thank you!\r\n\r\nIf @xu-cheng is awake, would like to hear his feedback before pushing, since he knows `test-bot`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 16
	},
	{
		"id" : 205199298,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-04T08:51:05Z",
		"body" : "I think you can push it. Looks good to me. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 16
	},
	{
		"id" : 205201215,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-04T08:58:38Z",
		"body" : "Thanks! I'm about to go to bed. I'll push it in the morning when I'll be around to monitor the test jobs for a while.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 16
	},
	{
		"id" : 205601037,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-05T02:19:04Z",
		"body" : "Pushed it. I'll be watching the test-bot for the next few hours, and running some additional builds to exercise it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 16
	},
	{
		"id" : 205795516,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-05T13:10:33Z",
		"body" : ":clap: Thanks for not only tackling this issue, but also for documenting the process so nicely! Reading this issue was very instructive and insightful.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 16
	},
	{
		"id" : 206003111,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-05T22:04:54Z",
		"body" : "I pushed the revised version. Since then, some Jenkins runs have been failing with \"output not available\", but they're Jenkins-level errors saying \"GitHub is down for maintenance\", so I'm pretty sure it's a coincidence. Will keep an eye on it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 16
	},
	{
		"id" : 205252764,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-04T11:26:03Z",
		"body" : "@mikemcquaid @xu-cheng @apjanke Updated incorporating the feedback and moved over here to non-legacyville",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 17
	},
	{
		"id" : 205259817,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-04T11:41:27Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 17
	},
	{
		"id" : 205261905,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-04T11:49:45Z",
		"body" : "Probably need to update manpage as well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 17
	},
	{
		"id" : 205753185,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-05T10:45:19Z",
		"body" : "@xu-cheng @mikemcquaid @apjanke OK, PR refreshed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 17
	},
	{
		"id" : 205827778,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-05T14:12:14Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 17
	},
	{
		"id" : 205371585,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-04T16:13:42Z",
		"body" : "Nice spot, thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 18
	},
	{
		"id" : 205713853,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-05T08:09:32Z",
		"body" : "üëç üëè ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 19
	},
	{
		"id" : 205445358,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-04T18:52:11Z",
		"body" : "They were already unusably slow but I think maybe it got even worse?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 205572348,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-05T01:13:06Z",
		"body" : "Oh, it's scanning Library/Formulas which is a symlink to the core tap now, and then it scans all the taps, so it's ~twice as bad as it used to be.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 205579731,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-05T01:26:11Z",
		"body" : "also i'm pretty sure the algorithm used for taps is quadratic in the number of formulas",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 219967347,
		"user" : {
			"login" : "pavelrad"
		},
		"created_at" : "2016-05-18T09:01:53Z",
		"body" : "This was very fast before all core formulae were moved to a separate core tap. Now it's very slow. Just compare to brew-cask completion, which takes just a moment to complete formula name.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 219968590,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-18T09:07:27Z",
		"body" : "@pavelrad Casks are also in a tap so there's a bug here we'll need help fixing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 219973190,
		"user" : {
			"login" : "pavelrad"
		},
		"created_at" : "2016-05-18T09:27:37Z",
		"body" : "Why this issue is closed? It's definitely not fixed yet.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 219976368,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-18T09:41:35Z",
		"body" : "@pavelrad Because it's less slow than it was.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 20
	},
	{
		"id" : 220486730,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-05-20T00:19:16Z",
		"body" : "In my subjective experience it's now much faster than it was before the split! I don't know why we're seeing different things.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 220556901,
		"user" : {
			"login" : "metacollin"
		},
		"created_at" : "2016-05-20T09:18:15Z",
		"body" : "No, it is not fixed at all.  \r\n\r\nIt used to take a couple hundred milliseconds.  \r\n\r\nIt now takes 3-5 seconds of one of my 3.2GHz Xeon cores maxed out at 100% utilization.  Performing tab completion in brew actually makes my fans spin up.  \r\n\r\n\r\nI am not sure what the exact mechanism is yet, but the issue is homebrew core being a tap.  That's what is causing the unacceptably poor tab completion performance.  \r\n\r\nIt's not the aliases, nor is it having to look through stuff twice (Formula, AND the tap).  It's just the fact that is there at all.  If you remove the Formula alias in `/usr/local/Library/`, as well as the Aliases alias, tap completion performance is not improved even slightly.  It's still dog slow.\r\n\r\nIf you move the Formula directory out of the homebrew tap and *anywhere* else, then create a new symlink to it in the `/usr/local/Library` directory, homebrew's old 200ms tab completion performance immediately returns.  Or just putting it back in its old spot works too.  Whatever is going on, it has nothing to do with the number of formula, and everything to do with simply being in the taps folder.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 220564531,
		"user" : {
			"login" : "metacollin"
		},
		"created_at" : "2016-05-20T09:53:44Z",
		"body" : "I figured out the problem.  We're getting differing results because some of us have an old completion script for homebrew that is getting loaded in addition to the new one. \r\n\r\nEveryone, check your `$(brew --prefix)/etc/bash_completion.d/` directory for any other files starting with 'brew'.  There should be exactly one file, which is called simply 'brew'.  I found I had a 'brew_bash_completion.sh' and 'brew_bash_completion.sh.default' in that directory.  They're leftovers from brew-legacy.  \r\n\r\nRemove them and the speed issues immediately go away, but completion works without issue.  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 220565905,
		"user" : {
			"login" : "pavelrad"
		},
		"created_at" : "2016-05-20T10:00:19Z",
		"body" : "Great! Removing 'brew_bash_completion.sh' really helped with this issue, thank you, @metacollin. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 220566167,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-20T10:01:32Z",
		"body" : "@pavelrad @metacollin Glad to hear it. We could/should perhaps have Homebrew remove them for you.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 220566611,
		"user" : {
			"login" : "pavelrad"
		},
		"created_at" : "2016-05-20T10:03:25Z",
		"body" : "Yes, that would be nice to have some automatic cleanup of these old scripts.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 220567819,
		"user" : {
			"login" : "metacollin"
		},
		"created_at" : "2016-05-20T10:09:47Z",
		"body" : "Thirded.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 220668602,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-20T17:29:46Z",
		"body" : "> We could/should perhaps have Homebrew remove them for you.\r\n\r\nAny idea where to put this? I could imagine this being a (very lightweight) new check in `brew doctor`, but in this case we could only suggest the removal and not perform the removal automatically. (Since we're always asking for `brew doctor` output for troubleshooting, this might be sufficient.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 220669094,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-20T17:31:49Z",
		"body" : "@UniqMartin Feels like the sort of cleanup `update-report.rb` does?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 220678004,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-20T18:07:13Z",
		"body" : "> Feels like the sort of cleanup `update-report.rb` does?\r\n\r\nDidn't think of it, but this sounds like the right place. I'm still a bit hesitant to automatically delete stuff in `etc`, even if we're pretty sure the files are created by Homebrew. I think so far we've refrained from doing something like this. (There might be a tiny minority of users who have customized `etc/bash_completion.d/brew_bash_completion.sh` and would be unhappy about it being silently wiped from their disk. Just wanted to mention this; I'm personally not very concerned that's a significant issue‚Äîunlike the tab completion slowness.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 220680611,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-20T18:17:50Z",
		"body" : "> I think so far we've refrained from doing something like this.\r\n\r\nI think we've actually taken more extreme measures previously: https://github.com/Homebrew/brew/blob/0123e04faed98c06dc395a2ec0d7fa0de2f56d5d/Library/brew.rb#L81-L84 ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 220687979,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-05-20T18:47:10Z",
		"body" : "There's also the `mv foo foo.bak` approach. üëç  for auto-cleanup one way or another.\r\n\r\nProbably paranoid, but would we want to replace it with a zero-length file in case someone's shell profile sources it without checking for existence so we don't break their terminal?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 220689514,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-20T18:53:28Z",
		"body" : "> There's also the `mv foo foo.bak` approach. üëç for auto-cleanup one way or another.\r\n\r\nWe'd have to move it out of the directory, but I generally like the idea of moving files instead of wiping them. The question here would be where to move them to? Do we want to introduce the equivalent of `lost+found` for Homebrew and where would that live?\r\n\r\n> Probably paranoid, but would we want to replace it with a zero-length file in case someone's shell profile sources it without checking for existence so we don't break their terminal?\r\n\r\nI think in this case it's better to break the profile, so that it can be fixed. The error message will be sufficiently descriptive and if people come to us with that error, we'll know what to do. If too many issues are created after doing this (I hope not), we can still create a dummy file (with a comment that it's obsoleted by `brew`) there to avoid being swamped.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 220797092,
		"user" : {
			"login" : "metacollin"
		},
		"created_at" : "2016-05-21T19:52:41Z",
		"body" : "It's worth noting that uninstalling bash completion (either the actual package or from within homebrew) removes a large number of scripts from `bash_completion.d/` and overwrites modifications etc. upon installation.  bash_completion's documentation explicitly states that user modifications to installed completion scripts in that directory will not persist over upgrades, installations, or uninstalls.  Brew's expected behavior would be to overwrite any files in that folder that it created (even if it was quite a while ago) upon an update if needed.  There is a separate folder for user modified or user created completions, `$(brew --prefix)/etc/profile.d/`.  \r\n\r\nI think is actually a valid concern, I've seen a lot of people who do some pretty terrible things in the name of 'ricing' their shell, like aliasing cp to call rsync, or having `` `which python` `` return a bash script that would return a path instead of a path, and I'm sure there is at least one unfortunate bastard out there who is sourcing this homebrew file, and in his system-wide bash profile, not just his user account.\r\n\r\nBut, noting what I said in the first paragraph, we could simply over write the file with an empty one, thus solving the problem without causing Mr. Unfortunate Bastard a very bad day. \r\n\r\nAn even safer option might be to only do that if it is unchanged from the original homebrew-legacy script (this would need to be a manual check I think - but it could just pull it in from github or a gist to do the check), and if there are changes, move it  elsewhere, symlink it into `bash_completion.d/`, track it with git in its new home (since a .git folder in `bash_completions.d/` would be no bue√±o), and emit the familiar 'git stash pop' warning about user changes.  \r\n\r\nA solution I am not nearly as big a fan of, but is probably the simplest, safest, and also least effective, is to just add a `brew doctor` check for the file that recommends the user remove it manually.  \r\n\r\nJust some ideas. I have no feeling for what they think is 'ok' or not for homebrew to do, but I tried to think up things that, while involved, would minimize the invasiveness.  *shrug*",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 220806957,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-22T00:03:56Z",
		"body" : "Am out & about, so will give more feedback later, but one quick thing to be aware of: \"bash completion\" can mean two things in Homebrew land. There's `brew`'s own support for bash completion, and there's the `bash-completion` formula, which is a separate project that provides completions for many commands. These two things are independent. \"Uninstalling bash completion\" and the `$(brew --prefix)/etc/profile.d` sounds like you're referring to the `bash-completion` formula stuff. Brew's own bash completion support gets installed directly to `/usr/local/etc/bash_completion.d/brew`, should be independent of the `bash-completion` formula, and there is no support for uninstallation of it.\r\n\r\n(There's a [similar issue with `zsh-completion` vs \"zsh completion\"](https://github.com/Homebrew/legacy-homebrew/issues/49066).)\r\n\r\nThe stuff about leaving user modifications alone to \"bash_completion\" might be from `bash-completion`'s own doco. AFAIK, `brew`'s bash completion does not support user modification at all. And, as a separate issue, the way we install `bash-completion` might be messing with their support for unmolested user modifications, but I don't think that's the problem this GitHub issue is addressing.\r\n\r\nWill give this a close reading and feedback later tonight.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 238813111,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:25:50Z",
		"body" : "This has been improved as much as it will be for now. If this is still broken for you: we'll accept PRs for this but we're not actively working on it at this time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 20
	},
	{
		"id" : 205467838,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-04T19:53:00Z",
		"body" : "Does `cd /usr/local; git reset --hard origin/master; brew update` work?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 205470751,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-04-04T20:02:24Z",
		"body" : "Let me check‚Ä¶OK, here's what happened when I did what you suggested:  \r\n```\r\nBryces-HD-1-TB:~ zadmin$ cd /usr/local\r\nBryces-HD-1-TB:local zadmin$ git reset --hard origin/master\r\nerror: 'Library/Aliases' appears as both a file and as a directory\r\nerror: Library/Aliases: cannot drop to stage #0\r\nChecking out files: 100% (4089/4089), done.\r\nHEAD is now at fa3c55a utils/analytics: fix usage of undefined variable.\r\nBryces-HD-1-TB:local zadmin$ brew update -vd\r\n++ [[ /usr/local = \\/\\u\\s\\r\\/\\l\\o\\c\\a\\l ]]\r\n++ [[ ! -w /usr/local ]]\r\n++ [[ ! -w /usr/local ]]\r\n++ git --version\r\n++ export GIT_TERMINAL_PROMPT=0\r\n++ GIT_TERMINAL_PROMPT=0\r\n++ export GIT_ASKPASS=false\r\n++ GIT_ASKPASS=false\r\n++ export 'GIT_SSH_COMMAND=ssh -oBatchMode=yes'\r\n++ GIT_SSH_COMMAND='ssh -oBatchMode=yes'\r\n++ [[ -z 1 ]]\r\n++ QUIET_ARGS=()\r\n++ unset GIT_CONFIG\r\n++ chdir /usr/local\r\n++ cd /usr/local\r\n++ git_init_if_necessary\r\n++ [[ -n 1 ]]\r\n++ OFFICIAL_REMOTE=https://github.com/Homebrew/brew.git\r\n++ [[ ! -d .git ]]\r\n++ rename_taps_dir_if_necessary\r\n++ local tap_dir\r\n++ local tap_dir_basename\r\n++ local user\r\n++ local repo\r\n++ for tap_dir in '\"$HOMEBREW_LIBRARY\"/Taps/*'\r\n++ [[ -d /usr/local/Library/Taps/caskroom/.git ]]\r\n++ continue\r\n++ for tap_dir in '\"$HOMEBREW_LIBRARY\"/Taps/*'\r\n++ [[ -d /usr/local/Library/Taps/homebrew/.git ]]\r\n++ continue\r\n++ trap '{ pkill -P $$; wait; exit 130; }' SIGINT\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/.git ]]\r\n++ [[ -n '' ]]\r\n++ cd /usr/local\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n+++ upstream_branch=\r\n+++ upstream_branch=\r\n+++ [[ -z '' ]]\r\n+++ upstream_branch=master\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/caskroom/homebrew-cask/.git ]]\r\n++ [[ -n '' ]]\r\n++ cd /usr/local/Library/Taps/caskroom/homebrew-cask\r\n+++ upstream_branch\r\n+++ git config remote.origin.url\r\n+++ local upstream_branch\r\n+++ /usr/local/Library/ENV/scm/git config remote.origin.url\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n++ UPSTREAM_REPOSITORY_URL=https://github.com/Homebrew/brew.git\r\n++ [[ https://github.com/Homebrew/brew.git = \\h\\t\\t\\p\\s\\:\\/\\/\\g\\i\\t\\h\\u\\b\\.\\c\\o\\m\\/* ]]\r\n++ UPSTREAM_REPOSITORY=Homebrew/brew.git\r\n++ UPSTREAM_REPOSITORY=Homebrew/brew\r\n+++ git rev-parse refs/remotes/origin/master\r\n+++ /usr/local/Library/ENV/scm/git rev-parse refs/remotes/origin/master\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/caskroom/homebrew-versions/.git ]]\r\n+++ git config remote.origin.url\r\n+++ /usr/local/Library/ENV/scm/git config remote.origin.url\r\n++ UPSTREAM_BRANCH_LOCAL_SHA=fa3c55aa650e815ce548e1276845171def2847f4\r\n+++ curl --silent --max-time 3 --output /dev/null --write-out '%{http_code}' --user-agent 'Homebrew/0.9.9 (Macintosh; Intel Mac OS X 10.11.4) curl/7.43.0' --header 'Accept: application/vnd.github.chitauri-preview+sha' --header 'If-None-Match: \"fa3c55aa650e815ce548e1276845171def2847f4\"' https://api.github.com/repos/Homebrew/brew/commits/master\r\n++ [[ -n '' ]]\r\n++ cd /usr/local/Library/Taps/caskroom/homebrew-versions\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n++ UPSTREAM_REPOSITORY_URL=https://github.com/caskroom/homebrew-cask\r\n++ [[ https://github.com/caskroom/homebrew-cask = \\h\\t\\t\\p\\s\\:\\/\\/\\g\\i\\t\\h\\u\\b\\.\\c\\o\\m\\/* ]]\r\n++ UPSTREAM_REPOSITORY=caskroom/homebrew-cask\r\n++ UPSTREAM_REPOSITORY=caskroom/homebrew-cask\r\n+++ git rev-parse refs/remotes/origin/master\r\n+++ /usr/local/Library/ENV/scm/git rev-parse refs/remotes/origin/master\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/homebrew/homebrew-apache/.git ]]\r\n+++ git config remote.origin.url\r\n+++ /usr/local/Library/ENV/scm/git config remote.origin.url\r\n++ [[ -n '' ]]\r\n++ cd /usr/local/Library/Taps/homebrew/homebrew-apache\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n++ UPSTREAM_BRANCH_LOCAL_SHA=8a89363c7772b4ffc09250c643bafb15af7b3ddb\r\n+++ curl --silent --max-time 3 --output /dev/null --write-out '%{http_code}' --user-agent 'Homebrew/0.9.9 (Macintosh; Intel Mac OS X 10.11.4) curl/7.43.0' --header 'Accept: application/vnd.github.chitauri-preview+sha' --header 'If-None-Match: \"8a89363c7772b4ffc09250c643bafb15af7b3ddb\"' https://api.github.com/repos/caskroom/homebrew-cask/commits/master\r\n++ UPSTREAM_REPOSITORY_URL=https://github.com/caskroom/homebrew-versions\r\n++ [[ https://github.com/caskroom/homebrew-versions = \\h\\t\\t\\p\\s\\:\\/\\/\\g\\i\\t\\h\\u\\b\\.\\c\\o\\m\\/* ]]\r\n++ UPSTREAM_REPOSITORY=caskroom/homebrew-versions\r\n++ UPSTREAM_REPOSITORY=caskroom/homebrew-versions\r\n+++ git rev-parse refs/remotes/origin/master\r\n+++ /usr/local/Library/ENV/scm/git rev-parse refs/remotes/origin/master\r\n++ UPSTREAM_BRANCH_LOCAL_SHA=0df50018f046637b2d8d39051dc6ee347a85cb93\r\n+++ curl --silent --max-time 3 --output /dev/null --write-out '%{http_code}' --user-agent 'Homebrew/0.9.9 (Macintosh; Intel Mac OS X 10.11.4) curl/7.43.0' --header 'Accept: application/vnd.github.chitauri-preview+sha' --header 'If-None-Match: \"0df50018f046637b2d8d39051dc6ee347a85cb93\"' https://api.github.com/repos/caskroom/homebrew-versions/commits/master\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/homebrew/homebrew-boneyard/.git ]]\r\n++ [[ -n '' ]]\r\n++ cd /usr/local/Library/Taps/homebrew/homebrew-boneyard\r\n+++ git config remote.origin.url\r\n+++ /usr/local/Library/ENV/scm/git config remote.origin.url\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n++ UPSTREAM_REPOSITORY_URL=https://github.com/Homebrew/homebrew-apache\r\n++ [[ https://github.com/Homebrew/homebrew-apache = \\h\\t\\t\\p\\s\\:\\/\\/\\g\\i\\t\\h\\u\\b\\.\\c\\o\\m\\/* ]]\r\n++ UPSTREAM_REPOSITORY=Homebrew/homebrew-apache\r\n++ UPSTREAM_REPOSITORY=Homebrew/homebrew-apache\r\n+++ git rev-parse refs/remotes/origin/master\r\n+++ /usr/local/Library/ENV/scm/git rev-parse refs/remotes/origin/master\r\n++ UPSTREAM_SHA_HTTP_CODE=304\r\n++ [[ 304 = \\3\\0\\4 ]]\r\n++ exit\r\n++ UPSTREAM_BRANCH_LOCAL_SHA=0ee1dd9012f506897ef75ca6f2a559d19576d709\r\n+++ curl --silent --max-time 3 --output /dev/null --write-out '%{http_code}' --user-agent 'Homebrew/0.9.9 (Macintosh; Intel Mac OS X 10.11.4) curl/7.43.0' --header 'Accept: application/vnd.github.chitauri-preview+sha' --header 'If-None-Match: \"0ee1dd9012f506897ef75ca6f2a559d19576d709\"' https://api.github.com/repos/Homebrew/homebrew-apache/commits/master\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ UPSTREAM_SHA_HTTP_CODE=200\r\n++ [[ 200 = \\3\\0\\4 ]]\r\n++ git fetch --force origin refs/heads/master:refs/remotes/origin/master\r\n++ /usr/local/Library/ENV/scm/git fetch --force origin refs/heads/master:refs/remotes/origin/master\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/homebrew/homebrew-core/.git ]]\r\n++ [[ -n '' ]]\r\n++ cd /usr/local/Library/Taps/homebrew/homebrew-core\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n+++ git config remote.origin.url\r\n+++ /usr/local/Library/ENV/scm/git config remote.origin.url\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n++ UPSTREAM_SHA_HTTP_CODE=304\r\n++ [[ 304 = \\3\\0\\4 ]]\r\n++ exit\r\n++ UPSTREAM_REPOSITORY_URL=https://github.com/Homebrew/homebrew-boneyard\r\n++ [[ https://github.com/Homebrew/homebrew-boneyard = \\h\\t\\t\\p\\s\\:\\/\\/\\g\\i\\t\\h\\u\\b\\.\\c\\o\\m\\/* ]]\r\n++ UPSTREAM_REPOSITORY=Homebrew/homebrew-boneyard\r\n++ UPSTREAM_REPOSITORY=Homebrew/homebrew-boneyard\r\n+++ git rev-parse refs/remotes/origin/master\r\n+++ /usr/local/Library/ENV/scm/git rev-parse refs/remotes/origin/master\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/homebrew/homebrew-dupes/.git ]]\r\n+++ git config remote.origin.url\r\n+++ /usr/local/Library/ENV/scm/git config remote.origin.url\r\n++ UPSTREAM_BRANCH_LOCAL_SHA=affe08558438419eb8765e76f011f4278aea10ea\r\n+++ curl --silent --max-time 3 --output /dev/null --write-out '%{http_code}' --user-agent 'Homebrew/0.9.9 (Macintosh; Intel Mac OS X 10.11.4) curl/7.43.0' --header 'Accept: application/vnd.github.chitauri-preview+sha' --header 'If-None-Match: \"affe08558438419eb8765e76f011f4278aea10ea\"' https://api.github.com/repos/Homebrew/homebrew-boneyard/commits/master\r\n++ [[ -n '' ]]\r\n++ cd /usr/local/Library/Taps/homebrew/homebrew-dupes\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n++ UPSTREAM_REPOSITORY_URL=https://github.com/Homebrew/homebrew-core\r\n++ [[ https://github.com/Homebrew/homebrew-core = \\h\\t\\t\\p\\s\\:\\/\\/\\g\\i\\t\\h\\u\\b\\.\\c\\o\\m\\/* ]]\r\n++ UPSTREAM_REPOSITORY=Homebrew/homebrew-core\r\n++ UPSTREAM_REPOSITORY=Homebrew/homebrew-core\r\n+++ git rev-parse refs/remotes/origin/master\r\n+++ /usr/local/Library/ENV/scm/git rev-parse refs/remotes/origin/master\r\n++ UPSTREAM_SHA_HTTP_CODE=304\r\n++ [[ 304 = \\3\\0\\4 ]]\r\n++ exit\r\n++ UPSTREAM_BRANCH_LOCAL_SHA=30d907f65f70db8f6845a18f2f9fafa6bbbbf900\r\n+++ curl --silent --max-time 3 --output /dev/null --write-out '%{http_code}' --user-agent 'Homebrew/0.9.9 (Macintosh; Intel Mac OS X 10.11.4) curl/7.43.0' --header 'Accept: application/vnd.github.chitauri-preview+sha' --header 'If-None-Match: \"30d907f65f70db8f6845a18f2f9fafa6bbbbf900\"' https://api.github.com/repos/Homebrew/homebrew-core/commits/master\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/homebrew/homebrew-php/.git ]]\r\n++ [[ -n '' ]]\r\n++ cd /usr/local/Library/Taps/homebrew/homebrew-php\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n+++ git config remote.origin.url\r\n+++ /usr/local/Library/ENV/scm/git config remote.origin.url\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n++ UPSTREAM_REPOSITORY_URL=https://github.com/Homebrew/homebrew-dupes\r\n++ [[ https://github.com/Homebrew/homebrew-dupes = \\h\\t\\t\\p\\s\\:\\/\\/\\g\\i\\t\\h\\u\\b\\.\\c\\o\\m\\/* ]]\r\n++ UPSTREAM_REPOSITORY=Homebrew/homebrew-dupes\r\n++ UPSTREAM_REPOSITORY=Homebrew/homebrew-dupes\r\n+++ git rev-parse refs/remotes/origin/master\r\n+++ /usr/local/Library/ENV/scm/git rev-parse refs/remotes/origin/master\r\n++ UPSTREAM_SHA_HTTP_CODE=304\r\n++ [[ 304 = \\3\\0\\4 ]]\r\n++ exit\r\n++ UPSTREAM_BRANCH_LOCAL_SHA=ed82adaa71c1550fb66d4ffaffeaa65d4e433314\r\n+++ curl --silent --max-time 3 --output /dev/null --write-out '%{http_code}' --user-agent 'Homebrew/0.9.9 (Macintosh; Intel Mac OS X 10.11.4) curl/7.43.0' --header 'Accept: application/vnd.github.chitauri-preview+sha' --header 'If-None-Match: \"ed82adaa71c1550fb66d4ffaffeaa65d4e433314\"' https://api.github.com/repos/Homebrew/homebrew-dupes/commits/master\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/homebrew/homebrew-services/.git ]]\r\n+++ git config remote.origin.url\r\n+++ /usr/local/Library/ENV/scm/git config remote.origin.url\r\n++ [[ -n '' ]]\r\n++ cd /usr/local/Library/Taps/homebrew/homebrew-services\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n++ UPSTREAM_REPOSITORY_URL=https://github.com/Homebrew/homebrew-php\r\n++ [[ https://github.com/Homebrew/homebrew-php = \\h\\t\\t\\p\\s\\:\\/\\/\\g\\i\\t\\h\\u\\b\\.\\c\\o\\m\\/* ]]\r\n++ UPSTREAM_REPOSITORY=Homebrew/homebrew-php\r\n++ UPSTREAM_REPOSITORY=Homebrew/homebrew-php\r\n+++ git rev-parse refs/remotes/origin/master\r\n+++ /usr/local/Library/ENV/scm/git rev-parse refs/remotes/origin/master\r\n++ UPSTREAM_SHA_HTTP_CODE=200\r\n++ [[ 200 = \\3\\0\\4 ]]\r\n++ git fetch --force origin refs/heads/master:refs/remotes/origin/master\r\n++ /usr/local/Library/ENV/scm/git fetch --force origin refs/heads/master:refs/remotes/origin/master\r\n++ UPSTREAM_BRANCH_LOCAL_SHA=fc62caccf59a7a6cacbe386d0225872f6a4f0a29\r\n+++ curl --silent --max-time 3 --output /dev/null --write-out '%{http_code}' --user-agent 'Homebrew/0.9.9 (Macintosh; Intel Mac OS X 10.11.4) curl/7.43.0' --header 'Accept: application/vnd.github.chitauri-preview+sha' --header 'If-None-Match: \"fc62caccf59a7a6cacbe386d0225872f6a4f0a29\"' https://api.github.com/repos/Homebrew/homebrew-php/commits/master\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ wait\r\n+++ git config remote.origin.url\r\n+++ /usr/local/Library/ENV/scm/git config remote.origin.url\r\n++ UPSTREAM_REPOSITORY_URL=https://github.com/Homebrew/homebrew-services\r\n++ [[ https://github.com/Homebrew/homebrew-services = \\h\\t\\t\\p\\s\\:\\/\\/\\g\\i\\t\\h\\u\\b\\.\\c\\o\\m\\/* ]]\r\n++ UPSTREAM_REPOSITORY=Homebrew/homebrew-services\r\n++ UPSTREAM_REPOSITORY=Homebrew/homebrew-services\r\n+++ git rev-parse refs/remotes/origin/master\r\n+++ /usr/local/Library/ENV/scm/git rev-parse refs/remotes/origin/master\r\n++ UPSTREAM_SHA_HTTP_CODE=304\r\n++ [[ 304 = \\3\\0\\4 ]]\r\n++ exit\r\n++ UPSTREAM_BRANCH_LOCAL_SHA=d47ae5f6856bd1fae94d40a578358cadc20f00bf\r\n+++ curl --silent --max-time 3 --output /dev/null --write-out '%{http_code}' --user-agent 'Homebrew/0.9.9 (Macintosh; Intel Mac OS X 10.11.4) curl/7.43.0' --header 'Accept: application/vnd.github.chitauri-preview+sha' --header 'If-None-Match: \"d47ae5f6856bd1fae94d40a578358cadc20f00bf\"' https://api.github.com/repos/Homebrew/homebrew-services/commits/master\r\n++ UPSTREAM_SHA_HTTP_CODE=304\r\n++ [[ 304 = \\3\\0\\4 ]]\r\n++ exit\r\n++ UPSTREAM_SHA_HTTP_CODE=304\r\n++ [[ 304 = \\3\\0\\4 ]]\r\n++ exit\r\nremote: Counting objects: 8, done.\r\nremote: Compressing objects: 100% (5/5), done.\r\nremote: Total 8 (delta 6), reused 5 (delta 3), pack-reused 0\r\nUnpacking objects: 100% (8/8), done.\r\nFrom https://github.com/Homebrew/homebrew-core\r\n   30d907f..bfca446  master     -> origin/master\r\nremote: Counting objects: 9, done.\r\nremote: Compressing objects: 100% (6/6), done.\r\nremote: Total 9 (delta 6), reused 6 (delta 3), pack-reused 0\r\nUnpacking objects: 100% (9/9), done.\r\nFrom https://github.com/caskroom/homebrew-cask\r\n   8a89363..88004db  master     -> origin/master\r\n++ trap - SIGINT\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/.git ]]\r\n++ pull /usr/local\r\n++ local DIR\r\n++ local TAP_VAR\r\n++ DIR=/usr/local\r\n++ cd /usr/local\r\n+++ repo_var /usr/local\r\n+++ local repo_var\r\n+++ repo_var=/usr/local\r\n+++ [[ /usr/local = \\/\\u\\s\\r\\/\\l\\o\\c\\a\\l ]]\r\n+++ repo_var=\r\n+++ echo ''\r\n++ TAP_VAR=\r\n++ unset STASHED\r\n+++ git symbolic-ref --short HEAD\r\n++ INITIAL_BRANCH=master\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n+++ upstream_branch=\r\n+++ upstream_branch=\r\n+++ [[ -z '' ]]\r\n+++ upstream_branch=master\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ [[ -n '' ]]\r\n++ trap reset_on_interrupt SIGINT\r\n+++ git status --untracked-files=all --porcelain\r\n++ [[ -n  U Library/Formula\r\n U Library/Homebrew/README.md\r\n U Library/Homebrew/blacklist.rb\r\n U Library/Homebrew/cmd/audit.rb\r\n U Library/Homebrew/cmd/config.rb\r\n U Library/Homebrew/cmd/create.rb\r\n U Library/Homebrew/cmd/help.rb\r\n U Library/Homebrew/cmd/prune.rb\r\n U Library/Homebrew/cmd/pull.rb\r\n U Library/Homebrew/cmd/readall.rb\r\n U Library/Homebrew/cmd/tap-info.rb\r\n U Library/Homebrew/cmd/tap-pin.rb\r\n U Library/Homebrew/cmd/tap-readme.rb\r\n U Library/Homebrew/cmd/tap-unpin.rb\r\n U Library/Homebrew/cmd/tap.rb\r\n U Library/Homebrew/cmd/test-bot.rb\r\n U Library/Homebrew/cmd/untap.rb\r\n U Library/Homebrew/cmd/update-report.rb\r\n U Library/Homebrew/cmd/update.sh\r\n U Library/Homebrew/descriptions.rb\r\n U Library/Homebrew/dev-cmd/update-test.rb\r\n U Library/Homebrew/diagnostic.rb\r\n U Library/Homebrew/exceptions.rb\r\n U Library/Homebrew/extend/pathname.rb\r\n U Library/Homebrew/formula.rb\r\n U Library/Homebrew/formula_installer.rb\r\n U Library/Homebrew/formulary.rb\r\n U Library/Homebrew/global.rb\r\n U Library/Homebrew/manpages/brew.1.md\r\n U Library/Homebrew/os.rb\r\n U Library/Homebrew/os/mac.rb\r\n U Library/Homebrew/os/mac/xcode.rb\r\n U Library/Homebrew/tab.rb\r\n U Library/Homebrew/tap.rb\r\n U Library/Homebrew/test/fixtures/receipt.json\r\n U Library/Homebrew/test/fixtures/updater_fixture.yaml\r\n U Library/Homebrew/test/test_cmd_info.rb\r\n U Library/Homebrew/test/test_formula.rb\r\n U Library/Homebrew/test/test_formulary.rb\r\n U Library/Homebrew/test/test_integration_cmds.rb\r\n U Library/Homebrew/test/test_pathname.rb\r\n U Library/Homebrew/test/test_tab.rb\r\n U Library/Homebrew/test/test_tap.rb\r\n U Library/Homebrew/test/test_update_report.rb\r\n U Library/Homebrew/test/testing_env.rb\r\n U Library/Homebrew/utils.rb\r\n U Library/Homebrew/utils/git.rb\r\n U Library/brew.rb\r\n U Library/brew.sh\r\nAU README.md\r\n U share/doc/homebrew/Acceptable-Formulae.md\r\n U share/doc/homebrew/Brew-Test-Bot-For-Core-Contributors.md\r\n U share/doc/homebrew/Brew-Test-Bot.md\r\n U share/doc/homebrew/Common-Issues.md\r\n U share/doc/homebrew/External-Commands.md\r\n U share/doc/homebrew/FAQ.md\r\n U share/doc/homebrew/Formula-Cookbook.md\r\n U share/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md\r\n U share/doc/homebrew/Installation.md\r\n U share/doc/homebrew/Interesting-Taps-&-Branches.md\r\n U share/doc/homebrew/Migrating-A-Formula-To-A-Tap.md\r\n U share/doc/homebrew/New-Maintainer-Checklist.md\r\n U share/doc/homebrew/Querying-Brew.md\r\n U share/doc/homebrew/Rename-A-Formula.md\r\n U share/doc/homebrew/Tips-N'-Tricks.md\r\n U share/doc/homebrew/Troubleshooting.md\r\n U share/doc/homebrew/brew-tap.md\r\n U share/doc/homebrew/brew.1.html\r\n U share/man/man1/brew.1\r\n?? Library/Aliases~HEAD\r\n?? Library/Formula~HEAD ]]\r\n++ [[ -n 1 ]]\r\n++ echo 'Stashing uncommitted changes to /usr/local.'\r\nStashing uncommitted changes to /usr/local.\r\n++ git status --short --untracked-files=all\r\n++ /usr/local/Library/ENV/scm/git status --short --untracked-files=all\r\n U Library/Formula\r\n U Library/Homebrew/README.md\r\n U Library/Homebrew/blacklist.rb\r\n U Library/Homebrew/cmd/audit.rb\r\n U Library/Homebrew/cmd/config.rb\r\n U Library/Homebrew/cmd/create.rb\r\n U Library/Homebrew/cmd/help.rb\r\n U Library/Homebrew/cmd/prune.rb\r\n U Library/Homebrew/cmd/pull.rb\r\n U Library/Homebrew/cmd/readall.rb\r\n U Library/Homebrew/cmd/tap-info.rb\r\n U Library/Homebrew/cmd/tap-pin.rb\r\n U Library/Homebrew/cmd/tap-readme.rb\r\n U Library/Homebrew/cmd/tap-unpin.rb\r\n U Library/Homebrew/cmd/tap.rb\r\n U Library/Homebrew/cmd/test-bot.rb\r\n U Library/Homebrew/cmd/untap.rb\r\n U Library/Homebrew/cmd/update-report.rb\r\n U Library/Homebrew/cmd/update.sh\r\n U Library/Homebrew/descriptions.rb\r\n U Library/Homebrew/dev-cmd/update-test.rb\r\n U Library/Homebrew/diagnostic.rb\r\n U Library/Homebrew/exceptions.rb\r\n U Library/Homebrew/extend/pathname.rb\r\n U Library/Homebrew/formula.rb\r\n U Library/Homebrew/formula_installer.rb\r\n U Library/Homebrew/formulary.rb\r\n U Library/Homebrew/global.rb\r\n U Library/Homebrew/manpages/brew.1.md\r\n U Library/Homebrew/os.rb\r\n U Library/Homebrew/os/mac.rb\r\n U Library/Homebrew/os/mac/xcode.rb\r\n U Library/Homebrew/tab.rb\r\n U Library/Homebrew/tap.rb\r\n U Library/Homebrew/test/fixtures/receipt.json\r\n U Library/Homebrew/test/fixtures/updater_fixture.yaml\r\n U Library/Homebrew/test/test_cmd_info.rb\r\n U Library/Homebrew/test/test_formula.rb\r\n U Library/Homebrew/test/test_formulary.rb\r\n U Library/Homebrew/test/test_integration_cmds.rb\r\n U Library/Homebrew/test/test_pathname.rb\r\n U Library/Homebrew/test/test_tab.rb\r\n U Library/Homebrew/test/test_tap.rb\r\n U Library/Homebrew/test/test_update_report.rb\r\n U Library/Homebrew/test/testing_env.rb\r\n U Library/Homebrew/utils.rb\r\n U Library/Homebrew/utils/git.rb\r\n U Library/brew.rb\r\n U Library/brew.sh\r\nAU README.md\r\n U share/doc/homebrew/Acceptable-Formulae.md\r\n U share/doc/homebrew/Brew-Test-Bot-For-Core-Contributors.md\r\n U share/doc/homebrew/Brew-Test-Bot.md\r\n U share/doc/homebrew/Common-Issues.md\r\n U share/doc/homebrew/External-Commands.md\r\n U share/doc/homebrew/FAQ.md\r\n U share/doc/homebrew/Formula-Cookbook.md\r\n U share/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md\r\n U share/doc/homebrew/Installation.md\r\n U share/doc/homebrew/Interesting-Taps-&-Branches.md\r\n U share/doc/homebrew/Migrating-A-Formula-To-A-Tap.md\r\n U share/doc/homebrew/New-Maintainer-Checklist.md\r\n U share/doc/homebrew/Querying-Brew.md\r\n U share/doc/homebrew/Rename-A-Formula.md\r\n U share/doc/homebrew/Tips-N'-Tricks.md\r\n U share/doc/homebrew/Troubleshooting.md\r\n U share/doc/homebrew/brew-tap.md\r\n U share/doc/homebrew/brew.1.html\r\n U share/man/man1/brew.1\r\n?? Library/Aliases~HEAD\r\n?? Library/Formula~HEAD\r\n++ git merge --abort\r\n++ git -c user.email=brew-update@localhost -c 'user.name=brew update' stash save --include-untracked\r\n++ /usr/local/Library/ENV/scm/git -c user.email=brew-update@localhost -c 'user.name=brew update' stash save --include-untracked\r\nLibrary/Formula: needs merge\r\nLibrary/Homebrew/README.md: needs merge\r\nLibrary/Homebrew/blacklist.rb: needs merge\r\nLibrary/Homebrew/cmd/audit.rb: needs merge\r\nLibrary/Homebrew/cmd/config.rb: needs merge\r\nLibrary/Homebrew/cmd/create.rb: needs merge\r\nLibrary/Homebrew/cmd/help.rb: needs merge\r\nLibrary/Homebrew/cmd/prune.rb: needs merge\r\nLibrary/Homebrew/cmd/pull.rb: needs merge\r\nLibrary/Homebrew/cmd/readall.rb: needs merge\r\nLibrary/Homebrew/cmd/tap-info.rb: needs merge\r\nLibrary/Homebrew/cmd/tap-pin.rb: needs merge\r\nLibrary/Homebrew/cmd/tap-readme.rb: needs merge\r\nLibrary/Homebrew/cmd/tap-unpin.rb: needs merge\r\nLibrary/Homebrew/cmd/tap.rb: needs merge\r\nLibrary/Homebrew/cmd/test-bot.rb: needs merge\r\nLibrary/Homebrew/cmd/untap.rb: needs merge\r\nLibrary/Homebrew/cmd/update-report.rb: needs merge\r\nLibrary/Homebrew/cmd/update.sh: needs merge\r\nLibrary/Homebrew/descriptions.rb: needs merge\r\nLibrary/Homebrew/dev-cmd/update-test.rb: needs merge\r\nLibrary/Homebrew/diagnostic.rb: needs merge\r\nLibrary/Homebrew/exceptions.rb: needs merge\r\nLibrary/Homebrew/extend/pathname.rb: needs merge\r\nLibrary/Homebrew/formula.rb: needs merge\r\nLibrary/Homebrew/formula_installer.rb: needs merge\r\nLibrary/Homebrew/formulary.rb: needs merge\r\nLibrary/Homebrew/global.rb: needs merge\r\nLibrary/Homebrew/manpages/brew.1.md: needs merge\r\nLibrary/Homebrew/os.rb: needs merge\r\nLibrary/Homebrew/os/mac.rb: needs merge\r\nLibrary/Homebrew/os/mac/xcode.rb: needs merge\r\nLibrary/Homebrew/tab.rb: needs merge\r\nLibrary/Homebrew/tap.rb: needs merge\r\nLibrary/Homebrew/test/fixtures/receipt.json: needs merge\r\nLibrary/Homebrew/test/fixtures/updater_fixture.yaml: needs merge\r\nLibrary/Homebrew/test/test_cmd_info.rb: needs merge\r\nLibrary/Homebrew/test/test_formula.rb: needs merge\r\nLibrary/Homebrew/test/test_formulary.rb: needs merge\r\nLibrary/Homebrew/test/test_integration_cmds.rb: needs merge\r\nLibrary/Homebrew/test/test_pathname.rb: needs merge\r\nLibrary/Homebrew/test/test_tab.rb: needs merge\r\nLibrary/Homebrew/test/test_tap.rb: needs merge\r\nLibrary/Homebrew/test/test_update_report.rb: needs merge\r\nLibrary/Homebrew/test/testing_env.rb: needs merge\r\nLibrary/Homebrew/utils.rb: needs merge\r\nLibrary/Homebrew/utils/git.rb: needs merge\r\nLibrary/brew.rb: needs merge\r\nLibrary/brew.sh: needs merge\r\nREADME.md: needs merge\r\nshare/doc/homebrew/Acceptable-Formulae.md: needs merge\r\nshare/doc/homebrew/Brew-Test-Bot-For-Core-Contributors.md: needs merge\r\nshare/doc/homebrew/Brew-Test-Bot.md: needs merge\r\nshare/doc/homebrew/Common-Issues.md: needs merge\r\nshare/doc/homebrew/External-Commands.md: needs merge\r\nshare/doc/homebrew/FAQ.md: needs merge\r\nshare/doc/homebrew/Formula-Cookbook.md: needs merge\r\nshare/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md: needs merge\r\nshare/doc/homebrew/Installation.md: needs merge\r\nshare/doc/homebrew/Interesting-Taps-&-Branches.md: needs merge\r\nshare/doc/homebrew/Migrating-A-Formula-To-A-Tap.md: needs merge\r\nshare/doc/homebrew/New-Maintainer-Checklist.md: needs merge\r\nshare/doc/homebrew/Querying-Brew.md: needs merge\r\nshare/doc/homebrew/Rename-A-Formula.md: needs merge\r\nshare/doc/homebrew/Tips-N'-Tricks.md: needs merge\r\nshare/doc/homebrew/Troubleshooting.md: needs merge\r\nshare/doc/homebrew/brew-tap.md: needs merge\r\nshare/doc/homebrew/brew.1.html: needs merge\r\nshare/man/man1/brew.1: needs merge\r\nLibrary/Formula: needs merge\r\nLibrary/Homebrew/README.md: needs merge\r\nLibrary/Homebrew/blacklist.rb: needs merge\r\nLibrary/Homebrew/cmd/audit.rb: needs merge\r\nLibrary/Homebrew/cmd/config.rb: needs merge\r\nLibrary/Homebrew/cmd/create.rb: needs merge\r\nLibrary/Homebrew/cmd/help.rb: needs merge\r\nLibrary/Homebrew/cmd/prune.rb: needs merge\r\nLibrary/Homebrew/cmd/pull.rb: needs merge\r\nLibrary/Homebrew/cmd/readall.rb: needs merge\r\nLibrary/Homebrew/cmd/tap-info.rb: needs merge\r\nLibrary/Homebrew/cmd/tap-pin.rb: needs merge\r\nLibrary/Homebrew/cmd/tap-readme.rb: needs merge\r\nLibrary/Homebrew/cmd/tap-unpin.rb: needs merge\r\nLibrary/Homebrew/cmd/tap.rb: needs merge\r\nLibrary/Homebrew/cmd/test-bot.rb: needs merge\r\nLibrary/Homebrew/cmd/untap.rb: needs merge\r\nLibrary/Homebrew/cmd/update-report.rb: needs merge\r\nLibrary/Homebrew/cmd/update.sh: needs merge\r\nLibrary/Homebrew/descriptions.rb: needs merge\r\nLibrary/Homebrew/dev-cmd/update-test.rb: needs merge\r\nLibrary/Homebrew/diagnostic.rb: needs merge\r\nLibrary/Homebrew/exceptions.rb: needs merge\r\nLibrary/Homebrew/extend/pathname.rb: needs merge\r\nLibrary/Homebrew/formula.rb: needs merge\r\nLibrary/Homebrew/formula_installer.rb: needs merge\r\nLibrary/Homebrew/formulary.rb: needs merge\r\nLibrary/Homebrew/global.rb: needs merge\r\nLibrary/Homebrew/manpages/brew.1.md: needs merge\r\nLibrary/Homebrew/os.rb: needs merge\r\nLibrary/Homebrew/os/mac.rb: needs merge\r\nLibrary/Homebrew/os/mac/xcode.rb: needs merge\r\nLibrary/Homebrew/tab.rb: needs merge\r\nLibrary/Homebrew/tap.rb: needs merge\r\nLibrary/Homebrew/test/fixtures/receipt.json: needs merge\r\nLibrary/Homebrew/test/fixtures/updater_fixture.yaml: needs merge\r\nLibrary/Homebrew/test/test_cmd_info.rb: needs merge\r\nLibrary/Homebrew/test/test_formula.rb: needs merge\r\nLibrary/Homebrew/test/test_formulary.rb: needs merge\r\nLibrary/Homebrew/test/test_integration_cmds.rb: needs merge\r\nLibrary/Homebrew/test/test_pathname.rb: needs merge\r\nLibrary/Homebrew/test/test_tab.rb: needs merge\r\nLibrary/Homebrew/test/test_tap.rb: needs merge\r\nLibrary/Homebrew/test/test_update_report.rb: needs merge\r\nLibrary/Homebrew/test/testing_env.rb: needs merge\r\nLibrary/Homebrew/utils.rb: needs merge\r\nLibrary/Homebrew/utils/git.rb: needs merge\r\nLibrary/brew.rb: needs merge\r\nLibrary/brew.sh: needs merge\r\nREADME.md: needs merge\r\nshare/doc/homebrew/Acceptable-Formulae.md: needs merge\r\nshare/doc/homebrew/Brew-Test-Bot-For-Core-Contributors.md: needs merge\r\nshare/doc/homebrew/Brew-Test-Bot.md: needs merge\r\nshare/doc/homebrew/Common-Issues.md: needs merge\r\nshare/doc/homebrew/External-Commands.md: needs merge\r\nshare/doc/homebrew/FAQ.md: needs merge\r\nshare/doc/homebrew/Formula-Cookbook.md: needs merge\r\nshare/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md: needs merge\r\nshare/doc/homebrew/Installation.md: needs merge\r\nshare/doc/homebrew/Interesting-Taps-&-Branches.md: needs merge\r\nshare/doc/homebrew/Migrating-A-Formula-To-A-Tap.md: needs merge\r\nshare/doc/homebrew/New-Maintainer-Checklist.md: needs merge\r\nshare/doc/homebrew/Querying-Brew.md: needs merge\r\nshare/doc/homebrew/Rename-A-Formula.md: needs merge\r\nshare/doc/homebrew/Tips-N'-Tricks.md: needs merge\r\nshare/doc/homebrew/Troubleshooting.md: needs merge\r\nshare/doc/homebrew/brew-tap.md: needs merge\r\nshare/doc/homebrew/brew.1.html: needs merge\r\nshare/man/man1/brew.1: needs merge\r\nfatal: You need to resolve your current index first\r\nCannot save the current worktree state\r\n++ git reset --hard\r\n++ /usr/local/Library/ENV/scm/git reset --hard\r\nHEAD is now at fa3c55a utils/analytics: fix usage of undefined variable.\r\n++ STASHED=1\r\n++ [[ master != \\m\\a\\s\\t\\e\\r ]]\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ INITIAL_REVISION=fa3c55aa650e815ce548e1276845171def2847f4\r\n++ export HOMEBREW_UPDATE_BEFORE=fa3c55aa650e815ce548e1276845171def2847f4\r\n++ HOMEBREW_UPDATE_BEFORE=fa3c55aa650e815ce548e1276845171def2847f4\r\n++ git config core.autocrlf false\r\n++ /usr/local/Library/ENV/scm/git config core.autocrlf false\r\n++ [[ -n '' ]]\r\n++ git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\n++ /usr/local/Library/ENV/scm/git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\nAlready up-to-date.\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ export HOMEBREW_UPDATE_AFTER=fa3c55aa650e815ce548e1276845171def2847f4\r\n++ HOMEBREW_UPDATE_AFTER=fa3c55aa650e815ce548e1276845171def2847f4\r\n++ trap '' SIGINT\r\n++ pop_stash_message\r\n++ [[ -z 1 ]]\r\n++ echo 'To restore the stashed changes to /usr/local run:'\r\nTo restore the stashed changes to /usr/local run:\r\n++ echo '  '\\''cd /usr/local && git stash pop'\\'''\r\n  'cd /usr/local && git stash pop'\r\n++ unset STASHED\r\n++ trap - SIGINT\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/caskroom/homebrew-cask/.git ]]\r\n++ pull /usr/local/Library/Taps/caskroom/homebrew-cask\r\n++ local DIR\r\n++ local TAP_VAR\r\n++ DIR=/usr/local/Library/Taps/caskroom/homebrew-cask\r\n++ cd /usr/local/Library/Taps/caskroom/homebrew-cask\r\n+++ repo_var /usr/local/Library/Taps/caskroom/homebrew-cask\r\n+++ local repo_var\r\n+++ repo_var=/usr/local/Library/Taps/caskroom/homebrew-cask\r\n+++ [[ /usr/local/Library/Taps/caskroom/homebrew-cask = \\/\\u\\s\\r\\/\\l\\o\\c\\a\\l ]]\r\n+++ repo_var=/caskroom/homebrew-cask\r\n++++ echo -n /caskroom/homebrew-cask\r\n++++ tr -C A-Za-z0-9 _\r\n++++ tr '[:lower:]' '[:upper:]'\r\n+++ repo_var=_CASKROOM_HOMEBREW_CASK\r\n+++ echo _CASKROOM_HOMEBREW_CASK\r\n++ TAP_VAR=_CASKROOM_HOMEBREW_CASK\r\n++ unset STASHED\r\n+++ git symbolic-ref --short HEAD\r\n++ INITIAL_BRANCH=master\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ [[ -n '' ]]\r\n++ trap reset_on_interrupt SIGINT\r\n+++ git status --untracked-files=all --porcelain\r\n++ [[ -n '' ]]\r\n++ [[ master != \\m\\a\\s\\t\\e\\r ]]\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ INITIAL_REVISION=8a89363c7772b4ffc09250c643bafb15af7b3ddb\r\n++ export HOMEBREW_UPDATE_BEFORE_CASKROOM_HOMEBREW_CASK=8a89363c7772b4ffc09250c643bafb15af7b3ddb\r\n++ HOMEBREW_UPDATE_BEFORE_CASKROOM_HOMEBREW_CASK=8a89363c7772b4ffc09250c643bafb15af7b3ddb\r\n++ git config core.autocrlf false\r\n++ /usr/local/Library/ENV/scm/git config core.autocrlf false\r\n++ [[ -n '' ]]\r\n++ git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\n++ /usr/local/Library/ENV/scm/git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\nUpdating 8a89363..88004db\r\nFast-forward\r\n Casks/radiant-player.rb          | 6 +++---\r\n doc/development/adding_a_cask.md | 2 +-\r\n 2 files changed, 4 insertions(+), 4 deletions(-)\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ export HOMEBREW_UPDATE_AFTER_CASKROOM_HOMEBREW_CASK=88004dba16ef716c80389f7a0527fddf269e939c\r\n++ HOMEBREW_UPDATE_AFTER_CASKROOM_HOMEBREW_CASK=88004dba16ef716c80389f7a0527fddf269e939c\r\n++ trap '' SIGINT\r\n++ pop_stash_message\r\n++ [[ -z '' ]]\r\n++ return\r\n++ trap - SIGINT\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/caskroom/homebrew-versions/.git ]]\r\n++ pull /usr/local/Library/Taps/caskroom/homebrew-versions\r\n++ local DIR\r\n++ local TAP_VAR\r\n++ DIR=/usr/local/Library/Taps/caskroom/homebrew-versions\r\n++ cd /usr/local/Library/Taps/caskroom/homebrew-versions\r\n+++ repo_var /usr/local/Library/Taps/caskroom/homebrew-versions\r\n+++ local repo_var\r\n+++ repo_var=/usr/local/Library/Taps/caskroom/homebrew-versions\r\n+++ [[ /usr/local/Library/Taps/caskroom/homebrew-versions = \\/\\u\\s\\r\\/\\l\\o\\c\\a\\l ]]\r\n+++ repo_var=/caskroom/homebrew-versions\r\n++++ echo -n /caskroom/homebrew-versions\r\n++++ tr -C A-Za-z0-9 _\r\n++++ tr '[:lower:]' '[:upper:]'\r\n+++ repo_var=_CASKROOM_HOMEBREW_VERSIONS\r\n+++ echo _CASKROOM_HOMEBREW_VERSIONS\r\n++ TAP_VAR=_CASKROOM_HOMEBREW_VERSIONS\r\n++ unset STASHED\r\n+++ git symbolic-ref --short HEAD\r\n++ INITIAL_BRANCH=master\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ [[ -n '' ]]\r\n++ trap reset_on_interrupt SIGINT\r\n+++ git status --untracked-files=all --porcelain\r\n++ [[ -n '' ]]\r\n++ [[ master != \\m\\a\\s\\t\\e\\r ]]\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ INITIAL_REVISION=0df50018f046637b2d8d39051dc6ee347a85cb93\r\n++ export HOMEBREW_UPDATE_BEFORE_CASKROOM_HOMEBREW_VERSIONS=0df50018f046637b2d8d39051dc6ee347a85cb93\r\n++ HOMEBREW_UPDATE_BEFORE_CASKROOM_HOMEBREW_VERSIONS=0df50018f046637b2d8d39051dc6ee347a85cb93\r\n++ git config core.autocrlf false\r\n++ /usr/local/Library/ENV/scm/git config core.autocrlf false\r\n++ [[ -n '' ]]\r\n++ git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\n++ /usr/local/Library/ENV/scm/git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\nAlready up-to-date.\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ export HOMEBREW_UPDATE_AFTER_CASKROOM_HOMEBREW_VERSIONS=0df50018f046637b2d8d39051dc6ee347a85cb93\r\n++ HOMEBREW_UPDATE_AFTER_CASKROOM_HOMEBREW_VERSIONS=0df50018f046637b2d8d39051dc6ee347a85cb93\r\n++ trap '' SIGINT\r\n++ pop_stash_message\r\n++ [[ -z '' ]]\r\n++ return\r\n++ trap - SIGINT\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/homebrew/homebrew-apache/.git ]]\r\n++ pull /usr/local/Library/Taps/homebrew/homebrew-apache\r\n++ local DIR\r\n++ local TAP_VAR\r\n++ DIR=/usr/local/Library/Taps/homebrew/homebrew-apache\r\n++ cd /usr/local/Library/Taps/homebrew/homebrew-apache\r\n+++ repo_var /usr/local/Library/Taps/homebrew/homebrew-apache\r\n+++ local repo_var\r\n+++ repo_var=/usr/local/Library/Taps/homebrew/homebrew-apache\r\n+++ [[ /usr/local/Library/Taps/homebrew/homebrew-apache = \\/\\u\\s\\r\\/\\l\\o\\c\\a\\l ]]\r\n+++ repo_var=/homebrew/homebrew-apache\r\n++++ echo -n /homebrew/homebrew-apache\r\n++++ tr -C A-Za-z0-9 _\r\n++++ tr '[:lower:]' '[:upper:]'\r\n+++ repo_var=_HOMEBREW_HOMEBREW_APACHE\r\n+++ echo _HOMEBREW_HOMEBREW_APACHE\r\n++ TAP_VAR=_HOMEBREW_HOMEBREW_APACHE\r\n++ unset STASHED\r\n+++ git symbolic-ref --short HEAD\r\n++ INITIAL_BRANCH=master\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ [[ -n '' ]]\r\n++ trap reset_on_interrupt SIGINT\r\n+++ git status --untracked-files=all --porcelain\r\n++ [[ -n '' ]]\r\n++ [[ master != \\m\\a\\s\\t\\e\\r ]]\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ INITIAL_REVISION=0ee1dd9012f506897ef75ca6f2a559d19576d709\r\n++ export HOMEBREW_UPDATE_BEFORE_HOMEBREW_HOMEBREW_APACHE=0ee1dd9012f506897ef75ca6f2a559d19576d709\r\n++ HOMEBREW_UPDATE_BEFORE_HOMEBREW_HOMEBREW_APACHE=0ee1dd9012f506897ef75ca6f2a559d19576d709\r\n++ git config core.autocrlf false\r\n++ /usr/local/Library/ENV/scm/git config core.autocrlf false\r\n++ [[ -n '' ]]\r\n++ git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\n++ /usr/local/Library/ENV/scm/git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\nAlready up-to-date.\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ export HOMEBREW_UPDATE_AFTER_HOMEBREW_HOMEBREW_APACHE=0ee1dd9012f506897ef75ca6f2a559d19576d709\r\n++ HOMEBREW_UPDATE_AFTER_HOMEBREW_HOMEBREW_APACHE=0ee1dd9012f506897ef75ca6f2a559d19576d709\r\n++ trap '' SIGINT\r\n++ pop_stash_message\r\n++ [[ -z '' ]]\r\n++ return\r\n++ trap - SIGINT\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/homebrew/homebrew-boneyard/.git ]]\r\n++ pull /usr/local/Library/Taps/homebrew/homebrew-boneyard\r\n++ local DIR\r\n++ local TAP_VAR\r\n++ DIR=/usr/local/Library/Taps/homebrew/homebrew-boneyard\r\n++ cd /usr/local/Library/Taps/homebrew/homebrew-boneyard\r\n+++ repo_var /usr/local/Library/Taps/homebrew/homebrew-boneyard\r\n+++ local repo_var\r\n+++ repo_var=/usr/local/Library/Taps/homebrew/homebrew-boneyard\r\n+++ [[ /usr/local/Library/Taps/homebrew/homebrew-boneyard = \\/\\u\\s\\r\\/\\l\\o\\c\\a\\l ]]\r\n+++ repo_var=/homebrew/homebrew-boneyard\r\n++++ echo -n /homebrew/homebrew-boneyard\r\n++++ tr -C A-Za-z0-9 _\r\n++++ tr '[:lower:]' '[:upper:]'\r\n+++ repo_var=_HOMEBREW_HOMEBREW_BONEYARD\r\n+++ echo _HOMEBREW_HOMEBREW_BONEYARD\r\n++ TAP_VAR=_HOMEBREW_HOMEBREW_BONEYARD\r\n++ unset STASHED\r\n+++ git symbolic-ref --short HEAD\r\n++ INITIAL_BRANCH=master\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ [[ -n '' ]]\r\n++ trap reset_on_interrupt SIGINT\r\n+++ git status --untracked-files=all --porcelain\r\n++ [[ -n '' ]]\r\n++ [[ master != \\m\\a\\s\\t\\e\\r ]]\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ INITIAL_REVISION=affe08558438419eb8765e76f011f4278aea10ea\r\n++ export HOMEBREW_UPDATE_BEFORE_HOMEBREW_HOMEBREW_BONEYARD=affe08558438419eb8765e76f011f4278aea10ea\r\n++ HOMEBREW_UPDATE_BEFORE_HOMEBREW_HOMEBREW_BONEYARD=affe08558438419eb8765e76f011f4278aea10ea\r\n++ git config core.autocrlf false\r\n++ /usr/local/Library/ENV/scm/git config core.autocrlf false\r\n++ [[ -n '' ]]\r\n++ git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\n++ /usr/local/Library/ENV/scm/git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\nAlready up-to-date.\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ export HOMEBREW_UPDATE_AFTER_HOMEBREW_HOMEBREW_BONEYARD=affe08558438419eb8765e76f011f4278aea10ea\r\n++ HOMEBREW_UPDATE_AFTER_HOMEBREW_HOMEBREW_BONEYARD=affe08558438419eb8765e76f011f4278aea10ea\r\n++ trap '' SIGINT\r\n++ pop_stash_message\r\n++ [[ -z '' ]]\r\n++ return\r\n++ trap - SIGINT\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/homebrew/homebrew-core/.git ]]\r\n++ pull /usr/local/Library/Taps/homebrew/homebrew-core\r\n++ local DIR\r\n++ local TAP_VAR\r\n++ DIR=/usr/local/Library/Taps/homebrew/homebrew-core\r\n++ cd /usr/local/Library/Taps/homebrew/homebrew-core\r\n+++ repo_var /usr/local/Library/Taps/homebrew/homebrew-core\r\n+++ local repo_var\r\n+++ repo_var=/usr/local/Library/Taps/homebrew/homebrew-core\r\n+++ [[ /usr/local/Library/Taps/homebrew/homebrew-core = \\/\\u\\s\\r\\/\\l\\o\\c\\a\\l ]]\r\n+++ repo_var=/homebrew/homebrew-core\r\n++++ echo -n /homebrew/homebrew-core\r\n++++ tr -C A-Za-z0-9 _\r\n++++ tr '[:lower:]' '[:upper:]'\r\n+++ repo_var=_HOMEBREW_HOMEBREW_CORE\r\n+++ echo _HOMEBREW_HOMEBREW_CORE\r\n++ TAP_VAR=_HOMEBREW_HOMEBREW_CORE\r\n++ unset STASHED\r\n+++ git symbolic-ref --short HEAD\r\n++ INITIAL_BRANCH=master\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ [[ -n '' ]]\r\n++ trap reset_on_interrupt SIGINT\r\n+++ git status --untracked-files=all --porcelain\r\n++ [[ -n '' ]]\r\n++ [[ master != \\m\\a\\s\\t\\e\\r ]]\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ INITIAL_REVISION=30d907f65f70db8f6845a18f2f9fafa6bbbbf900\r\n++ export HOMEBREW_UPDATE_BEFORE_HOMEBREW_HOMEBREW_CORE=30d907f65f70db8f6845a18f2f9fafa6bbbbf900\r\n++ HOMEBREW_UPDATE_BEFORE_HOMEBREW_HOMEBREW_CORE=30d907f65f70db8f6845a18f2f9fafa6bbbbf900\r\n++ git config core.autocrlf false\r\n++ /usr/local/Library/ENV/scm/git config core.autocrlf false\r\n++ [[ -n '' ]]\r\n++ git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\n++ /usr/local/Library/ENV/scm/git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\nUpdating 30d907f..bfca446\r\nFast-forward\r\n Formula/fourstore.rb | 23 +++++++++++++++--------\r\n 1 file changed, 15 insertions(+), 8 deletions(-)\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ export HOMEBREW_UPDATE_AFTER_HOMEBREW_HOMEBREW_CORE=bfca446bdedca3df533f1f79a7bb90a402567529\r\n++ HOMEBREW_UPDATE_AFTER_HOMEBREW_HOMEBREW_CORE=bfca446bdedca3df533f1f79a7bb90a402567529\r\n++ trap '' SIGINT\r\n++ pop_stash_message\r\n++ [[ -z '' ]]\r\n++ return\r\n++ trap - SIGINT\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/homebrew/homebrew-dupes/.git ]]\r\n++ pull /usr/local/Library/Taps/homebrew/homebrew-dupes\r\n++ local DIR\r\n++ local TAP_VAR\r\n++ DIR=/usr/local/Library/Taps/homebrew/homebrew-dupes\r\n++ cd /usr/local/Library/Taps/homebrew/homebrew-dupes\r\n+++ repo_var /usr/local/Library/Taps/homebrew/homebrew-dupes\r\n+++ local repo_var\r\n+++ repo_var=/usr/local/Library/Taps/homebrew/homebrew-dupes\r\n+++ [[ /usr/local/Library/Taps/homebrew/homebrew-dupes = \\/\\u\\s\\r\\/\\l\\o\\c\\a\\l ]]\r\n+++ repo_var=/homebrew/homebrew-dupes\r\n++++ echo -n /homebrew/homebrew-dupes\r\n++++ tr -C A-Za-z0-9 _\r\n++++ tr '[:lower:]' '[:upper:]'\r\n+++ repo_var=_HOMEBREW_HOMEBREW_DUPES\r\n+++ echo _HOMEBREW_HOMEBREW_DUPES\r\n++ TAP_VAR=_HOMEBREW_HOMEBREW_DUPES\r\n++ unset STASHED\r\n+++ git symbolic-ref --short HEAD\r\n++ INITIAL_BRANCH=master\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ [[ -n '' ]]\r\n++ trap reset_on_interrupt SIGINT\r\n+++ git status --untracked-files=all --porcelain\r\n++ [[ -n '' ]]\r\n++ [[ master != \\m\\a\\s\\t\\e\\r ]]\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ INITIAL_REVISION=ed82adaa71c1550fb66d4ffaffeaa65d4e433314\r\n++ export HOMEBREW_UPDATE_BEFORE_HOMEBREW_HOMEBREW_DUPES=ed82adaa71c1550fb66d4ffaffeaa65d4e433314\r\n++ HOMEBREW_UPDATE_BEFORE_HOMEBREW_HOMEBREW_DUPES=ed82adaa71c1550fb66d4ffaffeaa65d4e433314\r\n++ git config core.autocrlf false\r\n++ /usr/local/Library/ENV/scm/git config core.autocrlf false\r\n++ [[ -n '' ]]\r\n++ git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\n++ /usr/local/Library/ENV/scm/git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\nAlready up-to-date.\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ export HOMEBREW_UPDATE_AFTER_HOMEBREW_HOMEBREW_DUPES=ed82adaa71c1550fb66d4ffaffeaa65d4e433314\r\n++ HOMEBREW_UPDATE_AFTER_HOMEBREW_HOMEBREW_DUPES=ed82adaa71c1550fb66d4ffaffeaa65d4e433314\r\n++ trap '' SIGINT\r\n++ pop_stash_message\r\n++ [[ -z '' ]]\r\n++ return\r\n++ trap - SIGINT\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/homebrew/homebrew-php/.git ]]\r\n++ pull /usr/local/Library/Taps/homebrew/homebrew-php\r\n++ local DIR\r\n++ local TAP_VAR\r\n++ DIR=/usr/local/Library/Taps/homebrew/homebrew-php\r\n++ cd /usr/local/Library/Taps/homebrew/homebrew-php\r\n+++ repo_var /usr/local/Library/Taps/homebrew/homebrew-php\r\n+++ local repo_var\r\n+++ repo_var=/usr/local/Library/Taps/homebrew/homebrew-php\r\n+++ [[ /usr/local/Library/Taps/homebrew/homebrew-php = \\/\\u\\s\\r\\/\\l\\o\\c\\a\\l ]]\r\n+++ repo_var=/homebrew/homebrew-php\r\n++++ echo -n /homebrew/homebrew-php\r\n++++ tr -C A-Za-z0-9 _\r\n++++ tr '[:lower:]' '[:upper:]'\r\n+++ repo_var=_HOMEBREW_HOMEBREW_PHP\r\n+++ echo _HOMEBREW_HOMEBREW_PHP\r\n++ TAP_VAR=_HOMEBREW_HOMEBREW_PHP\r\n++ unset STASHED\r\n+++ git symbolic-ref --short HEAD\r\n++ INITIAL_BRANCH=master\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ [[ -n '' ]]\r\n++ trap reset_on_interrupt SIGINT\r\n+++ git status --untracked-files=all --porcelain\r\n++ [[ -n '' ]]\r\n++ [[ master != \\m\\a\\s\\t\\e\\r ]]\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ INITIAL_REVISION=fc62caccf59a7a6cacbe386d0225872f6a4f0a29\r\n++ export HOMEBREW_UPDATE_BEFORE_HOMEBREW_HOMEBREW_PHP=fc62caccf59a7a6cacbe386d0225872f6a4f0a29\r\n++ HOMEBREW_UPDATE_BEFORE_HOMEBREW_HOMEBREW_PHP=fc62caccf59a7a6cacbe386d0225872f6a4f0a29\r\n++ git config core.autocrlf false\r\n++ /usr/local/Library/ENV/scm/git config core.autocrlf false\r\n++ [[ -n '' ]]\r\n++ git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\n++ /usr/local/Library/ENV/scm/git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\nAlready up-to-date.\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ export HOMEBREW_UPDATE_AFTER_HOMEBREW_HOMEBREW_PHP=fc62caccf59a7a6cacbe386d0225872f6a4f0a29\r\n++ HOMEBREW_UPDATE_AFTER_HOMEBREW_HOMEBREW_PHP=fc62caccf59a7a6cacbe386d0225872f6a4f0a29\r\n++ trap '' SIGINT\r\n++ pop_stash_message\r\n++ [[ -z '' ]]\r\n++ return\r\n++ trap - SIGINT\r\n++ for DIR in '\"$HOMEBREW_REPOSITORY\"' '\"$HOMEBREW_LIBRARY\"/Taps/*/*'\r\n++ [[ -d /usr/local/Library/Taps/homebrew/homebrew-services/.git ]]\r\n++ pull /usr/local/Library/Taps/homebrew/homebrew-services\r\n++ local DIR\r\n++ local TAP_VAR\r\n++ DIR=/usr/local/Library/Taps/homebrew/homebrew-services\r\n++ cd /usr/local/Library/Taps/homebrew/homebrew-services\r\n+++ repo_var /usr/local/Library/Taps/homebrew/homebrew-services\r\n+++ local repo_var\r\n+++ repo_var=/usr/local/Library/Taps/homebrew/homebrew-services\r\n+++ [[ /usr/local/Library/Taps/homebrew/homebrew-services = \\/\\u\\s\\r\\/\\l\\o\\c\\a\\l ]]\r\n+++ repo_var=/homebrew/homebrew-services\r\n++++ echo -n /homebrew/homebrew-services\r\n++++ tr -C A-Za-z0-9 _\r\n++++ tr '[:lower:]' '[:upper:]'\r\n+++ repo_var=_HOMEBREW_HOMEBREW_SERVICES\r\n+++ echo _HOMEBREW_HOMEBREW_SERVICES\r\n++ TAP_VAR=_HOMEBREW_HOMEBREW_SERVICES\r\n++ unset STASHED\r\n+++ git symbolic-ref --short HEAD\r\n++ INITIAL_BRANCH=master\r\n+++ upstream_branch\r\n+++ local upstream_branch\r\n++++ git symbolic-ref refs/remotes/origin/HEAD\r\n+++ upstream_branch=refs/remotes/origin/master\r\n+++ upstream_branch=master\r\n+++ [[ -z master ]]\r\n+++ echo master\r\n++ UPSTREAM_BRANCH=master\r\n++ [[ -n '' ]]\r\n++ trap reset_on_interrupt SIGINT\r\n+++ git status --untracked-files=all --porcelain\r\n++ [[ -n '' ]]\r\n++ [[ master != \\m\\a\\s\\t\\e\\r ]]\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ INITIAL_REVISION=d47ae5f6856bd1fae94d40a578358cadc20f00bf\r\n++ export HOMEBREW_UPDATE_BEFORE_HOMEBREW_HOMEBREW_SERVICES=d47ae5f6856bd1fae94d40a578358cadc20f00bf\r\n++ HOMEBREW_UPDATE_BEFORE_HOMEBREW_HOMEBREW_SERVICES=d47ae5f6856bd1fae94d40a578358cadc20f00bf\r\n++ git config core.autocrlf false\r\n++ /usr/local/Library/ENV/scm/git config core.autocrlf false\r\n++ [[ -n '' ]]\r\n++ git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\n++ /usr/local/Library/ENV/scm/git merge --no-edit --ff origin/master --strategy=recursive --strategy-option=ours --strategy-option=ignore-all-space\r\nAlready up-to-date.\r\n+++ read_current_revision\r\n+++ git rev-parse -q --verify HEAD\r\n+++ /usr/local/Library/ENV/scm/git rev-parse -q --verify HEAD\r\n++ export HOMEBREW_UPDATE_AFTER_HOMEBREW_HOMEBREW_SERVICES=d47ae5f6856bd1fae94d40a578358cadc20f00bf\r\n++ HOMEBREW_UPDATE_AFTER_HOMEBREW_HOMEBREW_SERVICES=d47ae5f6856bd1fae94d40a578358cadc20f00bf\r\n++ trap '' SIGINT\r\n++ pop_stash_message\r\n++ [[ -z '' ]]\r\n++ return\r\n++ trap - SIGINT\r\n++ chdir /usr/local\r\n++ cd /usr/local\r\n++ brew update-report -vd\r\n++ /usr/local/bin/brew update-report -vd\r\n/usr/local/Library/brew.rb (Formulary::FromPathLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/fourstore.rb\r\n/usr/local/Library/brew.rb (Formulary::FormulaContentsLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/fourstore.rb\r\nUpdated 2 taps (caskroom/cask, homebrew/core).\r\n==> Updated Formulae\r\nfourstore\r\n++ return 0\r\n++ exit 0\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 205475138,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-04T20:11:57Z",
		"body" : "It looks like you might be back in business to me; is anything not working now?\r\n\r\nIf you try running `update` again, please don't add `-vd`; the output is way too verbose.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 205475486,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-04-04T20:13:25Z",
		"body" : "@tdsmith:  If it helps, I'm on OS X 'El Capitan' v10.11.4.  Also, here's the exact sequence of commands I used before my current problems with Homebrew cropped up and which I believe might be at least partly responsible:  \r\n```\r\nbrew update -vd\r\ncd $(brew --repository)\r\ngit branch --list\r\ngit branch -dvf CMake__v3_5_1\r\ncd ~\r\nbrew update -vd\r\ngit -C $(brew --repository) push -v\r\ngit -C $(brew --repository) pull -v RandomDSdevel\r\nsudo chown -Rv $(whoami) /usr/local/\r\nsudo chmod -R +a \"zadmin allow delete,readattr,writeattr,readextattr,writeextattr,readsecurity,writesecurity,list,search,add_file,add_subdirectory,delete_child,read,write,append,execute,file_inherit,directory_inherit\" /usr/local\r\nsudo chmod -R +a \"bryce allow delete,readattr,writeattr,readextattr,writeextattr,readsecurity,writesecurity,list,search,add_file,add_subdirectory,delete_child,read,write,append,execute,file_inherit,directory_inherit\" /usr/local\r\nsudo chmod -R +a \"_developer allow delete,readattr,writeattr,readextattr,writeextattr,readsecurity,writesecurity,list,search,add_file,add_subdirectory,delete_child,read,write,append,execute,file_inherit,directory_inherit\" /usr/local\r\ngit -C $(brew --repository) push -v\r\ngit -C $(brew --repository) pull -v RandomDSdevel\r\nbrew update -vd\r\n```\r\nThe stuff having to do with branching and the `CMake__v3_5_1` branch was me cleaning up my local machine after [Homebrew/legacy-homebrew](https://github.com/Homebrew/legacy-homebrew) pull request #50251, 'CMake v3.5.1.'](https://github.com/Homebrew/legacy-homebrew/pull/50521)  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 205477401,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-04-04T20:18:48Z",
		"body" : "@tdsmith:  Well, I'm not exactly sure what to do with [my downstream fork](https://github.com/RandomDSdevel/homebrew) of what has become Homebrew/legacy-homebrew](https://github.com/Homebrew/legacy-homebrew).  Given the core/formula split, I _think_ I should just configure my local Homebrew install to ignore it, delete it, and start fresh whenever I next need to submit a pull request, but I want to make sure I know what to do (other than remembering not to push to or pull from said old fork) before I attempt that.  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 205478289,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-04T20:22:09Z",
		"body" : "Yeh, you should refork either Homebrew/brew or Homebrew/homebrew-core as desired and then you can `git rebase -i` your local branches on the new `master` and push them to your new forks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 205479619,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-04-04T20:26:57Z",
		"body" : "@mikemcquaid:  Thanks for clearing that up.  Should we update Homebrew's documentation to let other contributors know that this is the recommended course of action , though?  I imagine that I might not end up being the only one getting confused by errors otherwise.  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 205480750,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-04-04T20:29:54Z",
		"body" : "@tdsmith:  I decided to run `git stash clear` to discard my local Homebrew repository clone's stash entries on my own since I thought that this might end up being what you would recommend anyway.  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 205484027,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-04T20:39:55Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 205492311,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-04-04T20:53:12Z",
		"body" : "@tdsmith:  This is slightly off topic, but to which of my previous comments did you mean your 'thumbs up' emoticon to apply?  Since you put it in a separate post instead of applying it to the relevant comment using GitHub's recently added ['Reactions' feature](https://github.com/blog/2119-add-reactions-to-pull-requests-issues-and-comments), I can't tell.  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 205507634,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-04T21:36:42Z",
		"body" : "The most recent one, directed to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 205514050,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-04-04T21:55:59Z",
		"body" : "@tdsmith:  Ah, thanks.  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 205611444,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-05T02:38:05Z",
		"body" : "I think there's nothing to follow up on here; glad it's working for you now!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 206463476,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-04-06T16:56:29Z",
		"body" : "@tdsmith:  Well, there _was_ that little documentation fix I proposed to @mikemcquaid in [this comment](https://github.com/Homebrew/brew/issues/21#issuecomment-205479619), but I should probably just re-submit that as a separate issue (or maybe even a full-fledged pull request if either of you guys can tell me what kind of changes would help prevent others' confusion over problems like mine) now that we're done here.  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 207004220,
		"user" : {
			"login" : "diversario"
		},
		"created_at" : "2016-04-07T17:19:22Z",
		"body" : "Forgive me if this is a dumb question but is this issue related to this error I'm getting now?\r\n\r\n```\r\n‚ûú  local git:(master) brew update\r\nerror: unable to read askpass response from 'false'\r\nfatal: could not read Username for 'https://github.com': terminal prompts disabled\r\nError: Fetching /usr/local/Library/Taps/nviennot/homebrew-tmate failed!\r\nAlready up-to-date.\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 207007305,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-07T17:22:57Z",
		"body" : "@diversario No, this is unrelated. Please open a new issue and try to include a bit more information (what was the behavior in the past, what did you expect to happen, ‚Ä¶) so we have a chance to help you.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 21
	},
	{
		"id" : 205469922,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-04T19:59:20Z",
		"body" : "I'm glad you were able to adapt quickly.\r\n\r\nWrt your first point, Homebrew formulas in Homebrew/homebrew-core almost always refer to the newest version of a package, including major version changes. The versioned formulas in homebrew/versions are typically tied to a minor version and may be more suitable for you. If one does not exist, you are welcome to contribute one.\r\n\r\nOtherwise, you should consider our command line interface the stable API. If you rely on understanding Homebrew's internals, your work may break without warning.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 22
	},
	{
		"id" : 205475386,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-04T20:12:59Z",
		"body" : "> Changes to package names / versions ... things like making brew install elasticsearch install version 2.x, instead of making an elasticsearch-2.0 package name, and keeping the original 1.0 version tree for the elasticsearch package name\r\n\r\nIt's worth noting this is how Homebrew has always worked. The alternative is you should only use formulae from https://github.com/Homebrew/homebrew-versions or maintain your own tap and only use those formulae.\r\n\r\n> The convergance of the brew-cask system into the main brew system\r\n\r\nYou'll need to provide more information if you want us to understand this.\r\n\r\n> It seems like these changes are more so \"just announced as they happen\" instead of a more preferable strategy that could include a pre-announcement, discussion, voting, and ideally some sort of news/blog coverage (for example, getting an article on the front page of a couple popular developer centric sites).\r\n\r\nWe're not going to have voting for these things. Discussion and pre-announcement happen on Homebrew's issue tracker. We cannot control how these things hit the front-page of news sites.\r\n\r\nWe can't be considered responsible for a system you've built on top of Homebrew breaking and I don't think a two line change is a big deal, honestly. If you want to use tools that are officially supported there is https://github.com/Homebrew/homebrew-bundle and the previously mentioned homebrew-versions for these purposes. https://github.com/mikemcquaid/strap is also designed for initial system setup.\r\n\r\n> Otherwise, you should consider our command line interface the stable API. If you rely on understanding Homebrew's internals, your work may break without warning.\r\n\r\nThis cannot be emphasised more strongly. Your system will continue to break if you make assumptions about paths and revisions.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 22
	},
	{
		"id" : 205483266,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-04T20:37:45Z",
		"body" : "> The alternative is you should only use formulae from https://github.com/Homebrew/homebrew-versions or maintain your own tap and only use those formulae.\r\n\r\n&\r\n\r\n>  The versioned formulas in homebrew/versions are typically tied to a minor version and may be more suitable for you. If one does not exist, you are welcome to contribute one.\r\n\r\nI'll add on top of this, Versions isn't a dumping ground for everyone's pet projects. It has to meet the eligibility criteria and it has to remain testable by whichever 2 or 3 OS X versions we build against on CI. If you want absolute stability long-term on specific formula with a firm promise of no change please do set up your own tap. \r\n\r\n_Everything_ we can do in our taps you can do in one of your own, including using things like Travis for CI. There are Travis configuration files in the various repos which you can use as a template, as desired.\r\n\r\n> It seems like these changes are more so \"just announced as they happen\" instead of a more preferable strategy that could include a pre-announcement, discussion, voting, and ideally some sort of news/blog coverage (for example, getting an article on the front page of a couple popular developer centric sites).\r\n\r\nWe try our best to pre-announce things where necessary.\r\n\r\nThe split PR and Issues had been sat on our GitHub tracker for upwards of a couple months prior to it happening if my memory hasn't misled me. We announced the deprecation of `sha1` 18+ months in advance of that being enforced later this year. We let `md5` sit around for several years with warnings prior to killing it last year and _that still_ \"snuck up\" on more than a few tap owners.\r\n\r\nThere's no medium we can use that every Homebrew user will see or remember to check, sadly. If you care about Homebrew fundamentals watching the GitHub repo is one of the more comprehensive ways to keep on top of it, and perhaps ironically given this Issue you'll find that easier now core and formulae no longer share one repo.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 22
	},
	{
		"id" : 205508628,
		"user" : {
			"login" : "diclophis"
		},
		"created_at" : "2016-04-04T21:38:42Z",
		"body" : "@mikemcquaid the brew-cask issue is related to this changed noted at the top of the README in the brew cask repo: https://github.com/caskroom/homebrew-cask#important-december-2015-update-homebrew-cask-will-now-be-kept-up-to-date-together-with-homebrew-see-15381-for-details-if-you-havent-yet-run-brew-uninstall---force-brew-cask-brew-update-to-switch-to-the-new-system\r\n\r\n... I can't find any mention of that change in the announce mailing list ...\r\n\r\nAs far as \"use cli API\" and or \"use a tap\" methods of installing specific versions I think this stack-overflow question/answer discussion outlines most of my frustration ... on the surface there seems to be several \"supported methods\" ... all of which seem to have changed at some point over the history of the project: http://stackoverflow.com/questions/3987683/homebrew-install-specific-version-of-formula\r\n\r\nIn comparison, other package management systems typically include specifying a version by a simple `--version` CLI argument, or have more aggressively static repos that don't bump versions without a whole \"distro upgrade\" .... i.e. any `apt` based package repo...\r\n\r\nIn general brew has \"just worked\" more than it has \"been updated and broken our stuff\" so we have not in the past given much weight to the idea of running our own taps / fork. I will discuss the recommendations posted here with my organization (I think we will likely adopt our own set of taps for the super important stuff and rely on the community taps for the remainder of our setup).\r\n\r\nI will also try to monitor the brew PRs/Issue-tracker, and, I am now subscribed to the mailing list... I feel comfortable closing this issue out... please just remember that part of what makes `brew` such a great project is that the community can rely on it for getting software installed in a reasonable automatable way (in particular also for getting the latest more-secure version of several CLI utilities). And that big shuffles in the way the project function should be treated with as much gravitas as possible.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 22
	},
	{
		"id" : 205510526,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-04T21:43:38Z",
		"body" : "> on the surface there seems to be several \"supported methods\"\r\n\r\nFor what it's worth, we support methods 2 (use a Homebrew/versions formula) and 4 (write your own versioned formula). The `versions` command was removed because using formulas from git history cannot be made to work reliably. Thanks for your feedback!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 22
	},
	{
		"id" : 205604898,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-05T02:27:34Z",
		"body" : "Would appreciate some review from past bash completion contributors @rhendric, @bfontaine, @robsonpeixoto, @hivehand if time allows!\r\n\r\n![](https://i.imgur.com/ChzUb.jpg)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 23
	},
	{
		"id" : 205695992,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-05T07:28:02Z",
		"body" : "How about just using `brew search` to get full list like zsh competition script does?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 23
	},
	{
		"id" : 205767604,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-04-05T11:47:51Z",
		"body" : "I won‚Äôt have time to check this before tomorrow :/",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 23
	},
	{
		"id" : 205853340,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-05T15:16:22Z",
		"body" : "Using `brew search` like @xu-cheng suggested is much neater and leaves all the tricky knowledge bits up to `brew`:\r\n\r\n```bash\r\n__brew_complete_formulae ()\r\n{\r\n    local cur=\"${COMP_WORDS[COMP_CWORD]}\"\r\n    local formulas=$(brew search)\r\n    local shortnames=$(echo \"$formulas\" | grep / | cut -d / -f 3)\r\n    COMPREPLY=($(compgen -W \"$formulas $shortnames\" -- \"$cur\"))\r\n}\r\n```\r\n\r\nand it is slightly faster, unless HOMEBREW_ANALYTICS is set; 20 completions takes 5.2 s without HOMEBREW_ANALYTICS and 10.1 s with HOMEBREW_ANALYTICS; 250 ms/call is probably enough to be noticeable.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 23
	},
	{
		"id" : 205854622,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-05T15:19:00Z",
		"body" : "Either way, it seems to be the right thing to do right now, and we can work on ANALYTICS latency later.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 23
	},
	{
		"id" : 205714479,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-05T08:10:44Z",
		"body" : "Reopening for revision: the original submission broke under Ruby 1.8.7, because it doesn't support the `\\u` escapes. And Ruby 1.9 doesn't support `\\u{...}`.\r\n\r\nJenkins builds on Mavericks were failing with stuff like this.\r\n\r\n```\r\n==> git clean -ffdx\r\nHEAD is now at ceed663 test-bot: revise Step output transcoding and XML character filtering\r\nRemoving Cellar/\r\nRemoving Library/Homebrew/test/.bundle/\r\nRemoving Library/Homebrew/test/fs_leak_log\r\nRemoving Library/Homebrew/test/vendor/\r\nError: invalid regular expression: /[^    \r\n\r\n -uD7FFuE000-uFFFDu{10000}-u{10FFFF}]/\r\nPlease report this bug:\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 24
	},
	{
		"id" : 205715370,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-05T08:13:25Z",
		"body" : "FWIW we may be able to just use the Regex on Ruby 2.0 (or for now at least) given the previous regex seemed to handle more situations there and Ruby <2.0 is on the way out for us.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 24
	},
	{
		"id" : 205716179,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-05T08:17:13Z",
		"body" : "Problem is that when expressed as a regex literal, it gets parsed in the compilation stage or whatever, not when the line is executed. So even if you stick it in a `if ... /new-regex/ ... else ... /old-regex/ ... end` block, Ruby 1.8.7 still throws an \"invalid regex\" error, even if it never executes the line in question.\r\n\r\nI'm trying a workaround now where I invert the regex to `/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\uD800-\\uDFFF\\uFFFE\\uFFFF]/` (selecting the invalid XML characters), which is still syntactically valid for Ruby 1.8 even if it wouldn't match the right characters, so it can still be used inside an `if / else` block.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 24
	},
	{
		"id" : 205716626,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-05T08:19:24Z",
		"body" : "Ah yes, I see.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 24
	},
	{
		"id" : 205718615,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-05T08:38:43Z",
		"body" : "I've updated the PR with the new 1.8-safe code. Will try pushing it tomorrow: it's about bed time for me, and GitHub is being pretty slow at the moment.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 24
	},
	{
		"id" : 205806039,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-05T13:31:18Z",
		"body" : "> - Buffer the steps' output as binary, and only convert it to UTF-8 once collected, to avoid transcoding problems with multibyte characters.\r\n\r\nCan this be modified to transcode those bytes that are already valid UTF-8 and leave the remaining few bytes, that could be the beginning of a valid UTF-8 sequence, in the buffer? Given that UTF-8 is a prefix code that should be doable. That said, I'm not sure if it's worth the effort (maybe for another PR), i.e., if there are scenarios that would benefit from having partial output available.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 24
	},
	{
		"id" : 205813408,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-05T13:49:31Z",
		"body" : ">  Can this be modified to transcode those bytes that are already valid UTF-8 and leave the remaining few bytes, that could be the beginning of a valid UTF-8 sequence, in the buffer?\r\n\r\nThat's what I mean by \"incremental transcoding with remainder support\". Certainly possible, but a lot of work. If someone knows a library that can do it, sure, but no way I'm going to write it. (You'd also have to do invalid-sequence replacement as you go, to avoid stalling.)\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 24
	},
	{
		"id" : 205831131,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-05T14:21:54Z",
		"body" : "Something's gone wonky with my attempts to add further amended commits to this PR. I re-opened this as a fresh PR #27, including adjustments from recent feedback. Let me know if you have any comments; I'll try pushing again in a couple hours and see if it works. *This* time I'm confident I actually got the \"test under ruby 1.8.7\" right.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 24
	},
	{
		"id" : 216555231,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:57:10Z",
		"body" : "@tdsmith Any more thoughts here?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 25
	},
	{
		"id" : 220852922,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-22T20:02:18Z",
		"body" : "@tdsmith Ping?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 25
	},
	{
		"id" : 205715081,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-05T08:12:30Z",
		"body" : "Sorry but you have not followed the requested steps on the Troubleshooting page: https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem. Additionally, what was the symlink?\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 26
	},
	{
		"id" : 205729762,
		"user" : {
			"login" : "purrrminator"
		},
		"created_at" : "2016-04-05T09:31:29Z",
		"body" : "My problem is solved. You can close the issue. Just wanted to let you know about the issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 26
	},
	{
		"id" : 206518335,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-06T19:13:11Z",
		"body" : "Can't reproduce this issue but we'll keep an eye out for it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 26
	},
	{
		"id" : 206552095,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-06T20:35:41Z",
		"body" : "Do you remember where the symlink was and where it was pointing?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 26
	},
	{
		"id" : 206121517,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-06T05:14:27Z",
		"body" : "@apjanke There was still an issue with `sanitize_output_for_xml` (attempting to access the private `fix_encoding!` method of the `Step` class; could be observed in [this job](http://bot.brew.sh/job/Homebrew%20Versions%20Pull%20Requests/1315/version=el_capitan/console)) that I tried to (somewhat carelessly) fix in a2c23dfec569c6e73d90cb20c7d4c26cced258d5, which killed a whole bunch of jobs and needed more fixing in 37b817ed394986808d2fdb595c272ede7a67f20d. Would be nice if you could double-check my ‚Äúfix‚Äù and see if that needs any cleaning up.\r\n\r\nAt least now the truncation also works as it should as can be seen in [this second run of the above mentioned job](http://bot.brew.sh/job/Homebrew%20Versions%20Pull%20Requests/1317/version=el_capitan/console).\r\n\r\n----\r\n\r\nRelevant parts of the logs of the above mentioned jobs (as the links won't stay valid forever):\r\n\r\n```\r\n[‚Ä¶]\r\n==> brew cleanup --prune=7\r\n==> git clean -ffdx\r\nHEAD is now at a9c0361 audit: require plist_options when using plist\r\nRemoving Cellar/\r\nRemoving Library/Homebrew/test/.bundle/\r\nRemoving Library/Homebrew/test/fs_leak_log\r\nRemoving Library/Homebrew/test/vendor/\r\nRemoving etc/openssl/\r\nRemoving share/info/\r\nRemoving share/man/whatis\r\nRemoving var/\r\nError: undefined method `fix_encoding!' for Homebrew:Module\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/usr/local/Library/Homebrew/cmd/test-bot.rb:1007:in `sanitize_output_for_xml'\r\n/usr/local/Library/Homebrew/cmd/test-bot.rb:955:in `block (2 levels) in test_bot'\r\n/usr/local/Library/Homebrew/cmd/test-bot.rb:948:in `each'\r\n/usr/local/Library/Homebrew/cmd/test-bot.rb:948:in `block in test_bot'\r\n/usr/local/Library/Homebrew/cmd/test-bot.rb:943:in `each'\r\n/usr/local/Library/Homebrew/cmd/test-bot.rb:943:in `test_bot'\r\n/usr/local/Library/brew.rb:84:in `<main>'\r\nBuild step 'Execute shell' marked build as failure\r\nRecording test results\r\nERROR: Step ‚ÄòPublish JUnit test result report‚Äô failed: No test report files were found. Configuration error?\r\nArchiving artifacts\r\nStarted calculate disk usage of build\r\nFinished Calculation of disk usage of build in 0 seconds\r\nStarted calculate disk usage of workspace\r\nFinished Calculation of disk usage of workspace in 0 seconds\r\n[WS-CLEANUP] Deleting project workspace...[WS-CLEANUP] done\r\nFinished: FAILURE\r\n```\r\n\r\n```\r\n[‚Ä¶]\r\n==> brew cleanup --prune=7\r\n==> git clean -ffdx\r\nHEAD is now at 37b817e test-bot: fix access to relocated method\r\nRemoving Cellar/\r\nRemoving Library/Homebrew/test/.bundle/\r\nRemoving Library/Homebrew/test/fs_leak_log\r\nRemoving Library/Homebrew/test/vendor/\r\nRemoving etc/openssl/\r\nRemoving share/info/\r\nRemoving var/\r\nBuild step 'Execute shell' marked build as failure\r\nRecording test results\r\nArchiving artifacts\r\nStarted calculate disk usage of build\r\nFinished Calculation of disk usage of build in 0 seconds\r\nStarted calculate disk usage of workspace\r\nFinished Calculation of disk usage of workspace in 0 seconds\r\n[WS-CLEANUP] Deleting project workspace...[WS-CLEANUP] done\r\nFinished: FAILURE\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 27
	},
	{
		"id" : 206383693,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-06T13:56:57Z",
		"body" : "New fix looks good. Thanks! Don't know how I missed that when pushing; I ran test-bot locally before doing the merge and it seemed fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 27
	},
	{
		"id" : 206387739,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-06T14:05:35Z",
		"body" : "WRT the 1 MB limit: the truncation calculation is now I believe correct, so it will truncate to exactly 1 MB of output. But it will also slap the phrase \"output truncated to 1MB:\" on it, so it'll end up slightly over 1 MB. If we want a margin of error we could dial it down to 900K or so.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 27
	},
	{
		"id" : 206396834,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T14:23:37Z",
		"body" : "> WRT the 1 MB limit: the truncation calculation is now I believe correct, so it will truncate to exactly 1 MB of output. But it will also slap the phrase \"output truncated to 1MB:\" on it, so it'll end up slightly over 1 MB. If we want a margin of error we could dial it down to 900K or so.\r\n\r\nHaha. Yeh, that sounds good üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 27
	},
	{
		"id" : 206460012,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-06T16:47:21Z",
		"body" : "Done in #39.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 27
	},
	{
		"id" : 206883991,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-04-07T12:58:59Z",
		"body" : "Why not go all the way out and use [docopt](https://github.com/docopt/docopt.rb)? It would make a lot of stuff better, and already solves a lot of the challenges with parsing/completion etc.\r\n\r\nMaybe not the latter, but it would be nice to contribute that to upstream if it's not there.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 28
	},
	{
		"id" : 206919897,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-07T13:58:50Z",
		"body" : "> Why not go all the way out and use docopt?\r\n\r\nWe should! Or something similar. That's why I left the Options part of this undefined: I don't know Ruby's command parsing libraries yet; was planning on researching them to see if any were suitable for `brew`, and possibly use their data structures, or provide an adapter.\r\n\r\nThanks for the docopt pointer; I hadn't seen that one yet.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 28
	},
	{
		"id" : 207455382,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-08T14:36:26Z",
		"body" : "I like the idea but not the implementation. Would be good to have the whole command class be a DSL that allows specifying options, help, etc. and building commands and manpages from them. Thanks for the quick spike and great write-up though üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 28
	},
	{
		"id" : 216434650,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T04:51:14Z",
		"body" : "Closing this out as \"won't merge\" since it looks like the discussion is finished, and it'll need a full different implementation when we get to it, especially now that we have the new per-command helptext.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 28
	},
	{
		"id" : 205893737,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-05T16:57:25Z",
		"body" : "And IMO using `brew search` in this context is an internal usage and not a direct invocation by the user, thus it probably shouldn't be counted anyway? (Tab completion can result in many invocations of this without ever leading to an actual `brew` command being executed.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 29
	},
	{
		"id" : 206191621,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T07:52:40Z",
		"body" : "Should be fixed by #34. I'd rather we take the approach to making analytics completely async rather than disabling it for speed reasons.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 29
	},
	{
		"id" : 205896245,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-05T17:01:47Z",
		"body" : "Maybe it should offer the option `--include-aliases` to include the aliases, [like `brew commands` already does](https://github.com/Homebrew/brew/blob/3afacc351c44c4cee08c181e7c761f44e8b43722/Library/Homebrew/cmd/commands.rb#L6) and where it's mainly (only?) used for tab completion ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 30
	},
	{
		"id" : 205900279,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-05T17:09:16Z",
		"body" : "Or we could add a `brew formula-completion` command and not log it and solve this and #29 with a single stone!? `--include-aliases` feels a little weird because `search` with any arguments already does that, idk.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 30
	},
	{
		"id" : 206117751,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-06T04:51:39Z",
		"body" : "A whole new command may be useful, because we could add it to the blacklist which skip google analytics. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 30
	},
	{
		"id" : 206191252,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T07:52:00Z",
		"body" : "> A whole new command may be useful, because we could add it to the blacklist which skip google analytics.\r\n\r\nI'd rather we avoid blacklisting things unless they actually affect performance after https://github.com/Homebrew/brew/pull/34 is merged.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 30
	},
	{
		"id" : 206193103,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T07:54:36Z",
		"body" : "> Or we could add a brew formula-completion command and not log it and solve this and #29 with a single stone!?\r\n\r\nI like the idea of a new command or argument rather than including aliases in default output (as they aren't duplicate formulae really)\r\n\r\n> --include-aliases feels a little weird because search with any arguments already does that, idk.\r\n\r\nThis feels like an implementation detail side effect of the way we have aliases as symlinks. I've never noticed this behaviour and it feels weird to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 30
	},
	{
		"id" : 216552633,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:48:40Z",
		"body" : "Seems we've got some options for moving forward so closing this out in favour of a PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 30
	},
	{
		"id" : 205953434,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-05T19:13:00Z",
		"body" : "The check originated in this commit: 10aab9a6723daefa7ca936346bfec571c11bbb8c\r\n\r\nWhere the check was originally for `/opt/local` and `/opt/X11`, which maybe also needs to be filtered the same way.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 32
	},
	{
		"id" : 205955893,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-05T19:19:17Z",
		"body" : ":+1: This sounds reasonable to me.\r\n\r\nMaybe this is a somewhat dumb question, but would it also have impacted my Homebrew installations that live in `/opt/homebrew` and `/opt/brewery/<name>`? (I haven't caught up with your changes for `-I` and `-L` filtering in my installations, thus haven't tested that yet.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 32
	},
	{
		"id" : 205956401,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-05T19:20:55Z",
		"body" : "No, there's a check for whether the path is within the Homebrew prefix first before continuing on to this case; it only affects non-Homebrew managed things.\r\n\r\nThis specific version of the conditional has also been there a few years now - this wasn't introduced by my update to filtering.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 32
	},
	{
		"id" : 206004698,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-05T22:11:05Z",
		"body" : "Looks like CI stalled due to the outage earlier, but there weren't issues on the other two platforms.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 32
	},
	{
		"id" : 206191148,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T07:51:45Z",
		"body" : "Let's also filter `/opt/boxen` here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 32
	},
	{
		"id" : 206448032,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-06T16:19:56Z",
		"body" : "Allowing that was actually the motivation; boxen's rubies are under `/opt/boxen`, and get filtered out of superenv even when they're wanted, e.g. in `brew bundle`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 32
	},
	{
		"id" : 206449180,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T16:24:00Z",
		"body" : "> Allowing that was actually the motivation; boxen's rubies are under /opt/boxen, and get filtered out of superenv even when they're wanted, e.g. in brew bundle.\r\n\r\nI'm thinking mostly about `/opt/boxen/homebrew`; it's not uncommon for people to have two Homebrews installed with one managed by Boxen and one not.\r\n\r\n> For example, the user may store their rbenv rubies under /opt and expect something building under superenv to have access to them.\r\n\r\nWas wondering: was this particular issue hit by some users? Otherwise, just wondering the motivation for this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 32
	},
	{
		"id" : 206451108,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-06T16:30:13Z",
		"body" : "> Was wondering: was this particular issue hit by some users? Otherwise, just wondering the motivation for this.\r\n\r\nI was testing a Ruby project which installs its Ruby with rbenv, then installs its gem dependencies via bundler wrapped in `brew bundle exec`. (So, e.g., under superenv.) Using `brew bundle exec` ensures that a) keg-only deps got found, b) unrequested deps didn't. One of the two environments I was testing was Boxen, where the Boxen-installed rubies were in `/opt/boxen`; that resulted in the `-I` flags for the active ruby being filtered out by the logic I'm changing here, and it broke the gem build.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 32
	},
	{
		"id" : 206454304,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T16:36:05Z",
		"body" : "@mistydemeo Great, that makes more sense, thanks @mistydemeo! I think `/opt/boxen/homebrew` is enough for me üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 32
	},
	{
		"id" : 206455639,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-06T16:37:44Z",
		"body" : "I'm hopeful that making this more flexible should also let us tighten what superenv allows while simultaneously making it possible to someday migrate weird formulae like vim to superenv.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 32
	},
	{
		"id" : 206458984,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-06T16:44:38Z",
		"body" : "Added Boxen's Homebrew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 32
	},
	{
		"id" : 206467008,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-06T17:05:20Z",
		"body" : "El capitan failure looks unrelated.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 32
	},
	{
		"id" : 206189566,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T07:46:44Z",
		"body" : "I don't think this is correct; `fails_with` implies the formula cannot be built with a given compiler and not that it's needed for testing. This is why `brew test` uses `stdenv` rather than `superenv`: we want the test block to match what users need to do to build against this library/header.\r\n\r\n\r\n\r\n> I've seen build failures on Linuxbrew when the default compiler /usr/bin/gcc is used for the test do block, when it should be using $HOMEBREW_PREFIX/bin/gcc-5. This could in principle affect Mac if the formula fails_with :clang or needs :openmp. I haven't found such a case with which to test.\r\n\r\nI've mentioned before I'd rather not receive speculative bugfixes for OS X if they are only known to affect a single platform.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 206706999,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-04-07T05:50:34Z",
		"body" : "I initially asked @xu-cheng in a comment whether not passing the formula to `ENV.setup_build_environment` was intentional, and he asked me to open a pull request, probably to have this discussion. I've got my answer now, that yes it was intentional.\r\n\r\nOn recent versions of Mac OS, it seems that `/usr/bin/clang` and `gcc-5` are ABI compatible, so a library can be compiled with `gcc-5`, and tested with `/usr/bin/clang`, and it works just fine, which is fantastic. On older Linux distributions, `/usr/bin/gcc` and `gcc-5` are not ABI compatible, and I imagine that the same is true of older Mac OS distributions, that its default compiler is not ABI compatible with `gcc-5`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 33
	},
	{
		"id" : 206707479,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-04-07T05:54:43Z",
		"body" : "A related issue Homebrew/homebrew-science#1593 that tracked 12 build failures is resolved now that `/usr/bin/clang` and `gcc-5` are ABI compatible on Mac. It wasn't always the case.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 33
	},
	{
		"id" : 206707978,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-07T05:58:17Z",
		"body" : "Sorry, I'm late for this conversation. But IMO, I think this PR is a correct improvement. \r\n\r\nWhen we use  `ENV.cc` or `ENV.cxx` in the test, it implies the formula is a library and we want to test against it with a small C/C++ program. Therefore, intuitively using a same compiler as the one during the build makes more sense. \r\n\r\nAlso, I don't believe this is a Linux specific issue but a more general one. For example, on Mac if a C++ formula is built with g++ (therefore linked with libstdc++), we should test it with g++ rather than clang++(whose C++ library is libc++) to avoid incompatibility.\r\n\r\nFinal, FWIW, now we are splitting core and formula, I think we could make core code more cross-platform.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 33
	},
	{
		"id" : 206708542,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-04-07T06:02:38Z",
		"body" : "> Also, I don't believe this is a Linux specific issue but a more general one. For example, on Mac if a C++ formula is built with g++ (therefore linked with libstdc++), we should test it with g++ rather than clang++(whose C++ library is libc++) to avoid incompatibility.\r\n\r\nI agree, hence the PR, but I can't find a formula for which the library builds with `gcc` and fails to test with `clang`, which surprised me a great deal.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 33
	},
	{
		"id" : 206710203,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-07T06:09:39Z",
		"body" : ">  I can't find a formula for which the library builds with gcc and fails to test with clang\r\n\r\nYou should find a formula which is built with openmp and has `ENV.cxx` in its test.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 33
	},
	{
		"id" : 206710517,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-04-07T06:11:23Z",
		"body" : "I found `fftw --with-openmp`. Miraculously, it builds with `gcc` and tests just fine with `clang`. I was looking for other libraries that `needs :openmp` or `fails_with :clang`, but couldn't find any.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 33
	},
	{
		"id" : 206710743,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-07T06:13:09Z",
		"body" : "`fftw`'s test is a c program not C++ so it passes. You could try `cppad ---with-openmp`(I didn't try it myself)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 33
	},
	{
		"id" : 206711674,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-04-07T06:19:58Z",
		"body" : "`brew install cppad --with-openmp && brew test cppad` works. `cppad` doesn't install any libraries though, only headers.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 33
	},
	{
		"id" : 206724403,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-07T07:03:44Z",
		"body" : "> When we use ENV.cc or ENV.cxx in the test, it implies the formula is a library and we want to test against it with a small C/C++ program. Therefore, intuitively using a same compiler as the one during the build makes more sense.\r\n\r\nI don't agree. Again, this is an argument for using superenv in the test which I don't think we do for good reasons explained above.\r\n\r\n> Also, I don't believe this is a Linux specific issue but a more general one. For example, on Mac if a C++ formula is built with g++ (therefore linked with libstdc++), we should test it with g++ rather than clang++(whose C++ library is libc++) to avoid incompatibility.\r\n\r\nThat's a C++ standard library specific issue. It does not apply to C but this change would apply it to all C tests. The C++ standard library issue has also yet been the cause of any `brew test` failures.\r\n\r\n> Final, FWIW, now we are splitting core and formula, I think we could make core code more cross-platform.\r\n\r\nI do agree with that but I'd definitely like us to take a step back and figure out the root cause of problems rather than applying random, uncommented fixes here and there. In this case it seems the root cause of the problem is why Linuxbrew uses the same `fails_with` hierarchy to Homebrew despite GCC almost always being a more sensible compiler on Linux.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 33
	},
	{
		"id" : 206728286,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-07T07:13:55Z",
		"body" : "> Again, this is an argument for using superenv in the test which I don't think we do for good reasons explained above.\r\n\r\nThis is not about whether to use superenv or stdenv. But for C/C++ program, it's common to use same compiler as what the linked libraries use. i.e. this holds no matter we choose to use superenv or stdenv.\r\n\r\n>   It does not apply to C but this change would apply it to all C tests. \r\n\r\nBut it won't change current behavior. Because if the formula is built with different compiler like gcc, the compiler is essentially the runtime dependency which will always be available during user's test.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 33
	},
	{
		"id" : 206730296,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-07T07:16:40Z",
		"body" : "> But it won't change current behavior. Because if the formula is built with different compiler like gcc, the compiler is essentially the runtime dependency which will always be available during user's test.\r\n\r\nIt's always available but it's not always used. I don't think it's expected that the user will necessarily use that compiler at runtime (they may not even realise it was installed).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 33
	},
	{
		"id" : 206731590,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-07T07:18:24Z",
		"body" : "The thing is if you use a different compiler it may work. If you use the same compiler, it will definitely work. So should we default to the same compiler?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 33
	},
	{
		"id" : 206734503,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-07T07:24:08Z",
		"body" : "Again, I don't agree for the reasons I've already stated above. I don't agree with fixing bugs speculatively.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 33
	},
	{
		"id" : 206964794,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-04-07T15:50:07Z",
		"body" : "Does Homebrew officially support only the versions of Mac OS for which it builds bottles?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 206972299,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-07T16:08:15Z",
		"body" : "> Does Homebrew officially support only the versions of Mac OS for which it builds bottles?\r\n\r\nBasically yes, though we try to support older version on a best-effort basis. `brew doctor` outputs for OS X 10.8 and earlier:\r\n\r\n```\r\nYou are using OS X #{MacOS.version}.\r\nWe (and Apple) do not provide support for this old version.\r\nYou may encounter build failures or other breakages.\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 207704084,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-04-09T04:35:25Z",
		"body" : "> Because if the formula is built with different compiler like gcc, the compiler is essentially the runtime dependency which will always be available during user's test.\r\n\r\nIs this true even if the user installs a bottle built with a version of GCC they don't have installed?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 207708815,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-09T05:12:42Z",
		"body" : "> Is this true even if the user installs a bottle built with a version of GCC they don't have installed?\r\n\r\nThis is true for C++ formulae. But we don't handle it very well, so we intended to just add `depends_on \"gcc\"` in such case. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 207729083,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-04-09T06:49:22Z",
		"body" : "On Linuxbrew, `gcc` is a dependency of all formula installed by bottle, for this reason.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 216555387,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:57:38Z",
		"body" : "We've got no movement here so I'm personally in favour of closing this out.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 216567857,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-05-03T15:33:30Z",
		"body" : "I'm fine with closing this issue so long as `/usr/bin/clang` and `$HOMEBREW_PREFIX/bin/gcc` are ABI compatible on Mac OS. That appears to be the situation currently. It hasn't been in the past. Hopefully it remains to be this way in the future.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 216567880,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-05-03T15:33:33Z",
		"body" : "Although I did apply this patch in Linuxbrew, I'm going to change the approach so the the default compiler selected when a formula is not specified (as with `brew test` and `brew sh`) is `$HOMEBREW_PREFIX/bin/gcc` rather than `/usr/bin/gcc`), which would have been the better fix in the first place.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 220852936,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-22T20:02:34Z",
		"body" : "Passing on this, sorry!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 240893512,
		"user" : {
			"login" : "dpo"
		},
		"created_at" : "2016-08-19T00:07:03Z",
		"body" : "@sjackman I just hit this thread while writing a formula for SuperLU_MT, a multi-threaded variant of SuperLU. One option is to build an OpenMP-capable library. Another is to build a Pthreads library. In the `test` method, I need to know whether the user selected OpenMP. Building the test programs with clang fails if OpenMP was used to build the library. Ideally, I'd like to say something like `ENV.openmp` (similarly to, e.g., `ENV.fortran`) but I see no such method available. How does one set up the OpenMP \"environment\" in a `test` method? This seems pretty essential.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 240925249,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-08-19T04:30:15Z",
		"body" : "As far as I know:\r\n```ruby\r\nENV.append_to_cflags \"-fopenmp\"\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 240976650,
		"user" : {
			"login" : "dpo"
		},
		"created_at" : "2016-08-19T09:50:57Z",
		"body" : "Right but `ENV.cc` must also change since clang doesn't support OpenMP. Writing `brew test --with-openmp` seems contrived since the formula \"knows\" whether it was installed with OpenMP or not. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 240991341,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T11:09:41Z",
		"body" : "> Right but ENV.cc must also change since clang doesn't support OpenMP\r\n\r\nIt does now, actually: https://clang-omp.github.io",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 240993887,
		"user" : {
			"login" : "dpo"
		},
		"created_at" : "2016-08-19T11:25:05Z",
		"body" : "The default clang on 10.9 doesn't. When I build something `--with-openmp` (using `needs :openmp`), Homebrew doesn't install clang-omp. Should it?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 240994573,
		"user" : {
			"login" : "dpo"
		},
		"created_at" : "2016-08-19T11:29:05Z",
		"body" : "I agree with https://github.com/Homebrew/brew/pull/33#issuecomment-206731590 that we want to use the same compiler in `test` than was used during `install`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 241031544,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T14:21:05Z",
		"body" : "@dpo I can't remember what version of Xcode is required but I think it's 7? We no longer support using `clang-omp` as we're deferring to the newer Clang version instead.\r\n\r\n`test` is to test things in the same ways as users would do so outside of Homebrew. This means not using `superenv` and not automagically setting e.g. compilers or flags.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 241084091,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-08-19T17:38:54Z",
		"body" : ">> Right but ENV.cc must also change since clang doesn't support OpenMP\r\n>It does now, actually: https://clang-omp.github.io\r\n\r\nWhat version of Apple `clang` supports OpenMP? MacOS 10.11.6 XCode 7.3.1 7D1014 does not.\r\n\r\n```\r\n‚ùØ‚ùØ‚ùØ clang -fopenmp /dev/null\r\nclang: error: unsupported option '-fopenmp'\r\n‚ùØ‚ùØ‚ùØ clang --version\r\nApple LLVM version 7.3.0 (clang-703.0.31)\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 241085723,
		"user" : {
			"login" : "dpo"
		},
		"created_at" : "2016-08-19T17:44:56Z",
		"body" : "@MikeMcQuaid AFAIK OpenMP isn't supported by any clang that ships with OSX. I may be wrong. That's why (I believe) Homebrew uses gcc when OpenMP is required.\r\n\r\n> test is to test things in the same ways as users would do so outside of Homebrew\r\n\r\nI concur, but if a formula for a library declares options and different options imply different compiler choices and flags, that ought to be reflected in the tests. The user would have to make the same choices. In my case, if the user builds `--with-openmp`, the test needs to use gcc and `-fopenmp`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 241250241,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-21T10:37:35Z",
		"body" : "> @MikeMcQuaid AFAIK OpenMP isn't supported by any clang that ships with OSX. I may be wrong. That's why (I believe) Homebrew uses gcc when OpenMP is required.\r\n\r\nMy mistake, it's part of the Clang in the LLVM formula: https://github.com/Homebrew/homebrew-core/pull/3028. Something that may be useful to Linuxbrew at some point is allowing that to be used as a compiler in Homebrew. We'd accept PRs for thta.\r\n\r\n> I concur, but if a formula for a library declares options and different options imply different compiler choices and flags, that ought to be reflected in the tests. The user would have to make the same choices. In my case, if the user builds --with-openmp, the test needs to use gcc and -fopenmp.\r\n\r\nThe tests are primarily there for automated CI testing so there's little point adding options for cases that aren't exercised. If that were not the case: yes, I'd agree.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 33
	},
	{
		"id" : 206190164,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T07:48:56Z",
		"body" : "I really, really like this: nice work. Do you know if it's possible to do the a similar thing in Ruby-land? Feel free to üö¢ this as-is, though.\r\n\r\n> A downside may be that running multiple brew commands in rapid succession has the potential to spawn a lot of curl processes.\r\n\r\nThis is intentional and what I'd like for this case.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 34
	},
	{
		"id" : 206264006,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T09:44:28Z",
		"body" : "üëç \r\n\r\n> Linuxbrew/0.9.9 (Linux; unknown Debian GNU/Linux 8.3 (jessie))\r\n\r\nWould be good to handle that `unknown` if you tested that on an actual system.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 35
	},
	{
		"id" : 206266578,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-06T09:48:52Z",
		"body" : "> Would be good to handle that `unknown` if you tested that on an actual system.\r\n\r\nOne way would be to move `HOMEBREW_PROCESSOR` into the `if`, i.e., use `uname -p` on OS X and `uname -m` on all other systems. Not sure how it will behave outside of Linux, but on the Debian system I tested this `uname -m` returns something sensible (`x86_64`). How does that sound?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 35
	},
	{
		"id" : 206286862,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T10:12:30Z",
		"body" : "> One way would be to move HOMEBREW_PROCESSOR into the if, i.e., use uname -p on OS X and uname -m on all other systems. Not sure how it will behave outside of Linux, but on the Debian system I tested this, uname -m returns something sensible (x86_64). How does that sound?\r\n\r\nSounds good üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 35
	},
	{
		"id" : 206312855,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-06T11:07:24Z",
		"body" : "> Sounds good :+1:\r\n\r\nDone.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 35
	},
	{
		"id" : 206327421,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T11:39:52Z",
		"body" : "üö¢ !",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 35
	},
	{
		"id" : 206349444,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T12:30:58Z",
		"body" : "Hmm, this feels kinda weird to me, what's the use-case?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 36
	},
	{
		"id" : 206350472,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-06T12:34:12Z",
		"body" : "Currently, in order to install core tap, git is required. And if git is not available, in order to install git, core tap is required. So there is a cycle dependency here. \r\n\r\nThis can happen if your system falls in this branch on install script. https://github.com/Homebrew/install/blob/master/install#L245-L250 ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 36
	},
	{
		"id" : 206351307,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T12:37:45Z",
		"body" : "I think given the situation with the Xcode CLT and `git` that it's reasonable to expect people to have Git installed at this point. I dunno, it just feels like a lot of code that I'm not convinced anyone is actually hitting.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 36
	},
	{
		"id" : 206352049,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-06T12:40:13Z",
		"body" : "As far as I'm aware, there are two cases where git is not available.\r\n* We want to support no-Xcode/CLT config.\r\n* On old system, where Xcode git is older than 1.7.10.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 36
	},
	{
		"id" : 206353608,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T12:46:06Z",
		"body" : "> We want to support no-Xcode/CLT config.\r\n\r\nI think this is a good goal but I think this is a bit too invasive for that. What about `brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/master/Formula/git.rb`?\r\n\r\n> On old system, where Xcode git is older than 1.7.10.\r\n\r\nWhat are those systems? Does GitHub not work at all with those Gits? I think they can at least use `git://` in that case.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 36
	},
	{
		"id" : 206360521,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-06T13:04:48Z",
		"body" : "You can try to remove the core tap, then\r\n```false\r\nGIT=\"/usr/bin/false\" brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/master/Formula/git.rb\r\n```\r\nYou will see it fails, because git formula comes with several optional dependencies and one hard dependency `xz`.\r\n\r\n> What are those systems?\r\n\r\nI dunno. Probably want to ask @mistydemeo \r\n ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 36
	},
	{
		"id" : 206364154,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T13:14:14Z",
		"body" : "> You will see it fails, because git formula comes with several optional dependencies and one hard dependency xz.\r\n\r\nWe could potentially remove all of these.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 36
	},
	{
		"id" : 206365924,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-06T13:16:55Z",
		"body" : "Another option is we somehow create a portable version of git like what will we do for Ruby. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 36
	},
	{
		"id" : 206367378,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T13:19:36Z",
		"body" : "or fix our installation process such that `brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/master/Formula/git.rb` can still work. I think we can do that fairly easily by using `.tar.gz` tarballs and fixing the `Formula` code such that seeing optional, unknown dependencies in a formula doesn't prevent installation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 36
	},
	{
		"id" : 216041782,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-01T13:20:40Z",
		"body" : "@xu-cheng FYI another scenario where this PR may be useful has come up: https://github.com/Homebrew/homebrew-core/issues/702\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 36
	},
	{
		"id" : 232337420,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T12:16:05Z",
		"body" : "Have changed my mind on this; it feels like it could be a reasonable thing to do üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 36
	},
	{
		"id" : 207122308,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-07T22:39:11Z",
		"body" : "I'll leave some thoughts here tomorrow, apologies for the silence so far.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 207419206,
		"user" : {
			"login" : "chrmoritz"
		},
		"created_at" : "2016-04-08T12:46:48Z",
		"body" : "No problem - I know that is a quite big topic to go through.\r\n\r\nAt this point the most important thing for me to know is, if this project will fail on the high number of `resources` it produces or if it has a change and it's worth to invest more time into it. Also some review of the Ruby part would help, because my Ruby skills are still quite limited. But if you want you can postpone the review of the node part of this (and 50% of the text from above) until it is more finished.\r\n\r\nAlso note that native addon compilation is atm party broken, because npm relies on it's magic `.bin` folders for adding dep executable to the PATH at compilation time. But I've already an idea how to make the native addon compilation npm independent, which should solve this issue.\r\nShould we go for a `depends_on :python => :build` build dependency if we detect a native addon or should we support system / user installed python (But in this case we can't guarantee that python in the PATH points to python 2.6/7 right?)?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 207459265,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-08T14:44:21Z",
		"body" : "I'm personally in favour of reducing the number of `resource`s that need to be added manually or programmatically to formulae if there's an underlying package manager (i.e. `npm`) that doesn't just install everything from the tip of the `master` branch by default (I'm looking at you, `go` a few years ago), and allows packages to be vendored per-formula. I think `npm` meets both those criteria. The main area I personally see for improvement is pointing `npm` towards a cache that it can share between builds.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 207502105,
		"user" : {
			"login" : "chrmoritz"
		},
		"created_at" : "2016-04-08T16:26:16Z",
		"body" : "@mikemcquaid The design from this PR mostly addresses [this comment](https://github.com/Homebrew/legacy-homebrew/issues/50167#issuecomment-198751313) from @DomT4.\r\n> * This means realistically if a user doesn't want the bottle, they need to be online during install and have sufficient connection strength to install npm-using formulae. This is an annoying problem for a package manager that does caching, and people have come to expect to be able to brew fetch something in advance and have it install offline later. It's a niche problem certainly, but an important niche.\r\n\r\nBut I agree that there are some improvements from this PR we could apply to our current node module formulas even if we don't want to increase the number of resources in favor of offline instability (after a fetch):\r\n* doing global installs with a `--prefix` set to libexec instead of you current local installs\r\n* better handling of native addons \r\n  * build dep on python\r\n  * bottle pour requirement to same major node version\r\n  * however avoiding pulling prebuilt binaries while continue using npm for installs is most likely not possible\r\n\r\nAlso npm already maintains a cache at `~/.npm` for modules, but we could separate it to use a custom independent cache for homebrew install using the `--cache=/path/to/cache` parameter.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 207749840,
		"user" : {
			"login" : "chrmoritz"
		},
		"created_at" : "2016-04-09T09:00:08Z",
		"body" : "@mikemcquaid Also note that with the current approve two subsequent `--build-from-source` installs of the same version of a node module based formulas can produce different results, because the dependencies aren't usually locked to specific versions (only to semver ranges). IMHO this issue is comparable with the go head install issue you've mentioned.\r\n\r\nIt could be resolved by either shipping a homebrew provided `npm-shrinkwrap.json` for every node module based formula or going with this homebrew managed node module resources approve, which is sadly quite resource heavy.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 207773440,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T11:28:56Z",
		"body" : "> - doing global installs with a --prefix set to libexec instead of you current local installs\r\n> - Also npm already maintains a cache at ~/.npm for modules, but we could separate it to use a custom independent cache for homebrew install using the --cache=/path/to/cache parameter.\r\n\r\nThese both sound useful.\r\n\r\n> Also note that with the current approve two subsequent --build-from-source installs of the same version of a node module based formulas can produce different results, because the dependencies aren't usually locked to specific versions (only to semver ranges). IMHO this issue is comparable with the go head install issue you've mentioned.\r\n\r\nI think that's actually desirable; if there's an upstream security release I'd hope the buildsystem picks it up.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 207776488,
		"user" : {
			"login" : "chrmoritz"
		},
		"created_at" : "2016-04-09T11:41:31Z",
		"body" : "I've pushed an update to make native addon compilation independent from npm to this PR and to the example formula for azure-cli: https://github.com/chrmoritz/homebrew-node/blob/master/Formula/azure-cli.rb#L1478-L1480\r\n\r\n> I think that's actually desirable; if there's an upstream security release I'd hope the buildsystem picks it up.\r\n\r\nBut in this case we should do a revision which updates the bottle too. Currently only `--build-from-source` builds would benefit from the security update while the bottle would remain unpatched.\r\n\r\n@mikemcquaid Also I think that you can except from over 95% of the current formulas in `homebrew-core`, that when you  install version x of formula y (from source) you will get exactly the same result as when you repeat it one week later (with still the same formula version).\r\nBut in the case of node module based formulas you will atm get a completely different dependency tree a week later (different dep versions and maybe also a different dep tree layout too because of resolving/adding new version conflicts through a dep update).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 207776811,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T11:49:06Z",
		"body" : "> But in this case we should do a revision which updates the bottle too. Currently only --build-from-source builds would benefit from the security update while the bottle would remain unpatched.\r\n\r\nI'm definitely open to bumping a revision when that happens.\r\n\r\n> But in the case of node module based formulas you will atm get a completely different dependency tree a week later (different dep versions and maybe also a different dep tree layout too because of resolving/adding new version conflicts through a dep update).\r\n\r\nYeh, I'm sympathetic to that and open to solutions that don't involve extra work for either upstream or our formula contributors.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 208381710,
		"user" : {
			"login" : "chrmoritz"
		},
		"created_at" : "2016-04-11T14:47:29Z",
		"body" : "I think we can agree, that this PR on the one hand tries to solves a lot of issues with the current way we handle node modules based formulas, but unfortunately on the other hand introduces a new big issue through the big amount of dependencies it produces, which homebrew can't handle well enough atm. Also some :white_check_mark: (but not all :red_circle:) of the identified issues can be solved in another way too (without moving completely away from npm based installs). An example on how an improved formula can look like can be found [here for azure-cli](https://github.com/chrmoritz/homebrew-node/blob/master/Formula/azure-cli2.rb). I think we should move the discussion now more in the direction of these issues, which I've summarized bellow:\r\n\r\n#### 1. Online requirement during installs (Refs [this comment](https://github.com/Homebrew/legacy-homebrew/issues/50167#issuecomment-198751313)) :red_circle:\r\n* only fixable by homebrew managed resource dependencies as proposed by this PR\r\n\r\n#### 2. Global vs local module installations :white_check_mark:\r\n* Independent of what way we choose, we should switch our module installation from local style to global style (with setting a custom prefix to libexec) as in [this line]( https://github.com/chrmoritz/homebrew-node/blob/master/Formula/azure-cli2.rb#L39)\r\n* this brings our installations more in line with global installations through npm\r\n* prunes the obsoletly installed devDependencies (which are unnecessarily installed with our current local installations) and\r\n* uses npm for spec conform bin command name resolution (instead of relying on the developer to have a 1:1 mapping in a bin folder)\r\n\r\n#### 3. Locking dependencies to specific versions :white_check_mark:\r\n* atm when reinstalling the same version of the formula (from source) after a week you will get a completely different dependencies tree, because deps are only locked to semver ranges with the current approve\r\n* this can either be fixed by homebrew managed resource deps (as proposed by this PR) or by providing a `npm-shrinkwrap.json` as [done here](https://github.com/chrmoritz/homebrew-node/blob/master/Formula/azure-cli2.rb#L32)\r\n* this would require the generation of a new `npm-shrinkwrap.json` with every version upgrade by running `npm shrinkwrap` inside a global installation and updating the gist\r\n\r\n#### 4. Handling of the npm cache :white_check_mark:\r\n* atm the npm cache location gets overwritten by superenv to point to `buildpath/.brew_home/.npm` instead of `~/.npm`\r\n* this results in over 10x higher build times than necessary making the current approve even less performant than the resource heavy approve proposed by this PR\r\n* to fix this (while sticking with npm based installs) we need to tell npm the real location of it's global cache (and not our fake `buildpath/.brew_home/.npm` cache)\r\n* a workaround for this can [be found here](https://github.com/chrmoritz/homebrew-node/blob/master/Formula/azure-cli2.rb#L35-L37) (Can this be improved somehow (can we access the old home?)?)\r\n\r\n#### 5. NPM is not designed as a package manager for global installations :red_circle:\r\n* NPM is optimized for the local installation use case and because of this is not creating optimized global installations (it's not an issue but the proposed way is quite an enchantment)\r\n* the node module spec compliant format proposed in this PR is in 2 ways better than the global format produced by npm:\r\n  * 100% flat (no nested dependencies, just symlinks to their locations)\r\n  * no duplications (Npm produces multiple copies of the same version of a dependency if it's required at different nested places. In the proposed format we would just create multiple symlinks from our versioned dep to the places where it is needed, resulting in smaller installation sizes)\r\n\r\n### 6. Handling of native addons (inside the dependency tree)\r\n\r\n#### 6.1 Not pulling prebuild binaries :red_circle:\r\n* Solutions like [node-pre-gyp](https://www.npmjs.com/package/node-pre-gyp) or [prebuild](https://www.npmjs.com/package/prebuild) for pulling prebuild binaries for native addons are not compatible with homebrews philosophy to build everything from source on the CI / in `--build-from-source` builds. That's why I have a system in place in this PR for patching the installation step of native addons to tell such tools to always build from source.\r\n* Unfortunately it's is not possible to avoid pulling prebuild binaries of c-code for native addons if we stick with npm install based formula installations.\r\n\r\n#### 6.2 bottle compatibility with same major node version :white_check_mark:\r\n* native addons compiled against a Node version are only compatible with other Node version with the same major version (other Node version are not ABI compatible)\r\n* thats why we should consider adding a `pour_bottle?` requirement for native addons like [done here](https://github.com/chrmoritz/homebrew-node/blob/master/Formula/azure-cli2.rb#L17-L22) for a specific node major version\r\n* also a build time dep to python 2.6/2.7 is required too\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 208753416,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T07:27:41Z",
		"body" : "> Online requirement during installs\r\n\r\nAs described above I think this is unfortunate but a problem I'd like to be fixed (if we do) without requiring anything else of formula version creators/bumpers than \"add URL, add checksum, done\".\r\n\r\n> Independent of what way we choose, we should switch our module installation from local style to global style (with setting a custom prefix to libexec) as in this line\r\n> this brings our installations more in line with global installations through npm\r\n> prunes the obsoletly installed devDependencies (which are unnecessarily installed with our current local installations) and\r\n\r\nSounds good :+1: \r\n\r\n> this can either be fixed by homebrew managed resource deps (as proposed by this PR) or by providing a npm-shrinkwrap.json as done here\r\n> this would require the generation of a new npm-shrinkwrap.json with every version upgrade by running npm shrinkwrap inside a global installation and updating the gist\r\n\r\nI think this is too much overhead for formula creators/updaters. I think if upstream don't provide files for this then it's fine for our versions to change each time you install.\r\n\r\n> to fix this (while sticking with npm based installs) we need to tell npm the real location of it's global cache (and not our fake buildpath/.brew_home/.npm cache)\r\n> a workaround for this can be found here (Can this be improved somehow (can we access the old home?)?)\r\n\r\nSeems like a good idea :+1: However, the location should be somewhere under `HOMEBREW_CACHE`; we don't want to provide write-access to $HOME during install. We could consider copying files in there from `$HOME/.npm` at some point.\r\n\r\n> the node module spec compliant format proposed in this PR is in 2 ways better than the global format produced by npm\r\n\r\nI think this is something that's better taken upstream to `npm`.\r\n\r\n> Unfortunately it's is not possible to avoid pulling prebuild binaries of c-code for native addons if we stick with npm install based formula installations.\r\n\r\nAgain, this is regrettable but not that serious, currently, and should be taken upstream to `npm`.\r\n\r\n\r\n> native addons compiled against a Node version are only compatible with other Node version with the same major version (other Node version are not ABI compatible)\r\n> thats why we should consider adding a pour_bottle? requirement for native addons like done here for a specific node major version\r\n\r\nWe don't actually need that requirement; `depends_on \"node\"` means that we can rely on the newest version of `node` always being installed before the package is installed (even if they are pinned). This would only be required if we had a `:node` or similar that allowed using Nodes from homebrew-versions.\r\n\r\n---\r\n\r\nGreat write-up here, thanks for all your thought and work.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 208840366,
		"user" : {
			"login" : "chrmoritz"
		},
		"created_at" : "2016-04-12T10:39:11Z",
		"body" : "#### 4. Handling of the npm cache (+ 2. Global vs local module installations)\r\n\r\n> Seems like a good idea :+1: However, the location should be somewhere under HOMEBREW_CACHE; we don't want to provide write-access to $HOME during install. We could consider copying files in there from $HOME/.npm at some point.\r\n\r\nI think I might have an idea of what is causing the current `npm install` slowness. If no explicit cache path is set npm tries to resolve `~/.npm` both in it's main process and it's spawned child processes, but only it's main process is affected by the homebrew patched `ENV[\"HOME\"]` by superenv. This results in a edge case because the cache is resolved to `buildpath/.brew_home/./npm` in the main process, but in the spawned child processes it's resolved to the actual `/Users/username/.npm`.\r\n\r\nSetting the cache to somewhere inside `HOMEBREW_CACHE` doesn't seem to decrease the performance to much. These are the install times of `azure-cli` on a MBA 2012 (with a decent internet connection):\r\n* with prefilled cache in `~/.npm`: ~45sec\r\n* with empty cache in a tmp dir: ~50sec\r\n* with unset cache causing edge case: aborted after 20 min (after running out of my 10gb free disk space)\r\n\r\nDo you think the simple `HOMEBREW_CACHE/.npm` would be a good location or do you have something better in mind? Also do you think that this (and 2. global style module installation) would be worth creating a `Language::Node` helper similar to pythons `setup_install_args` which sets the cache (by creating a local `.npmrc` file with the cache entry set) and returning our npm install args for the global style (`\"npm\", \"install\", \"--global\", \"--prefix=#{libexec}\", \"--verbose\", buildpath`)?\r\n\r\n#### 1. Online requirement during installs + 3. Locking dependencies to specific versions \r\n\r\nOk, than I take this as a wont fix, because fixing it would add to much overhead.\r\n\r\n#### 5. NPM is not designed as a package manager for global installations\r\n\r\n> I think this is something that's better taken upstream to npm.\r\n\r\nI disagree here. While it's not a common use case to update only a resource of a formula in homebrew, updating only specific dependencies is quite common in npm. What I meant here was, that we could optimize the module format more for the homebrew use case as it could be done for a npm use case. \r\nBut I think it's like 1 and 3 something we can't improve without adding to much overhead.\r\n\r\n#### 6.1 Native addons: Not pulling prebuild binaries\r\n\r\n> Again, this is regrettable but not that serious, currently, and should be taken upstream to npm.\r\n\r\nNpm official only supports building native addons from source. These are both 3rd party solutions and it might be worth asking them to add an environment variable to force source builds, which we could set.\r\n\r\n#### 6.2 bottle compatibility with same major node version\r\n\r\n> We don't actually need that requirement; depends_on \"node\" means that we can rely on the newest version of node always being installed before the package is installed (even if they are pinned). This would only be required if we had a :node or similar that allowed using Nodes from homebrew-versions.\r\n\r\nAgreed. What we would really need to improve this is a way to enforce them to be executed with a specific node major version, which would require something like a major version specific opt prefix. So I guess this is also something which is not easily fixable.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 208841532,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T10:43:47Z",
		"body" : "> Do you think the simple HOMEBREW_CACHE/.npm would be a good location or do you have something better in mind? Also do you think that this (and 2. global style module installation) would be worth creating a Language::Node helper similar to pythons setup_install_args which sets the cache (by creating a local .npmrc file with the cache entry set) and returning our npm install args for the global style (\"npm\", \"install\", \"--global\", \"--prefix=#{libexec}\", \"--verbose\", buildpath)?\r\n\r\nYeh, this all sounds pretty good. I'd probably go for `HOMEBREW_CACHE/npm` just to make the directory more obvious.\r\n\r\n> Npm official only supports building native addons from source. These are both 3rd party solutions and it might be worth asking them to add an environment variable to force source builds, which we could set.\r\n\r\n:+1: \r\n\r\n> Ok, than I take this as a wont fix, because fixing it would add to much overhead.\r\n> But I think it's like 1 and 3 something we can't improve without adding to much overhead.\r\n> Agreed. What we would really need to improve this is a way to enforce them to be executed with a specific node major version, which would require something like a major version specific opt prefix. So I guess this is also something which is not easily fixable.\r\n\r\nYeh, sadly on these. Thanks for understanding.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 208882330,
		"user" : {
			"login" : "chrmoritz"
		},
		"created_at" : "2016-04-12T12:36:06Z",
		"body" : "I've switched this PR to introduce the more simple `Language::Node.npm_install_args` helper method with this functionality:\r\n\r\n* make sure that a working copy of npm and node-gyp from node's libexec is prepended to the PATH (to not rely on a user managed npm installations, as already done by all node module based formulas)\r\n* sets the npm cache to `HOMEBREW_CACHE/npm`, which fixes issues under superenv resulting in long install times and high disk usage (https://github.com/Homebrew/brew/pull/37#issuecomment-208840366)\r\n* returns npm install args for a global style module installation to libexec\r\n\r\nA working copy of the `azure-cli` using this new helper method can be found here: https://github.com/chrmoritz/homebrew-node/blob/master/Formula/azure-cli.rb (`brew install chrmoritz/node/azure-cli`).\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 208922340,
		"user" : {
			"login" : "chrmoritz"
		},
		"created_at" : "2016-04-12T14:02:39Z",
		"body" : "Updated formulas for all npm install based formulas in homebrew-core (except tegh which is a candidate for the boneyard imho) using this new helper method can be found here: https://github.com/Homebrew/homebrew-core/compare/master...chrmoritz:node_modules",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 210852749,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T16:36:26Z",
		"body" : "A couple of comments but I like the direction here :+1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 210860677,
		"user" : {
			"login" : "chrmoritz"
		},
		"created_at" : "2016-04-16T17:12:34Z",
		"body" : "Addressed your comments and rebased on master.\r\nI've also already changed the proposed formulas over at https://github.com/Homebrew/homebrew-core/compare/master...chrmoritz:node_modules to the new format, which has discarded you inline comments over there:\r\n* The current test of azure-cli is failing on node 6.0.0-rc.2, so native addon compatibility to node major version is already covered by it.\r\n* (Node-)gyp requires Python 2.6 or 2.7. (Same as in the [v8 formula](https://github.com/Homebrew/homebrew-core/blob/master/Formula/v8.rb#L22))",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 210861998,
		"user" : {
			"login" : "chrmoritz"
		},
		"created_at" : "2016-04-16T17:34:45Z",
		"body" : "Thinking this further I've added a second method named `Language::Node.local_npm_install_args`, ‚Ä©which can be used as a replacement for `std_npm_install_args` in formulas (like `elixirscript` and `kibana`), where npm install is only a part of the build step and therefore global installations are not suitable.\r\n\r\nIt still sets up the PATH for npm and sets our cache config but only returns the `‚Äîverbose` argument (as of now, but it might be extended in the future and therefore I've keeped it as an array).\r\n\r\nThe Formula change can be previewed in the last 3 commits of https://github.com/Homebrew/homebrew-core/compare/master...chrmoritz:node_modules.\r\n\r\nToDo:\r\n* [x] [update this audit check](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cmd/audit.rb#L661-L666)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 211075649,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-17T18:25:44Z",
		"body" : "@chrmoritz Looks good to me now but would like to get @DomT4 to üëç before I merge.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 211077900,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-17T18:38:33Z",
		"body" : "I'll try and look over and play with this tonight, but I'll get it done at the latest before Tuesday morning. One thing I can spot that'd be nice to get done is to get `brew cleanup` to clean the `npm`-cache in the same way we do the Java one.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 211542165,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-18T19:31:01Z",
		"body" : "### Summary:\r\n\r\nThis mostly looks reasonable, from testing. I like the way it ended up. Added a few comments but there's nothing enormous.\r\n\r\nI agree with Mike in particular that avoiding adding a wad of resources to every `npm`-using formula was an important step to getting this üö¢-able; we've discovered that heavy resource use on things like Python formulae tends to result in people not updating them unless something explicitly breaks, which is a solid way to end up missing upstream resource security or bugfix releases.\r\n\r\nIt is an annoyance that many formulae can be fetched and then installed offline, and then some very much cannot, and that's something I'd like to eventually see if we can stamp out. I consider it a lesser evil  though to require someone to be online than implementing another system where resource security updates are potentially missed.\r\n\r\n### Improvements:\r\n\r\nOne thing that would be nice to prevent is `.brew_home` being coped into every `npm`-using formula's `libexec/lib/node_modules/name` under the new system. It shouldn't cause any harm, but it could be confusing to users and is unnecessary clutter.\r\n\r\nThat directory will always contain at least a blob of folders followed by one file, the Python helper that makes sure Homebrew's `site-packages` for Python remain accessible to the system Python, as documented [here](https://github.com/Homebrew/brew/blob/acc9a7ca8554bc2413dee2d6d0f407b3a59c628c/Library/Homebrew/formula.rb#L1373-L1381).\r\n\r\n### Things that'd be nice to handle one day:\r\n\r\nOne thing that does make me wonder if we've room for improvement are these comments in some formulae such as [here](https://github.com/chrmoritz/homebrew-core/blob/a568583597a58fa11e0b0a590861d886d205c39c/Formula/azure-cli.rb):\r\n> needs a revision for every node major version bump (native addon)\r\n\r\nI worry a bit that a lot of people are going to forget those lines exist and we'll end up doing revisions after-the-fact (if at all) rather than at-the-time.\r\n\r\nIt's probably overly complex and we may just have to live with this new mechanism being an improvement in stability over the status quo but it'd be nice if `audit` detected Node was being bumped more than x amount (which should be easy enough given Node's versioning system) and there weren't expected changes to formulae with that notation.\r\n\r\nI don't think that idea is particularly workable immediately though, it's more of a \"nice to have in future\" than \"let's get this done today\".",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 211546318,
		"user" : {
			"login" : "chrmoritz"
		},
		"created_at" : "2016-04-18T19:42:42Z",
		"body" : "I've addressed 2 of your comments and added `.brew_home` to `.npmignore` in `std_npm_install_args` so that it won't get installed into `libexec`.\r\n\r\n> I worry a bit that a lot of people are going to forget those lines exist and we'll end up doing revisions after-the-fact (if at all) rather than at-the-time.\r\n\r\nAs of now every node major version bump would trigger a test of all formulas which depend on node on the CI. If we would do a node major bump without adding a revision to `azure-cli` the test would fail because it would be compiled against node 5 but tested with node 6 for example. So this should be already covered by the current brew testbot implementation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 211609878,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-18T22:34:10Z",
		"body" : "In \"Dom is incredibly annoying\" could you perhaps write a document [like this](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Python-for-Formula-Authors.md) _(without needing to be anywhere near as extensive)_ that serves as guidance for formulae authors moving to the new system?\r\n\r\nParticularly on how and when to use each helper method, when to revision formulae that use native addons and a short example `Foo` formula.\r\n\r\nThat's my last point of concern here about moving the system across. If we can get that done I'm personally happy to ship.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 211658337,
		"user" : {
			"login" : "chrmoritz"
		},
		"created_at" : "2016-04-19T00:49:00Z",
		"body" : "I've addressed all comments from above and squashed all fixup commits.\r\nI will look into creating a documentation for the \"annoying Don\" tomorrow.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 212190994,
		"user" : {
			"login" : "chrmoritz"
		},
		"created_at" : "2016-04-20T01:08:46Z",
		"body" : "I've added a first draft of the [Node for formula authors](https://github.com/chrmoritz/brew/blob/nodelang/share/doc/homebrew/Node-for-Formula-Authors.md) documentation to this PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 212291084,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-20T07:10:40Z",
		"body" : "Great work here, @chrmoritz. I'm happy to merge this if @DomT4 is.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 213507960,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-22T16:51:14Z",
		"body" : "Mostly documentation notes at this point. Nearly there on getting this wrapped.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 214562262,
		"user" : {
			"login" : "chrmoritz"
		},
		"created_at" : "2016-04-25T23:29:22Z",
		"body" : "I've updated the documentation to address your comments and rebased on master.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 214955853,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-27T02:57:07Z",
		"body" : "There's nothing I can see here that I've a problem with at this point. If nobody cries wolf over the next 12 hours or so I'll merge this then.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 215133905,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-27T16:10:15Z",
		"body" : "Accidentally squashed it, which is a minor annoyance in this situation, but merged in https://github.com/Homebrew/brew/commit/bc98fd37882c64c896dc2243fcc6e129f170a32a.\r\n\r\nThanks for sticking with us on this review journey @chrmoritz, appreciate your patience and dedication in getting this done. If you wanted to follow-up by changing a few of the Node-using formulae in `homebrew/core` to use the new system that'd be ‚ù§Ô∏è but entirely up to you.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 215143994,
		"user" : {
			"login" : "chrmoritz"
		},
		"created_at" : "2016-04-27T16:45:51Z",
		"body" : "Thx for merging this. I've submitted a rebase of the formulas (as proposed here) to core to make use of the new `Language::Node` in all node module based formulas (except `tegh`).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 215144251,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-27T16:46:49Z",
		"body" : "Thanks! Spotted that and left a comment on the `tegh` situation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 37
	},
	{
		"id" : 206568784,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-06T21:07:48Z",
		"body" : ":+1: I still get confused about this myself sometimes, and a terminology change - especially w a keyword change to remove context sensitivity in formula files - would probably help.\r\n\r\nMight be a bit harder to do the batch change, but maybe keeping 'revision' for formula would work too, with ':revision' for git resources becoming ':commit', since \"commit\" is in wide informal use that way and associated with Git, and 'bottle_revision' for the bottles. We could prob do a bulk search-and-replace of `:revision => \"\\w+\"` since nothing else uses that symbol AFAIK, and formatting is consistent. I can't easily think of another term to use for formula revisions, but maybe that's just because I'm used to it now.\r\n\r\nThough semantically and conversationally, it might be cleaner to change the terms for formula and bottle: since we track our formulae in git, and don't bump the formula revision with every file change, a formula revision may live for several git revisions of the formula file. And all the git revisions of a formula file over its life do not correspond to \"revisions\" of that formula. (E.g. If I say \"what revision of asciidoc are you looking at?\" I might be referring to the git revision SHA of `asciidoc.rb` or the `revision 2` inside the file. Can't tell without more context.)\r\n\r\nGit is the only one of these three concepts that's from outside Homebrew and has pre-existing terminology, and it uses \"revision\". So maybe that should take precedence.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 38
	},
	{
		"id" : 206837964,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-07T12:03:49Z",
		"body" : "In my mind there shouldn't be any confusion, as we're asking them to remove the `revision` line, not some `:revision =>` argument from a statement. But I can see how that may trip up some people.\r\n\r\nIn my opinion, the least invasive and only acceptable solution would be to change the `:revision =>` argument for `url` (I think `:commit` is an excellent suggestion). I'm :-1: on changing `revision` for both the formula itself and `bottle do` blocks. (We're already asking our contributors to not touch the `bottle do` block anyway and that should make it clear that we can't be referring to the `revision` line in there.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 206840962,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-07T12:08:46Z",
		"body" : "Maybe to add to my confusion why that is an issue: People are dealing with natural languages all the time, where the same thing means something different (depending on context) all the time. But I guess if we can change things in a way that reduces confusion and thus maintenance burden, it's reasonable to pick the pragmatic solution instead of trying to educate people ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 207453749,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-08T14:31:29Z",
		"body" : "I'd propose bottle `revision`s become `bottle_version` or `bottle_revision`, SCM `revisions` become `commit` or `revision` becomes `subversion` or something.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 207537863,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-04-08T17:58:48Z",
		"body" : "```\r\nrevison => bottle_revision\r\nSCM revision => commit\r\nformula revision => edition, or just formula_revision\r\n```\r\n\r\nNot `subversion`, if one wants to decrease confusion.  (Imagine a formula's HEAD is a subversion repo, and also has a formula revision that we call  \"subversion\").",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 207771411,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T11:14:17Z",
		"body" : "I like `edition`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 207978901,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-10T12:36:35Z",
		"body" : "Keeping with the bottle theme, we could call bottle revisions the bottling `run` or `lot` number.\r\n\r\nIf you like `edition` and want to continue the book theme, we could call each bottle revision an [`impression`](https://en.wikipedia.org/wiki/Edition_%28book%29#Print_run).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 223718044,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-03T23:28:13Z",
		"body" : "I think we should leave this unchanged. The meanings are each quite clear from context.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 223734749,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-04T04:02:55Z",
		"body" : "> The meanings are each quite clear from context.\r\n\r\nThis rather assumes everyone has a firm grasp on the context of each usage üòâ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 223734818,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-04T04:04:55Z",
		"body" : "Chicken and egg. I don't think adding additional jargon actually helps with that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 223757484,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-04T14:06:37Z",
		"body" : "@ilovezfs This is something people run into problems with with alarming regularity, unfortunately.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 223777220,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-04T20:42:34Z",
		"body" : "What percent of that is people modifying the bottle block when they shouldn't be as opposed to some other kind of confusion?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 223781002,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-04T22:10:53Z",
		"body" : "I believe the bottle block confusion could also be dealt with by making `brew bottle` surround the bottle with comments that say something like ‚ÄúPlease do not modify this following `bottle do` block.‚Äù or something similar. (This would also help with people occasionally removing or otherwise modifying the `bottle do` block when they shouldn't.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 223781079,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-04T22:12:53Z",
		"body" : "Yeah, that's why I asked. I'm wondering how much of the problem would be solved with that change alone.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 223800356,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-05T08:41:24Z",
		"body" : "I'd say when we ask people for a `revision` bump they modify the bottle block 25-50% of the time. Even when we say not to modify it in the original message it's still 10-20% of the time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 223820850,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-06-05T15:54:37Z",
		"body" : "The proposal is about reducing confusion and preventing removals of the revisions that appear *outside* the bottle block.  The prevention of incorrect bottle-block modifications is a separate issue.  So while that separate issue would likely not be fixed by the present proposal, that's no argument against the present proposal.\r\n\r\nBut on that separate issue, let me ask what I hope is not too silly a question.  Can't the CI bots be made to handle that stuff?  When a user submits a PR that contains a bottle-block modification (an outright deletion, or a less severe change) can't they be configured to auto-github-comment on that PR saying \"Nope, don't change the bottle block; put it back the way it was\"?  Maybe also \"If you were told by a maintainer to bump the revision, they meant blah blah, not the one in the bottle-block.\"",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240401323,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T12:51:50Z",
		"body" : "> revison => bottle_revision\r\n> SCM revision => commit\r\n> formula revision => edition, or just formula_revision\r\n\r\nGoing to open a PR using `bottle_revision`, `commit` and `formula_revision` as those names are the most obvious/explicit for the human-readable DSL.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240421436,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T14:05:19Z",
		"body" : "Opened PRs for this. To add weight to @DomT4's argument: this is currently (part of) a valid formula:\r\n\r\n```ruby\r\nclass Foo < Formula\r\n  url \"https://github.com/foo/bar.git\", :revision => \"abcdef\"\r\n  revision 1\r\n\r\n  bottle do\r\n    revision 1\r\n    sha256 \"6f23f874cf3997bb0635e5f7706db92c9e98b5089df3b3098045afe071dc992b\" => :el_capitan\r\n  end\r\nend\r\n```\r\n\r\nInstead let's have:\r\n\r\n```ruby\r\nclass Foo < Formula\r\n  url \"https://github.com/foo/bar.git\", :commit => \"abcdef\"\r\n  formula_revision 1\r\n\r\n  bottle do\r\n    bottle_revision 1\r\n    sha256 \"6f23f874cf3997bb0635e5f7706db92c9e98b5089df3b3098045afe071dc992b\" => :el_capitan\r\n  end\r\nend\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240627249,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T05:26:54Z",
		"body" : "I know I'm probably on lost ground here, but it still feels weird to completely ignore the context in which these are used and to try to make the DSL context-independent only for this particular case. If we get `formula_revision` and `bottle_revision`, then why is it still fine and unambiguous to have `sha256` instead of `formula_sha256` and `bottle_sha256` or `url` instead of `formula_url` and `patch_url` (in a `patch do` block)? If nothing else, this different treatment looks ugly to me.\r\n\r\n(Yes, I realize several PRs have been created to address this, but my argument makes more sense when looking at the complete picture.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240628833,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T05:39:52Z",
		"body" : "@UniqMartin I agree with you but I think this is already decided.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240654692,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T08:15:13Z",
		"body" : "@UniqMartin They are being changed because it causes confusion in the same way that `sha256` etc. do not. I'm open to alternate suggestions or names to resolve this problem if they are presented in the relatively near term.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240657823,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T08:29:43Z",
		"body" : "> They are being changed because it causes confusion in the same way that `sha256` etc. do not.\r\n\r\nI know. I'm not debating that this causes confusion for some contributors, I'm just a bit afraid that we're solving a minor problem with a very invasive change (and the potential for breakage such a change can cause), not to mention that this is a change to our formula DSL that affects almost any formula and we have been previously cautious with such changes.\r\n\r\n> I'm open to alternate suggestions or names to resolve this problem if they are presented in the relatively near term.\r\n\r\nFrom https://github.com/Homebrew/brew/issues/38#issuecomment-223781002 above:\r\n\r\n> I believe the bottle block confusion could also be dealt with by making `brew bottle` surround the bottle with comments that say something like ‚ÄúPlease do not modify this following `bottle do` block.‚Äù or something similar.\r\n\r\nI'm not opposed to renaming `:revision` in SCM `url`s though my gut feeling is that this has caused far less confusion than the formula/bottle `revision`, it just happens to have the same name and thus was prematurely included in this issue. (But as I said, this is just my gut feeling, as I haven't been following formula contributions that closely to see whether this use of `:revision` is indeed as problematic as stated.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240661909,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T08:47:35Z",
		"body" : "> then why is it still fine and unambiguous to have sha256 instead of formula_sha256 and bottle_sha256 or url instead of formula_url and patch_url (in a patch do block)? If nothing else, this different treatment looks ugly to me.\r\n\r\nThis does not seem to cause confusion for people because it's more obvious how they are scoped whereas a `formula_revision` is sometimes not present when a `bottle_revision` or `commit` is and it's relatively difficult to describe which one to change.\r\n\r\n@UniqMartin To be more explicit and general about how to handle issues/PRs like this: a problem has been raised by this issue and a solution proposed. If you're opposed to the solution the onus is on you to propose an alternate solution rather than point out perceived flaws with the current solution. What do you propose we do to solve this issue?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240669988,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T09:22:43Z",
		"body" : "> To be more explicit and general about how to handle issues/PRs like this: a problem has been raised by this issue and a solution proposed. If you're opposed to the solution the onus is on you to propose an alternate solution rather than point out perceived flaws with the current solution. What do you propose we do to solve this issue?\r\n\r\nI don't know how to resolve this in general, but for this particular issue, I have proposed an alternative solution (again, cf. https://github.com/Homebrew/brew/issues/38#issuecomment-223781002) that is less invasive than changing our formula DSL en masse and I did so well before any solution was picked and implemented.\r\n\r\nWhat else can I do than make such suggestions? Nobody has commented on this suggestion, not even to point out flaws inherent to it and that I might not have realized yet.\r\n\r\nI'm not here to block progress or improvements to our contribution experience, but I'm a bit wary of sweeping changes like the one currently implemented and the least I can do is point out possible problems to help avoid nasty surprises. If my argument is not convincing and you deem the benefits worth the risks, then please simply let me know. Ultimately, I'll defer to your much greater experience with Homebrew in judging the situation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240671004,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T09:27:10Z",
		"body" : "> I don't know how to resolve this in general, but for this particular issue, I have proposed an alternative solution (again, cf. #38 (comment)) that is less invasive than changing our formula DSL en masse and I did so well before any solution was picked and implemented.\r\n\r\nOk, my apologies for not commenting specifically on that suggestion.\r\n\r\nI don't like it because I think it assumes that every tap will use our method of autogenerating/updating bottle bottles rather than updating them by hand (which some decide to do). I think those taps would find this comment more abrasive than a DSL change.\r\n\r\nThat said, given you've scoped the problem as being just about the bottle block, I'm prepared to make just a change there for now. Do you have any other suggested names for `bottle_revision` that would be more clearly about the bottle and not the formula? Alternatively, do you have a suggestion for what to change `formula_revision` to (technically `revision`s for bottles predate `revisions` for formulae if that's at all relevant).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240678294,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T09:57:16Z",
		"body" : "> Ok, my apologies for not commenting specifically on that suggestion.\r\n\r\nThanks!\r\n\r\n> I don't like it because I think it assumes that every tap will use our method of autogenerating/updating bottle bottles rather than updating them by hand (which some decide to do). I think those taps would find this comment more abrasive than a DSL change.\r\n\r\nThat's good to know and makes the decision you've made when creating the above three PRs feel less arbitrary. Another similar idea that just popped into my head would be to move the `bottle do` block further down to reduce this kind of confusion. It could become the last element in `class Foo < Formula [‚Ä¶] end` or could even be moved into a separate code block at the end of the file (by relying on the ability to reopen classes in Ruby):\r\n\r\n```ruby\r\nclass Foo < Formula\r\n  # Formula code created by a human.\r\nend\r\n\r\nclass Foo\r\n  bottle do\r\n    # Bottle code typically created by `brew test-bot`/`brew bottle`.\r\n  end\r\nend\r\n```\r\n\r\nOne possible downside is that this repeats the class name. An upside is that this is far easier to cut out and replace with a new `bottle do` block compared to the current regex solution.\r\n\r\n> That said, given you've scoped the problem as being just about the bottle block, I'm prepared to make just a change there for now. Do you have any other suggested names for `bottle_revision` that would be more clearly about the bottle and not the formula? Alternatively, do you have a suggestion for what to change `formula_revision` to (technically `revision`s for bottles predate `revisions` for formulae if that's at all relevant).\r\n\r\nIn general, I find a solution that keeps the (formula) `revision` as-is (for the benefit of all the contributors that have already understood this) and only changes the DSL used inside the `bottle do` block more desirable. The latter could be more easily seen as an implementation detail and if it changes, it doesn't really affect contributors (except for causing less confusion).\r\n\r\nI'm not sure if this might cause new confusion, but `build` feels like a nice replacement for a bottle `revision`. After all it is indeed a new (binary) build of an otherwise unchanged formula with the same `pkgversion` (version+revision). If we stray a bit into book printing territory, `reissue` could also work. What do you think about these? Let me know while I'll ponder this a bit more in the back of my head and try to come up with terminology that is better yet.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240685412,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T10:29:29Z",
		"body" : "> I'm not sure if this might cause new confusion, but build feels like a nice replacement for a bottle revision.\r\n\r\n`build` could work for me. It'll overload the use of `build.with?` etc. in the DSL but I can't see a reason why you'd ever use that inside the bottle block.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240689449,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T10:50:17Z",
		"body" : ">It'll overload the use of build.with? etc. in the DSL but I can't see a reason why you'd ever use that inside the bottle block.\r\n\r\nI'd considered suggesting `build` and rejected it out of hand for exactly that reason.\r\n\r\nAlternatives for inside the bottle block:\r\n```\r\nbatch\r\nbottling\r\nimpression\r\nlot\r\nnumber\r\nrebuild\r\nrun\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240690362,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T10:55:09Z",
		"body" : "> rebuild\r\n\r\nThis probably slightly trumps `build` for me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240690710,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T10:56:56Z",
		"body" : ">trumps\r\n\r\nPlease don't use this word. It's probably some sort of violation of the CODEOFCONDUCT. :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240691777,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T11:02:27Z",
		"body" : "I'll use it while, legally, I still can üòâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240711224,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T12:42:51Z",
		"body" : "The more I mentally chew on `rebuild` the more I like it; I think it concisely explains the concept well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240713935,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T12:54:17Z",
		"body" : "Unless it confuses maintainers since that's also the name of a button in Jenkins :trollface: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 240762229,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T15:34:38Z",
		"body" : "Right, I totally missed the obvious clash with `build`. But `rebuild` is not a bad alternative. :+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 38
	},
	{
		"id" : 206474662,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-06T17:23:59Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 39
	},
	{
		"id" : 206561021,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-06T20:50:07Z",
		"body" : "My first pull done from the iPad! I like this new no-merge-commit Merge button behavior.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 39
	},
	{
		"id" : 206722026,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-07T06:53:13Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 40
	},
	{
		"id" : 206722682,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-07T06:55:43Z",
		"body" : ":+1:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 40
	},
	{
		"id" : 206859948,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-07T12:33:06Z",
		"body" : "Unfortunately, you can't. Homebrew only supports installing the latest version of a formula/package.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 41
	},
	{
		"id" : 206894668,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-07T13:15:04Z",
		"body" : "To help us debug this issue can you explain:\r\n- What you were trying to do (and why)\r\n- What happened\r\n- What you expected to happen\r\n- Step-by-step reproduction instructions (with as minimal input data as possible)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 42
	},
	{
		"id" : 207454774,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-08T14:34:18Z",
		"body" : "Happy to continue discussion here but I suspect this is expected behaviour; we need to run Bundler ourselves for certain commands (e.g. `tests`) so those will fail if you're nesting bundler invocations. Regardless, the fix is \"don't run Homebrew with `bundle exec`\".",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 42
	},
	{
		"id" : 207508657,
		"user" : {
			"login" : "jcampbell05"
		},
		"created_at" : "2016-04-08T16:45:24Z",
		"body" : "@mikemcquaid normally this would be the case but the issue was this, I was using Fastlane ran under `bundle exec` which invoked `brew bundle`.\r\n\r\nWorkedaround it though by invoking homebrew on its own.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 42
	},
	{
		"id" : 207509671,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-08T16:49:02Z",
		"body" : "üÜí ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 42
	},
	{
		"id" : 206930083,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-07T14:24:55Z",
		"body" : "Sorry but you have not followed the requested steps on the Troubleshooting page: https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 43
	},
	{
		"id" : 206946263,
		"user" : {
			"login" : "mdelmans"
		},
		"created_at" : "2016-04-07T15:10:36Z",
		"body" : "Sorry I did't follow the protocol.\r\n\r\nI ran` brew update` (twice)\r\nI fixed all warnings (apart from unbowed headers I believe are from node.js)\r\nMy command line tools are up to date (OS is to the latest update as well)\r\n\r\nStill stuck at\r\n\r\n`...updated 13743 targets...`\r\n\r\nGist logs:\r\nhttps://gist.github.com/3f391e758d751c78ecc62fbef9f99033\r\n\r\n\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 43
	},
	{
		"id" : 207052206,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-07T19:06:40Z",
		"body" : "This seems to be a legitimate bug. I'm able to reproduce it locally, though I haven't isolated the problem yet. Stay tuned ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 43
	},
	{
		"id" : 207064657,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-07T19:50:52Z",
		"body" : "This issue was moved to Homebrew/homebrew-core#133",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 43
	},
	{
		"id" : 207457629,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-08T14:40:42Z",
		"body" : "In future submit tickets about formulae to `homebrew-core`, thanks.\r\n\r\nIn this case I think the best approach is to adjust the `version_suffix` method so it generates a head version suffix based on the stable suffix + 1. Let me know if you need help with that.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 44
	},
	{
		"id" : 207467458,
		"user" : {
			"login" : "zbeekman"
		},
		"created_at" : "2016-04-08T14:58:41Z",
		"body" : "My apologies, I misread the text at brew-legacy...\r\n\r\nGreat idea about stable +1 :100: I'll start looking into it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 44
	},
	{
		"id" : 215283277,
		"user" : {
			"login" : "zbeekman"
		},
		"created_at" : "2016-04-28T01:46:13Z",
		"body" : "@mikemcquaid any tips for querying the stable version suffix? My ruby is still very much a WIP",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 44
	},
	{
		"id" : 215299649,
		"user" : {
			"login" : "zbeekman"
		},
		"created_at" : "2016-04-28T03:23:47Z",
		"body" : "@mikemcquaid I think I've found an acceptable solution to implement your suggestion... I'll include it in my PR for GCC 6.1",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 44
	},
	{
		"id" : 215306914,
		"user" : {
			"login" : "zbeekman"
		},
		"created_at" : "2016-04-28T04:24:54Z",
		"body" : "The more I think about this the more I lean towards a version suffix of `trunk` when compiling with `--HEAD`... when a new major release is issued (like yesterday's 6.1... PR incoming after my tests finish...) having a suffix of stable.version + 1 could be cause for confusion... --HEAD will result in a suffix of say 6, but gcc-trunk will really be at 7. And the latest stable is 6.1, but homebrew only knows about 5.3 until the formula gets updated...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 44
	},
	{
		"id" : 215797855,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-29T16:35:37Z",
		"body" : "@zbeekman `-trunk` (or `-master` if they use Git) seems fine/appropriate üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 44
	},
	{
		"id" : 215828359,
		"user" : {
			"login" : "zbeekman"
		},
		"created_at" : "2016-04-29T17:49:12Z",
		"body" : "Gcc uses SVN and has a canonical `trunk` branch.\n\nI'm also wondering if I should switch this from `--HEAD` to `--devel` which\nmight be clearer\nOn Fri, Apr 29, 2016 at 12:35 PM Mike McQuaid <notifications@github.com>\nwrote:\n\n> @zbeekman <https://github.com/zbeekman> -trunk (or -master if they use\n> Git) seems fine/appropriate üëç\n>\n> ‚Äî\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly or view it on GitHub\n> <https://github.com/Homebrew/brew/issues/44#issuecomment-215797855>\n>\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 44
	},
	{
		"id" : 207129359,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-07T22:58:24Z",
		"body" : "The default C++ stdlib on 10.9+ has C++11 support, but not every package might build its C++11 support if that's an option, at least not without nudging? In the case of boost we're not telling the buildsystem anything, just the compiler, so I suspect you're right they're actually the same thing.\r\n\r\nThis also influences compiler choice, but for clang it may often not make a difference.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 45
	},
	{
		"id" : 207458212,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-08T14:41:53Z",
		"body" : "I'd be in favour of doing something smart in our internals which provides a `build.cxx11?` method which always returns `true` on >=10.9 and returns `true` or `false` depending on the option passed on `<10.9`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 45
	},
	{
		"id" : 216552840,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:49:20Z",
		"body" : "Closing this in favour of a future PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 45
	},
	{
		"id" : 207080947,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-07T20:45:46Z",
		"body" : "Minor technical nitpick: it's not a fork bomb, because it's exec-ing without forking. That's not just a pedantic terminology niggle: it means you can't see the recursion in `ps` because there's only ever the one process (i.e. it's basically doing tail call optimization :wink:), and if it were forking, eventually the fork bomb would cause resources to run out, one of the `git` calls would fail, and the build would proceed (just with incorrect output from the `git` call because we're not checking its return status). Made it harder to debug this.\r\n\r\nI'll test this locally once I'm able to set up a local reproduction of the hang, but I probably can't give it a full thumbs-up even if it seems to work: I don't understand why this self-recursion is happening, and I don't really understand why this change would fix it. More importantly, I found that just adding a debugging call to the `ENV/scm/git` wrapper like this is *also* enough to fix it for me.\r\n\r\n```\r\ndef logit(str)\r\n  open(\"/Users/brew/Library/Logs/Homebrew/scm_git.log\", \"a\") { |f|\r\n    f.puts str\r\n    f.flush\r\n  }\r\nend\r\n\r\nlogit \"F: #{F} D: #{D}\"\r\n\r\ndef exec(*args)\r\n  # prevent fork-bombs\r\n```\r\n\r\nSo I don't really know what's going on here.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 46
	},
	{
		"id" : 207092841,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-07T21:22:03Z",
		"body" : "> Minor technical nitpick: it's not a fork bomb, because it's exec-ing without forking. That's not just a pedantic terminology niggle: it means you can't see the recursion in ps because there's only ever the one process (i.e. it's basically doing tail call optimization :wink:), [‚Ä¶]\r\n\r\nTrue; pardon my use of incorrect terminology. Should I fix my commit subject/message?\r\n\r\n> I don't understand why this self-recursion is happening, and I don't really understand why this change would fix it.\r\n\r\nI tried to explain the scenario in my top comment. It's basically `Libraray/ENV/4.3/git` and `Libraray/ENV/scm/git` mutually `exec`-ing each other [in this loop](https://github.com/Homebrew/brew/blob/d5085edce0b5482771c66cfe3e2c013ee3ca90f6/Library/ENV/scm/git#L37-L39) as they are both in PATH, not knowing that they are the same. (They don't invoke themselves because that's prevented by the fork-bomb protection [in this part of the code](https://github.com/Homebrew/brew/blob/d5085edce0b5482771c66cfe3e2c013ee3ca90f6/Library/ENV/scm/git#L22).)\r\n\r\n> More importantly, I found that just adding a debugging call to the `ENV/scm/git` wrapper like this is *also* enough to fix it for me.\r\n\r\nMy guess would be that you tried running this with the sandbox enabled, so that the write to the log file would have killed the wrapper process due to a sandbox violation. (But could be something else; it's really just the first thing that comes to my mind.)\r\n\r\n----\r\n\r\nHere are step-by-step instructions to reproduce the issue locally *before applying my fix*:\r\n\r\n1. Remove/unlink a brewed `git` as that will be in PATH and probably will prevent the bug from happening. Confirmed to happen if the wrapper is forced to fall back to `/usr/bin/git` (typical user installation) that is later resolved to the active developer directory.\r\n\r\n2. Apply this patch to the main Homebrew repository (for debug output):\r\n\r\n  ```diff\r\n  diff --git i/Library/ENV/scm/git w/Library/ENV/scm/git\r\n  index 05148339..019a57c6 100755\r\n  --- i/Library/ENV/scm/git\r\n  +++ w/Library/ENV/scm/git\r\n  @@ -20,6 +20,10 @@ def exec(*args)\r\n     # prevent fork-bombs\r\n     arg0 = args.first\r\n     return if arg0 =~ /^#{F}/i || File.expand_path(arg0) == File.expand_path(__FILE__)\r\n  +  $stderr.puts caller\r\n  +  $stderr.puts \"-- arg0 = #{arg0} => #{File.expand_path(arg0)}\"\r\n  +  $stderr.puts \"-- __FILE__ = #{__FILE__} => #{File.expand_path(__FILE__)}\"\r\n  +  $stderr.puts \">> #{args.inspect}\"\r\n     super\r\n   end\r\n  ```\r\n\r\n3. Apply this patch to the `xz` formula (random choice, something that downloads and extracts quickly):\r\n\r\n  ```diff\r\n  diff --git i/Formula/xz.rb w/Formula/xz.rb\r\n  index 1e27e044..a9908005 100644\r\n  --- i/Formula/xz.rb\r\n  +++ w/Formula/xz.rb\r\n  @@ -16,7 +16,10 @@ class Xz < Formula\r\n\r\n     option :universal\r\n\r\n  +  env :userpaths\r\n     def install\r\n  +    puts ENV[\"PATH\"].inspect\r\n  +    system \"git\", \"--version\"\r\n       ENV.universal_binary if build.universal?\r\n       system \"./configure\", \"--disable-debug\",\r\n                             \"--disable-dependency-tracking\",\r\n  ```\r\n\r\n4. Run `brew install xz`, abort after a few seconds (excerpt of output, shows PATH):\r\n\r\n  ```\r\n  [‚Ä¶]\r\n  \"/opt/brewery/dummy/Library/ENV/4.3:/opt/brewery/dummy/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/Cellar/poison-ruby/1.0/bin::/usr/local/bin:/opt/brewery/dummy/Library/ENV/scm\"\r\n  ==> git --version\r\n  [‚Ä¶]\r\n  ```\r\n\r\n5. Inspect `HOMEBREW_LOGS/xz/01.git`. Its contents should be pretty convincing (excerpt):\r\n\r\n  ```\r\n  2016-04-07 23:05:36 +0200\r\n\r\n  git\r\n  --version\r\n\r\n  /opt/brewery/dummy/Library/ENV/4.3/git:42:in `block in <main>'\r\n  /opt/brewery/dummy/Library/ENV/4.3/git:41:in `each'\r\n  /opt/brewery/dummy/Library/ENV/4.3/git:41:in `<main>'\r\n  -- arg0 = /opt/brewery/dummy/Library/ENV/scm/git => /opt/brewery/dummy/Library/ENV/scm/git\r\n  -- __FILE__ = /opt/brewery/dummy/Library/ENV/4.3/git => /opt/brewery/dummy/Library/ENV/4.3/git\r\n  >> [\"/opt/brewery/dummy/Library/ENV/scm/git\", \"--version\"]\r\n  /opt/brewery/dummy/Library/ENV/scm/git:42:in `block in <main>'\r\n  /opt/brewery/dummy/Library/ENV/scm/git:41:in `each'\r\n  /opt/brewery/dummy/Library/ENV/scm/git:41:in `<main>'\r\n  -- arg0 = /opt/brewery/dummy/Library/ENV/4.3/git => /opt/brewery/dummy/Library/ENV/4.3/git\r\n  -- __FILE__ = /opt/brewery/dummy/Library/ENV/scm/git => /opt/brewery/dummy/Library/ENV/scm/git\r\n  >> [\"/opt/brewery/dummy/Library/ENV/4.3/git\", \"--version\"]\r\n  /opt/brewery/dummy/Library/ENV/4.3/git:42:in `block in <main>'\r\n  /opt/brewery/dummy/Library/ENV/4.3/git:41:in `each'\r\n  /opt/brewery/dummy/Library/ENV/4.3/git:41:in `<main>'\r\n  -- arg0 = /opt/brewery/dummy/Library/ENV/scm/git => /opt/brewery/dummy/Library/ENV/scm/git\r\n  -- __FILE__ = /opt/brewery/dummy/Library/ENV/4.3/git => /opt/brewery/dummy/Library/ENV/4.3/git\r\n  >> [\"/opt/brewery/dummy/Library/ENV/scm/git\", \"--version\"]\r\n  [‚Ä¶]\r\n  ```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 46
	},
	{
		"id" : 207103953,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-07T21:51:07Z",
		"body" : "TL;DR: :+1:\r\n\r\nDetails:\r\n\r\n> True; pardon my use of incorrect terminology. Should I fix my commit subject/message?\r\n\r\nNah, it's close enough, and that's probably what people will search for anyway. Just wanted to get that in the history to help people who are trying to understand this or debug similar problems.\r\n\r\n>  It's basically `Libraray/ENV/4.3/git` and `Libraray/ENV/scm/git` mutually `exec`-ing each other [in this loop](https://github.com/Homebrew/brew/blob/d5085edce0b5482771c66cfe3e2c013ee3ca90f6/Library/ENV/scm/git#L37-L39) as they are both in PATH, not knowing that they are the same. \r\n\r\nAh. I understand now.\r\n\r\n> My guess would be that you tried running this with the sandbox enabled, so that the write to the log file would have killed the wrapper process due to a sandbox violation. \r\n\r\nOkay, put these two together and I'm 90% convinced. I am running under the sandbox, and was logging to `/Users/brew/Library/Logs/Homebrew/scm_git.log`, which would have been denied. That's consistent with some of the `git` calls getting killed and fixing the hang.\r\n\r\nThough when I ran `test-bot` like that, I was getting log output at that location, with a lot of `git --version` entries in it.\r\n\r\n```\r\nelcapitanvm-2:Homebrew brew$ pwd\r\n/Users/brew/Library/Logs/Homebrew\r\nelcapitanvm-2:Homebrew brew$ head log-01.txt\r\nexec-ing /usr/local/Library/ENV/scm/git: [\"/usr/local/Library/ENV/scm/git\", \"--version\"]\r\nexec-ing /usr/local/Library/ENV/scm/git: [\"/usr/local/Library/ENV/scm/git\", \"--version\"]\r\nexec-ing /Applications/Xcode.app/Contents/Developer/usr/bin/git: [\"/Applications/Xcode.app/Contents/Developer/usr/bin/git\", \"--version\"]\r\nexec-ing /usr/local/Library/ENV/scm/git: [\"/usr/local/Library/ENV/scm/git\", \"--version\"]\r\nexec-ing /usr/local/Library/ENV/scm/git: [\"/usr/local/Library/ENV/scm/git\", \"--version\"]\r\nexec-ing /Applications/Xcode.app/Contents/Developer/usr/bin/git: [\"/Applications/Xcode.app/Contents/Developer/usr/bin/git\", \"--version\"]\r\n...\r\n```\r\n\r\nProbably enough `git` calls from outside sandboxed calls were getting recorded to produce the logs, and the ones run under it were getting denied. But now since I've read you say \"sandbox\", I'm not getting *any* logs there when attempting the same thing.\r\n\r\nProbably just user error; I'll fiddle with it some more and see if I can figure out what I'm messing up, but this is consistent with your analysis.\r\n\r\n## Testing\r\n\r\nI tested your PR locally with `brew rm git` and `brew test-bot ... nginx` which is known to hang here and reproduced locally. It fixed it.\r\n\r\nI think this is the right fix. :+1:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 46
	},
	{
		"id" : 207104928,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-07T21:52:23Z",
		"body" : "Also fixes https://github.com/Homebrew/homebrew-core/issues/143\r\nAddresses the breakage encountered in https://github.com/Homebrew/homebrew-core/pull/88",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 46
	},
	{
		"id" : 207116021,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-07T22:26:33Z",
		"body" : "Confirmed this works under Jenkins/test-bot with https://github.com/Homebrew/brew/pull/46.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 46
	},
	{
		"id" : 207267062,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-08T07:18:00Z",
		"body" : "Nice work here, chaps.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 46
	},
	{
		"id" : 207396102,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-08T11:44:03Z",
		"body" : "Thanks for your report! I think we need more information to be able to help you. Can you please provide the complete output of the following commands: `brew config`, `brew doctor`, `awk --version`, `which curl`, and `curl --version`?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 47
	},
	{
		"id" : 207425532,
		"user" : {
			"login" : "kernel-task"
		},
		"created_at" : "2016-04-08T13:10:46Z",
		"body" : "**[FC-Mac-Pro:local admin$ brew config**\r\nawk: syntax error at source line 1\r\n context is\r\n\t >>> {print <<<  $1\"/\"$2}\r\nawk: illegal statement at source line 1\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: d7aa0c0335dd67e4151503f3a29d7089c57059c3\r\nLast commit: 15 hours ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 4b444310f26fb8350e05ca1eee54e1b39ad227c2\r\nCore tap last commit: 9 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: 8-core 64-bit ivybridge\r\nOS X: 10.11.4-x86_64\r\nXcode: 7.3\r\nCLT: 7.3.0.0.1.1457485338\r\nClang: 7.3 build 703\r\nX11: 2.7.8 => /opt/X11\r\nSystem Ruby: 2.0.0-p648\r\nPerl: /usr/bin/perl\r\nPython: /usr/bin/python\r\nRuby: /usr/bin/ruby => /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby\r\nJava: 1.6.0_65-b14-468\r\n**FC-Mac-Pro:local admin$  brew doctor**\r\nawk: syntax error at source line 1\r\n context is\r\n\t >>> {print <<<  $1\"/\"$2}\r\nawk: illegal statement at source line 1\r\nYour system is ready to brew.\r\n**FC-Mac-Pro:local admin$ awk --version**\r\nawk version 20121220\r\n**FC-Mac-Pro:local admin$ which curl**\r\n/usr/bin/curl\r\n**FC-Mac-Pro:local admin$ curl --version**\r\ncurl 7.43.0 (x86_64-apple-darwin15.0) libcurl/7.43.0 SecureTransport zlib/1.2.5\r\nProtocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp \r\nFeatures: AsynchDNS IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz UnixSockets\r\n\r\nand so it goes!\r\n\r\nRegards\r\nFC",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 47
	},
	{
		"id" : 207432709,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-08T13:29:40Z",
		"body" : "> ```\r\n> $ awk --version\r\n> awk version 20121220\r\n> ```\r\n\r\nThis looks suspicious. I'm also on OS X 10.11.4, but for me this prints `awk version 20070501`. What does `which awk` print on your system? (It should be `/usr/bin/awk` if it is the one provided by OS X.) Do you remember installing `awk` from some external source?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 47
	},
	{
		"id" : 207446602,
		"user" : {
			"login" : "kernel-task"
		},
		"created_at" : "2016-04-08T14:11:20Z",
		"body" : "OK you fixed it!!!\r\n\r\n**[FC-Mac-Pro:local admin$ which awk**\r\n/usr/local/bin/awk\r\n\r\nThen the output from\r\n**brew list**\r\nindicated that I, at 'some stage', installed the brew version.\r\nI removed and reinstalled it.\r\nProblem cleared up.\r\n\r\nObvious as it is now, it simply did not register with me that awk was a component in the chain of events involved in the execution of a brew command. Yes it's right there, but yet.....My bad.\r\nI need to allocate some time to study and understand the details of brew.\r\n\r\nYour help is greatly appreciated.\r\nThank You.\r\nRegards\r\nFC",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 47
	},
	{
		"id" : 207451653,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-08T14:25:11Z",
		"body" : "You're welcome; great we were able to resolve this one! :smile_cat: Your input is still valuable, as it helps us to improve Homebrew and make it more resilient against different user configurations.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 47
	},
	{
		"id" : 252905642,
		"user" : {
			"login" : "alexanderfrey"
		},
		"created_at" : "2016-10-11T12:42:09Z",
		"body" : "Same problem here. 'brew uninstall awk' helped. Thanks ! ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 47
	},
	{
		"id" : 207475570,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-08T15:20:10Z",
		"body" : "This issue was moved to Linuxbrew/linuxbrew#1057",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 48
	},
	{
		"id" : 207477971,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-08T15:26:24Z",
		"body" : "Can't view the diff but feel free to just merge üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 49
	},
	{
		"id" : 207478428,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-08T15:27:52Z",
		"body" : "> Can't view the diff but feel free to just merge :+1:\r\n\r\nThanks, I was very careful not to break things! It's basically the same situation like in the original PR.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 49
	},
	{
		"id" : 207576110,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-08T19:51:37Z",
		"body" : "`brew update` currently gives a summary of what happened. Are we OK with that info now getting spit out at the top of random installations, and quite possibly off screen almost immediately? Should we just suppress it entirely now?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 50
	},
	{
		"id" : 207769682,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T10:53:11Z",
		"body" : "> Are we OK with that info now getting spit out at the top of random installations, and quite possibly off screen almost immediately? Should we just suppress it entirely now?\r\n\r\nYes, I'm OK with that. Something I forgot to do is to add an additional header letting people know that we've autoupdated if there are any changes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 50
	},
	{
		"id" : 207772840,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-09T11:23:55Z",
		"body" : "Would you save the update summary and dump it at the end of the install or just leave it at the top?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 50
	},
	{
		"id" : 207773691,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T11:32:23Z",
		"body" : "Leave it at the top.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 50
	},
	{
		"id" : 207786723,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T12:46:00Z",
		"body" : "Addressed comments.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 50
	},
	{
		"id" : 207997991,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-10T15:07:51Z",
		"body" : "Will merge this tomorrow if there are no objections.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 50
	},
	{
		"id" : 208018963,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-04-10T17:12:54Z",
		"body" : "Just for my own clarity, what is the knob that prevents an auto-update from happening?  (In the legacy thread from which this arose, there seemed to be general agreement that such a knob should exist.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 50
	},
	{
		"id" : 208046734,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-10T19:14:23Z",
		"body" : "@chdiza The current state of the code is that this is an opt-in feature. Once this is merged, you would have to set `HOMEBREW_AUTO_UPDATE=1` in your environment to enable the auto update.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 50
	},
	{
		"id" : 208047004,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-04-10T19:17:22Z",
		"body" : "@UniqMartin Thanks.  I had scanned the code looking for the knob, and my eyes must have skipped right over that shellvar.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 50
	},
	{
		"id" : 208196002,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-11T07:17:05Z",
		"body" : "I'll add `HOMEBREW_NO_AUTO_UPDATE` in here just so it's one less thing to remove when we ship this.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 50
	},
	{
		"id" : 208228433,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-11T08:31:36Z",
		"body" : "Added the `HOMEBREW_NO_AUTO_UPDATE`, :ship:ing.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 50
	},
	{
		"id" : 207553590,
		"user" : {
			"login" : "tomByrer"
		},
		"created_at" : "2016-04-08T18:49:16Z",
		"body" : "Would have to add an extra command to remember, but I use [`nvm`](https://github.com/creationix/nvm#node-version-manager-) for NodeJS installs.  Helps with switching between older versions also.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 51
	},
	{
		"id" : 207771438,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T11:15:04Z",
		"body" : "To help us debug this issue can you explain:\r\n- What you were trying to do (and why)\r\n- What happened\r\n- What you expected to happen\r\n- Step-by-step reproduction instructions (with as minimal input data as possible)\r\n\r\nAlso, as this relates to a formula, please file future issues like this in https://github.com/homebrew/homebrew-core.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 51
	},
	{
		"id" : 208086228,
		"user" : {
			"login" : "unluisco"
		},
		"created_at" : "2016-04-10T22:36:45Z",
		"body" : "- What you were trying to do (and why):\r\n    - I have installed Node from Cakebrew, and the formula of node was updated, so I updated Node from Cakebrew, but whenever I update node, npm is broken.\r\n- What happened:\r\n    - I was going to look the list of the npm packages installed globally and just jumps me that error.\r\n- What you expected to happen:\r\n    - I expected the terminal to show me my packages installed.\r\n- Step-by-step reproduction instructions (with as minimal input data as possible):\r\n    - Install node from cakebrew (npm is included)\r\n    - Wait for a new version of node and update from cakebrew\r\n    - npm will break\r\n\r\nNote: However I CAN use my packages, only the npm commands are damaged.\r\nPreviously I installed node from the official site and runs easely npm",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 51
	},
	{
		"id" : 208131533,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-11T02:46:36Z",
		"body" : "Can you roll back Node to an earlier version and then execute the update _outside_ Cakebrew to see if this reproduces?\r\n\r\n```\r\ngit checkout be537884daa24a856e6f3a2da7bffb71719e90cd\r\nbrew rm node && brew install node\r\ngit checkout master\r\nbrew update\r\nbrew upgrade node\r\n```\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 51
	},
	{
		"id" : 208192774,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-11T07:08:53Z",
		"body" : "Also, can you please paste your `brew config` and `brew doctor` output in here?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 51
	},
	{
		"id" : 208407732,
		"user" : {
			"login" : "unluisco"
		},
		"created_at" : "2016-04-11T15:40:11Z",
		"body" : "@DomT4 in which directory should switch branch?\r\n\r\n- brew config\r\n\r\n```\r\n‚ûú brew config\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: 4a7cd160c31969b79979ae9bd20afcf82d9513c0\r\nLast commit: 7 hours ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 530b134420af9a419c38a4f2e1da2d13e18b16f9\r\nCore tap last commit: 3 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: quad-core 64-bit ivybridge\r\nOS X: 10.11.4-x86_64\r\nXcode: N/A\r\nCLT: 7.3.0.0.1.1457485338\r\nClang: 7.3 build 703\r\nX11: N/A\r\nSystem Ruby: 2.0.0-p648\r\nPerl: /usr/bin/perl\r\nPython: /usr/local/bin/python => /Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python\r\nRuby: /usr/bin/ruby => /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby\r\nJava: 1.8.0_60\r\n```\r\n\r\n- brew doctor\r\n\r\n```\r\n‚ûú brew doctor\r\nPlease note that these warnings are just used to help the Homebrew maintainers\r\nwith debugging if you file an issue. If everything you use Homebrew for is\r\nworking fine: please don't worry and just ignore them. Thanks!\r\n\r\nWarning: \"config\" scripts exist outside your system or Homebrew directories.\r\n`./configure` scripts often look for *-config scripts to determine if\r\nsoftware packages are installed, and what additional flags to use when\r\ncompiling and linking.\r\n\r\nHaving additional scripts in your path can confuse software installed via\r\nHomebrew if the config script overrides a system or Homebrew provided\r\nscript of the same name. We found the following \"config\" scripts:\r\n    /Library/Frameworks/Python.framework/Versions/2.7/bin/python-config\r\n    /Library/Frameworks/Python.framework/Versions/2.7/bin/python2-config\r\n    /Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7-config\r\n\r\nWarning: Python is installed at /Library/Frameworks/Python.framework\r\n\r\nHomebrew only supports building against the System-provided Python or a\r\nbrewed Python. In particular, Pythons installed to /Library can interfere\r\nwith other software installs.\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 51
	},
	{
		"id" : 213630744,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-23T00:00:24Z",
		"body" : "@DomT4 @mikemcquaid Ping? I'd like to help, but I have zero experience with `node`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 51
	},
	{
		"id" : 216553231,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:50:40Z",
		"body" : "> in which directory should switch branch?\r\n\r\n`cd /usr/local` and then do what @DomT4 suggested. For future issues, please submit them to https://github.com/homebrew/homebrew-core.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 51
	},
	{
		"id" : 221290925,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-24T14:35:09Z",
		"body" : "Closing as we haven't heard back from the issue author for quite a while. I'm happy to reopen once there's some activity and there's still an issue that needs to be addressed by Homebrew, but it currently looks like this is a user-specific problem.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 51
	},
	{
		"id" : 221294281,
		"user" : {
			"login" : "unluisco"
		},
		"created_at" : "2016-05-24T14:45:19Z",
		"body" : "does not seem to be only my problem, I solved following the gist guide: https://gist.github.com/DanHerbert/9520689",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 51
	},
	{
		"id" : 221298486,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-24T14:57:57Z",
		"body" : "It's potentially worth noting this patently isn't true:\r\n\r\n> Also, using the Homebrew installation of npm will require you to use sudo when installing global packages. Since one of the core ideas behind Homebrew is that apps can be installed without giving them root access, this is a bad idea.\r\n\r\nHomebrew's `npm` has no `sudo` problem and I've lost count of the amount of times I've told people to use `npm` without calling it with `sudo`.\r\n\r\nThe _vast majority_ of permission problems we've seen reported to Homebrew with `npm` is people  having used `sudo` in the first place and then wonder why a non-`sudo` process (whether that be Homebrew or another `npm` call) can't alter the now root-tarnished directories.\r\n\r\nIf anyone stumbles across this, I implore you to not mix & match `sudo` usage whilst using a Homebrew-installed `npm`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 51
	},
	{
		"id" : 207570102,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-08T19:30:22Z",
		"body" : "This indeed looks like a problem specific to your configuration, but it's hard to judge what might be the issue from the information you provided thus far. Please post the output of `brew config`, `brew doctor`, and `git -C /usr/local remote -v`. Do you remember making any changes to your global or user's `git` configuration that might be related to this in the time between when it last worked and now?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 52
	},
	{
		"id" : 207974363,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-10T12:12:47Z",
		"body" : "@holgerfuessler Did you manage to solve your problem?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 52
	},
	{
		"id" : 208554564,
		"user" : {
			"login" : "holgerfuessler"
		},
		"created_at" : "2016-04-11T20:45:05Z",
		"body" : "Apologees for the lag. It is not fixed.\r\n\r\n‚ûú  local git:(master) brew doctor\r\nYour system is ready to brew.\r\n\r\n‚ûú  local git:(master) brew config\r\nHOMEBREW_VERSION: 0.9.5\r\nORIGIN: https://github.com/Homebrew/homebrew\r\nHEAD: dfaab6907b4057320e78edacab03e99f71904178\r\nLast commit: 7 weeks ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: quad-core 64-bit haswell\r\nOS X: 10.11.4-x86_64\r\nXcode: 7.3\r\nCLT: N/A\r\nClang: 7.3 build 703\r\nX11: 2.7.8 => /opt/X11\r\nSystem Ruby: 2.0.0-p648\r\nPerl: /usr/bin/perl\r\nPython: /usr/local/bin/python => /usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/bin/python2.7\r\nRuby: /usr/local/bin/ruby => /usr/local/Cellar/ruby/2.3.0/bin/ruby\r\nJava: N/A\r\n\r\n‚ûú  local git:(master) git -C /usr/local remote -v\r\norigin\tgit@github.com:Homebrew/homebrew (fetch)\r\norigin\tgit@github.com:Homebrew/homebrew (push)\r\n\r\nI did a system upgrade 10.11.4 which - following the release notes - might have affected openssh.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 52
	},
	{
		"id" : 208557489,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-11T20:55:38Z",
		"body" : "There is some issue with your SSH setup. And you seem to be rewriting `https://github.com/` remotes to `git@github.com:` as can be seen from the last output. Please check your `~/.gitconfig` for a line similar to `insteadOf = https://github.com/` that you must have added at some point in time (or some tool did for you) to your configuration. Please comment that out by prefixing the line with `#` and try again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 52
	},
	{
		"id" : 208559044,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-11T21:01:16Z",
		"body" : "Just to make sure, can you post the output of `brew tap-info --installed`, to see if these are all `https` or `ssh` remotes?\r\n\r\nIf those tap remotes are `git@github.com:` links, then this may just happen: when you use ssh connections, and it wants to use your private key, `git` will pop up a dialog prompting for a passphrase the first time you use it. When `git` is run from inside `brew`, though, those dialogs don't happen and ssh key usage just fails (maybe because we're running `git` headless instead of attached to a tty). This happens to me sometimes, and you see error messages just like this.\r\n\r\nIf this is the case, you can work around it by manually switching in to one of the taps, or any other local GitHub clone using the same ssh identity, and do a `git update`. That'll produce the password prompt and store it for subsequent usage in your session, and `brew update` will be able to use it.\r\n\r\nOr switch all the taps back to `https` remotes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 52
	},
	{
		"id" : 208582731,
		"user" : {
			"login" : "holgerfuessler"
		},
		"created_at" : "2016-04-11T22:04:46Z",
		"body" : "Confusing. All looks to be https:\r\n\r\n‚ûú  local git:(master) brew tap-info --installed\r\ndart-lang/dart: unpinned, 1 formula\r\n/usr/local/Library/Taps/dart-lang/homebrew-dart (521 files, 257.6K)\r\nFrom: https://github.com/dart-lang/homebrew-dart\r\n\r\nhomebrew/boneyard: unpinned, 129 formulae, 8 commands\r\n/usr/local/Library/Taps/homebrew/homebrew-boneyard (205 files, 365.6K)\r\nFrom: https://github.com/Homebrew/homebrew-boneyard\r\n\r\nhomebrew/dupes: unpinned, 38 formulae\r\n/usr/local/Library/Taps/homebrew/homebrew-dupes (229 files, 242.5K)\r\nFrom: https://github.com/Homebrew/homebrew-dupes\r\n\r\nhomebrew/versions: unpinned, 265 formulae\r\n/usr/local/Library/Taps/homebrew/homebrew-versions (707 files, 2.6M)\r\nFrom: https://github.com/Homebrew/homebrew-versions\r\n\r\nhomebrew/x11: unpinned, 59 formulae\r\n/usr/local/Library/Taps/homebrew/homebrew-x11 (498 files, 935.4K)\r\nFrom: https://github.com/Homebrew/homebrew-x11\r\n‚ûú  local git:(master)\r\n\r\ncould you make an example for git update?\r\n\r\n  Cellar git:(master) git update\r\ngit: 'update' is not a git command. See 'git --help'.\r\n\r\nDid you mean this?\r\n\tupdate-ref",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 52
	},
	{
		"id" : 208591422,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-11T22:22:20Z",
		"body" : "That looks right to me too, all https. And `brew update` only pulls from `origin`, so other remotes defined on them shouldn't matter. Does `git fetch` work okay if you `cd` to them and run it directly instead of through `brew update`?\r\n\r\nOh: by `git update` I meant `git pull` or `git fetch`. Sorry. I get mixed up because I use `brew update` so much.\r\n\r\nCheck your .git config file like Martin suggests. And once you've removed any rewriting, try doing `brew update`, and if that doesn't work, manually report `origin` for your main Homebrew repo to `https://github.com/Homebrew/homebrew.git`. A `git remote set-url origin https://github.com/Homebrew/homebrew.git` should accomplish that.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 52
	},
	{
		"id" : 208595184,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-11T22:38:36Z",
		"body" : "*To maybe clarify a bit:* I think if you look at your `~/.gitconfig` you'll find a section that looks like this:\r\n\r\n```\r\n[url \"git@github.com:\"]\r\n        insteadOf = https://github.com/\r\n```\r\n\r\nThis has the effect of transparently rewriting all your GitHub HTTPS URLs to SSH. And this would explain why you see this behavior. This change to `~/.gitconfig` was either made by you or by some Git-related tool you have installed since you've last successfully ran `brew update`. Do you remember doing something like this in the past 7 weeks (that's when your last updated Homebrew)?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 52
	},
	{
		"id" : 208723612,
		"user" : {
			"login" : "holgerfuessler"
		},
		"created_at" : "2016-04-12T06:07:32Z",
		"body" : "Thank you guys.\r\n\r\ncommenting out\r\n #[url \"git@github.com:\"]\r\n # insteadOf = https://github.com/\r\n\r\nfixed it. I have literally no idea how this config made it into .gitconfig . As for tools, I am using gitup sometimes but mostly pure vanilla command line git.\r\n\r\nAgain, appreciate your help. Brewing again.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 52
	},
	{
		"id" : 231503627,
		"user" : {
			"login" : "BM5k"
		},
		"created_at" : "2016-07-09T00:41:42Z",
		"body" : "FWIW I've had \r\n\r\n```\r\n[url \"git@github.com:\"]\r\n\tinsteadOf = https://github.com/\r\n```\r\n\r\nIn my `~/.gitconfig` for ages and never had a problem until installing the 10.12 public beta.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 52
	},
	{
		"id" : 231512604,
		"user" : {
			"login" : "stuartcarnie"
		},
		"created_at" : "2016-07-09T03:36:57Z",
		"body" : "@BM5k I'm seeing the same issue",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 52
	},
	{
		"id" : 231513033,
		"user" : {
			"login" : "stuartcarnie"
		},
		"created_at" : "2016-07-09T03:48:18Z",
		"body" : "@BM5k figured it out for 10.12, which uses ssh-agent now (cool). Just \r\n\r\n`ssh-add ~/.ssh/<your rsa file>`\r\n\r\nAnd then you can `brew update`\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 52
	},
	{
		"id" : 207749381,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-09T08:55:03Z",
		"body" : "Are you aware of https://github.com/Homebrew/homebrew-dev-tools/blob/master/cmd/brew-boneyard.rb?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 53
	},
	{
		"id" : 207749570,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-09T08:59:25Z",
		"body" : "@UniqMartin Yes, they are similar. This is modeled on `bump-formula-pr` and opens the two pull requests. Also, it accesses the json properly, handles core and non-core formulae, and has a dry-run mode. Of course, I'm happy to close the PR if people prefer the other command instead.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 53
	},
	{
		"id" : 207765904,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-09T10:13:40Z",
		"body" : "> Of course, I'm happy to close the PR if people prefer the other command instead.\r\n\r\nThat's not what I was implying. This version seems to be much more feature-rich and complete. I just wanted to make you aware that something similar already exists. (Maybe it should be removed once this is merged, maybe it should be replaced with the code from this PR, maybe something else ‚Ä¶ just think about it, having both doesn't seem like the best solution to me.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 207767670,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-09T10:40:05Z",
		"body" : "I wonder if most of the duplication between dry-run mode and actual execution could be eliminated by something like `safe_system_or_ohai` (feel free to come up with a better name)? That should reduce the likelihood of those two modes getting out of sync.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 207771538,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T11:17:59Z",
		"body" : "I think this could probably be reworked a bit to share some code with `bump-formula-pr`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 209340161,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-13T09:41:21Z",
		"body" : "Thoughts on reorganizing `homebrew/boneyard` with a `Formula/` subdir while we're at it? https://github.com/Homebrew/homebrew-boneyard/pull/108. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 209340418,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-13T09:42:13Z",
		"body" : "I'd prefer if they were all consistently like that!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 216555644,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:58:21Z",
		"body" : "Any news on this @ilovezfs?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 219294505,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-15T16:07:14Z",
		"body" : "update: handles tap migrations for non-core taps",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 219298533,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-15T17:22:04Z",
		"body" : "@ilovezfs Feel free to üö¢ whenever you're happy. I still think it's probably worth some deduplication with `bump-formula-pr` but don't mind if that doesn't block this PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224224058,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-07T09:12:47Z",
		"body" : "I cannot decide if this is a feature or a bug, but it (of course) automatically corrected the order in the tap_migrations.json since judy was misplaced: https://github.com/Homebrew/homebrew-core/pull/1770/files",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224225772,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-07T09:19:51Z",
		"body" : "@ilovezfs Feature!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224344768,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-07T16:57:07Z",
		"body" : "Feature! Per https://github.com/Homebrew/brew/issues/331#issuecomment-224341097 it should also make sure to remove the `bottle do` block (if it exists) from the boneyarded formula. Just copying the file to the new repository is not sufficient.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224519540,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T08:12:53Z",
		"body" : "@UniqMartin I added bottle removal.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224577263,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-08T12:44:06Z",
		"body" : "I personally think this PR has long enough been in the making and I'm hugely in favor of üö¢ing it. The command is already useful as-is and can always be improved in follow-up PRs. Given that this is purely a developer-facing command, we don't have to be super careful about quality standards (though I think the current implementation already meets them easily).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224590302,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T13:35:18Z",
		"body" : "@UniqMartin PR refreshed. In the case of non-core taps it will read like this:\r\n```\r\ndelly: migrate from science\r\n```\r\n\r\nIs that what we want?\r\n\r\nOr should it be\r\n```\r\ndelly: migrate from homebrew/science\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224601082,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-08T14:10:29Z",
		"body" : "@ilovezfs I think we'll be only boneyarding formulae from the official taps, thus the `homebrew/` prefix seems unnecessary. I don't feel too strongly about this, but I think for consistency and simplicity we should be sticking to established procedures here.\r\n\r\nIf we expanded this to include the `homebrew/` prefix, the same would need to happen to the commit subject in the source tap, e.g. `delly: migrate to homebrew/boneyard`.\r\n\r\nIndependent of the exact formatting, I think it's a good thing to be able to immediately infer the source and destination of a moved formula from the commit subject. (Especially since the auto-generated PR body doesn't provide any cross-references, so it's harder to link the commits/PRs to each other.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224604391,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T14:21:05Z",
		"body" : "That's fine. Just wanted to make sure since \"migrate from science\" sounds a tad awkward to my ear.\r\n\r\n>Especially since the auto-generated PR body doesn't provide any cross-references\r\n\r\nWe could do that if it's desirable. The `hub` command outputs the URL of the new PR, so including a reference in whichever PR is opened second would be straightforward. Bidirectional references would be slightly more complex, but that would also be possible by doing\r\n1. boneyard tap's PR, no link\r\n2. original tap PR with boneyard PR link\r\n3. force push boneyard tap PR with original tap PR link\r\n\r\nsince force pushing to a PR in the boneyard tap doesn't retrigger any CI.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 53
	},
	{
		"id" : 224613555,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-08T14:49:16Z",
		"body" : "> We could do that if it's desirable.\r\n\r\nLet's not make things too complicated. I think the commit subject provides enough context to link the two commits and I don't see a need for embedding the PR references directly into the commit messages.\r\n\r\nMaybe just take the URL from the first `hub pull-request` and embed it in the PR body of the second `hub pull-request` like this:\r\n\r\n```ruby\r\nsafe_system \"hub\", \"pull-request\", \"-m\", <<-EOS.undent\r\n  \"#{formula.name}: migrate from #{formula.tap.repo}\r\n\r\n  Goes together with #{first_pull_request_url}.\r\n\r\n  Created with `brew boneyard-formula-pr`.\r\nEOS\r\n```\r\n\r\nThis is easy to do and creates a bidirectional connection between the two PRs.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224614319,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T14:51:40Z",
		"body" : "Sure, a link only in one of the two PR bodies and in none of the commit messages sounds fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224626974,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T15:30:49Z",
		"body" : "@UniqMartin PR refreshed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224636178,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T15:55:41Z",
		"body" : "@UniqMartin PR refreshed. Also, all instances of `\"homebrew/boneyard\"` have been replaced with `boneyard_tap.name`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224641602,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T16:10:16Z",
		"body" : "OK, also all instances of `formula.tap.path/\"tap_migrations.json\"` are now replaced with `tap_migrations_path`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224661105,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T17:10:36Z",
		"body" : "PR refreshed. Also, I added `--browse` to the second of the two `hub pull-request` invocations (just as `bump-formula-pr` does). The second will have the link to the first, so no need to do it for both of them.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224678817,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T18:09:34Z",
		"body" : "@UniqMartin PR refreshed. Same bug fixed lower down as well when it attempts to cd into that path.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224685927,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T18:33:31Z",
		"body" : "@UniqMartin updated to use relpath.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224693276,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-08T18:58:55Z",
		"body" : ":+1: Dry run output looks good to me and the (untested) actual code looks like it is in sync with that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224693596,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T19:00:01Z",
		"body" : "Now just need something to boneyard :smiling_imp: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224697499,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T19:14:14Z",
		"body" : "Yup, a bug!\r\n```\r\nGoes together with Homebrew/homebrew-core#1820.\r\n\r\nCreated with brew boneyard-formula-pr.\"\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224700854,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T19:27:07Z",
		"body" : "@UniqMartin OK these are with the current code:\r\nhttps://github.com/Homebrew/homebrew-boneyard/pull/128\r\nhttps://github.com/Homebrew/homebrew-core/pull/1821",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224701161,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-08T19:28:15Z",
		"body" : "> Yup, a bug!\r\n\r\nYou mean one missing full stop and one stray quotation mark?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224701477,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T19:29:27Z",
		"body" : "Yep, two bugs. I am deeply ashamed. :blush: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224715388,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T20:21:35Z",
		"body" : ":ship:'d\r\n\r\n@UniqMartin Thank you for your help with this!!!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 224733252,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-08T21:25:06Z",
		"body" : ":tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 53
	},
	{
		"id" : 207771500,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T11:17:00Z",
		"body" : "You can just use `brew audit --strict` and skip `--online` in this case. We don't plan to ever offer specific opt-outs for rules, sorry.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 54
	},
	{
		"id" : 207771747,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-09T11:21:49Z",
		"body" : "For your own purpose, you can try `export HOMEBREW_NO_GITHUB_API=1`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 54
	},
	{
		"id" : 207773319,
		"user" : {
			"login" : "kaos"
		},
		"created_at" : "2016-04-09T11:25:52Z",
		"body" : "Ah, thanks @xu-cheng that sounds like a nice option.\r\n\r\n@mikemcquaid my issue, I realize I didn't put clearly enough, was that I use `brew test-bot`, so was not in control of which options were being passed to `audit`.\r\n\r\nBut it may very well be that I could simply just use `brew audit` instead of the `test-bot`. Will have a go with that.\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 54
	},
	{
		"id" : 207774049,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T11:33:23Z",
		"body" : "@kaos I'd recommend continuing to use the `test-bot`. We would definitely accept a patch to disable e.g. `--online` or set that environment variable on the `test-bot` as we want that to be useful for project CI.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 54
	},
	{
		"id" : 207787168,
		"user" : {
			"login" : "kaos"
		},
		"created_at" : "2016-04-09T12:52:10Z",
		"body" : "@mikemcquaid This can be solved with documentation. The option suggested by @xu-cheng works wonders :)\r\n\r\nI had a new formula pass the audit step, with the `--online` check present.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 54
	},
	{
		"id" : 207776833,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T11:49:30Z",
		"body" : "Try to `cd /usr/local; git reset --hard origin/master; brew update`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 55
	},
	{
		"id" : 207777637,
		"user" : {
			"login" : "amitvirat"
		},
		"created_at" : "2016-04-09T11:54:42Z",
		"body" : "cool.. that helped.. thnQ Mike\n\n> On 09-Apr-2016, at 5:19 PM, Mike McQuaid <notifications@github.com> wrote:\n> \n> Try to cd /usr/local; git reset --hard origin/master; brew update.\n> \n> ‚Äî\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub <https://github.com/Homebrew/brew/issues/55#issuecomment-207776833>\n\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 55
	},
	{
		"id" : 207780425,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T12:03:24Z",
		"body" : "Glad it fixed it, thanks.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 55
	},
	{
		"id" : 207790367,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T13:37:37Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 56
	},
	{
		"id" : 207797156,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T14:39:04Z",
		"body" : "Updated:\r\n- Only official Homebrew commands are reported\r\n- Ruby analytics are now reported in a forked, background process",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 57
	},
	{
		"id" : 207799460,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T14:50:23Z",
		"body" : "Updated:\r\n- also whitelist `cask`, `bundle`, `services` commands.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 57
	},
	{
		"id" : 207819746,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-09T17:27:40Z",
		"body" : "I wonder if it's worth stapling the Google certificate chain to prevent certain classes of MITM attacks. https://src.chromium.org/viewvc/chrome/trunk/src/net/http/transport_security_state_static.json gives some insight into what Google promises for its properties.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 57
	},
	{
		"id" : 207822960,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-09T18:00:55Z",
		"body" : "@tdsmith Feels overkill to me but if you felt like making a PR I'd not oppose that.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 57
	},
	{
		"id" : 207997237,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-10T15:04:34Z",
		"body" : "Updated:\r\n- addressed all feedback\r\n- only log non-`/usr/local` prefix\r\n- don't run analytics during `brew tests`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 57
	},
	{
		"id" : 207998503,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-10T15:15:08Z",
		"body" : "Updated:\r\n- added Google Analytics screenshot\r\n\r\nI'll merge this as-is tomorrow unless there are any objections and open a new PR to :ship: this to all users.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 57
	},
	{
		"id" : 208085501,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-10T22:31:17Z",
		"body" : "> I'll merge this as-is tomorrow unless there are any objections [‚Ä¶]\r\n\r\nThis feels a bit like :gun: to me. I'd be grateful if more important changes like this one came with a bit more time for review, even if this further delays the change a day or two.\r\n\r\n> [‚Ä¶] and open a new PR to :ship: this to all users.\r\n\r\nI wonder if we can, before shipping, discuss the option of auto-disabling analytics for non-TTY use. It feels a bit weird to track stuff like `$(brew --prefix)` (in many shell init scripts) or `$(brew commands)` (in shell completion), that are run frequently and practically never represent an actual use of Homebrew. My feeling is that this would both improve acceptance of the analytics and make the numbers we gather more useful. Or am I missing some important use case where `stdout` is not a TTY and that we really want to track? (I'm happy to discuss this someplace else, as that's not something that blocks this PR.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 57
	},
	{
		"id" : 208092596,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-10T23:38:06Z",
		"body" : "Two other things that seem interesting:\r\n- Tracking options specified for formulas\r\n- Tracking CI or not-CI",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 57
	},
	{
		"id" : 208197890,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-11T07:23:24Z",
		"body" : "> This feels a bit like  to me. I'd be grateful if more important changes like this one came with a bit more time for review, even if this further delays the change a day or two.\r\n\r\nIf this was shipped to users I'd agree but I think given it's still an opt-in feature there's no reason we can't keep moving forwards on this and deal with feedback after merging. Point taken, though.\r\n\r\n> I wonder if we can, before shipping, discuss the option of auto-disabling analytics for non-TTY use. It feels a bit weird to track stuff like $(brew --prefix) (in many shell init scripts) or $(brew commands) (in shell completion), that are run frequently and practically never represent an actual use of Homebrew. My feeling is that this would both improve acceptance of the analytics and make the numbers we gather more useful. Or am I missing some important use case where stdout is not a TTY and that we really want to track? (I'm happy to discuss this someplace else, as that's not something that blocks this PR.)\r\n\r\nWe shouldn't track `$(brew --prefix)` as is because it's one of the things short-circuited by `brew.sh`. I'm open to blacklisting specific commands like `commands` but I'd rather avoid a `where stdout is not a TTY` blacklist as I can see that breaking any Homebrew wrappers that we'd want to know about.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 57
	},
	{
		"id" : 208198129,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-11T07:24:06Z",
		"body" : "> Tracking options specified for formulas\r\n\r\nAgreed. Will address this in the next PR.\r\n\r\n> Tracking CI or not-CI\r\n\r\nThis is done already; see `analytics_label`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 57
	},
	{
		"id" : 208240739,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-11T09:03:07Z",
		"body" : "Updated:\r\n- Added all requested style and documentation changes\r\n- Blacklisted `brew commands` command\r\n- Added non-default options tracking for formulae installs",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 57
	},
	{
		"id" : 208267510,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-11T10:11:52Z",
		"body" : "Updated:\r\n- Don't report any formulae names from private taps (will rely on https://github.com/Homebrew/brew/pull/67 being merged to be fast)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 57
	},
	{
		"id" : 208806673,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T09:10:54Z",
		"body" : "Updated based on feedback. Think this is good to :ship: along with https://github.com/Homebrew/brew/pull/67 now when they are both :green_heart:.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 57
	},
	{
		"id" : 207961515,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-10T11:10:38Z",
		"body" : "Seems like a good idea üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 58
	},
	{
		"id" : 208019564,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-04-10T17:16:18Z",
		"body" : "Would this execute readall on `homebrew/homebrew-core`, just because I tap some `foo/homebrew-bar`?  That seems like it would be a big lag.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 58
	},
	{
		"id" : 208020843,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-10T17:24:50Z",
		"body" : "No, just the tap itself. That functionality is already available today, if you do something like `brew readall homebrew/dupes -d` you'll see it only checks the `dupes` formulae.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 58
	},
	{
		"id" : 208046056,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-10T19:10:11Z",
		"body" : ":+1: Sounds like a really good idea. Sorry if I'm complicating things a little, but I wonder whether that should somehow deal with the possibility of a tap's formula becoming broken after a `brew update`?\r\n\r\n@DomT4 Glad I was able to remind you. :wink:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 58
	},
	{
		"id" : 216553397,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:51:13Z",
		"body" : "> Sorry if I'm complicating things a little, but I wonder whether that should somehow deal with the possibility of a tap's formula becoming broken after a brew update?\r\n\r\nThat also seems like a good idea as it's likely to happen.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 58
	},
	{
		"id" : 231541172,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-09T15:56:16Z",
		"body" : "Thanks @MikeMcQuaid! You went about it in a more comprehensive way than I initially planned, so possibly for the best I'd left it alone to date üòÑ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 58
	},
	{
		"id" : 208053709,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-10T19:59:33Z",
		"body" : "> In particular, this happens most frequently when flags other than the default are needed.\r\n\r\nThis is a difficult problem because we are unable to test all combinations of all formulas with all options. Formulas with fewer options are inherently less fragile.\r\n\r\nWe do test the default configurations where we have tests available. If the broken formulas lack tests, adding a `test do...` block that tests the default configuration will help the bot detect breakage and prevent us from pulling an incompatible update in the future.\r\n\r\nOf course, we do not want to break packages. I think there is not a generic solution but maybe you have some ideas.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 60
	},
	{
		"id" : 208065253,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-10T20:41:26Z",
		"body" : "As peculiar as it may sound, this is basically by design. If you need something more stable, I'd suggest maintaining your own tap with the working set of tools pegged to a particular version and backing up older bottles and build-time resources that you need. `brew deps` and `brew uses --recursive` are the commands to understand the scope of what you'd need to capture in such a tap.\r\n\r\nNote that you can also generate your own bottles using `install --build-bottle` + `brew bottle`. The `test-bot` command is helpful for this, but it roughly does this:\r\n```\r\n#!/bin/bash\r\nset -e\r\nbrew fetch --retry --build-bottle \"$1\"\r\nbrew install --only-dependencies --verbose --build-bottle \"$1\"\r\nbrew install --verbose --build-bottle \"$1\"\r\nset +e\r\nbrew audit \"$1\" --strict --online\r\nbrew style \"$1\"\r\nset -e\r\nbrew bottle --verbose --rb \"$1\"\r\nbrew bottle --merge --write --no-commit \"./$1\"*rb\r\nbrew uninstall -f \"$1\"\r\nbrew install \"./$1\"*gz\r\nmv \"$1\"*gz ~/Library/Caches/Homebrew\r\n\r\n```\r\nCf. https://github.com/Homebrew/homebrew-bundle/issues/162\r\n\r\n(Another option is to use virtualization and/or file-system level snapshotting).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 60
	},
	{
		"id" : 208066642,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-10T20:42:58Z",
		"body" : "Yeah, adding tests will help in some cases. And minimizing options in the first place will help.\r\n\r\nTL;DR: Add `test do` blocks to all your formulae so `test-bot` can test them when upgrading their dependencies. Probably would have caught those two breaks before they happened.\r\n\r\nDetails:\r\n\r\nThe Homebrew/homebrew-science#3454 `ceres-solver` breakage looks like it was a dylib version linkage problem. It didn't get caught first time around because `ceres-solver` did not have a `test do`. Adding a `test do`, even a basic one like `--version`, will generally be enough to catch dylib linkage problems for direct dependencies, because when we test a version bump PR, that includes testing all the bottled dependents. (At least the ones with direct dependencies.) For this kind of breakage, making sure all formulae have tests, even if they're trivial tests, will help. `brew audit` now requires a `test do` for all formulae, so we're making progress there.\r\n\r\nHomebrew/homebrew-science#3512 PCL doesn't have a `test do` in its formula either, so it's not being tested when its dependencies change. I can't tell from skimming that issue whether it was a dylib version problem or a different issue, but a test might have caught it.\r\n\r\nI'm not sure what happens in `test_bot` when testing a PR for `foo` and there's a testable `bar` with `depends_on \"foo\" => \"with-some-option\"`. For dependencies besides the tested formula, it will install the dependency with the option. But I'm not sure what happens when the dep is the formula under test. It probably should reinstall it with that option. It probably doesn't do it 100% correctly now: our dependency resolution isn't perfect, and it's something we're working to get more robust in the longer term.\r\n\r\nThe full solution of testing all combinations of options is prohibitively expensive. (Testing N options takes N or 2^N runs, depending on how thorough you are.)\r\n\r\nWe could do a smaller version where we just test the option combinations which are used in `depends_on xxx => \"with_foo\"` dependencies in the central taps. (And maybe we effectively already do, depending on how the test-bot dependency resolution works.) But even that could blow up the test bots: we're already pushing run time limits with larger formulae that have lots of dependencies, and that's where some of the dependencies with options happen. Could be helped by having test-bot examine the dependents and consolidate dependents that need options toward the end of the list, to avoid redundant builds. Calculating that could get hairy once indirect dependencies are considered, though.\r\n\r\nWe could also detect dylib versions by interrogating files with `otool` and storing that data for bottles some where. But that would introduce a whole new data set for `brew` to manage, and would be mostly redundant with `test do` blocks, which we want to encourage, and which can test more things. So I don't think we'd want to do that.\r\n\r\nThe best immediate approach is probably \"make sure all your formulae have `test`s\". I think that would have caught both of the issues you're referencing here.\r\n\r\nOpen to other suggestions. I may have blinders on for this issue since I'm so used to looking at `test-bot` throughput limitations.\r\n\r\n(EDIT: Note that this ability is currently limited because we're not using `uses --recursive` in the `test-bot`, for performance reasons. Open issue for it: https://github.com/Homebrew/legacy-homebrew/issues/50256)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 60
	},
	{
		"id" : 208069019,
		"user" : {
			"login" : "ahundt"
		},
		"created_at" : "2016-04-10T20:55:14Z",
		"body" : "@tdsmith Maybe it is possible to compile once with the default and once with all options? I know mutually exclusive options won't work there but it would probably eliminate a large subset of these problems while only requiring 1 additional continuous integration run.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 60
	},
	{
		"id" : 208069664,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-10T20:59:17Z",
		"body" : "A pull request implementing a `brew install --maximal-configuration foo` would be welcome for review.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 60
	},
	{
		"id" : 208071034,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-10T21:04:46Z",
		"body" : "@ahundt FYI https://github.com/Homebrew/legacy-homebrew/issues/49338#issuecomment-186445849 ;)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 60
	},
	{
		"id" : 208086421,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-10T22:40:02Z",
		"body" : "> A pull request implementing a brew install --maximal-configuration foo would be welcome for review.\r\n\r\nWould it? What's the goal here?\r\n\r\nReopened for now; I'm not sure the discussion is over.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 60
	},
	{
		"id" : 208086649,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-10T22:44:23Z",
		"body" : "> while only requiring 1 additional continuous integration run.\r\n\r\nI'm not sure doubling the CI load is acceptable either; we haven't found a way to move our CI infrastructure into the cloud and right now we aren't willing to invest in the capital costs or the maintenance burden of additional CI builders.\r\n\r\nWe could maybe do some heuristics about whether it looks like dylib names are likely to change, but that seems less effective than adding tests to formulas.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 60
	},
	{
		"id" : 208087325,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-10T22:55:32Z",
		"body" : "We would probably have to alter the formula DSL to express option conflicts, too, or explicitly specify `maximal_configuration` option sets in the formulae themselves. IIRC, there's a lot of formulae that have options or optional dependencies which conflict with each other (like openssl vs libressl). I'm not sure we'd want to do that.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 60
	},
	{
		"id" : 208101582,
		"user" : {
			"login" : "ahundt"
		},
		"created_at" : "2016-04-11T00:35:29Z",
		"body" : "maybe an \"advanced build\" command where the rb script can specify a second reasonable configuration to test with extra options set? that's something I'd know enough to submit pull requests for as an occasional, very minor contributor.\r\n\r\n@ilovezfs thanks for the link, I'd be sad if there were no options because I'd be back to compiling from source all the time... I'm using stuff like cuda and image tools. For one data point I'd say about 90% of the time I type `brew install` commands I run use options. I'm probably an unusual case though.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 60
	},
	{
		"id" : 208119780,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-11T02:07:05Z",
		"body" : "> Maybe it is possible to compile once with the default and once with all options?\r\n\r\nThere's no way this'll fly on Homebrew's current CI.\r\n\r\nIt's an outlier of an example but doing Qt5 _per option_ (which is the safest way to handle possible conflicting options) would take ~10 hours of CI time, per VM. You're talking 30 hours of CI time total, for a single formula. Doing it in a way where we do an initial run and then one with all options afterwards (potentially risking conflict) would still take upwards of ~4 hours per CI time, per VM.\r\n\r\nShort of someone providing Homebrew with a large enough donation to enable us to buy, run and maintain a significantly larger number of hardware we're limited on what we can reasonably do. We tried to farm out some of the CI load to Travis but have ended up pulling back on that for various reasons. CI is a struggle for us, and it chews up a lot of hours behind-the-scenes keeping it going.\r\n\r\nThe answer here to an extent is that people need to be careful which options are added and only add the ones with community demand and value. Every option added to an official Homebrew formulae is more or less a promise that we'll keep trying to support it, as removing options is always treated as more or less a last resort.\r\n\r\n> brew install --maximal-configuration foo\r\n\r\nFor reasons stated by others above and myself before I still consider this a \"fairly bad idea\" :tm:.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 60
	},
	{
		"id" : 208143158,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-04-11T03:15:03Z",
		"body" : "Options in Homebrew are inherently fragile, because the options are not tested by the test-bot, and the interactions between options are definitely not tested. Using any option basically puts you into uncharted territory. Within the current constraints of not testing options with CI, the only way to avoid breakage is not to use options. If there's an option that you use frequently, you could open an issue to discuss making that option the default behaviour for the formula, and then it would be tested by CI.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 60
	},
	{
		"id" : 208146361,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-11T03:25:49Z",
		"body" : "Increasingly we're asking the question if an option is popular/valuable enough to merit inclusion is it popular/valuable to merit being turned on by default. We haven't come up with a firm answer yet, but on a case-by-case basis it's worth considering.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 60
	},
	{
		"id" : 208182769,
		"user" : {
			"login" : "ahundt"
		},
		"created_at" : "2016-04-11T06:32:26Z",
		"body" : "@sjackman an \"advanced build\" option could reduce the surface area that is untested while keeping compile times lower than the full combinatorial explosion of possibilities.\r\n\r\nOr, perhaps more options should generally be included by default? I'd be happy to add some pull requests adding `:recommended` tags (or stronger) to the options I personally require that aren't on by default in homebrew-science and other formulae repositories for libraries like opencv, vtk, pcl, eigen, etc. Just have to look up how to do it right... wish I knew ruby better... :-)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 60
	},
	{
		"id" : 208195270,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-11T07:16:13Z",
		"body" : "> Options in Homebrew are inherently fragile, because the options are not tested by the test-bot, and the interactions between options are definitely not tested. Using any option basically puts you into uncharted territory.\r\n\r\nThis is a good point and options should be considered \"dangerous\" by anyone relying on CI to test formulae. Really, I think on most formulae they add more user pain than they save...\r\n\r\nCC @Homebrew/science here. This is a reason `brew audit` demands a `test do` block. Without one our reverse dependency testing is ineffective.\r\n\r\n> Or, perhaps more options should generally be included by default?\r\n\r\nI'm fairly keen to keep formulae's default options on the stuff that's useful for 99% of users. This has made me remember that we should be making a note with our new analytics of what options are used for formulae so we can consider making commonly used ones the default.\r\n\r\n> Just have to look up how to do it right... wish I knew ruby better... :-)\r\n\r\nYou'll learn. I'd never used Ruby before I started working on Homebrew and now I do Ruby development full-time :wink: \r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 60
	},
	{
		"id" : 208422163,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-04-11T15:59:32Z",
		"body" : "> CC @Homebrew/science here. This is a reason brew audit demands a test do block. Without one our reverse dependency testing is ineffective.\r\n\r\nYes tests are absolutely necessary. We insist on tests now, but there was a time when we didn't, and some formula haven't changed since that time. Currently 486/581 (84%) have tests.\r\n\r\n> You'll learn. I'd never used Ruby before I started working on Homebrew\r\n\r\nDitto. Homebrew was my first Ruby project as well. I quite like the language now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 208425843,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-04-11T16:03:53Z",
		"body" : "> Without one our reverse dependency testing is ineffective.\r\n\r\nI've wondered how this system works. If *app* depends on *lib*, and *lib* is rebuilt changing the dylib name (or soname), and the `test-bot` notices that *app* breaks, does it build a new bottle for *app*, and does `brew pull --bottle` change the bottles for both *lib* and *app*? I haven't seen breakage due to a changed dylib name in a long time, so I figured that there's some system in place, but I've never seen `brew pull --bottle` modify more than just the one formula being updated.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 208430243,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-11T16:13:26Z",
		"body" : "@sjackman A classic example are `poppler` version bumps (e.g. Homebrew/legacy-homebrew#50249). Tests for some dependent formulae will fail and if the OP doesn't notice/understand themselves, we ask them to bump the revision of those formulae, so they are rebuilt and rebottled in the same PR job.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 208443407,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-04-11T16:46:11Z",
		"body" : "Ah, I see. Thanks for the explanation. Do you modify the original formula and bump the revisions of the dependents all in the same commit?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 208448493,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-11T16:55:46Z",
		"body" : "Ideally one commit per formula bump, with the following style:\r\n```\r\n* poppler 0.43.0\r\n* diff-pdf: revision for poppler\r\n* pdf2htmlex: revision for poppler\r\n```\r\nAnd so on. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 208448521,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-11T16:55:50Z",
		"body" : "> Do you modify the original formula and bump the revisions of the dependents all in the same commit?\r\n\r\nWe haven't been entirely consistent with this, unfortunately. I think the preferred style is to have one commit per formula. But you can also find instances of\r\n\r\n- formula bump in one commit and revision bumps for affected dependents in a second commit\r\n- formula bump and revision bumps of affected dependents all in a single commit\r\n\r\nin the recent Git history of `homebrew/core`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 208568426,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-11T21:22:36Z",
		"body" : "@ahundt: Do you have a list of some other homebrew/science formulae which tend to get broken dependencies like this? It would be helpful to have some more concrete examples. And we can make sure they are testable so they're at least taking advantage of Homebrew's current QA process.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 209169529,
		"user" : {
			"login" : "skystrife"
		},
		"created_at" : "2016-04-13T00:53:27Z",
		"body" : "I think `icu4c` is another concrete example of this problem. See https://github.com/Homebrew/homebrew-php/issues/2544#issuecomment-208770839.\r\n\r\nWhile having the repos all separate is great for separation of concerns, it's a little troublesome to update a library in `homebrew-core` that other formulae depend on from other repos. In `icu4c`'s case, we've got dependants in `homebrew-php`, `homebrew-games`, `homebrew-science`, and `homebrew-core` itself.\r\n\r\nDealing with the `homebrew-core` dependents is easy: just ensure that the pull request also includes revision bumps for all formulae that have an explicit (non-optional) dependency on `icu4c`. The existing CI infrastructure works well to tell you if there are any formulae in `homebrew-core` that need to have their bottles remade (provided, of course, that they actually have tests defined. Let's just assume that they do for now, for the sake of argument).\r\n\r\nDealing with the other repos' dependents is harder. CI currently does detect the breaks in the other repos. While we can immediately issue pull requests on those repos as soon as the version bump is merged into `homebrew-core` (which is what I did for this `icu4c` version bump), there is still going to be a window of time where packages in the other repos will break because of the dependency version bump. (Only one of the two pull requests in the other repos has merged, so currently there are packages that are broken because they are looking for the older version of icu4c in `homebrew-games` and `homebrew-science`.)\r\n\r\nI'm not sure about the right way to solve this. One option would be to somehow coordinate between the repositories so that all of the library-version-bump-related PRs are merged (nearly) simultaneously. This seems hard to do, though, since unpredictable CI errors do happen (something builds just fine locally, but not on e.g. a different OS X version).\r\n\r\nAnother option would be to have the formulae that list `icu4c` as a dependency specify a specific version that they target. In theory, couldn't `brew` then detect that installing a newer `icu4c` formula would break the existing formulae installed on the system that have not been updated and either spout a warning or just outright bail from updating `icu4c` until they're ready?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 210193524,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-14T22:54:21Z",
		"body" : "> Do you modify the original formula and bump the revisions of the dependents all in the same commit?\r\n\r\nThe one vs many commits is more a stylistic issue. Regardless of how many commits it is, for formulae in the same repo, all the commits go in the same PR which is merged all-or-nothing, so they're tested and committed as a unit, and users will pick up all of them in the same `brew update`, so there's never a time when they are out of sync for a given Homebrew installation.\r\n\r\nBut for formulae in separate repos, skystrife hits it on the head:\r\n\r\n> While having the repos all separate is great for separation of concerns, it's a little troublesome to update a library in homebrew-core that other formulae depend on from other repos. \r\n> ...\r\n> While we can immediately issue pull requests on those repos as soon as the version bump is merged into homebrew-core (which is what I did for this icu4c version bump), there is still going to be a window of time where packages in the other repos will break because of the dependency version bump.\r\n\r\nWe do not have a mechanism for linking PRs across repos, testing them together, or making sure they get tested and deployed as a unit. So the current mechanism actually requires this out-of-sync window, because the PRs for dependent repos' revision bumps can only be run in CI *after* the version bumps to `core` are committed. (And since we only have 1 CI worker per OS, the PRs for multiple dependent repos must be serialized. And wait on whatever other CI traffic there is.)\r\n\r\nI don't know how to solve this currently. I think that \"coordinating between repositories\" would require adding some special metadata in PRs that `brew test-bot` recognized and used to test them as a unit. It's `brew test-bot`, not Jenkins code, which pulls in the formula PRs for testing, so that could be solved with custom Homebrew code, and not require GitHub and Jenkins to support it. But probably non-trivial.\r\n\r\nThe limiting factor here is again whether the dependent formulae are testable. Right now, that means having a `test do` block. So, no `test do` in a dependent, and we still wouldn't see the breakage reported in a test run. I don't have numbers to support this, but I suspect most of the dependency-version breakage users are actually encountering is probably due to lack of testing, and not repo synchronization. The sync breakage window is maybe an hour or so. The breakage window for a dependent that is missing a `test do` is until somebody notices it's broken, reports it, and gets a revision-bump PR through. And unfortunately it's probably going to be a user noticing it in this case. \r\n\r\nPerhaps we could also add an automatic dylib linkage test that's done regardless of whether a `test do` is defined: install the dependents, check each with `brew linkage`, and consider broken link references to be a test failure. That way all dependents, regardless of their `test do` definition, will have dylib version breakage caught.\r\n\r\nBoth of these are probably necessary to get to a \"perfect\" state, because they're independent sources of possible breakage. (Plus restoring `--recursive` to `brew uses`, or flattening all dependencies.)\r\n\r\n> couldn't brew then detect that installing a newer icu4c formula would break the existing formulae\r\n\r\nIIRC, `brew` actually does something like this already: it checks for dylib linkage, and if the old version of `icu4c` has installed formulae still linked to its versioned dylibs, it will not be uninstalled until those dependencies have been uninstalled. For Homebrew installations with existing formula installations, it's the removal of the old version, not installation of the new version, which breaks things.\r\n\r\nThis doesn't cover the case of keeping bottles in sync, though: the case that breaks more often is when you do a fresh installation of `icu4c` and some dependents. In that case, there's no prior installation for `brew` to hold on to for dylib linkage reasons.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 210194070,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-14T22:57:20Z",
		"body" : "That brings up another question, @ahundt: Are you seeing this breakage on systems where these things are already installed, and a `brew upgrade` breaks them? Or is it that sometimes when newly installing things, you end up with a broken installation?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 210397564,
		"user" : {
			"login" : "derrabus"
		},
		"created_at" : "2016-04-15T10:01:42Z",
		"body" : "@apjanke: If on a fresh system after the icu4c 56.1 bump you installed the php56-intl package, you received icu4c 56.1 as well as binaries for php56-intl that were compiled against icu4c 55.1. So yes, this applies to newly installing packages as well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 210476814,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-15T14:08:38Z",
		"body" : "Just a heads up that I have a massive brain dump that's going to be coming here when I write it up. Basically: yes, this is a problem and I have a proposed solution.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 210673733,
		"user" : {
			"login" : "ahundt"
		},
		"created_at" : "2016-04-15T22:49:23Z",
		"body" : "@apjanke it is a combination of both. let me think... I can't guarantee the examples will be perfect.\r\n\r\nAnother particular case is opencv2 vs opencv3 & 3.1. opencv3.1 broke with certain flags, I don't think that one was the fault of any dependencies, there it may have been best to stay on 3.0 until the bug was fixed (it is now working). https://github.com/Homebrew/homebrew-science/issues/3147 Thank goodness 2 and 3 have been permitted to both live in homebrew-science because I need to switch between them frequently. \r\n\r\nTesting of features based on flags could potentially broadly fit as well, though that gets a bit more complex. Here a python flag broke for opencv: https://github.com/Homebrew/homebrew-science/issues/2724\r\n\r\nThere are a few similar examples in linuxbrew, but based on earlier discussions that's considered out of scope here so I won't elaborate on those items.\r\n\r\n> We do not have a mechanism for linking PRs across repos, testing them together, or making sure they get tested and deployed as a unit. So the current mechanism actually requires this out-of-sync window, because the PRs for dependent repos' revision bumps can only be run in CI after the version bumps to core are committed.\r\n\r\nI've encountered this myself and I've had to manually update or revert some repos that I've written my own build scripts for in https://github.com/ahundt/homebrew-robotics. \r\n\r\n@mikemcquaid looking forward to that proposed solution! awesome to hear!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211078296,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-17T18:42:50Z",
		"body" : "I need to write up a better in-depth proposal but here's what I propose we start doing moving forward:\r\n\r\n1. @DomT4's cleanup of homebrew/versions goes ahead as planned but we do not accept new versions in there for any versions above those in core.\r\n2. We start moving libraries and system services (not end-user applications or GUIs) that have dependencies in the Homebrew org to being versioned on the next major upgrade. e.g. if Boost 2.0.0 was released tomorrow we'd make a `boost20` formula which is merged immediately without trying to upgrade anything that depends on `boost`.\r\n3. After the `boost20` formula is merged in a PR we create a new PR to change all dependencies that can be build with `boost20` from `boost` and rename the old formula to `boost15` and give `boost20` the `boost` alias. Anything that doesn't build with `boost20` doesn't block anything. \r\n4. At some point in the future if we're on e.g. `boost30` or something (having had `boost21` etc.) we remove any formulae from core that still depend on `boost15` and remove the `boost15` formula itself.\r\n\r\nThis may need to have some `revision`s applied and bottles rebuild in the process but this would be no worse than any current upgrade and paves the way for this to be smoother in future. This also may not even need to be done depending on how the linkage is found at runtime.\r\n\r\nThoughts? Concerns? I realise this is a big departure from Homebrew's previous versions support but I think we need to change due to concerns raised in this issue and also to provide people who want it a more stable base to say things like e.g. `install mysql 5.7 today but don't upgrade anyone to mysql 5.8` in `Brewfile`s.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211129262,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-17T23:41:11Z",
		"body" : "Appealing.\r\n\r\nVersioning the widely-used libraries in `core` like this is probably a good idea. That would fix the cross-tap decoupling synchronization issue without requiring special GitHub/Jenkins customization. And even within a single repo, it would be useful: by avoiding a single \"flag day\" where everything has to cut over, it would let the upgrades happen without waiting for every last dependent to fix compatibility, so users get the new stuff without waiting for the slowest-dev-cycle application. And it would let us safely split the revision bump updates in to multiple PRs, avoiding the worst 5+ hour test-bot scenarios, and making it easier for multiple authors to work on doing the upgrade work and testing (since PRs have a single owner/committer).\r\n\r\nI think I like this versioning approach better than my idea of adding cross-PR linkage at the PR and test-bot level, because it builds the associations in to Homebrew and formulae themselves, and not just into the GitHub-based workflow. Plus it would support a wider range of valid configurations.\r\n\r\nSome packages are kind of both libraries and applications, in that they install commands. `mysql` is probably a good example. How would we handle side-by-side installation of those? Would we version-suffix the command names, and switch those around when the new `mysql58` becomes the \"main\" installation? To do this, I think we do need to support side-by-side installation of all versioned variants of a formula.\r\n\r\nA big change here is that these formulae would only be available in versioned variants, instead of having the versioned variants supplement a main formula. For users who install it for direct use, e.g. with `brew install mysql`, a `brew upgrade` might no longer get them to the latest version of it, because that `mysql` would have been resolved to `mysql57` at install time. And that's probably not what they want. (That is, we need to remember whether the user did `brew install mysql` or `brew install mysql57`, and alias resolution lose that info, I think.)\r\n\r\n\"Virtual packages\" ‚Äì a formula that contains no files itself, but just has dependencies or references ‚Äì might fix this. (I think you and some other people have been down on them before as added complexity, but with this versioning change, the complexity might be justified.) `mysql` could be a virtual package instead of an alias, and it would contain or `depends_on` the \"current\" versioned `mysqlNN` variant. That way formulae could specify exact version dependencies, but a user could still request \"the latest mysql\" and have that keep up with new versioned formulae across `update; upgrade` cycles.\r\n\r\nCan a formula `depend_on` an alias? We should preserve back-compatibility for formulae in taps outside the central Homebrew ones.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211130058,
		"user" : {
			"login" : "ahundt"
		},
		"created_at" : "2016-04-17T23:44:25Z",
		"body" : "In addition to myself I've encountered a few others that have run into these exact problems. Perhaps adding multi revision support in single formulae, and particularly revision dependencies directly to formulas would help?\r\n\r\nForgiving my likely botched ruby syntax but perhaps versions could be something like  the following or another cleaner idea:\r\n\r\n```ruby\r\nurl \"https://github.com/jhu-cisst/cisst.git\", :tag => \"1.0.5\", :version => \"1.0.5\"\r\nurl1.0 \"https://github.com/jhu-cisst/cisst.git\", :tag => \"1.0\", :version => \"1.0.0\"\r\n```\r\ndependencies could be something like:\r\n\r\n```ruby\r\ndepends_on \"opencv\",  :version => \"3.0\"\r\n```\r\n\r\n\r\nI generally deal with packages with a deep tree of dependencies which substantially increases the chance of breakage as it grows. I sometimes also work with ROS (robot operating system) infrastructure which is in the same situation. I personally know at least 4 other users that have encountered these issues and I've seen posts from several others I don't personally know.\r\n\r\nHere are some posts where these types of problems are mentioned by others:\r\n\r\n#### [VTK dep issue that led to this feature request](https://github.com/mikepurvis/ros-install-osx/issues/32)\r\n\r\nThis is the original issue for which I created this, there are comments about this type of problem by other users there.\r\n\r\n#### [Breakage when tools depend on brew (rosdep)](https://github.com/ros-infrastructure/rosdep/issues/444) \r\n\r\nI created the issue, other brew users are discussing how to handle the problem. For example:\r\n\r\n>  @mikepurvis [april 17](https://github.com/ros-infrastructure/rosdep/issues/444#issuecomment-211107330)\r\n> I'm curious to know how other rolling release systems like Arch deal with this kind of thing. Homebrew is always on the bleeding edge of everything, which basically guarantees some level of brokenness, at least as far as new major versions with breaking changes. That said, a disproportionate number of issues seem to come up around bottled versions of things with baked-in paths to their dependencies, that then go stale when those depended-upon packages move on‚Äî we've seen this with Python, VTK, PCL, CMake, and probably others. It feels like there's a fundamental issue there with Homebrew, that it should have a dependency type for \"rebottle when this dependency updates\".\r\n> \r\n> In any case, if upstream Homebrew can't commit to a satisfactory level of stability across the rather large base of packages upon which we depend, then I don't see much choice other than to maintain at least some of the system in taps. Random assorted thoughts on this direction:\r\n> \r\n> Unless we are also committed to bottling stuff, the cost to users of building big dependencies like VTK and PCL locally is pretty big‚Äî my understanding is that bottling is not hard; you just have to set it up.\r\n> Certain dependencies (CMake, Python) are not realistic to maintain in taps due to the weirdness of a system with multiple versions of these things.\r\n> It may be possible to build some light Travis-based tooling to provide notification of upstream formulae changes, so we can hopefully mitigate a bit the issue of stuff falling behind.\r\n> Maintaining any of this will be nightmare without regular CI builds across the supported OS X versions. I know OSRF had expressed interest last year in doing some of this around ros-install-osx, but it didn't seem to go anywhere.\r\n\r\n#### [comments on duplicating formula for versions](https://groups.google.com/d/msg/ros-sig-ng-ros/FjypP8jLj_w/lzMGl1gDBwAJ)\r\n\r\n>Steven Peters \tApr 16\r\n>\r\n>It is indeed very easy to set up your own homebrew tap to host your own custom packages. It's harder, though, to put version constraints on dependencies (for example requiring an older version of boost). The current state-of-the-art is to create a duplicate formula (such as boost155) typically hosted in homebrew/duplicates. I don't consider this a very elegant approach.\r\n>\r\n>It is true that they allow customizable builds (such as --double-precision for bullet), and you can declare these options in your dependencies (gazebo requests that double-precision option from bullet). Using that example, if you install gazebo and bullet is not installed, it will install bullet with the requested options. If bullet is already installed, however, it won't check whether it has the desired configuration, it will just use it.\r\n>\r\n>Don't get me wrong, I love homebrew very much. I just think it's not trying to do everything that debian does, so it's important to keep that in mind.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211151468,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-18T01:43:10Z",
		"body" : "We can also have test-bot do dylib checking now for all dependents, not just those with a `test do` block. Here's a PR to do so: #107.\r\n\r\nIn my [test run](https://gist.github.com/apjanke/77f7e593c922a58408bdc1f92964bcec), it catches breakage in some of `icu4c`'s dependents which was not previously caught. If we merge this, that will show up at the PR stage, before it gets pushed.\r\n\r\n```\r\n\r\n==> brew linkage --test gptfdisk\r\nNo broken dylib links\r\n==> brew linkage --test libfolia\r\nBroken dylib links:\r\n  /usr/local/opt/icu4c/lib/libicudata.56.1.dylib\r\n  /usr/local/opt/icu4c/lib/libicui18n.56.dylib\r\n  /usr/local/opt/icu4c/lib/libicuio.56.dylib\r\n  /usr/local/opt/icu4c/lib/libicuuc.56.dylib\r\n==> FAILED\r\n==> brew linkage --test ucto\r\nBroken dylib links:\r\n  /usr/local/opt/icu4c/lib/libicudata.56.1.dylib\r\n  /usr/local/opt/icu4c/lib/libicui18n.56.dylib\r\n  /usr/local/opt/icu4c/lib/libicuio.56.dylib\r\n  /usr/local/opt/icu4c/lib/libicuuc.56.dylib\r\n==> FAILED\r\n```\r\n\r\nIt doesn't fix the cross-repo decoupling: bumping the revisions for these would need to be manually managed across multiple PRs. And the main PR would never go green. But at least now you'd have a programmatically-generated list of the things to bump, and it doesn't require `test do` to make it happen.\r\n\r\nIndirect dependencies across taps are also not picked up since we're not doing `uses --recursive`, and the main PR would never be iterated to include the revision bumps for the intermediate dependencies. Most indirect dependencies within a single repo *will* be caught, because iterating the PR to revision bump direct dependents with breakage will expand the list of formulae changed in the PR, pulling in more formulae as direct dependents of the PR's scope, and eventually getting to a transitive closure, as long as each formulae actually has a dylib link to its dependent, not just a command other runtime dependency.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211241083,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T07:22:35Z",
		"body" : "Sorry, submitted too early:\r\n\r\n> Some packages are kind of both libraries and applications, in that they install commands. mysql is probably a good example. How would we handle side-by-side installation of those? Would we version-suffix the command names, and switch those around when the new mysql58 becomes the \"main\" installation? To do this, I think we do need to support side-by-side installation of all versioned variants of a formula.\r\n\r\nI think side-by-side installation is a good goal but keg-only gives us a bit of a hammer we can use to get around it in the short-term. For `mysql` I see us suffixing the binary names and data directories but probably not e.g. ports.\r\n\r\n> A big change here is that these formulae would only be available in versioned variants, instead of having the versioned variants supplement a main formula. For users who install it for direct use, e.g. with brew install mysql, a brew upgrade might no longer get them to the latest version of it, because that mysql would have been resolved to mysql57 at install time. And that's probably not what they want. (That is, we need to remember whether the user did brew install mysql or brew install mysql57, and alias resolution lose that info, I think.)\r\n\r\nYeh, we'd probably need a little be of syntactical sugar on top to handle this case of someone installing from an alias. I think this is the only code that _needs_ to be written.\r\n\r\n> \"Virtual packages\" ‚Äì a formula that contains no files itself, but just has dependencies or references ‚Äì might fix this. (I think you and some other people have been down on them before as added complexity, but with this versioning change, the complexity might be justified.) mysql could be a virtual package instead of an alias, and it would contain or depends_on the \"current\" versioned mysqlNN variant. That way formulae could specify exact version dependencies, but a user could still request \"the latest mysql\" and have that keep up with new versioned formulae across update; upgrade cycles.\r\n\r\nI kinda hate virtual packages. They smell bad to me as a formula file but we could introduce some other element that would allow them. Aliases may be sufficient here but we may want to introduce another directory for versioned aliases whilst relying on the same underlying technology.\r\n\r\n> Can a formula depend_on an alias? We should preserve back-compatibility for formulae in taps outside the central Homebrew ones.\r\n\r\nThey can, yes.\r\n\r\n> In any case, if upstream Homebrew can't commit to a satisfactory level of stability across the rather large base of packages upon which we depend, then I don't see much choice other than to maintain at least some of the system in taps.\r\n\r\n@mikepurvis Homebrew relies on internal and upstream stability rather than external stability. That is:\r\n\r\n- We do not install upstream development versions or snapshots as stable versions\r\n- We ensure that within Homebrew/homebrew-core we do not break things when we bump versions\r\n\r\nWe do not provided guaranteed stable versions so you can \"sit on\" a particular version of software indefinitely. I'd like us to provide that guarantee for libraries and some service applications based on major/minor (not patch) semver but if you need more than that: I doubt we'll be able to provide it, unfortunately.\r\n\r\n> If bullet is already installed, however, it won't check whether it has the desired configuration, it will just use it.\r\n\r\n@scpeters This is not accurate, it will be reinstalled if you request an option it was not built with.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211492979,
		"user" : {
			"login" : "mikepurvis"
		},
		"created_at" : "2016-04-18T17:39:34Z",
		"body" : "There's one issue I've seen a number of times that I'm not certain would be caught by additional homebrew test blocks‚Äî that is where a build captures paths from things on which it depends, and then generates a pkgconfig or CMake find module with those paths baked-in. All of this works at build/test time; the errors emerge when something then _depends_ on that package, and finds that paths from the supplied XX_INCLUDE_DIRS variables (or whatever) no longer exist. Example:\r\n\r\nhttps://github.com/PointCloudLibrary/pcl/blob/456bf44205ac7ed09b2754e2062d08a1a7fbed53/PCLConfig.cmake.in#L457\r\n\r\nOn the one hand, this is an anti-pattern, and the ideal would be to fix it upstream, but I feel like it happens often enough with ROS stuff that it would be great if Homebrew had some way of stamping bottles for \"I have a hard dependency on ver X of Y; when that changes, I need to have my revision bumped.\"",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211501598,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-04-18T17:54:30Z",
		"body" : "@mikemcquaid you are right! I apologize for the uninformed statement. I thought I had seen that behavior once in the past, but it obviously works correctly now, which is the important thing.\r\n\r\nI just tested a corollary though: if I install `bullet --with-double-precision` and then install `efl` (which depends on bullet without specified options), it will not complain. I don't know if it is actually a problem in this case, but I imagine it could be (which is often the hallmark of a distraction, not an important problem). I just wanted to mention it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211524515,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T18:51:12Z",
		"body" : "@mikepurvis That would be broken with a sufficient `test do` as that's going to be testing the new version without the old one present for all bottled reverse dependencies.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211530763,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-04-18T19:01:57Z",
		"body" : "Regarding @mikemcquaid's proposal about versioning, it would be nice to see versioning become an official feature and not just part of a tap. I've maintained multiple versions of several formulae in the `osrf/simulation` tap for a while, so here's some thoughts I've built up:\r\n\r\n* If there is a downstream package that can handle multiple versions of a formula, how could this be encoded (minimum version, maximum version, list of valid versions)?\r\n\r\n* Should versioned formulae inherit from a parent formula? Could this reduce duplicate formula code?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211533489,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T19:06:00Z",
		"body" : "> If there is a downstream package that can handle multiple versions of a formula, how could this be encoded (minimum version, maximum version, list of valid versions)?\r\n\r\nI explicitly don't think we should support this. It's got no real purpose and makes it incredibly hard to support software.\r\n\r\n> Should versioned formulae inherit from a parent formula? Could this reduce duplicate formula code?\r\n\r\nThis would reduce duplication but would massively hard readability. I think it's worth just duplicating formulae for versions, as we do currently.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211539652,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-04-18T19:24:22Z",
		"body" : "Let me say it a different way then: if you have a formula that can handle multiple versions of a dependency (say anything greater than boost 1.53) and there is another package that requires a specific version (say boost 1.55), would they fight over which version of boost to install? Boost 1.55 is fine for both, but there's currently no way to encode that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211547727,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T19:46:42Z",
		"body" : "@scpeters In that case the formula should depend on whatever is the newest version of `boost` it supports.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211550877,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-04-18T19:58:16Z",
		"body" : "@mikemcquaid thanks for the clarification. What would happen when trying to install both packages at the same time? Would the older version of boost be installed as keg-only for the sake of the package that requires it?\r\n\r\nAlso, if there was a 3rd package that depended on packages that have varying support for the latest versions of boost, they might run into a conflict.\r\n\r\n~~~\r\nA: depends on boost (latest)\r\nB: depends on boost155 (newest feasible version)\r\nC: depends on A, B\r\n~~~\r\n\r\nWould the same version of boost be used when installing `C`? Seems like if the boost versions are different that there could be linking errors.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211552827,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T20:04:38Z",
		"body" : "@scpeters They would both be installed either side-by-side or keg-only depending on conflicts and if we're able to resolve them.\r\n\r\nIn that case it'd be up to the author of C to resolve the issue. Currently that formula would not work at all or have the same problem with homebrew/versions. I'd rather focus on known issues with formulae rather than speculative issues; we can always iterated and improve any approach we take.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211558265,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-04-18T20:18:50Z",
		"body" : "Since `boost155` is installed `:keg_only`, I don't seen any problem with the above situation. *C* shouldn't see an issue. It has no direct dependency on `boost`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211599634,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-04-18T22:01:42Z",
		"body" : "Thanks for the responses. I spend a big part of my time maintaining software for Ubuntu/debian, which define distributions with specific versions of each package, which is a different model than homebrew, which generally uses the latest version of everything. In my head, the example about packages A,B,C seemed relevant, but maybe it's more relevant to the Ubuntu/debian model.\r\n\r\nI'll see if I can think of a concrete example for which it would impact homebrew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 211771822,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-19T07:30:20Z",
		"body" : "@scpeters At this point it's probably worth critiquing implementations rather than theory so let's hold off until we have that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 216371706,
		"user" : {
			"login" : "ahundt"
		},
		"created_at" : "2016-05-02T21:35:57Z",
		"body" : "Sorry for my lack of responses, I've been traveling the last two weeks. I like the ideas that have been discussed, is there something that can be put into effect?\r\n\r\n@mikemcquaid I've actually encountered the \"theoretical\" problem mentioned by @scpeters in real use cases. Particularly with libraries that support OpenCV 2.x vs OpenCV 3.x, vtk 5 vs 6 and 6 vs 7, Qt 4.x vs Qt 5.x, and a variety of boost versions, particularly around the introduction of new boost libraries (boost.geometry in my case) between 1.4x and 1.5x, and compilation of libraries during the transition between cmake versions 2.8.x with x<10 to 3.x. I don't think this situation is uncommon as different libraries take different amounts of time to support newer versions of their dependencies, particularly widely used ones. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 216375928,
		"user" : {
			"login" : "ahundt"
		},
		"created_at" : "2016-05-02T21:53:53Z",
		"body" : "Regarding https://github.com/Homebrew/brew/issues/62 where I'd sometimes like to remap dependencies, could there be a command line command like `brew install mypackage --override-dep boost ahundt/boost155`. If we can't automate the solution perhaps something like that may allow workarounds to be effective with less effort.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 216432139,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T04:22:42Z",
		"body" : "A couple of the smaller ones are now in effect.\r\n\r\n* We're now [checking all formulae for broken dylib linkage](https://github.com/Homebrew/brew/pull/107), not just testable ones. So we can catch in-tap dependencies that need revision bumps that were overlooked by PR submitters. We don't have the resources to run this cross-tap at this point, though.\r\n* I [rearranged the `brew audit` output format](https://github.com/Homebrew/brew/pull/112) to work better when auditing large batches of formulae, like `brew audit --strict a*.rb`. We can use this to go through `homebrew/science` to clean up formulae and add missing tests, making more of them testable so they get covered by `test-bot` when there are changes. This should catch some additional breakage. I'll be doing this as I have time over the next couple weeks, and other contributors with free time can as well. The test bot queues are fast enough now that I think we're okay to take audit-fix-only PRs, and we're always happy accepting PRs that add `test do`s to formulae that lack them.\r\n * And if we get enough of them testable, we can take a pass at running `brew test-bot` on all of them (on home machines, not the CI farm). Could get us to a more stable baseline.\r\n\r\nDon't know about the others. And this thread has gotten long enough that I've kind of lost track of all the items which were proposed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 216465152,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T08:16:31Z",
		"body" : "> Regarding #62 where I'd sometimes like to remap dependencies, could there be a command line command like brew install mypackage --override-dep boost ahundt/boost155. If we can't automate the solution perhaps something like that may allow workarounds to be effective with less effort.\r\n\r\nI can 100% guarantee we won't support something like that that will make things extremely hard to debug.\r\n\r\n> I don't think this situation is uncommon as different libraries take different amounts of time to support newer versions of their dependencies, particularly widely used ones.\r\n\r\nI think in this case it's on the packager to avoid such conflicts.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 216687487,
		"user" : {
			"login" : "ahundt"
		},
		"created_at" : "2016-05-03T22:45:27Z",
		"body" : "@apjanke I tried to add a [summary of proposals and additional problems to the very top of this](https://github.com/Homebrew/brew/issues/60#issuecomment-211078296). here is the tl;dr\r\n\r\n# tl;dr\r\n\r\n## Key problems\r\n\r\n1. Package A is updated from 1.0 to 2.0, breaking package B which depends on A 1.0.\r\n    - breakage is not always detected\r\n      - Example: ceres depends on an exact version of eigen (a simple bottle refresh could fix it)\r\n    - breakage can't always be fixed\r\n      - B may not support A 2.0 until its next release a month from now\r\n2. Package B,C depend on different versions of package A. Package D depends on both B, C. (other variations on this theme exist)\r\n3. Options sometimes break invisibly\r\n\r\n## Solutions with most backing\r\n\r\nThese are reasonably easy, well liked ideas that will mitigate (but may not completely solve) the above\r\n\r\n- allow a limited set of versions into homebrew supported taps with an aliasing mechanism for the latest version so dependent libraries can have a soft landing until they support new versions\r\n- define criteria for accepting requests/proposals to make certain options recommended by default",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 217395794,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T09:26:36Z",
		"body" : "> Package B,C depend on different versions of package A. Package D depends on both B, C and sometimes A. (other variations on this theme exist)\r\n\r\nI don't actually think this is a problem; it's something that blocks package D from being packaged in pretty much any package manager and is a problem with their development process.\r\n\r\nOtherwise: yeh, I agree üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 217783531,
		"user" : {
			"login" : "CamJN"
		},
		"created_at" : "2016-05-09T06:13:10Z",
		"body" : "I just stumbled across this issue and I have been frustrated with version incompatibilities before (reverting QT5.6 to 5.5 for the capybara-webkit gem was annoying and isn't going to be fixed so now qt5 has to be pinned forever, and I can never build anything that requires QT5.6+ at build time without remembering to install the new version and then switch the links back when I'm done so that the next time I bundle update everything's not broken again). \r\n\r\nHowever I'd rather deal with that migraine than this bit: `For mysql I see us suffixing the binary names and data directories but probably not e.g. ports.` Breaking the data directory for a database across versions? Where does the data actually live? Is the data migrated forward with each upgrade? Even major upgrades? But what if something depends on the old db version (the whole point), do you have to create a cluster from all versions and sync the data constantly? Because that often isn't possible across DB versions (every database I've ever used has done this at one point or another; opentsdb/influx/mysql/postgres just recently). If you want to avoid a huge support nightmare I'd steer away from that idea hard. It's already hard enough to talk to the postgres/mysql people because homebrew's not a blessed/supported config so they can just point at that and not help.\r\n\r\nI think there's a lot of good that could come from versioning some libraries but please please please don't do it to the databases.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 217789289,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-09T06:56:53Z",
		"body" : "> I think there's a lot of good that could come from versioning some libraries but please please please don't do it to the databases.\r\n\r\nWe will version databases in some form, just not sure what that will be yet. As a counterpoint under the current system if you have MySQL 5.6 data and upgrade to 5.7 temporarily then getting your data 5.6 compatible again is a non-trivial process.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 217985606,
		"user" : {
			"login" : "ahundt"
		},
		"created_at" : "2016-05-09T20:50:49Z",
		"body" : ">> Package B,C depend on different versions of package A. Package D depends on both B, C and sometimes A. (other variations on this theme exist)\r\n\r\n> I don't actually think this is a problem; it's something that blocks package D from being packaged in pretty much any package manager and is a problem with their development process.\r\n\r\nYou're right. Thinking about it more, I guess I mostly run into this when adding new dependencies which supply new functionality to software I'm developing myself, or when porting software from another OS or package management system like ubuntu. I guess I was just thinking of \"things that would be nice to avoid\" and not \"things a package manager can actually do anything about\", haha.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 218414197,
		"user" : {
			"login" : "geoff-codes"
		},
		"created_at" : "2016-05-11T09:55:00Z",
		"body" : "> Thinking about it more, I guess I mostly run into this when adding new dependencies which supply new functionality to software I'm developing myself ...\r\n\r\nI'm probably going to catch some shit for even mentioning this, but for several years now I've been using a personal fork of homebrew which does not use dynamic linkage at all. Its a pretty simple hack, just replacing every instance of `\"./configure\"` with `./configure --disable-shared --enable-static --with-pic` for autotools-based formulae, and adding `-DBUILD_SHARED_LIBS=0` to `\"cmake\"` for cmake-based based formulae.\r\n\r\n This (obviously) takes care of this issue (and most other linkage headaches) for 95% of the formulae _I use_, and (in most likelihood) at least half of all formulae in general. For the rest I use `--interactive` to eliminate dynamic linkage manually.\r\n\r\nThere are _so_ many reasons to do this, the most important of which, for me, as I'm developing my own software, is to avoid [things like this](https://en.wikipedia.org/wiki/GNU_Readline#Choice_of_the_GPL_as_GNU_Readline.27s_license); but when developing an app/program that will be distributed in binary form, I actually don't really understand how anyone would be able to use homebrew **without** doing something like this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 218414534,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-11T09:56:38Z",
		"body" : "@geoff-codes The opposite: I'm pretty interested in learning more about that and what it would take to make your fork a bit easier.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 218430136,
		"user" : {
			"login" : "geoff-codes"
		},
		"created_at" : "2016-05-11T11:15:03Z",
		"body" : "Oh!\r\n\r\nIn the past I've had several unpleasant run-ins with some homebrew maintainers who vociferously advocated for dynamically linking as much as possible (that issue I linked above doesn't address this exact idea per se, but I trust you can gather my meaning). I have thus largely avoided proposing _anything_ related to what is now the \"brew\" repo, for some time now. I have even avoided putting anything in a public fork: my worry was someone might come across it, adopt it, and suddenly a few weeks I'd be maintaining a fork to which the upstream maintainers were diametrically opposed.\r\n\r\nBut I know there's been a significant \"changing of the guard\" since that period, so, if you're serious:\r\n\r\n---\r\n\r\nThere are actually several \"side-advantages\" of doing this as well, namely,\r\n-  _Many, many_ formulae that are now either keg-only or in  `-dupes` no longer need be so, because there is no issue any with library paths or such nonsense, nor worries about ABI compatibility with system libraries. I actually usually intentionally shadow some system libraries. For example, I can (and do) use the [newer, and significantly faster](http://opensource.apple.com/source/bzip2/bzip2-38/bzip2/arm64/crc32vec.s) whilst also being able to target older SDKs (I usually build against 10.7). And I even have fully-linked, non-sequestered *libiconv* installed, _believe it or not_ üòà.\r\n\r\nI get faster code and great compatibility across systems. All it costs me is a few kb's in my executables.\r\n\r\n- It also makes a homebrew install _almost_ completely portable between directories and systems. I don't having to worry about `instal_name_tool -change`ing thousands of executables and libraries. I have an expanded `brew` script that basically:\r\n    1. Caches its own location, and checks to make sure it hasn't been moved since the last invocation.\r\n    2. If it detects a move, it 'grep-and-sed's any references to the location that exist in text files (we're basically only talking about `.pc` files, then reinstalls openssl, which is one a small handful of formulae that hardcode their absolute paths within the binaries themselves.\r\n\r\n- It also makes cross-platform compatibility significantly less painful. I use the same basic principal (and a lot of the same code) with a **very** modified `linuxbrew` that produces binaries and libraries that are largely interchangeable between distros.\r\n\r\nPresently, the code I have is pretty crude, and mostly consists of shell scripts that copy formulae to a temporary directory, 'grep-and-sed's as appropriate; then installs the formula using a `file://` URI.\r\n\r\nSo, if indeed this is something you'd want to consider experimenting with, I'd be happy to clean it all up and implement it in Ruby for something you could pull into a topic branch...?\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 218510384,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-05-11T16:16:57Z",
		"body" : "> with a very modified linuxbrew that produces binaries and libraries that are largely interchangeable between distros.\r\n\r\nLinuxbrew bottles can run on any distro. The bottles target `glibc` 2.19 and `gcc` 4.8. If the host's versions are older than this, it seamlessly installs the Linuxbrew `glibc` and `gcc`, which takes about five minutes, since `gcc` is bottled. I think your goal however is to distribute your compiled executables outside of Linuxbrew?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 218511169,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-05-11T16:19:19Z",
		"body" : "As an alternative to static linking, you can copy all the shared executables that an executable depends upon into its `libexec` directory and put that directory first in its `RPATH`. I prefer that solution to static linking myself.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 218514689,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-05-11T16:31:31Z",
		"body" : "If the executable is installed in `‚Ä¶/bin` and its libraries in `‚Ä¶/libexec` and you set the `RPATH` to `$ORIGIN/../libexec`, the executable is relocatable without needing to fix up the executable using `patchelf`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 218520766,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-05-11T16:53:25Z",
		"body" : "@geoff-codes the static linking idea sounds to me a bit like Ubuntu snappy, which I think is great for leaf applications. If you want to build a framework to use in other applications, my impression is that static linking would be less helpful. I wonder what percentage of homebrew installs are for leaf applications vs. frameworks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 218575567,
		"user" : {
			"login" : "geoff-codes"
		},
		"created_at" : "2016-05-11T20:11:54Z",
		"body" : "@sjackman \r\n> I think your goal however is to distribute your compiled executables outside of Linuxbrew?\r\n\r\nIt's both. That is, one goal is to be able to compile executables that can be distributed completely outside/without brew, while still being able to use brew handle building libraries, dependencies, as well as building utilities, toolchain, etc.\r\n\r\n> As an alternative to static linking, you can copy all the shared executables that an executable depends upon into its libexec directory and put that directory first in its RPATH. I prefer that solution to static linking myself.\r\n\r\nYeah, I'm just going to have to disagree with you there.\r\n\r\n@scpeters Yes, I agree its a bit like snappy, but it is __exactly__ [sta.li](http://sta.li).\r\n\r\nIn fact, [their FAQ](http://sta.li/faq) makes all the points I would make on this argument.\r\nAnd its _highly_ recommended reading to anyone interested, no matter which side of the aisle you're on on this topic.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 236855018,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-02T09:39:48Z",
		"body" : "Closing in favour of https://github.com/Homebrew/brew/issues/620. Thanks for all the discussion, folks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 60
	},
	{
		"id" : 208052513,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-10T19:56:01Z",
		"body" : "I appreciate this is frustrating; you're caught in the middle of an unsettled administrative question, which is why you're hearing more than one thing. In general, code from homebrew-science probably should not land in homebrew-versions. If the -science maintainers are unwilling to maintain it, you can consider maintaining it on your own in a tap.\r\n\r\nI do not think we're likely to see something actionable arise here because this is an unusual circumstance involving different code standard cultures in -science and the other core taps, so I'm going to go ahead and close this ticket and refer you back to the homebrew-science maintainers for questions about vtk.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 61
	},
	{
		"id" : 208054535,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-10T20:00:52Z",
		"body" : "fyi @dpo @Homebrew/science ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 61
	},
	{
		"id" : 208191579,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-11T07:06:53Z",
		"body" : "> do I have to physically modify every depends_on vtk to depends_on ahundt/vtk6 in *.rb files or is there a way to simplify that task via command line?\r\n\r\nYes, unfortunately.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 62
	},
	{
		"id" : 210674913,
		"user" : {
			"login" : "ahundt"
		},
		"created_at" : "2016-04-15T22:56:12Z",
		"body" : "Could this question be converted to a feature request to that effect? \r\n\r\nNo worries if you think it may not be worthwhile, or if changes based on #60 render this point moot.  Either way, at least the manual solution should work so thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 62
	},
	{
		"id" : 210856580,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T16:52:25Z",
		"body" : "Will discuss this more in https://github.com/Homebrew/brew/issues/60.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 62
	},
	{
		"id" : 208088636,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-10T23:16:06Z",
		"body" : "This looks reasonable to me, but it's already pretty late, thus better don't trust my judgment alone ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 63
	},
	{
		"id" : 208112086,
		"user" : {
			"login" : "awallace-cray"
		},
		"created_at" : "2016-04-11T01:34:10Z",
		"body" : "FWIW, I ran this locally and it passes.\r\n\r\nbrew pull --clean https://github.com/Homebrew/brew/pull/63\r\nbrew test-bot chapel\r\n\r\nNote, I already had a rebased version of https://github.com/Homebrew/homebrew-core/pull/137 in /usr/local/Lib/Formula, and reconfirmed it was still there after the above commands.\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 63
	},
	{
		"id" : 208191858,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-11T07:07:23Z",
		"body" : "CC @mistydemeo for :+1: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 63
	},
	{
		"id" : 209239518,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-13T05:50:36Z",
		"body" : "Nice work @apjanke \r\nThis also fixes https://github.com/Homebrew/homebrew-core/pull/262#issuecomment-209239368",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 63
	},
	{
		"id" : 209244372,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-13T06:07:43Z",
		"body" : "üëç",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 63
	},
	{
		"id" : 209250358,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-13T06:22:50Z",
		"body" : "Thanks! I've merged it and kicked off test-bot reruns for the core PRs it was blocking.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 63
	},
	{
		"id" : 208109612,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-11T01:26:17Z",
		"body" : "related: https://github.com/Homebrew/legacy-homebrew/pull/44567",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 64
	},
	{
		"id" : 208111852,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-11T01:32:32Z",
		"body" : "This problem is why `ENV.java_cache` exists. Try setting that inside `test do` and see if it works.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 64
	},
	{
		"id" : 208112013,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-11T01:33:22Z",
		"body" : "Looks like this might be a red herring: once whitelisting `~/.oracle_jre_tracking` in the sandbox, that `neo4j` formula is still failing at about the same spot, and only under the sandbox.\r\n\r\nI'll try the `ENV.java_cache` thing.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 64
	},
	{
		"id" : 208112402,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-11T01:37:44Z",
		"body" : "The `ENV.java_cache` thing isn't working - the deny writes still happen - but expanding that `$_JAVA_OPTS` would let us tweak the JRE Tracking configuration to repoint the logs, without having to open the sandbox more. I had forgotten about `$_JAVA_OPTS`. Thanks.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 64
	},
	{
		"id" : 208114109,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-11T01:42:58Z",
		"body" : "More specifically, to answer your broader question, I don't think we should deviate from our policy that running Homebrew formulae installs and tests shouldn't write to user's `$HOME` directories.\r\n\r\nIt's perhaps worth noting that sandbox errors _can_ be false positives. Not all sandbox errors are fatal, for example, it dumps the sandbox log whether the errors were actually problematic or not. For example here:\r\n\r\n```\r\n==> /usr/local/Cellar/neo4j/2.3.3/bin/neo4j start\r\nUnable to find any JVMs matching version \"1.7\".\r\nStarting Neo4j Server.../private/tmp/neo4j20160411-41946-fa9z5n/libexec/data/log/neo4j.log was missing, recreating...\r\nWARNING: not changing user\r\nprocess [42058]... waiting for server to be ready.. Failed to start within 120 seconds.\r\nNeo4j Server may have failed to start, please check the logs.\r\nError: neo4j: failed\r\n```\r\n\r\nAnd then without `ENV.java_cache`:\r\n```\r\n==> /usr/local/Cellar/neo4j/2.3.3/bin/neo4j start\r\nUnable to find any JVMs matching version \"1.7\".\r\nStarting Neo4j Server.../private/tmp/neo4j20160411-42371-1fko2pd/libexec/data/log/neo4j.log was missing, recreating...\r\nWARNING: not changing user\r\nprocess [42482]... waiting for server to be ready.. Failed to start within 120 seconds.\r\nNeo4j Server may have failed to start, please check the logs.\r\n==> Sandbox log\r\nApr 11 02:41:15 sandboxd[140]: java(42462) deny file-write-create /Users/Dominyk/.oracle_jre_usage\r\nApr 11 02:41:15 sandboxd[140]: java(42462) deny file-write-create /Users/Dominyk/.oracle_jre_usage\r\nApr 11 02:41:15 sandboxd[140]: java(42464) deny file-write-create /Users/Dominyk/.oracle_jre_usage\r\nApr 11 02:41:15 sandboxd[140]: java(42464) deny file-write-create /Users/Dominyk/.oracle_jre_usage\r\nApr 11 02:41:15 sandboxd[140]: java(42482) deny file-write-create /Users/Dominyk/.oracle_jre_usage\r\nApr 11 02:41:15 sandboxd[140]: java(42482) deny file-write-create /Users/Dominyk/.oracle_jre_usage\r\nError: neo4j: failed\r\n```\r\n\r\nBut those files not being created doesn't seem to be the error, otherwise the `ENV.java_cache` one would  have passed. ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 64
	},
	{
		"id" : 208115632,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-11T01:47:47Z",
		"body" : "FWIW the `.oracle_jre_usage` logs, when `ENV.java_cache` is applied, are created in `HOMEBREW_CACHE/java_cache`. You'll find them created in there okay.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 64
	},
	{
		"id" : 208121742,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-11T02:22:05Z",
		"body" : "Okay. Maybe I was getting a false positive from multiple test runs.\r\n\r\nAgree we shouldn't open up anything under `$HOME` if we can help it.\r\n\r\nClosing this out since it looks like `ENV.java_cache` takes care of it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 64
	},
	{
		"id" : 208122036,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-11T02:25:05Z",
		"body" : "`ENV.java_cache` is pretty much undocumented at the moment, so my apologies if that was a pain in trying to poke around this issue.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 64
	},
	{
		"id" : 208141995,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-04-11T03:07:59Z",
		"body" : "I was about to report this, except that what I found weird was that brew still prints \"Already up-to-date\" even though everything it tried failed.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 65
	},
	{
		"id" : 208142382,
		"user" : {
			"login" : "Clpsplug"
		},
		"created_at" : "2016-04-11T03:09:14Z",
		"body" : "@chdiza Yeah right! I forgot to mention that. Thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 65
	},
	{
		"id" : 208193287,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-11T07:11:00Z",
		"body" : "Thanks for the report, I'll investigate this.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 65
	},
	{
		"id" : 208193028,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-11T07:09:35Z",
		"body" : "Seems reasonable :+1: Just in case it's not too hard to roll in: I suspect a lot of people would like something similar for `brew install`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 66
	},
	{
		"id" : 208376323,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-11T14:33:20Z",
		"body" : ":+1: On the general idea (modulo my code comments) and would love to see this for `brew install` (either implemented here or in a separate PR).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 66
	},
	{
		"id" : 208378902,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-11T14:38:48Z",
		"body" : "> The --interactive option doesn't work with the sandbox,\r\n\r\nShould we make `--interactive` not disabling sandbox if we have `--keep-file`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 66
	},
	{
		"id" : 208489385,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-11T18:33:56Z",
		"body" : "Amended based on feedback.\r\n\r\nYeah, `--keep-files` does seem generic, since this is intended to apply specifically to the temporary working directory the test (or build, if `install` is added) is run in, and other files may be produced as a result of an `install` at least. `brew install --keep-files` definitely doesn't scan right.\r\n\r\nAlternate name preferences? `--keep-temp-files`? `--keep-working-dir`? `--keep-staging`?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 66
	},
	{
		"id" : 208489943,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-11T18:35:56Z",
		"body" : "> > The --interactive option doesn't work with the sandbox,\r\n>\r\n> Should we make `--interactive` not disabling sandbox if we have `--keep-file`?\r\n\r\nIf that's the only reason it doesn't work now, yeah. Or even make `--interactive` without `--keep-files` cause the files to be kept when any exceptions happen, so they're preserved when needed for interactivity, but deleted if everything works fine.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 66
	},
	{
		"id" : 208497934,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-11T18:54:30Z",
		"body" : "> Alternate name preferences? `--keep-temp-files`? `--keep-working-dir`? `--keep-staging`?\r\n\r\nI'm still a big fan of `--keep-temp` as suggested in my code comment. The working directories of both `install` and `test` are temporary (in my mental model), so that seems appropriate and succinct.\r\n\r\n> Should we make `--interactive` not disabling sandbox if we have `--keep-file`?\r\n\r\nEven if that was the case I'd find it useful to have access to the build directory of a formula after a regular, non-interactive `brew install` every once in a while.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 66
	},
	{
		"id" : 208750398,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T07:18:25Z",
		"body" : "> I'm still a big fan of --keep-temp as suggested in my code comment.\r\n\r\nMaybe even `--keep-tmp`",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 66
	},
	{
		"id" : 209284418,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-13T07:39:01Z",
		"body" : "I figured out how to do `--keep-tmp` for `brew install`, too, and added it.\r\n\r\nChanged the implementation so now you have a `mktemp_preserve` function you can call from within the `mktmpdir do` block, so you can decide dynamically in there whether to preserve it. And the output comes from `mktmpdir` itself, so you don't have to hold on to a `mktmpdir` results object at the point of the top `do` call and have redundant output code. This decoupling made doing it for `brew install` feasible. Other features can make use of this, too.\r\n\r\nThe implementation is not thread-safe; it'll give incorrect results if multiple threads are running `mktmpdir` at the same time. We don't have to worry about multithreading in `brew`, do we?\r\n\r\nMade the `--keep-tmp` automatic when there is a build or test failure under `--interactive` or `--debug`. And since that works and gives us a convenient way of seeing in to sandboxed runs, this re-enables the sandbox for `--debug` and `--interactive` use. You can still also explicitly pass `--keep-tmp` to retain the temp files for any test or install run, regardless of its exit status.\r\n\r\nSince `brew test-bot` runs combination of `install` and `test`, I added it to `test-bot` too, to propagate to its `install` and `test` runs. The limitation here is that since the retention is done by child `brew` processes whose output is not displayed, you never see the \"retained temp file\" messages if it happens; you just have to look at your temp directory afterwards.\r\n\r\nChanged the prefix used by every `mktmpdir` to include a \"-\" for readability.\r\n\r\nSwitched name to `--keep-tmp`; that makes most sense to me too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 66
	},
	{
		"id" : 209675137,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-13T22:31:13Z",
		"body" : "The changes are quite extensive and I haven't been able to review them completely, however:\r\n\r\n> Changed the implementation so now you have a `mktemp_preserve` function you can call from within the `mktmpdir do` block, so you can decide dynamically in there whether to preserve it. And the output comes from `mktmpdir` itself, so you don't have to hold on to a `mktmpdir` results object at the point of the top `do` call and have redundant output code. This decoupling made doing it for `brew install` feasible. Other features can make use of this, too.\r\n> \r\n> The implementation is not thread-safe; it'll give incorrect results if multiple threads are running `mktmpdir` at the same time. We don't have to worry about multithreading in `brew`, do we?\r\n\r\nCouldn't those complications (and the use of class variables) be avoided by making `Mktemp#run` yield the `Mktemp` instance to the invoking code? It would allow writing something like this:\r\n\r\n```ruby\r\nmktemp(\"prefix\") do |temp|\r\n  temp.preserve if ARGV.keep_tmp?\r\n  ‚Ä¶\r\nend\r\n```\r\n\r\n> Since `brew test-bot` runs combination of `install` and `test`, I added it to `test-bot` too, to propagate to its `install` and `test` runs. The limitation here is that since the retention is done by child `brew` processes whose output is not displayed, you never see the \"retained temp file\" messages if it happens; you just have to look at your temp directory afterwards.\r\n\r\nIsn't this going to fill up `/tmp` for every formula that fails to build for some reason? I think this might be an issue for a continuously running `test-bot` instance because it would slowly run out of disk space. (Or am I misunderstanding this?)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 66
	},
	{
		"id" : 209703935,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-14T00:55:00Z",
		"body" : "Fixed the Ruby 1.8.7 compatibility.\r\n\r\n> > I added it to test-bot too, to propagate to its install and test runs.\r\n>\r\n> Isn't this going to fill up /tmp for every formula that fails to build for some reason?\r\n\r\nOnly if you add `--keep-tmp` to the `test-bot` calls, which this PR does not. `test-bot` does not use `--interactive` or `--debug` in the `brew install` and `brew test` calls it does, so the automatic retention on failure is not activated. It's intended to be used for interactive `brew test-bot` runs where you're trying to locally reproduce and diagnose a failure.\r\n\r\n> Couldn't those complications (and the use of class variables) be avoided by making Mktemp#run yield the Mktemp instance to the invoking code?\r\n\r\nYes, but it would be a bit complicated and have to also be done to some existing methods.\r\n\r\nWe would have to build that yielding signature in to `patch`, `Formula.brew`, `Resource.stage`, and maybe a couple other things, because not every point that wants to call `mktemp_preserve` is directly calling `mktemp`. For example, here:\r\n\r\n```\r\n    formula.brew do\r\n      FileUtils.mktemp_preserve if ARGV.keep_tmp?\r\n      formula.patch\r\n```\r\n\r\nThere's a few intermediate calls between that `formula.brew` and what eventually passes the block along to `mktemp`. They'd all have to change their signatures, and I thought committing to that would be a bigger change in both implementation and internal API. The current approach also lets you structure things so you can do the `mktemp_preserve` call inside functions called from that block, or even in functions which may or may not be running inside a `mktemp` call.\r\n\r\nDoing it with the block argument does fix the locality/multithreading issues, and it looks like more idiomatic Ruby. Maybe it's worth it. My sense says no, because the change would hit so many commonly used things in existing code. But maybe it is: passing the mktemp context to those blocks would be a more appropriate mechanism for associating the block with the temporary space it's running in.\r\n\r\nOpen to opinions here from people with more Ruby/`brew` experience.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 66
	},
	{
		"id" : 209730380,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-14T02:36:34Z",
		"body" : "Turns out the pass-to-yield design isn't as big of a change: there's a lot of `stage` methods in the codebase, but the ones on DownloadStrategy classes have a different signature that doesn't take blocks; they are just called from inside the Resource.stage method, which is the one we need to modify.\r\n\r\n[Here's an implementation](https://github.com/apjanke/brew/commit/a2a453e6b51686a4e7291497e337795073ed52d7) that changes this PR's class methods to instance methods on a stage context object passed to the blocks that `mktemp` and `stage` yield to.\r\n\r\nI think this yield-based control flow design works better. It requires threading another parameter through all the `stage do` and `mktemp do` and `brew do` calls. But it correctly localizes the staging area context to the call stack acting on it, avoiding globals and allowing the contexts at any level of the stack to be acted on as long as you have the right object reference.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 66
	},
	{
		"id" : 210340042,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-15T07:45:04Z",
		"body" : "Could you write test case for the new `mktemp` as well as `mktemp_preserve`?\r\n\r\nAlso would it be a better idea to call `mktemp_preserve` to just `preserve_tempfile`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 66
	},
	{
		"id" : 210344652,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-15T07:56:34Z",
		"body" : "I've merged in an updated implementation using block arguments like Martin suggested. Eliminates the globals and reentrancy problems, and (at least to me) looks more like idiomatic Ruby. Left it as a separate commit so it's easy to see the differences; will squash before this eventually gets merged.\r\n\r\n> Could you write test case for the new mktemp as well as mktemp_preserve?\r\n\r\nSure.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 66
	},
	{
		"id" : 210857258,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T16:55:20Z",
		"body" : "A few feelings on readability and variable names but otherwise :+1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 66
	},
	{
		"id" : 210927431,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-17T00:24:39Z",
		"body" : "Bringing this up again since Martin asked about it, and I don't know for sure: was inability to access the files the only reason the sandbox was disabled for `--debug` and `--interactive` use? I think that's so, and as such, this PR turns the sandbox back on for those cases. But want to make sure I'm not overlooking something else.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 66
	},
	{
		"id" : 210937770,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-17T01:59:48Z",
		"body" : "Amended again:\r\n* Added a unit test and fixed related tests\r\n* Addressed naming concerns by spelling everything out; picked `staging` for the long block parameter name\r\n* Fixed erroneous `:preserve!` that xu-cheng caught\r\n* Renamed \"preserve\" to \"retain\" everywhere in this feature\r\n\r\nI think \"retain\" better reflects what it's actually doing. \"Preserve\" usually asks a function or command to keep things in the state they were before the command was run, which isn't quite what's going on here. It's closer to \"document retention\" than \"document preservation\". And the comments & output were already using \"retain\"; may as well be consistent.\r\n\r\nI think this might be ready to go now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 66
	},
	{
		"id" : 210944201,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-17T02:51:27Z",
		"body" : "Left some nitpicking code comments, but nothing really substantial. This means I really like how the PR has progressed and what the code looks like now. Also like the move from ‚Äúpreserve‚Äù to ‚Äúretain‚Äù.\r\n\r\n:+1: once the sandbox-related question is answered.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 66
	},
	{
		"id" : 211121079,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-17T21:50:40Z",
		"body" : "Thanks! I'm happy with it too. Glad you pushed for the block-argument form; I think it's a better design than the globals.\r\n\r\nI addressed the nitpicks, and rebased on master to pick up the `man`-related changes.\r\n\r\nxu-cheng confirmed in a line comment that the sandbox disabling was just file-related: \"The reason it used to be disabled is that it's hard to retain file in interactive shell. So we can safely remove them now.\"\r\n\r\nIf no objections, I'll pull this in this evening.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 66
	},
	{
		"id" : 211454828,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-18T16:23:30Z",
		"body" : "Merged. Thanks for your feedback!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 66
	},
	{
		"id" : 213581832,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-22T20:40:24Z",
		"body" : "Note: this PR caused breakage found in #529, because in older versions of Ruby, a multi-argument call to a block which only has a single parameter causes all the arguments to be condensed into an array, instead of omitting the later arguments. This broke the interface for `stage` as used in some `Formula` definitions. We need to keep the interface for stage to using only a single argument in its block.\r\n\r\nWorking on a fix that goes back to the old signature.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 66
	},
	{
		"id" : 208306020,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-11T11:48:09Z",
		"body" : "I think we could introduce tap config for this.\r\n```diff\r\ndiff --git a/Library/Homebrew/tap.rb b/Library/Homebrew/tap.rb\r\nindex a2e21ca..22938c4 100644\r\n--- a/Library/Homebrew/tap.rb\r\n+++ b/Library/Homebrew/tap.rb\r\n@@ -77,6 +77,8 @@ class Tap\r\n     @command_files = nil\r\n     @formula_renames = nil\r\n     @tap_migrations = nil\r\n+    @config = nil\r\n+    remove_instance_variable(:@private) if instance_variable_defined?(:@private)\r\n   end\r\n \r\n   # The remote path to this {Tap}.\r\n@@ -143,14 +145,37 @@ class Tap\r\n     user == \"Homebrew\"\r\n   end\r\n \r\n+  # @private\r\n+  def read_and_set_private_config\r\n+    case config[\"private\"]\r\n+    when \"true\" then true\r\n+    when \"false\" then false\r\n+    else\r\n+      config[\"private\"] = begin\r\n+        if custom_remote?\r\n+          true\r\n+        else\r\n+          GitHub.private_repo?(user, \"homebrew-#{repo}\")\r\n+        end\r\n+      rescue GitHub::HTTPNotFoundError\r\n+        true\r\n+      rescue GitHub::Error\r\n+        false\r\n+      end\r\n+    end\r\n+  end\r\n+\r\n   # True if the remote of this {Tap} is a private repository.\r\n   def private?\r\n-    return true if custom_remote?\r\n-    GitHub.private_repo?(user, \"homebrew-#{repo}\")\r\n-  rescue GitHub::HTTPNotFoundError\r\n-    true\r\n-  rescue GitHub::Error\r\n-    false\r\n+    return @private if instance_variable_defined?(:@private)\r\n+    @private = read_and_set_private_config\r\n+  end\r\n+\r\n+  def config\r\n+    @config ||= begin\r\n+      raise TapUnavailableError, name unless installed?\r\n+      TapConfig.new(self)\r\n+    end\r\n   end\r\n \r\n   # True if this {Tap} has been installed.\r\n@@ -567,3 +592,22 @@ class CoreTap < Tap\r\n     file.basename.to_s\r\n   end\r\n end\r\n+\r\n+class TapConfig\r\n+  attr_reader :tap\r\n+\r\n+  def initialize(tap)\r\n+    @tap = tap\r\n+  end\r\n+\r\n+  def [](key)\r\n+    return unless tap.git? && Utils.git_available?\r\n+    tap.path.cd { Utils.popen_read(\"git\", \"config\", \"--local\", \"--get\", \"brew.#{key}\").chuzzle }\r\n+  end\r\n+\r\n+  def []=(key, value)\r\n+    return unless tap.git? && Utils.git_available?\r\n+    tap.path.cd { system \"git\", \"config\", \"--local\", \"--replace-all\", \"brew.#{key}\", value.to_s }\r\n+    value\r\n+  end\r\n+end\r\n```\r\ncc @UniqMartin ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 67
	},
	{
		"id" : 208367629,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-11T14:13:59Z",
		"body" : "> I think we could introduce tap config for this.\r\n\r\nI like this idea and the proposed implementation quite a bit! My gut feeling is that using `homebrew.` (the project name) as a config prefix would be more appropriate than `brew.`, but I can live with either.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 67
	},
	{
		"id" : 208805168,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T09:07:32Z",
		"body" : "Used @xu-cheng's patch with a few style tweaks.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 67
	},
	{
		"id" : 208805488,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T09:07:56Z",
		"body" : "@UniqMartin Done!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 67
	},
	{
		"id" : 208395735,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-04-11T15:13:54Z",
		"body" : "Yeah, this is nicer for sure. Just fix the comments by @UniqMartin more or less.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 68
	},
	{
		"id" : 208670378,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-12T02:25:26Z",
		"body" : "I like this functionality, but am a little concerned we're making up our own not-great markup syntax here. If we want to do this, maybe we should just adopt a real markup language for the helptext, like Markdown or AsciiDoc. (Or support a `helptext_markup_language` property if you want to support multiple syntaxes, and have back-compatibility for plain text.)\r\n\r\nI like AsciiDoc for this application, since it has more powerful markup for code snippets.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 68
	},
	{
		"id" : 208670831,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-12T02:26:02Z",
		"body" : "Def :+1: on the alias handling, though. Maybe these should be split out?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 68
	},
	{
		"id" : 208731871,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-12T06:37:32Z",
		"body" : "I merged the alias handle commit. The PR now only has the updated highlight feature implementation.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 68
	},
	{
		"id" : 208750303,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T07:18:11Z",
		"body" : "This looks good to me.\r\n\r\n> I like this functionality, but am a little concerned we're making up our own not-great markup syntax here. If we want to do this, maybe we should just adopt a real markup language for the helptext, like Markdown or AsciiDoc.\r\n\r\nI think this is a good idea moving forward but don't think it needs to block this PR.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 68
	},
	{
		"id" : 208777766,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-12T08:23:23Z",
		"body" : "Oh, how about we generating separate manpages for each commands. Then we could use `/usr/bin/nroff -mman <file>` to output highlighted help message.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 68
	},
	{
		"id" : 208782341,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T08:33:07Z",
		"body" : "Yeh, that seems sensible/good. It's what Git does.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 68
	},
	{
		"id" : 208816430,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-12T09:35:46Z",
		"body" : "`nroff` approach is not that easy as I thought. I'd like to just ship this as it is. And addressing the implementation in future PR, if no objection?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 68
	},
	{
		"id" : 208825333,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T09:55:07Z",
		"body" : "Yeh, seems fine to me if you've personally checked the output for the current commands to make sure there's no glitches :+1: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 68
	},
	{
		"id" : 208387108,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-11T15:00:16Z",
		"body" : "Can you please post the output of `brew config` and `brew cleanup --debug` to help us investigate this issue? Thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208389198,
		"user" : {
			"login" : "bentonam"
		},
		"created_at" : "2016-04-11T15:03:17Z",
		"body" : "`brew config`\r\n\r\n```\r\n[~]$ brew config\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew\r\nHEAD: 4a7cd160c31969b79979ae9bd20afcf82d9513c0\r\nLast commit: 7 hours ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 530b134420af9a419c38a4f2e1da2d13e18b16f9\r\nCore tap last commit: 2 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: 8-core 64-bit haswell\r\nOS X: 10.11.4-x86_64\r\nXcode: 7.3\r\nCLT: N/A\r\nClang: 7.3 build 703\r\nX11: N/A\r\nSystem Ruby: 2.0.0-p648\r\nPerl: /usr/bin/perl\r\nPython: /usr/bin/python\r\nRuby: /Users/aaronbenton/.rvm/rubies/ruby-2.2.1/bin/ruby\r\nJava: 1.8.0_40, 1.7.0_79\r\n```\r\n\r\n`brew cleanup --debug`\r\n\r\n```\r\n[~]$ brew cleanup --debug\r\nError: Unknown command: find\r\n/usr/local/Library/brew.rb:127:in `exit'\r\n/usr/local/Library/brew.rb:127:in `<main>'\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208393580,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-11T15:10:31Z",
		"body" : "What does `which find` yield (it should be `/usr/bin/find`) and what is the output of `echo \"$PATH\"`? Have you intentionally or accidentally modified your `PATH` to exclude `/usr/bin`?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208403844,
		"user" : {
			"login" : "bentonam"
		},
		"created_at" : "2016-04-11T15:33:15Z",
		"body" : "`which find`\r\n\r\n```\r\n[~]$ which find\r\n/usr/bin/find\r\n```\r\n\r\n`echo \"$PATH\"`\r\n\r\n```\r\n/Users/aaronbenton/.rvm/gems/ruby-2.2.1/bin:/Users/aaronbenton/.rvm/gems/ruby-2.2.1@global/bin:/Users/aaronbenton/.rvm/rubies/ruby-2.2.1/bin:/Users/aaronbenton/.nvm/versions/node/v5.10.1/bin:./node_modules/.bin:/usr/local/opt/coreutils/libexec/gnubin:/bin:/sbin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/aaronbenton/.rvm/bin\r\n```\r\n\r\n`/usr/bin` is listed in the path\r\n\r\n\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208429116,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-11T16:09:32Z",
		"body" : "Thanks! To be honest I'm stuck and out of ideas. And trying to reproduce this by temporarily removing `/usr/bin` from PATH showed me that things will break much earlier in various ways, so thinking this might be the issue was silly. Hopefully someone else has an idea how to debug this further ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208496860,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-11T18:51:00Z",
		"body" : "Does this reproduce if you just do `brew` without any arguments or is it exclusive to `brew cleanup` as far as you're aware?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208505878,
		"user" : {
			"login" : "bentonam"
		},
		"created_at" : "2016-04-11T19:09:21Z",
		"body" : "As far as I have seen it is exclusive to `brew cleanup`",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208521983,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-11T19:41:51Z",
		"body" : "Can you check `brew list` as well?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208530185,
		"user" : {
			"login" : "bentonam"
		},
		"created_at" : "2016-04-11T19:57:09Z",
		"body" : "`brew list` returns the following output\r\n\r\n```\r\n[~]$ brew list\r\nautoconf  coreutils  freetype  git\t    jpeg\t  libksba  libtiff  libyaml  nvm      pcre\t pkg-config  thefuck  vim  z\r\nautomake  docker     gdbm      imagemagick  libgpg-error  libpng   libtool  lynx     openssl  phantomjs  readline    tree     xz   zsh\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208531463,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-11T20:01:39Z",
		"body" : "Really weird; can you give us the outputs of `file /usr/bin/find` and running it without any arguments, i.e., `/usr/bin/find`?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208532219,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-11T20:04:19Z",
		"body" : "Can you try `brew list --unbrewed` as well? You don't need to provide the output, it's just somewhere else I know we explicitly use `find` and I'm trying to narrow down whether _how_ we call `find` adds to your error or doesn't.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208534661,
		"user" : {
			"login" : "bentonam"
		},
		"created_at" : "2016-04-11T20:09:59Z",
		"body" : "@UniqMartin \r\n`file /usr/bin/find`\r\n\r\n```\r\n[~]$ file /usr/bin/find\r\n/usr/bin/find: Mach-O 64-bit executable x86_64\r\n[~]$ find\r\nusage: find [-H | -L | -P] [-EXdsx] [-f path] path ... [expression]\r\n       find [-H | -L | -P] [-EXdsx] -f path [path ...] [expression]\r\n[~]$ /usr/bin/find\r\nusage: find [-H | -L | -P] [-EXdsx] [-f path] path ... [expression]\r\n       find [-H | -L | -P] [-EXdsx] -f path [path ...] [expression]\r\n```\r\n\r\n@DomT4 The command `brew list --unbrewed`  worked as well. ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208541836,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-11T20:18:09Z",
		"body" : "Can you provide the output of `ls -l $(brew --prefix)/Library/Homebrew/cmd/cleanup.rb` and if that file exists (it should), check whether its contents are those of https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cmd/cleanup.rb?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208542999,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-11T20:22:30Z",
		"body" : "And if you're using `bash` as a shell (the default on OS X): What is the output of `type brew`?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208570296,
		"user" : {
			"login" : "bentonam"
		},
		"created_at" : "2016-04-11T21:26:48Z",
		"body" : "@UniqMartin \r\n\r\n`ls -l $(brew --prefix)/Library/Homebrew/cmd/cleanup.rb`\r\n\r\n```\r\n[~]$ ls -l $(brew --prefix)/Library/Homebrew/cmd/cleanup.rb\r\n-rw-r--r-- 1 aaronbenton 1214 Apr 11 10:39 /usr/local/Library/Homebrew/cmd/cleanup.rb\r\n```\r\n\r\nThe contents of the file are identical from what I have on my machine to what is in master.\r\n\r\n`type brew`\r\n\r\n```\r\n[~]$ type brew\r\nbrew is an alias for brew\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208572610,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-11T21:34:45Z",
		"body" : "> ```\r\n> [~]$ type brew\r\n> brew is an alias for brew\r\n> ```\r\n\r\nThis looks suspicious (you seem to be using ZSH as your shell). Aliasing `brew` to itself doesn't make much sense. Can you please try (and post the output of):\r\n\r\n```\r\nunalias brew\r\ntype brew\r\nbrew cleanup\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208849638,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-12T11:08:53Z",
		"body" : "Something seems to be literally calling `brew find`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 69
	},
	{
		"id" : 208892428,
		"user" : {
			"login" : "bentonam"
		},
		"created_at" : "2016-04-12T12:57:21Z",
		"body" : "@UniqMartin \r\n\r\n```\r\nunalias brew\r\ntype brew\r\nbrew cleanup\r\n```\r\n\r\nThis appears to have worked.  Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 69
	},
	{
		"id" : 208892625,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-12T12:58:08Z",
		"body" : "@bentonam Right but that's not going to be persistent. Open a new terminal window, and same problem, right?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 69
	},
	{
		"id" : 208896773,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-12T13:09:45Z",
		"body" : "Try `which brew` to debug the root cause",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 69
	},
	{
		"id" : 208983082,
		"user" : {
			"login" : "bentonam"
		},
		"created_at" : "2016-04-12T16:05:01Z",
		"body" : "Somehow this was in my `.bash_aliases` \r\n\r\n```\r\nalias brew='brew '\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 69
	},
	{
		"id" : 208986230,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-12T16:13:35Z",
		"body" : "I cannot reproduce the issue just by setting that alias.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 69
	},
	{
		"id" : 208993349,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-12T16:31:14Z",
		"body" : "@bentonam also, probably unrelated but worth mentioning\r\n\r\n>/Users/aaronbenton/.rvm/gems/ruby-2.2.1/bin:/Users/aaronbenton/.rvm/gems/ruby-2.2.1@global/bin:/Users/aaronbenton/.rvm/rubies/ruby-2.2.1/bin:/Users/aaronbenton/.nvm/versions/node/v5.10.1/bin:./node_modules/.bin:/usr/local/opt/coreutils/libexec/gnubin:/bin:/sbin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/aaronbenton/.rvm/bin\r\n\r\n```\r\n/usr/local/opt/coreutils/libexec/gnubin\r\n```\r\nIt's a really bad idea to have that in your PATH.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 69
	},
	{
		"id" : 209008765,
		"user" : {
			"login" : "bentonam"
		},
		"created_at" : "2016-04-12T17:03:52Z",
		"body" : "Thanks @ilovezfs I have removed it.  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 69
	},
	{
		"id" : 209590491,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-13T18:44:35Z",
		"body" : "It would be interesting to understand the root cause of the problem, as the alias alone cannot explain the strange behavior. But closing, as the issue is basically resolved.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 69
	},
	{
		"id" : 208572231,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-04-11T21:33:19Z",
		"body" : "No tests were added for this change, as no tests existed for the previous behavior.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 70
	},
	{
		"id" : 208583867,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-11T22:06:50Z",
		"body" : "Test is failing on Mavericks only.\r\n\r\n```\r\nFinished in 46.934075s, 18.0679 runs/s, 43.5718 assertions/s.\r\n\r\n  1) Failure:\r\nIntegrationCommandTests#test_desc [/usr/local/Library/Homebrew/test/test_integration_cmds.rb:68]:\r\n--- expected\r\n+++ actual\r\n@@ -1 +1 @@\r\n-0\r\n+1\r\n\r\n\r\n848 runs, 2045 assertions, 1 failures, 0 errors, 0 skips\r\n```\r\n\r\nHere's the test.\r\n\r\n```\r\n  def test_desc\r\n    formula_file = CoreTap.new.formula_dir/\"testball.rb\"\r\n    formula_file.write <<-EOS.undent\r\n      class Testball < Formula\r\n        desc \"Some test\"\r\n        url \"https://example.com/testball-0.1.tar.gz\"\r\n      end\r\n    EOS\r\n\r\n    assert_equal \"testball: Some test\", cmd(\"desc\", \"testball\")\r\n  ensure\r\n    formula_file.unlink\r\n  end\r\n```\r\n\r\nCan't tell you why it's failing. The failure doesn't reproduce for me locally on Mavericks. May be dependent on the terminal it's running in? The CI boxes run headless.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 70
	},
	{
		"id" : 208753734,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T07:28:26Z",
		"body" : "Make sense to me :+1: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 70
	},
	{
		"id" : 208962271,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-04-12T15:28:40Z",
		"body" : "@mikemcquaid Any idea why that test is failing on Mavericks? Or whether that should prevent this being merged?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 70
	},
	{
		"id" : 209853495,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-04-14T09:43:52Z",
		"body" : "Please add a test for this.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 70
	},
	{
		"id" : 210037568,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-04-14T16:33:57Z",
		"body" : "@bfontaine I've added some tests in 541945b and done some refactoring in 6a67d46. I'll rebase and squash once you give the go-ahead.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 70
	},
	{
		"id" : 210113722,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-04-14T19:34:08Z",
		"body" : "@jawshooah Thank you for the tests! :heart: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 70
	},
	{
		"id" : 210271705,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-04-15T03:44:49Z",
		"body" : "Ah, it seems that `Enumerable#each_with_object` is not available in Ruby 1.8, which was the system default on Mavericks. I'll have to use `reduce` instead.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 70
	},
	{
		"id" : 210823360,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-04-16T14:15:45Z",
		"body" : "Thank you for your contribution to Homebrew, @jawshooah; we appreciate it! :tada: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 70
	},
	{
		"id" : 210850037,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T16:29:47Z",
		"body" : "Thanks @jawshooah!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 70
	},
	{
		"id" : 217887815,
		"user" : {
			"login" : "crd"
		},
		"created_at" : "2016-05-09T14:54:06Z",
		"body" : "Thanks for carrying my recommendation over the finish line @jawshooah ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 70
	},
	{
		"id" : 208594382,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-11T22:34:56Z",
		"body" : "@UniqMartin: All good suggestions. I've amended to incorporate them.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 71
	},
	{
		"id" : 208616710,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-11T23:29:56Z",
		"body" : "Went and merged this since it already had a couple :+1:s under the old PR.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 71
	},
	{
		"id" : 208749611,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T07:16:38Z",
		"body" : "> We probably need to override CMake's CMAKE_SYSTEM_*_PATH cmake variables to remove Fink and MacPorts paths (and possibly to limit them to paths explicitly included by superenv). This probably needs to be done with a cmake wrapper like the cc wrapper that modifies the command line arguments, using -D to set the CMAKE_* variables. Unlike CMAKE_*_PATH (without SYSTEM), environment variables with those names don't seem to be supported by CMake.\r\n\r\nI think in CMake's case this would be something they'd be willing to take a patch for (if one is necessary; it may be possible to just do this at either compilation or runtime).\r\n\r\n> Maybe we should switch from CMAKE_*_PATH to CMAKE_SYSTEM_*_PATH entirely in our cmake environment setup. The non-SYSTEM CMAKE_*_PATH variables are high-precedence, coming before both PATHS and HINTS that are computed inside the build script. This could have unexpected effects on build scripts that are not expecting that customization or have sloppy detection implementations.\r\n\r\nThis may work :+1: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 72
	},
	{
		"id" : 216553547,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:51:48Z",
		"body" : "@apjanke Any more thoughts on this or my comments above?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 72
	},
	{
		"id" : 216560328,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T15:13:37Z",
		"body" : "Not yet ‚Äì¬†I've been focused on the analytics and `brew pull` stuff lately. I'm also learning CMake for real: about halfway through the \"Mastering CMake\" book. Give me a little time to finish that so I actually know what I'm talking about, and I'll give you a useful response?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 72
	},
	{
		"id" : 216570851,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T15:42:24Z",
		"body" : "Sure thing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 72
	},
	{
		"id" : 238813170,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:26:04Z",
		"body" : "We'll accept PRs for this but we're not actively working on it at this time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 72
	},
	{
		"id" : 208745610,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T07:12:17Z",
		"body" : "The fix for this should actually be relatively easy; we should just manually set the Git remote URL each time which is a very fast local operation and means the following `fetch` will always pass.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 73
	},
	{
		"id" : 216553649,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:52:02Z",
		"body" : "@apjanke Any thoughts on this or my comment above?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 73
	},
	{
		"id" : 216560877,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T15:15:33Z",
		"body" : "Setting the remote URL sounds like a good fix; we should try that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 73
	},
	{
		"id" : 208812534,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-12T09:23:00Z",
		"body" : "`brew install ruby187` now is a dead code, so it should be removed. ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 74
	},
	{
		"id" : 208815122,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T09:31:57Z",
		"body" : "@xu-cheng Are you ok with this otherwise?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 74
	},
	{
		"id" : 208815549,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-12T09:33:11Z",
		"body" : "Personally, I think this PR may be more suitable for `homebrew/core` instead of `homebrew/brew`. But I'm fine either way.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 74
	},
	{
		"id" : 208827686,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T10:02:06Z",
		"body" : "@xu-cheng I'll be applying it there too. At the moment it's just slowing down all the builds in the org.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 74
	},
	{
		"id" : 208828410,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T10:04:44Z",
		"body" : "Forgot the Ruby 1.8 stuff. Coming up in next PR.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 74
	},
	{
		"id" : 208828575,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-12T10:05:22Z",
		"body" : "#76",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 74
	},
	{
		"id" : 208830644,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T10:10:33Z",
		"body" : ":+1: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 76
	},
	{
		"id" : 208836524,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-12T10:26:49Z",
		"body" : ":+1: :bow: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 77
	},
	{
		"id" : 210093292,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-14T18:40:56Z",
		"body" : "@Homebrew/maintainers It sounds like there's no more objections here so I'll be :ship:ing this tomorrow or this weekend if I don't hear otherwise.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 78
	},
	{
		"id" : 210096955,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-14T18:50:45Z",
		"body" : "@josegonzalez asked for a \"Where\" and \"Who\" section where the latter could be a maintainer document that details how to get access (e.g. ask someone already with access and list them).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 78
	},
	{
		"id" : 210175188,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-14T22:07:02Z",
		"body" : "Sorry for the lateness of the response here; I had to do some reading up on this since I'm not familiar with web analytics.\r\n\r\nMy only concern is that \"impossible\" in [the documentation](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Analytics.md#analytics) is pretty strong language when we're making assertions about privacy protection in terms of what Homebrew developers and Google can do with the data. Maybe we should downgrade that to a \"can't\", or report what Google themselves say the identifiability limitations are.\r\n\r\nThis is a suggestion, not a blocker.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 78
	},
	{
		"id" : 210329769,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-15T07:34:31Z",
		"body" : "@apjanke Thanks. I'll change Google's \"impossible\" to something less strong but leave Homebrew's as-is.\r\n\r\nOther @Homebrew/maintainers have suggested we announce this a week in advance so I'll do that when I consider this PR ready to :ship: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 78
	},
	{
		"id" : 210788130,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T10:45:31Z",
		"body" : "I've addressed all feedback so this is ready to :ship:. I'm going to announce this now to the Homebrew community through Twitter and the mailing list and will merge this pull request on or after Saturday 23rd April at 0800 UTC.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 78
	},
	{
		"id" : 210790372,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T10:56:05Z",
		"body" : "Relevant tweet: https://twitter.com/MacHomebrew/status/721290118703751168\r\nRelevant mailing list post: https://groups.google.com/forum/#!topic/homebrew-discuss/7Xdx9NnNmt0",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 78
	},
	{
		"id" : 213332028,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-22T08:44:58Z",
		"body" : "Reminder that I'm üö¢ing this as-is tomorrow.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 78
	},
	{
		"id" : 213742891,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-23T13:29:15Z",
		"body" : ":cake: :balloon: :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 78
	},
	{
		"id" : 209467994,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-13T14:17:04Z",
		"body" : "WRT the discussion from Slack: I don't think this actually needs an empty-string check for `@formula_prefix`. The way it's used within `brew`, it'll always be either nil or a nonempty string. You'd have to be calling the wrappers from something else, and populating `HOMEBREW_FORMULA_PREFIX=\"\"` from outside `brew` code. I don't know if we care about being that defensive.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 80
	},
	{
		"id" : 209472939,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-13T14:25:17Z",
		"body" : ":+1:\r\n\r\n> I don't know if we care about being that defensive.\r\n\r\nI don't think we need to be so defensive.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 80
	},
	{
		"id" : 221221434,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-24T09:54:46Z",
		"body" : "Closing as all missing implementations have been contributed by @vladshablinsky. Thanks a bunch!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 81
	},
	{
		"id" : 209463842,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-13T14:11:04Z",
		"body" : "Hi Florian,\n\nOn 4/13/16 10:00 AM, Florian Bruhin wrote:\n>\n> I'm trying to write my own first formula, so it's entirely possible \n> I'm doing something wrong here, but the error I'm getting from brew is \n> definitely confusing.\n>\n> |[...snip...] |\n>\n> but installing it fails - it seems the formula gets found, but then \n> brew decides it didn't find it anyways? :wink:\n>\n> |Flos-Mac-mini:~ flo$ brew install --debug --verbose qt5-webkit \n> /usr/local/Library/brew.rb (Formulary::FormulaLoader): loading \n> /usr/local/Library/Taps/homebrew/homebrew-core/Formula/qt5-webkit.rb \n> Error: No available formula with the name \"qt5-webkit\" ==> Searching \n> for similarly named formulae... /usr/local/Library/brew.rb \n> (Formulary::FormulaLoader): loading \n> /usr/local/Library/Taps/homebrew/homebrew-core/Formula/qt5-webkit.rb \n> This similarly named formula was found: qt5-webkit To install it, run: \n> brew install qt5-webkit ==> Searching taps... Error: No formulae found \n> in taps. |\n>\n> My formula:\n>\n> class  Qt5WebKit< Formula\n>    desc\"Version 5 of the Qt framework - QtWebKit module\"\n>    homepage\"https://www.qt.io/\"\n>    [...snip...]\n\nYou're very close. Homebrew is very strict about the class naming \npattern. `qt5-webkit` needs to become `Qt5Webkit`, not `Qt5WebKit`.\nOnly the first letter and letters immediately following a dash get \ncapitalized.\n\nThe misleading error messages are an issue with brew. We'll try to do \nsomething about that. https://github.com/Homebrew/brew/issues/82\n\nCheers,\nAndrew\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 82
	},
	{
		"id" : 209465430,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-13T14:13:34Z",
		"body" : "What @apjanke pointed out is probably the main issue.\r\n\r\n> `system \"make\", \"INSTALL_ROOT=#{prefix}\" \"install\"`\r\n\r\nThere's also a missing comma in this line. Might be another reason why the formula file is found, but fails to load. You can check with `brew readall` for syntax errors in formulae. Running `brew style --strict --online qt5-webkit` is also a good idea to check that the formula is in a decent shape.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 82
	},
	{
		"id" : 209473572,
		"user" : {
			"login" : "The-Compiler"
		},
		"created_at" : "2016-04-13T14:27:04Z",
		"body" : "Thanks a lot for the quick help and the helpful hints! :+1:\r\n\r\n@UniqMartin getting a bit off-topic here, but do you think I should submit this formula after it's polished and working, or keep it for myself? After all, there was an official source release for QtWebKit with Qt 5.6, and there are chances it'll be [continued to be maintained](https://github.com/annulen/webkit) by the community in the future.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 82
	},
	{
		"id" : 209492767,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-13T14:58:42Z",
		"body" : "> [‚Ä¶] do you think I should submit this formula after it's polished and working, or keep it for myself?\r\n\r\nI've seen some demand for this, so it would be nice of you to [put it in a tap](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/How-to-Create-and-Maintain-a-Tap.md) where others can find it. I'm not sure if we want to make that an official formula, though, as I believe our stance is that QtWebKit is basically broken and insecure, and it should die sooner than later. Including it could seem like an endorsement we don't want to commit to. @DomT4 and @mikemcquaid also might have an opinion.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 82
	},
	{
		"id" : 209837361,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-14T09:02:24Z",
		"body" : "> Including it could seem like an endorsement we don't want to commit to. @DomT4 and @mikemcquaid also might have an opinion.\r\n\r\nYeh, agreed.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 82
	},
	{
		"id" : 209949027,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-14T13:44:04Z",
		"body" : "> as I believe our stance is that QtWebKit is basically broken and insecure, and it should die sooner than later. Including it could seem like an endorsement we don't want to commit to.\r\n\r\n:+1: from me on that as well. A tap would be useful though, I agree.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 82
	},
	{
		"id" : 210849708,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T16:26:58Z",
		"body" : "Is the community QtWebkit using newer versions and e.g. accepting security updates? If so, we'd consider accepting it. Otherwise, as @UniqMartin said.\r\n\r\nClosing this as it's not a Homebrew issue but happy to help further if you have questions.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 82
	},
	{
		"id" : 210865799,
		"user" : {
			"login" : "The-Compiler"
		},
		"created_at" : "2016-04-16T17:51:30Z",
		"body" : "> Is the community QtWebkit using newer versions and e.g. accepting security updates? If so, we'd consider accepting it. \r\n\r\nIt's still heavily work in progress, but I think that's the goal - having a QtWebKit based on an updated upstream WebKit.\r\n\r\n> Closing this as it's not a Homebrew issue\r\n\r\nHow isn't it? Surely Homebrew could/should tell me something more useful than \"qt5-webkit was not found, but qt5-webkit was found instead, try running the command you did just run\"? :wink:\r\n\r\n> but happy to help further if you have questions\r\n\r\nThank you and everyone for being so open and helpful, I really appreciate it! :+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 82
	},
	{
		"id" : 210901869,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-16T21:10:19Z",
		"body" : ">> Closing this as it's not a Homebrew issue\r\n>\r\n> How isn't it? Surely Homebrew could/should tell me something more useful than \"qt5-webkit was not found, but qt5-webkit was found instead, try running the command you did just run\"? :wink:\r\n\r\nYou can find my attempt to improve the error message for this case in PR #101. Feedback welcome!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 82
	},
	{
		"id" : 209554538,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-13T17:25:32Z",
		"body" : "Hi; thanks for getting in touch. We install the gcc manpages with the same names as the executables; try `man gcc-5`. If there's anything else you think we should have man pages for, please open a ticket for that package at Homebrew/homebrew-core. Let us know if we can help with anything else.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 83
	},
	{
		"id" : 209555039,
		"user" : {
			"login" : "Alexeyan"
		},
		"created_at" : "2016-04-13T17:26:57Z",
		"body" : "man gcc-5 also gives \"no manual entry for gcc-5\"",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 83
	},
	{
		"id" : 209555721,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-04-13T17:29:06Z",
		"body" : "That's odd; it works for me. `brew info gcc` shows that it's installed? Can you share `brew config` -- if you have Homebrew installed somewhere besides /usr/local, you probably have to set up MANPATH.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 83
	},
	{
		"id" : 209564435,
		"user" : {
			"login" : "Alexeyan"
		},
		"created_at" : "2016-04-13T17:47:44Z",
		"body" : "huh.. I know i tried to install it. \r\nJust tried again and it died at \"make bootstrap\" had to ctrl-c and remebered, that the first installation went the same way. \r\nI just didn't notice because OS X has the gcc-pseudo frontend to clang...\r\n\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 83
	},
	{
		"id" : 209696737,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-14T00:07:13Z",
		"body" : "In that case, please post this as a build failure bug report over at https://github.com/homebrew/homebrew-core/issues, with build logs (from `brew gist-logs`) included. (Or if you're trying to build it `--without-multilib`, there's an existing issue https://github.com/Homebrew/homebrew-core/issues/234 that you can chime in on (again, with your `brew gist-logs` from it).)\r\n\r\nFor future reference, `brew ls -v <formula-name> | grep man` will give you a list of the man pages installed with a formula, if you need to verify them.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 83
	},
	{
		"id" : 209698320,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-14T00:17:00Z",
		"body" : "I like this change, modulo a couple wording alterations. This better reflects the typical workflow for users: almost always you will want to fork right away, and you'll want to work with the fork as a git remote name instead of a URL.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 84
	},
	{
		"id" : 216555734,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:58:38Z",
		"body" : "@MoritzFago Any news on the feedback here?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 84
	},
	{
		"id" : 219211192,
		"user" : {
			"login" : "vassilevsky"
		},
		"created_at" : "2016-05-14T09:45:48Z",
		"body" : "How do you feel about a script that does all this forking and pushing in a correct and standard way? Something a formula author could run and get a pull request ready and opened in the browser?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 84
	},
	{
		"id" : 219235101,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-14T18:16:16Z",
		"body" : "> How do you feel about a script that does all this forking and pushing in a correct and standard way? Something a formula author could run and get a pull request ready and opened in the browser?\r\n\r\nWe have `brew bump-formula-pr` so something like that (that shares the necessary code) would be great.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 84
	},
	{
		"id" : 219314222,
		"user" : {
			"login" : "MoritzFago"
		},
		"created_at" : "2016-05-15T22:18:04Z",
		"body" : "i think that @vassilevsky's idea would be the most beneficially, BUT it i'd suggest something like a wizard. Example user story:\r\n```bash\r\n$ brew create URL\r\n```\r\nNew formula created, please fill in details, when you're finished type `brew continue` to run the test's, fork the repo with your own account (is this scriptable?), create a new branch, push your changes and create a pull request.\r\nIf the tests fail the script lets you change your formula and/or put it somewhere to be able to request help (maybe github gists?)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 84
	},
	{
		"id" : 219349182,
		"user" : {
			"login" : "vassilevsky"
		},
		"created_at" : "2016-05-16T04:59:55Z",
		"body" : "I totally thought of this wizard too :) but I determined it to be too much. Formula creation is well-documented and shouldn't be hard for a programmer who knows Ruby. But this last bit about working with git and GitHub is pretty hard so that's what could be automated a little.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 84
	},
	{
		"id" : 221262722,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-24T13:08:01Z",
		"body" : "@MoritzFago Would you mind addressing the feedback you received for this PR? I like the general direction, but this cannot be currently merged as-is.\r\n\r\n@MoritzFago @vassilevsky Is one of you interested in pursuing the wizard idea in a separate PR? Like Mike I'm in favor of such a tool. It could draw some inspiration from [`bump-formula-pr`](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/dev-cmd/bump-formula-pr.rb), but could be more generic. If I were to implement such a tool, I'd make it look at the state of the checkout (or a commit range provided via arguments) and then figure out what to needs to be done. (And it would fail or ask questions when complexity is more than ‚Äúformula added‚Äù or ‚Äúversion bumped‚Äù.) Anyway, up to you whether or how you want to approach that. Just throwing out some ideas as I don't see me tackling this myself.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 84
	},
	{
		"id" : 221474793,
		"user" : {
			"login" : "vassilevsky"
		},
		"created_at" : "2016-05-25T05:12:26Z",
		"body" : "Sure, this better be a separate issue and pull request. I'm not sure if I'll be able to allocate some time to it right now though. Would it be OK if I create just an issue for it for now? Maybe someone else implements it üòÇ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 84
	},
	{
		"id" : 221623109,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-25T16:01:18Z",
		"body" : "@vassilevsky We don't accept feature request issues but you could submit a PR to https://github.com/Homebrew/brew-evolution",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 84
	},
	{
		"id" : 234770350,
		"user" : {
			"login" : "MoritzFago"
		},
		"created_at" : "2016-07-24T10:46:26Z",
		"body" : "@vassilevsky i agree with you, but i am not a ruby coder, so i don't think that i can implement that, but i'd like to be helpful with the design. @UniqMartin ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 84
	},
	{
		"id" : 234798469,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-24T19:57:54Z",
		"body" : "If none of the participants have the time/skill to make a wizard/command, that's fine. We can leave that for later until someone is both interested and willing to implement this idea.\r\n\r\n> Would you mind addressing the feedback you received for this PR? I like the general direction, but this cannot be currently merged as-is.\r\n\r\n@MoritzFago Would you mind addressing this (and the various code comments I'm hinting at here), so we can get this PR to a stage where it can be merged. That would be great!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 84
	},
	{
		"id" : 238815990,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:37:49Z",
		"body" : "Passing on this for now but thanks for the PR!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 84
	},
	{
		"id" : 210337049,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-15T07:41:37Z",
		"body" : "One comment, otherwise :+1: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 86
	},
	{
		"id" : 210342054,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-15T07:49:31Z",
		"body" : "I'm :ok: with this as-is with the expectation that we'll probably need to back down on some of this for eventual Linux support.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 86
	},
	{
		"id" : 210721921,
		"user" : {
			"login" : "akatrevorjay"
		},
		"created_at" : "2016-04-16T02:44:03Z",
		"body" : "Why not just have a static path that brew respects while it runs? If you always want the system binaries, then why not just make it so?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 86
	},
	{
		"id" : 210855077,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T16:49:21Z",
		"body" : "Thinking about this more: I'd rather we only did this for commands where we know there are problems e.g. we're relying on BSD behaviour for certain commands and GNU versions will break things. Otherwise it seems to make things harder to read. We've fixed the issue in https://github.com/Homebrew/brew/issues/47 (which was great) but I don't think we need to speculatively fix potential issues for commands that behave identically (`uname` springs to mind)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 86
	},
	{
		"id" : 210861844,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-16T17:32:13Z",
		"body" : "Thanks for the input everyone! By now I've also come to the conclusion that this PR is a bit overeager.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 86
	},
	{
		"id" : 210862556,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T17:44:22Z",
		"body" : "Thanks @UniqMartin and sorry to be :hankey: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 86
	},
	{
		"id" : 210865510,
		"user" : {
			"login" : "akatrevorjay"
		},
		"created_at" : "2016-04-16T17:50:40Z",
		"body" : "Could always just have a dir with such commands symlinked into it, then\nprefix PATH with it, that way your scripts are still portable and you don't\nhave to change much. Just an idea, trying to help.\n\nOn Sat, Apr 16, 2016, 12:49 PM Mike McQuaid <notifications@github.com>\nwrote:\n\n> Thinking about this more: I'd rather we only did this for commands where\n> we know there are problems e.g. we're relying on BSD behaviour for certain\n> commands and GNU versions will break things. Otherwise it seems to make\n> things harder to read. We've fixed the issue in #47\n> <https://github.com/Homebrew/brew/issues/47> (which was great) but I\n> don't think we need to speculatively fix potential issues for commands that\n> behave identically (uname springs to mind)\n>\n> ‚Äî\n> You are receiving this because you commented.\n> Reply to this email directly or view it on GitHub\n> <https://github.com/Homebrew/brew/pull/86#issuecomment-210855077>\n>\n-- \nTy,\nTrevor\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 86
	},
	{
		"id" : 210343926,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-15T07:53:00Z",
		"body" : "I think a more serious blocker is the `FormulaVersions` won't work after the formula directory change. As the result, we may get wrong revision number for bottles.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 87
	},
	{
		"id" : 210853734,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T16:44:24Z",
		"body" : "> I think a more serious blocker is the FormulaVersions won't work after the formula directory change. As the result, we may get wrong revision number for bottles.\r\n\r\nYup, we'll need to make sure all these sort of things work after renaming (they can be made to)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 87
	},
	{
		"id" : 233111889,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T06:03:50Z",
		"body" : "The `update-report`-related issue of reporting spurious changes has been addressed in #480.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 87
	},
	{
		"id" : 238813351,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:26:49Z",
		"body" : "> The update-report-related issue of reporting spurious changes has been addressed in #480.\r\n\r\nSounds sufficient to me for now at least.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 87
	},
	{
		"id" : 241066132,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-19T16:28:47Z",
		"body" : "I tested this out with a dummy repo, moving a bunch of formulae from the root dir to `Formula/`, and it worked ‚Äì no spurious messages. Looks like it's safe to reorganize taps now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 87
	},
	{
		"id" : 210853698,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T16:44:03Z",
		"body" : "I think it's fine just using the main repos. If it becomes a problem, :+1: to this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 88
	},
	{
		"id" : 211532950,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-18T19:05:12Z",
		"body" : "Between putting dummy PRs in `homebrew/core` and the current state of `homebrew/science`, I was able to find test cases for everything I needed. Don't think this will be necessary in the near future. Closing out.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 88
	},
	{
		"id" : 209926298,
		"user" : {
			"login" : "ahmadia"
		},
		"created_at" : "2016-04-14T12:54:13Z",
		"body" : "@mikemcquaid - I think the issue may be in https://github.com/Homebrew/brew/commit/6135da800e4f93ded3a5a331d0efa691f4822afb but I'm a little lost in trying to bisect to the error.  Let me know if we can provide any help in testing or trying to provide a fix.  \r\n\r\nThe way our proxy works, we set a username and password in the proxy url.  I'm wondering if the code here https://github.com/Homebrew/brew/blob/6135da800e4f93ded3a5a331d0efa691f4822afb/Library/Homebrew/cmd/gist-logs.rb#L122-L133 is somehow overriding our proxy environment variables?  We haven't set up GitHub credentials locally, so I'm not sure we should even be trying to login with them and instead should be falling back to unauthenticated requests.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 89
	},
	{
		"id" : 210849549,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T16:25:27Z",
		"body" : "> The way our proxy works, we set a username and password in the proxy url.\r\n\r\nIt sounds like this may be interfering. Homebrew's proxy support is not great and I'm sorry that this behaviour (which makes things better for non-proxy users) has made things worse for you. It's pretty much impossible for me to create a fix without your proxy to test. Could you try and open a pull request? [This document](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md#how-to-open-a-homebrew-pull-request-and-get-it-merged) should help and I'm happy to walk you through anything else.\r\n\r\nThanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 89
	},
	{
		"id" : 211360792,
		"user" : {
			"login" : "ahmadia"
		},
		"created_at" : "2016-04-18T12:38:10Z",
		"body" : "Thanks Mike, I'm pretty sure this is going to be biting a few people so I'll take a look at it this week if I get some time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 89
	},
	{
		"id" : 211365401,
		"user" : {
			"login" : "ahmadia"
		},
		"created_at" : "2016-04-18T12:46:26Z",
		"body" : "Okay, two ideas.  \r\n\r\n1. Don't try to login if there are no GitHub credentials stored on the system, instead just fall back to non-authenticated connection.  This seems the easiest to me and to be the most correct solution.\r\n\r\n2. Check for the presence of the HTTPS_PROXY environment variable. If it's been set and is of the form prot://user:password@URL, then don't try to use Ruby basic authentication, since I believe this interferes with the basic authentication to the proxy.\r\n\r\nI think [2] might work but that [1] is better for everybody involved.  Let me know if you have any ideas on this, otherwise I'll a little bit deeper into [1].",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 89
	},
	{
		"id" : 211376134,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T13:19:34Z",
		"body" : "@ahmadia I'd be surprised if 1) isn't already the case. 2) sounds like a reasonable compromise, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 89
	},
	{
		"id" : 220648399,
		"user" : {
			"login" : "britztopher"
		},
		"created_at" : "2016-05-20T16:07:27Z",
		"body" : "+1 as i just tried to upgrade to use brew 0.9.9 and ran into a couple issues because im behind a proxy server.  First, I kept getting this error:\r\n\r\n      Error: Non-HTTP proxy URI: https://myun:mypassword@myproxy.com\r\n\r\nThen found a workaround by setting `https_proxy=$http_proxy` which leads me to the `Error: 407 \"Proxy Authentication Required`  I reverted back to the `homebrew-legacy` github project, which is working fine",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 89
	},
	{
		"id" : 220649836,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-20T16:13:08Z",
		"body" : "@britztopher Could you file a separate bug report? The `homebrew-legacy` github project will not receive any more formula updates.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 89
	},
	{
		"id" : 220650772,
		"user" : {
			"login" : "britztopher"
		},
		"created_at" : "2016-05-20T16:16:51Z",
		"body" : "@mikemcquaid  This bug is not for legacy homebrew",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 89
	},
	{
		"id" : 209965106,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-14T14:16:56Z",
		"body" : "`ncmpcpp` has no direct dependency on `icu4c`, but depends on a non-standard build of `boost` with the `--with-icu4c` option. I'm pretty sure that rebuilding `boost` will fix the problem, i.e. please try `brew reinstall boost` and report back.\r\n\r\nIn the future, please report this kind of issue to the [homebrew-core repository](https://github.com/Homebrew/homebrew-core). This repository is for issues with the package manager itself, not for issues with specific formulae. Thanks!\r\n\r\nI'll check if we can do something to prevent this kind of breakage in the future.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 90
	},
	{
		"id" : 210362445,
		"user" : {
			"login" : "fooness"
		},
		"created_at" : "2016-04-15T08:39:44Z",
		"body" : "Excuse me, I did not know I‚Äôm in the wrong repository‚Äîand thanks for the link to the right one! Unfortunately, that didn‚Äôt help. Can you maybe move the issue? I‚Äôm not sure that‚Äôs possible here.\r\n\r\n~ >> brew reinstall boost\r\n==> Reinstalling boost with --with-icu4c\r\n==> Downloading https://downloads.sourceforge.net/project/boost/boost/1.60.0/boost_1_60_0.tar.bz2\r\nAlready downloaded: /Library/Caches/Homebrew/boost-1.60.0.tar.bz2\r\n==> Patching\r\npatching file boost/graph/adjacency_matrix.hpp\r\n==> ./bootstrap.sh --prefix=/usr/local/Cellar/boost/1.60.0_1 --libdir=/usr/local/Cellar/boost/1.60.0_1/lib --with-icu=/usr/local/opt/icu4c --without-libraries=python,mpi\r\n==> ./b2 headers\r\n==> ./b2 --prefix=/usr/local/Cellar/boost/1.60.0_1 --libdir=/usr/local/Cellar/boost/1.60.0_1/lib -d2 -j4 --layout=tagged --user-config=user-config.jam install threading=multi,single link=shared,static\r\nüç∫  /usr/local/Cellar/boost/1.60.0_1: 11,139 files, 441.5M, built in 31 minutes 6 seconds\r\n\r\n~ >> ncmpcpp -c .ncmpcpp/config.net\r\ndyld: Library not loaded: /usr/local/opt/icu4c/lib/libicuuc.56.dylib\r\n  Referenced from: /usr/local/bin/ncmpcpp\r\n  Reason: image not found\r\nTrace/BPT trap: 5\r\n\r\n~ >> brew reinstall boost --force --download\r\n==> Reinstalling boost with --with-icu4c\r\n==> Downloading https://downloads.sourceforge.net/project/boost/boost/1.60.0/boost_1_60_0.tar.bz2\r\nAlready downloaded: /Library/Caches/Homebrew/boost-1.60.0.tar.bz2\r\n==> Patching\r\npatching file boost/graph/adjacency_matrix.hpp\r\n==> ./bootstrap.sh --prefix=/usr/local/Cellar/boost/1.60.0_1 --libdir=/usr/local/Cellar/boost/1.60.0_1/lib --with-icu=/usr/local/opt/icu4c --without-libraries=python,mpi\r\n==> ./b2 headers\r\n==> ./b2 --prefix=/usr/local/Cellar/boost/1.60.0_1 --libdir=/usr/local/Cellar/boost/1.60.0_1/lib -d2 -j4 --layout=tagged --user-config=user-config.jam install threading=multi,single link=shared,static\r\nüç∫  /usr/local/Cellar/boost/1.60.0_1: 11,139 files, 441.5M, built in 16 minutes 1 second\r\n\r\n~ >> ncmpcpp -c .ncmpcpp/config.net\r\ndyld: Library not loaded: /usr/local/opt/icu4c/lib/libicuuc.56.dylib\r\n  Referenced from: /usr/local/bin/ncmpcpp\r\n  Reason: image not found\r\nTrace/BPT trap: 5",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 90
	},
	{
		"id" : 210489413,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-15T14:46:53Z",
		"body" : "> Unfortunately, that didn‚Äôt help.\r\n\r\nYou're right, sorry. The rebuild of `boost` was probably necessary anyway, but there's one more issue. It's now identified and a new build of `ncmpcpp` is scheduled (see Homebrew/homebrew-core#344). It should be available soon and I'll let you know here in the issue once it's ready! If you're impatient, you can fix the issue by rebuilding from source via `brew reinstall --build-from-source ncmpcpp`.\r\n\r\n> Can you maybe move the issue? I‚Äôm not sure that‚Äôs possible here.\r\n\r\nLet's keep it here. Unfortunately, there's no nice way on GitHub to move issues to other repositories.\r\n\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 90
	},
	{
		"id" : 210498823,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-15T15:10:45Z",
		"body" : "The fixed bottle should be available now. A `brew update` followed by a `brew upgrade ncmpcpp` should fix the issue. Many thanks for reporting, @fooness!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 90
	},
	{
		"id" : 210491559,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-15T14:53:56Z",
		"body" : "Good idea. Shouldn't be hard to implement, either.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 91
	},
	{
		"id" : 210517624,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-15T15:52:55Z",
		"body" : "Accidentally closed by hitting wrong button. Re-opening. Sorry.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 91
	},
	{
		"id" : 210856405,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T16:51:49Z",
		"body" : "A short-term workaround for this may be to run `brew fetch` before running `brew upgrade`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 91
	},
	{
		"id" : 210959114,
		"user" : {
			"login" : "behrang"
		},
		"created_at" : "2016-04-17T05:32:06Z",
		"body" : "I wasn't aware of that. I'll try it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 91
	},
	{
		"id" : 223026640,
		"user" : {
			"login" : "chrisfinazzo"
		},
		"created_at" : "2016-06-01T15:18:49Z",
		"body" : "This doesn't sound like a bad idea, but I would caution against one (I assume) common use case. My typical process with Homebrew has been the following steps:\r\n\r\n1. `brew update`\r\n2. `brew outdated`\r\n3. `brew upgrade` (Sometimes with the `--all` flag depending on what's changed)\r\n4. `brew doctor`\r\n5. `brew cleanup`\r\n6. `brew doctor`\r\n\r\nIt seems appropriate to check the environment after something gets installed to make sure that nothing conflicts with it from a dependency perspective. \r\n\r\nFor example, I use [rbenv][] to manage Ruby installations for several projects, but also have a version coming from Homebrew that gets skipped during updates (linking with the same version). This will probably go away when I upgrade my projects, but for now it's a concern. If you run `cleanup` at any point beforehand, I worry about breaking things. \r\n\r\n[rbenv]: https://github.com/rbenv/rbenv\r\n\r\n@MikeMcQuaid, is there a way to prevent this from happening?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 91
	},
	{
		"id" : 223035177,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-01T15:44:58Z",
		"body" : "@chrisfinazzo Note `brew upgrade --all` does nothing different to `brew upgrade`. In this issue we're not talking about automatically running `brew cleanup` (although that's something I'd like to do eventually, at least for cache cleanup) but just the equivalent of running `brew fetch` before `brew upgrade`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 91
	},
	{
		"id" : 223045880,
		"user" : {
			"login" : "chrisfinazzo"
		},
		"created_at" : "2016-06-01T16:18:51Z",
		"body" : "OK, never used `fetch` before, so I guess that's a thing. As it appears to be equivalent to \"Download only\", I can see where that would be useful.\r\n\r\nReally for anything that gets widely used (Languages, tools, etc.), the ability to sanity check is important. I'll bet @ImageMagick is glad this exists, they've had a [rough][] time of it lately.\r\n\r\n[rough]: http://arstechnica.com/security/2016/05/exploits-gone-wild-hackers-target-critical-image-processing-bug/",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 91
	},
	{
		"id" : 233339993,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-18T14:12:01Z",
		"body" : ">If it is possible, it would be great to remove old package just before installing the new one after it is downloaded.\r\n\r\nThat seems like it could be problematic for `--env=std` since the old version could be picked up during the build.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 91
	},
	{
		"id" : 238813387,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:26:57Z",
		"body" : "This has been improved as much as it will be for now. If this is still broken for you: we'll accept PRs for this but we're not actively working on it at this time.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 91
	},
	{
		"id" : 210677964,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-15T23:07:05Z",
		"body" : ":+1: It's mostly about just inverting some defaults, thus I'd be surprised to see any breakage.\r\n\r\n----\r\n\r\nNote though that the new wording of the options results in some not very intuitive results:\r\n\r\n```\r\n$ brew info bup\r\nbup: stable 0.27 (bottled), HEAD\r\n‚Ä¶ snip ‚Ä¶\r\n==> Dependencies\r\nBuild: pandoc ‚úò\r\nOptional: pandoc ‚úò\r\n‚Ä¶ snip ‚Ä¶\r\n$ brew deps --include-build bup\r\n$\r\n```\r\n\r\nIntuitively, I'd expect `pandoc` to be listed, but because `pandoc` is both a `:build` and `:optional` dependency it still gets filtered from the result set.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 92
	},
	{
		"id" : 210680198,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-15T23:17:22Z",
		"body" : ":+1: Having the `deps`/`uses` defaults match the `install` defaults makes more sense to me.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 92
	},
	{
		"id" : 210746093,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-16T06:28:27Z",
		"body" : "@UniqMartin Fixed the problem you described.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 92
	},
	{
		"id" : 210596987,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-15T18:58:58Z",
		"body" : "That message is coming from the attempt to look up issues via the Github API. Since the fix for Homebrew/legacy-homebrew#46578, Homebrew will attempt to use your Github credentials to access the API; in your case, the username and password stored in your Keychain don't appear to have the scopes required to access the API, so the API call failed.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 93
	},
	{
		"id" : 210616951,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-04-15T19:54:33Z",
		"body" : "@mistydemeo's answer also explains why I've been seeing mysterious \"can you give permission to let `git-credential-osxkeychain` access your Keychain?\" dialog boxes.  On prior versions of OS X, the dialog had a little triangle you could click which would tell you which program(s) want to access your keychain.  That triangle is no longer there, so I had absolutely no clue what was calling `git-credential-osxkeychain`.  (There really should be, dear Apple, a way to tell that either `brew` or at least `ruby` is what's behind all this.)  I therefore, out of an abundance of caution, kept hitting \"DENY\".\r\n\r\nAnyway, I guess I will just set `HOMEBREW_NO_GITHUB_API`, assuming that doing so will get rid of the messages I reported at the top of this thread.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 93
	},
	{
		"id" : 210855425,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T16:49:54Z",
		"body" : "`HOMEBREW_NO_GITHUB_API` will get rid of these messages, yes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 93
	},
	{
		"id" : 210612677,
		"user" : {
			"login" : "kafilah"
		},
		"created_at" : "2016-04-15T19:44:03Z",
		"body" : "[DepthPacketStreamParser::onDataReceived] not all subsequences received 0\r\n\r\nI keep getting this every time I run a test!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 94
	},
	{
		"id" : 210659410,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-15T21:46:53Z",
		"body" : "Sorry, but from what you posted it's not obvious whether this is a Homebrew issue or what part of Homebrew the issue is related to. To help us debug this issue, can you explain:\r\n\r\n- What you were trying to do (and why)\r\n- What happened\r\n- What you expected to happen\r\n- Step-by-step reproduction instructions (with as minimal input data as possible)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 94
	},
	{
		"id" : 211535250,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-18T19:11:22Z",
		"body" : "This looks like an issue with the OpenKinect/`libfreenect` development library. While that can be installed via Homebrew, problems coding with it are probably not due to the Homebrew installation process, and it's not something we support beyond the installation.\r\n\r\nI'm closing this out as not a Homebrew problem. If you think this is in fact an issue with Homebrew's installation of `libfreenect`, and not a problem with OpenKinect itself or your use of it, please re-open an issue on [the `homebrew/core` repo](https://github.com/homebrew/homebrew-core), where we track issues with individual formulae.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 94
	},
	{
		"id" : 210856264,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T16:51:26Z",
		"body" : "What's your shell? Are you running Homebrew inside a script or `tmux` or over SSH or anything? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 95
	},
	{
		"id" : 210982976,
		"user" : {
			"login" : "javian"
		},
		"created_at" : "2016-04-17T09:06:04Z",
		"body" : "https://github.com/nviennot/homebrew-tmate does not seem to exist so there's nothing to download.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 95
	},
	{
		"id" : 211066685,
		"user" : {
			"login" : "diversario"
		},
		"created_at" : "2016-04-17T17:33:29Z",
		"body" : "I untapped the tmate repo and error stopped üò≥",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 95
	},
	{
		"id" : 211071472,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-17T17:54:20Z",
		"body" : "@diversario I'd still be interested in the answers to those questions. I'd like to investigate this further even if it's not affecting you. Thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 95
	},
	{
		"id" : 211072758,
		"user" : {
			"login" : "diversario"
		},
		"created_at" : "2016-04-17T17:57:24Z",
		"body" : "Oh, sorry. I was about to answer that but then I deleted the tap and was, like, ¬Ø\\\\_(„ÉÑ)_/¬Ø\r\n\r\nI was manually running `brew update` in a `zsh` under `tmux`. No SSH.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 95
	},
	{
		"id" : 211077437,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-17T18:32:53Z",
		"body" : "@diversario Thanks, that'll hopefully help my reproduction; that error is not pleasant.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 95
	},
	{
		"id" : 215776902,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-29T15:58:44Z",
		"body" : "I've tried to reproduce this and failed unfortunately but will keep an eye out for more stuff like this; could be it's already been fixed accidentally.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 95
	},
	{
		"id" : 215821191,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-29T17:21:03Z",
		"body" : "Based on the format of the error message, I suspect this is a problem with OP's local `git` configuration.\r\n\r\n```\r\nerror: unable to read askpass response from 'false'\r\n```\r\n\r\nThe thing in the `'...'` quotes there is the name of the program that `git` is calling to get a password. It's set by `credential.helper` in `git` configs or by (I think) the environment variable `GIT_ASKPASS`. Looks like it was configured as if it were a boolean variable controlling whether a password is asked for. But since it's actually a string value identifying a program, `git` is running the command `false`, which produces no output and exits nonzero.\r\n\r\nI have been unable to reproduce this myself, but I haven't spent too long fiddling with the config files.\r\n\r\nIf deleting that tap fixed it, I'll bet it was either a local config setting in your cloned repo for that tap, or a `GIT_ASKPASS` env var that got set in one session and disappeared when you logged out.\r\n\r\nDon't think this is a Homebrew problem per se.\r\n\r\nIf this happens again, look at your git config settings (both global and for the repo it happened on) and your `GIT_*` environment variables.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 95
	},
	{
		"id" : 215884246,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-29T21:17:30Z",
		"body" : "> Don't think this is a Homebrew problem per se.\r\n\r\nHave you seen [this piece of code in `update.sh`](https://github.com/Homebrew/brew/blob/b0d906f0f8d90c08b0b799d5cf0fd18bf78c30da/Library/Homebrew/cmd/update.sh#L283)? :wink: It's supposed to prevent that interactive password prompts appear during parallel fetch, which would make things very annoying when fetching a bigger number of taps ‚Ä¶ See also Homebrew/legacy-homebrew#48267.\r\n\r\nI can reproduce the issue by simply doing the following:\r\n\r\n```\r\n$ git -C $(brew --repo homebrew/core) remote set-url origin https://github.com/Homebrew/homebrew-core-does-not-exist.git\r\n$ brew update\r\nerror: unable to read askpass response from 'false'\r\nfatal: could not read Username for 'https://github.com': terminal prompts disabled\r\nError: Fetching /opt/brewery/dummy/Library/Taps/homebrew/homebrew-core failed!\r\nUpdated Homebrew from 4333bce8 to b0d906f0.\r\nNo changes to formulae.\r\n```\r\n\r\nThis assumes that the GitHub HTTPS credentials are not in your keychain. As GitHub cannot answer whether a repository doesn't exist or is just private, it asks for credentials. If I try to update that repository manually, I'm greeted with the usual prompt:\r\n\r\n```\r\n$ git -C $(brew --repo homebrew/core) fetch origin\r\nUsername for 'https://github.com':\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 95
	},
	{
		"id" : 215889126,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-29T21:41:39Z",
		"body" : "> Have you seen this piece of code in update.sh?\r\n\r\nHa! I was `grep -r`ing through `Library/Homebrew and failed to give it a `-i` I guess. Sorry about that.\r\n\r\n```\r\n$ grep -ri askpass Homebrew\r\nHomebrew/cmd/update.sh:  export GIT_ASKPASS=\"false\"\r\n```\r\n\r\nOkay, that makes sense now.\r\n\r\nI wonder if there's a way to serialize password prompting across the parallel git fetches using the credential helper so we can still prompt but not spew a bunch of warnings. I think I've run in to this before and simply not known what it was - though I use the `osxkeychain` helper, so I'd get spammed with dialogs instead of see spew in the terminal window.\r\n\r\nOr maybe we could do a simple check to see if there are any (possibly) non-public repos (maybe with parallel HTTPS HEAD fetches, or just based on the standard official-repo regex pattern but allowing git/SSH transport), and then fall back to a serialized update like you suggested, of only the not-known-public ones?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 95
	},
	{
		"id" : 215892087,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-29T21:55:02Z",
		"body" : "> Or maybe we could do a simple check to see if there are any (possibly) non-public repos (maybe with parallel HTTPS HEAD fetches, or just based on the standard official-repo regex pattern but allowing git/SSH transport), and then fall back to a serialized update like you suggested, of only the not-known-public ones?\r\n\r\nI think that would create more damage than good. We nowadays keep a cache of whether a repository is private or not (see #67), but that's not useful at all in finding out whether a prompt will be needed or not. And thanks to Git's `insteadOf` URL rewriting support we can't really rely on inspecting the URLs in the `.git/config` files to make a decent decision.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 95
	},
	{
		"id" : 215998390,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-30T22:13:12Z",
		"body" : "> Have you seen this piece of code in update.sh?  It's supposed to prevent that interactive password prompts appear during parallel fetch, which would make things very annoying when fetching a bigger number of taps\r\n\r\nI suspect this may either be Git-version dependent, just doesn't work or I didn't set it correctly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 95
	},
	{
		"id" : 216000207,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-30T22:38:15Z",
		"body" : "> I suspect this may either be Git-version dependent, just doesn't work or I didn't set it correctly.\r\n\r\nMy testing is based on the Apple-provided Git client (the one bundled with Xcode 7.3) as most users are likely to be using that (or the one from the CLTs, but that's the same version). Quite possible its integration with the Keychain and other parts of the system differs subtly from the `git` Homebrew formula I suspect you are using by default.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 95
	},
	{
		"id" : 216063031,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-01T18:37:30Z",
		"body" : "> I suspect this may either be Git-version dependent, just doesn't work or I didn't set it correctly.\r\n\r\nI think it's being slightly misused, or at least used in a nonintuitive way, since that variable takes a command name instead of a boolean value. But `false` is a command, and it causes this behavior. If this is intentional, might be worth putting an explanatory comment where it's being set.\r\n\r\nFrom my reading of the `git` doco, this isn't version-dependent. I think we'll need to set something else if you want to avoid printing out this warning. I don't know what it is, but maybe something related to `credential.helper` instead of askpass-specific stuff. I suspect a lot of `brew` users (including myself) won't see this because they're using the `osxkeychain` credential helper instead of the `askpass` one.\r\n\r\nBut I think having a warning here, or at least some \"skipped updating non-accessible tap repo foocorp/foo\" progress message, is a good thing. Because it lets you know that part of the `brew update` command failed (or at least did something a user might not expect).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 95
	},
	{
		"id" : 210700332,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-04-16T00:58:41Z",
		"body" : "üê∂ üê∂ üê∂ üê∂ üê∂ üê∂ üê∂ üê∂ üê∂ üê∂ üê∂ üê∂ üê∂ üê∂ üê∂ üê∂ üê∂ üê∂ ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 96
	},
	{
		"id" : 210855790,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T16:50:28Z",
		"body" : ":shipit: :+1: :dog: :dog2: :poodle: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 96
	},
	{
		"id" : 216555805,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:58:52Z",
		"body" : "@mistydemeo Any thoughts on @xu-cheng's comment here?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 96
	},
	{
		"id" : 248614188,
		"user" : {
			"login" : "arthurnn"
		},
		"created_at" : "2016-09-21T13:36:08Z",
		"body" : "üê∂ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 96
	},
	{
		"id" : 248623357,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-21T14:08:37Z",
		"body" : "Locking conversation to avoid attracting more dog emojis.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 96
	},
	{
		"id" : 210697794,
		"user" : {
			"login" : "kyleterry"
		},
		"created_at" : "2016-04-16T00:33:54Z",
		"body" : "This was caused by something a script on my machine was souring from my .bashrc. Closing.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 97
	},
	{
		"id" : 210813365,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-16T13:12:34Z",
		"body" : "Thanks for the pull request! üéâ Homebrew depends on contributions from community members like you and we're grateful for your support.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 99
	},
	{
		"id" : 210861963,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-16T17:34:12Z",
		"body" : "Nice find.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 100
	},
	{
		"id" : 210967939,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-17T07:00:43Z",
		"body" : "So it appears it has stopped to work since the core/formula split.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 100
	},
	{
		"id" : 211777805,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-19T07:41:20Z",
		"body" : "I'm debugging this on my own repo. And I'm pretty sure this tap resolution is not the cause.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 100
	},
	{
		"id" : 211779207,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-19T07:44:18Z",
		"body" : "Cool thanks @xu-cheng ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 100
	},
	{
		"id" : 211783728,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-19T08:01:29Z",
		"body" : "@xu-cheng My feeling after looking at the Travis logs is that there's some issue with copying the `homebrew/core` repository into the right place, because of [this `brew config` output](https://travis-ci.org/Homebrew/homebrew-core/builds/124101284#L122). Have you looked at the `before_install` steps in the `.travis.yml` and checked for issues there?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 100
	},
	{
		"id" : 211784261,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-19T08:04:04Z",
		"body" : "FYI, I have identity at least one bug in `.travis.yml`:  the rsync command fails to set up the proper repo. But only fixing this rsync problem does not fully fix the bug described in the issue. So I'm still investigating.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 100
	},
	{
		"id" : 211796613,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-19T08:34:37Z",
		"body" : "The second problem I found is git reports `fatal: Not a valid object name <start-sha1>`. Seems to be a Travis bug to me, as I don't know how to fix this.\r\n\r\nI will push the fix for `rsync` problem first.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 100
	},
	{
		"id" : 211799131,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-19T08:39:12Z",
		"body" : "It may just be worth removing the `rsync` stuff altogether and doing a full new re-tap/pull for now until you get it working.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 100
	},
	{
		"id" : 211905571,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-19T12:43:43Z",
		"body" : "So it appears that https://github.com/Homebrew/homebrew-core/commit/dbf25c038e3da6e2669831a21f7f64878fab14a9 has fixed this issue. The git problem could be a temporary thing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 100
	},
	{
		"id" : 211920265,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-19T13:18:06Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 100
	},
	{
		"id" : 210965792,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-17T06:34:18Z",
		"body" : "LGTM, have you test it under Ruby 1.8?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 101
	},
	{
		"id" : 210966096,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-17T06:38:42Z",
		"body" : "> have you test it under Ruby 1.8?\r\n\r\nYes, I have. (The new code is also covered by the tests and they succeeded on Maverikcks with 1.8.7.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 101
	},
	{
		"id" : 211042668,
		"user" : {
			"login" : "The-Compiler"
		},
		"created_at" : "2016-04-17T15:13:50Z",
		"body" : "Thanks for the quick fix! I can't test it right now, but the new behaviour definitely makes sense!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 101
	},
	{
		"id" : 211077425,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-17T18:32:32Z",
		"body" : "Agreed with @xu-cheng's comment but otherwise üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 101
	},
	{
		"id" : 210966117,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-17T06:39:23Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 102
	},
	{
		"id" : 211077360,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-17T18:31:31Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 102
	},
	{
		"id" : 211077059,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-17T18:29:41Z",
		"body" : "I like this üëç but a few nits.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 103
	},
	{
		"id" : 211101461,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-17T19:57:59Z",
		"body" : "Updated and incorporated the code comments.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 103
	},
	{
		"id" : 211121312,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-17T21:55:21Z",
		"body" : ":+1: The existing complicated `help` behavior puts a knot in option handling, and this helps untangle it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 103
	},
	{
		"id" : 211121356,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-17T21:56:21Z",
		"body" : "Nitpick though: maybe the PR could be more specific than \"various improvements\", especially since this changes user-facing behavior, so that people browsing the PR list would know to pay more attention to it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 103
	},
	{
		"id" : 211126159,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-17T22:57:05Z",
		"body" : "> Nitpick though: maybe the PR could be more specific than \"various improvements\", especially since this changes user-facing behavior, so that people browsing the PR list would know to pay more attention to it.\r\n\r\nThanks for this input! I've to admit that I didn't put much thought into the PR title. Maybe the core problem is that I lumped together several somewhat related changes because I felt they didn't deserve their own independent PRs. Anyway, I retroactively changed the title and I hope it has improved.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 103
	},
	{
		"id" : 211127501,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-17T23:17:50Z",
		"body" : "Yep!\r\n\r\nThis was just on my mind after reading some of the user feedback and discussion after the core/formula split. My takeaway from that is that the PR queue is a major form of communicating recent and upcoming changes to users. And since most don't have time to read everything, at best they'll just be skimming the list and seeing the subject lines, and diving in to the few whose subjects look relevant to them.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 103
	},
	{
		"id" : 211073481,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-17T18:06:30Z",
		"body" : "Thanks for the report, @kirb! Can you provide the output of `brew config` and `brew doctor` just in case those information help us narrow down the circumstances under which this can happen? This seems to be the same issue like in #26. Sadly, I'm not able to reproduce this, thus I'm not sure how to best debug this or improve on our error handling ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 104
	},
	{
		"id" : 211136329,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-18T00:10:07Z",
		"body" : "Also possibly related: older issues with symlinks due to apparent filesystem corruption: \r\n\r\nhttps://github.com/Homebrew/legacy-homebrew/issues/41640 - Error: invalid byte sequence in UTF-8\r\n\r\nhttps://github.com/Homebrew/legacy-homebrew/issues/20712 - brew doctor error message: Error: pathname contains \\0",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 104
	},
	{
		"id" : 211138649,
		"user" : {
			"login" : "kirb"
		},
		"created_at" : "2016-04-18T00:30:57Z",
		"body" : "brew config:\r\n\r\n```\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: f15b631875ef19599bcb4e774d3e67596d1f93ac\r\nLast commit: 2 hours ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: b396048d6dfc0987a2adea82fbe5749a36e04a53\r\nCore tap last commit: 22 minutes ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: quad-core 64-bit haswell\r\nOS X: 10.11.4-x86_64\r\nXcode: 7.3\r\nCLT: N/A\r\nClang: 7.3 build 703\r\nX11: N/A\r\nSystem Ruby: 2.0.0-p648\r\nPerl: /usr/local/bin/perl => /usr/local/Cellar/perl/5.22.1/bin/perl\r\nPython: /usr/local/bin/python => /usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/bin/python2.7\r\nRuby: /usr/local/bin/ruby => /usr/local/Cellar/ruby/2.3.0/bin/ruby\r\nJava: N/A\r\n```\r\n\r\nbrew doctor:\r\n\r\n```\r\nPlease note that these warnings are just used to help the Homebrew maintainers\r\nwith debugging if you file an issue. If everything you use Homebrew for is\r\nworking fine: please don't worry and just ignore them. Thanks!\r\n\r\nWarning: The filesystem on / appears to be case-sensitive.\r\nThe default OS X filesystem is case-insensitive. Please report any apparent problems.\r\n\r\nWarning: You have unlinked kegs in your Cellar\r\nLeaving kegs unlinked can lead to build-trouble and cause brews that depend on\r\nthose kegs to fail to run properly once built. Run `brew link` on these:\r\n    gpg-agent\r\n\r\nWarning: Some keg-only formula are linked into the Cellar.\r\nLinking a keg-only formula, such as gettext, into the cellar with\r\n`brew link <formula>` will cause other formulae to detect them during\r\nthe `./configure` step. This may cause problems when compiling those\r\nother formulae.\r\n\r\nBinaries provided by keg-only formulae may override system binaries\r\nwith other strange results.\r\n\r\nYou may wish to `brew unlink` these brews:\r\n    homebrew/dupes/bzip2\r\n```\r\n\r\n(gpg-agent conflicts with GPGTools gpg-agent, and I intentionally force linked bzip2.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 104
	},
	{
		"id" : 216553989,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:53:08Z",
		"body" : "@UniqMartin I see you assigned this; what are your thoughts here?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 104
	},
	{
		"id" : 216566110,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-03T15:29:44Z",
		"body" : "@mikemcquaid I'd like to look into this and improve the error handling, but haven't done so yet. (Using assignments as some form of TO DO list.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 104
	},
	{
		"id" : 216570354,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T15:40:36Z",
		"body" : "@UniqMartin Cool, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 104
	},
	{
		"id" : 238813425,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:27:09Z",
		"body" : "If this is still broken for you: we'll accept PRs for this but we're not actively working on it at this time.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 104
	},
	{
		"id" : 211049530,
		"user" : {
			"login" : "cash1981"
		},
		"created_at" : "2016-04-17T16:06:46Z",
		"body" : "Never mind, my bad. I just had to type enter. DOH!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 105
	},
	{
		"id" : 211487606,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-18T17:29:54Z",
		"body" : "GitHub support responded. They're looking in to it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 106
	},
	{
		"id" : 213956402,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-24T13:36:16Z",
		"body" : "Any updates from GitHub support? If not, we might want to temporarily (or permanently) change that link to https://github.com/bbatsov/ruby-style-guide which is also the basis for our automated style checking with RuboCop (though we've disabled/relaxed some rules).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 106
	},
	{
		"id" : 213989860,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-24T16:03:37Z",
		"body" : "It's been taken down temporarily but will be coming up again at some point in the near future, apparently.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 106
	},
	{
		"id" : 214010443,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-24T18:05:44Z",
		"body" : "Yes, GitHub support replied that the style guide was unshipped, but \"[t]his is only temporary, and the styleguides will be back and much improved\". (They didn't actually take this long to respond; I got a response a couple days back and it just sat in my inbox due to me being busy and/or disorganized.)\r\n\r\n:+1: to changing link to bbatsov's style guide in the mean time, with a note that we used to use GitHub's guide when it existed. GitHub's own style guide was based on it too; the acknowledgment is right up top. (https://web.archive.org/web/20160410033955/https://github.com/styleguide/ruby for reference.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 106
	},
	{
		"id" : 216446802,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T06:12:26Z",
		"body" : "PR is at https://github.com/Homebrew/brew/pull/189",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 106
	},
	{
		"id" : 211211941,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-18T05:37:57Z",
		"body" : "> ```\r\n> ==> brew linkage --test vislcg3\r\n> Broken dylib links:\r\n>   /usr/local/opt/icu4c/lib/libicui18n.56.dylib\r\n>   /usr/local/opt/icu4c/lib/libicuio.56.dylib\r\n>   /usr/local/opt/icu4c/lib/libicuuc.56.dylib\r\n>   @rpath/libcg3.0.dylib\r\n>  ```\r\n\r\nTo avoid getting false positives like in the quoted example, we either need to teach `brew linkage` how to properly resolve the special linker path prefixes `@executable_path/`, `@loader_path/`, and `@rpath/` (resolving all of them correctly is non-trivial and sometimes even impossible) or we need to ignore those entries as far as our check for brokenness is concerned (we're building most things with absolute paths anyway, so we're not missing much). I'm strongly suggesting the latter option.\r\n\r\nOtherwise generally :+1: on this.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 107
	},
	{
		"id" : 211238073,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T07:10:30Z",
		"body" : "Seems good, thanks for this üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 107
	},
	{
		"id" : 211239324,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-18T07:12:53Z",
		"body" : "Switched to testing bottled dependents only.\r\n\r\nI modified it to treat install paths starting with `@` variables as a different category, and to not consider them as broken links. New output:\r\n\r\n```\r\n$ brew linkage vislcg3\r\nSystem libraries:\r\n  /usr/lib/libSystem.B.dylib\r\n  /usr/lib/libc++.1.dylib\r\nVariable-referenced libraries:\r\n  @rpath/libcg3.0.dylib\r\nMissing libraries:\r\n  /usr/local/opt/icu4c/lib/libicui18n.56.dylib\r\n  /usr/local/opt/icu4c/lib/libicuio.56.dylib\r\n  /usr/local/opt/icu4c/lib/libicuuc.56.dylib\r\n$ brew linkage --test vislcg3\r\nBroken dylib links:\r\n  /usr/local/opt/icu4c/lib/libicui18n.56.dylib\r\n  /usr/local/opt/icu4c/lib/libicuio.56.dylib\r\n  /usr/local/opt/icu4c/lib/libicuuc.56.dylib\r\n[‚úò /usr/local on ‚áÑ detect-broken-dylibs ¬±]\r\n```\r\n\r\nI read a couple articles on the `@xxx/...` install path form, including [Mike Ash's Q&A](https://www.mikeash.com/pyblog/friday-qa-2009-11-06-linking-and-install-names.html), `man dyld`, and `man install_name_tool`. I think validating these is impossible for us, since they are relative paths that are evaluated, at least in part, relative to the program or framework that is linking to the library, which we don't know when we're examining the library on its own. And per the docs, an `@rpath` that does not resolve is not an error.\r\n\r\n(To be strict, maybe we should be checking for unresolved symbols before complaining about referenced library paths that don't resolve. But I think 99% of the time they'll be an error for us regardless, so we probably don't have to check the symbols, too.)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 107
	},
	{
		"id" : 211404426,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-18T14:29:39Z",
		"body" : "@mikemcquaid You're welcome!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 107
	},
	{
		"id" : 211509210,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-18T18:16:13Z",
		"body" : "And here's what the results look like, from https://github.com/Homebrew/homebrew-core/pull/427.\r\n\r\n<img width=\"785\" alt=\"screen shot 2016-04-18 at 2 14 32 pm\" src=\"https://cloud.githubusercontent.com/assets/2618447/14614639/0adac93a-0570-11e6-8155-14a6edef94ed.png\">\r\n\r\n<img width=\"446\" alt=\"screen shot 2016-04-18 at 2 14 47 pm\" src=\"https://cloud.githubusercontent.com/assets/2618447/14614643/0e418b4a-0570-11e6-8ff6-a1b7772e8707.png\">\r\n\r\nGonna go make a revision-bump PR now... :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 107
	},
	{
		"id" : 214843006,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T18:36:28Z",
		"body" : "It's working! We've caught dylib breakage in PRs a couple times this last week. Example: https://github.com/Homebrew/homebrew-core/pull/621",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 107
	},
	{
		"id" : 216366064,
		"user" : {
			"login" : "ahundt"
		},
		"created_at" : "2016-05-02T21:13:00Z",
		"body" : "cool! so is this functionality integrated or not merged? confused by the red closing of the pull request.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 107
	},
	{
		"id" : 216387709,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-02T22:47:20Z",
		"body" : "Thanks! It's integrated and running now (at least for in-tap dependencies), and we've already caught and fixed a couple broken bottles with it.\r\n\r\nMost of our closed pull requests for things that get accepted are still red \"closed\" instead of purple \"merged\" because we usually use `brew pull` instead of GitHub's \"merge\" button to do the merging. This allows us to edit commit messages, link commit messages back to PRs, include test-bot-generated bottle pulls, squash commits, do local testing, and so on.\r\n\r\nIf the message says something with a commit identifier like \"apjanke closed this in da34fba 14 days ago\", that means it was accepted and merged. If the message just says \"apjanke closed this 14 days ago\" that means it was probably rejected or superseded, and there should be an explicit comment in the discussion indicating why it was rejected.\r\n\r\nSorry if this is confusing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 107
	},
	{
		"id" : 216387851,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-02T22:48:14Z",
		"body" : "Maybe GitHub could make a special \"Mark as manually merged\" button. But maybe that would break their model with tight coupling between commit history and issues.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 107
	},
	{
		"id" : 216396506,
		"user" : {
			"login" : "ahundt"
		},
		"created_at" : "2016-05-02T23:40:29Z",
		"body" : "ah ok I see now, thanks for the clarification! It would be nice if github allowed things to be made clearer more easily...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 107
	},
	{
		"id" : 211234205,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T07:02:33Z",
		"body" : "> It feels a little heavy-handed and unnecessary, given that the URL still matches GitHub + the Homebrew organisation.\r\n\r\nAgreed üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 108
	},
	{
		"id" : 211234312,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T07:02:47Z",
		"body" : "CC @ilovezfs for thoughts",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 108
	},
	{
		"id" : 211237960,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-18T07:10:18Z",
		"body" : "As documented in the manpage (https://github.com/Homebrew/brew/blob/master/share/man/man1/brew.1#L415), yes it was intentional. This was a change requested by @apjanke ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 108
	},
	{
		"id" : 211241928,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T07:25:56Z",
		"body" : "@ilovezfs @apjanke Can you elaborate a bit more or point to context anywhere? I'm not sure what my feelings are yet. If nothing else we should guard this with `HOMEBREW_DEVELOPER` I think so people can still use SSH auth if they want to.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 108
	},
	{
		"id" : 211242707,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-18T07:29:06Z",
		"body" : "https://github.com/Homebrew/legacy-homebrew/pull/50639",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 108
	},
	{
		"id" : 211243571,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T07:33:08Z",
		"body" : "Cheers!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 108
	},
	{
		"id" : 211243671,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-18T07:33:28Z",
		"body" : "Yeah, my intention was to make sure that `brew tap foo <some-url>` made sure that tap `foo` was pointing to the requested origin, so it didn't blindly succeed but leave a tap pointing to some other repo source, preventing stuff like this from succeeding silently.\r\n\r\n```\r\nbrew tap bob/burgers http://git.bobs-burgers.com/bob/recipes.git\r\n...\r\nbrew tap bob/burgers http://mcdonalds.com/git/ronald/recipes.git\r\n```\r\n\r\nI didn't know about `git` remote overrides at the time, and the idea wasn't to prevent changing the transport mechanism; just to make sure that the target origin repo was as requested in the most recent command.\r\n\r\nMaybe we could munge it to treat `https://github.com/` and `git@github.com:` as equivalent?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 108
	},
	{
		"id" : 211243898,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T07:34:36Z",
		"body" : "> Maybe we could munge it to treat https://github.com/ and git@github.com: as equivalent?\r\n\r\nThat'd be good. Similarly `git://github.com/`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 108
	},
	{
		"id" : 211362772,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-18T12:41:45Z",
		"body" : "The quickest fix is:\r\n```diff\r\ndiff --git a/Library/Homebrew/tap.rb b/Library/Homebrew/tap.rb\r\nindex 042f1af..11370ca 100644\r\n--- a/Library/Homebrew/tap.rb\r\n+++ b/Library/Homebrew/tap.rb\r\n@@ -188,9 +188,9 @@ class Tap\r\n     requested_remote = options[:clone_target] || \"https://github.com/#{user}/homebrew-#{repo}\"\r\n \r\n     if installed?\r\n-      raise TapRemoteMismatchError.new(name, @remote, requested_remote) unless remote == requested_remote\r\n       raise TapAlreadyTappedError, name unless full_clone\r\n       raise TapAlreadyUnshallowError, name unless shallow?\r\n+      raise TapRemoteMismatchError.new(name, @remote, requested_remote) unless remote == requested_remote\r\n     end\r\n \r\n     # ensure git is installed\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 108
	},
	{
		"id" : 211621264,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-18T23:01:18Z",
		"body" : "I get why this sequence should produce an error (in an effort not to ignore the second URL):\r\n\r\n```\r\nbrew tap some/tap <original-url> \r\nbrew tap some/tap <different-rul>\r\n```\r\n\r\nBut it feels like we've made `brew tap` complain for this case:\r\n\r\n```\r\nbrew tap some/tap <original-url>\r\nbrew tap some/tap\r\n```\r\n\r\nIn this second case there's no second URL that we might be ignoring, so complaining that the original URL is not the one we believe it should be doesn't seem to make sense (to me). We should be trusting that the URL stored in this tap's Git config is just fine.\r\n\r\nI think the URL rewriting happening via `url.*.insteadOf` isn't even relevant to this discussion. I suspect that the tap in question actually has a `git@github.com:Homebrew/homebrew-fuse.git` in its `.git/config`, because we're directly querying the config which doesn't involve applying transformations implied by `url.*.insteadOf`, unless this has changed in a more recent version of Git. Maybe to make things clearer:\r\n\r\n```\r\n$ git -C $(brew --repo homebrew/fuse) remote -v\r\norigin https://github.com/Homebrew/homebrew-fuse.git (fetch)\r\norigin https://github.com/Homebrew/homebrew-fuse.git (push)\r\n$ brew tap-info homebrew/fusehomebrew/fuse: unpinned, 27 formulae\r\n/opt/brewery/tests/Library/Taps/homebrew/homebrew-fuse (81 files, 117.5K)\r\nFrom: github-ro://Homebrew/homebrew-fuse.git\r\n```\r\n\r\n(Notice the different URLs being reported, the former output takes into account `url.*.insteadOf`.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 108
	},
	{
		"id" : 211628718,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-18T23:24:21Z",
		"body" : "> I suspect that the tap in question actually has a git@github.com:Homebrew/homebrew-fuse.git in its .git/config\r\n\r\nIt does, yeah üëç. Before I slapped it on globally I overwrote the remotes of various taps to use SSH via the standard `git remote xyz` command, which produced this:\r\n```\r\n[branch \"master\"]\r\n[remote \"origin\"]\r\n\turl = git@github.com:Homebrew/homebrew-fuse.git\r\n\tfetch = +refs/heads/*:refs/remotes/origin/*\r\n[remote \"Dom\"]\r\n\turl = git@github.com:DomT4/homebrew-fuse.git\r\n\tfetch = +refs/heads/*:refs/remotes/Dom/*\r\n```\r\n\r\nThe `tap` command doesn't care about the taps I haven't fiddled the remotes on, even with the global override.\r\n\r\nI still consider the change unnecessarily breaking here; as long as the URL equals GitHub + the Homebrew organisation in this case I don't think we should be policing method of transport generally. I don't have strong feelings on how it should be fixed, but treating the various potential URLs as equally valid seems fine to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 108
	},
	{
		"id" : 211796784,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-19T08:34:54Z",
		"body" : "Thanks @xu-cheng!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 108
	},
	{
		"id" : 211173031,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-18T03:28:58Z",
		"body" : "CC @mikemcquaid. (Others are perfectly welcome to comment as well, but Mike was the one who I mentioned the problem to in the `sqlite` PR a week ago or so, hence follow-up ping).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 109
	},
	{
		"id" : 211193317,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-18T04:17:06Z",
		"body" : "Sorry for being this critical in my code comments. I agree that we need to fix this, but my feeling is that neither `cleanup_before` nor `cleanup_after` are fit for the task. If my understanding of the control flow in `test-bot` is right, here's what I think could work well:\r\n\r\n- At the very start in `Homebrew.test_bot` (instead of just tapping/unshallowing one tap):\r\n  - Determine the list of required taps (`homebrew/core` and tap to operate on).\r\n  - Determine the list of currently installed taps.\r\n  - Untap currently installed but unneeded taps (probably only when `--cleanup` is passed to avoid wiping repositories in a local test run outside of CI).\r\n  - Tap currently not installed but required taps.\r\n- Keep `cleanup_before` and `cleanup_after` unchanged, including their tap-preserving behavior.\r\n\r\nWhat do you think?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 109
	},
	{
		"id" : 211235839,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T07:06:43Z",
		"body" : "This seems reasonable to me and I personally think the code is living in the correct place (although it could be pulled to a function perhaps to reduce duplication.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 109
	},
	{
		"id" : 211236194,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T07:07:40Z",
		"body" : "Actually, now I think about it, we've already fixed the `HOMEBREW_RUBY` issue (it's now using a Ruby installed elsewhere on the filesystem and Travis no longer uses 1.8) so I think we can just change that into `--exclude=/Library/Taps/Homebrew/homebrew-core` and it should work?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 109
	},
	{
		"id" : 211426289,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-18T15:17:37Z",
		"body" : "> Sorry for being this critical in my code comments.\r\n\r\nAt 5 in the morning with something that took less than 10 minutes to write and partially test locally you could've thrown rocks at my face and got a fairly warm response üòÑ.\r\n\r\n> What do you think?\r\n\r\nTo be honest I didn't want to over-engineer the solution. The current problem was caused by two lines being modified and I felt like it'd be overkill to do anything beyond add a couple more lines to restore it to a state closer to how it used to be. I'm fond of minimalism, but I don't have a strong objection to going bigger if there's appetite for it.\r\n\r\n> so I think we can just change that into --exclude=/Library/Taps/Homebrew/homebrew-core and it should work?\r\n\r\nThis was the first thing I tried, but it didn't seem to work locally:\r\n\r\n```\r\ncd /tmp/brewtest\r\nbin/brew tap homebrew/versions\r\ngit clean -ffdx --exclude=/Library/Taps/Homebrew/homebrew-core\r\n...\r\nRemoving Library/Taps/\r\nRemoving cache/\r\n...\r\nbin/brew tap\r\n< nothing >\r\n```\r\nUsing lowercase for `Homebrew` in that command didn't resolve the issue either.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 109
	},
	{
		"id" : 211434745,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T15:34:40Z",
		"body" : "> Removing Library/Taps/\r\n\r\nMaybe `--exclude=Library/Taps/Homebrew/homebrew-core` (without starting `/`)? If we can't get it working: no worries.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 109
	},
	{
		"id" : 211435097,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T15:35:20Z",
		"body" : "> If we can't get it working: no worries.\r\n\r\nAnd by this I mean: :shipit: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 109
	},
	{
		"id" : 211439362,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-18T15:45:51Z",
		"body" : "It seems that it would only work if you pass `-f` instead of `-ff`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 109
	},
	{
		"id" : 211444328,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-18T15:57:18Z",
		"body" : ">  (without starting /)?\r\n\r\nNo dice here on that sadly.\r\n\r\n> It seems that it would only work if you pass -f instead of -ff.\r\n\r\nHmm, that seems to preserve all taps for me:\r\n```\r\n~> git clean -fdx --exclude=/Library/Taps/homebrew/homebrew-core\r\nSkipping repository Library/Taps/homebrew/homebrew-core\r\nSkipping repository Library/Taps/homebrew/homebrew-versions\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 109
	},
	{
		"id" : 211462974,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-18T16:39:45Z",
		"body" : "Alright, rolling this in. Will schedule something in Versions shortly after just to check it doesn't do anything unhelpful in tap builds.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 109
	},
	{
		"id" : 211472541,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-18T16:57:14Z",
		"body" : "@UniqMartin You were right on tap builds, at least. I believe the tapping for cross-tap dependencies happens during the `formula` step and consequently core builds would be fine with the mechanism during `cleanup_before`, but evidently that's problematic for taps:\r\n\r\n```\r\n==> Tapping homebrew/versions\r\nCloning into '/usr/local/Library/Taps/homebrew/homebrew-versions'...\r\nTapped 261 formulae (285 files, 2.9M)\r\nHEAD is now at 46cfc98 test-bot: purge non-core taps at start/end of job (#109)\r\nAlready on 'master'\r\nUntapping homebrew/versions... (286 files, 2.9M)\r\nUntapped 261 formulae\r\n==> git reset --hard\r\nError: No such file or directory - /usr/local/Library/Taps/homebrew/homebrew-versions\r\n```\r\n\r\nI've removed that in https://github.com/Homebrew/brew/commit/c3c233dd809f9c358ba8aa5268b64c335202bc56 for now. Theoretically untapping as part of `cleanup_after` should be fine, presuming the prior job exits cleanly (Jenkins doesn't crash, more bluntly), but may well revisit adding logic to untap everything but core + current tap.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 109
	},
	{
		"id" : 211490237,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-18T17:35:08Z",
		"body" : "Seems to work as intended now:\r\n\r\n```\r\n==> git reset --hard\r\n==> brew cleanup --prune=7\r\n==> git clean -ffdx\r\nHEAD is now at c3c233d test-bot: don't untap during cleanup_before\r\nUntapping homebrew/versions... (289 files, 2.9M)\r\nUntapped 261 formulae\r\nRemoving Cellar/\r\nRemoving Library/Homebrew/test/.bundle/\r\nRemoving Library/Homebrew/test/fs_leak_log\r\nRemoving Library/Homebrew/test/vendor/\r\nRemoving share/info/\r\n```\r\n\r\nAnd in an immediate follow-up test core PR that requires a `homebrew/versions` dependency:\r\n\r\n```\r\n==> brew uses wget\r\n==> Tapping homebrew/versions\r\nCloning into '/usr/local/Library/Taps/homebrew/homebrew-versions'...\r\nTapped 261 formulae (286 files, 1M)\r\n==> brew fetch --retry homebrew/versions/boost159 makedepend openssl pkg-config xz\r\n...\r\n==> brew uninstall --force homebrew/versions/boost159 openssl\r\n==> git checkout master -f\r\n==> git reset --hard\r\n==> brew cleanup --prune=7\r\n==> git clean -ffdx\r\nHEAD is now at c3c233d test-bot: don't untap during cleanup_before\r\nUntapping homebrew/versions... (286 files, 1M)\r\nUntapped 261 formulae\r\nRemoving Cellar/\r\n...\r\n```\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 109
	},
	{
		"id" : 211511843,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-18T18:20:17Z",
		"body" : "Maybe we could add `homebrew/science` and `homebrew/dupes` back in? Untapping them defeats the dylib-breakage checks from #427, and I think will prevent all tests of those dependents. I know it costs extra time, but the `science` and `dupes` at least aren't that big. Seems worthwhile to me. IIRC, it seems like it's usually `homebrew/php` that's blowing things up unnecessarily.\r\n\r\nSorry I'm only getting to this now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 109
	},
	{
		"id" : 211513808,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-18T18:23:21Z",
		"body" : "I don't want to slay Science too much here because I appreciate their work, but they are _by far_ one of the most problematic taps to keep around. They keep more complicated formulae than we'd often permit in the core, and breakage is not infrequent.\r\n\r\nFrankly, from a personal point of view, until we can promise to do cross-tap CI properly we're only asking for trouble to do it in a half-hearted way. We haven't deliberately CI tested cross-tap to date unless cross-tap dependencies were invoked, and I think that system was an eminently sensible one. The taps aren't at the same standard as the core, and that's a massive problem for contributors and CI.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 109
	},
	{
		"id" : 211524912,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T18:51:45Z",
		"body" : "> Frankly, from a personal point of view, until we can promise to do cross-tap CI properly we're only asking for trouble to do it in a half-hearted way. We haven't deliberately CI tested cross-tap to date unless cross-tap dependencies were invoked, and I think that system was an eminently sensible one. The taps aren't at the same standard as the core, and that's a massive problem for contributors and CI.\r\n\r\nAgreed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 109
	},
	{
		"id" : 211600904,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-18T22:07:31Z",
		"body" : "I have to agree with Dom and Mike. That we were testing with formulae from other taps for core PRs was an accident. Also the CI impact is sometimes non-trivial, because even if we are testing only bottled formulae, sometimes those bottled formulae pull in a dependency with non-standard options, meaning this seemingly innocent and quick test suddenly means a big dependency needs to be built from source. (One example from core would be `ncmpcpp` that, while being bottled, implies a from-source build of `boost`.) And I believe `homebrew/science` has quite a few formulae that fall into this category.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 109
	},
	{
		"id" : 211601872,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-18T22:12:12Z",
		"body" : "This is fine by me then. I do remember a non-standard `boost` build like that clogging up the CI, and some similar stuff too. And it seems to me that the relatively fast CI we've had lately has been good for our productivity and morale, on both maintainer and contributor sides.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 109
	},
	{
		"id" : 211602030,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-18T22:12:59Z",
		"body" : "> Actually, now I think about it, we've already fixed the `HOMEBREW_RUBY` issue (it's now using a Ruby installed elsewhere on the filesystem and Travis no longer uses 1.8) so [‚Ä¶]\r\n\r\nYeah, sounds like a good idea to remove this check, so that more stuff gets cleaned on our Mavericks CI. Even better would be to make the check slightly more sophisticated, i.e. if the Ruby we're running on happens to live in our Cellar, don't clean. Otherwise do. At least that would do the right thing in all circumstances I can currently think of and is easier to understand than why a cleaning step is omitted if `HOMEBREW_RUBY` happens to be set to a certain value.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 109
	},
	{
		"id" : 211763237,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-19T07:05:28Z",
		"body" : "Yeh, let's remove on Mavericks too üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 109
	},
	{
		"id" : 211237026,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-18T07:09:08Z",
		"body" : "All these changes seem non-invasive and reasonable. They may even end up helping Linuxbrew too üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 110
	},
	{
		"id" : 211407953,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-18T14:40:13Z",
		"body" : ":+1: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 110
	},
	{
		"id" : 211487251,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-18T17:29:06Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 110
	},
	{
		"id" : 211793332,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-19T08:28:56Z",
		"body" : "A few comments but otherwise LGTM üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 112
	},
	{
		"id" : 212064598,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-19T18:45:22Z",
		"body" : "Switched to \"in progress\" while I look at switching to Rubocop's JSON output instead of parsing their normal results output.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 112
	},
	{
		"id" : 212117474,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-19T20:36:49Z",
		"body" : "I rewrote the `rubocop` interaction using its JSON output, per @xu-cheng's suggestion. Now we're using the appropraite machine-readable format, results for multiple files are represented correctly, and the `rubocop` checks can be done in a single batch up front to avoid the cost of shelling out to `rubocop` separately for each formula.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 112
	},
	{
		"id" : 212118066,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-19T20:37:58Z",
		"body" : "Question: the `==> audit problems` `ohai` header is only displayed when `--strict` is given. Why is that?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 112
	},
	{
		"id" : 212289061,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-20T07:03:01Z",
		"body" : "> Question: the ==> audit problems ohai header is only displayed when --strict is given. Why is that?\r\n\r\nCould just be a mistake. Feel free to address it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 112
	},
	{
		"id" : 212289412,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-20T07:05:15Z",
		"body" : "Looks good to me üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 112
	},
	{
		"id" : 212655575,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-20T23:52:16Z",
		"body" : "Amended to address the latest round of output.\r\n\r\nTwo significant changes: \r\n\r\nBefore, the `style` checks were only run when you specified files or formulae, and were skipped when you did a plain `brew audit` to check everything. Now it runs style checks too, since we can specify the correct set of files.\r\n\r\nRemoved the empty line between formulae in the output (and changed to 2-space indent for the bullet lists). Martin and I think it's more readable and a better use of space this way. IMHO, especially true now that `audit` has been tweaked to work better for large batches of files, and now includes `style` output in sections that previously did not have it.\r\n\r\nNew output:\r\n\r\n```\r\n$ brew audit a* b* c* --strict\r\nhomebrew/science/abinit:\r\n  * Use '--without-test' instead of '--without-check'. Migrate '--without-check' with `deprecated_option`.\r\nhomebrew/science/abyss:\r\n  * Options should begin with with/without. Migrate '--enable-maxk=' with `deprecated_option`.\r\n  * Use '--without-test' instead of '--without-check'. Migrate '--without-check' with `deprecated_option`.\r\nhomebrew/science/adam:\r\n  * `option` (line 21) should be put before `depends_on` (line 14)\r\n  * Description is too long. \"name: desc\" should be less than 80 characters.\r\nLength is calculated as adam + desc. (currently 112)\r\n  * Use '--without-test' instead of '--without-check'. Migrate '--without-check' with `deprecated_option`.\r\nhomebrew/science/alembic:\r\n  * `head` (line 17) should be put before `bottle block` (line 10)\r\n  * A `test do` test block should be added\r\nhomebrew/science/alglib:\r\n  * Formula should have a desc (Description).\r\nhomebrew/science/alpscore:\r\n  * Use '--with-test' instead of '--with-check'. Migrate '--with-check' with `deprecated_option`.\r\n  * C: 27: col 25: Don't use parentheses around a method call.\r\nhomebrew/science/amos:\r\n  * Description shouldn't start with an indefinite article (A)\r\n```\r\n\r\nThe format for multi-line problems is ugly, with 2nd and later lines not being indented, like \"Length...\" in the following.. Going to do something about that while I'm in here.\r\n\r\n```\r\n  * Description is too long. \"name: desc\" should be less than 80 characters.\r\nLength is calculated as adam + desc. (currently 112)\r\n  * Use '--without-test' instead of '--without-check'. Migrate '--without-check' with `deprecated_option`.\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 112
	},
	{
		"id" : 212658080,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-20T23:59:23Z",
		"body" : "That turned out to be easier than I feared.\r\n\r\n```\r\nhomebrew/science/adam:\r\n  * `option` (line 21) should be put before `depends_on` (line 14)\r\n  * Description is too long. \"name: desc\" should be less than 80 characters.\r\n    Length is calculated as adam + desc. (currently 112)\r\n  * Use '--without-test' instead of '--without-check'. Migrate '--without-check' with `deprecated_option`.\r\nhomebrew/science/alembic:\r\n```\r\n\r\nI think this is ready to go now, pending y'all's feedback on the output format change.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 112
	},
	{
		"id" : 212796450,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-21T08:06:11Z",
		"body" : "Looking good to me üëç. We can always iterate after shipping.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 112
	},
	{
		"id" : 212996830,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-21T16:29:04Z",
		"body" : ":+1: I can think of a few minor improvements, but they can wait and I've pestered you enough in this PR. I'm really happy with the code now (and the major improvement to `brew audit` hidden therein).\r\n\r\nWhat I'd really like you to consider for future PRs (or even this PR, if you feel like retroactively doing this) would be not to lump all changes into a single commit. It's really hard to digest once some time has passed and you're looking at the Git history. Looking at the current code, here's what the theme of individual commits could be (they should be all independent and build on top of each other):\r\n\r\n- utils: add `popen_read_text`\r\n- utils: refactor `inject_dump_stats!` to be independent of `Homebrew::Diagnostic::Checks` (and adapt `cmd/doctor.rb`, `diagnostic.rb` accordingly).\r\n- style: refactor and use RuboCop JSON interface\r\n- style: add documentation\r\n- audit: use generalized `inject_dump_stats!`\r\n- audit: better integrate style checks",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 112
	},
	{
		"id" : 213039687,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T18:00:40Z",
		"body" : "Sorry! I've gotten used to squashing to a single commit to formula changes; maybe overapplied it here.\r\n\r\nI could still break these out to multiple commits if you think it would help readability. (Some `git` clients I use make that pretty easy; maybe they foresaw this situation.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 112
	},
	{
		"id" : 213041928,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-21T18:09:00Z",
		"body" : "> Sorry! I've gotten used to squashing to a single commit to formula changes; maybe overapplied it here.\r\n\r\nNo need to apologize! It's just something that I noticed and I wanted to make you aware of. Just pretend for a moment that there's a breaking change in `audit` (very unlikely) introduced by this code. It would be a shame to have to revert all the other improvements also contained in the same commit and then again work on a fairly big chunk to get things sorted out.\r\n\r\n> I could still break these out to multiple commits if you think it would help readability. (Some `git` clients I use make that pretty easy; maybe they foresaw this situation.)\r\n\r\nI'd leave this decision up to you. It's obviously easier to do when things get split right from the start. I'm also fine merging it as-is, as nobody except me complained and even I did so at the very last moment.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 112
	},
	{
		"id" : 213059373,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T18:43:58Z",
		"body" : "Turns out splitting this would take a good amount of work: I'd want to make sure each individual commit still worked, so it would take manual editing and several rounds of testing, and I'm short on time this week. Let's just merge as-is, and I'll work on organizing future PRs better.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 112
	},
	{
		"id" : 213059885,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T18:45:56Z",
		"body" : "Shipped. Thanks for your feedback, folks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 112
	},
	{
		"id" : 211792510,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-19T08:27:09Z",
		"body" : "A few comments otherwise üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 113
	},
	{
		"id" : 211807150,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-19T08:52:24Z",
		"body" : "Addressed code comments and updated the issue description to reflect these changes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 113
	},
	{
		"id" : 211808818,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-19T08:55:15Z",
		"body" : "Looks great üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 113
	},
	{
		"id" : 211791908,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-19T08:25:57Z",
		"body" : "LGTM üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 114
	},
	{
		"id" : 211784945,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-19T08:07:25Z",
		"body" : ":+1: LGTM.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 115
	},
	{
		"id" : 211791801,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-19T08:25:43Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 115
	},
	{
		"id" : 211878033,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-19T11:50:45Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 116
	},
	{
		"id" : 212147482,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-19T22:01:46Z",
		"body" : "Thanks for the quick and elegant fix, @xu-cheng! In the future I shall be checking for syntax warnings with the code that I write, which I haven't been doing before. Making `brew readall --syntax` return with an error status code for syntax warnings sounds like the right approach to catch this on the test bot.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 116
	},
	{
		"id" : 212286400,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-20T06:56:20Z",
		"body" : "It may also be worth having the bot do `brew style --fix` commits automatically when it builds bottles and running `brew style --fix` over the Homebrew/brew repo before we release 1.0.0.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 116
	},
	{
		"id" : 212543118,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-20T18:20:39Z",
		"body" : "> [‚Ä¶] and running `brew style --fix` over the Homebrew/brew repo before we release 1.0.0.\r\n\r\nMy hope would be that by 1.0.0 we get to a point where all of Homebrew/brew is `brew style` clean. Once we reach that goal, I'd like to make that a mandatory test bot check (for this repository only).\r\n\r\nRight now there are far too many warnings raised by `brew style`, the result being that most contributors and maintainers never run `brew style` because it is annoying to check whether a style issue was already there or was introduced by newly written code. Consequently, a lot of new commits end up introducing code style regressions, something I find quite sad (but understandable for the reasons pointed out).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 116
	},
	{
		"id" : 212554363,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-20T18:44:43Z",
		"body" : "> My hope would be that by 1.0.0 we get to a point where all of Homebrew/brew is brew style clean. Once we reach that goal, I'd like to make that a mandatory test bot check (for this repository only).\r\n\r\n@UniqMartin Sounds relatively easy but if that's the case we should probably try to run the automated fixup stuff now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 116
	},
	{
		"id" : 212579880,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-20T19:57:53Z",
		"body" : "> Sounds relatively easy but if that's the case we should probably try to run the automated fixup stuff now.\r\n\r\nI don't think this will gain us much. We'll fix a few trivial style issues that were reintroduced since the last big style fixup, but until we can run `brew style` on the test bot, they will creep back in. I just ran `brew style Library/Homebrew` and it finished with:\r\n\r\n```\r\n261 files inspected, 692 offenses detected\r\n```\r\n\r\nWhile some of those offenses are automatically fixable, I suspect most of them require manual intervention, i.e. someone needs to look at the code and either (1) follow the advice, (2) tweak the default RuboCop style by disabling/adjusting a rule globally, or (3) disable the cop locally in the problematic line.\r\n\r\nHere's a suggestion (best implemented *after* #112 is merged):\r\n\r\n- Blacklist all files that currently have code style issues, meaning they will be reported by `brew style`, but they won't cause it to have a non-zero return value, unlike files not on that list.\r\n- Enable `brew style` on the test bot.\r\n- In a timely manner, go through the list of blacklisted files, fix the code style issues, and remove the cleaned-up files from the list. (One by one or in batches of several files, depending on how difficult it is to resolve the style issues.)\r\n\r\nThe big advantage would be that we wouldn't have to do all style fixes at once and we would avoid re-introducing style issues into files that have already been cleaned up.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 116
	},
	{
		"id" : 212795945,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-21T08:05:02Z",
		"body" : "@UniqMartin It seems about half of them are automatically fixable. While your plan sounds like a good one my concern is that we let \"perfect\" be the enemy of \"good\" here. If you're open to laying down the framework for your plan üëç otherwise I think it would be good to submit some of the autogenerated fixes (and similarly make the bot do so for bottle commits).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 116
	},
	{
		"id" : 212989458,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-21T16:09:08Z",
		"body" : "> While your plan sounds like a good one my concern is that we let \"perfect\" be the enemy of \"good\" here.\r\n\r\nTo me code style is about code quality and code readability, but I can see how that can be seen as a distraction from getting things done. I don't want to achieve perfectionism (though I'm certainly leaning towards that side), but I'd like `brew style` to be useful on core code. Currently it isn't.\r\n\r\n> If you're open to laying down the framework for your plan :+1: [‚Ä¶]\r\n\r\nI'm not sure I understand this. My idea/plan is outlined above: https://github.com/Homebrew/brew/pull/116#issuecomment-212579880. What is missing?\r\n\r\n> [‚Ä¶] otherwise I think it would be good to submit some of the autogenerated fixes (and similarly make the bot do so for bottle commits).\r\n\r\nI'm not sure I like the ‚Äúmess things up then periodically auto fix‚Äù cycle. Feels dirty to me. I was hoping my plan could result in something that is better integrated into our PR workflow, without being an unacceptable burden (i.e., it becomes overly annoying to make tests and style checks happy).\r\n\r\nAnyway, that's not something I can immediately work on. So let's defer this discussion to a separate PR/issue, where others can chime in, instead of burrowing it in this semi-related but closed PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 116
	},
	{
		"id" : 213295521,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-22T07:10:40Z",
		"body" : "> To me code style is about code quality and code readability, but I can see how that can be seen as a distraction from getting things done. I don't want to achieve perfectionism (though I'm certainly leaning towards that side), but I'd like brew style to be useful on core code. Currently it isn't.\r\n\r\nSorry, with \"perfect be the enemy of good\" I meant: \"we don't run `brew style --fix` until we have a blacklist framework set up\".\r\n\r\n> I'm not sure I understand this. My idea/plan is outlined above: #116 (comment). What is missing?\r\n\r\nThe implementation üòâ \r\n\r\n> I'm not sure I like the ‚Äúmess things up then periodically auto fix‚Äù cycle. Feels dirty to me. I was hoping my plan could result in something that is better integrated into our PR workflow, without being an unacceptable burden (i.e., it becomes overly annoying to make tests and style checks happy).\r\n\r\nI think if and when there's things we can automate: we should do so. Why get humans to do things we can get computers to do for us automatically?\r\n\r\n> So let's defer this discussion to a separate PR/issue, where others can chime in, instead of burrowing it in this semi-related but closed PR.\r\n\r\nüëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 116
	},
	{
		"id" : 212146157,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-19T21:56:03Z",
		"body" : "You don't seem to have followed these steps from the issue template, that was there when you first posted but you removed since (you're seeing permission issues, right?):\r\n\r\n- [ ] Ran `brew doctor`, fixed as many issues as possible and retried your prior step?\r\n- [ ] If you're seeing permission errors tried running `sudo chown -R $(whoami) $(brew --prefix)`?\r\n\r\nThe error from the uninstall script is somewhat surprising. I don't think it came to the point where it was actually able to remove anything. What is the output of `which ruby` and `ruby --version`?\r\n\r\nI think because of the permission errors, you now have a Homebrew installation in a somewhat mixed up state, where some files were updated and some were not. Please try the following:\r\n\r\n```\r\nsudo chown -R $(whoami) /usr/local\r\ncd /usr/local && git reset --hard origin/master\r\nbrew update\r\n```\r\n\r\nPlease post the output of those commands, particularly if you're still seeing error messages.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 117
	},
	{
		"id" : 215497052,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-28T17:08:18Z",
		"body" : "Closing for a lack of response/information; happy to reopen once there's some activity here.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 117
	},
	{
		"id" : 217521677,
		"user" : {
			"login" : "Sajaki"
		},
		"created_at" : "2016-05-06T18:25:55Z",
		"body" : "hello, \r\n\r\nThanks very much for your answer. I followed your instructions and it seems to be ok again. \r\n\r\n`zeus:~ Nix$ brew\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require': cannot load such file -- mach (LoadError)\r\n\tfrom /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n\tfrom /usr/local/Library/Homebrew/extend/pathname.rb:2:in `<top (required)>'\r\n\tfrom /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n\tfrom /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n\tfrom /usr/local/Library/Homebrew/global.rb:3:in `<top (required)>'\r\n\tfrom /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n\tfrom /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n\tfrom /usr/local/Library/brew.rb:15:in `<main>'\r\n`\r\n\r\n`zeus:~ Nix$ brew doctor\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require': cannot load such file -- mach (LoadError)\r\n\tfrom /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n\tfrom /usr/local/Library/Homebrew/extend/pathname.rb:2:in `<top (required)>'\r\n\tfrom /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n\tfrom /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n\tfrom /usr/local/Library/Homebrew/global.rb:3:in `<top (required)>'\r\n\tfrom /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n\tfrom /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n\tfrom /usr/local/Library/brew.rb:15:in `<main>'\r\n`\r\n\r\n`zeus:~ Nix$ which ruby\r\n/usr/local/bin/ruby\r\nzeus:~ Nix$ ruby --version\r\nruby 1.8.4 (2005-12-24) [i686-darwin8.9.1]`\r\n\r\nno permission errors seen running this.\r\n`zeus:~ Nix$ sudo chown -R $(whoami) /usr/local\r\nzeus:~ Nix$ `\r\n\r\nfinally\r\n`eus:~ Nix$ cd /usr/local && git reset --hard origin/master\r\nHEAD is now at 53c5089 CoreTap#install: fix clone target setting\r\nzeus:local Nix$ \r\nzeus:local Nix$ brew update\r\nwarning: no common commits\r\nremote: Counting objects: 469, done.\r\nremote: Compressing objects: 100% (426/426), done.\r\nremote: Total 469 (delta 27), reused 276 (delta 17), pack-reused 0\r\nReceiving objects: 100% (469/469), 766.45 KiB | 381 KiB/s, done.\r\nResolving deltas: 100% (27/27), done.\r\nFrom https://github.com/Homebrew/brew\r\n + 53c5089...12686ad master     -> origin/master  (forced update)\r\nHEAD is now at 12686ad cmd/fetch: fix typo in doco\r\n==> Homebrew has enabled anonymous aggregate user behaviour analytics\r\nRead the analytics documentation (and how to opt-out) here:\r\n  https://git.io/brew-analytics\r\n==> Tapping homebrew/core\r\nCloning into '/usr/local/Library/Taps/homebrew/homebrew-core'...\r\nremote: Counting objects: 3696, done.\r\nremote: Compressing objects: 100% (3584/3584), done.\r\nremote: Total 3696 (delta 14), reused 627 (delta 1), pack-reused 0\r\nReceiving objects: 100% (3696/3696), 2.84 MiB | 1.66 MiB/s, done.\r\nResolving deltas: 100% (14/14), done.\r\nChecking connectivity... done.\r\nTapped 3572 formulae (3,722 files, 8.8M)\r\nAlready up-to-date.\r\n`\r\n\r\nnow brew doctor works again. \r\n\r\n`zeus:local Nix$ brew doctor\r\nPlease note that these warnings are just used to help the Homebrew maintainers\r\nwith debugging if you file an issue. If everything you use Homebrew for is\r\nworking fine: please don't worry and just ignore them. Thanks!\r\n\r\nWarning: \"config\" scripts exist outside your system or Homebrew directories.\r\n`./configure` scripts often look for *-config scripts to determine if\r\nsoftware packages are installed, and what additional flags to use when\r\ncompiling and linking.\r\n\r\nHaving additional scripts in your path can confuse software installed via\r\nHomebrew if the config script overrides a system or Homebrew provided\r\nscript of the same name. We found the following \"config\" scripts:\r\n    /Applications/MAMP/bin/php/php5.6.10/bin/php-config\r\n\r\nWarning: Unbrewed dylibs were found in /usr/local/lib.\r\nIf you didn't put them there on purpose they could cause problems when\r\nbuilding Homebrew formulae, and may need to be deleted.\r\n\r\nUnexpected dylibs:\r\n    /usr/local/lib/libbeid.2.7.4.dylib\r\n    /usr/local/lib/libbeidcardlayer.4.0.7.dylib\r\n    /usr/local/lib/libbeidcommon.1.0.0.dylib\r\n    /usr/local/lib/libbeidcommon.4.0.7.dylib\r\n    /usr/local/lib/libbeiddialogsQT.4.0.7.dylib\r\n    /usr/local/lib/libbeidgui.1.5.0.dylib\r\n    /usr/local/lib/libbeidlibjni.2.7.2.dylib\r\n    /usr/local/lib/libbeidlibopensc.2.2.0.dylib\r\n    /usr/local/lib/libbeidlibopenscinternal.2.2.0.dylib\r\n    /usr/local/lib/libbeidpkcs11.4.0.7.dylib\r\n    /usr/local/lib/libbeidpkcs11.4.1.8.dylib\r\n    /usr/local/lib/libbeidpkcs11.4.1.9.dylib\r\n    /usr/local/lib/libicudata.48.1.1.dylib\r\n    /usr/local/lib/libMagick++-6.Q16.3.dylib\r\n    /usr/local/lib/libMagickCore-6.Q16.2.dylib\r\n    /usr/local/lib/libMagickWand-6.Q16.2.dylib\r\n    /usr/local/lib/libqt-mt.3.3.8.dylib\r\n    /usr/local/lib/libxerces-c-3.1.dylib\r\n\r\nWarning: Unbrewed header files were found in /usr/local/include.\r\nIf you didn't put them there on purpose they could cause problems when\r\nbuilding Homebrew formulae, and may need to be deleted.\r\n\r\nUnexpected header files:\r\n    /usr/local/include/fastcgi.h\r\n    /usr/local/include/fcgi_config.h\r\n    /usr/local/include/fcgi_stdio.h\r\n    /usr/local/include/fcgiapp.h\r\n    /usr/local/include/fcgimisc.h\r\n    /usr/local/include/fcgio.h\r\n    /usr/local/include/fcgios.h\r\n    /usr/local/include/graphviz/arith.h\r\n    /usr/local/include/graphviz/cdt.h\r\n    /usr/local/include/graphviz/cgraph.h\r\n    /usr/local/include/graphviz/color.h\r\n    /usr/local/include/graphviz/geom.h\r\n    /usr/local/include/graphviz/graphviz_version.h\r\n    /usr/local/include/graphviz/gvc.h\r\n    /usr/local/include/graphviz/gvcext.h\r\n    /usr/local/include/graphviz/gvcjob.h\r\n    /usr/local/include/graphviz/gvcommon.h\r\n    /usr/local/include/graphviz/gvconfig.h\r\n    /usr/local/include/graphviz/gvplugin.h\r\n    /usr/local/include/graphviz/gvplugin_device.h\r\n    /usr/local/include/graphviz/gvplugin_layout.h\r\n    /usr/local/include/graphviz/gvplugin_loadimage.h\r\n    /usr/local/include/graphviz/gvplugin_render.h\r\n    /usr/local/include/graphviz/gvplugin_textlayout.h\r\n    /usr/local/include/graphviz/gvpr.h\r\n    /usr/local/include/graphviz/pack.h\r\n    /usr/local/include/graphviz/pathgeom.h\r\n    /usr/local/include/graphviz/pathplan.h\r\n    /usr/local/include/graphviz/textpara.h\r\n    /usr/local/include/graphviz/types.h\r\n    /usr/local/include/graphviz/usershape.h\r\n    /usr/local/include/graphviz/xdot.h\r\n    /usr/local/include/ImageMagick-6/magick/accelerate.h\r\n    /usr/local/include/ImageMagick-6/magick/animate.h\r\n    /usr/local/include/ImageMagick-6/magick/annotate.h\r\n    /usr/local/include/ImageMagick-6/magick/api.h\r\n    /usr/local/include/ImageMagick-6/magick/artifact.h\r\n    /usr/local/include/ImageMagick-6/magick/attribute.h\r\n    /usr/local/include/ImageMagick-6/magick/blob.h\r\n    /usr/local/include/ImageMagick-6/magick/cache-view.h\r\n    /usr/local/include/ImageMagick-6/magick/cache.h\r\n    /usr/local/include/ImageMagick-6/magick/channel.h\r\n    /usr/local/include/ImageMagick-6/magick/cipher.h\r\n    /usr/local/include/ImageMagick-6/magick/client.h\r\n    /usr/local/include/ImageMagick-6/magick/coder.h\r\n    /usr/local/include/ImageMagick-6/magick/color.h\r\n    /usr/local/include/ImageMagick-6/magick/colormap.h\r\n    /usr/local/include/ImageMagick-6/magick/colorspace.h\r\n    /usr/local/include/ImageMagick-6/magick/compare.h\r\n    /usr/local/include/ImageMagick-6/magick/composite.h\r\n    /usr/local/include/ImageMagick-6/magick/compress.h\r\n    /usr/local/include/ImageMagick-6/magick/configure.h\r\n    /usr/local/include/ImageMagick-6/magick/constitute.h\r\n    /usr/local/include/ImageMagick-6/magick/decorate.h\r\n    /usr/local/include/ImageMagick-6/magick/delegate.h\r\n    /usr/local/include/ImageMagick-6/magick/deprecate.h\r\n    /usr/local/include/ImageMagick-6/magick/display.h\r\n    /usr/local/include/ImageMagick-6/magick/distort.h\r\n    /usr/local/include/ImageMagick-6/magick/distribute-cache.h\r\n    /usr/local/include/ImageMagick-6/magick/draw.h\r\n    /usr/local/include/ImageMagick-6/magick/effect.h\r\n    /usr/local/include/ImageMagick-6/magick/enhance.h\r\n    /usr/local/include/ImageMagick-6/magick/exception.h\r\n    /usr/local/include/ImageMagick-6/magick/feature.h\r\n    /usr/local/include/ImageMagick-6/magick/fourier.h\r\n    /usr/local/include/ImageMagick-6/magick/fx.h\r\n    /usr/local/include/ImageMagick-6/magick/gem.h\r\n    /usr/local/include/ImageMagick-6/magick/geometry.h\r\n    /usr/local/include/ImageMagick-6/magick/hashmap.h\r\n    /usr/local/include/ImageMagick-6/magick/histogram.h\r\n    /usr/local/include/ImageMagick-6/magick/identify.h\r\n    /usr/local/include/ImageMagick-6/magick/image-view.h\r\n    /usr/local/include/ImageMagick-6/magick/image.h\r\n    /usr/local/include/ImageMagick-6/magick/ImageMagick.h\r\n    /usr/local/include/ImageMagick-6/magick/layer.h\r\n    /usr/local/include/ImageMagick-6/magick/list.h\r\n    /usr/local/include/ImageMagick-6/magick/locale_.h\r\n    /usr/local/include/ImageMagick-6/magick/log.h\r\n    /usr/local/include/ImageMagick-6/magick/magic.h\r\n    /usr/local/include/ImageMagick-6/magick/magick-baseconfig.h\r\n    /usr/local/include/ImageMagick-6/magick/magick-config.h\r\n    /usr/local/include/ImageMagick-6/magick/magick-type.h\r\n    /usr/local/include/ImageMagick-6/magick/magick.h\r\n    /usr/local/include/ImageMagick-6/magick/MagickCore.h\r\n    /usr/local/include/ImageMagick-6/magick/matrix.h\r\n    /usr/local/include/ImageMagick-6/magick/memory_.h\r\n    /usr/local/include/ImageMagick-6/magick/method-attribute.h\r\n    /usr/local/include/ImageMagick-6/magick/methods.h\r\n    /usr/local/include/ImageMagick-6/magick/mime.h\r\n    /usr/local/include/ImageMagick-6/magick/module.h\r\n    /usr/local/include/ImageMagick-6/magick/monitor.h\r\n    /usr/local/include/ImageMagick-6/magick/montage.h\r\n    /usr/local/include/ImageMagick-6/magick/morphology.h\r\n    /usr/local/include/ImageMagick-6/magick/opencl.h\r\n    /usr/local/include/ImageMagick-6/magick/option.h\r\n    /usr/local/include/ImageMagick-6/magick/paint.h\r\n    /usr/local/include/ImageMagick-6/magick/pixel-accessor.h\r\n    /usr/local/include/ImageMagick-6/magick/pixel.h\r\n    /usr/local/include/ImageMagick-6/magick/policy.h\r\n    /usr/local/include/ImageMagick-6/magick/prepress.h\r\n    /usr/local/include/ImageMagick-6/magick/PreRvIcccm.h\r\n    /usr/local/include/ImageMagick-6/magick/profile.h\r\n    /usr/local/include/ImageMagick-6/magick/property.h\r\n    /usr/local/include/ImageMagick-6/magick/quantize.h\r\n    /usr/local/include/ImageMagick-6/magick/quantum.h\r\n    /usr/local/include/ImageMagick-6/magick/random_.h\r\n    /usr/local/include/ImageMagick-6/magick/registry.h\r\n    /usr/local/include/ImageMagick-6/magick/resample.h\r\n    /usr/local/include/ImageMagick-6/magick/resize.h\r\n    /usr/local/include/ImageMagick-6/magick/resource_.h\r\n    /usr/local/include/ImageMagick-6/magick/segment.h\r\n    /usr/local/include/ImageMagick-6/magick/semaphore.h\r\n    /usr/local/include/ImageMagick-6/magick/shear.h\r\n    /usr/local/include/ImageMagick-6/magick/signature.h\r\n    /usr/local/include/ImageMagick-6/magick/splay-tree.h\r\n    /usr/local/include/ImageMagick-6/magick/statistic.h\r\n    /usr/local/include/ImageMagick-6/magick/stream.h\r\n    /usr/local/include/ImageMagick-6/magick/string_.h\r\n    /usr/local/include/ImageMagick-6/magick/studio.h\r\n    /usr/local/include/ImageMagick-6/magick/threshold.h\r\n    /usr/local/include/ImageMagick-6/magick/timer.h\r\n    /usr/local/include/ImageMagick-6/magick/token.h\r\n    /usr/local/include/ImageMagick-6/magick/transform.h\r\n    /usr/local/include/ImageMagick-6/magick/type.h\r\n    /usr/local/include/ImageMagick-6/magick/utility.h\r\n    /usr/local/include/ImageMagick-6/magick/version.h\r\n    /usr/local/include/ImageMagick-6/magick/widget.h\r\n    /usr/local/include/ImageMagick-6/magick/xml-tree.h\r\n    /usr/local/include/ImageMagick-6/magick/xwindow.h\r\n    /usr/local/include/ImageMagick-6/Magick++/Blob.h\r\n    /usr/local/include/ImageMagick-6/Magick++/CoderInfo.h\r\n    /usr/local/include/ImageMagick-6/Magick++/Color.h\r\n    /usr/local/include/ImageMagick-6/Magick++/Drawable.h\r\n    /usr/local/include/ImageMagick-6/Magick++/Exception.h\r\n    /usr/local/include/ImageMagick-6/Magick++/Geometry.h\r\n    /usr/local/include/ImageMagick-6/Magick++/Image.h\r\n    /usr/local/include/ImageMagick-6/Magick++/Include.h\r\n    /usr/local/include/ImageMagick-6/Magick++/Montage.h\r\n    /usr/local/include/ImageMagick-6/Magick++/Pixels.h\r\n    /usr/local/include/ImageMagick-6/Magick++/STL.h\r\n    /usr/local/include/ImageMagick-6/Magick++/TypeMetric.h\r\n    /usr/local/include/ImageMagick-6/Magick++.h\r\n    /usr/local/include/ImageMagick-6/wand/animate.h\r\n    /usr/local/include/ImageMagick-6/wand/compare.h\r\n    /usr/local/include/ImageMagick-6/wand/composite.h\r\n    /usr/local/include/ImageMagick-6/wand/conjure.h\r\n    /usr/local/include/ImageMagick-6/wand/convert.h\r\n    /usr/local/include/ImageMagick-6/wand/deprecate.h\r\n    /usr/local/include/ImageMagick-6/wand/display.h\r\n    /usr/local/include/ImageMagick-6/wand/drawing-wand.h\r\n    /usr/local/include/ImageMagick-6/wand/identify.h\r\n    /usr/local/include/ImageMagick-6/wand/import.h\r\n    /usr/local/include/ImageMagick-6/wand/magick-image.h\r\n    /usr/local/include/ImageMagick-6/wand/magick-property.h\r\n    /usr/local/include/ImageMagick-6/wand/magick-wand.h\r\n    /usr/local/include/ImageMagick-6/wand/magick_wand.h\r\n    /usr/local/include/ImageMagick-6/wand/MagickWand.h\r\n    /usr/local/include/ImageMagick-6/wand/method-attribute.h\r\n    /usr/local/include/ImageMagick-6/wand/mogrify.h\r\n    /usr/local/include/ImageMagick-6/wand/montage.h\r\n    /usr/local/include/ImageMagick-6/wand/pixel-iterator.h\r\n    /usr/local/include/ImageMagick-6/wand/pixel-wand.h\r\n    /usr/local/include/ImageMagick-6/wand/stream.h\r\n    /usr/local/include/ImageMagick-6/wand/wand-view.h\r\n    /usr/local/include/lauxlib.h\r\n    /usr/local/include/lua.h\r\n    /usr/local/include/luaconf.h\r\n    /usr/local/include/lualib.h\r\n    /usr/local/include/neon/ne_207.h\r\n    /usr/local/include/neon/ne_acl.h\r\n    /usr/local/include/neon/ne_alloc.h\r\n    /usr/local/include/neon/ne_auth.h\r\n    /usr/local/include/neon/ne_basic.h\r\n    /usr/local/include/neon/ne_compress.h\r\n    /usr/local/include/neon/ne_dates.h\r\n    /usr/local/include/neon/ne_defs.h\r\n    /usr/local/include/neon/ne_i18n.h\r\n    /usr/local/include/neon/ne_locks.h\r\n    /usr/local/include/neon/ne_md5.h\r\n    /usr/local/include/neon/ne_props.h\r\n    /usr/local/include/neon/ne_redirect.h\r\n    /usr/local/include/neon/ne_request.h\r\n    /usr/local/include/neon/ne_session.h\r\n    /usr/local/include/neon/ne_socket.h\r\n    /usr/local/include/neon/ne_ssl.h\r\n    /usr/local/include/neon/ne_string.h\r\n    /usr/local/include/neon/ne_uri.h\r\n    /usr/local/include/neon/ne_utils.h\r\n    /usr/local/include/neon/ne_xml.h\r\n    /usr/local/include/neon/ne_xmlreq.h\r\n    /usr/local/include/pcre.h\r\n    /usr/local/include/pcre_scanner.h\r\n    /usr/local/include/pcre_stringpiece.h\r\n    /usr/local/include/pcrecpp.h\r\n    /usr/local/include/pcrecpparg.h\r\n    /usr/local/include/pcreposix.h\r\n    /usr/local/include/readline/chardefs.h\r\n    /usr/local/include/readline/history.h\r\n    /usr/local/include/readline/keymaps.h\r\n    /usr/local/include/readline/readline.h\r\n    /usr/local/include/readline/rlconf.h\r\n    /usr/local/include/readline/rlstdc.h\r\n    /usr/local/include/readline/rltypedefs.h\r\n    /usr/local/include/readline/tilde.h\r\n    /usr/local/include/subversion-1/mod_dav_svn.h\r\n    /usr/local/include/subversion-1/svn_auth.h\r\n    /usr/local/include/subversion-1/svn_base64.h\r\n    /usr/local/include/subversion-1/svn_client.h\r\n    /usr/local/include/subversion-1/svn_cmdline.h\r\n    /usr/local/include/subversion-1/svn_config.h\r\n    /usr/local/include/subversion-1/svn_ctype.h\r\n    /usr/local/include/subversion-1/svn_dav.h\r\n    /usr/local/include/subversion-1/svn_delta.h\r\n    /usr/local/include/subversion-1/svn_diff.h\r\n    /usr/local/include/subversion-1/svn_error.h\r\n    /usr/local/include/subversion-1/svn_error_codes.h\r\n    /usr/local/include/subversion-1/svn_fs.h\r\n    /usr/local/include/subversion-1/svn_hash.h\r\n    /usr/local/include/subversion-1/svn_io.h\r\n    /usr/local/include/subversion-1/svn_md5.h\r\n    /usr/local/include/subversion-1/svn_nls.h\r\n    /usr/local/include/subversion-1/svn_opt.h\r\n    /usr/local/include/subversion-1/svn_path.h\r\n    /usr/local/include/subversion-1/svn_pools.h\r\n    /usr/local/include/subversion-1/svn_props.h\r\n    /usr/local/include/subversion-1/svn_quoprint.h\r\n    /usr/local/include/subversion-1/svn_ra.h\r\n    /usr/local/include/subversion-1/svn_ra_svn.h\r\n    /usr/local/include/subversion-1/svn_repos.h\r\n    /usr/local/include/subversion-1/svn_sorts.h\r\n    /usr/local/include/subversion-1/svn_string.h\r\n    /usr/local/include/subversion-1/svn_subst.h\r\n    /usr/local/include/subversion-1/svn_time.h\r\n    /usr/local/include/subversion-1/svn_types.h\r\n    /usr/local/include/subversion-1/svn_utf.h\r\n    /usr/local/include/subversion-1/svn_version.h\r\n    /usr/local/include/subversion-1/svn_wc.h\r\n    /usr/local/include/subversion-1/svn_xml.h\r\n    /usr/local/include/unicode/appendable.h\r\n    /usr/local/include/unicode/brkiter.h\r\n    /usr/local/include/unicode/bytestream.h\r\n    /usr/local/include/unicode/bytestrie.h\r\n    /usr/local/include/unicode/bytestriebuilder.h\r\n    /usr/local/include/unicode/caniter.h\r\n    /usr/local/include/unicode/chariter.h\r\n    /usr/local/include/unicode/dbbi.h\r\n    /usr/local/include/unicode/docmain.h\r\n    /usr/local/include/unicode/dtintrv.h\r\n    /usr/local/include/unicode/errorcode.h\r\n    /usr/local/include/unicode/icudataver.h\r\n    /usr/local/include/unicode/icuplug.h\r\n    /usr/local/include/unicode/idna.h\r\n    /usr/local/include/unicode/localpointer.h\r\n    /usr/local/include/unicode/locid.h\r\n    /usr/local/include/unicode/messagepattern.h\r\n    /usr/local/include/unicode/normalizer2.h\r\n    /usr/local/include/unicode/normlzr.h\r\n    /usr/local/include/unicode/parseerr.h\r\n    /usr/local/include/unicode/parsepos.h\r\n    /usr/local/include/unicode/platform.h\r\n    /usr/local/include/unicode/ppalmos.h\r\n    /usr/local/include/unicode/ptypes.h\r\n    /usr/local/include/unicode/putil.h\r\n    /usr/local/include/unicode/pwin32.h\r\n    /usr/local/include/unicode/rbbi.h\r\n    /usr/local/include/unicode/rep.h\r\n    /usr/local/include/unicode/resbund.h\r\n    /usr/local/include/unicode/schriter.h\r\n    /usr/local/include/unicode/std_string.h\r\n    /usr/local/include/unicode/strenum.h\r\n    /usr/local/include/unicode/stringpiece.h\r\n    /usr/local/include/unicode/stringtriebuilder.h\r\n    /usr/local/include/unicode/symtable.h\r\n    /usr/local/include/unicode/ubidi.h\r\n    /usr/local/include/unicode/ubrk.h\r\n    /usr/local/include/unicode/ucasemap.h\r\n    /usr/local/include/unicode/ucat.h\r\n    /usr/local/include/unicode/uchar.h\r\n    /usr/local/include/unicode/ucharstrie.h\r\n    /usr/local/include/unicode/ucharstriebuilder.h\r\n    /usr/local/include/unicode/uchriter.h\r\n    /usr/local/include/unicode/uclean.h\r\n    /usr/local/include/unicode/ucnv.h\r\n    /usr/local/include/unicode/ucnv_cb.h\r\n    /usr/local/include/unicode/ucnv_err.h\r\n    /usr/local/include/unicode/ucnvsel.h\r\n    /usr/local/include/unicode/uconfig.h\r\n    /usr/local/include/unicode/udata.h\r\n    /usr/local/include/unicode/udeprctd.h\r\n    /usr/local/include/unicode/udraft.h\r\n    /usr/local/include/unicode/uenum.h\r\n    /usr/local/include/unicode/uidna.h\r\n    /usr/local/include/unicode/uintrnal.h\r\n    /usr/local/include/unicode/uiter.h\r\n    /usr/local/include/unicode/uloc.h\r\n    /usr/local/include/unicode/umachine.h\r\n    /usr/local/include/unicode/umisc.h\r\n    /usr/local/include/unicode/unifilt.h\r\n    /usr/local/include/unicode/unifunct.h\r\n    /usr/local/include/unicode/unimatch.h\r\n    /usr/local/include/unicode/uniset.h\r\n    /usr/local/include/unicode/unistr.h\r\n    /usr/local/include/unicode/unorm.h\r\n    /usr/local/include/unicode/unorm2.h\r\n    /usr/local/include/unicode/uobject.h\r\n    /usr/local/include/unicode/uobslete.h\r\n    /usr/local/include/unicode/urename.h\r\n    /usr/local/include/unicode/urep.h\r\n    /usr/local/include/unicode/ures.h\r\n    /usr/local/include/unicode/uscript.h\r\n    /usr/local/include/unicode/uset.h\r\n    /usr/local/include/unicode/usetiter.h\r\n    /usr/local/include/unicode/ushape.h\r\n    /usr/local/include/unicode/usprep.h\r\n    /usr/local/include/unicode/ustring.h\r\n    /usr/local/include/unicode/ustringtrie.h\r\n    /usr/local/include/unicode/usystem.h\r\n    /usr/local/include/unicode/utext.h\r\n    /usr/local/include/unicode/utf.h\r\n    /usr/local/include/unicode/utf16.h\r\n    /usr/local/include/unicode/utf32.h\r\n    /usr/local/include/unicode/utf8.h\r\n    /usr/local/include/unicode/utf_old.h\r\n    /usr/local/include/unicode/utrace.h\r\n    /usr/local/include/unicode/utypes.h\r\n    /usr/local/include/unicode/uvernum.h\r\n    /usr/local/include/unicode/uversion.h\r\n\r\nWarning: Unbrewed .la files were found in /usr/local/lib.\r\nIf you didn't put them there on purpose they could cause problems when\r\nbuilding Homebrew formulae, and may need to be deleted.\r\n\r\nUnexpected .la files:\r\n    /usr/local/lib/libMagick++-6.Q16.la\r\n    /usr/local/lib/libMagickCore-6.Q16.la\r\n    /usr/local/lib/libMagickWand-6.Q16.la\r\n\r\nWarning: Unbrewed .pc files were found in /usr/local/lib/pkgconfig.\r\nIf you didn't put them there on purpose they could cause problems when\r\nbuilding Homebrew formulae, and may need to be deleted.\r\n\r\nUnexpected .pc files:\r\n    /usr/local/lib/pkgconfig/ImageMagick++-6.Q16.pc\r\n    /usr/local/lib/pkgconfig/ImageMagick++.pc\r\n    /usr/local/lib/pkgconfig/ImageMagick-6.Q16.pc\r\n    /usr/local/lib/pkgconfig/ImageMagick.pc\r\n    /usr/local/lib/pkgconfig/Magick++-6.Q16.pc\r\n    /usr/local/lib/pkgconfig/Magick++.pc\r\n    /usr/local/lib/pkgconfig/MagickCore-6.Q16.pc\r\n    /usr/local/lib/pkgconfig/MagickCore.pc\r\n    /usr/local/lib/pkgconfig/MagickWand-6.Q16.pc\r\n    /usr/local/lib/pkgconfig/MagickWand.pc\r\n    /usr/local/lib/pkgconfig/Wand-6.Q16.pc\r\n    /usr/local/lib/pkgconfig/Wand.pc\r\n\r\nWarning: Unbrewed static libraries were found in /usr/local/lib.\r\nIf you didn't put them there on purpose they could cause problems when\r\nbuilding Homebrew formulae, and may need to be deleted.\r\n\r\nUnexpected static libraries:\r\n    /usr/local/lib/liblua.a\r\n    /usr/local/lib/libMagick++-6.Q16.a\r\n    /usr/local/lib/libMagickCore-6.Q16.a\r\n    /usr/local/lib/libMagickWand-6.Q16.a\r\n\r\nWarning: Your Xcode (7.3) is outdated\r\nPlease update to Xcode 7.3.1.\r\nXcode can be updated from the App Store.\r\n\r\nWarning: Broken symlinks were found. Remove them with `brew prune`:\r\n    /usr/local/lib/libbeidapplayer.4.0.dylib\r\n    /usr/local/lib/libbeidapplayer.4.dylib\r\n    /usr/local/lib/libbeidapplayer.dylib\r\n    /usr/local/lib/libbeidlib.4.0.dylib\r\n    /usr/local/lib/libbeidlib.4.dylib\r\n    /usr/local/lib/libbeidlib.dylib\r\n    /usr/local/lib/libbeidlibJava_Wrapper.4.0.dylib\r\n    /usr/local/lib/libbeidlibJava_Wrapper.4.dylib\r\n    /usr/local/lib/libbeidlibJava_Wrapper.dylib`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 117
	},
	{
		"id" : 217544441,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-06T20:01:56Z",
		"body" : "@Sajaki Good to hear back from you and that things worked out. üò∫",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 117
	},
	{
		"id" : 212186773,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-20T00:51:50Z",
		"body" : "The Leopard 64-bit handling is pretty hairy, but that's only going to come up for Tigerbrew users so including the weird workarounds shouldn't affect Homebrew's maintenance burden.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 118
	},
	{
		"id" : 212299108,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-20T07:32:57Z",
		"body" : "Really cool to see these getting merged. I have a dream that eventually we can have Tigerbrew and Linuxbrew all using an unmodified `Homebrew/brew`. A few comments here that may help other versions but don't let the higher work ones block this PR being included.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 118
	},
	{
		"id" : 212513510,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-20T16:56:45Z",
		"body" : ">  I have a dream that eventually we can have Tigerbrew and Linuxbrew all using an unmodified `Homebrew/brew.`\r\n\r\nI'd really like that!\r\n\r\nDealing with upgraded Ruby is going to be the tough part; Tigerbrew's going to be bundling its own Ruby, so the brew launcher needs to be able to:\r\n\r\n* Know the current version of the vendored Ruby\r\n* Be able to check it's installed\r\n* Be able to fetch and install new releases of it\r\n* Shebangs should be able to run that Ruby instead of the system one",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 118
	},
	{
		"id" : 212514594,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-20T17:00:31Z",
		"body" : "> Dealing with upgraded Ruby is going to be the tough part; Tigerbrew's going to be bundling its own Ruby, so the brew launcher needs to be able to:\r\n> \r\n> Know the current version of the vendored Ruby\r\n> Be able to check it's installed\r\n> Be able to fetch and install new releases of it\r\n> Shebangs should be able to run that Ruby instead of the system one\r\n\r\nSounds doable; that's all stuff we can do relatively easily from Bash rather than Ruby land.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 118
	},
	{
		"id" : 212532953,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-20T17:48:54Z",
		"body" : "> Shebangs should be able to run that Ruby instead of the system one\r\n\r\nFYI, this is already happening in the SCM and `cc` wrappers, thanks to the magic of Ruby's `-x` flag, as can be seen [in these lines from `Library/ENV/4.3/cc`](https://github.com/Homebrew/brew/blob/b53f0c5ada753d5ded6f6fbe4f920a4a43696394/Library/ENV/4.3/cc#L1-L11).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 118
	},
	{
		"id" : 212554559,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-20T18:45:25Z",
		"body" : "> Know the current version of the vendored Ruby\r\nBe able to check it's installed\r\n\r\nThis can be achieved by following file structure. \r\n\r\n```\r\nLibrary/Vendor/Ruby\r\n  |- Current # a symlink pointed to current version\r\n  |- <version>/bin/ruby \r\n```\r\nAs result, to update Ruby, all we need to do is to update the symlink. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 118
	},
	{
		"id" : 212624926,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-20T21:56:53Z",
		"body" : "> This can be achieved by following file structure.\r\n\r\nThis sounds good. üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 118
	},
	{
		"id" : 213016396,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-21T16:59:50Z",
		"body" : "I think the Java changes suggested are a good idea, but I'd like to leave more changes like those to a followup PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 118
	},
	{
		"id" : 213295719,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-22T07:11:40Z",
		"body" : "> I think the Java changes suggested are a good idea, but I'd like to leave more changes like those to a followup PR.\r\n\r\nüëç üö¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 118
	},
	{
		"id" : 212245224,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-20T03:59:45Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 119
	},
	{
		"id" : 212564584,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-20T19:15:38Z",
		"body" : "Updated to address the code comments. Additionally, removed the no longer needed `nostdout do`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 119
	},
	{
		"id" : 212290295,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-20T07:09:19Z",
		"body" : "Nice work üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 120
	},
	{
		"id" : 212535939,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-20T17:58:20Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 120
	},
	{
		"id" : 212580567,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-20T20:00:18Z",
		"body" : "Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 120
	},
	{
		"id" : 212561586,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-04-20T19:09:07Z",
		"body" : "The old keg's name should be `brew-cask`, not `cask`. LGTM otherwise üëç  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 121
	},
	{
		"id" : 212562251,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-20T19:10:42Z",
		"body" : "@jawshooah Cheers, fixed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 121
	},
	{
		"id" : 212780846,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-21T07:16:51Z",
		"body" : "Moved to suggested location.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 121
	},
	{
		"id" : 212974702,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-21T15:29:44Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 121
	},
	{
		"id" : 213093938,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-21T20:07:20Z",
		"body" : "Seems reasonable but we should probably make `brew services` a default tap in this case rather than tapping it the first time they call the command?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 122
	},
	{
		"id" : 213294624,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-22T07:04:30Z",
		"body" : "@DomT4 I think tapping the first time is probably reasonable; there's a lot of applications that don't require using `brew services` so it would be good to avoid the tap if it's not needed. This behaviour matches what we do for e.g. bundle or cask.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 122
	},
	{
		"id" : 212597134,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-20T20:39:43Z",
		"body" : "> We want to always avoid merge commits being committed to Homebrew so this feels like a better fit.\r\n\r\nIs that an actual issue caused by `brew update`? I wouldn't have expected maintainers to use `brew update` in case a `git push` after a `brew pull` fails.\r\n\r\nOther than that this only affects people who work directly in `master` instead of creating a separate branch for their PRs, right? Just want to make sure I fully understand the impact of this change ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 123
	},
	{
		"id" : 212604461,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-20T21:01:10Z",
		"body" : "> Is that an actual issue caused by brew update?\r\n\r\nYes.\r\n\r\n> I wouldn't have expected maintainers to use brew update in case a git push after a brew pull fails.\r\n\r\n`brew update --rebase` handles these cases. Using `git pull` is annoying as you don't see update information.\r\n\r\n> Other than that this only affects people who work directly in master instead of creating a separate branch for their PRs, right? Just want to make sure I fully understand the impact of this change ‚Ä¶\r\n\r\nYes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 123
	},
	{
		"id" : 212606558,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-20T21:09:05Z",
		"body" : ":+1: Fine by me (after somehow addressing my code comment), but doesn't really affect my workflow, so maybe someone else should have a chance to comment, too. Thanks for the clarifications!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 123
	},
	{
		"id" : 216443903,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-03T05:48:23Z",
		"body" : "So far, I'm finding rebase as default to be pretty error prone, distracting, and invasive:\r\n\r\n```\r\niMac-TMP:local joe$ brew update\r\n\r\nIt seems that there is already a rebase-apply directory, and\r\nI wonder if you are in the middle of another rebase.  If that is the\r\ncase, please try\r\n\tgit rebase (--continue | --abort | --skip)\r\nIf that is not the case, please\r\n\trm -fr \"/usr/local/Library/Taps/homebrew/homebrew-core/.git/rebase-apply\"\r\nand run me again.  I am stopping in case you still have something\r\nvaluable there.\r\nAlready up-to-date.\r\n\r\n```\r\nFixing this is now a regular chore instead of a helpful merge commit that reminds me there are local commits, and then gets out of the way so I can continue doing whatever I was doing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 123
	},
	{
		"id" : 216464410,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T08:11:41Z",
		"body" : "@ilovezfs Weird; that should only occur if you `brew update` in the middle of a `rebase`. Can you try to `git rebase --abort` and the `rm -fr \"/usr/local/Library/Taps/homebrew/homebrew-core/.git/rebase-apply` and see if it occurs again?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 123
	},
	{
		"id" : 216467943,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-03T08:33:12Z",
		"body" : "@mikemcquaid It's already fixed ‚Äì that's no trouble. My concern is the frequency with which it's happening on independent systems. It seems to occur during brew update whenever the prior brew update failed during the rebase stage. The solution is to do as you said, or just use `rebase --abort`, but it's pretty disruptive.\r\n\r\nI think the common cause may be a local `brew pull n` in repo instance A, followed by a \"real\" `brew pull --bottle n` + `git push` in repo B to actually merge the PR, followed by a `brew update` in repo A, but I'm not certain yet.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 123
	},
	{
		"id" : 216475367,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T09:15:22Z",
		"body" : "@ilovezfs Thanks, that helps. I think the answer is just to run `git rebase --abort` in `brew update` itself e.g. like https://github.com/Homebrew/brew/blob/f288b66fcb1575bed2e58141265d0c5fef0acfe6/Library/Homebrew/cmd/test-bot.rb#L661",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 123
	},
	{
		"id" : 216476131,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-03T09:19:22Z",
		"body" : "Yup, I agree. I think `brew update` should be considered privileged enough to abort a rebase, and that a *more* invasive strategy is called for with rebase as the default.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 123
	},
	{
		"id" : 216477393,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-03T09:26:09Z",
		"body" : "@mikemcquaid  OK, I've got a reproducer where the old strategy worked and the new strategy devolves into the scenario above.\r\n```\r\nbash-3.2$ brew update\r\nAlready up-to-date.\r\nbash-3.2$ git cherry origin/master\r\nbash-3.2$ git reset --hard HEAD~3\r\nHEAD is now at 08ecb75 PR template: use HR to separate checklist from body\r\nbash-3.2$ perl -p -i -e 's/8506/9617/' Formula/dwarf.rb \r\nbash-3.2$ git diff\r\ndiff --git a/Formula/dwarf.rb b/Formula/dwarf.rb\r\nindex 2189e9c..ed1b595 100644\r\n--- a/Formula/dwarf.rb\r\n+++ b/Formula/dwarf.rb\r\n@@ -2,7 +2,7 @@ class Dwarf < Formula\r\n   desc \"Object file manipulation tool\"\r\n   homepage \"https://code.google.com/p/dwarf-ng/\"\r\n   url \"https://dwarf-ng.googlecode.com/files/dwarf-0.3.0.tar.gz\"\r\n-  sha256 \"85062d0d3e8aa31374dd085cb79ce02c2b8737e9b143f640a262556233715763\"\r\n+  sha256 \"96172d0d3e8aa31374dd085cb79ce02c2b8737e9b143f640a262556233715763\"\r\n \r\n   depends_on \"readline\"\r\n \r\nbash-3.2$ git commit -am \"foo\"  \r\n[master 2f2e9dc] foo\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\nbash-3.2$ brew update\r\nFailed to merge in the changes.\r\nPatch failed at 0001 foo\r\nThe copy of the patch that failed is found in:\r\n   /usr/local/Library/Taps/homebrew/homebrew-core/.git/rebase-apply/patch\r\n\r\nWhen you have resolved this problem, run \"git rebase --continue\".\r\nIf you prefer to skip this patch, run \"git rebase --skip\" instead.\r\nTo check out the original branch and stop rebasing, run \"git rebase --abort\".\r\n\r\nUpdated 1 tap (homebrew/core).\r\n==> Updated Formulae\r\ndwarf                                              jenkins                                          \r\nbash-3.2$ git status\r\nrebase in progress; onto 6c8fe32\r\nYou are currently rebasing branch 'master' on '6c8fe32'.\r\n  (fix conflicts and then run \"git rebase --continue\")\r\n  (use \"git rebase --skip\" to skip this patch)\r\n  (use \"git rebase --abort\" to check out the original branch)\r\n\r\nUnmerged paths:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n  (use \"git add <file>...\" to mark resolution)\r\n\r\n\tboth modified:      Formula/dwarf.rb\r\n\r\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\r\nbash-3.2$ brew update\r\nFormula/dwarf.rb: needs merge\r\nFormula/dwarf.rb: needs merge\r\nFormula/dwarf.rb: unmerged (2189e9c9634a126ec86cb6e688403fae2ee38b0f)\r\nFormula/dwarf.rb: unmerged (173deddbed3c960772d268e2cd185e9bce8703e3)\r\nFormula/dwarf.rb: unmerged (ed1b5959b8e48d2a10612b484a89173225c231c9)\r\nfatal: git-write-tree: error building trees\r\nCannot save the current index state\r\n\r\nIt seems that there is already a rebase-apply directory, and\r\nI wonder if you are in the middle of another rebase.  If that is the\r\ncase, please try\r\n\tgit rebase (--continue | --abort | --skip)\r\nIf that is not the case, please\r\n\trm -fr \"/usr/local/Library/Taps/homebrew/homebrew-core/.git/rebase-apply\"\r\nand run me again.  I am stopping in case you still have something\r\nvaluable there.\r\nTo restore the stashed changes to /usr/local/Library/Taps/homebrew/homebrew-core run:\r\n  'cd /usr/local/Library/Taps/homebrew/homebrew-core && git stash pop'\r\nAlready up-to-date.\r\nbash-3.2$ brew update\r\n\r\nIt seems that there is already a rebase-apply directory, and\r\nI wonder if you are in the middle of another rebase.  If that is the\r\ncase, please try\r\n\tgit rebase (--continue | --abort | --skip)\r\nIf that is not the case, please\r\n\trm -fr \"/usr/local/Library/Taps/homebrew/homebrew-core/.git/rebase-apply\"\r\nand run me again.  I am stopping in case you still have something\r\nvaluable there.\r\nAlready up-to-date.\r\nbash-3.2$ brew update\r\n\r\nIt seems that there is already a rebase-apply directory, and\r\nI wonder if you are in the middle of another rebase.  If that is the\r\ncase, please try\r\n\tgit rebase (--continue | --abort | --skip)\r\nIf that is not the case, please\r\n\trm -fr \"/usr/local/Library/Taps/homebrew/homebrew-core/.git/rebase-apply\"\r\nand run me again.  I am stopping in case you still have something\r\nvaluable there.\r\nAlready up-to-date.\r\nbash-3.2$ git rebase --abort\r\nbash-3.2$ git reset --hard origin/master\r\nHEAD is now at 6c8fe32 dwarf: add 0.3.1 bottle.\r\nbash-3.2$ git status\r\nOn branch master\r\nYour branch is up-to-date with 'origin/master'.\r\n\r\nnothing to commit, working directory clean\r\nbash-3.2$ brew update\r\nAlready up-to-date.\r\nbash-3.2$ cd /usr/local\r\nbash-3.2$ git revert 2921795668970f9b5598037fc55940d29ba941d6\r\n[master 9a16039] Revert \"update: rebase (rather than merge) by default.\"\r\n 3 files changed, 8 insertions(+), 10 deletions(-)\r\nbash-3.2$ cd -\r\n/usr/local/Library/Taps/homebrew/homebrew-core\r\nbash-3.2$ git reset --hard HEAD~3\r\nHEAD is now at 08ecb75 PR template: use HR to separate checklist from body\r\nbash-3.2$ perl -p -i -e 's/8506/9617/' Formula/dwarf.rb \r\nbash-3.2$ git diff\r\ndiff --git a/Formula/dwarf.rb b/Formula/dwarf.rb\r\nindex 2189e9c..ed1b595 100644\r\n--- a/Formula/dwarf.rb\r\n+++ b/Formula/dwarf.rb\r\n@@ -2,7 +2,7 @@ class Dwarf < Formula\r\n   desc \"Object file manipulation tool\"\r\n   homepage \"https://code.google.com/p/dwarf-ng/\"\r\n   url \"https://dwarf-ng.googlecode.com/files/dwarf-0.3.0.tar.gz\"\r\n-  sha256 \"85062d0d3e8aa31374dd085cb79ce02c2b8737e9b143f640a262556233715763\"\r\n+  sha256 \"96172d0d3e8aa31374dd085cb79ce02c2b8737e9b143f640a262556233715763\"\r\n \r\n   depends_on \"readline\"\r\n \r\nbash-3.2$ brew update\r\nTo restore the stashed changes to /usr/local/Library/Taps/homebrew/homebrew-core run:\r\n  'cd /usr/local/Library/Taps/homebrew/homebrew-core && git stash pop'\r\nUpdated 1 tap (homebrew/core).\r\n==> Updated Formulae\r\ndwarf                                              jenkins                                          \r\nbash-3.2$ brew update\r\nAlready up-to-date.\r\nbash-3.2$\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 123
	},
	{
		"id" : 212584474,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-20T20:13:17Z",
		"body" : ":+1: Sounds good, unless there's a way to just drop the data recorded up until now. I guess there's nothing we can do to prevent people from taking our ID and sending weird data?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 124
	},
	{
		"id" : 212590135,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-20T20:28:04Z",
		"body" : "@UniqMartin Doesn't seem to be but in this case I think it was just a off-by-one typo. We're still getting that bad data to the old tracking ID.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 124
	},
	{
		"id" : 212621382,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-20T21:45:53Z",
		"body" : "Last substantive change to that doctor check: six years. It's been awhile, heh. https://github.com/Homebrew/brew/commit/45753d31add4661f6b5b1b77f725ced36e8ed591",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 125
	},
	{
		"id" : 212779572,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-21T07:14:29Z",
		"body" : "Looks great üëç :shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 125
	},
	{
		"id" : 212747961,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T05:12:35Z",
		"body" : "Completing `brew info doc` is fast for me: well under 1 second to produce completions in `zsh`, and in `bash` it's an instant no-op.\r\n\r\nGetting some more info about your setup would help us diagnose this. Could you post the results of `brew config`, `brew tap`, `brew doctor`, and `which _brew` as [a new gist](https://gist.github.com/)?\r\n\r\nWhat shell are you running?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 212787660,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-04-21T07:38:05Z",
		"body" : "@apjanke \r\nI am running os x default terminal.\r\n```\r\nGNU bash, version 3.2.57(1)-release (x86_64-apple-darwin15)\r\nCopyright (C) 2007 Free Software Foundation, Inc.\r\n```\r\n\r\nAnd here is https://gist.github.com/zh-lab/1b115479ca8a3693e795e2057a7b971c",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 213003737,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-21T16:36:30Z",
		"body" : "I can confirm that it also works without noticeable delay for me, both using the old system-provided Bash 3.2 as well as Bash 4.3 from Homebrew. Not sure what is going on there.\r\n\r\nDoes it make a difference if you're in a newly opened Terminal session or if that session is already open for an extended period of time (think several days/weeks)?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 213218720,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-04-22T02:50:14Z",
		"body" : "@UniqMartin A newly session also freeze.\r\n@apjanke And I found that bash cpu usage grows over 90% very fast when I press tab to get completions.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 213959577,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-24T13:46:10Z",
		"body" : "@zh-lab The formula completions are internally based on `brew search`. Can you check whether this command requires significant amounts of time to complete? Try\r\n\r\n```\r\n/usr/bin/time brew search > /dev/null\r\n```\r\n\r\nto measure the time and to suppress the normal output of that command. What does this output? Does the ‚Äúreal‚Äù time as printed by `time` approximately match the delay you're seeing with the completions?\r\n\r\nHave you noticed other parts of the completions being unexpectedly slow? Do certain `brew` commands that you would usually expect to be fast have similarly noticeable delays? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 215294854,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-04-28T02:54:41Z",
		"body" : "```\r\n/usr/bin/time brew search > /dev/null\r\n\r\nreal\t0m0.210s\r\nuser\t0m0.169s\r\nsys\t0m0.036s\r\n```\r\n\r\nDoes the ‚Äúreal‚Äù time as printed by time approximately match the delay you're seeing with the completions?\r\n`No, not match.`\r\n\r\nAnd `brew install `with completions also slow. It seems never success to get completions when 1st time to press tab. üò≠ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 215456020,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-28T15:06:13Z",
		"body" : "> It seems never success to get completions when 1st time to press tab. üò≠\r\n\r\nThat's expected behavior. It will only complete on first tab if the completion is unique. For example, if I type `brew info az<tab>`, it will almost immediately be completed to `brew info azure-cli` (because there's only one formula name starting with `az`). However, if I type `brew info al<tab>`, nothing will happen as there are multiple possible completions. I have to type `brew info al<tab><tab>` in this case to see a list of possible completions.\r\n\r\nSorry if you knew all that. I just wanted to make sure that this (expected behavior) is not the issue you're experiencing. If that's not the issue, I'm running out of ideas why the tab completion is slow for you.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 215613202,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-04-29T02:27:19Z",
		"body" : "@UniqMartin ok, thanks for your explanation about completions mechanism üòÑ \r\nBut it is still slow when i try to get completions, not only for the 1st tab, but also for the 2nd, 3rd ....\r\n```\r\n3770  bash         99.0 02:22.58 1/1   0    17    9240K  0B     0B     3770 3769 running  *0[1]          0.00000 0.00000    501  28830+   2166    269       125       429175+   358       87128+    0      0\r\n3769  login        0.0  00:00.01 3     1    30    1092K  0B     0B     3769 393  stuck    *0[9]          0.00000 0.00000    0    1359     162     192       68        1604      261       137       0      0\r\n3734  bash         99.0 02:32.98 1/1   0    17    8948K  0B     0B     3734 3733 running  *0[1]          0.00000 0.00000    501  31029+   2378    314       147       466679+   413       97971+    0      0\r\n```\r\nAnd this bash cpu usage over 90%, is that an expected behavior?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 215613497,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-04-29T02:30:57Z",
		"body" : "@UniqMartin Just found that if I turn off the `Set locale environment variables on startup` in `terminal Preferences`, it will make help for the completions speed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 215865387,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-29T20:03:06Z",
		"body" : "> And this bash cpu usage over 90%, is that an expected behavior?\r\n\r\nNo, this shouldn't be happening. Clearly something is taking `bash` a long time to process, but we have yet to figure out what it is ‚Ä¶\r\n\r\n> Just found that if I turn off the ‚ÄúSet locale environment variables on startup‚Äù in ‚ÄúTerminal Preferences‚Äù, it will make help for the completions speed.\r\n\r\nThat's interesting. Can you please post the output of `env | egrep '^(LC_|LANG)'` both with that setting turned on and off? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 215939278,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-04-30T05:15:44Z",
		"body" : "@UniqMartin \r\n> Can you please post the output of env | egrep '^(LC_|LANG)' both with that setting turned on and off?\r\n\r\nTurn on\r\n`LC_CTYPE=UTF-8`\r\n\r\nTurn off\r\nNo response\r\n`$?` return 1",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 215963830,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-30T13:40:02Z",
		"body" : "> `LC_CTYPE=UTF-8`\r\n\r\nStrictly speaking, that's not a valid `LC_*` value. (It does happen on some systems, but I can't remember if that's a Linux-ism or an OSX-ism. I seem to recall it being a Linux thing.) It should be `en_US.UTF-8` or similar. (That is, `<language>_<region>.<encoding>`, not just `<encoding>`). I wonder if that is causing `bash` to do something pathological where it is repeatedly looking up locale-related stuff.\r\n\r\nCould you try starting a session with \"Set locale environment variables\" enabled and doing an `export LC_CTYPE=en_US.UTF-8` and seeing if that fixes it?\r\n\r\nAnd I wonder how that's getting set in the first place. What language did you set up OS X with on this machine? And what's the output of `locale` for you? E.g. I get this.\r\n\r\n```\r\n$ locale\r\nLANG=\"en_US.UTF-8\"\r\nLC_COLLATE=\"en_US.UTF-8\"\r\nLC_CTYPE=\"en_US.UTF-8\"\r\nLC_MESSAGES=\"en_US.UTF-8\"\r\nLC_MONETARY=\"en_US.UTF-8\"\r\nLC_NUMERIC=\"en_US.UTF-8\"\r\nLC_TIME=\"en_US.UTF-8\"\r\nLC_ALL=\r\n```\r\n\r\nI tried setting `LC_CTYPE=UTF-8` in `bash` on my own 10.11 machine, and completion was still fast, so I couldn't reproduce this. Could be some interaction with something else, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216002682,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-30T23:27:02Z",
		"body" : "I also tried to reproduce the slowness, tested with both Bash 3.2 and 4.3 and various locale settings, but failed to observe the issue. I even tested with a Homebrew installation that has about 6,000 formulae (literally all official taps installed), but in all circumstances the response was fairly quick (< 1s) nonetheless. I'm afraid I'm running out of ideas ‚Ä¶\r\n\r\nCan you open a new Terminal, check that things are still unacceptably slow, and then enter the following commands individually one after the other?\r\n\r\n```shell\r\ncur=\"az\" # The prefix that should be completed.\r\nformulas=\"$(brew search)\"\r\nshortnames=\"$(echo \"$formulas\" | grep / | cut -d / -f 3)\"\r\ncompletions=($(compgen -W \"$formulas $shortnames\" -- \"$cur\"))\r\n```\r\n\r\nThis is basically what is going on internally. I would expect that (on your system) one of those lines does take more time to complete than it should. If so, which one is it?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216003069,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-30T23:38:15Z",
		"body" : "You can also try doing the completion with `set -x` enabled if those steps don't identify anything. That'll show you a trace of its activity, and may be enough to identify where it's getting slow, or if it's doing something weird.\r\n\r\nYou could also try doing the same completions in `zsh` to see if it's shell specific.\r\n\r\nAnd in either shell with `set -x` tracing enabled, if you set `$PS4` to something like `PS4='+ $(date \"+%s.%N\")\\011 ->'` then you'll get timestamps in the execution trace log. Read it in to Excel as a tab-separated-value file, diff the timestamps in a new column, and you'll have execution times for each step.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216007113,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-05-01T01:34:17Z",
		"body" : "normal one locale:\r\n```\r\nLANG=\r\nLC_COLLATE=\"C\"\r\nLC_CTYPE=\"C\"\r\nLC_MESSAGES=\"C\"\r\nLC_MONETARY=\"C\"\r\nLC_NUMERIC=\"C\"\r\nLC_TIME=\"C\"\r\nLC_ALL=\r\n```\r\n\r\nslow one:\r\n```\r\nLANG=\r\nLC_COLLATE=\"C\"\r\nLC_CTYPE=\"UTF-8\"\r\nLC_MESSAGES=\"C\"\r\nLC_MONETARY=\"C\"\r\nLC_NUMERIC=\"C\"\r\nLC_TIME=\"C\"\r\nLC_ALL=\r\n```\r\n\r\nAnd for this piece of script\r\n```\r\ncur=\"az\" # The prefix that should be completed.\r\nformulas=\"$(brew search)\"\r\nshortnames=\"$(echo \"$formulas\" | grep / | cut -d / -f 3)\"\r\ncompletions=($(compgen -W \"$formulas $shortnames\" -- \"$cur\"))\r\n```\r\nit's run very fast.\r\n\r\nBut while I do like this:\r\n```\r\nset -x\r\nPS4='+ $(date \"+%s.%N\")\\011 ->'\r\nbrew info doc #now press tab to get completions\r\n```\r\nIt generates lots of output.\r\nAnd I save this output to a file, it's about 184MB, is that an expected behavior? \r\nSorry for missing this file here, because it's too big...:cry:\r\n\r\n@apjanke @UniqMartin \r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216007365,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-05-01T01:42:46Z",
		"body" : "@apjanke @UniqMartin btw, zsh works well, very fast.\r\nAnd while doing this in zsh:\r\n```\r\nset -x\r\nPS4='+ $(date \"+%s.%N\")\\011 ->'\r\nbrew info doc #now press tab to get completions\r\n```\r\noutput are very small, only 72KB.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216007736,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-01T01:53:03Z",
		"body" : "> It generates lots of output.\r\n> And I save this output to a file, it's about 184MB, is that an expected behavior?\r\n\r\nNo, that's way too much. It means that a lot of stuff is happening (we just haven't found out yet, what it is) and that's why the processing is so slow in Bash.\r\n\r\nCan you post the contents of your `.profile`, `.bashrc`, and `.bash_profile` files from your home directory? Some of those files may not exist. These files are used to set up every Bash session you start and maybe there's something in them that slows things down considerably. Before posting the contents, make sure the files don't contain any sensitive data you wouldn't want to share publicly.\r\n\r\n> And while doing this in zsh:\r\n> [‚Ä¶snip‚Ä¶]\r\n> output are very small, only 72KB.\r\n\r\nThis sounds about right. That's also approximately the size I get when I do the same in Bash on my system.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216008135,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-05-01T02:06:06Z",
		"body" : "@UniqMartin \r\nThis is my .bash_profile\r\n```\r\n# Go\r\nexport GOPATH=/Users/Heng/Workspace/go\r\n\r\nif [ -f $(brew --prefix)/etc/bash_completion ]; then\r\n  . $(brew --prefix)/etc/bash_completion\r\nfi\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216008324,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-05-01T02:11:52Z",
		"body" : "And for the big output.\r\n```\r\nfor file in '${taps}/*/*/*.rb' '${taps}/*/*/Formula/*.rb' '${taps}/*/*/HomebrewFormula/*.rb'\r\n```\r\nbash run this for 3819 times.\r\n\r\nJust like this:\r\n```\r\n+ 1462065333.N\t ->for file in '${taps}/*/*/*.rb' '${taps}/*/*/Formula/*.rb' '${taps}/*/*/HomebrewFormula/*.rb'\r\n+ 1462065333.N\t ->'[' -f /usr/local/Library/Taps/homebrew/homebrew-versions/iojs.rb ']'\r\n+ 1462065333.N\t ->file=/usr/local/Library/Taps/homebrew/homebrew-versions/iojs.rb\r\n+ 1462065333.N\t ->file=/usr/local/Library/Taps/homebrew/homebrew-versions/iojs.rb\r\n+ 1462065333.N\t ->file=homebrew/homebrew-versions/iojs.rb\r\n+ 1462065333.N\t ->file=homebrew/homebrew-versions/iojs\r\n+ 1462065333.N\t ->file=homebrew/versions/iojs\r\n+ 1462065333.N\t ->tf=' homebrew/versions/allegro4 homebrew/versions/android-ndk-r10d homebrew/versions/android-ndk-r10e homebrew/versions/ansible14 homebrew/versions/ansible18 homebrew/versions/ansible19 homebrew/versions/antlr2 homebrew/versions/antlr3 homebrew/versions/apache-spark141 homebrew/versions/apache-spark15 homebrew/versions/appledoc20 homebrew/versions/appledoc21 homebrew/versions/appledoc22 homebrew/versions/astyle204 homebrew/versions/autoconf213 homebrew/versions/autoconf264 homebrew/versions/automake112 homebrew/versions/bash-completion2 homebrew/versions/bind99 homebrew/versions/bison27 homebrew/versions/boost-python159 homebrew/versions/boost149 homebrew/versions/boost150 homebrew/versions/boost155 homebrew/versions/boost159 homebrew/versions/camlp5-606 homebrew/versions/cassandra-0.6 homebrew/versions/cassandra10 homebrew/versions/cassandra12 homebrew/versions/cassandra20 homebrew/versions/cassandra21 homebrew/versions/cassandra22 homebrew/versions/clojure14 homebrew/versions/cloog-ppl015 homebrew/versions/cloog018 homebrew/versions/cmake28 homebrew/versions/cmake30 homebrew/versions/cmake31 homebrew/versions/coq83 homebrew/versions/cvsps2 homebrew/versions/docker171 homebrew/versions/doxygen1831 homebrew/versions/drush4 homebrew/versions/drush5 homebrew/versions/duplicity06 homebrew/versions/eigen2 homebrew/versions/elasticsearch17 homebrew/versions/elasticsearch22 homebrew/versions/erlang-r13 homebrew/versions/erlang-r14 homebrew/versions/erlang-r15 homebrew/versions/erlang-r16 homebrew/versions/erlang-r17 homebrew/versions/freetds091 homebrew/versions/gawk3 homebrew/versions/gcc43 homebrew/versions/gcc44 homebrew/versions/gcc45 homebrew/versions/gcc46 homebrew/versions/gcc47 homebrew/versions/gcc48 homebrew/versions/gcc49 homebrew/versions/gcc5 homebrew/versions/gcc6 homebrew/versions/gdal111 homebrew/versions/gecode373 homebrew/versions/gegl02 homebrew/versions/giflib5 homebrew/versions/git-tf-2.0.2 homebrew/versions/glfw2 homebrew/versions/glfw3 homebrew/versions/gmp4 homebrew/versions/gnupg21 homebrew/versions/gnuplot4 homebrew/versions/gnutls34 homebrew/versions/go12 homebrew/versions/go13 homebrew/versions/go14 homebrew/versions/go15 homebrew/versions/gradle110 homebrew/versions/gradle112 homebrew/versions/gradle16 homebrew/versions/gradle18 homebrew/versions/gradle20 homebrew/versions/gradle21 homebrew/versions/gradle221 homebrew/versions/gradle24 homebrew/versions/gradle26 homebrew/versions/gradle27 homebrew/versions/gradle28 homebrew/versions/grails13 homebrew/versions/grails20 homebrew/versions/grails21 homebrew/versions/grails22 homebrew/versions/grails223 homebrew/versions/grails224 homebrew/versions/grails23 homebrew/versions/gsl114 homebrew/versions/gst-ffmpeg010 homebrew/versions/gst-plugins-bad010 homebrew/versions/gst-plugins-base010 homebrew/versions/gst-plugins-good010 homebrew/versions/gst-plugins-ugly010 homebrew/versions/gst-python010 homebrew/versions/gst-rtsp010 homebrew/versions/gstreamer010 homebrew/versions/guile18 homebrew/versions/hadoop0202 homebrew/versions/hadoop121 homebrew/versions/hadoop25 homebrew/versions/hdf4 homebrew/versions/hive010 homebrew/versions/hive011 homebrew/versions/imagemagick-ruby186 homebrew/versions/influxdb08 homebrew/versions/iojs'\r\n```\r\n\r\n@UniqMartin ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216011050,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-01T02:42:26Z",
		"body" : "@zh-lab Oh, that explains it. For some reason, you still have the old Bash completion in your Homebrew installation. It should have been updated during one of the Homebrew updates, but apparently it wasn't. Can you please execute the following commands and post their outputs here?\r\n\r\n```\r\ncd $(brew --prefix)/etc/bash_completion.d\r\nls -l brew\r\ngit status\r\ngit checkout HEAD -- brew\r\n```\r\n\r\nThe last command should reset the completion file for Homebrew to what is currently in the Git repository (that implementation no longer uses the slow `for` loop). Hopefully after you've done this, completion in a newly opened Terminal window or tab will be fast.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216011548,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-05-01T03:00:09Z",
		"body" : "```\r\n$ ls -l brew\r\n\r\n-rw-r--r--  1 Heng  admin  13877 Apr 12 15:22 brew\r\n```\r\n\r\n```\r\n$ git status\r\n\r\nOn branch master\r\nnothing to commit, working directory clean\r\n```\r\n\r\n```\r\n$ git log brew\r\n\r\ncommit b50e950f0ea2a5fdfc8d312d1a6eb4f4e6240fa0\r\nAuthor: Martin Afanasjew <martin@afanasjew.de>\r\nDate:   Tue Dec 8 08:40:44 2015 +0100\r\n\r\n    unlinkapps: add --dry-run option\r\n    \r\n    Add `--dry-run` option as is customary for destructive commands. Update\r\n    `bash` completion and man page accordingly. Also correct and update\r\n    documentation for both `brew linkapps` and `brew unlinkapps` in more\r\n    general terms.\r\n\r\ncommit 3afacc351c44c4cee08c181e7c761f44e8b43722\r\nAuthor: tim smith <github@tim-smith.us>\r\nDate:   Tue Apr 5 09:48:28 2016 -0700\r\n\r\n    Speed up tab completion\r\n    \r\n    Fixes #20. Closes #23.\r\n\r\ncommit ceed6636d6986bb2b993ba4680ae484deb76ae29\r\nAuthor: Andrew Janke <andrew@apjanke.net>\r\nDate:   Mon Apr 4 01:43:43 2016 -0400\r\n\r\n    test-bot: revise Step output transcoding and XML character filtering\r\n    \r\n    Closes #24.\r\n    \r\n    Signed-off-by: Andrew Janke <andrew@apjanke.net>\r\n\r\n```\r\n\r\n```\r\n$ git checkout HEAD -- brew\r\n\r\n$ echo $?\r\n0\r\n```\r\n\r\nI have done this, and still slow..\r\n@UniqMartin ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216011723,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-05-01T03:06:52Z",
		"body" : "@UniqMartin \r\nIt's strange that b50e950f0ea2a5fdfc8d312d1a6eb4f4e6240fa0 is not a latest commit, but on the top of the log history.\r\n\r\nFYI: https://github.com/Homebrew/brew/commits/master/etc/bash_completion.d/brew",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216011936,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-01T03:13:54Z",
		"body" : "> I have done this, and still slow..\r\n\r\nApparently your completion for `brew` is loaded from somewhere else and not from that path. Do you have anything else installed that provides Bash completion for various commands and maybe overrides our official completion file (the one in `etc/bash_completion.d/brew`).\r\n\r\n> It's strange that b50e950 is not a latest commit, but on the top of the log history.\r\n\r\nThat's normal. If you ask `git` for the log of a specific file, it will only show the commits that modified this file and omit all other commits. If you use just `git log`, you'll see the complete history.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216012146,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-05-01T03:20:31Z",
		"body" : "@UniqMartin \r\n>  Do you have anything else installed that provides Bash completion for various commands and maybe overrides our official completion file (the one in etc/bash_completion.d/brew).\r\n\r\nNo, I only have official one.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216094389,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-02T02:29:53Z",
		"body" : "Maybe you're running in to a pathological case related to locales here. Using `\"C\"` as your locale is probably wrong, especially if you're mixing it with Unicode/UTF-8 and international characters. (\"C\" is an alias for \"POSIX\", which mostly treats all characters as single-byte opaque characters, but speaking strictly has undefined behavior for some character values; maybe that's interacting weirdly with the `\"UTF-8\"` LC_CTYPE.) If you're running with a \"C\" locale, some things will break. (Even if a forum post or StackOverflow answer told you to do so.) And strictly speaking, `\"UTF-8\"` is not a valid locale value at all.\r\n\r\nSince nothing else panned out, let's address these strange locale settings and see if that fixes things.\r\n\r\nAs far as I know, OS X and its Terminal.app will not set your locale variables to `\"C\"`, they'll use region-specific UTF-8 locale settings, like `\"en_US.UTF-8\"`. So it may be your shell setup that's setting these variables. Check your `~/.bashrc`, `~/.bash_profile`, `~/.bash_login`, and `~/.profile`, and other shell startup files to see if they're setting locale variables. (Just `grep 'LC_\\|LANG' ~/.*` and see what pops up. I know you posted `.bashrc` earlier, but maybe there are other shell config files hanging around?)\r\n\r\nBetween that and loading the old `brew` bash completions, looks like there are some machine configuration issues here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216417890,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-05-03T02:14:07Z",
		"body" : "@apjanke Here is all my files under home.\r\n```\r\ntotal 96\r\ndrwxr-xr-x+  22 Heng  staff    748 May  1 11:46 .\r\ndrwxr-xr-x    6 root  admin    204 Oct  8  2015 ..\r\n-r--------    1 Heng  staff      7 Oct  8  2015 .CFUserTextEncoding\r\n-rw-r--r--@   1 Heng  staff  18436 May  1 09:17 .DS_Store\r\ndrwx------    2 Heng  staff     68 May  1 11:44 .Trash\r\n-rw-r--r--    1 Heng  staff   6476 May  1 11:46 .bash_history\r\n-rw-r--r--@   1 Heng  staff    182 May  1 10:53 .bash_profile\r\ndrwxr-xr-x  350 Heng  staff  11900 May  1 12:23 .bash_sessions\r\ndrwx------    3 Heng  staff    102 Oct  9  2015 .docker\r\n-rw-r--r--    1 Heng  staff     75 Feb 18 17:53 .gitconfig\r\ndrwx------    5 Heng  staff    170 Apr 19 16:59 .ssh\r\n-rw-------    1 Heng  staff   6396 May  1 10:53 .viminfo\r\ndrwx------    3 Heng  staff    102 Mar 21 11:21 Applications\r\ndrwx------+   4 Heng  staff    136 Apr 19 17:42 Desktop\r\ndrwx------+   5 Heng  staff    170 May  1 11:43 Documents\r\ndrwx------+  12 Heng  staff    408 May  2 01:40 Downloads\r\ndrwx------@  56 Heng  staff   1904 Mar 21 11:21 Library\r\ndrwx------+   5 Heng  staff    170 Oct  8  2015 Movies\r\ndrwx------+   7 Heng  staff    238 Oct  8  2015 Music\r\ndrwx------+   8 Heng  staff    272 Dec 17 11:10 Pictures\r\ndrwxr-xr-x+   5 Heng  staff    170 Oct  8  2015 Public\r\ndrwxr-xr-x    5 Heng  staff    170 May  1 11:44 Workspace\r\n\r\n```\r\nI just have a .bash_profile.\r\nand it does not have settings about locale.:cry:\r\n\r\nI also try to reinstall bash-completion, it doesn't help.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216429023,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T03:48:16Z",
		"body" : "Well, we can try it the hackish way: force your locale settings back to the typical ones by configuring them in your `~/.bash_profile`. Add these lines to your `~/.bash_profile`:\r\n\r\n```\r\nexport LANG=en_US.UTF-8\r\nunset LC_ALL LC_COLLATE LC_CTYPE LC_MESSAGES LC_MONETARY LC_NUMERIC LC_TIME\r\n```\r\n\r\nThen start a new session, see what `locale` says your locale settings are now (they should all be \"en_US.UTF-8\"), and see completion is still slow.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216429796,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-05-03T03:55:41Z",
		"body" : "@apjanke Added. And still slow. Maybe I should try to reinstall brew...\r\nAnd I think the main reason is that 3800+ loops..",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 216430356,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T04:02:55Z",
		"body" : "Yeah, I'd do that pretty soon myself.\r\n\r\nOne other quick test to try: create a new user and set their `~/.bash_profile` up to use `brew`. See what their `local` output is, and see if brew completion is slow for them. That will give you some indication as to whether it's a user account configuration or Homebrew installation configuration issue.\r\n\r\nIf it's still slow for a new user, reinstalling Homebrew is a good next step.\r\n\r\nIf it's fast for the new user, I'd probably reinstall Homebrew anyway just in case. And then see if you could migrate to a new user account for yourself.\r\n\r\nMake sure you have good backups of all your data before messing with switching to a new account or doing low-level fiddling with the OS!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 217167629,
		"user" : {
			"login" : "zh-lab"
		},
		"created_at" : "2016-05-05T14:22:56Z",
		"body" : "I just reinstalled OS X. And everything works well now...Thanks for your help!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 126
	},
	{
		"id" : 212797764,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-21T08:09:13Z",
		"body" : "üëç other than nit. My only other concern is length: the longer we make some of these documents the less people read. Given this isn't e.g. CONTRIBUTING.md though it's probably fine üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 127
	},
	{
		"id" : 212799048,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T08:14:53Z",
		"body" : "Thanks!\r\n\r\nYeah, I know this is getting long. (Though I think this new multi-indent structure is better than the prior paragraph-long bullet points. Esp bc it's easier to scan an outline structure and pick out major TODOs vs explanatory details. I hope...)\r\n\r\nThinking I'll just merge this now, and if someone with more editing skillz can put together a useful \"TL;DR\" to put up top, or a restructuring, that can be another PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 127
	},
	{
		"id" : 212799164,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-21T08:15:30Z",
		"body" : "Sounds good üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 127
	},
	{
		"id" : 213025302,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T17:21:16Z",
		"body" : "Open question: what should be the preferred term for the main/central/official tap repositories, the ones which are owned by Homebrew on GitHub, like `homebrew/core`, `homebrew/science`, `homebrew/dupes`, and so on?\r\n\r\n\"Main\"? \"Official\"? \"Central\"? Something else?\r\n\r\nThe existing doco uses various terms in various places; I don't think there's a clear existing winner.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 127
	},
	{
		"id" : 213027899,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-21T17:28:37Z",
		"body" : "Some minor wording fixes/suggestions, but otherwise a big :+1:.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 127
	},
	{
		"id" : 213029116,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-21T17:31:10Z",
		"body" : "> Open question: what should be the preferred term for the main/central/official tap repositories, the ones which are owned by Homebrew on GitHub, like homebrew/core, homebrew/science, homebrew/dupes, and so on?\r\n> \r\n> \"Main\"? \"Official\"? \"Central\"? Something else?\r\n\r\nTo me the most fitting term is ‚Äúofficial‚Äù. When I'm thinking of ‚Äúmain‚Äù, that includes Homebrew/brew and Homebrew/homebrew-core, but probably none of the other repositories/taps hosted under the Homebrew organization (but they are still official).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 127
	},
	{
		"id" : 213033801,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T17:44:56Z",
		"body" : "> To me the most fitting term is ‚Äúofficial‚Äù. When I'm thinking of ‚Äúmain‚Äù, that includes Homebrew/brew and Homebrew/homebrew-core, but probably none of the other repositories/taps hosted under the Homebrew organization (but they are still official).\r\n\r\nI think that makes sense. Though other non-Homebrew taps might also be \"official\" to their own maintainers. E.g. the Alpine project might choose to set up an official `alpine/alpine` tap to support their various patches and options.\r\n\r\nMind if we defer this word choice to another PR? That might be a longer discussion, and I think the re-ordering currently here is worth pushing on its own.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 127
	},
	{
		"id" : 213038060,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-21T17:54:56Z",
		"body" : "> Mind if we defer this word choice to another PR? That might be a longer discussion, and I think the re-ordering currently here is worth pushing on its own.\r\n\r\nNo objection to merging it now as-is. I agree‚Äîand appreciate the improvements made here! :bow:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 127
	},
	{
		"id" : 213073208,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T19:08:34Z",
		"body" : "> My only other concern is length: the longer we make some of these documents the less people read.\r\n\r\nYeah, this is getting pretty long. I think this change actually improves matters a bit: even though the document is longer now, it breaks detailed explanations out into sub-bullets, so now there's less text at the \"top level\" of bullets, and each important item has its own bullet, instead of being inside a paragraph. So if a reader is just skimming or reading the top-level items, they're more likely to get the info they need.\r\n\r\nCould add a condensed \"TL;DR\" version of the submission steps, but that might make readers more likely to skip the bulk of the article; seems like a net loss.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 127
	},
	{
		"id" : 213078481,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T19:22:45Z",
		"body" : "Merged.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 127
	},
	{
		"id" : 212771049,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-04-21T06:51:46Z",
		"body" : "I‚Äôm üëç for this especially to get consistent style when writing documentation. We might want to take this PR as an opportunity to speak about jargon again (https://github.com/Homebrew/legacy-homebrew/issues/41884, https://github.com/Homebrew/legacy-homebrew/issues/41885).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 212792670,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T07:56:48Z",
		"body" : ">  ...about jargon...\r\n\r\nDefinitely relevant; I'm going to have to read up on that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 212798483,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-21T08:12:26Z",
		"body" : "I was pretty dubious about this but üëç all around.\r\n\r\nI'd also really like to see us üíÄ stupid jargon we have like \"bottles\". It's fine to use these words for internal class names and with developers/maintainers and maybe even contributors but I hate using them for end-users.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 212798656,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-21T08:13:04Z",
		"body" : "> but I hate using them for end-users.\r\n\r\nand this is something that again and again I hear end-users complaining about the thing that annoys them most about Homebrew. We can keep the cool beer theme without needing people to know that \"bottle == binary package\".",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 212819988,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T08:58:20Z",
		"body" : "> jargon we have like \"bottles\" ... end-users complaining about the thing that annoys them\r\n\r\nYeah. I'm a maintainer now and I'm still not quite clear on exactly what \"kegs\", \"racks\", \"brew\", and some other things are. Bad indicator. Jargon is good and fun when it's a useful shorthand for everyone involved in a project; not when it's a barrier to entry or a usability problem.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 212820770,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-21T09:01:00Z",
		"body" : "> Yeah. I'm a maintainer now and I'm still not quite clear on exactly what \"kegs\", \"racks\", \"brew\", and some other things are. Bad indicator. Jargon is good and fun when it's a useful shorthand for everyone involved in a project; not when it's a barrier to entry or a usability problem.\r\n\r\nCouldn't agree more. Even `formula` is an overloaded term.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 212821938,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T09:05:44Z",
		"body" : "Amended to remove the reference to Oxford commas. Don't want to make this PR about any particular style/usage choice. (Plus, that's a long and interesting discussion that maybe deserves its own PR!)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 212822622,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T09:08:43Z",
		"body" : "> I was pretty dubious about this but :+1: all around.\r\n\r\nThank you!\r\n\r\nThis is meant to be a continual work-in-progress and a basis for discussion, not a hard-and-fast set of rules, if that makes any difference. If folks think that's a good approach, would like to hear suggestions for how to incorporate that philosophy into the \"goals\" or \"how to use this document\" sections.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 212823068,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T09:10:49Z",
		"body" : "> Even formula is an overloaded term.\r\n\r\nTotally. Am currently wrestling with that \"set of instructions\" vs \"thing you install\" distinction over in homebrew/brew#127 when trying to discuss the `install`/`audit` sequence in straightforward terms.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 212830672,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T09:34:14Z",
		"body" : "Amended to add language about personal pronouns and gender.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 212836779,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T09:49:51Z",
		"body" : "> We might want to take this PR as an opportunity to speak about jargon again (https://github.com/Homebrew/legacy-homebrew/issues/41884, https://github.com/Homebrew/legacy-homebrew/issues/41885).\r\n\r\nI'll read through that and see if I have anything to add. Thanks for the pointer.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 212843133,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-04-21T10:12:38Z",
		"body" : "Yeah it‚Äôs annoying when you talk about Homebrew to have to define each term every time: ‚ÄúSo we have bottles \\<insert what‚Äôs a bottle here> for formulae \\<insert what‚Äôs a formula here> that are installed under a common Cellar \\<insert what‚Äôs the Cellar here>, etc‚Äù",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 213025578,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T17:22:22Z",
		"body" : "Open question that should become a bullet point in this document: What should be the preferred term for the main/central/official tap repositories, the ones which are owned by Homebrew on GitHub, like `homebrew/core`, `homebrew/science`, `homebrew/dupes`, and so on?\r\n\r\n\"Main\"? \"Official\"? \"Central\"? Something else?\r\n\r\n#127 is working on this now, and a style guideline would make it a quick resolution.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 213029973,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-21T17:33:08Z",
		"body" : "> \"Main\"? \"Official\"? \"Central\"? Something else?\r\n\r\nI like \"official\".",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 213053066,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-04-21T18:27:01Z",
		"body" : "Looks great, Andrew! I agree with the vast majority of everything you wrote without hesitation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 213091937,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-21T20:01:30Z",
		"body" : "I don't want to shoot at this particularly because I think it's useful, but I don't personally expect many people to ever read let alone attempt to follow this kind of thing.\r\n\r\nWe already struggle enormously with getting people to follow our preferred code guidelines, even _within the maintainer group_ let alone outside of it or with first-time contributors, and that's actual code rather than \"we suggest you use this language in this way but not this other way\".\r\n\r\nIf anything I think we're already a bit too heavy on the documentation and would like to tear chunks out of it in an attempt to have documents that don't make people cry when told to read them, but I'll go quietly on this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 213095888,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T20:11:06Z",
		"body" : "> ... but I don't personally expect many people to ever read let alone attempt to follow this kind of thing.\r\n\r\nI think that's fine, and I'm not going to harp on people to follow this too much in most cases. But I think a) it'll be really useful for those of us who do want a style guide to help us with our writing or who want to act in an \"editor\" role, and b) like a Code of Conduct, it's good to have an explicit official stance on some of these things, in case arguments do arise.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 213096356,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T20:11:46Z",
		"body" : "Grudgingly admitting that our house style is in fact \"no Oxford comma\" and adding that to the doc.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 213297941,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-22T07:18:10Z",
		"body" : "> I think that's fine, and I'm not going to harp on people to follow this too much in most cases. But I think a) it'll be really useful for those of us who do want a style guide to help us with our writing or who want to act in an \"editor\" role, and b) like a Code of Conduct, it's good to have an explicit official stance on some of these things, in case arguments do arise.\r\n\r\nYeh, I agree that it's probably better to have documentation like this than not have it. I personally wouldn't spend the time to write this but considering it's basically done and a nice documentation of our existing use of language: üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 213522871,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-22T17:36:59Z",
		"body" : "> I personally wouldn't spend the time to write this but considering it's basically done...\r\n\r\nScratchin' my own itch here. :wink:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 213733236,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-23T12:33:10Z",
		"body" : "@apjanke Heh, a wise choice. Feel free to üö¢ this whenever you're happy.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 214594211,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T03:10:38Z",
		"body" : "Merged. Thank you all for the feedback!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 128
	},
	{
		"id" : 213754075,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-23T15:02:02Z",
		"body" : "Actually, now after some thought, I think current existing behavior is correct. `brew uses/deps` sort of behaves like `brew reinstall/upgrade`. So the current installation should be taken into the account. For example, if I `brew install foo --with-optional-bar`. `brew deps foo` should still return bar, even when the default is to filter optional deps. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 213754568,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-23T15:03:32Z",
		"body" : "That would mean `--skip-recommended` basically does nothing unless it's `:run`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 213755137,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-23T15:05:14Z",
		"body" : "Perhaps we need to revert to the old behavior that had it in the reverse, --skip-optional and --include-recommended because --skip-recommended isn't useful right now, if you're saying the behavior is actually correct.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 213755150,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-23T15:05:16Z",
		"body" : "To be more clearly, local installation should be treated with higher priority than `--skip/include` flags. The latter is used more often to determine deps before you install it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 213755413,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-23T15:06:02Z",
		"body" : "As far as I can tell the existing logic has nothing to do with local installation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 213756025,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-23T15:08:46Z",
		"body" : "Look at output of `brew deps libass --skip-recommended` and look at the `libass` formula, and tell me that makes sense!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 213756046,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-23T15:08:49Z",
		"body" : "> because --skip-recommended isn't useful right now'\r\n\r\nIt can be useful if you want to do: `brew install $(brew --skip-recommended foo); brew install foo --without-recommended-deps`\r\n\r\n> As far as I can tell the existing logic has nothing to do with local installation.\r\n\r\nThe `dependant.build` will check local installation. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 213756731,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-23T15:13:02Z",
		"body" : "I'm looking locally at the command output in the absence of having these formulae installed. I thought `brew deps` and `brew uses` were currently supposed to be stateless commands having nothing to do with the user's local Cellar and that the output should match between systems.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 213756920,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-23T15:16:28Z",
		"body" : "> I thought brew deps and brew uses were currently supposed to be stateless commands having nothing to do with the user's local Cellar and that the output should match between systems.\r\n\r\nThat may not be the case but I agree it should be.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 213756957,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-23T15:17:11Z",
		"body" : "Sorry, I made a mistake here. You are right that the existing logic won't check for local installation. What will check is the flag declared in formula. e.g. `depends_on: foo => [with-bar, without-baz]`. In this case, the build flags(declared by formula authors) should be still considered with higher priority than user's input flag.  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 213757043,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-23T15:19:18Z",
		"body" : "```\r\n\r\n  depends_on \"pkg-config\" => :build\r\n  depends_on \"yasm\" => :build\r\n\r\n  depends_on \"freetype\"\r\n  depends_on \"fribidi\"\r\n  depends_on \"harfbuzz\" => :recommended\r\n  depends_on \"fontconfig\" => :optional\r\n```\r\n\r\n```\r\niMac-TMP:~ joe$ brew deps --skip-recommended libass \r\ncairo\r\nfontconfig\r\nfreetype\r\nfribidi\r\ngettext\r\nglib\r\ngobject-introspection\r\nharfbuzz\r\nicu4c\r\nlibffi\r\nlibpng\r\npixman\r\npkg-config\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 213758066,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-23T15:24:34Z",
		"body" : "I think the problem is because we don't take into account whether a filter(include or skip) is enforced by users or enforced by Homebrew's default behavior.\r\n\r\nWhat should happen should be this:\r\n```\r\nskip if user explicitly passes --skip- flag\r\nkeep if user explicitly passes --include- flag\r\nkeep if the defendant should be built with it (declared by formula)\r\nskip if it's optional (default behavior)\r\nkeep if it's recommended (default behavior)\r\n```\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 213762121,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-23T15:29:59Z",
		"body" : "En, this question is not very straight forward. I probably need to take more time to figure this out the correct behaviors. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 213764071,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-23T15:33:40Z",
		"body" : "The output with various combinations of the flags made sense to me with the \"build veto\" removed but take your time thinking about it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 214144578,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-25T05:36:10Z",
		"body" : "After some thought, I think this may be what we want.\r\n\r\n```ruby\r\nf.recursive_dependencies do |dependent, dep| do\r\n  if dep.build?\r\n    Dependency.prune unless ARGV.include? \"--include-build\"\r\n  elsif dep.recommended?\r\n    Dependency.prune if ARGV.include?(\"--skip-recommended\") || dependent.build.without?(dep)\r\n  elsif dep.optional?\r\n    Dependency.prune if !ARGV.include?(\"--include-optional\") && !dependent.build.with?(dep)\r\n  end\r\nend",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 214166880,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-25T06:57:26Z",
		"body" : "@xu-cheng what does it do in case of `:run` / `dep.run?`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 214168874,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-25T06:59:48Z",
		"body" : "`dep.run?` has nothing to do with this. As it's used only as a tag for `brew audit` or bottle system.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 214180214,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-25T07:27:10Z",
		"body" : "@xu-cheng That looks right to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 216555869,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:59:04Z",
		"body" : "@ilovezfs Any news here?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 217717776,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-08T13:12:43Z",
		"body" : "@mikemcquaid @xu-cheng OK, I refreshed the PR with @xu-cheng's proposal. There are still some weird results, though. `--include-optional` seems to get extended recursively. So `brew deps lnav` gives you `pcre` and `readline`, with no mention of curl because\r\n```\r\ndepends_on \"curl\" => [\"with-libssh2\", :optional]\r\n```\r\nOK, that makes sense. So let's say we want to see that `curl` show up, and make sure it's using `with-libssh2`.\r\n```\r\nbrew deps --include-optional lnav\r\n```\r\nwhich now drags in all of curl's optional dependencies as well, yielding;\r\n```\r\n$ brew deps lnav --include-optional\r\natk\r\nberkeley-db4\r\nboost\r\nc-ares\r\ncairo\r\ncurl\r\ndoxygen\r\nfontconfig\r\nfreetype\r\ngdbm\r\ngdk-pixbuf\r\ngettext\r\nglib\r\ngobject-introspection\r\ngraphite2\r\ngraphviz\r\ngsettings-desktop-schemas\r\ngtk+3\r\ngts\r\nharfbuzz\r\nhicolor-icon-theme\r\nhomebrew/dupes/tcl-tk\r\nicu4c\r\njansson\r\njasper\r\njpeg\r\nlibcroco\r\nlibepoxy\r\nlibev\r\nlibevent\r\nlibffi\r\nlibgsf\r\nlibidn\r\nlibmetalink\r\nlibpng\r\nlibressl\r\nlibrsvg\r\nlibssh2\r\nlibtiff\r\nlibxml2\r\nnetpbm\r\nnghttp2\r\nopenssl\r\npango\r\npcre\r\npixman\r\npkg-config\r\npython\r\nreadline\r\nrtmpdump\r\nspdylay\r\nsqlite\r\n```\r\nThis isn't a regression caused by this PR, but I do think we need to reconsider not showing first level optional by default since the output of `--include-optional` is now pretty over the top, and passing `-1` will hide the `libssh2` altogether.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 217721391,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-08T14:00:23Z",
		"body" : "> There are still some weird results, though. `--include-optional` seems to get extended recursively.\r\n\r\nHow are you proposing to resolve this issue? I'd find it weird and hard to understand if `--include-optional` only applied to the immediate dependencies. And if we added a new option like `--include-optional-for=<formula1>,<formula2>,‚Ä¶`, our already hard to grasp `brew deps` with all its options would become even more complicated. And we'd need to do something similar for `--include-build` and `--skip-recommended`.\r\n\r\nI'd say the list `brew deps` returns is more useful for consumption by scripts and only really simple queries by humans. For more complicated cases like the one you sketched, a human would need to look at the dependency tree (or graph), thus I'd suggest to improve `deps --tree` for this. It's functionality is currently very limited, but it shouldn't be too difficult to make it output a tree where build, optional, recommended, and hard dependencies are all printed together, but are still distinguishable. This form of visualization is also much better suited for adding something like `--max-levels=<n>` where the tree would be truncated at depth `<n>`, but leaves that haven't been fully expanded could be annotated as such.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 217724731,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-08T14:54:21Z",
		"body" : "Something that does this (but with `deps` command, I'd think):\r\n```\r\niMac-TMP:local joe$ brew install --with-curl lnav\r\nreadline\r\npcre\r\npkg-config\r\nopenssl\r\nlibssh2\r\ncurl\r\nError: OK\r\n```\r\nwhich is generated using\r\n```\r\ndiff --git a/Library/Homebrew/formula_installer.rb b/Library/Homebrew/formula_installer.rb\r\nindex 4b8dcf2..f93a1e6 100644\r\n--- a/Library/Homebrew/formula_installer.rb\r\n+++ b/Library/Homebrew/formula_installer.rb\r\n@@ -268,6 +268,8 @@ class FormulaInstaller\r\n     check_requirements(req_map)\r\n     deps = expand_dependencies(req_deps + formula.deps)\r\n \r\n+    puts deps\r\n+raise \"OK\"\r\n     deps\r\n   end\r\n \r\n@@ -354,8 +356,8 @@ class FormulaInstaller\r\n         Dependency.prune\r\n       elsif dep.build? && install_bottle_for?(dependent, build)\r\n         Dependency.prune\r\n-      elsif dep.satisfied?(options)\r\n-        Dependency.skip\r\n+#      elsif dep.satisfied?(options)\r\n+#        Dependency.skip\r\n       end\r\n     end\r\n \r\n\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 225332386,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-11T02:39:25Z",
		"body" : "Bump.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 225334179,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-11T03:26:05Z",
		"body" : "I think the PR as-is is fine and good to go.\r\n\r\nThe discussion about how to make the output of `--include-optional` more useful with extensive dependency trees like in the `lnav` case probably needs to continue somewhere else. (I still believe that `brew deps --tree` can be more useful in this case, if it is extended a bit to respect the `--include-*` and `--skip-*` options and to annotate its output with ‚Äúoptional‚Äù etc.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 225334296,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-11T03:29:35Z",
		"body" : "@UniqMartin on a related note to the formula-specific-options thing, it occurred to me the other day that it's related to the same usage attempted here for nearly the same purposes https://github.com/Homebrew/legacy-homebrew/issues/48986#issuecomment-215114587",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 225334472,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-11T03:35:22Z",
		"body" : "Perhaps despite the redundancy, the formula specific options thing might be more trivially added to `brew install` as demonstrated above. Effectively, that's a `brew install --dry-run` for the sake of spitting out the dependencies that will actually be used, modulo whether to include or to exclude what's already satisfied on a given system.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 225334667,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-11T03:41:27Z",
		"body" : "A `brew install --dry-run` (or some other command that has the same effect) makes sense to me. In the end, all of this just shows that our dependency handling and dependency resolution isn't as flexible and as hackable as it could be. I'm not sure at which point it is preferable to reimplement it from scratch (and with a proper design phase preceding it) instead of just tweaking various commands that try to use it. But this is certainly not an easy task to tackle ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 225335031,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-11T03:51:54Z",
		"body" : "I think the `--dry-run` thing for `install` helps to distinguish between the questions that each command is trying to answer. `brew deps` is context free, describing the tree of dependencies and requirements from a universal perspective. But I think often the user is trying to answer a very context specific question: if I install foo with a given option set what specific set of deps/reqs is both necessary and sufficient to accomplish that task, and what subset do I not have already. I think part of the problem with deps is that it's not really designed to answer that context specific question. Sure it can be, if you sit there and reason through the tree and pick the right command line switches, and consult a graph theory text book, and meditate for a while, and then intersect that with your Cellar being careful to track what's already satisifed, etc. etc., but it's a silly enterprise if brew install already knows the exact answer to the context specific question without any other fuss.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 225335452,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-11T04:05:55Z",
		"body" : "@xu-cheng :shipit: ?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 225343802,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-11T08:13:44Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 225359106,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-11T12:45:11Z",
		"body" : "Not super happy with the commit subject, but I guess that ship has sailed. I think we prefer something more along the lines of `deps: respect --skip-recommended`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 225359345,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-11T12:49:03Z",
		"body" : "It was specifically `build.with?` deps that were overriding everything else in case that wasn't clear that that's the meaning of \"build\" in the commit subject.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 225360312,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-11T13:05:05Z",
		"body" : "Yes, I realize that my example was poorly chosen. I was more referring to the style and not to the exact contents of my example. Anyway, it has been committed ‚Ä¶ so that's idle talk.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 129
	},
	{
		"id" : 215972194,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-04-30T15:07:23Z",
		"body" : "@mikemcquaid shall I :ship: this one, too?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 130
	},
	{
		"id" : 215992328,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-30T20:15:20Z",
		"body" : ":+1: Given that this pretty much the same like Homebrew/homebrew-services#48.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 130
	},
	{
		"id" : 215996685,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-30T21:33:21Z",
		"body" : ":ship:d, thanks @ilovezfs.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 130
	},
	{
		"id" : 213092413,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-21T20:02:31Z",
		"body" : "> [‚Ä¶] the `Formula` subclass definitions are all wrapped in **random** module namespaces so they're effectively anonymous, [‚Ä¶]\r\n\r\nThe problem here is how those namespaces are‚Äîwell‚Äînamed: It's not random at all. [The name is a hashed version of the full path](https://github.com/Homebrew/brew/blob/4d35dd3fbb088ed369f9fcfcdc5a48321b67e1cc/Library/Homebrew/formulary.rb#L37) and this is not going to change, even if a formula is updated and the file contents change.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213097342,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T20:13:38Z",
		"body" : "> The name is a hashed version of the full path and this is not going to change, even if a formula is updated and the file contents change.\r\n\r\nOh crap. That completely shoots down my theory. Somehow I had it in my head that it was random or hashing the file contents. Going to review this to make sure that doesn't break anything.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213107171,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-21T20:45:03Z",
		"body" : "Yeah, there was an edge case where it might break bottle fetching in PRs with multiple patches affecting the same formula. Fixed it by switching to use `brew info --json` in more places.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213300479,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-22T07:23:30Z",
		"body" : "I've not given the code detailed review but trust you if you've tested this. Nice work here üëç \r\n\r\nJust to make a somewhat related comment that may clean some of this up if you wanted to go in that direction: @xu-cheng and I had chatted previously about changing the generated bottle `.bottle.*.rb` files into JSON and putting all the metadata in there that's needed for both `brew pull` and to upload bottles to their correct location without actually pulling the code for the formula we're wanting to upload with `brew test-bot`. This means we can avoid having any PR code executed at upload time. I can see how that `.json` approach might make things easier for some of this pull logic, too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213619564,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-22T23:06:51Z",
		"body" : "Left a few comments, but mostly looking good to me. (Haven't tested it myself, though.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213645233,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-23T01:45:32Z",
		"body" : "Open question for other maintainers, based on something Martin brought up: there are a couple places where I'm conditionally adding items to a list and avoiding duplicates. Currently doing this with `the_list.concat.uniq!`, which is kind of clumsy. Martin suggested a `Set`, but I also want to preserve the ordering of items in the list. Would it be appropriate to make a new class for this (like `UniqList`), or add a method (like `concat_uniq` or `concat_if_absent`), as far as Homebrew code style goes? We seem to avoid making new classes or ADTs (abstract data types).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213646802,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-23T01:48:19Z",
		"body" : "Also, there may be an issue with this with respect to bottle pulls. It threw some errors for me earlier today. I think that's related to the weird double-merge from Homebrew/homebrew-core#515. But I'm going to put this through another round of testing and figure out the root cause before merging.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213650872,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-23T02:08:18Z",
		"body" : "Noting as a TODO, maybe for this PR, maybe in the future: when calling `brew info --json=v1`, we can't use the exit status to differentiate between nonexistent formulae, and formulae whose files have errors in them. Both return exit status 1. Would need to either expand the exit status behavior of `info` to distinguish those cases, or parse the output. Or do a formula-existence lookup before calling `brew info`. Exit status or file lookup sounds better than error message parsing; that's not part of a stable API.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213651318,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-23T02:12:35Z",
		"body" : "There's also an edge case where *new* formulae which have bottles may not trigger the \"foo has a bottle: do you need to update it\" warning when `--bottle` is not supplied; I think because the formula is read from the very first commit adding it, before BrewTestBot has added the bottle block at all. That'll take some more work to fix, switching more of `pull` over to using the \"external\" info from `brew info` instead of the internal Formula object. Probably, to be safe, it should switch completely to using the external info, and never use Formula objects in-process.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213652267,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-23T02:28:15Z",
		"body" : "@mikemcquaid @xu-cheng: Re: \"changing the generated bottle .bottle.*.rb files into JSON\" ‚Äì Yeah, that would probably make this easier to code, and maybe fix some lurking edge cases. I think the whole `pull` logic needs to be switched to external formula info queries one way or another to get rid of edge cases, either using `brew info --json` or bottle-info JSON files. Because of the unchanging module wrapper names that @UniqMartin pointed out, formula cache class clearing isn't going to do it. We could alter the class wrapper logic to make cache clearing doable, but using external queries would be easier and cleaner IMHO.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213652449,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-23T02:31:35Z",
		"body" : "I think this is ready, barring further feedback. (I'd like to defer the `Set`/`UniqList` thing and the new-formula edge case to other PRs.)\r\n\r\nI think the errors I ran in to earlier today were a fluke. They only happen on homebrew/homebrew-core#518.\r\n\r\n```\r\n$ brew pull --branch-okay --bottle 518\r\n==> Fetching patch\r\nPatch: https://github.com/Homebrew/homebrew-core/pull/518.patch\r\n==> Applying patch\r\nApplying: cowsay: dummy revision bump\r\n==> Patch closes issue #518\r\nWarning: Nonstandard bump subject: cowsay: dummy revision bump\r\nWarning: Subject should be: cowsay 3.03\r\nError: Failure while executing: /usr/bin/curl -f#LA Homebrew/0.9.9\\ (Macintosh;\\ Intel\\ Mac\\ OS\\ X\\ 10.9.5)\\ curl/7.30.0 --silent --fail -o /dev/null -I https://github.com/BrewTestBot/homebrew-core/compare/homebrew:master...pr-518\r\n```\r\n\r\nI can't reproduce it with any other PR. And the same error happens when I run the current `brew pull` code, so I don't think it is a regression caused by these changes. Maybe some weirdness caused by that double-merge or some test-bot oddity.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213653443,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-23T02:37:06Z",
		"body" : "@UniqMartin:\r\n\r\n> Left a few comments, but mostly looking good to me. (Haven't tested it myself, though.)\r\n\r\nI encourage you to give it a try and see what you think. This is a maintainer-facing change on a frequently used tool, so you might want to see how it feels. I think it's a big improvement (or I wouldn't be submitting this), but interested to hear you & other maintainers' reactions & preferences.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213656658,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-23T03:04:34Z",
		"body" : "> Maybe some weirdness caused by that double-merge or some test-bot oddity.\r\n\r\nThe downstream bottle job has vanished. That's the issue there, nothing more sinister. If you re-queue the original job you'll regain the ability to test-pull that PR.\r\n\r\nWill catch up on the rest of the comments here Saturday (today UK time) afternoon sometime, need to sleep imminently or I'm going to be hilariously grumpy when I get up in the morning.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213656899,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-23T03:09:23Z",
		"body" : "Get good rest!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213744408,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-23T13:57:25Z",
		"body" : "> Open question for other maintainers, based on something Martin brought up: there are a couple places where I'm conditionally adding items to a list and avoiding duplicates. Currently doing this with `the_list.concat.uniq!`, which is kind of clumsy. Martin suggested a `Set`, but I also want to preserve the ordering of items in the list. Would it be appropriate to make a new class for this (like `UniqList`), or add a method (like `concat_uniq` or `concat_if_absent`), as far as Homebrew code style goes?\r\n\r\nIf it's important to preserve the order, let's stick with the array. I think neither a new class nor a new method is warranted for this case. Maybe the list doesn't need to be compacted immediately. In that case you could do `the_list += sub_list` where it's extended and defer the `uniq!` call to where its items will be processed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213908183,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-24T07:41:42Z",
		"body" : "Amended to address the latest round of feedback.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213948052,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-24T12:06:04Z",
		"body" : "Would be nice if you could address the warnings that cause the test bot to fail, i.e. the seemingly unused variables. You can locally check for those warnings with either `brew readall --syntax` or simply by running your code with `RUBYOPT=-w` set.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 214579250,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T01:20:04Z",
		"body" : "Thanks for the pointer. Fixed them and `brew readall --syntax` is clean now. Should pass.\r\n\r\n```\r\n[/usr/local on ‚áÑ brew-pull-portable-bottle-downloads]\r\n$ brew readall --syntax\r\n[/usr/local on ‚áÑ brew-pull-portable-bottle-downloads]\r\n$\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 214579359,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T01:20:58Z",
		"body" : "I'm postponing merging this until the discussion around Analytics has settled down, just on the off chance that this could introduce a regression that would interfere with merging urgent patches for analytics.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 214902908,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T22:08:47Z",
		"body" : "Note to self: consider rearranging the bottle verification output for the multi-bottle case for cosmetic reasons.\r\n\r\n```\r\n==> Verifying bottles published on Bintray\r\nVerifying bottle: osquery-1.7.3.el_capitan.bottle.2.tar.gz\r\nWaiting on Bintray........\r\n######################################################################## 100.0%\r\nVerifying bottle: rocksdb-4.5.1.el_capitan.bottle.tar.gz\r\n######################################################################## 100.0%\r\n[/usr/local/Library/Taps/homebrew/homebrew-core on ‚áÑ master]\r\n```\r\n\r\nWould look better if the \"Waiting on Bintray......\" came first, and then each \"Verifying bottle\" line was next to the progress meter for that bottle's download.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 214903143,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T22:09:49Z",
		"body" : "Switching this back to \"in progress\" because I ran in to an issue with it saying \"Warning: bump commit subject should be...\" when it really shouldn't when no version bump happens in a particular patch.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 216441658,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T05:23:38Z",
		"body" : "Fixed that false-positive \"nonstandard bump commit subject\" message.\r\n\r\nI think this is ready to go now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 216515665,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-03T12:43:21Z",
		"body" : "@apjanke looks like this breaks `brew pull` on older ruby.\r\n```\r\nJosephs-MacBook-Pro:homebrew-x11 joe$ brew pull --bottle https://github.com/Homebrew/homebrew-x11/pull/205\r\n==> Fetching patch \r\nPatch: https://github.com/Homebrew/homebrew-x11/pull/205.patch\r\n==> Applying patch\r\nApplying: scantailor 0.9.12.2\r\n==> Patch closes issue #205\r\n==> Fetching patch (bottle commit)\r\nPatch: https://github.com/BrewTestBot/homebrew-x11/compare/homebrew:master...pr-205.patch\r\n==> Applying patch\r\nApplying: scantailor 0.9.12.2\r\nApplying: scantailor: update 0.9.12.2 bottle.\r\n==> Publishing on Bintray: scantailor 0.9.12.2\r\n{\"files\":3}\r\n==> Patch changed:\r\n scantailor.rb | 86 +++++++++++++++--------------------------------------------\r\n 1 file changed, 21 insertions(+), 65 deletions(-)\r\n==> Verifying bottles published on Bintray\r\nVerifying bottle: scantailor-0.9.12.2.yosemite.bottle.tar.gz\r\nError: can't convert Hash into String\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/http.rb:560:in `initialize'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/http.rb:560:in `open'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/http.rb:560:in `connect'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/timeout.rb:53:in `timeout'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/timeout.rb:101:in `timeout'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/http.rb:560:in `connect'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/http.rb:553:in `do_start'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/http.rb:542:in `start'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/http.rb:440:in `start'\r\n/usr/local/Library/Homebrew/cmd/pull.rb:521:in `verify_bintray_published'\r\n/usr/local/Library/Homebrew/cmd/pull.rb:502:in `each'\r\n/usr/local/Library/Homebrew/cmd/pull.rb:502:in `verify_bintray_published'\r\n/usr/local/Library/Homebrew/extend/pathname.rb:328:in `cd'\r\n/usr/local/Library/Homebrew/extend/pathname.rb:328:in `chdir'\r\n/usr/local/Library/Homebrew/extend/pathname.rb:328:in `cd'\r\n/usr/local/Library/Homebrew/cmd/pull.rb:501:in `verify_bintray_published'\r\n/usr/local/Library/Homebrew/cmd/pull.rb:234:in `pull'\r\n/usr/local/Library/brew.rb:87:in `send'\r\n/usr/local/Library/brew.rb:87\r\n```\r\n\r\nReverting it made that go away.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 216528450,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T13:32:27Z",
		"body" : "Which version of Ruby is this? 1.8.0 or 1.8.7?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 216528834,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-03T13:33:52Z",
		"body" : "Josephs-MacBook-Pro:~ joe$ /usr/bin/ruby --version\r\nruby 1.8.7 (2012-02-08 patchlevel 358) [universal-darwin12.0]",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 216529694,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T13:37:23Z",
		"body" : "Okay, I can reproduce. Working on it.\r\n\r\nSorry for forgetting to test this on 1.8.7, too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 216533143,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T13:50:12Z",
		"body" : "Here's a fix: #191. Had to change a couple things to be back-compatible with the older Net::HTTP API. Works for me on Ruby 2 and 1.8.7 on OS X 10.9.5. Want to give it a spin?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 216705569,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-04T00:17:47Z",
		"body" : "I'm afraid I also have to report a regression:\r\n\r\n```\r\n$ brew pull --bottle https://github.com/Homebrew/homebrew-core/pull/769\r\n==> Fetching patch\r\nPatch: https://github.com/Homebrew/homebrew-core/pull/769.patch\r\n==> Applying patch\r\nApplying: pelikan 0.1.1 (new formula)\r\nApplying: update with bfontaine's comment\r\nApplying: update with UniqMartin's comments\r\nApplying: update with new release tarball and hash signature\r\n==> Patch closes issue #769\r\nWarning: Nonstandard bump subject: update with new release tarball and hash signature\r\nWarning: Subject should be: pelikan 0.1.1 (new formula)\r\n==> Fetching patch (bottle commit)\r\nPatch: https://github.com/BrewTestBot/homebrew-core/compare/homebrew:master...pr-769.patch\r\n==> Applying patch\r\nApplying: pelikan 0.1.1 (new formula)\r\nApplying: update with bfontaine's comment\r\nApplying: update with UniqMartin's comments\r\nApplying: update with new release tarball and hash signature\r\n==> Publishing on Bintray: pelikan 0.1.1\r\n{\"files\":3}\r\n==> Patch changed:\r\n Formula/Pelikan.rb | 21 +++++++++++++++++++++\r\n 1 file changed, 21 insertions(+)\r\n==> Verifying bottles published on Bintray\r\nWarning: No bottle defined in formula pelikan\r\n```\r\n\r\nThis is for a new formula that didn't exist before. Bottles are properly published on Bintray, but the BrewTestBot commit that adds the bottles is missing and consequently bottles are also not verified. (But the missing commit is really the main issue here.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 216707595,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-04T00:28:30Z",
		"body" : "> I'm afraid I also have to report a regression:\r\n\r\nI think there's something going wrong with [the related bottling job](http://bot.brew.sh/job/Homebrew%20Bottles/49024/console), where `brew pull` is also used:\r\n\r\n```\r\n<snip>\r\nbrew pull --clean https://github.com/Homebrew/homebrew-core/pull/769\r\n==> Fetching patch \r\nPatch: https://github.com/Homebrew/homebrew-core/pull/769.patch\r\n==> Applying patch\r\nApplying: pelikan 0.1.1 (new formula)\r\nApplying: update with bfontaine's comment\r\nApplying: update with UniqMartin's comments\r\nApplying: update with new release tarball and hash signature\r\n==> Patch changed:\r\n Formula/Pelikan.rb | 21 +++++++++++++++++++++\r\n 1 file changed, 21 insertions(+)\r\nbrew bottle --merge --write pelikan-0.1.1.el_capitan.bottle.rb pelikan-0.1.1.mavericks.bottle.rb pelikan-0.1.1.yosemite.bottle.rb\r\n==> pelikan\r\n  bottle do\r\n    cellar :any_skip_relocation\r\n    sha256 \"bfe08887e63c24ac40b556eaef383c901e4bb18609e516566ede874b83030577\" => :el_capitan\r\n    sha256 \"e5a2523a6e4186dd1bbbab82cf53881fe9691d1d742a07ceee75225be166412d\" => :yosemite\r\n    sha256 \"68156bce5dc2e8c7c5a943d53e213b580d134e58931a3b341d0f10806d8dcec5\" => :mavericks\r\n  end\r\nerror: pathspec '/Users/brew/Jenkins/jobs/Homebrew Bottles/workspace/Library/Taps/homebrew/homebrew-core/Formula/pelikan.rb' did not match any file(s) known to git.\r\nError: Failure while executing: git commit --no-edit --verbose --message=pelikan:\\ add\\ 0.1.1\\ bottle. -- /Users/brew/Jenkins/jobs/Homebrew\\ Bottles/workspace/Library/Taps/homebrew/homebrew-core/Formula/pelikan.rb\r\ngit push --force git@github.com:BrewTestBot/homebrew-core.git master:master :refs/tags/pr-769\r\nTo git@github.com:BrewTestBot/homebrew-core.git\r\n + 8f880b0...8e3e583 master -> master (forced update)\r\n - [deleted]         pr-769\r\n<snip>\r\n```\r\n\r\nJust dumping information for now. Haven't found out yet where it's breaking ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 216709602,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-04T00:33:42Z",
		"body" : "Sorry, I think that's false alarm. The problem seems to be that the PR has a formula name of `Pelikan.rb` while it should be `pelikan.rb`. This works in some places because HFS+ is usually case-insensitive, but apparently breaks in other places (our code and Git might be less tolerant) ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 216710270,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-04T00:37:57Z",
		"body" : "There is this problem though:\r\n```\r\n~> brewpb https://github.com/Homebrew/homebrew-core/pull/818 --bump\r\n==> Fetching patch\r\nPatch: https://github.com/Homebrew/homebrew-core/pull/818.patch\r\n==> Applying patch\r\nApplying: PyPy 5.1.1\r\n==> Patch closes issue #818\r\nError: undefined local variable or method `subject' for Homebrew:Module\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/usr/local/Library/Homebrew/cmd/pull.rb:178:in `block in pull'\r\n/usr/local/Library/Homebrew/cmd/pull.rb:53:in `each'\r\n/usr/local/Library/Homebrew/cmd/pull.rb:53:in `pull'\r\n/usr/local/Library/brew.rb:87:in `<main>'\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 216711506,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-04T00:48:00Z",
		"body" : "@DomT4 Can you update and retry? I just pushed a fix for that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 216712086,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-04T00:52:55Z",
		"body" : "@UniqMartin Nice, you did indeed üëç. I was going to leave it till morning because I wanted to sleep; only came online to pull `stunnel` before people noticed the after-every-openssl-update-stunnel breakage. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 216843142,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-04T12:19:39Z",
		"body" : "Yep. Bad `git commit --amend` on my part left that name dangling. Sheesh. Martin's fix is good. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 132
	},
	{
		"id" : 213104806,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-21T20:38:40Z",
		"body" : "Nice spot. Merged in https://github.com/Homebrew/brew/commit/cbc24a715c512d53b40a06cce1c4e49e95a9f140, Thank you for your contribution to Homebrew @loganrosen! üòÉ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 133
	},
	{
		"id" : 213154351,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-21T23:13:41Z",
		"body" : "What problem are you having? There doesn't seem to be any description beside the template above.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 134
	},
	{
		"id" : 213430717,
		"user" : {
			"login" : "wakerman"
		},
		"created_at" : "2016-04-22T13:36:50Z",
		"body" : "‚ï∞‚îÄ‚óã /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\r\n==> This script will install:\r\n/usr/local/bin/brew\r\n/usr/local/Library/...\r\n/usr/local/share/doc/homebrew\r\n/usr/local/share/man/man1/brew.1\r\n/usr/local/share/zsh/site-functions/_brew\r\n/usr/local/etc/bash_completion.d/brew\r\n\r\nPress RETURN to continue or any other key to abort\r\n==> Downloading and installing Homebrew...\r\nremote: Counting objects: 463, done.\r\nremote: Compressing objects: 100% (420/420), done.\r\nremote: Total 463 (delta 26), reused 271 (delta 17), pack-reused 0\r\nReceiving objects: 100% (463/463), 748.41 KiB | 47.00 KiB/s, done.\r\nResolving deltas: 100% (26/26), done.\r\nFrom https://github.com/Homebrew/brew\r\n * [new branch]      master     -> origin/master\r\nHEAD is now at 2921795 update: rebase (rather than merge) by default.\r\n/usr/local/Library/brew.sh: line 235: /System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby: No such file or directory\r\n/usr/local/Library/brew.sh: line 235: exec: /System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby: cannot execute: No such file or directory\r\nFailed during: /usr/local/bin/brew tap homebrew/core\r\n\r\n\r\nhelp me.please.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 134
	},
	{
		"id" : 213434085,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-22T13:45:15Z",
		"body" : "What does `ls -lha /System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby` say? It looks like you may have deleted it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 134
	},
	{
		"id" : 215227659,
		"user" : {
			"login" : "phylaxis"
		},
		"created_at" : "2016-04-27T21:00:02Z",
		"body" : "I'm having this same issue using Homebrew on an old Mac running OS X 10.6.8 and for the ruby results I get this:\r\n\r\n```-rwxr-xr-x  1 root  wheel    50K Jan 23  2013 /System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 134
	},
	{
		"id" : 215787847,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-29T16:16:41Z",
		"body" : "@phylaxis You probably need to `brew install git`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 134
	},
	{
		"id" : 215824767,
		"user" : {
			"login" : "phylaxis"
		},
		"created_at" : "2016-04-29T17:35:12Z",
		"body" : "Hey @mikemcquaid thanks for the response, I though GIT was installed on this machine, but maybe not. I'll check it out more closely.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 134
	},
	{
		"id" : 216031348,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-01T09:48:39Z",
		"body" : "@Xcq5678 were you able to fix the problem?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 134
	},
	{
		"id" : 216554262,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:54:04Z",
		"body" : "Closing this out as no-one has provided the information requested in the templates.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 134
	},
	{
		"id" : 213611888,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-22T22:29:07Z",
		"body" : ":+1: Too bad none of us thought of this, but I'm happy you found an elegant solution.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 135
	},
	{
		"id" : 213612013,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-22T22:29:52Z",
		"body" : "(Should probably also close Homebrew/homebrew-core#524 when it's merged.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 135
	},
	{
		"id" : 213645013,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-23T01:41:36Z",
		"body" : "Merging this now since it's a regression with end user impact. If anyone finds issues with it, just let me know by commenting here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 135
	},
	{
		"id" : 213645094,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-23T01:43:04Z",
		"body" : "(In the longer term, maybe all those `stage` and `brew` methods should switch to a single `XxxContext` block argument, for consistency, and to avoid potential future problems with adding arguments to the yield-block signature instead of additional methods to the block context parameter. But want to fix existing breakage first, with minimal changes.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 135
	},
	{
		"id" : 213732377,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-23T12:25:44Z",
		"body" : "Thanks for fixing this so quickly and üëç to immediately merging regression fixes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 135
	},
	{
		"id" : 213657606,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-23T03:13:06Z",
		"body" : "Maybe we should make the same \"also check closed & merged PRs\" on `homebrew/core`, too. The volume there is higher, so we wouldn't expect submitters to scan through all the closed PRs. But there they can easily search for a formula by name and expect to hit everything relevant.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 136
	},
	{
		"id" : 213750363,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-23T14:29:48Z",
		"body" : "> Adds a \"### Description\" header separating the template's checklist from the user's comments.\r\n\r\nFeels weird to me to have a header for that, but no header for the checklist. (I guess one could consider the PR title to be the header for it.) Personally, I prefer fewer headers (depends of course on the extent of the change) and mostly use `----` as a delimiter between the checklist and the description.\r\n\r\n> Changes \"have you checked for open PRs\" to just \"have you checked for PRs\", [‚Ä¶]\r\n\r\nWhile I think this would be helpful (even more so in `homebrew/core`, as some unnecessary work could be avoided if contributors checked how a recent update to a formula has been handled), I don't think many contributors can be bothered to do this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 136
	},
	{
		"id" : 213755656,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-23T15:06:45Z",
		"body" : "> While I think this would be helpful (even more so in homebrew/core, as some unnecessary work could be avoided if contributors checked how a recent update to a formula has been handled), I don't think many contributors can be bothered to do this.\r\n\r\nAgreed. The more we ask them to do, the less likely they will do any.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 136
	},
	{
		"id" : 213767691,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-23T15:47:32Z",
		"body" : "Agree with Mike and Martin. I also don't know how many first-time contributors will be comfortable determining if we recently closed a PR for something _why_ we made that decision and whether it's safe to ignore it or not.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 136
	},
	{
		"id" : 213841833,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-23T22:09:28Z",
		"body" : "Good points. I've removed the \"all PRs\" change; now this is just adding a header.\r\n\r\n> Feels weird to me to have a header for that, but no header for the checklist.\r\n\r\nThis matches the change in `homebrew/core`'s PR template; see Homebrew/homebrew-core#476. There were some objections to having a header above the checklist, and I think it looks okay without.\r\n\r\nDo other people prefer the `----` (horizontal rule) too? I think both are fine. `----` also has the advantage that it doesn't have the weirdness of a single headerless section, and people writing longer PRs can still put section headers below the HR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 136
	},
	{
		"id" : 213990841,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-24T16:09:28Z",
		"body" : "> Do other people prefer the ---- (horizontal rule) too?\r\n\r\nI prefer that üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 136
	},
	{
		"id" : 214577614,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T01:08:07Z",
		"body" : "Switched to `-----`. Looks just as good to me. If we go with this, I'll make the change in homebrew-core's PR template, too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 136
	},
	{
		"id" : 215063911,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-27T12:13:50Z",
		"body" : "Should we also add a boilerplate sentence like the following below the `----`?\r\n\r\n```markdown\r\n*Replace this with a description of your change.*\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 136
	},
	{
		"id" : 215135710,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-27T16:16:34Z",
		"body" : "Hmm. Maybe. Any comments from the commit beyond the first line will already show up there, so it may be a bit confusing or overlooked. But it would be easy enough to delete from PRs that accidentally leave it in.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 136
	},
	{
		"id" : 215142987,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-27T16:41:59Z",
		"body" : "> Any comments from the commit beyond the first line will already show up there, [‚Ä¶]\r\n\r\nOh right, I temporarily forgot that. Now that you reminded me of this, I don't think we should put anything below the `----` into the PR template. Most PRs (at least in this repository) probably contain some description in the commit message body, so having to remove that extra line will be annoying.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 136
	},
	{
		"id" : 216433048,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T04:32:15Z",
		"body" : "Merged, and made the corresponding format change in homebrew/core in https://github.com/Homebrew/homebrew-core/commit/08ecb75f9ef7ff419155ae4d7d805d04405cdff8.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 136
	},
	{
		"id" : 213968550,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-24T14:22:10Z",
		"body" : "> The output dependencies are clearly not in topological order.\r\n\r\nIn a way they are, because only the immediate dependencies of formulae are shown. Topological order would only matter if the dependency tree was fully expanded, which it is not. I think the confusion stems from the fact that `brew deps --installed` has two different meanings, depending on whether formulae are supplied to the command or not:\r\n\r\n- `brew deps --installed` simply lists all installed formulae and their immediate dependencies (the output you saw). It respects the `--include-*` and `--skip-*` options, but all other options are ignored. It does support the `--tree` option, but I'd say the usefulness of that is limited.\r\n\r\n- `brew deps [--installed] <formula>` expands the complete dependency tree of `<formula>` (or trees, if multiple formulae are given). Aside from the `--include-*` and `--skip-*` options it also respects the `--1`, `-n` (topological order), and `--union` options. The effect of `--installed` in this case is to intersect the computed dependency list with the list of installed formulae. Maybe two examples can help illustrate this:\r\n  - `brew deps gtk+` lists all dependencies of `gtk+`.\r\n  - `brew deps --installed gtk+` lists all already installed dependencies of `gtk+`.\r\n  - The difference between these outputs is roughly the list of dependencies that would be installed in addition to what is already on my system if I decided to run `brew install gtk+`.\r\n\r\nDoes this help? I'd say this is primarily a documentation issue. I'd be more than happy if you created a pull request that improves our documentation. [`Library/Homebrew/cmd/deps.rb`](https://github.com/Homebrew/brew/blob/1451553188276117a574b2abe8957cb60ef7ced7/Library/Homebrew/cmd/deps.rb#L1-L23) is the file that needs to be changed. [This document](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-%28and-get-it-merged%29.md) should get you started and I'm happy to answer any questions.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 137
	},
	{
		"id" : 214044491,
		"user" : {
			"login" : "alexreg"
		},
		"created_at" : "2016-04-24T21:54:39Z",
		"body" : "It would be nice if the first variant of `brew deps` (without a formula given) would also support `--1` and `-n`, I think.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 137
	},
	{
		"id" : 214056826,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-24T22:43:28Z",
		"body" : "> However, it would be nice if the first variant of `brew deps` (without a formula given) would also support `--1` and `-n`, I think.\r\n\r\nThe problem with this is, that `brew deps --installed` basically implies `--1` as it's only printing the first level of the dependency tree (the immediate dependencies) and thus `-n` is irrelevant. And we can't easily change the defaults as that would break other users' scripts that rely on the current output/behavior.\r\n\r\nWe could potentially introduce a `--no-1` option to invert the behavior, but I'm not convinced yet that we need a mode where every installed formula is listed with *all* its dependencies. What would be the use for that? If you really need this functionality *now*, here's how this can be done with a Bash one-liner:\r\n\r\n```shell\r\nfor f in $(brew list --full-name) ; do echo \"$f:\" $(brew deps -n \"$f\") ; done\r\n```\r\n\r\n(Admittedly, this is a bit slow. Is that what you would expect from `brew deps --installed --no-1 -n`?)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 137
	},
	{
		"id" : 214058300,
		"user" : {
			"login" : "alexreg"
		},
		"created_at" : "2016-04-24T22:53:49Z",
		"body" : "Yeah, that's fair enough actually. I've accomplished my goal by a bit of text manipulation and `tsort`, so no worries.\r\n\r\nSince the output format of `deps --installed` (without any formula given) is different to that of a single formula, maybe it's just worth separating that out in the docs, or making it explicit at least.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 137
	},
	{
		"id" : 213950816,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-24T12:30:15Z",
		"body" : "Thank you for the suggestion, but I have mixed feelings about that. While I think it would be great if more users donated to the project to ‚Äúcompensate‚Äù for not helping in other ways, I'd personally prefer if we didn't conflate these things. To me, suggesting to donate in case of opt-out sounds a bit like pressuring users into making a donation, which doesn't sound very nice.\r\n\r\nI'm sure other maintainers also have (different) opinions on that, so I'll leave it open for discussion.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 138
	},
	{
		"id" : 213984019,
		"user" : {
			"login" : "kevinburke"
		},
		"created_at" : "2016-04-24T15:25:09Z",
		"body" : "I don't know. To me it's very nice that Homebrew provides all of this amazing stuff for free and not very nice that users might try to disable the (very small) ask from the Homebrew team for  something they get for free",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 138
	},
	{
		"id" : 213989930,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-24T16:04:43Z",
		"body" : "I agree with @UniqMartin but thanks for the great sentiment here üôá ‚ù§Ô∏è ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 138
	},
	{
		"id" : 213990027,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-24T16:06:37Z",
		"body" : "> but also value their privacy\r\n\r\nI'm not trying to encourage you not to opt-out but just wanted to add a comment pointing out that I don't think the analytics do violate your privacy given everything explain in the document (in short: we gather aggregate not individual activity and strip all personally identifiable information).\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 138
	},
	{
		"id" : 213890414,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-24T05:03:48Z",
		"body" : "I think this may be a simple fix: just add `--verbose` to the `brew install boost --c++11` command, which OP can do because they're running their own Travis instance instead of using BrewTestBot.\r\n\r\nBut it does bring up an issue with `brew test-bot` which we may have to address: any long-running build for a dependency which is built with non-default options may cause Travis builds to time out under `test-bot` as well, because we don't use `test-bot --verbose` on Jenkins or (IIRC) Travis.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 139
	},
	{
		"id" : 213904370,
		"user" : {
			"login" : "Malvineous"
		},
		"created_at" : "2016-04-24T06:40:22Z",
		"body" : "Oh thanks, that was it!  Now it gives me errors that the log is too long, but I can deal with those and it finishes compiling successfully.  Many thanks :-)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 139
	},
	{
		"id" : 213914528,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-24T08:31:58Z",
		"body" : "Try `HOMEBREW_VERBOSE_USING_DOTS=1 brew install --verbose ...`. \r\n\r\n`HOMEBREW_VERBOSE_USING_DOTS` is an undocumented variable we used in `brew test-bot` for Travis CI.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 139
	},
	{
		"id" : 213951636,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-24T12:39:39Z",
		"body" : "By default, the `boost` formula builds four different versions of the libraries: static single-threaded, static multi-threaded, shared single-threaded, and shared multi-threaded. It's rare that all of them are needed. In practice, the ‚Äúshared multi-threaded‚Äù variant is sufficient for most projects. Thus a really simple way to drop the build time to about a fourth of the full build time is to install `boost` using\r\n\r\n```\r\nbrew install boost --c++11 --without-single --without-static\r\n```\r\n\r\nThe other suggestions regarding `HOMEBREW_VERBOSE_USING_DOTS=1 brew install --verbose <‚Ä¶>` still apply.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 139
	},
	{
		"id" : 213989839,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-24T16:03:13Z",
		"body" : "A better fit for your project may be just vendoring the parts of Boost you need rather than relying on system libraries.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 139
	},
	{
		"id" : 214091586,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-25T01:56:02Z",
		"body" : "> A better fit for your project may be just vendoring the parts of Boost you need rather than relying on system libraries.\r\n\r\nThis does sound like the best approach, based on what we know. (\"Vendoring\" when you roll your own binary bottle or tarball and include it as part of your package's distribution.) That'd save you 10+ minutes on every Travis run (since you don't care about testing the compilation of `boost` itself), allowing you to test and iterate faster. And it would allow your package to peacefully coexist with the default `boost` installation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 139
	},
	{
		"id" : 214093188,
		"user" : {
			"login" : "Malvineous"
		},
		"created_at" : "2016-04-25T02:07:05Z",
		"body" : "Thanks for all the help!  Along these lines I am attempting to see whether I can create a GitHub project with a Travis build process to run under OSX, which will compile Boost as recommended above, then bottle it.  If I can then \"deploy\" that bottle from Travis as a GitHub release, then it will mean my other builds can just download and install that bottle from GitHub at the start of each build.  Hopefully that will work!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 139
	},
	{
		"id" : 214179946,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-25T07:26:34Z",
		"body" : "Boost will not build under Travis CI. IT takes too long. As mentioned before: I'd strongly recommend vendoring the bits of Boost you need in your project rather than spending an hour building stuff you 90% don't need. Not a Homebrew bug at this point anyway but good luck.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 139
	},
	{
		"id" : 214300774,
		"user" : {
			"login" : "Malvineous"
		},
		"created_at" : "2016-04-25T12:49:16Z",
		"body" : "Well just to finalise this, I have managed to get it to build under Travis.  It takes about half an hour, but as you only have to do that once to create the custom bottle I don't think it's too bad.  The other projects can just download and use the bottle.  I [put the bottle-creation Travis script in a repo](https://github.com/Malvineous/travis-homebrew-bottle) in case anyone else might find such a thing useful in the future.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 139
	},
	{
		"id" : 213976047,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-24T14:49:57Z",
		"body" : "Try `brew reinstall gource -s`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 140
	},
	{
		"id" : 213979560,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-24T15:03:46Z",
		"body" : "Have you installed `boost` with option `--without-single`? What is the output of `brew info boost`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 140
	},
	{
		"id" : 214267242,
		"user" : {
			"login" : "seclorum"
		},
		"created_at" : "2016-04-25T11:09:27Z",
		"body" : "````\r\n$ brew info boost\r\nboost: stable 1.60.0 (bottled), HEAD\r\nCollection of portable C++ source libraries\r\nhttps://www.boost.org/\r\n/usr/local/Cellar/boost/1.60.0_2 (11,089 files, 292.7M) *\r\n  Built from source with: --with-mpi --without-single\r\nFrom: https://github.com/Homebrew/homebrew-core/blob/master/Formula/boost.rb\r\n==> Dependencies\r\nOptional: icu4c ‚úî\r\n==> Options\r\n--c++11\r\n\tBuild using C++11 mode\r\n--universal\r\n\tBuild a universal binary\r\n--with-icu4c\r\n\tBuild regexp engine with icu support\r\n--with-mpi\r\n\tBuild with MPI support\r\n--without-single\r\n\tDisable building single-threading variant\r\n--without-static\r\n\tDisable building static library variant\r\n--HEAD\r\n\tInstall HEAD version\r\n````",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 140
	},
	{
		"id" : 214268173,
		"user" : {
			"login" : "seclorum"
		},
		"created_at" : "2016-04-25T11:13:54Z",
		"body" : "````\r\n$ brew reinstall gource -s\r\n==> Reinstalling gource\r\n==> Installing dependencies for gource: sphinx-doc\r\n==> Installing gource dependency: sphinx-doc\r\n==> Downloading https://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.4.tar.gz\r\nAlready downloaded: /Library/Caches/Homebrew/sphinx-doc-1.4.tar.gz\r\n==> Downloading https://pypi.python.org/packages/source/a/alabaster/alabaster-0.7.7.tar.gz\r\nAlready downloaded: /Library/Caches/Homebrew/sphinx-doc--alabaster-0.7.7.tar.gz\r\n==> python -c import setuptools... --no-user-cfg install --prefix=/usr/local/Cellar/sphinx-doc/1.4/libexec/vendor --single-version-externally-managed --record=installed.txt\r\nLast 15 lines from /Users/j/Library/Logs/Homebrew/sphinx-doc/01.python:\r\n__file__ = 'setup.py'\r\nexec(compile(getattr(tokenize, 'open', open)(__file__).read()\r\n  .replace('\\r\\n', '\\n'), __file__, 'exec'))\r\n--no-user-cfg\r\ninstall\r\n--prefix=/usr/local/Cellar/sphinx-doc/1.4/libexec/vendor\r\n--single-version-externally-managed\r\n--record=installed.txt\r\n\r\nusage: -c [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]\r\n   or: -c --help [cmd1 cmd2 ...]\r\n   or: -c --help-commands\r\n   or: -c cmd --help\r\n\r\nerror: option --no-user-cfg not recognized\r\n\r\nREAD THIS: https://git.io/brew-troubleshooting\r\nIf reporting this issue please do so at (not Homebrew/brew):\r\n  https://github.com/Homebrew/homebrew-core/issues\r\n````\r\n\r\n\r\nHmmm .. that doesn't look too good.  Could I be using the wrong python version or something?\r\n\r\n````\r\n$ python --version\r\nPython 3.5.1 :: Anaconda custom (x86_64)\r\n````\r\n\r\nOkay, tried it with system python too, exactly the same result:\r\n\r\n````\r\n$ python --version\r\nPython 2.7.11\r\n$ brew reinstall gource -s\r\n==> Reinstalling gource\r\n==> Installing dependencies for gource: sphinx-doc\r\n==> Installing gource dependency: sphinx-doc\r\n==> Downloading https://pypi.python.org/packages/source/S/Sphinx/Sphinx-1.4.tar.gz\r\nAlready downloaded: /Library/Caches/Homebrew/sphinx-doc-1.4.tar.gz\r\n==> Downloading https://pypi.python.org/packages/source/a/alabaster/alabaster-0.7.7.tar.gz\r\nAlready downloaded: /Library/Caches/Homebrew/sphinx-doc--alabaster-0.7.7.tar.gz\r\n==> python -c import setuptools... --no-user-cfg install --prefix=/usr/local/Cellar/sphinx-doc/1.4/libexec/vendor --si\r\nLast 15 lines from /Users/j/Library/Logs/Homebrew/sphinx-doc/01.python:\r\n__file__ = 'setup.py'\r\nexec(compile(getattr(tokenize, 'open', open)(__file__).read()\r\n  .replace('\\r\\n', '\\n'), __file__, 'exec'))\r\n--no-user-cfg\r\ninstall\r\n--prefix=/usr/local/Cellar/sphinx-doc/1.4/libexec/vendor\r\n--single-version-externally-managed\r\n--record=installed.txt\r\n\r\nusage: -c [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]\r\n   or: -c --help [cmd1 cmd2 ...]\r\n   or: -c --help-commands\r\n   or: -c cmd --help\r\n\r\nerror: option --no-user-cfg not recognized\r\n\r\nREAD THIS: https://git.io/brew-troubleshooting\r\nIf reporting this issue please do so at (not Homebrew/brew):\r\n  https://github.com/Homebrew/homebrew-core/issues\r\n````\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 140
	},
	{
		"id" : 214274014,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-25T11:30:09Z",
		"body" : "> Have you installed boost with option `--without-single`?\r\n\r\nWell, you have; no wonder the binary from the `gource` bottle cannot find the single-threaded Boost library it was built against. Not sure what is going on with your Python, but I think the easiest fix for your problem would be for you to reinstall `boost`, this time omitting the `--without-single` option.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 140
	},
	{
		"id" : 214337563,
		"user" : {
			"login" : "seclorum"
		},
		"created_at" : "2016-04-25T13:52:24Z",
		"body" : "Thanks for the help!  I try to rebuild, and see that --without-single is the default:\r\n\r\n````\r\n$ brew reinstall boost -s\r\n==> Reinstalling boost with --with-mpi, --without-single\r\n==> Downloading https://downloads.sourceforge.net/project/boost/boost/1.60.0/boost_1_60_0.tar.bz2\r\nAlready downloaded: /Library/Caches/Homebrew/boost-1.60.0.tar.bz2\r\n^C\r\n$ brew reinstall boost -s --with-single\r\n==> Reinstalling boost with --with-mpi, --without-single\r\n==> Downloading https://downloads.sourceforge.net/project/boost/boost/1.60.0/boost_1_60_0.tar.bz2\r\nAlready downloaded: /Library/Caches/Homebrew/boost-1.60.0.tar.bz2\r\n````\r\n\r\n.. Call me an ingenue, but I can't seem to see how to tell brew to --with-single .. ?\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 140
	},
	{
		"id" : 214355573,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-25T14:18:29Z",
		"body" : "> Thanks for the help! I try to rebuild, and see that --without-single is the default:\r\n\r\nNo, `--without-single` is not the default. `brew reinstall` just re-uses the options you used on `brew install` time. You'd preferably have to `brew uninstall boost && brew install boost --with-mpi`, but ‚Ä¶\r\n\r\n> ```\r\n> $ brew -v reinstall boost --without-mpi --with-single\r\n> [snip]\r\n> Error: Building MPI support for both single and multi-threaded flavors\r\n> is not supported.  Please use \"--with-mpi\" together with\r\n> \"--without-single\".\r\n> ```\r\n\r\nI don't think there is a way to have both MPI support and the single-threaded Boost libraries enabled, which is obviously an issue if you need both Boost with MPI support and `gource` which happens to link to the single-threaded libraries. You have basically entered barely supported territory and I'm afraid you'll have to figure out yourself how to deal with the issues created by this non-standard installation. Solutions I can think of:\r\n\r\n- Investigate whether `gource` can be built against the more widely used multi-threaded variant of the Boost libraries and if that's possible, contribute back the change/fix to the `gource` formula.\r\n\r\n- Have two separate Homebrew installations, one for most stuff including `gource` (where you use a standard build of Boost) and one for the stuff that requires a Boost with MPI.\r\n\r\n- Something else ‚Ä¶?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 140
	},
	{
		"id" : 214364051,
		"user" : {
			"login" : "seclorum"
		},
		"created_at" : "2016-04-25T14:38:54Z",
		"body" : "Okay well I'm stumped - for now I just won't use OSX for gource and will just use Linux instead.  I can't seem to get gource to link against libboost*-mt and I don't have the chops or the time to figure out how to change the brew gource formula at the moment ..\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 140
	},
	{
		"id" : 215485492,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-28T16:27:07Z",
		"body" : "Closing as this seems to be unresolvable right now (but also quite an exotic configuration, so not likely to affect many users). @seclorum, please get back to us if you find an elegant solution to this problem!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 140
	},
	{
		"id" : 214037270,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-24T21:05:01Z",
		"body" : ":+1:\r\n\r\nThe only downside I can think of is that a larger tree needs to be scanned, but the performance penalty of this is probably insignificant compared to some other things that need to happen during bottling.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 141
	},
	{
		"id" : 214037655,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-24T21:05:53Z",
		"body" : "> The only downside I can think of is that a larger tree needs to be scanned, but the performance penalty of this is probably insignificant compared to some other things that need to happen during bottling.\r\n\r\nAgreed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 141
	},
	{
		"id" : 214504545,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-04-25T20:10:26Z",
		"body" : "It was discussed, we made it opt-in for about a month during testing then sent out notifications to the mailing list and twitter a week before switching to opt-out.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214507435,
		"user" : {
			"login" : "albus522"
		},
		"created_at" : "2016-04-25T20:18:11Z",
		"body" : "I would say the vast majority of your users are neither on your mailing list or pay any attention to your Twitter account. So you have notified a very small percentage of your users that you will be collecting their info. If someone else hadn't pointed out this change, I would never have noticed, and I would wager that is the majority case. Add my vote for reverting this change.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214512561,
		"user" : {
			"login" : "kroofy"
		},
		"created_at" : "2016-04-25T20:35:17Z",
		"body" : "Regardless of how many users that have been made aware of this. The user should still have the option to actively make a decision during an install/update of `brew`.\r\n\r\nThis is too sneaky and opaque for the user.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214516471,
		"user" : {
			"login" : "davesque"
		},
		"created_at" : "2016-04-25T20:47:43Z",
		"body" : "It kinda blows my mind that this isn't opt-in.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214516910,
		"user" : {
			"login" : "erikj"
		},
		"created_at" : "2016-04-25T20:49:11Z",
		"body" : "Seems like it would be best if the interface queried the user and remember their preference.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214517356,
		"user" : {
			"login" : "DavidCWGA"
		},
		"created_at" : "2016-04-25T20:50:35Z",
		"body" : "At the very least, prompt the user before first sending data to Google.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214517412,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-04-25T20:50:48Z",
		"body" : "@davesque The problem with opt-in is that you don‚Äôt get representative data.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214517751,
		"user" : {
			"login" : "DavidCWGA"
		},
		"created_at" : "2016-04-25T20:51:52Z",
		"body" : "The advantage of opt-in is that you respect your users' choices and privacy.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214517758,
		"user" : {
			"login" : "GrappigPanda"
		},
		"created_at" : "2016-04-25T20:51:53Z",
		"body" : "@kroofy \r\nIncredibly opaque, how dare they link to the two files which directly implement sending off analytics. And sneaky! They've actively managed to keep this information to only two of the largest technical communities: reddit and hackernews--plus their thorough documentation of exactly how it works is not yet thorough enough.\r\n\r\nTruly, what could we do to fix these roguish individuals and their wanton disregard for us: the users of a free product who have never contributed to the Homebrew project (with exceptions to dunn and bfontaine, every user above me has never made a contribution, including me). Y'all are ridiculous calm down and just set the envvar.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214519688,
		"user" : {
			"login" : "jeroenh"
		},
		"created_at" : "2016-04-25T20:58:34Z",
		"body" : "@bfontaine the problem with distributing information is that you can never take it back.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214519710,
		"user" : {
			"login" : "jasonroelofs"
		},
		"created_at" : "2016-04-25T20:58:39Z",
		"body" : "@GrappigPanda Insulting people for being concerned doesn't help anyone. Very few users of Homebrew are even going to see this, much less know what's happening or that they are now sending statistics to some random Google Analytics account about what they do on their machine.\r\n\r\nThere are numerous companies and environments employing tens to hundreds of thousands of people in which security and secrecy is utmost such that any service that sends statistics outside of the walls of the company or group is strictly forbidden. With this kind of change, many people will suddenly start breaking these restrictions with no knowledge of what or why or when.\r\n\r\nThere's nothing wrong with opt-out, but this should be a message that shows up on `brew update` that's very explicit, very clear, and with instructions on what Homebrew now wants to do and how to opt out. As it stands right now, this change doesn't respect the privacy and needs of users of this tool.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214521712,
		"user" : {
			"login" : "codingcampbell"
		},
		"created_at" : "2016-04-25T21:06:02Z",
		"body" : "When things like these come up, I wish projects would stop defaulting to Google Analytics in particular. If you need some anonymous usage info, fine, but does Google really need another vector into my life?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214522339,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-04-25T21:08:21Z",
		"body" : "@codingcampbell If you have a good solution that doesn‚Äôt need more work on our side (i.e. we don‚Äôt want to manage another server), we‚Äôre all ears.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214522790,
		"user" : {
			"login" : "GrappigPanda"
		},
		"created_at" : "2016-04-25T21:10:08Z",
		"body" : "@jasonroelofs I'm having a genuinely difficult time trying to digest what you've written. \r\n\r\nIf someone is breaching restrictions on sharing information by sending in an anonymous UUID with no other distinct markings to the data besides an OS version, then going to google.com is genuinely perilous. Your average blog is tracking much more information than homebrew is going to be, so heaven forbid if you ever need to consult the internet to figure out why a MySQL migration tool isn't working, or if you need to figure out how to install bcrypt on OS X, or any other reasonable internet search.\r\n\r\nIt's such a disingenuous thing to say.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214525486,
		"user" : {
			"login" : "albus522"
		},
		"created_at" : "2016-04-25T21:16:43Z",
		"body" : "@GrappigPanda Your package manager is not your web browser. Also you can set your web browser to hide a lot of information.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214529466,
		"user" : {
			"login" : "lacombar"
		},
		"created_at" : "2016-04-25T21:30:05Z",
		"body" : "At worst, you should *ASK* during installation whether or not the user want to collect analytics, with the default set to \"NO\". Then I would consider enabling it. No matter how transparent you are about this default opt-in, this is unacceptable.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214535233,
		"user" : {
			"login" : "eknkc"
		},
		"created_at" : "2016-04-25T21:41:20Z",
		"body" : "While I think it would be better to have a prompt, defaulting to \"yes\" (because noone would opt in otherwise) to enable this, why is this a huge deal? \r\n\r\nI mean, if you have strict policy about this kind of tracking, you should just firewall google analytics (heck, a hosts line would do it) globally. Other software that you've been using might be tracking you just as well, without announcing / documenting anything. At least we know what homebrew does. \r\n\r\nIt confuses me because if this is unacceptable, it means you trust every single binary you've been running. Teach me how, please.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214537449,
		"user" : {
			"login" : "lacombar"
		},
		"created_at" : "2016-04-25T21:47:20Z",
		"body" : "@eknkc because when I setup a new machine, I don't want to have yet another environment variable to setup. This is really sneaky, we all think about it today, but in a year, I'm gonna have forgotten all all about this, and analytics are gonna get enabled because of the default opt-in... behind my back.\r\n\r\nThis is just sneaky.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214537499,
		"user" : {
			"login" : "thecosas"
		},
		"created_at" : "2016-04-25T21:47:34Z",
		"body" : "@eknkc Prompt on install/upgrade with a default to yes and instructions on how to opt out would probably be the best solution for all parties. Transparency, choice, and useful data for the volunteer developers which is representative.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214538533,
		"user" : {
			"login" : "albus522"
		},
		"created_at" : "2016-04-25T21:51:47Z",
		"body" : "@eknkc I don't go around installing software I don't trust, especially software whose sole responsibility is installing other software. I also have software that has asked me for usage info and my answer is always the same. I trusted homebrew when I installed it. This action is a definite breach in trust.\r\n\r\nIf homebrew wanted every user to know what was changing it would have been part of the update and/or install process. That would have been the trustworthy way, and no one would be here having this conversation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214544554,
		"user" : {
			"login" : "NickCraver"
		},
		"created_at" : "2016-04-25T22:06:18Z",
		"body" : "This is how you turn a trusted project into an untrusted project. The fact that Homebrew is being open about implementation is great, but it's not being *that* open. When I updated earlier today (for dotnet CLI) I had no idea this was enabled until some outbound firewall logs alerted me. Then I found the Hacker News thread.\r\n\r\nIf we're saying Homebrew's being honest about it then let's actually be honest: you have very likely informed well under 1% of your userbase of this change. Users installing fresh are not being informed or afforded the chance to opt-out during install. Many users, even comfortable running `brew` commands they find on websites don't know *how* to opt out; they don't know how to set an environmental variable. Users upgrading are experiencing broken trust. Something they previously reviewed (as in my case) has, without so much as a console message, starting exporting their information.\r\n\r\nI understand your need for analytics, but opting out should be trivial and the collection itself should be advertised to the user so they can do so.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214545809,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-25T22:09:04Z",
		"body" : "Hi all I'm the maintainer who added this. I would have responded sooner but I've been on a plane for the last 10 hours. I'll post more ASAP when I get my laptop onto some wifi; on my phone now. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214551352,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-25T22:33:53Z",
		"body" : "Can we please chill on the overzealous emoji use to every single comment here. We appreciate you have strong opinions and we're happy to discuss this further, but adding thumbs down emojis to people like Mike who's comment isn't any further than \"I'll post later when I'm online, please bear with me\" is a bit counterproductive.\r\n\r\nLet's keep things civil and as calm as possible. Please bear in mind that Homebrew has a [Code of Conduct](https://github.com/Homebrew/brew/blob/master/CODEOFCONDUCT.md) that applies to how everyone talks to everyone else, whether that's us to you, you to us or you to each other.\r\n\r\nIf you'll give me two minutes before thumbing this post down to death like I've wandered onto Reddit by accident I'll leave a more personal opinion. Just want to try and keep the tone cool here so it can be discussed. Thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214552812,
		"user" : {
			"login" : "damieng"
		},
		"created_at" : "2016-04-25T22:41:16Z",
		"body" : "I don't speak for the brew team but metrics/telemetry are essential for making informed decisions about where to take your tools or product. Being off by default is useless - hardly anyone changes the default.\r\n\r\nSomething like an occasional (and at first use/upgrade) `brew sends anonymous metrics to help improve this software. If you wish to opt-out type brew metrics off`` at the end of a brew console operation would seem to be a fair trade?\r\n\r\nNot everyone can give back code/docs to a project but refusing to even allow telemetry be on by default seems like a very one-sided deal.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214554678,
		"user" : {
			"login" : "NickCraver"
		},
		"created_at" : "2016-04-25T22:49:37Z",
		"body" : "@damieng I honestly don't think the metrics themselves are a point of contention. I don't think I've seen anyone object to collecting metrics. The objections center around collecting metrics *without consent*. `brew metrics off` would be a great addition - that's much saner than expecting all users to know how to set an environmental variable.\r\n\r\nI *hope* everyone is onboard with showing notices (both in the installer and when upgrading). If someone objects to notifying the user this is happening at all, then we should have a very different discussion.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214554999,
		"user" : {
			"login" : "gmcmillan"
		},
		"created_at" : "2016-04-25T22:51:16Z",
		"body" : "@DomT4 In what way is there overzealous emoji usage? People are using those emojies as a form of communication because it is an established feature in github and it is a quick way to show you are for or against a certain idea. It also prevents clutter with dozens/hundreds of people saying the exact same thing in written text. So I don't understand the hostility to the emojis in this case -- people are clearly communicating they don't agree with how this was implemented.\r\n\r\nI have no problem with this feature as long as it's communicated to the user correctly and I don't believe it has in this case, which is why you guys are getting so much flack. Most people don't seem to have an issue with the collection, but with how it's communicated and enabled for users. I use homebrew a lot, but I never check homebrew twitter or the mailing list (and I highly doubt most users do) so I would have never known I was opted in to this.\r\n\r\nWhy wasn't this presented as an option at the command line for when the user next uses homebrew? That is the most obvious place I see where something like this should be presented to the user.\r\n\r\n```\r\nHomebrew collects anonymized statistics about your usage to better prioritize features and bugfixes. Staying opted-in would help us a ton in understanding your usage so we can make a better product for you, but we can understand if you want to opt-out.\r\n\r\nWould you like to opt-in to the Homebrew analytics platform (powered by Google)? [yes/no]\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214555543,
		"user" : {
			"login" : "NickCraver"
		},
		"created_at" : "2016-04-25T22:54:16Z",
		"body" : "Adding links to the original issue and PR as references/background:\r\nIssue: https://github.com/Homebrew/legacy-homebrew/issues/34101\r\nPR: https://github.com/Homebrew/legacy-homebrew/pull/50462",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214559427,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-25T23:12:28Z",
		"body" : "Hi all, I've managed to get to some wifi and power so I can comment here, thanks for your patience; I would normally have responded to this thread ASAP but I was literally on an ‚úàÔ∏è with no internet connectivity available.\r\n\r\nFirstly, I figured actions would speak louder than words so I've opened and merged https://github.com/Homebrew/install/issues/42 and https://github.com/Homebrew/brew/issues/143. Every Homebrew user will now be told on first install or first `brew update` that we have enabled analytics and be pointed to the documentation that explains why and how to opt out.\r\n\r\nSecondly, I apologise for the way that this has been communicated poorly. At every stage of the process I've tried to ensure that anonymity can be entirely preserved while using analytics and been careful in the data we gather so that it's not identifiable or private. If you haven't already I strongly encourage you to read through https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Analytics.md and raise any specific concerns you have with the implementation so that we can close any unintentional anonymity gaps.\r\n\r\nThirdly, the reason I made this opt-in rather than opt-out is so we can gather a representative understanding of the way people use Homebrew. If this was opt-out we'd gather only a sampling of the type of people who opt-out.\r\n\r\nFinally, I apologise again. I hear the discomfort here and I'm sorry that I was not able to move more rapidly on your concerns. Thanks for being part of the Homebrew community.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214559778,
		"user" : {
			"login" : "NickCraver"
		},
		"created_at" : "2016-04-25T23:14:14Z",
		"body" : "@mikemcquaid The message is appreciated, but that shouldn't be \"the fix\". Opting out shouldn't require all of the effort still involved here. For most users, the steps will be:\r\n\r\n1. Opening a browser\r\n2. Go to that link\r\n3. Read a 5KB file (to the very bottom)\r\n4. (likely) Learn how to set an environmental variable\r\n5. Create a `.bash_profile`\r\n6. Set the variable\r\n...and hope it worked. \r\n\r\nThe bar is still far, far too high. There should be something akin to `brew metrics off` as pitched above. Only adding a URL is the equivalent of saying \"go figure it out\" to most users. And let's be honest, most will give up before getting through those steps.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214559824,
		"user" : {
			"login" : "bcardarella"
		},
		"created_at" : "2016-04-25T23:14:29Z",
		"body" : "@mikemcquaid I appreciate the response but I don't think this solves the problem. My original concern is that software the automatically opts you into analytics can prevent companies and government agencies from allowing the use of homebrew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214560421,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-25T23:17:41Z",
		"body" : "@bcardarella I appreciate that but it's worth mentioning that the majority of software products now use analytics in some form. No analytics are now sent before the messages are communicated and you can opt-out before that. It would be very simple for those organisations to write an install script for Homebrew that ensured that analytics are disabled before installation takes place.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214560626,
		"user" : {
			"login" : "bcardarella"
		},
		"created_at" : "2016-04-25T23:18:47Z",
		"body" : "@mikemcquaid you're missing the point, certain organizations prevent the usage of any software that opts-in to analytics. Even if there is a work around to opt-out.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214560821,
		"user" : {
			"login" : "DavidCWGA"
		},
		"created_at" : "2016-04-25T23:19:55Z",
		"body" : "The fact that \"everyone is doing it\" shouldn't make it OK. Homebrew targets developers who should know better. The sheer amount of noise occurring here should tell you that users don't want this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214562032,
		"user" : {
			"login" : "NickCraver"
		},
		"created_at" : "2016-04-25T23:27:50Z",
		"body" : "> I appreciate that but it's worth mentioning that the majority of software products now use analytics in some form.\r\n\r\nI'm going to have to ask for a citation here, because I don't believe this to be accurate. Especially of projects on GitHub, how many are reporting analytics? Analytics are still fairly rare for most open source projects.  In my experience, they're still very rare (as a percentage) for paid products as well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214562373,
		"user" : {
			"login" : "davb5"
		},
		"created_at" : "2016-04-25T23:30:00Z",
		"body" : "@bcardarella It's not even just certain organisations. I choose to use a tracker blocking extension in my browser because I know that environment is hostile towards user privacy. I don't expect to have to do this with mainstream terminal-based software like Homebrew.\r\n\r\n@mikemcquaid  I carefully vet software before installing on my machines (both personal and business). I do my research.\r\n\r\nTo introduce analytics with very little communication and with no affirmative agreement from end users is incredibly hostile.\r\n\r\nIt's very telling that you feel that opt-in wouldn't be as useful because many users wouldn't opt-in or agree for usage to be tracked. This is a sign that analytics isn't something that many end users feel comfortable with.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214563892,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-25T23:39:44Z",
		"body" : "> To introduce analytics with very little communication and with no affirmative agreement from end users is incredibly hostile.\r\n\r\nI've admitted my mistake and merged a PR that will communicate this to all users (https://github.com/Homebrew/install/pull/42).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214564476,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-25T23:43:31Z",
		"body" : "> The bar is still far, far too high. There should be something akin to brew metrics off as pitched above. Only adding a URL is the equivalent of saying \"go figure it out\" to most users. And let's be honest, most will give up before getting through those steps.\r\n\r\n@NickCraver I've added a single command that you can run to the documentation in https://github.com/Homebrew/brew/pull/146 and made it so if you set the opt-out variable once then it will set the `git config` such that analytics will remain disabled. I'm not going to be able to do much more than this tonight as I've been up for >18 hours after taking a transcontinental flight.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214564755,
		"user" : {
			"login" : "davb5"
		},
		"created_at" : "2016-04-25T23:45:09Z",
		"body" : "> I've admitted my mistake and merged a PR that will communicate this to all users (Homebrew/install#42).\r\n\r\nI see that, but my point (and I believe that of a number of others here) is that you're still not requiring affirmative agreement. It's still an opt-out (enabled by default, requiring the user to take action to disable rather than agree to enable it).\r\n\r\nI think that many here, myself included, would rather see it turned off by default.\r\n\r\nDebian seem to have got this right with their [popcon prompt](https://i.imgur.com/EeYJbak.jpg).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214566400,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-25T23:54:52Z",
		"body" : "I've merged https://github.com/Homebrew/install/pull/42 https://github.com/Homebrew/brew/pull/143 https://github.com/Homebrew/brew/pull/146 which is all I'm going to be able to do tonight. I really need to go get something to eat and then üí§ (and :sob:) but will check this thread again tomorrow. Thanks to most people in this thread for keeping it civil and thanks for using Homebrew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214566487,
		"user" : {
			"login" : "davb5"
		},
		"created_at" : "2016-04-25T23:55:22Z",
		"body" : "> I'm not going to be able to do much more than this tonight as I've been up for >18 hours after taking a transcontinental flight.\r\n\r\nI appreciate that you're trying to triage this. Most people are just upset that it came out of no-where (for those of us who don't follow the repo or Twitter feeds closely, which most of us have agreed wasn't a reasonable communications channel for this).\r\n\r\nSomething as integral as a package manager can't, by its very nature, be easily sandboxed. And to become (and remain) the dominant package manager on a platform, Homebrew needs to have the complete trust of its users.\r\n\r\nWith the current climate of privacy-hostile applications, platforms, operating systems and governments, default-on telemetry gathering of any sort isn't really acceptable.\r\n\r\nAs a developer, I completely understand the drive to gather metrics. After all, they help us make our products better. They help us figure out more easily what users need. However I don't think it's unreasonable to be pushing a privacy-first ethos in our industry.\r\n\r\nMetrics are valuable, but not at the expense of user trust. Debian Popcon seems to strike a good balance (default highlighted option on the install prompt is \"off\", IIRC).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214569662,
		"user" : {
			"login" : "achikin"
		},
		"created_at" : "2016-04-26T00:15:21Z",
		"body" : "@GrappigPanda hi there! I have contributed, I don't read twitter, hackernews and reddit. And I have something I can't share legally.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214570367,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T00:20:10Z",
		"body" : "I find it kind of funny that there are still people arguing about opt-in and whether analytics should be done. Do you realize that when you clone and/or fetch brew.git and homebrew-core.git, GitHub collects analytics? And when you download bottles, Bintray collects analytics? You can argue that GitHub is the first-party (I doubt it), but Bintray is definitely a third party. These are analytics that are already in place. If analytics turns you away, you should be gone by now.\r\n\r\nTo answer a few specific questions:\r\n\r\n> Especially of projects on GitHub, how many are reporting analytics?\r\n\r\nHow many projects on GitHub require internet connectivity beyond initial install? And how do you avoid analytics when you are connecting to any kind of server?\r\n\r\n> certain organizations prevent the usage of any software that opts-in to analytics. Even if there is a work around to opt-out.\r\n\r\nWhy would your organization's ridiculous policy prevent Homebrew from being improved?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214571308,
		"user" : {
			"login" : "NickCraver"
		},
		"created_at" : "2016-04-26T00:26:31Z",
		"body" : "> How many projects on GitHub require internet connectivity beyond initial install?\r\n\r\nMost do not. Most have no reason to. Just go find any major project list and go down it. Here's the currently trending for example: https://github.com/trending\r\n\r\n> Why would your organization's ridiculous policy prevent Homebrew from being improved?\r\n\r\nThis is an absolutely terrible way to have a conversation. It's not a ridiculous policy and many high-security environments (I've been involved in quite a few) have such a policy. Calling it \"ridiculous\" creates a needlessly bad, adversarial environment that helps no one.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214571755,
		"user" : {
			"login" : "davb5"
		},
		"created_at" : "2016-04-26T00:29:45Z",
		"body" : "> Do you realize that when you clone and/or fetch brew.git and homebrew-core.git, GitHub collects analytics?\r\n\r\nThere's a difference here. I understand how the Git protocol works. I know exactly what data it transmits. I looked into this before I started using it. My Git client wasn't updated to include transmission of extra metrics without my knowledge. I had the information required to make in informed choice about using Git.\r\n\r\nHomebrew, however, introduced metrics collection and transmission without affirmative consent. When I first started using it, this wasn't the case. I done my research, cleared it for use on my personal and work machines. This changed, and extra data was transmitted in a default-on manner, with no warning.\r\n\r\nEssentially, Homebrew began behaving contrary to established conventions.\r\n\r\nI'm very privacy conscious. But I do understand that many people don't care one way or another about privacy, analytics or usage tracking. The issue here is that the software broke the trust I had with it and took that choice away from me (by not advertising the changed behaviour and making the opt-out obvious).\r\n\r\nIt all comes down to communication, user choice, and pro-privacy, conservative defaults.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214573345,
		"user" : {
			"login" : "freels"
		},
		"created_at" : "2016-04-26T00:40:54Z",
		"body" : "FWIW, Apple asks users to opt-in to the submission of anonymous usage data. If Apple can sacrifice potential inaccuracy in usage data in order to respect user privace, I don't see why homebrew cannot as well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214574298,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T00:47:33Z",
		"body" : "@NickCraver \r\n\r\n> > How many projects on GitHub require internet connectivity beyond initial install?\r\n>\r\n> Most do not. Most have no reason to.\r\n\r\nExactly. But Homebrew does. And with every project legitimately requiring internet connectivity, you can't avoid analytics. apt-get, pacman, PyPI, npm, etc. are all capable of collecting analytics info (I don't know if they use it or not) when you connect to their servers. (Not for all commands, I know, but granularity is not the point of debate here.) The reason Homebrew does this differently through Google Analytics is because it does not have its own central server for distribution.\r\n\r\n@davb5 \r\n\r\n> I understand how the Git protocol works.\r\n\r\nAnd you probably also understand how HTTP and curl work. You read `analytics.sh` and `analytics.rb`, you see what is being sent by curl and what is not, done.\r\n\r\n> Homebrew, however, introduced metrics collection and transmission without affirmative consent.\r\n\r\nIf you read my comment carefully you'll realize that I didn't say consent is not needed. I'm all for the idea of an yes/no prompt upon initial install or update after shipping the analytics feature. What I found ridiculous is that there are people who want to overturn the decision of collecting analytics, or want to make it opt-in (which will render it completely useless, because most people wouldn't realize there's such an option). Read my first sentence again:\r\n\r\n> I find it kind of funny that there are still people arguing about opt-in and whether analytics should be done. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214574940,
		"user" : {
			"login" : "ntpd"
		},
		"created_at" : "2016-04-26T00:51:45Z",
		"body" : "@zmwangx \r\n> What I found ridiculous is that there are people who want to overturn the decision of collecting analytics, or want to make it opt-in (which will render it completely useless, because most people wouldn't realize there's such an option).\r\n\r\n![debian](https://cloud.githubusercontent.com/assets/18669252/14803424/b4c6ce94-0b9c-11e6-80d6-e3d4eaebef2c.png)\r\n\r\nDebian's popularity-contest is opt-in (defaulting to \"no\"), yet still collects a [large amount of useful data](http://popcon.debian.org/). \r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214575437,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T00:54:52Z",
		"body" : "@ntpd Homebrew installation process is often (if not mostly) automated. If you make it opt-in, then installing Homebrew non-interactively, either through the install script without connecting stdin to a tty or through git clone, you don't get that prompt at all.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214576041,
		"user" : {
			"login" : "davb5"
		},
		"created_at" : "2016-04-26T00:58:55Z",
		"body" : "@NickCraver Let's keep it civil. I've read your comments thoroughly. I think we're arguing semantics here. A yes/no prompt on installation *is* opt-in. If you say that you're in favour of that, then you're in favour of opt-in. Opt-in doesn't mean a silent default-off and an expectation that the user will dig around to find out how to enable analytics. Opt-in could mean a prompt on install (or first interactive run for existing users), with \"no\" selected by default, as per Debian's Popcon.\r\n\r\nI do agree with the reservations people have with Google Analytics. As valuable as it is, Google do have a unique position where they could very easily correlate analytics events across app/device boundaries (using IP addresses, for instance). This means users have to put a lot of trust in Google that they'll obey their own privacy settings.\r\n\r\n@ntpd has it right. Popcon does the analytics thing in the most respectful (default-off) and informative way. For the most part, I don't object to popcon on personal machines (restrictions in varies enterprise environments are different). Popcon's hosted by Debian themselves, and the data is public. I get as much from Popcon as I put it, and it respects my decision to leave it off (by default).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214576043,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T00:58:56Z",
		"body" : "@ntpd Also, your opt-in data is definitely skewed. Those just represent package popularity among popularity-contest users. \"Large amount\" doesn't imply accuracy.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214576142,
		"user" : {
			"login" : "ntpd"
		},
		"created_at" : "2016-04-26T00:59:27Z",
		"body" : "@zmwangx Most systems won't have the command line tools installed, as a result `brew` will almost never be installed without the user being present. Installation additionally requires a root password, which is requested interactively as part of the process. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214576196,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-26T00:59:50Z",
		"body" : "@freels I'm sitting on a longer comment till later because it's 1:59am and I'd like to sleep at some point this evening, but Apple isn't a perfect example here.\r\n\r\nIf you run the betas every single update usage data is re-enabled _regardless of your previous setting_, and Spotlight regardless of stable/devel/beta status _(unless you disable Spotlight suggestions)_ regularly sends back a semi-anonymous profile to Apple explicitly including [some](https://support.apple.com/kb/PH21932?locale=en_GB) search terms.\r\n\r\nHomebrew, at this point, is still not 1.0. This is noted in `brew --version`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214576392,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T01:01:03Z",
		"body" : "@ntpd\r\n\r\n> Installation additionally requires a root password, which is requested interactively as part of the process.\r\n\r\nMany people install Homebrew as part of a bootstrap process, where you could type your admin password once and walk away.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214576918,
		"user" : {
			"login" : "ntpd"
		},
		"created_at" : "2016-04-26T01:04:02Z",
		"body" : "> Many people install Homebrew as part of a bootstrap process, where you could type your admin password once and walk away.\r\n\r\nI'd like to see some examples of it being used in this way, but the simple solution is that the `brew` installation can use a `--nointeraction` parameter which defaults to analytic to the safe option of `False` when a user is not able to be prompted. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214576977,
		"user" : {
			"login" : "davb5"
		},
		"created_at" : "2016-04-26T01:04:30Z",
		"body" : "> If you make it opt-in, then installing Homebrew non-interactively, either through the install script without connecting stdin to a tty or through git clone, you don't get that prompt at all.\r\n\r\nI think this is fine. Homebrew is a community project. Many people here object to default-on analytics. Let's respect that and leave metric collection off by default. I wish more projects, platforms and operating systems would do this. Data collection shouldn't be a default throughout our lives. The day I can't even install a package without telling Google about it is the day that data collection has gone too far.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214577098,
		"user" : {
			"login" : "NickCraver"
		},
		"created_at" : "2016-04-26T01:05:03Z",
		"body" : "> Exactly. But Homebrew does. And with every project legitimately requiring internet connectivity, you can't avoid analytics.\r\n\r\nThis is not correct. There are proxies, blockers, anonymizers, and even Tor. All remote analytics are easily avoided and to some degree inherently are in large environments due to so many users coming from a single source.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214578311,
		"user" : {
			"login" : "lacombar"
		},
		"created_at" : "2016-04-26T01:13:53Z",
		"body" : "Please get rid of the `HOMEBREW_NO_ANALYTICS` logic altogether, and only opt-in.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214578968,
		"user" : {
			"login" : "lacombar"
		},
		"created_at" : "2016-04-26T01:18:00Z",
		"body" : "@zmwangx you can't avoid NSA spying either, though it doesn't make it right.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214694772,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-26T10:21:32Z",
		"body" : "To clear confusion up a little this is likely not permanently locked, but this managed to reach the point last night where the [CoC](https://github.com/Homebrew/brew/blob/master/CODEOFCONDUCT.md) was getting trampled over. Since there was no maintainer \"on station\" to keep tabs on the situation locking was a reasonable step to ensuring things didn't deteriorate further in the meantime.\r\n\r\n_Please_ bear with us until that changes and we can be around to respond more than fleetingly. PRs were merged overnight to attempt to improve the situation.\r\n\r\nIf this actually needs saying, emailing maintainers sniping emails to their personal accounts at 5 in the morning isn't going to fly. Personal attacks and other malicious communications don't _actually_ help us resolve anything here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214743406,
		"user" : {
			"login" : "joshmanders"
		},
		"created_at" : "2016-04-26T13:24:19Z",
		"body" : "I'm gonna go against the grain and say thanks to the Homebrew team for being as transparent as possible about the data collected, and I will be keeping analytics turned on to help improve one of the most important pieces of software in my ecosystem.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214758998,
		"user" : {
			"login" : "tylerault"
		},
		"created_at" : "2016-04-26T14:13:59Z",
		"body" : "How to get what you want without being creepazoids:\r\n\r\n- Prompt for opt-in on install/upgrade, defaulting to **\"in\"**.\r\n- Start your prompt with something positive, like: \"Help us improve Homebrew by...\"\r\n\r\nYou'll get analytics from a majority of users, and appease users with privacy/security concerns. You may get somewhat skewed usage info away from the latter group, but that seems a small price for the respect of your user base.\r\n\r\nSide note: I'm genuinely amazed the team is surprised that this move upset people in the programming community. Esp. the way it was executed. After Snowden and the FBI/Apple case... and this is a _package manager_... we're not exactly the least paranoid crowd.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214795549,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-26T16:06:02Z",
		"body" : "Hi all, so we've had some time to think, chat and sleep and here's what's the current state of affairs:\r\n\r\nWe will:\r\n\r\n- continue to work on the software you use for free in our evenings and weekends on top of our jobs and try to make it better for you (as described by the docs: the analytics are there to make this free tool better)\r\n- modify the analytics implementation to improve privacy, implementation and messaging where people have reproducible cases or questions. A good example of a request: https://github.com/Homebrew/brew/issues/145\r\n- consider moving to another analytics platform not run by Google if people have suggestions for one that is hosted and freely available for Homebrew to use\r\n\r\nWe will not:\r\n\r\n- be changing analytics to opt-in (in the near future, perhaps ever)\r\n- be letting people abuse maintainers (this includes name calling) anywhere, spam the repository or generally derail. We will block you from the Homebrew organisation temporarily if that happens and permanently if necessary. This is not censorship; you can say whatever you like on your own GitHub repository or blog: not here.\r\n- be motivated to work on Homebrew when people are abusive. If we are not motivated to work on Homebrew: Homebrew will not exist any more. The majority of people complaining have made no contributions to Homebrew. \r\n\r\nThanks for using Homebrew but if you feel these are unacceptable for you then there are other OS X package managers you can use instead. If you decide to stop using Homebrew (I notice some people in this thread already have said that on Twitter) please do not post again in this issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214798704,
		"user" : {
			"login" : "bcardarella"
		},
		"created_at" : "2016-04-26T16:16:37Z",
		"body" : "I sense a hostile fork coming",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214801501,
		"user" : {
			"login" : "joshmanders"
		},
		"created_at" : "2016-04-26T16:25:55Z",
		"body" : " @bcardarella \r\n> I sense a hostile fork coming\r\n\r\nBecause the maintainers won't tolerate abuse towards them? Good luck.    ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214801903,
		"user" : {
			"login" : "bcardarella"
		},
		"created_at" : "2016-04-26T16:27:16Z",
		"body" : "@joshmanders no, because the collection of analytics is a hard stop for certain use cases.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214802670,
		"user" : {
			"login" : "damieng"
		},
		"created_at" : "2016-04-26T16:29:47Z",
		"body" : "But as has been pointed out it's now simple to opt-out. Given the people complaining haven't contributed much (anything?) to brew over it's multi-year history I imagine the fork wouldn't be up to much.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214803065,
		"user" : {
			"login" : "joshmanders"
		},
		"created_at" : "2016-04-26T16:31:06Z",
		"body" : "@bcardarella is the work necessary to opt-out so hard you're actually willing to fork and maintain an alternate homebrew? Extra good luck. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214803160,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-26T16:31:27Z",
		"body" : "@bcardarella If people want to do so then good luck to them (they will need it).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214804864,
		"user" : {
			"login" : "davb5"
		},
		"created_at" : "2016-04-26T16:37:26Z",
		"body" : "> Because the maintainers won't tolerate abuse towards them? Good luck.\r\n\r\nI feel like I'm missing something here. Things got particularly heated but I didn't see any outright abuse. Was this off-channel somewhere else?\r\n\r\n\r\n\r\n> The majority of people complaining have made no contributions to Homebrew.\r\n\r\nFor some people, this is their contribution. I haven't contributed to Homebrew otherwise. I am, however, a user. I felt that taking part in the discussion might help make Homebrew better for everyone - the privacy-conscious and those who want more metrics in order to further improve the tool.\r\n\r\n> be changing analytics to opt-in (in the near future, perhaps ever)\r\n\r\nI really hope you'll reconsider. A package manager is a critical piece of code. I has to be completely bulletproof, in terms of both performance and behaviour. It's so vital to most users that it isn't worth tinkering with. I think there would be just as much backlash if Chocolatey, OneGet or apt-get started calling home with anonymised metrics.\r\n\r\nI'm not completely against analytics (though I do have reservations). I just don't think it should be a default-on situation. At the very least, a Y/N prompt (as many, many other platforms offer) would be a compromise.\r\n\r\n\r\n\r\n> continue to work on the software you use for free in our evenings and weekends on top of our jobs and try to make it better for you\r\n\r\nI think that most of us commenting here were doing so in our free time, because we all want to make the tool better.\r\n\r\nWith the way this was snuck in with no real notification, the acknowledgement that making it out-in would turn off many users (that's a red flag in itself) and the response here (essentially \"my way or the highway\") I'm really disappointed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214811738,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-26T17:01:08Z",
		"body" : "> Was this off-channel somewhere else?\r\n\r\nYes.\r\n\r\n> I really hope you'll reconsider. \r\n\r\nWe will not. \r\n\r\n> A package manager is a critical piece of code. I has to be completely bulletproof, in terms of both performance and behaviour. It's so vital to most users that it isn't worth tinkering with.\r\n\r\nI don't understand the point here?\r\n\r\n> For some people, this is their contribution.\r\n> I think that most of us commenting here were doing so in our free time, because we all want to make the tool better.\r\n\r\nWhile I appreciate that: the tool does not get better without pull requests.\r\n\r\n> With the way this was snuck in with no real notification, the acknowledgement that making it out-in would turn off many users (that's a red flag in itself) and the response here (essentially \"my way or the highway\") I'm really disappointed.\r\n\r\nPlease don't use quote marks when you aren't going to quote me. Last night I added a message that _every Homebrew user will see on update_. If you don't see that as any sort of compromise, I'm really not sure what else to say.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214813740,
		"user" : {
			"login" : "wlewis-sst"
		},
		"created_at" : "2016-04-26T17:08:05Z",
		"body" : "> [We will not] be motivated to work on Homebrew when people are abusive. If we are not motivated to work on Homebrew: Homebrew will not exist any more. The majority of people complaining have made no contributions to Homebrew.\r\n\r\nNot that abuse is justifiable, but have you considered that your own actions may be abusive? Personally, I felt violated when I saw homebrew connecting to Google without notice and without my permission. Now that you have given notice, I still feel abused because you are not asking us for permission. You're assuming it.\r\n\r\nPlease, please, please ask permission. The default can be yes. But if you don't ask, you're being abusive.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214814445,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T17:10:34Z",
		"body" : "I wasn't able to reply to a few comments directly at me yesterday after the issue was locked. Since then Mike has made it very clear and final, so I'll make one final comment as a courtesy to people who replied to me, and unsubscribe from this issue.\r\n\r\n@ntpd \r\n\r\n> I'd like to see some examples of it being used in this way\r\n\r\n[I do](https://github.com/zmwangx/dotfiles/blob/master/provision). Since I don't use other people's bootstrapping scripts, I can't seem to give a good example right now where Homebrew is installed non-interactively, but the git-cloning is definitely an important channel of installation ‚Äî many of us don't like curl pipe into interpreter, let alone giving it root privilege. If you just want an example of Homebrew installation as part of a bootstrapping process, [thoughtbot/laptop](https://github.com/thoughtbot/laptop\r\n) is one (I just took a closer look and although they set up /usr/local for Homebrew manually, they still run the installation script interactively, which is rather weird ‚Äî they could very well just install via git).\r\n\r\n>  but the simple solution is that the brew installation can use a --nointeraction parameter which defaults analytics to the safe option of False when a user is not able to consent.\r\n\r\nFYI, you don't need an option. Just run the install script with stdin redirected to `/dev/null`, and it will skip all the interactive prompts. Still, analytics should be opt-out. The decision has been anyway.\r\n\r\n@davb5 \r\n\r\n> Many people here object to default-on analytics. Let's respect that and leave metric collection off by default.\r\n\r\nMany people? I see 115 people upvoting this issue, and even upvoting doesn't mean they object to default-on analytics. It could mean they didn't like how the rollout process was executed, and honestly it could have been better, but (1) it happened; (2) it has already been improved. What do you expect more?\r\n\r\nInternet forums have a magnifying effect where a few users complaining (especially passionate ones leaving many comments) could feel like \"many people\".\r\n\r\n@NickCraver \r\n\r\n> This is not correct. There are proxies, blockers, anonymizers, and even Tor. All remote analytics are easily avoided and to some degree inherently are in large environments due to so many users coming from a single source.\r\n\r\nSure. But how is calling home with an anonymous UUID any different? What's the harm when your UUID behind your anonymized IP can't be matched to you as an individual? Also, server logs can't be erased on your part, but calling home with analytics can be disabled.\r\n\r\n@lacombar \r\n\r\n> you can't avoid NSA spying either, though it doesn't make it right.\r\n\r\nThis is such a straw man argument on every single level, it's impossible to reply.\r\n\r\n---\r\n\r\nAgain, this will be my last comment, so even if you come back at me, you won't hear anything from me again on this thread. Sorry.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214815224,
		"user" : {
			"login" : "davb5"
		},
		"created_at" : "2016-04-26T17:13:15Z",
		"body" : "> Please don't use quote marks when you aren't going to quote me.\r\n\r\n@mikemcquaid, If I was quoting verbatim, I'd have used GFM quote syntax. Like this...\r\n\r\n> if you feel these are unacceptable for you then there are other OS X package managers you can use instead\r\n\r\nThe \"essentially\" qualifier there was to signify that I was summing up, not directly quoting. I'm sure absolutely no-one was confused by this.\r\n\r\nIf people were being abusive off-channel, then that's absolutely unacceptable. It's disappointing that some people have resorted to that. I understand the frustration from both sides here.\r\n\r\n\r\n> While I appreciate that: the tool does not get better without pull requests.\r\n\r\nWhether creating PRs or not, I think using the tool and encouraging others to do so (to the point that it has become one of the primary package managers on OSX) means that we all have a vested interest in how the platform is developed.\r\n\r\nWould a PR asking \"is this OK, Y/N\" on first interactive run be merged? Or would it be a waste of time?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214817504,
		"user" : {
			"login" : "damieng"
		},
		"created_at" : "2016-04-26T17:21:12Z",
		"body" : "I think people should also remember that whenever you install a package today over http(s) via whatever mechanism (brew, fink, apt-get) whoever is running the server hosting that package has your IP address and knows what you downloaded from them.\r\n\r\nYou don't give them permission and they certainly haven't written any formal policies about what they do with the data but chances are it is logged to disk (80% of the web runs on either Apache, IIS or Nginx and all log access by default) and could be analyzed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214818646,
		"user" : {
			"login" : "davb5"
		},
		"created_at" : "2016-04-26T17:25:08Z",
		"body" : "> I think people should also remember that whenever you install a package today over http(s) via whatever mechanism (brew, fink, apt-get) whoever is running the server hosting that package has your IP address and knows what you downloaded from them.\r\n\r\nI think the difference is that the party involved here has access to a *lot* more of our data. It's the \"creepy factor\" as much as anything else. It's not just the Homebrew admins grepping through server logs, it's our data being shared with a third party without our affirmative consent. Which may indeed be illegal under various jurisdictions data protection legislation.\r\n\r\nAs @zmwangx has said, I don't think we're getting anywhere further here. People are getting frustrated and upset about this change, the way it was rolled out and communicated, and the way people (on both sides of the debate) have acted.\r\n\r\nIf the decision has been made and we refuse to budge on it, I think we'll have to just leave it here. It's not worth going back and forth and upsetting each other further.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214819120,
		"user" : {
			"login" : "nemesit"
		},
		"created_at" : "2016-04-26T17:26:40Z",
		"body" : "Just remove this feature entirely, it's not like it'll be ever anonymous (you can trust google all you want but they are the ones who anonymize what they receive), or make it run on your own server.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214819534,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-04-26T17:28:05Z",
		"body" : "@davb5 If nobody submitted PRs Homebrew would be dead by now, whatever its users count is. There are a lot of examples in OSS of people who didn‚Äôt like some piece of software and went to write their own; even Homebrew is one of them (Max Howell didn‚Äôt like MacPorts so he wrote Homebrew).\r\n\r\n@nemesit We don‚Äôt want to manage yet another server.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 142
	},
	{
		"id" : 214820409,
		"user" : {
			"login" : "agh"
		},
		"created_at" : "2016-04-26T17:30:54Z",
		"body" : "RE: https://github.com/Homebrew/brew/issues/142#issuecomment-214795549\r\n\r\n@mikemcquaid Respect your comments above. Wanted to suggest you look at [Piwik](https://piwik.org) for analytics. Honestly doesn't bother me that you're opt-out, or using Google Analytics, I think the adaptations you've made to make it easy to disable are sufficient and satisfactory. Obviously others may disagree. üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214820630,
		"user" : {
			"login" : "nemesit"
		},
		"created_at" : "2016-04-26T17:31:37Z",
		"body" : "and your users don't want analytics (most of them) I guess that's also the reason why it is opt out instead of opt in in the first place ;-p",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214825721,
		"user" : {
			"login" : "joshmanders"
		},
		"created_at" : "2016-04-26T17:48:29Z",
		"body" : "Being opt-out vs opt-in doesn't mean \"your users don't want analytics (most of them)\" it means that most are satisfied with default configuration and do not go any farther as to customize. I know I don't. So even though I had been alerted to this via this discussion, I would have never known, and most likely had never enabled it despite wanting to help improve the software.\r\n\r\nThey've fixed some issues regarding it. If running a simple command to disable analytics is too troublesome for you, by all means, uninstall homebrew and manually install all these packages yourself.\r\n\r\nI don't understand why you keep arguing about this. The team has expressed it's not going to change, so either accept it and move on, or don't accept it, and maintain your own fork with that one thing removed.\r\n\r\nYou're making a mountain out of a ant hill.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214831149,
		"user" : {
			"login" : "nemesit"
		},
		"created_at" : "2016-04-26T18:04:40Z",
		"body" : "being opt out means \"we don't want to ask our users whether they want to opt in because we know the majority would not opt in\"!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214850970,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-26T19:02:11Z",
		"body" : "I think we've taken this issue as far as it can. I appreciate all the feedback and thoughts here and will keep it in mind going forward.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214852423,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-26T19:07:30Z",
		"body" : "> I don't understand why you keep arguing about this. The team has expressed it's not going to change, so either accept it and move on, or don't accept it, and maintain your own fork with that one thing removed.\r\n\r\nThis.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214917491,
		"user" : {
			"login" : "clshrock"
		},
		"created_at" : "2016-04-26T23:24:21Z",
		"body" : "Glad to find out now that the maintainers of this project value their analytics more than their users.  You guys burned bridges today and yesterday. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214941785,
		"user" : {
			"login" : "joshmanders"
		},
		"created_at" : "2016-04-27T01:49:46Z",
		"body" : "> Your decisions and then your handling of the feedback betray that you value your own motives ahead your users.\r\n\r\nOh yes, wanting to provide a better product to their users is their own motive. Such a horrible act, have you no shame?!\r\n\r\nSeriously, just disable it if you don't want it. It's not hard.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214948381,
		"user" : {
			"login" : "clshrock"
		},
		"created_at" : "2016-04-27T02:18:44Z",
		"body" : "> Seriously, just disable it if you don't want it. It's not hard.\r\n\r\nVery glad that you can at least disable it.  But like it was posted previously, it is yet another project that values taking what they want by default without asking first.\r\n\r\nAnd now, to continue using homebrew, not only will I have to maintain that setting and verify that it is being honored in all future versions, but you have proven that I now must audit your software for future actions because I cannot trust that you have my best interest at heart.  It is further unfortunate that you refuse to consider the slight that we are communicating has occurred.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214949576,
		"user" : {
			"login" : "clshrock"
		},
		"created_at" : "2016-04-27T02:23:16Z",
		"body" : "You could have decided to save analytics data locally and then ask periodically if the user would like to submit the data to help you out.  But no, you force opt-out only internet analytics on everyone and then get incensed when there is push-back from your users. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214963617,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-27T03:54:27Z",
		"body" : "> And now, to continue using homebrew, not only will I have to maintain that setting and verify that it is being honored in all future versions, but you have proven that I now must audit your software for future actions because I cannot trust that you have my best interest at heart.\r\n\r\nIf you feel that way: please use another package manager.\r\n\r\nOn which note it seems I cannot leave this thread open so I'm locking it. Do not open new threads on this topic.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 142
	},
	{
		"id" : 214557138,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-25T23:02:50Z",
		"body" : "LGTM. There's a small potential to miss the message if you automatically update; perhaps we could detect if update is being run from a tty or something?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 143
	},
	{
		"id" : 214557492,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-25T23:04:47Z",
		"body" : "> There's a small potential to miss the message if you automatically update; perhaps we could detect if update is being run from a tty or something?\r\n\r\nGood point, done üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 143
	},
	{
		"id" : 214570025,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T00:17:55Z",
		"body" : "I saw the update message when I ran `brew update` tonight. Caught my attention and looks good.\r\n\r\n<img width=\"979\" alt=\"screen shot 2016-04-25 at 8 16 53 pm\" src=\"https://cloud.githubusercontent.com/assets/2618447/14802896/ae7156ba-0b22-11e6-9772-58d0a610e1d7.png\">\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 143
	},
	{
		"id" : 214567647,
		"user" : {
			"login" : "achikin"
		},
		"created_at" : "2016-04-26T00:02:03Z",
		"body" : "Just tried to reproduce - haven't seen any message about analytics at all.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 144
	},
	{
		"id" : 214600467,
		"user" : {
			"login" : "pjvandehaar"
		},
		"created_at" : "2016-04-26T03:45:55Z",
		"body" : "Didn't reproduce for me either.  Did you use `export HOMEBREW_NO_ANALYTICS=1`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 144
	},
	{
		"id" : 214602113,
		"user" : {
			"login" : "DavidCWGA"
		},
		"created_at" : "2016-04-26T03:48:37Z",
		"body" : "    $ echo $HOMEBREW_NO_ANALYTICS\r\n    1\r\n\r\nOf course now I've already upgraded it means I can't re-test, but it's slightly concerning that my Homebrew install might be ignoring the opt-out var.\r\n\r\nIt should provide a way to confirm that analytics are disabled.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 144
	},
	{
		"id" : 214604323,
		"user" : {
			"login" : "pjvandehaar"
		},
		"created_at" : "2016-04-26T03:52:31Z",
		"body" : "Sorry, my mistake.  I meant that you should run `env | grep HOMEBREW_NO_ANALYTICS`.  I think that will check whether you've exported the variable, which will make it available to the programs that you run.\r\n\r\nTry `git config --file=\"$(brew --repository)/.git/config\" --get homebrew.analyticsdisabled`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 144
	},
	{
		"id" : 214605465,
		"user" : {
			"login" : "DavidCWGA"
		},
		"created_at" : "2016-04-26T03:54:11Z",
		"body" : "    $ env | grep HOMEBREW_NO_ANALYTICS\r\n    HOMEBREW_NO_ANALYTICS=1\r\n\r\n(It's set in my .bashrc so it should always be set.)\r\n\r\n    $ git config --file=\"$(brew --repository)/.git/config\" --get homebrew.analyticsdisabled\r\n    true\r\n\r\n(Of course this is all post-update.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 144
	},
	{
		"id" : 214607240,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-26T04:11:21Z",
		"body" : "> but it's slightly concerning that my Homebrew install might be ignoring the opt-out var.\r\n\r\nIt's not ignoring the variable.\r\n```\r\nHOMEBREW_ANALYTICS_DEBUG=1 brew info openssl\r\n```\r\n\r\nIf the start of that `brew info openssl` command isn't prepended with a `curl` output no analytics are being executed, period.\r\n\r\nAs documented, even if analytics are disabled, running under that env will prevent any analytics from being sent for the duration. Just shows you what the execution would look like:\r\n> You can also view all the information that is sent by Homebrew's analytics by setting HOMEBREW_ANALYTICS_DEBUG=1 in your environment. Please note this will also stop any analytics being sent.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 144
	},
	{
		"id" : 214797043,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-26T16:11:05Z",
		"body" : "As @DomT4 mentioned this has been fixed (if it was an issue) and you can verify this with `HOMEBREW_ANALYTICS_DEBUG=1` or by tracing through the code.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 144
	},
	{
		"id" : 214836226,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T18:18:52Z",
		"body" : "Details: it was an issue for a while yesterday. The message was being spuriously displayed; `brew` was still respecting `HOMEBREW_NO_ANALYTICS` even when the message was displayed. Fixed by #154 and #155.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 144
	},
	{
		"id" : 214564752,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-25T23:45:08Z",
		"body" : "I just noticed that `analytics.sh` includes analytics for Linuxbrew too. Of course 3. in the top post doesn't apply to Linuxbrew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214572122,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T00:32:17Z",
		"body" : "Items 1, 2, and 3 all make sense to me. Especially 1 and 2: that way, if the user is syncing their `XDG_HOME` between multiple machines, they would share an identifier, and this would reduce the amount of double-counting that is done for users who are running Homebrew on multiple machines. And it would be synced without the user having to take special action to do so, as with `$HOME/.homebrew_analyitics_user_uuid`.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214579616,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T01:23:07Z",
		"body" : "I'm also in favor of 1 especially, but I do realize hostility towards XDG from part of the Mac (and *ix in general) community, hence 2 as a compromise of 1, and 3 as a compromise to 1 and 2. Let's see what other maintainers have to say.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214750310,
		"user" : {
			"login" : "jasonkarns"
		},
		"created_at" : "2016-04-26T13:46:28Z",
		"body" : "I am strongly in favor of 1. One shouldn't need to opt-in to the standard since the spec itself defines default values. Requiring users (2) to set the `XDG_DATA_HOME` in order to realize its benefits, if they were to set it to its spec-defined default value rather defeats the purpose of defaults.\r\n\r\nIf this were configuration data, I can understand the desire for some people to *not* have it in XDG directories. But since this is not something that will ever be user-edited, and should be completely transparent to the user, I see no reason why this needs to be opt-in. But since this isn't configuration data, I would also support option 3.\r\n\r\nFor other tools that are using configuration data and need to migrate from the old location (`~/.tool`) to XDG (`$XDG_CONFIG_HOME/tool/config`), I generally recommend:\r\n\r\n```\r\nif exists \"~/.tool\"\r\n  use \"~/.tool\"\r\nelse\r\n  use \"${XDG_CONFIG_HOME:-$HOME/.config}/tool/config\"\r\n```\r\n\r\nThis way the legacy behavior is supported. New/fresh installs only use the XDG location. And users can manually \"upgrade\" to the XDG behavior by either moving the files themselves or deleting the legacy location (depending on the tool and impact of this). Of course, the tool itself can obviously handle the migration itself, too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214760137,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-26T14:17:43Z",
		"body" : "1 seems a reasonable enough suggestion to me. I'm reluctant to encourage more environment variables based on the feedback we've had that people loathe having to find them. I start to wonder if a Homebrew configuration file isn't the worst idea in the world, although it'd be a fair chunk of work to support.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214796756,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-26T16:10:01Z",
		"body" : "> if [[ -n $XDG_DATA_HOME ]]; then\r\n>     HOMEBREW_ANALYTICS_USER_UUID_FILE=$XDG_DATA_HOME/analytics_user_uuid\r\n\r\nI'm definitely up for adding this üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214803042,
		"user" : {
			"login" : "damieng"
		},
		"created_at" : "2016-04-26T16:31:02Z",
		"body" : "Would also recommend renaming this from UUID to installation id. It's not a user, if you have two machines they are both different and in GA terms UUID is a different thing which brew doesn't use.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214820659,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T17:31:44Z",
		"body" : "@mikemcquaid There seems to be a divide here. Other folks on this thread prefer 1 (`XDG_DATA_HOME` or `~/.local/share`, no `HOME`), but you seem be against 1, is that correct? I think Jason made a good case for 1:\r\n\r\n> If this were configuration data, I can understand the desire for some people to not have it in XDG directories. But since this is not something that will ever be user-edited, and should be completely transparent to the user, I see no reason why this needs to be opt-in.\r\n\r\nIndeed, the UUID file should be transparent to the user so there's little reason to put it in HOME where users visit every day and possibly list quite often. `~/.homebrew_analytics_user_uuid` just feels makeshifty.\r\n\r\n@jasonkarns \r\n\r\n> For other tools that are using configuration data and need to migrate from the old location (~/.tool) to XDG ($XDG_CONFIG_HOME/tool/config), I generally recommend:\r\n\r\nI don't see a migration issue here. It's been up for like two or three days, and the existing UUID file can be left there without any negative effect, except users might want to remove it manually to unclutter HOME. (Actually there's a positive effect: more users will be made aware of the analytics thing when they see it in HOME...)\r\n\r\n@damieng \r\n\r\n> Additionally opt-out should clear this value so if you ever opt-in again it's treated as new install.\r\n\r\nIt [already does](https://github.com/Homebrew/brew/commit/df489cfde25b9ea59fdf12c67876a18c13dde4aa).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214824740,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T17:45:03Z",
		"body" : "@DomT4 \r\n\r\n> I'm reluctant to encourage more environment variables based on the feedback we've had that people loathe having to find them.\r\n\r\nIt's not only a problem of people loathing to find them; more env vars have practical consequences. All env vars count toward `ARG_MAX` which is 262144 at the moment, so you can only have a finite number of them, and as you add more of them to your environment you have less space for `argv`, which means shorten command lines, more instances spawned by `xargs`, and so on.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214834029,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T18:14:24Z",
		"body" : "Question: Do we in fact want this to be a per-installation ID, or closer to a user ID? Depending on where we install it, it could be placed somewhere under `$HOME` which could be shared between different computers, via a `$HOME` that is mounted on multiple machines, synced via Dropbox, or something similar. (Though there are some issues with that: a location shared between multiple Homebrew installations, where some but not all have analytics disabled, could cause \"thrashing\" of the user ID as it's repeatedly deleted and recreated, inflating user counts.)\r\n\r\nThe XDG spec sounds like it doesn't allow sharing its directories across machines.\r\n\r\nIf it's really per-installation, maybe it should be stuck under `$HOMEBREW_PREFIX/Library` to be truly part of each Homebrew installation, and not stored per-user or per-machine.\r\n\r\nAs a maintainer, I think we're trying to get closer to counting human users, not installations, so we don't prioritize users with multiple installations over those with a single one. For example, I run Homebrew on about a dozen distinct machines/VMs as part of testing, and share my config files between them using Dropbox and a \"dotfiles\" GitHub repo. Should that count as 1 or 12 \"users\"? I suspect this is a pretty unusual case; maybe unusual enough that it doesn't matter which way we count it. But I don't really know.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214843005,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T18:36:27Z",
		"body" : "@apjanke \r\n\r\n> The XDG spec sounds like it doesn't allow sharing its directories across machines.\r\n\r\nWhile it's not written in the specs (is it?), I don't think it's a good idea to share directories across machines (mounting HOME on different machines is a different story; it's totally fine, unless when you have incompatible versions of the same software in /usr of different machines, but that's out of the scope of this issue). `CACHE_HOME` and `RUNTIME_HOME` should definitely not be shared, `DATA_HOME` sharing is also a pretty bad idea I'd say, and `CONFIG_HOME` can be shared with some caveats, because there are certain software packages that write parameters (that maybe different for different machines) automatically to your `CONFIG_HOME` (e.g. gitk writes `git/gitk` which contains window size and such, but obviously you may want to have different window sizes on machines with different-sized monitors). What I do is to \"sync\" the config dir with git, by versioning the relevant files and ignoring the others.\r\n\r\n> a location shared between multiple Homebrew installations, where some but not all have analytics disabled, could cause \"thrashing\" of the user ID as it's repeatedly deleted and recreated, inflating user counts.\r\n\r\nThat's an interesting point, but I don't think it should affect `$XDG_DATA_HOME`/`~/.local/share`. While it's theoretically possible to mount the same data share on different machines, as I said above it will work very badly in practice (even config dir sharing is problematic, let alone data dir). I can hardly picture anyone sharing it, let alone Mac users (I assume no one will blindly sync `~/Library/Application Support`).\r\n\r\n> If it's really per-installation, maybe it should be stuck under $HOMEBREW_PREFIX/Library to be truly part of each Homebrew installation, and not stored per-user or per-machine.\r\n\r\nThat's a reasonable solution too. Will add to the top post.\r\n\r\n> As a maintainer, I think we're trying to get closer to counting human users, not installations\r\n\r\nThat's a respectable goal, but honestly speaking, I can't picture many people syncing the UUID file via Dropbox wherever it is written to (the number is probably negligible compared to the total number of users/installations).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214843457,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T18:37:59Z",
		"body" : "Now that I think about it, since we already have `homebrew.analyticsdisabled` in `$HOMEBREW_PREFIX/.git/config`, can we also add `homebrew.analyticsuuid` and get rid of a separate UUID file entirely?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214849127,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T18:55:50Z",
		"body" : "> While it's not written in the specs (is it?)...\r\n\r\nThe [XDG Base Dir Spec](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html) you linked to says \"The directory MUST be on a local file system and not shared with any other system.\" I can't quite tell if it's talking about all the directories it defines (and is worded a little oddly), or just `$XDG_RUNTIME_DIR`.\r\n\r\nRereading it again, I think it's talking only about `$XDG_RUNTIME_DIR`.\r\n\r\n> What I do is to \"sync\" the config dir with git, by versioning the relevant files and ignoring the others.\r\n\r\nThat at least sounds like something we could support, and if this is going to be a user ID and not an installation ID, it could go in there.\r\n\r\n> but I don't think it should affect $XDG_DATA_HOME/~/.local/share ...\r\n> I can hardly picture anyone sharing it, let alone Mac users (I assume no one will blindly sync ~/Library/Application Support).\r\n\r\nBoth these are probably true.\r\n\r\n> That's a respectable goal, but honestly speaking, I can't picture many people syncing the UUID file via Dropbox wherever it is written to (the number is probably negligible compared to the total number of users/installations).\r\n\r\nThe number of people adding it specifically? Probably zero. But if we put it in the user's XDG config dir, and they're already syncing that between machines, then they get syncing of the UUID file for \"free\", basically. But... we haven't done stuff with XDG before, and now we're getting in to respecting it, worrying about whether it's synced, and possibly auto-creating part of its hierarchy. Hmm.\r\n\r\nWe don't have a user survey so we don't know how many of our users are running multiple brew installs with shared/synced home/config dirs. I'd guess the proportion is *very* small. So probably what we should worry about is just avoiding inflating their influence through pathological behavior like UUID thrashing, and not worry about whether we count their multiple installations as separate users.\r\n\r\nThis and your comments are making me think an installation ID would be more appropriate and conservative than any attempt to share a per-user ID across instalaltions.\r\n\r\n> Now that I think about it, since we already have homebrew.analyticsdisabled in $HOMEBREW_PREFIX/.git/config, can we also add homebrew.analyticsuuid and get rid of a separate UUID file entirely?\r\n\r\nThis is sounding like a good idea. And then all of your Homebrew analytics related settings are in the same place and can be viewed together.\r\n\r\nIt would over-weight the activity of users who have multiple Homebrew installations per machine, but given how unusual that is (it's barely supported), that is probably negligible.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214851102,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T19:02:36Z",
		"body" : "> Would also recommend renaming this from user-uuid to installation-uuid. It's not a user, if you have two machines they are both different and in GA terms user ID is a different thing which brew doesn't use.\r\n\r\nI think this may be right. Or even if we don't rename the file and variables, we should understand this to really be an installation ID and guide the implementation that way. It's feasible for us to code things so that we have one ID per Homebrew installation. It's probably unrealistic to think that we'll be able to set things up so that it corresponds closer to human users: most users with multiple machines will probably not share these config/data files between their machines, won't (and shouldn't) go out of their way to do so, and trying to do so opens us up to more edge case behavior. So it'll behave closer to an installation ID anyway. We may as well recognize what we're actually measuring and stick with that.\r\n\r\nUsers who want to sync analytics behavior across machines can still set `HOMEBREW_NO_ANALYTICS` in their shell rc files, which I think they're more likely to have set up to share between machines anyway.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214852399,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T19:07:23Z",
		"body" : "> The XDG Base Dir Spec you linked to says \"The directory MUST be on a local file system and not shared with any other system.\"\r\n\r\nEven if that applies to all XDG directories, mounting them locally on different machines or syncing their contents among local filesystems of different machines doesn't violate the rule. Although as I said it would make a mess in practice.\r\n\r\n> > What I do is to \"sync\" the config dir with git, by versioning the relevant files and ignoring the others.\r\n>\r\n> That at least sounds like something we could support, and if this is going to be a user ID and not an installation ID, it could go in there.\r\n\r\nTo be clear, I won't commit in a semi-randomly-generated UUID file into git ‚Äî it is among the files ignored, and I'd be surprised if others will (unless they blindly commits everything in the directory), so still it won't be shared.\r\n\r\n> It would over-weight the activity of users who have multiple Homebrew installations per machine, but given how unusual that is (it's barely supported), that is probably negligible.\r\n\r\nThose are probably Homebrew fanatics and they should be taken more seriously üòâ One vote for each installation üòâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214855238,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T19:13:42Z",
		"body" : "> To be clear, I won't commit a semi-randomly-generated UUID file into git ‚Äî it is among the files ignored, and I'd be surprised if others will (unless they blindly commits everything in the directory), so still it won't be shared.\r\n\r\nGood point. If I encountered this and I hadn't been part of this discussion, I would also assume it was supposed to be machine-local and throw it in my .gitignore.\r\n\r\nI think we can assume that people syncing a user ID file across multiple machines will be very rare, and we just need to avoid having that break things outright.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214857888,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-04-26T19:23:00Z",
		"body" : "If the goal is to avoid polluting the user's $HOME, it certainly won't help if `~/.local` gets created.  I'd wager most users have no dir `~/.local` in the first place.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214860921,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T19:34:03Z",
		"body" : "> I think we can assume that people syncing a user ID file across multiple machines will be very rare, and we just need to avoid having that break things outright.\r\n\r\nExactly. I find somewhere inside `$HOMEBREW_PREFIX` (probably `.git/config`) very appealing now.\r\n\r\n> I'd wager most users have no dir ~/.local in the first place.\r\n\r\nI wouldn't be so sure about that. Quite a few tools follow XDG or at least offer it as an option these days. I currently have 33 subdirectories in `~/.local/share` (although I'll be honest and admit that most of those are not the default).\r\n\r\nEven if people don't have `~/.local`, I bet a considerable percentage of people have the other two XDG directories, `~/.config` and `~/.cache`. And `~/.local/share` is a logical and harmless step from there.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214863226,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-04-26T19:42:51Z",
		"body" : "> I bet a considerable percentage of people have the other two XDG directories, ~/.config and ~/.cache.\r\n\r\nReally?  I'd bet not.\r\n\r\nJust put it in `~/Library/Application Support`, which is where this kind of thing is supposed to go.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214864457,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T19:47:31Z",
		"body" : "> Really? I'd bet not.\r\n\r\ngit uses `~/.config` and npm uses `~/.cache`, just to give one example for each.\r\n\r\n> Just put it in ~/Library/Application Support, which is where this kind of thing is supposed to go.\r\n\r\nI already suggested this so obviously I have no objection, but Homebrew hardly qualifies as an \"application\".",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214866971,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-04-26T19:55:05Z",
		"body" : "Dumping yet another unasked-for dotfile on my machine would be sufficient reason, for me, to just set `HOMEBREW_NO_ANALYTICS`.  It's already bad enough that there are markdown files and dotfiles littering `/usr/local`.  I make `HOMEBREW_REPOSITORY` live outside `/usr/local` (which is still my Cellar) to avoid this.\r\n\r\n> git uses ~/.config and npm uses ~/.cache, just to give one example for each\r\n\r\nOnly if you want it to, apparently.  I use git and I have neither of those, and I didn't have to flip some special switch to make it like this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214867865,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-04-26T19:58:14Z",
		"body" : "It would be so easy to make such a file live in a place where *everyone* can escape pollution, not just XDG fans or some other subset of people who happen to already have a certain dot-folder sitting in $HOME.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214869355,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T20:03:42Z",
		"body" : "> Only if you want it to\r\n\r\nOkay, I just checked and you can use `~/.gitconfig` or `$GIT_DIR/config` too. Not sure you gain anything out of a standalone file instead of a centralized directory. But you can't get away with that if you ever need a global gitignore file, which has to be `~/.config/git/ignore` or `$GIT_DIR/info/exclude` (Also, if you don't have `XDG_CONFIG_HOME` and ever run `gitk`, it will drop another unasked-for `~/.gitk` in your home.)\r\n\r\nAs for npm, I don't think it's an opt-in.\r\n\r\n> It would be so easy to make such a file live in a place where everyone can escape pollution\r\n\r\nYou apparently ignored Linuxbrew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214869739,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T20:05:11Z",
		"body" : "But again, I (and Andrew it seems) prefer an installation-local solution now, so all this debate about `HOME`, `XDG_DATA_HOME` or `~/Library/Application Support` wouldn't matter if that path is taken.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214871085,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T20:10:13Z",
		"body" : ">  But you can't get away with that if you ever need a global gitignore file, which has to be ~/.config/git/ignore or $GIT_DIR/info/exclude\r\n\r\nYou can reconfigure it to use any file with `git config --global core.excludesfile`, and I think that's common since that's what [GitHub's doco suggests you do](https://help.github.com/articles/ignoring-files/).\r\n\r\nBut yeah, this might all be moot. Let's set aside the XDG stuff for the moment before people reach for the flamethrowers, and give some other folks a chance to weigh in, yes?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214871655,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-26T20:12:27Z",
		"body" : "> You can reconfigure it to use any file with git config --global core.excludesfile\r\n\r\nYeah forgot that (I only read the synopsis of `man 5 gitignore`).\r\n\r\n> Let's set aside the XDG stuff for the moment before people reach for the flamethrowers, and give some other folks a chance to weigh in, yes?\r\n\r\nYeah, sorry about my attitude.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214871670,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-04-26T20:12:30Z",
		"body" : "Maybe worth noting that `~/Library/Application Support` will only work on OSX, so we'd have to choose an alternative location anyway if/when we begin to support other platforms.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214903761,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T22:12:37Z",
		"body" : "> Maybe worth noting that ~/Library/Application Support will only work on OSX, so we'd have to choose an alternative location anyway if/when we begin to support other platforms.\r\n\r\nGood point. The analytics code already has some support for Linux/non-OSX, so this is probably relevant now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 215203361,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-27T19:33:20Z",
		"body" : "@zmwangx Things have calmed down so I'd be happy to have an pull request for the XDG stuff here üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 215208122,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-27T19:52:22Z",
		"body" : "@mikemcquaid There has been a lot of discussions so I guess it's hard to follow, but I currently prefer adding a config variable `homebrew.analyticsuuid` in `$HOMEBREW_PREFIX/.git/config` and get rid of the UUID file completely (point 6 in the top post, added later). What do you think about this?\r\n\r\nOnce we decide on what's the best approach, a PR should be pretty simple.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 215208593,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-27T19:54:06Z",
		"body" : "@zmwangx I'm maybe üëç on that. @xu-cheng @apjanke: thoughts?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 215208960,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-27T19:55:33Z",
		"body" : "I agree with @zmwangx: I think sticking it in the git config with the other analytics settings is the best approach, both in terms of bringing the settings together in one place for viewing/editing, and for clarifying the de facto one-ID-per-installation behavior we have. It also avoids a couple potential edge cases with ID \"thrashing\" if a user has multiple Homebrew installations/machines and they don't all have the same analytics settings.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 215214092,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-27T20:14:22Z",
		"body" : "Coming from the multiple Homebrew installations per machine camp, I think we should be making this a per-installation UUID instead of a per-user UUID. (Seems like this is already the agreement thus far.) For the vast majority of users that only run a single installation, this won't make any difference, so that's also not going to significantly impact the analytics we gather.\r\n\r\nI'm not sure if we still support installation from a tarball, but if we do, there's the problem that `.git` might not exist in the Homebrew prefix. Thus sticking (more) things into `.git/config` that aren't really specific to a Git repository might be not the best solution. (This also includes `homebrew.analyticsdisabled`.)\r\n\r\nMy suggestion would be to start using `etc/homebrew/` in the Homebrew prefix and put the UUID file in that directory. In a long-term effort we could also start using this location for other Homebrew-specific configuration data, that is currently exclusively contained in `HOMEBREW_*` environment variables. (@zmwangx has mentioned why it might be desirable to avoid further environment variable inflation. It would also make it easier to configure multiple Homebrew installations on the same machine differently.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 215215887,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-27T20:21:08Z",
		"body" : "üëç to `.git/config` from me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 215231161,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-27T21:13:37Z",
		"body" : "Submitted #162.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 215233289,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-27T21:21:37Z",
		"body" : "@UniqMartin \r\n\r\n> I'm not sure if we still support installation from a tarball, but if we do, there's the problem that .git might not exist in the Homebrew prefix.\r\n\r\nI don't think that's much of an issue. Currently one necessary condition for analytics is `homebrew.analyticsmessage` in the git config file being set to `true`, which won't happen until one has run `brew update` at least once, which should initialize the git repository, so the worst case scenario is a bunch of error messages from git-config. We can append `2>/dev/null` to git-config calls if that's preferred.\r\n\r\n> My suggestion would be to start using etc/homebrew/ in the Homebrew prefix and put the UUID file in that directory.\r\n\r\nThis might be a good idea. Since git-config `homebrew.analyticsmessage` and `homebrew.analyticsdisabled` are already shipped on the master branch, I'd prefer to stick to git-config at this point. A separate config file/directory could be another discussion (and definitely an interesting one).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 215484245,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-28T16:24:22Z",
		"body" : "Thanks everyone for the discussion! Closing in favor of #162.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 145
	},
	{
		"id" : 214564572,
		"user" : {
			"login" : "albus522"
		},
		"created_at" : "2016-04-25T23:44:06Z",
		"body" : "Even better if you could add a `brew analytics off` command. And way better if you add the instructions to the update/install messages. But still appreciated",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 146
	},
	{
		"id" : 214565195,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-25T23:47:42Z",
		"body" : "@albus522 Thanks! Repeating myself from https://github.com/Homebrew/brew/issues/142#issuecomment-214564476: \"I'm not going to be able to do much more than this tonight as I've been up for >18 hours after taking a transcontinental flight.\". This code isn't ideal and will need to cleanup but I'm too tired to do much more now unfortunately.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 146
	},
	{
		"id" : 214565312,
		"user" : {
			"login" : "bcardarella"
		},
		"created_at" : "2016-04-25T23:48:31Z",
		"body" : "@mikemcquaid thank you for the quick response on this. Get some sleep :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 146
	},
	{
		"id" : 214565494,
		"user" : {
			"login" : "albus522"
		},
		"created_at" : "2016-04-25T23:49:38Z",
		"body" : "Get some rest. Timing on all this hasn't been ideal, but your responses have been quite good. Especially on too little sleep.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 146
	},
	{
		"id" : 214716213,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-04-26T11:54:56Z",
		"body" : "Nope: https://github.com/Homebrew/brew/blob/05efd70dc350bf60c47d25d1d48da188ffb504df/Library/Homebrew/utils/analytics.rb#L55",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 147
	},
	{
		"id" : 214760334,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-26T14:18:23Z",
		"body" : "Presuming question resolved by Baptiste? Shout otherwise.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 147
	},
	{
		"id" : 214572916,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T00:38:02Z",
		"body" : "Sounds like a mismatch between the dylib in the `mpfr2` that `gcc45` was built against, and the current installation of `gcc45`.\r\n\r\nI did a fresh installation of `gcc45",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 148
	},
	{
		"id" : 214575599,
		"user" : {
			"login" : "infinity277"
		},
		"created_at" : "2016-04-26T00:55:59Z",
		"body" : "Hi,\r\n\r\nI try to reinstall mpfr2 gcc45 but the error still appear in Matlab.\r\nThis appeared when I typed try brew info mpfr2\r\n\r\nhomebrew/versions/mpfr2: stable 2.4.2 (bottled) [keg-only]\r\nMultiple-precision floating-point computations C lib\r\nhttp://www.mpfr.org/\r\n/usr/local/Cellar/mpfr2/2.4.2 (24 files, 2.7M)\r\n  Poured from bottle\r\nFrom: https://github.com/Homebrew/homebrew-versions/blob/master/mpfr2.rb\r\n==> Dependencies\r\nRequired: gmp4 ‚úî\r\n==> Options\r\n--with-32-bit\r\n\t\r\n==> Caveats\r\nThis formula is keg-only, which means it was not symlinked into /usr/local.\r\n\r\nConflicts with mpfr in main repository.\r\n\r\nGenerally there are no consequences of this for you. If you build your\r\nown software and it requires this formula, you'll need to add to your\r\nbuild variables:\r\n\r\n    LDFLAGS:  -L/usr/local/opt/mpfr2/lib\r\n    CPPFLAGS: -I/usr/local/opt/mpfr2/include",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 148
	},
	{
		"id" : 214577949,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T01:10:55Z",
		"body" : "What are you doing in Matlab that ends up calling this? I have a Matlab license, so I may be able to reproduce it, if you can supply enough details.\r\n\r\nCould you also post the output of `brew config` and `brew doctor`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 148
	},
	{
		"id" : 214580295,
		"user" : {
			"login" : "infinity277"
		},
		"created_at" : "2016-04-26T01:27:57Z",
		"body" : "I try to compile SPArse Modeling Software(http://spams-devel.gforge.inria.fr/downloads.html) in Matlab.\r\n\r\nbrew config\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew\r\nHEAD: df489cfde25b9ea59fdf12c67876a18c13dde4aa\r\nLast commit: 2 hours ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 2443bf529cd1612a8fc51729c603660139262bdd\r\nCore tap last commit: 5 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: quad-core 64-bit haswell\r\nOS X: 10.9.5-x86_64\r\nXcode: 6.2\r\nCLT: 6.2.0.0.1.1424975374\r\nClang: 6.0 build 600\r\nX11: N/A\r\nSystem Ruby: 2.0.0-p481\r\nPerl: /usr/bin/perl\r\nPython: /usr/bin/python\r\nRuby: /usr/bin/ruby => /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby\r\nJava: 1.6.0_65-b14-462\r\nPlease note that these warnings are just used to help the Homebrew maintainers\r\nwith debugging if you file an issue. If everything you use Homebrew for is\r\nworking fine: please don't worry and just ignore them. Thanks!\r\n\r\nbrew doctor\r\nWarning: Some directories in /usr/local/share/man aren't writable.\r\nThis can happen if you \"sudo make install\" software that isn't managed\r\nby Homebrew. If a brew tries to add locale information to one of these\r\ndirectories, then the install will fail during the link step.\r\n\r\nYou should probably `sudo chown -R $(whoami)` them:\r\n    /usr/local/share/man/de\r\n    /usr/local/share/man/de/man1",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 148
	},
	{
		"id" : 215067280,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-27T12:30:47Z",
		"body" : "What version of MATLAB are you using? You're most likely running into this issue because MATLAB is bundling its own version of `libmpfr` and that version gets precedence. You either need to build outside of MATLAB or (preferably) use Clang as that's the only officially supported compiler for MATLAB on OS X.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 148
	},
	{
		"id" : 215306221,
		"user" : {
			"login" : "infinity277"
		},
		"created_at" : "2016-04-28T04:22:09Z",
		"body" : "I used Matlab 2013a(version 8.1.0.064)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 148
	},
	{
		"id" : 215452470,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-28T14:55:14Z",
		"body" : "MATLAB R2013a internally uses a shell script to set up its environment before it starts the graphical user interface. One of the environment variables being set is `DYLD_LIBRARY_PATH` and one of the paths contained in this variable is `/Applications/MATLAB_R2013a.app/bin/maci64`. This directory contains an older version of `libmpfr.1.dylib`. Because `DYLD_LIBRARY_PATH` takes precedence above the paths recorded inside a binary like `cc1plus`, it tries to load the library that is part of MATLAB (because it has the same file name) instead of the one installed by Homebrew. You can check the contents of that environment variable from within MATLAB:\r\n\r\n```matlab\r\ngetenv('DYLD_LIBRARY_PATH')\r\n```\r\n\r\nThat's an issue specific to MATLAB and unfortunately there's nothing Homebrew can do about this. I'd strongly suggest to use Clang (as that's the only officially supported compiler by MathWorks on OS X). If that's not possible, because you need OpenMP and/or FORTRAN support, you can try building outside of MATLAB or you can try resetting `DYLD_LIBRARY_PATH` from withing MATLAB by running\r\n\r\n```matlab\r\nsetenv('DYLD_LIBRARY_PATH', '')\r\n```\r\n\r\nbefore trying to use `gcc45`. Hopefully one of those ideas works for you. Good luck!\r\n\r\nClosing, as this is not an issue with Homebrew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 148
	},
	{
		"id" : 214573410,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T00:41:18Z",
		"body" : "Merged. Thanks for the catch!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 149
	},
	{
		"id" : 214578330,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T01:14:02Z",
		"body" : "Merged. Thanks for catching this!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 150
	},
	{
		"id" : 214573792,
		"user" : {
			"login" : "ZevEisenberg"
		},
		"created_at" : "2016-04-26T00:43:50Z",
		"body" : "Just noticed that this would be obviated by #136, so feel free to close in favor of that one.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 151
	},
	{
		"id" : 214576731,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T01:02:35Z",
		"body" : "Yeah, closing in favor of #136, since that will be merged soon. Thank you for the catch, regardless!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 151
	},
	{
		"id" : 214715784,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-04-26T11:52:44Z",
		"body" : "That sounds interesting. Note we already have public stats on bottles (i.e. precompiled packages) via Bintray, e.g.: https://bintray.com/homebrew/bottles/git/view#statistics",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 214761933,
		"user" : {
			"login" : "chr4"
		},
		"created_at" : "2016-04-26T14:23:25Z",
		"body" : "Google is certianly one of the worst options privacy wise, even though I think Homebrew shouldn't track its users (at least not without an opt-in). I tried explaining my point in [a post](http://chr4.org/blog/2016/04/26/homebrew-betrayed-us-all-to-google/) (including a somewhat clickbaity title)\r\n\r\nPlease reconsider this change, don't hurt the internet.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 214780928,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-04-26T15:21:15Z",
		"body" : "@chr4 If you know of any alternative to Google Analytics that doesn‚Äôt require more work on our side and have the same functionalities we‚Äôre all ears.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 214791336,
		"user" : {
			"login" : "nemo"
		},
		"created_at" : "2016-04-26T15:52:43Z",
		"body" : "@bfontaine cool! Hadn't seen that. Kind of what I was looking for (though I have to go through 3 clicks to get the data)\r\n\r\nAnyway ‚Äì¬†implementing Keen IO shouldn't take any more time than Google Analytics did. I'm surprised GA can support non-web tracking ‚Äì¬†I expect half the dashboards to be completely useless on it.\r\n\r\nI just think it'd be cool to expose the data eventually to the community so others can learn from it and understand homebrew's scale :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 214795991,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-26T16:07:32Z",
		"body" : "@chr4 Your comment does not relate to this issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 214796496,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-26T16:09:09Z",
		"body" : "@nemo Thanks for the issue. A few questions:\r\n\r\n- How long has Keen IO been around and what's their revenue model like? I want to avoid moving somewhere that doesn't exist in a year.\r\n- Have you personally used it? Do you like it? Can you make an introduction?\r\n- Can you link to e.g. the OSS plan?\r\n\r\nThanks for this; definitely open to other options here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 214800843,
		"user" : {
			"login" : "nemo"
		},
		"created_at" : "2016-04-26T16:23:50Z",
		"body" : "@mikemcquaid Anytime! Here's a few responses:\r\n\r\n- Keen IO has been around for a few years and as far as I know ‚Äì¬†they're going pretty strong.\r\n- I've been a user through 3 separate companies in the past 4 years and we're currently a user at [Suto](https://asksuto.com) and *very* happy with it :)\r\n- I can definitely make an introduction to someone there ‚Äì¬†they have a few community folks who could probably help out here. cc: @timfalls \r\n- Look for \"Open Sourcer?\" in on [this page](https://keen.io/plans/) for the OSS plan.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 214859572,
		"user" : {
			"login" : "elof"
		},
		"created_at" : "2016-04-26T19:29:04Z",
		"body" : "Hey all. I'm a community person from Keen and would be happy to help out. We support OSS projects with free upgraded accounts (but not unlimited).\r\n\r\nTo answer some of @mikemcquaid's questions.\r\n\r\n- The company was founded in Jan of 2012 (went through Techstars) and we are backed by Sequoia. \r\n- Our business model for small volume accounts (<15million events/month) is to charge for volume, for large volume accounts there can be many factors that go into what we charge.\r\n\r\nHere are some examples of OSS teams that we work with: https://github.com/keen/community-team/blob/master/community-projects.md",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 214963718,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-27T03:55:28Z",
		"body" : "Thanks @nemo and @elof. That sounds interesting and I'll check it out more.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 215528556,
		"user" : {
			"login" : "ismailbaskin"
		},
		"created_at" : "2016-04-28T18:58:40Z",
		"body" : "Google analtytics niye kullanƒ±yonuz olum mal mƒ±sƒ±nƒ±z? Hadi kullanƒ±yonuz insan bir sorar. Yapacaƒüƒ±nƒ±z i≈üe t√ºk√ºreyim",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 215538347,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-04-28T19:35:37Z",
		"body" : "@ismailbaskin Mind translating that in English?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 215813418,
		"user" : {
			"login" : "anapsix"
		},
		"created_at" : "2016-04-29T17:04:03Z",
		"body" : "> you know of any alternative to Google Analytics that doesn‚Äôt require more work on our side and have the same functionalities we‚Äôre all ears.\r\n\r\n@bfontaine, imho, keep Google Analytics, just stop quietly enabling tracking for everyone",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 215816481,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-29T17:09:31Z",
		"body" : "Anyone else who comments on this thread to complain about our analytics rather than to discuss Keen.io specifically will have their comment deleted and be blocked from the Homebrew organisation temporarily. I want to talk to @nemo and @elof here so cannot lock this thread. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 215822560,
		"user" : {
			"login" : "chr4"
		},
		"created_at" : "2016-04-29T17:26:27Z",
		"body" : "While I can understand you want to keep this Issue productive, I find it disturbing how Homebrew deals with massive complaints from an open-source loving community (see HN, Reddit, etc. discussions).\r\nDon't just delete this away and hope everybody just forgets about this.\r\n\r\nI know this will probably be deleted in a minute and you guys will probably ban me, but I'm still writing this so people get notified via email/ etc.\r\n\r\nThere are people out there for whom this is a serious issue. I beg you do not take this lightly.\r\nI want to tell people \"Homebrew is good, use it\" and not \"Homebrew is kinda good, but before you use it make sure to paste this-and-this in your terminal and also block this and that, otherwise you'll be tracked\".",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 216488940,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T10:21:50Z",
		"body" : "@elof Not sure about monthly events yet but got 1,151,671 total events last week. Would this be too many for Keen to handle for free?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 216606819,
		"user" : {
			"login" : "elof"
		},
		"created_at" : "2016-05-03T17:37:58Z",
		"body" : "@mikemcquaid that data amount shouldn't be a problem, but I'd like to connect with you to discuss how you plan to surface the data (i.e. what queries you will be running and where the metrics will be embedded)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 216778927,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-04T08:16:38Z",
		"body" : "@elof Ok, feel free to email me at mike@mikemcquaid.com or just chat here. Where's not sure yet what queries we'll be running but most likely just aggregates e.g. how many people did X vs Y.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 217279963,
		"user" : {
			"login" : "elof"
		},
		"created_at" : "2016-05-05T21:06:22Z",
		"body" : "Ok, that sounds fine. Do you plan on embedding any of the metrics places\nwhere the public would view?\n\nOn Wed, May 4, 2016 at 1:16 AM Mike McQuaid <notifications@github.com>\nwrote:\n\n> @elof <https://github.com/elof> Ok, feel free to email me at\n> mike@mikemcquaid.com or just chat here. Where's not sure yet what queries\n> we'll be running but most likely just aggregates e.g. how many people did X\n> vs Y.\n>\n> ‚Äî\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> <https://github.com/Homebrew/brew/issues/152#issuecomment-216778927>\n>\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 217365799,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T07:06:40Z",
		"body" : "We do not but we were thinking of providing people with either sporadic data dumps or the read-only key to the data.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 218235843,
		"user" : {
			"login" : "elof"
		},
		"created_at" : "2016-05-10T17:47:38Z",
		"body" : "@mikemcquaid üëç hit me up when you start sending data so I can update your account.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 218415016,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-11T09:58:48Z",
		"body" : "@elof Is there anything else I need to know or do? Just want to make extra sure we're not going to hit any limits in the medium-long term and we'll be able to run queries on that data OK in a performant fashion. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 218541154,
		"user" : {
			"login" : "elof"
		},
		"created_at" : "2016-05-11T18:05:08Z",
		"body" : "@mikemcquaid all set. When you start running queries that you know you are going to run on a regular basis create a saved query and make sure it's cached. They will be üèá",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 225345701,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-11T09:01:30Z",
		"body" : "Thanks for all the input folks. I've played around with the implementation here but we've decided to not move to Keen at this time for a few reasons that I'm happy to detail privately. I am going to look into providing sporadic community data dumps of Google Analytics so our community can check out the data. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 152
	},
	{
		"id" : 214605508,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-26T03:54:41Z",
		"body" : "The previous thread hasn't been censored, ILZ locked it. One of the other maintainers will consider reopening it later potentially, later today. For now simply creating lots of threads on the same issue isn't persuading me to do much except retire from FOSS.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 153
	},
	{
		"id" : 214640845,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T07:06:55Z",
		"body" : "I was able to reproduce the problem locally by doing the following:\r\n\r\n* `rm $HOME/.homebrew_analytics_user_uuid\r\n* Remove the `[homebrew]` section from\r\n* In the main brew repo, do `git reset --hard HEAD~` a few times to back up to a previous version\r\n* `brew update`\r\n\r\nAfter it ran, the `[homebrew]` section in `.git/config` in the brew repo contained this.\r\n```\r\n[homebrew]\r\n\tanalyticsdisabled = true\r\n```\r\n\r\nTrying to understand the code well enough to give a yay/nay on this now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214653454,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T07:29:49Z",
		"body" : "Based on reading the code, I think this is correct.\r\n\r\nAfter this PR, the behavior will be:\r\n* The first time the user does a `brew update` and updates to a new version of Homebrew with the analytics in it:\r\n * `setup-analytics.sh` will make sure the UUID file is removed, and set `HOMEBREW_DISABLE_ANALYTICS=1` for that run.\r\n * `update-report` will display the analytics message and record that it did so in the brew repo's config file, but leave analytics off for this run, so no analytics are sent before the user has an opportunity to read that message\r\n* For any other `brew` subcommands run before that message has been displayed, it will temporarily disable analytics on a per-run basis until that message has been displayed by `brew update`\r\n* The next time the user runs a `brew` command *after* the message has been displayed by `brew update`, `setup-analytics` will see the the `homebrew.analyticsmessage = true`, and if the user has not supplied `HOMEBREW_DISABLE_ANALYTICS=1`, it will proceed to generate a UUID file, and leave analytics enabled for this run.\r\n* In all cases, disabling analytics is \"sticky\": if the user runs a `brew` command with a user-supplied `HOMEBREW_DISABLE_ANALYTICS=1`, that disabling will be persisted in the repo's git config, and analytics will not be sent on future runs, even if the user doesn't have that environment variable set.\r\n* (any nonempty string can be substituted for `1` in `HOMEBREW_DISABLE_ANALYTICS` and have the same effect)\r\n\r\nQuestion: is it necessary to delete the `$HOME/.homebrew_analytics_uuid` file? It seems like this will inflate our user counts if users toggle analytics off and back on. And that file's existence is not used to decide whether to enable analytics on a given run.\r\n\r\nAside from that, based on reading the code, this looks like a correct fix for the issue. (At least as a short-term fix.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214653591,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-26T07:30:37Z",
		"body" : "Unfortunately, I just found this PR would cause new problem on `brew update-report` analytics message https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cmd/update-report.rb#L15-L31",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214654693,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T07:36:07Z",
		"body" : "What is the issue it causes there? I don't see the problem from looking at the code.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214654911,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-26T07:37:21Z",
		"body" : "The analytics message will be shown once even if user explicitly set HOMEBREW_NO_ANALYTICS, which is just a minor issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214655789,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T07:40:32Z",
		"body" : "Okay. Yeah, I see that now.\r\n\r\nThe right fix for that might be to have `setup-analytics` check for a user-supplied `HOMEBREW_NO_ANALYTICS` up front and record `homebrew.analyticsdisabled` right away if it sees it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214657397,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T07:45:01Z",
		"body" : "\r\nE.g. as the very first test in analytics.sh:\r\n\r\n```\r\n  if [[ -n \"$HOMEBREW_NO_ANALYTICS\" ]]\r\n  then\r\n    git config --file=\"$HOMEBREW_REPOSITORY/.git/config\" --replace-all homebrew.analyticsdisabled true\r\n  fi\r\n\r\n  if [[ \"$(git config --file=\"$HOMEBREW_REPOSITORY/.git/config\" --get homebrew.analyticsmessage)\" != \"true\" ||\r\n        \"$(git config --file=\"$HOMEBREW_REPOSITORY/.git/config\" --get homebrew.analyticsdisabled)\" = \"true\" ]]\r\n  then\r\n    [[ -f \"$HOMEBREW_ANALYTICS_USER_UUID_FILE\" ]] && rm -f \"$HOMEBREW_ANALYTICS_USER_UUID_FILE\"\r\n    export HOMEBREW_NO_ANALYTICS=\"1\"\r\n    return\r\n  fi\r\n...\r\n```\r\n\r\nI think the code is a bit harder than it could be because `HOMEBREW_NO_ANALYTICS` is being used as both the user-supplied knob, and `brew`'s internal tracking of whether to use analytics on a given run. So its meaning and value change over the course of the script execution. As a future change, a separate `HOMEBREW_NO_ANALYTICS_THIS_RUN` might simplify the logic.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214658987,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T07:52:42Z",
		"body" : "Wait, no, then we're back to the original problem, I think, because a `brew` self-call would see `HOMEBREW_NO_ANALYTICS` and not realize it was set internally instead of supplied by the user. Sorry.\r\n\r\nAnd I think this PR would remove the \"stickiness\" of `HOMEBREW_NO_ANALYTICS`. Not sure if that's intentional, or if the stickiness was intentional in the first place. It seems like it would be unusual for an env var to be persisted into a file like that. I'm going to read through the other threads that led to this change to try to understand its intent.\r\n\r\nI think you can probably go ahead and merge this as is. Spuriously showing that message is probably less bad than accidentally persistently turning off analytics for everyone who runs a `brew update` now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214659193,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-26T07:53:46Z",
		"body" : "> I think you can probably go ahead and merge this as is. Spuriously showing that message is probably less bad than accidentally persistently turning off analytics for everyone who runs a brew update now.\r\n\r\nOk, I wil do this now.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 154
	},
	{
		"id" : 214659979,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T07:57:18Z",
		"body" : "Looks good. I just tested the update again, and now instead of accidentally setting `analyticsdisabled = true` in `.git/config`, it sets `analyticsmessage = true`. With `HOMEBREW_ANALYTICS_DEBUG=1`, I can see subsequent runs would be sending analytics, as expected.\r\n\r\n:+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214660750,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T08:00:26Z",
		"body" : "Following up on this: is actually removing an existing `~/.homebrew_analytics_uuid` file necessary? Could inflate user counts, especially if a user is sharing a home drive between machines where analytics is enabled on some but not on others.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214661713,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T08:04:50Z",
		"body" : "Per Mike's comment [here](https://github.com/Homebrew/brew/issues/142#issuecomment-214564476), the stickiness of `$HOMEBREW_NO_ANALYTICS` is intentional. This PR reverted that, so we should put it back in.\r\n\r\nI'm working on one now and will submit it shortly. Hopefully you will still be around to review it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214662327,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-26T08:08:03Z",
		"body" : "> Following up on this: is actually removing an existing ~/.homebrew_analytics_uuid file necessary? \r\n\r\nI think so. As we fail to be informative enough to let all of users be aware of opt-out. And therefore, the existing ~/.homebrew_analytics_uuid file is probably what users want to have if they choose to opt-out later.\r\n\r\n> Per Mike's comment here, the stickiness of $HOMEBREW_NO_ANALYTICS is intentional. This PR reverted that, so we should put it back in.\r\n\r\n> I'm working on one now and will submit it shortly. Hopefully you will still be around to review it.\r\n\r\nOK, but we need to figure out how to not disable GA for users who don't choose to opt-out.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214662814,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-26T08:10:24Z",
		"body" : "> Per Mike's comment here, the stickiness of $HOMEBREW_NO_ANALYTICS is intentional.\r\n\r\nRethink a bit, I think this is only short term solution that mike come up with given the limit time. For long term, we should introduce a command to enable or disable analytics instead of making an var stick to filesystem.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214663179,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T08:12:07Z",
		"body" : "I agree. The variable sticking to the filesystem is weird. And a command would be better. But since this was publicly stated as the new behavior and this is a sensitive topic, I do not want to change that behavior until he has a chance to communicate it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214664289,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T08:17:26Z",
		"body" : "Here's a PR for it: #155. What do you think?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214701327,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-26T10:53:11Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 154
	},
	{
		"id" : 214667862,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-26T08:33:43Z",
		"body" : "I manually tested this after merging by locally running a bunch of `brew info`, `brew update`, and `brew tests` commands and examining the `.git/config` file after them. Looks like it's working as expected: HOMEBREW_NO_ANALYTICS is respected and is sticky again, but the sticky disabling doesn't happen unintentionally as a result of just running `brew update` or `brew tests`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 155
	},
	{
		"id" : 214701310,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-26T10:53:08Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 155
	},
	{
		"id" : 232740706,
		"user" : {
			"login" : "interpegasus"
		},
		"created_at" : "2016-07-14T17:51:26Z",
		"body" : "$ brew analytics off\r\n$ export HOMEBREW_NO_ANALYTICS=1",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 155
	},
	{
		"id" : 215779994,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-29T16:03:42Z",
		"body" : "Looks good to me üëç @xu-cheng, any thoughts?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 156
	},
	{
		"id" : 215781905,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-29T16:06:59Z",
		"body" : "LGTM. Sorry for late respond.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 156
	},
	{
		"id" : 216000056,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-30T22:34:13Z",
		"body" : "Sorry for the late comment! I wonder to what extent https://github.com/Homebrew/brew/pull/171#issuecomment-215999975 is also applicable here and whether it would be a good idea to extract the information from `svn info --xml` instead ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 156
	},
	{
		"id" : 216014977,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-01T04:11:49Z",
		"body" : "cc @vladshablinsky \r\n\r\n`svn info --xml` seems to be a better approach. You can parse XML using `REXML::XPath`.\r\ne.g.\r\n```ruby\r\nrequire \"rexml/document\"\r\nxml = REXML::Document.new(Utils.popen_read(\"svn\", \"info\", \"--xml\", cached_location.to_s))\r\nTime.parse REXML::XPath.first(xml, \"//date/text()\")",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 156
	},
	{
		"id" : 216032803,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-05-01T10:17:04Z",
		"body" : "@xu-cheng I knew about this option and thought that `REXML` does pretty much the same things like regular expression matching. However it could be more flexible if `svn`'s log output changes in new versions, so I'll open a new PR.\r\n\r\n@UniqMartin seems there is no way to change the date output format.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 156
	},
	{
		"id" : 215207332,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-27T19:49:05Z",
		"body" : "Great change and PR. Thanks for your contribution to Homebrew! Without people like you submitting PRs we couldn't run this project. You rock!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 157
	},
	{
		"id" : 215141222,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-27T16:35:40Z",
		"body" : "Fixed via https://github.com/Homebrew/homebrew-core/commit/facd5e26cbc3b32e21bd731142a5257b42c2d038. Thanks for the report!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 158
	},
	{
		"id" : 215169839,
		"user" : {
			"login" : "chapskev"
		},
		"created_at" : "2016-04-27T17:51:49Z",
		"body" : "@DomT4 That was fast. \r\n\r\nThank you ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 158
	},
	{
		"id" : 215180179,
		"user" : {
			"login" : "chapskev"
		},
		"created_at" : "2016-04-27T18:18:58Z",
		"body" : "@DomT4 there is still an issue with the upgrade. After the download, there is a mismatch of the checksum \r\n\r\n'==> Upgrading freetds\r\n==> Downloading ftp://ftp.freetds.org/pub/freetds/stable/freetds-0.95.95.tar.bz2\r\n\r\ncurl: (28) Operation timed out after 0 milliseconds with 0 out of 0 bytes received\r\nTrying a mirror...\r\n==> Downloading https://fossies.org/linux/privat/freetds-0.95.95.tar.gz\r\n######################################################################## 100.0%\r\nError: SHA256 mismatch\r\nExpected: 170bbe11ffe02cb38ec8f76605d13689e3e405862d7d083526667640f12ea95c\r\nActual: be7c90fc771f30411eff6ae3a0d2e55961f23a950a4d93c44d4c488006e64c70\r\nArchive: /Library/Caches/Homebrew/freetds-0.95.95.tar.bz2\r\nTo retry an incomplete download, remove the file above.'\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 158
	},
	{
		"id" : 215181082,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-27T18:21:47Z",
		"body" : "Oops, that's because I'm an idiot who can't read filenames, one sec.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 158
	},
	{
		"id" : 215181549,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-27T18:23:27Z",
		"body" : "https://github.com/Homebrew/homebrew-core/commit/cf270a537743d32508fc8494141093677bb6fb8a",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 158
	},
	{
		"id" : 215143434,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-27T16:43:46Z",
		"body" : "You probably want to file this at the [Caskroom](https://github.com/caskroom/homebrew-cask) for now. The two projects are working on moving closer together but it's a complicated process and we remain two separate entities sharing a common ecosystem, with differing development teams and processes.\r\n\r\nThat's where the `HOMEBREW_CASK_OPTS` environment scheme is defined, rather than by us, at this point in time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 159
	},
	{
		"id" : 215151040,
		"user" : {
			"login" : "lashomb"
		},
		"created_at" : "2016-04-27T17:09:19Z",
		"body" : "Ok thanks, I will.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 159
	},
	{
		"id" : 215242062,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-27T21:56:12Z",
		"body" : "One easy fix is to unset `GIT_CONFIG` in `brew.sh`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 160
	},
	{
		"id" : 215780573,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-29T16:04:40Z",
		"body" : "CC @xu-cheng for thoughts on this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 160
	},
	{
		"id" : 215780742,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-29T16:04:55Z",
		"body" : "(I think I'd like to see more than one user report this before we unset the variable).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 160
	},
	{
		"id" : 215782675,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-29T16:08:16Z",
		"body" : "If we change `--local` to `--file=path/to/config`, will it help to solve this. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 160
	},
	{
		"id" : 215787083,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-29T16:15:45Z",
		"body" : "@xu-cheng üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 160
	},
	{
		"id" : 215787611,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-29T16:16:25Z",
		"body" : "> If we change --local to --file=path/to/config, will it help to solve this.\r\n\r\nA user-supplied GIT_DIR floating around (most likely not pointing at Homebrew) could potentially have side effects when you run other git commands that might not outright fail. There's no reason to keep this variable during Homebrew's execution.\r\n\r\nTry this and you'll see the point:\r\n\r\n    GIT_DIR=~/.git brew update\r\n\r\n> (I think I'd like to see more than one user report this before we unset the variable).\r\n\r\nI think users don't typically export `GIT_DIR`. But there's a legit use once in a while, e.g., when you're running a bunch of git commands for a repo from outside in a single session, but don't want to use `-C` or `--git-dir` every time. The chance of having such a use case and using brew in the same session should be very rare.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 160
	},
	{
		"id" : 215886770,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-29T21:29:51Z",
		"body" : "> If we change `--local` to `--file=path/to/config`, will it help to solve this.\r\n\r\nThis seems like a reasonable fix, but it makes all `git config` invocations much more ugly. Setting `GIT_CONFIG` globally doesn't sound like something users should do, or if they really have to, that should be limited to a separate session where they don't interact with Homebrew or other tools built on top of Git, as this will easily mess up things. I wonder how other such tools deal with that, if they do at all.\r\n\r\n> I think users don't typically export `GIT_DIR`.\r\n\r\nI agree with everything that you said and the consequences would probably be very undesirable, but this issue is about `GIT_CONFIG` and not about `GIT_DIR`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 160
	},
	{
		"id" : 215888446,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-29T21:38:20Z",
		"body" : "> I agree with everything that you said and the consequences would probably be very undesirable, but this issue is about GIT_CONFIG and not about GIT_DIR.\r\n\r\nWeird, I don't know how and at which point I convinced myself that this issue is about `GIT_DIR`... But looks like at least `GIT_DIR` should be unset.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 160
	},
	{
		"id" : 216554541,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:55:00Z",
		"body" : "Closing this out but we'll watch for more people with the same issue. I recommend unsetting this variable @rpdelaney as it'll break pretty much any script relying on `git config`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 160
	},
	{
		"id" : 215227941,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-27T21:01:08Z",
		"body" : "Sorry, I managed to miss the email notification on the other thread earlier. Thanks for jumping on this. Merged in https://github.com/Homebrew/brew/commit/9378e46ffc2c17df4efc535744279ebfa28bcf30.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 161
	},
	{
		"id" : 215234990,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-27T21:27:59Z",
		"body" : "I didn't realize `~/.homebrew_analytics_user_uuid` is documented. Documentation now updated.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 162
	},
	{
		"id" : 215793106,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-29T16:25:18Z",
		"body" : "@mikemcquaid Addressed both comments.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 162
	},
	{
		"id" : 215796561,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-29T16:32:40Z",
		"body" : "LGTM üëç If @xu-cheng is happy I'll :shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 162
	},
	{
		"id" : 215921744,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-30T01:37:38Z",
		"body" : "Addressed a bunch of great suggestions from @UniqMartin.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 162
	},
	{
		"id" : 215935730,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-30T04:37:14Z",
		"body" : "One comment. Otherwise LGTM",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 162
	},
	{
		"id" : 215937765,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-30T04:53:59Z",
		"body" : ":+1: I think this is ready to be shipped.\r\n\r\n> Addressed a bunch of great suggestions from @UniqMartin.\r\n\r\nThanks for the kind words!\r\n\r\n> EDIT: I ended up pushing two more times, one fix, one improvement. Sorry for taxing the CI.\r\n\r\nNo worries! Builds for formula PRs are usually taxing it much more than this kind of PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 162
	},
	{
		"id" : 215964176,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-30T13:46:59Z",
		"body" : ":+1: as well. I tested it interactively on 10.9 and it worked as expected.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 162
	},
	{
		"id" : 215988149,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-04-30T19:14:47Z",
		"body" : "@apjanke Replying to your comment in an outdated diff:\r\n\r\n> Minor style note: cmd/update.sh is using underscores/snake_case in its function names. Maybe we should change one of these to match the other?\r\n\r\nThere's also `update-preinstall` in `brew.sh`. Personally I prefer underscores in shell function names to set them apart from executable names (where I prefer to use hyphens), but I'm not sure about other people's opinions.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 162
	},
	{
		"id" : 215993644,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-30T20:42:42Z",
		"body" : "Thanks for the good discussion prior to this PR and then following up with the implementation! Great work, @zmwangx! Merged in c63400d56baaa36f111c2e2d7e709c9ea7b8b992. :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 162
	},
	{
		"id" : 215993864,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-30T20:47:18Z",
		"body" : "*To comment on the style discussion:* I guess we haven't yet converged as much on a style as I thought we had. I prefer using dashes over underscores to differentiate function names from variable names. I don't see a need to differentiate functions from external commands as I treat them mostly alike.\r\n\r\nProbably a good idea to fix the confusing style differences once we agree on our preferred style.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 162
	},
	{
		"id" : 215996778,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-30T21:35:19Z",
		"body" : "> To comment on the style discussion: I guess we haven't yet converged as much on a style as I thought we had. I prefer using dashes over underscores to differentiate function names from variable names. I don't see a need to differentiate functions from external commands as I treat them mostly alike.\r\n> \r\n> Probably a good idea to fix the confusing style differences once we agree on our preferred style.\r\n\r\nI prefer underscores to avoid confusion when writing POSIX-compliant shell scripts: http://unix.stackexchange.com/a/168222",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 162
	},
	{
		"id" : 215997798,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-30T21:58:53Z",
		"body" : "Interesting; I didn't know that. I think I'd also prefer underscores because that's the convention we're using in the Ruby code.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 162
	},
	{
		"id" : 215523495,
		"user" : {
			"login" : "zbeekman"
		},
		"created_at" : "2016-04-28T18:41:54Z",
		"body" : "Great, this PR LGTM, let me know if there's anything else I need to attend to, otherwise I'll assume it's all set",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 163
	},
	{
		"id" : 215609921,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-04-29T01:50:07Z",
		"body" : "üëç :shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 163
	},
	{
		"id" : 215790071,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-29T16:19:37Z",
		"body" : "Thanks for your contribution to Homebrew! Without people like you submitting PRs we couldn't run this project. You rock!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 163
	},
	{
		"id" : 215900970,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-04-29T22:46:46Z",
		"body" : "You have the choice to opt-out, which you are more than welcome to do so if you aren't comfortable having your usage data anonymously collected to help the project. Users are informed on both initial installation of Homebrew and the first `brew update` they run after the feature was introduced; no analytics are sent anywhere until the user sees that message.\r\n\r\nThanks for the Issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 164
	},
	{
		"id" : 215905720,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-29T23:20:15Z",
		"body" : "Left a few minor comments. Love the small but nice improvements!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 165
	},
	{
		"id" : 215934861,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-04-30T04:33:32Z",
		"body" : "After this PR, update failure on one tap would interfere others. This is probably not what we want because we need to do some important things in `update-report` like tap migration and formula rename, which can only be triggered once for now.\r\n\r\nOne solution is to move failure handling to `update-report`. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 165
	},
	{
		"id" : 215997566,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-30T21:53:08Z",
		"body" : "@xu-cheng Good point, have addressed it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 165
	},
	{
		"id" : 216524408,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T13:19:02Z",
		"body" : "Feedback addressed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 165
	},
	{
		"id" : 220856630,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-22T21:10:05Z",
		"body" : "Any last thoughts on this? Hoping to üö¢ soon after addressing that TODO.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 166
	},
	{
		"id" : 220936062,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-23T09:50:28Z",
		"body" : "@BrewTestBot test this please",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 166
	},
	{
		"id" : 220944793,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-23T10:32:55Z",
		"body" : "@BrewTestBot test this please",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 166
	},
	{
		"id" : 216001337,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-30T23:09:29Z",
		"body" : ":+1:\r\n\r\nI wonder if you would like to use this PR as an opportunity to add some tests for this analytics code. It's not exercised during normal usage, thus even simple typos can easily go unnoticed for a while. Setting `HOMEBREW_ANALYTICS_DEBUG=1` or (probably even better) stubbing the `curl` invocation should make testing relatively painless.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 167
	},
	{
		"id" : 216524905,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T13:21:03Z",
		"body" : "@UniqMartin Will add that to my todo list rather than adding to this PR; this stuff is likely to change a bit around https://github.com/Homebrew/brew/issues/152.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 167
	},
	{
		"id" : 215957543,
		"user" : {
			"login" : "rwhogg"
		},
		"created_at" : "2016-04-30T11:25:05Z",
		"body" : "This approach looks really good to me, and I'm really happy to see something like this happen.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 215964776,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-30T13:59:39Z",
		"body" : "Generally :+1: on this approach.\r\n\r\nAs far as design: I would make the DevelopmentTools stuff instance methods instead of class methods, and use a singleton/factory method that gives the appropriate OS-specific instance. (And maybe have class methods in `DevelopmentTools` that delegate to that instance.) That way some stuff could be inherited, and you could instantiate objects for multiple platforms in a single process for A/B testing. And I find the class aliasing (like `DevelopmentTools ||= GenericDevelopmentTools`) to be kind of advanced and confusing. But maybe that's just my Java background talking; I don't know if this is an established Ruby idiom.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 215996663,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-30T21:32:46Z",
		"body" : "Interested on @xu-cheng's and @UniqMartin's thoughts here.\r\n\r\n> As far as design: I would make the DevelopmentTools stuff instance methods instead of class methods, and use a singleton/factory method that gives the appropriate OS-specific instance. (And maybe have class methods in DevelopmentTools that delegate to that instance.) That way some stuff could be inherited, and you could instantiate objects for multiple platforms in a single process for A/B testing. And I find the class aliasing (like DevelopmentTools ||= GenericDevelopmentTools) to be kind of advanced and confusing. But maybe that's just my Java background talking; I don't know if this is an established Ruby idiom.\r\n\r\nIt's mostly the way I did things when doing C++ cross-platform work. I don't think there's an established Ruby cross-platform porting idiom. I generally dislike singletons but I guess if it was a e.g. global constant it would end up having a similar effect to a class. I don't have strong feelings here; would love to hear other maintainer thoughts.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 216003749,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-30T23:59:43Z",
		"body" : "> Interested on @xu-cheng's and @UniqMartin's thoughts here.\r\n\r\nI don't really have a lot of experience with doing this kind of stuff in Ruby. I'm not a big fan of the currently proposed constant (module, class) aliasing and neither seems Ruby 1.8. Singletons and inheritance could work, but doesn't sound like typical Ruby code, even though it's probably more friendly for testing.\r\n\r\nHere's what I think is idiomatic, relatively clean, and requires comparatively few changes (example):\r\n\r\n```ruby\r\n# In 'hardware.rb':\r\nmodule Hardware\r\n  module CPU # Called GenericCPU in current proposal.\r\n    # Platform-agnostic parts of the implementation.\r\n  end\r\nend\r\n\r\nrequire \"os/hardware\"\r\n\r\n# In 'os/hardware.rb':\r\nif OS.mac?\r\n  require \"os/mac/hardware\"\r\n  Hardware::CPU.extend(OS::Mac::Hardware::CPU)\r\nelsif OS.linux?\r\n  require \"os/linux/hardware\"\r\n  Hardware::CPU.extend(OS::Linux::Hardware::CPU)\r\nend\r\n\r\n# In 'os/mac/hardware.rb':\r\nmodule OS\r\n  module Mac\r\n    module Hardware\r\n      module CPU\r\n        # Mac-specific pieces of the implementation.\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\n# In 'os/linux/hardware.rb':\r\nmodule OS\r\n  module Linux\r\n    module Hardware\r\n      module CPU\r\n        # Linux-specific pieces of the implementation.\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThe same pattern could also be applied in all other cases where things need to be separated. I'm not sure (to stay with the example) if `os/hardware.rb` needs to exist at all of whether its contents should be simply appended to `hardware.rb`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 216014600,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-01T03:55:58Z",
		"body" : "I agree with @UniqMartin's proposed style. I think we should make it similar with how we handle Stdenv and Superenv",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 216030303,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-01T09:21:49Z",
		"body" : "@UniqMartin I like that approach. I've generally disliked the Ruby module inclusion approach because it's not obvious where classes live but if we're strict about it and use this only for OS-specific stuff that seems fine. As an aside, I personally really wish we'd have only a single `class` or `module` per file and the filename indicate what it contains; after all my time working on Homebrew I can never remember what the filename is for various classes and I'm sure I'm not the only one.\r\n\r\nI wonder whether it would be awful for `Hardware::CPU.extend(OS::Mac::Hardware::CPU)` to live in `os/mac/hardware.rb` itself just to reduce the boilerplate required in `os/hardware.rb`.\r\n\r\n> I'm not sure (to stay with the example) if os/hardware.rb needs to exist at all of whether its contents should be simply appended to hardware.rb.\r\n\r\nI'm not sure either. My main goal was to get to a point where there's basically no e.g. `OS.mac?` checks outside of `os` ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 216033735,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-01T10:39:29Z",
		"body" : "> As an aside, I personally really wish we'd have only a single `class` or `module` per file and the filename indicate what it contains; after all my time working on Homebrew I can never remember what the filename is for various classes and I'm sure I'm not the only one.\r\n\r\nIt's certainly nice to have, but I don't see this as a major issue. I'm using a programmer's text editor that isn't at all optimized for Ruby, but it still allows me to jump to arbitrary identifiers in the project and deals perfectly fine with multiple files re-opening the same class, e.g. `Pathname` that we're extending in five different files. Thus if I know the identifier, I don't need to know in which file it lives.\r\n\r\n> I wonder whether it would be awful for `Hardware::CPU.extend(OS::Mac::Hardware::CPU)` to live in `os/mac/hardware.rb` itself just to reduce the boilerplate required in `os/hardware.rb`.\r\n\r\nIf we retain `os/hardware.rb`, it feels like the more natural place for that. So yes, awful. :wink:\r\n\r\n>> I'm not sure (to stay with the example) if os/hardware.rb needs to exist at all of whether its contents should be simply appended to hardware.rb.\r\n>\r\n> I'm not sure either. My main goal was to get to a point where there's basically no e.g. `OS.mac?` checks outside of `os`.\r\n\r\nFair point.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217561831,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T21:22:47Z",
		"body" : "This has been rebased and is using the `extend/os` (i.e. reopening classes) approach after people found the inheritance approach messy and the `extend` `Module` approach doesn't work adequately for class method overriding.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217561911,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T21:23:11Z",
		"body" : "As the rebasing is pretty hideous here I'm hoping to merge this pretty shortly if CI is üíö and there's no complaints. We can always iterate on the approach.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217562056,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T21:23:52Z",
		"body" : "(merging this will also allow future PRs to be a _lot_ smaller now the basic groundwork is in).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217578535,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-06T22:25:35Z",
		"body" : "I've only reviewed a small part of the updated PR, but what I noticed is the (in my opinion) odd placement of files that I hope we can address before merging this. (Everything below relative to `Library/Homebrew`.)\r\n\r\n**Major:** So far we've used `extend/` exclusively to extend classes provided by Ruby. Re-purposing this directory for a hierarchy of platform-specific code feels wrong to me and the original placement in `os/` resonated much more with me. To pick a specific example, could we change things such that what previously was `bottles.rb` would be split into the following files?\r\n\r\n- `utils/bottles.rb` ‚Äì Platform-agnostic code, ends with loading `os/utils/bottles.rb`.\r\n- `os/utils/bottles.rb` ‚Äì Loads one of `os/<platform>/utils/bottles.rb`.\r\n- `os/mac/utils/bottles.rb` ‚Äì Contains OS-X-specific parts of `Utils::Bottles`.\r\n\r\n**Minor:** `bottles.rb` apparently was split into `extend/os/bottles.rb`, `extend/os/mac/utils/bottles.rb`, and `utils/bottles.rb`. Notice how the first item lacks a `utils` path component. That's probably unintended.\r\n\r\n----\r\n\r\nAny suggestion for reviewing this and seeing a useful diff of the code that has been moved around, so it actually becomes possible to spot problems that might have snuck in while shuffling around the code? (I suppose the test coverage for the touched code isn't close to 100%.) ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217580046,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T22:35:37Z",
		"body" : "> So far we've used extend/ exclusively to extend classes provided by Ruby. Re-purposing this directory for a hierarchy of platform-specific code feels wrong to me and the original placement in os/ resonated much more with me.\r\n\r\nI don't agree with this, personally. It feels weird to reopen classes in a bunch of different places and so far almost everything inside e.g `os/mac` has been stuff that's in the `OS::Mac` namespace. I'm open to a third way beyond `extend/os` but I don't think the argument can be made that it's more consistent in `os/mac`\r\n\r\n> bottles.rb apparently was split into extend/os/bottles.rb, extend/os/mac/utils/bottles.rb, and utils/bottles.rb. Notice how the first item lacks a utils path component. That's probably unintended.\r\n\r\nüëç \r\n\r\n> Any suggestion for reviewing this and seeing a useful diff of the code that has been moved around, so it actually becomes possible to spot problems that might have snuck in while shuffling around the code? (I suppose the test coverage for the touched code isn't close to 100%.)\r\n\r\nNot really, unfortunately. It's not so much just moving as moving and splitting logic between files (hence why rename detection doesn't kick in). I guess you could maybe set the rename detection low enough and try it locally?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217584049,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-06T23:05:51Z",
		"body" : "> I don't agree with this, personally. It feels weird to reopen classes in a bunch of different places and so far almost everything inside e.g `os/mac` has been stuff that's in the `OS::Mac` namespace. I'm open to a third way beyond `extend/os` but I don't think the argument can be made that it's more consistent in `os/mac`\r\n\r\nI guess that's a matter of perception. For me, `extend` meant (and still means) extensions to classes and modules not originally provided by Homebrew, effectively meaning stuff provided by Ruby itself. I can totally understand how you re-interpreted that as ‚Äúthe directory where we reopen and extend existing classes/modules, no matter where they came from‚Äù (if I'm interpreting your thoughts correctly).\r\n\r\nAnd yes, my argument was more against `extend/os/` and less about moving everything to `os/` though that was the first thing that came to mind. Maybe we can avoid confusion with the `OS` and `OS::Mac` namespace if we move the platform-specific stuff to `platform/` or some other currently unused directory? (I'm somewhat sorry for raising this and delaying the merge, but shuffling around files in a follow-up PR isn't fun either.)\r\n\r\n> Not really, unfortunately. It's not so much just moving as moving and splitting logic between files (hence why rename detection doesn't kick in). I guess you could maybe set the rename detection low enough and try it locally?\r\n\r\nI'll try and see what I can come up with for making the review easier (I'm already doing it locally). Just was hopeful you already know a simple and ready-to-use solution you've used yourself.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217627924,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-07T10:38:08Z",
		"body" : "> Maybe we can avoid confusion with the OS and OS::Mac namespace if we move the platform-specific stuff to platform/ or some other currently unused directory?\r\n\r\nI think that's going to add to the confusion; what's the difference between an OS and Platform? It sounds like we don't have a clear solution here so I don't think it should block this PR being merged.\r\n\r\n> but shuffling around files in a follow-up PR isn't fun either.\r\n\r\nIt's not \"fun\" but it does mean people (e.g. me) can continue to do cross-platform work while the discussion happens about where these files should go. If they require no modifications except filenames then the rename detection will be good and the diff will be minimal. From that perspective: I think we should merge this as-is for now as this cross-platform work is a blocker for a 1.0.0 release.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217627945,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-07T10:38:50Z",
		"body" : "> I think we should merge this as-is for now as this cross-platform work is a blocker for a 1.0.0 release.\r\n\r\nAnd also: there's enough stuff being touched here to mean that there's regular and irritating merge conflicts to resolve.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217665635,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-07T20:03:23Z",
		"body" : "> And also: there's enough stuff being touched here to mean that there's regular and irritating merge conflicts to resolve.\r\n\r\nI appreciate this is more than just annoying. I was just hopeful someone else would join our conversation after you rebased and shuffled a lot of stuff around, maybe coming up with better and more convincing ideas than mine. As it stands, I wasn't able to convince you that `extend/` is not the right place nor was I able to come with a satisfying alternative.\r\n\r\nI haven't had the time to review this thoroughly (and won't be able to do that in the next few days), but I trust you that you were careful when moving things around. Thus, if it were up to me, feel free to merge.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217666079,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-05-07T20:13:25Z",
		"body" : "Sorry that I haven't found the time to review this PR yet. Regardless of when it's merged, I'll find some time next week to go over it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217666093,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-07T20:13:35Z",
		"body" : "I noticed the conversation but am not Ruby-ed up enough to have an opinion beyond what I said earlier. I've read through the code and it seems cogent, so :+1: to merge by me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217667645,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-05-07T20:43:16Z",
		"body" : "I will say that I agree with Martin that regardless of how the class composition is implemented (inheritance vs reopening the class) I think the code would better live in `os` rather than `extend/os`, and that `extend` is reserved for extending standard Ruby classes. My two cents, and not a fiercely-held opinion.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217730007,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-05-08T16:08:25Z",
		"body" : "Thanks, Mike! I see a lot of merge conflicts in my future. üòÇ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217730849,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-08T16:25:12Z",
		"body" : "@sjackman In the short-term: perhaps. In the long-term: you should have none üòâ. The only thing I can see that's going to perhaps cause you grief is that you'll need to stop using e.g. `MacOS` in formulae.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217734356,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-05-08T17:16:47Z",
		"body" : "So long as the portable stuff is extracted out into a common shared file, that's fine by me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 217734847,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-08T17:25:36Z",
		"body" : "@sjackman Yeh, the goal is that everything outside `extend/os/mac` or `os/mac` (or wherever these end up) will work on non-OS X platforms.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 218157032,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-10T13:29:06Z",
		"body" : "This may accidentally break some formulae. e.g.\r\n```\r\n$ brew info octave\r\nError: undefined method `clang_version' for OS::Mac:Module\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n```\r\n\r\nWe could certainly fix it by altering formula. But I'm not sure whether this should be treated as a API break?  If I didn't mistake, we probably want to avoid `DevelopmentTool` used in formula DSL?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 218157529,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T13:30:55Z",
		"body" : "@xu-cheng `brew update`; that case is fixed for me. I agree that we should discourage some of these methods from being used in the formula DSL (ideally programmatically).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 218159099,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-10T13:36:40Z",
		"body" : ">brew update; that case is fixed for me.\r\n\r\nUnfortunately, it is not fixed if run homebrew in no compat mode `HOMEBREW_NO_COMPAT=1 brew info octave`  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 218160383,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T13:41:24Z",
		"body" : "@xu-cheng Yep, that's intentional.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 218160851,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-10T13:43:02Z",
		"body" : "> Yep, that's intentional.\r\n\r\nWhy is it intentional? Homebrew under no compat mode should be able to work just like normal mode.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 218161180,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T13:44:11Z",
		"body" : "@xu-cheng It's not a public API and it's not not a tap I maintain. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 218161212,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-10T13:44:17Z",
		"body" : "OR do you mean we should change octave formula to use `DevelopmentTools`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 218167410,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T14:04:53Z",
		"body" : "> OR do you mean we should change octave formula to use DevelopmentTools?\r\n\r\nI don't think it should use either really; we should decide what we want to support as a public API which currently is only http://www.rubydoc.info/github/Homebrew/brew/Formula and the classes linked from it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 218169447,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-10T14:11:40Z",
		"body" : "> I don't think it should use either really; [‚Ä¶]\r\n\r\n:+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 168
	},
	{
		"id" : 215997656,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-30T21:55:32Z",
		"body" : "I agree with this. Could you try and open a pull request? [This document](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md#how-to-open-a-homebrew-pull-request-and-get-it-merged) should help and I'm happy to walk you through anything else.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 169
	},
	{
		"id" : 216445830,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T06:06:00Z",
		"body" : "Sounds like a good idea.\r\n\r\nWe may still need to fall back to `/usr/libexec/java_home` if a specific version of Java is needed and `$JAVA_HOME` doesn't meet the version requirement, but another JDK that does is available in the default system locations. E.g. in my `.bashrc`, I set `$JAVA_HOME` by calling `/usr/libexec/java_home`, because some programs need `$JAVA_HOME` and don't know how to use OS X's `/usr/libexec/java_home`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 169
	},
	{
		"id" : 216554641,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:55:21Z",
		"body" : "Closing this in favour of the PR in https://github.com/Homebrew/brew/pull/183.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 169
	},
	{
		"id" : 215996532,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-30T21:29:08Z",
		"body" : "Nice find. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 170
	},
	{
		"id" : 215996550,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-30T21:29:36Z",
		"body" : "Could probably just query the dependency list and skip this if it optionally depends on check?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 170
	},
	{
		"id" : 215997682,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-04-30T21:56:10Z",
		"body" : "I would think so. I'll PR it when I have some time tomorrow.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 170
	},
	{
		"id" : 215998887,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-04-30T22:14:58Z",
		"body" : "LGTM :+1: @xu-cheng?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 171
	},
	{
		"id" : 215999975,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-04-30T22:32:16Z",
		"body" : "Not being very familiar with the listed tools, is there some way to make them output the time in a more standardized way (e.g. ISO 8601, RFC 2822) like we do with the Git download strategy? It would be a pity if parsing failed because of version-dependent changes in the human-readable output format that is currently being parsed or if the time format adapts to the user's locale. Have you checked what happens when you set, e.g., `LC_ALL=de_DE.UTF-8` prior to invocation?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 171
	},
	{
		"id" : 216005294,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-05-01T00:39:35Z",
		"body" : "@UniqMartin This is all I can do here. It'll output dates in UTC format, but I cannot manage to output it in a more standartised way. `Time.parse` can interpret almost everything given to it, though, so the change is not very big.\r\n\r\n> Have you checked what happens when you set, e.g., LC_ALL=de_DE.UTF-8 prior to invocation?\r\nDoesn't change anything.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 171
	},
	{
		"id" : 216007210,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-01T01:37:50Z",
		"body" : "> I modified the options a little, I guess this is all I can do here. It'll output dates in UTC format, but I cannot manage to output it in a more standartised way. Time.parse can interpret almost everything given to it, though, so the change is not very big.\r\n\r\nThanks for checking and adjusting your code where necessary!\r\n\r\n> Doesn't change anything.\r\n\r\nGreat! That's reassuring.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 171
	},
	{
		"id" : 216007931,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-01T01:59:08Z",
		"body" : ":+1: Looks good to me; also all of my comments have been addressed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 171
	},
	{
		"id" : 216019453,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-01T06:28:57Z",
		"body" : "Thanks everyone. ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 171
	},
	{
		"id" : 216030728,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-01T09:33:03Z",
		"body" : "See https://github.com/Homebrew/brew/issues/153 for discussion.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 172
	},
	{
		"id" : 216036946,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-01T11:52:40Z",
		"body" : "I'd also like to highlight something that keeps being thrown around; pointing vaguely at legal implications isn't in itself any more convincing that CC'ing a lawyer into an email thread. If you can cite precedent and jurisdiction, great, that's something we could work with, but vaguely hinting at legalities isn't useful.\r\n\r\nI'd also like to point out if _providing_ an opt-out violates the law in a certain jurisdiction that message hasn't reached either major products which do run on an opt-out basis (The Atom Editor, being an immediate example) or products which don't provide an opt-out at all.\r\n\r\nThe latter is the vast majority of cases outside FOSS, and outside of browsers. I fairly regularly get analytics attempting to poke through my firewall via apps, and except the firewall there's no opt-out mechanism.\r\n\r\nGitHub themselves have had [this exact debate](https://github.com/atom/atom/issues/4966) and the determination there was:\r\n\r\n> We have talked to our lawyers. The plan is currently to add in a notification of some kind with a one click metrics disable. Metrics will not be sent to analytics until the notification is dismissed.\r\n\r\nWhich is exactly what Homebrew does today.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 172
	},
	{
		"id" : 216030766,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-01T09:34:10Z",
		"body" : "Looks great to me. Mind updating https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Analytics.md to note to use it instead of the commands?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 173
	},
	{
		"id" : 216031648,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-01T09:51:36Z",
		"body" : "Heh, was talking about this with Mike the other day. You beat me to actually getting the work done üòÉ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 173
	},
	{
		"id" : 216035162,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-01T11:10:05Z",
		"body" : "Part of me wonders if `HOMEBREW_NO_ANALYTICS_THIS_RUN` shouldn't be set permanently for this command. It seems a little counterproductive to track anonymous usage at the same time someone is considering whether to stay opted in/out.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 173
	},
	{
		"id" : 216035317,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-01T11:13:38Z",
		"body" : "Good work! It would be great to also update the shell completion of your shell to work with this new command.\r\n\r\n> Part of me wonders if `HOMEBREW_NO_ANALYTICS_THIS_RUN` shouldn't be set permanently for this command. It seems a little counterproductive to track anonymous usage at the same time someone is considering whether to stay opted in/out.\r\n\r\nWe could consider adding it to the list of commands exempt from tracking (we're already excluding `brew commands`).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 173
	},
	{
		"id" : 216035379,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-01T11:15:17Z",
		"body" : "Your suggestion sounds good to me, FWIW.\r\n\r\n_Edit - Reworded for clarity._",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 173
	},
	{
		"id" : 216036570,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-01T11:45:22Z",
		"body" : "> > Part of me wonders if HOMEBREW_NO_ANALYTICS_THIS_RUN shouldn't be set permanently for this command. It seems a little counterproductive to track anonymous usage at the same time someone is considering whether to stay opted in/out.\r\n\r\n> We could consider adding it to the list of commands exempt from tracking (we're already excluding brew commands).\r\n\r\nI think we should do this in another PR. Because there are many other commands (e.g, `--prefix`) belongs to this category. At the same time, I'm wondering should we only send screen view for only selective commands as personally I don't feel that such statistics can help up much.\r\n\r\nAddressed other comments.   ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 173
	},
	{
		"id" : 216041910,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-01T13:23:51Z",
		"body" : "Currently `brew analytics off` will be tracked and create the UUID file, no? Also missing the change to the analytics documentation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 173
	},
	{
		"id" : 216042231,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-01T13:29:28Z",
		"body" : "> Currently brew analytics off will be tracked and create the UUID file, no? \r\n\r\nGood point, fixed this.\r\n\r\n> Also missing the change to the analytics documentation.\r\n\r\nWhat do you mean? Isn't it already in there? https://github.com/Homebrew/brew/pull/173/files#diff-de62681d221dc414a999cf7eec2f0f36",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 173
	},
	{
		"id" : 216042682,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-01T13:39:47Z",
		"body" : "@xu-cheng Sorry, I missed that before, my mistake.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 173
	},
	{
		"id" : 216042718,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-01T13:40:46Z",
		"body" : "NP, just want to check if I missing anything.\r\n\r\nReady to ship?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 173
	},
	{
		"id" : 216042965,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-01T13:46:33Z",
		"body" : "> Ready to ship?\r\n\r\nOne final (and very minor) remark, but otherwise :+1:.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 173
	},
	{
		"id" : 216036615,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-01T11:46:39Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 174
	},
	{
		"id" : 216037281,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-01T12:01:43Z",
		"body" : ":tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 174
	},
	{
		"id" : 216186030,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-02T10:05:43Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 175
	},
	{
		"id" : 216330539,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-02T19:04:54Z",
		"body" : "LGTM.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 175
	},
	{
		"id" : 216043820,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-01T14:05:04Z",
		"body" : "I fully agree with the contents of this document. Thanks for creating it!\r\n\r\nIt would be great to reformat the document to have one sentence per line. This slightly reduces legibility when reading locally in a plain-text editor, but massively improves diffs in the future (not that I expect very many changes in this document). Even if this isn't persuasive enough, I'd prefer to avoid a random mix of soft-wrapped and hard-wrapped paragraphs.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 176
	},
	{
		"id" : 216046318,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-01T14:51:21Z",
		"body" : "Yes, thanks for putting this together!\r\n\r\nI'd go with Martin's one-sentence-per-line, too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 176
	},
	{
		"id" : 216046379,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-01T14:52:26Z",
		"body" : "Sorry about that spurious closing of this PR; I fat-fingered the \"Close\" button when I just wanted to cancel the comment I was writing instead. That wasn't negative feedback; I agree with the contents of this doc.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 176
	},
	{
		"id" : 216052425,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-05-01T16:11:01Z",
		"body" : "Good idea; thank you for this! üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 176
	},
	{
		"id" : 216525938,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T13:23:48Z",
		"body" : "Addressed feedback, thanks folks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 176
	},
	{
		"id" : 216526061,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T13:24:06Z",
		"body" : "CC @ryanflorence in case you're interested in seeing documents that were influenced by https://gist.github.com/ryanflorence/124070e7c4b3839d4573",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 176
	},
	{
		"id" : 216043019,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-01T13:47:37Z",
		"body" : "> Remove niche pin and unpin commands.\r\n\r\nmay i ask why?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 177
	},
	{
		"id" : 216043315,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-01T13:54:21Z",
		"body" : "> may i ask why?\r\n\r\nPossibly very subjective, but I believe those two commands are used by a small minority of our users, unlike the other commands listed in that section. Thus I don't think they deserve being mentioned so prominently. (They are still fully documented in the man page.)\r\n\r\nIf we wanted to fill the spot with something else, I think more users could be interested in learning about `brew outdated` and using it prior to `brew upgrade`. (I'm also open to other suggestions.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 177
	},
	{
		"id" : 216186168,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-02T10:06:47Z",
		"body" : "I'm üëç on these changes and removals.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 177
	},
	{
		"id" : 216703758,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-04T00:05:21Z",
		"body" : "Replaced `/PATTERN/` with `/REGEX/` for clarity, as discussed. Any other comments on the reordering?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 177
	},
	{
		"id" : 217091641,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-05T07:16:11Z",
		"body" : "No other comments. I'm :+1: on this, including the removal of `pin`/`unpin`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 177
	},
	{
		"id" : 216186193,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-02T10:06:58Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 178
	},
	{
		"id" : 216186252,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-02T10:07:25Z",
		"body" : "Makes sense to split these üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 179
	},
	{
		"id" : 216183579,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-02T09:56:14Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 180
	},
	{
		"id" : 216229739,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-02T13:06:18Z",
		"body" : "I just found out that I forget to escape `?`. Fixed in https://github.com/Homebrew/brew/commit/67944c2f2df16f1b68fb425ffb11dc416ee38d49",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 180
	},
	{
		"id" : 216287726,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-02T16:40:55Z",
		"body" : "How about using [`File.flock`](http://ruby-doc.org/core-1.8.7/File.html#method-i-flock) to get a true lock on the lockfiles? Might even simplify the code; then you'd only need to read the lock file if you needed the PID of the other process (e.g. for the error message). And we could use it to do multi-reader/one-writer locking if that becomes relevant.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216291481,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-02T16:55:43Z",
		"body" : "@apjanke unfortunately we need a lock implementation in Bash not Ruby. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216294303,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-02T17:06:44Z",
		"body" : "Oh darn. Sorry about that. I just woke up and apparently my brain is only half functioning.\r\n\r\nOkay, I get it now ‚Äì it's using `mkdir` for atomicity doable portably from `bash`. I think it'll work as is. Let me mull it over a bit.\r\n\r\nIt's possible we'll need distinct locks for different operations in the future, if we're ambitions. How about making `$HOMEBREW_LIBRARY/lock.d` a permanent directory, and making `$HOMEBREW_LOCK_DIR` be `$HOMEBREW_LIBRARY/lock.d/formulae`, so we could add other lock dirs in the future without cluttering `Library`? Just in case.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216301055,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-02T17:22:31Z",
		"body" : "Yes, this is mainly to use `mkdir` as an atomic operation to create lock. However, it does have a possible race situation when handling stale lock directory as described in comment section of http://wiki.bash-hackers.org/howto/mutex\r\n\r\nI'm open to a better lock bash implementation. But I couldn't find one myself. \r\n\r\nAs for supporting name lock, I'm thinking leave it as is for now because we probably should avoid to use bash lock if possible due to its imperfections. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216301103,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-02T17:22:42Z",
		"body" : "Re: `ps`: `fuser` or `lsof` are other options with less failure. I'd really rather we tried to lean into a simple Unix command unless we can demonstrate failure cases, particularly given this implementation is racy. If we're going to write a lot of code for this: I'd rather it worked.\r\n\r\nAnother option is:\r\n\r\n```shell\r\n$ /usr/bin/time ruby -e 'File.new(\"/Users/mike/fish\").flock(File::LOCK_EX)'\r\n        0.06 real         0.04 user         0.02 sys\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216302778,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-02T17:28:23Z",
		"body" : "Sorry for being muddle-headed earlier and not realizing this was bash.\r\n\r\nI agree with xu-cheng now that this is a good way to go and will work as is, with `mkdir` providing the atomicity. The race condition that's left in the directory cleanup seems like the only issue would be getting a false positive (thinking the other process still held the lock when in fact it doesn't), but the failure mode for that is nondestructive, just displaying the error message, and re-running `brew update` will work and clean up the lock. That's not a big deal.\r\n\r\nI can't think of a better native bash implementation, and think this one is sufficient, unless there's a different problem I'm overlooking. And just using `ps` or `lsof` or anything else that just queries who's using what is going to be racy.\r\n\r\nThe problem with shelling out to Ruby is that you'd need to keep that flocking `ruby` process alive for the duration of the update, which would be more complicated than what we have now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216303361,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-02T17:30:36Z",
		"body" : "If this has a known race-condition I'm a pretty hard üëé on using it instead of a far more simple implementation using something like `ps`, `fuser` or `lsof`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216305377,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-02T17:38:20Z",
		"body" : "`fuser -uf /usr/local/bin/brew` in `/usr/local/Library/Homebrew/cmd/update.sh` seems pretty consistently reliable to me?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216311203,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-02T17:59:26Z",
		"body" : "It's only technically a \"race\": all outcomes still serialize the operations in a correct, safe order. It's just a minor loss of efficiency. Would matter in something like a high volume web server, but not for brew's purposes.\r\n\r\nI don't think we really know if those other implementations are reliable. If they aren't, they'd just cause rare, intermittent, hard-to-reproduce problems for users in the wild, maybe hat just looked like repo's in a weird state. They wouldn't know what to report and we'd have no way of diagnosing. I know you like to actually see a bug happen before fixing it, but this may be a case where we just can't really know. Maybe some of those weird user config issues that Martin likes to tackle are due to this. Maybe (probly) they aren't.\r\n\r\nps, fuser, and lsof all have the same problem: they're point-in-time observations. If we stick with one of those, doesn't really matter which we use. But if we use mkdir, we can be more confident that there aren't unknown weird failures happening for users out there. And we'd be setting a good example for other coders. :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216332386,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-02T19:11:16Z",
		"body" : "> Maybe some of those weird user config issues that **Martin** likes to tackle are due to this.\r\n\r\nNot sure what this is referring to, to be honest. üòÄ\r\n\r\n> ps, fuser, and lsof all have the same problem: they're point-in-time observations. If we stick with one of those, doesn't really matter which we use.\r\n\r\nExactly. Using one of these is as good as not locking at all. (Which worked fairly well so far.)\r\n\r\n> But if we use mkdir, we can be more confident that there aren't unknown weird failures happening for users out there. And we'd be setting a good example for other coders. :)\r\n\r\n:+1: I'm in favor of the current implementation. Using an atomic `mkdir` as a mutex is a pretty standard technique in shell scripting as far as I know. I've used it successfully in a serializing logger invoked from something like `make -j4` and it works well in practice.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216336382,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-02T19:27:26Z",
		"body" : "> Exactly. Using one of these is as good as not locking at all. (Which worked fairly well so far.)\r\n\r\nCan you care to explain what the failure case is on them, please? Currently we're proposing adding an unlicensed, racy 30 line file where it's unclear where the benefit is over a single command.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216341205,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-02T19:45:00Z",
		"body" : "> Can you care to explain what the failure case is on them, please?\r\n\r\nThe usual failure case in a concurrent setting: In the time between making the observation (and processing it) and updating some state variable (in the current code a directory and a PID file) things can (and will) change. And we need to keep some state as, e.g., `fuser` alone won't tell us why a file is being accessed (is that a `brew update` running or something else). To stay with the `fuser` example, it's also horribly slow on my system (around 5 s to completion) and spawns an entirely new `perl` process. Or am I missing something here?\r\n\r\n> Currently we're proposing adding an unlicensed, racy 30 line file where it's unclear where the benefit is over a single command.\r\n\r\nI don't think it makes sense to speak of licenses when using a simple `mkdir` and exploiting its atomicity. I'm nor sure why you claim it's racy because as far as I know it is not. (The current implementation looks correct to me.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216344103,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-02T19:56:39Z",
		"body" : "Fine, as mentioned before, I don't have strong feelings here. This just feels pretty overkill for what it's being used for currently. If you run `brew update` in two tabs at once it'll complain but it backs onto Git's locking which behaves as expected. As mentioned before I don't really approve of fixing bugs speculatively; this is \"fixing\" something not reported by users and introduces new code which may have edge cases which will cause issues for users. Doesn't seem like a net positive to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216351008,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-02T20:20:12Z",
		"body" : "> This just feels pretty overkill for what it's being used for currently. If you run brew update in two tabs at once it'll complain but it backs onto Git's locking which behaves as expected. As mentioned before I don't really approve of fixing bugs speculatively; this is \"fixing\" something not reported by users and introduces new code which may have edge cases which will cause issues for users. Doesn't seem like a net positive to me.\r\n\r\nI can sympathize with your view. In practice `brew update` finishes sufficiently quickly and is probably never run by users in parallel. I can imagine this might change once we flip the switch on auto-update before install/upgrade.\r\n\r\nI think the main motivation here is that printing one understandable error generated by `brew` instead of the more granular error reporting by `git`. Also, our update involves several invocations to `git` and while they individually do the right thing and leave the repository in a sane state, I'm not entirely sure that our sequence of `git` invocations is free from bugs if it happened to run in parallel. (But yes, this is unlikely to happen in practice and the clearer user-facing error reporting might be more important.)\r\n\r\nI'm pretty confident that using `mkdir` is the right thing, I'm not entirely sure yet that the rest of the implementation is robust enough that it won't introduce new issues.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216352697,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-02T20:26:27Z",
		"body" : "A quick head up when I'm in bed. The most important motivation is I need a bash version of lock when installing vendor Ruby as part of moving to Ruby 2.0 only. `brew update` just happens to be a nice place to have the same feature and is helping to separate one big PR to multiple smaller ones. \r\n\r\nNow I need to go to sleep. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216353931,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-02T20:31:23Z",
		"body" : "> A quick head up when I'm in bed. The most important motivation is I need a bash version of lock when installing vendor Ruby as part of moving to Ruby 2.0 only. `brew update` just happens to be a nice place to have the same feature and is helping to separate one big PR to multiple smaller ones.\r\n\r\nSorry if this sounds a bit harsh, but it would have helped to have that (and maybe a bit more) in the PR body instead of ‚Äú*No description provided.*‚Äù It's not a completely trivial change and as such it deserves a few explanatory words.\r\n\r\n> Now I need to go to sleep.\r\n\r\nOf course; don't lose sleep because of this! This PR will still be there tomorrow.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216463817,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T08:07:35Z",
		"body" : "> The most important motivation is I need a bash version of lock when installing vendor Ruby as part of moving to Ruby 2.0 only. brew update just happens to be a nice place to have the same feature and is helping to separate one big PR to multiple smaller ones.\r\n\r\nWhile I normally agree with splitting up PRs like this I think if the lock is mainly intended for another feature it'd be good to review it in that context. Happy to leave it open for now, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216582386,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-03T16:17:43Z",
		"body" : "I have update the lock implemention:\r\n* the lock will be created at `/tmp` folder\r\n* the lock now accepts the lock name.\r\n* address some of @UniqMartin 's concern using double lockers. \r\n\r\nThe moving to ruby 2 is still a work in process and it's another huge PR. If you are interested, you can view the process here https://github.com/Homebrew/brew/compare/master...xu-cheng:vendor",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216584079,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T16:23:50Z",
		"body" : "> The moving to ruby 2 is still a work in process and it's another huge PR. If you are interested, you can view the process here master...xu-cheng:vendor\r\n\r\nDo you want any comments on this yet?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216584949,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-03T16:26:43Z",
		"body" : "> Do you want any comments on this yet?\r\n \r\nBe free. Any comment is appropriated. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216595950,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T17:01:12Z",
		"body" : "@xu-cheng It seems I can't comment easily until it's a PR so maybe just worth opening it and sticking `[WIP]` in the title.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216600032,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-03T17:14:01Z",
		"body" : "@mikemcquaid #195",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 218140198,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-10T12:17:31Z",
		"body" : " I found a way to use `flock(2)` to lock the file. I have updated the implementation, please review.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 218141154,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T12:22:09Z",
		"body" : "@xu-cheng Nice idea but I'd rather we avoid a Python dependency here. `shlock` (https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/shlock.1.html) may be a good option on OS X and `flock` on Linux. If neither command exists, I think it's fine to just avoid locking and print a message telling people not to run in parallel.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 218142439,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-10T12:28:21Z",
		"body" : "@mikemcquaid the `shlock` is similar to my previous implementation that it is not as reliable as `flock`.  You can see more detail at `BUGS` section in the manpage.\r\n\r\nAlso `shlock` and `flock` have much different syntax to use.\r\n\r\nHow about this? Use Linux native `flock` if possible, otherwise use `ruby` to create flock similar to my current implementation. Therefore, I think I cover both Linux and OS X. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 218144658,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-10T12:38:51Z",
		"body" : "Updated the PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 218145515,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T12:42:45Z",
		"body" : "@xu-cheng Neither of those BUGS seem to matter to us? Honestly I'm not even sure why we care this much about locking `brew update` to stop weird messages from Git (and similarly with installing a vendored Ruby). I'd just prioritise only OS X for now until our cross-platform support is much further along.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 218145719,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-10T12:43:35Z",
		"body" : "> Honestly I'm not even sure why we care this much about locking brew update to stop weird messages from Git (and similarly with installing a vendored Ruby). \r\n\r\nAs I said before, the lock is essential for `install-vendor`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 218147572,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T12:51:19Z",
		"body" : "> As I said before, the lock is essential for install-vendor.\r\n\r\nYou've said that but I still don't really understand the justification of why we need such careful locking right now and it seems massively overkill that we're at the point where we're writing off things like `shlock` but at this point I just want to get this mergeable and move on and hope this doesn't introduce user issues.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 218150185,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-10T13:02:03Z",
		"body" : "> You've said that but I still don't really understand the justification of why we need such careful locking right now and it seems massively overkill that we're at the point where we're writing off things like shlock but at this point I just want to get this mergeable and move on and hope this doesn't introduce user issues.\r\n\r\nSorry, but I really disagree. As talked in previous  discussion among other maintainers, the careful locking is important. Since we can get it right, why not. And I don't think a one line ruby code is overkill, considering this is what you suggested in the early of discussion. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 218151688,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T13:08:19Z",
		"body" : "Ok, that's fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 218381473,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-11T07:20:29Z",
		"body" : "More testing and address all comments. I think this is ready.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 181
	},
	{
		"id" : 216371498,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-02T21:34:57Z",
		"body" : "Here's what I get before this change (after messing with the URLs to point somewhere else):\r\n\r\n```\r\n$ brew update\r\nerror: unable to read askpass response from 'false'\r\nfatal: could not read Username for 'https://github.com': terminal prompts disabled\r\nError: Fetching /opt/brewery/dummy/Library/Taps/homebrew/homebrew-gui failed!\r\nerror: unable to read askpass response from 'false'\r\nfatal: could not read Username for 'https://github.com': terminal prompts disabled\r\nError: Fetching /opt/brewery/dummy/Library/Taps/homebrew/homebrew-versions failed!\r\nAlready up-to-date.\r\n```\r\n\r\nAnd after applying this change:\r\n\r\n```\r\n$ brew update\r\nfatal: could not read Username for 'https://github.com': terminal prompts disabled\r\nError: Fetching /opt/brewery/dummy/Library/Taps/homebrew/homebrew-versions failed!\r\nfatal: could not read Username for 'https://github.com': terminal prompts disabled\r\nError: Fetching /opt/brewery/dummy/Library/Taps/homebrew/homebrew-gui failed!\r\nAlready up-to-date.\r\n```\r\n\r\nThis means one confusing line of output less, but otherwise still the same error behavior. Thus: :+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 182
	},
	{
		"id" : 216388042,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-02T22:49:13Z",
		"body" : "Agreed. And the code is less confusing too. :+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 182
	},
	{
		"id" : 216445498,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T06:02:30Z",
		"body" : "Looks like a good start.\r\n\r\nThis only affects the Java detection in the `brew config` command, though, which describes your configuration, but is not actually used to choose which JDK to call. It will probably need to be adjusted in all these files, with a bit of refactoring done, since they are currently calling `/usr/libexec/java_home` directly.\r\n\r\n```\r\n$ grep -rl java_home Library/Homebrew\r\nLibrary/Homebrew/cmd/config.rb\r\nLibrary/Homebrew/compat/formula_specialties.rb\r\nLibrary/Homebrew/language/java.rb\r\nLibrary/Homebrew/requirements/java_requirement.rb\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 183
	},
	{
		"id" : 216445940,
		"user" : {
			"login" : "meritozh"
		},
		"created_at" : "2016-05-03T06:06:57Z",
		"body" : "Ok, I will check it later.\r\nThanks for your suggestions.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 183
	},
	{
		"id" : 217179868,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-05T15:07:15Z",
		"body" : "Personally, I'm not entirely sure that we should support JDK installed outside of  standard place, i.e. `/Library/Java/JavaMachines`. We use `/use/libexec/java_home` heavily for auto detecting JDK in the wrapper scripts(see https://github.com/Homebrew/brew/blob/master/Library/Homebrew/language/java.rb). If we want to support JDK in any places, we will need to find an alternative method for these wrapper scripts. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 183
	},
	{
		"id" : 217395168,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T09:23:01Z",
		"body" : "@xu-cheng I think we can just add support for this variable to those places.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 183
	},
	{
		"id" : 217629380,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-07T11:10:18Z",
		"body" : "> I think we can just add support for this variable to those places.\r\n\r\nWe could sort of. But that would also mean we will have to lose some function. For example, it would mean we will have to make `java_home_env` behavior like `overridable_java_home_env`. As result, an incorrect setting of JAVA_HOME may break some tools.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 183
	},
	{
		"id" : 217629456,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-07T11:12:11Z",
		"body" : "I don't think we use `JAVA_HOME` unconditionally; we use it as another search path.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 183
	},
	{
		"id" : 217629485,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-07T11:13:11Z",
		"body" : "> I don't think we use JAVA_HOME unconditionally; we use it as another search path.\r\n\r\nOk, that makes more sense.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 183
	},
	{
		"id" : 238815872,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:37:18Z",
		"body" : "@meritozh Any news here?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 183
	},
	{
		"id" : 238837036,
		"user" : {
			"login" : "meritozh"
		},
		"created_at" : "2016-08-10T11:14:36Z",
		"body" : "@MikeMcQuaid I find if I change to use `JAVA_HOME`, I must modify too many codes. And most of Mac users just download java pkg then install it. So I think we needn't change it now.\r\n\r\nIf you think it's necessary, I will continue my work.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 183
	},
	{
		"id" : 238864977,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T13:23:39Z",
		"body" : "@meritozh It would be great if you could, thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 183
	},
	{
		"id" : 238869208,
		"user" : {
			"login" : "meritozh"
		},
		"created_at" : "2016-08-10T13:39:27Z",
		"body" : "Ok, I will.\n> On Aug 10, 2016, at 9:23 PM, Mike McQuaid <notifications@github.com> wrote:\n> \n> @meritozh <https://github.com/meritozh> It would be great if you could, thanks!\n> \n> ‚Äî\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub <https://github.com/Homebrew/brew/pull/183#issuecomment-238864977>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AHMaBIZzb9JYtBRCcnlQVHwibSxGTPF9ks5qedDhgaJpZM4IVW3G>.\n> \n\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 183
	},
	{
		"id" : 244548131,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:01:03Z",
		"body" : "Passing on this for now but feel free to create a new PR when that's done. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 183
	},
	{
		"id" : 216379639,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-02T22:05:48Z",
		"body" : "Do we need to care about the case where a formula might require Perl 5.18 but not work with, e.g., Perl 5.22? (Not being a Perl user I don't really know how compatible those versions are and how much Perl-using formulae work with a wide spectrum of possible Perl versions.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 184
	},
	{
		"id" : 216538351,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T14:06:13Z",
		"body" : "I used to hack a lot of Perl, and I never ran in to any non-forward-compatible problems. Perl is usually pretty good about that, and reserves breaking changes for major version increments.\r\n\r\nBut for consistency in the DSL, I think we should use the \"`5.18` means 5.18 exactly, `5.18+` means 5.18 or later\" syntax the way we do with the Java requirement, even if that means we'll be tacking a `+` on to all the `:perl` requirements. Thoughts?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 184
	},
	{
		"id" : 216538506,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T14:06:29Z",
		"body" : "Other than that, :+1:.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 184
	},
	{
		"id" : 216540769,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:11:08Z",
		"body" : "LGTM üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 184
	},
	{
		"id" : 216552169,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-03T14:47:08Z",
		"body" : "I was in the middle of writing a short response to Martin's comment, wandered off to make a cup of tea and came back to discover Andrew had written a better answer than me so I'll just point to that as my answer üòâ üòÑ.\r\n\r\n> But for consistency in the DSL, I think we should use the \"5.18 means 5.18 exactly, 5.18+ means 5.18 or later\" syntax the way we do with the Java requirement, even if that means we'll be tacking a + on to all the :perl requirements. Thoughts?\r\n\r\nIIRC we don't actually enforce this with the Java requirement directly though? We enforce it with the `java_home` tool which throws a bad exit code if the version requested doesn't have a matching JVM:\r\n\r\n```\r\n/usr/libexec/java_home --version 1.7\r\nUnable to find any JVMs matching version \"1.7\".\r\n$?\r\n2\r\n```\r\n\r\n```\r\n/usr/libexec/java_home --version 1.7+\r\n/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home\r\n$?\r\n0\r\n```\r\n\r\nFor Ruby we don't couch backwards incompatibility at all, if something works on Ruby 1.9 and breaks for Ruby 2.0 the latter still satisfies a `depends_on :ruby => \"1.9\"` dependency.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 184
	},
	{
		"id" : 216559590,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T15:11:11Z",
		"body" : "> IIRC we don't actually enforce this with the Java requirement directly though? \r\n\r\nYeah, IIRC too. But I think that doesn't matter: where inside the code it gets interpreted is an implementation detail. The semantics at the formula-level DSL are all that really matter here.\r\n\r\n> For Ruby we don't couch backwards incompatibility at all...\r\n\r\nOh. I guess we're already inconsistent, then.\r\n\r\nThere's a lot more `depends_on :java` than `:ruby`.\r\n\r\n```\r\n[/usr/local/Library/Taps/homebrew/homebrew-core/Formula on ‚áÑ master]\r\n$ grep ':java' * | wc -l\r\n     133\r\n[/usr/local/Library/Taps/homebrew/homebrew-core/Formula on ‚áÑ master]\r\n$ grep ':ruby' * | wc -l\r\n      10\r\n```\r\n\r\nMaybe it's not too late to change our Requirement version semantics to be consistent everywhere? I think the `:java` style should be what we use, because that allows specifying exact versions, where the `:ruby` style doesn't. So if we find out later that we need to add the ability to require non-forward-compatible versions, we're out of luck if we go with the `:ruby` style.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 184
	},
	{
		"id" : 216570784,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T15:42:10Z",
		"body" : "I personally think it's fine as-is unless we have known forwards compatibility issues (like we do with Java)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 184
	},
	{
		"id" : 216570949,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-03T15:42:40Z",
		"body" : "> The semantics at the formula-level DSL are all that really matter here.\r\n\r\nFrom a maintainer point of view, sure, but if I was just a user I'd disagree. It's not useful to users if a formula says `depends_on :ruby => \"1.9\"` and that means it _only_ works with Ruby 1.9 and not anything above, but the requirement is still met by having Ruby 2.x installed.\r\n\r\nWe can go _\"Oh but the formula says just 1.9 rather than 1.9+\"_ but the user will fairly turn around and go _\"Well if you know it wouldn't work why did you let me execute something that'd fail\"_.\r\n\r\nIf we wanted to add blocks to Ruby/Perl that hard-blocked you if you attempted to install a 1.9-exclusive formula with 2.x for example I'd agree with that, but I don't think tweaking the in-formula DSL gains users anything without that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 184
	},
	{
		"id" : 216583882,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T16:23:11Z",
		"body" : "Okay, I'm :+1: for this as is.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 184
	},
	{
		"id" : 216611030,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-03T17:53:15Z",
		"body" : "üö¢'ed. Thanks for review all!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 184
	},
	{
		"id" : 216382859,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-02T22:21:38Z",
		"body" : "How is that a Homebrew issue?\r\n\r\n> any idea how to fix this?\r\n\r\nHave you tried following the advice given in the error message (‚ÄúIf executing `pip` with `sudo`, you may want `sudo`'s `-H` flag.‚Äù)?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 185
	},
	{
		"id" : 216385923,
		"user" : {
			"login" : "kaguilarcamacho"
		},
		"created_at" : "2016-05-02T22:37:55Z",
		"body" : "Thanks for looking into this @UniqMartin . \r\n\r\nGot :   Could not find a version that satisfies the requirement jirabot (from versions: )\r\nNo matching distribution found for jirabot :/",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 185
	},
	{
		"id" : 216389184,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-02T22:55:21Z",
		"body" : "Sorry @kaguilarcamacho, but this really doesn't look like a Homebrew issue. I'm not sure what the best resource is to find help with that, but we can't help you with using `pip` or issues related to that.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 185
	},
	{
		"id" : 216464268,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T08:10:33Z",
		"body" : "> Should a separate project be devised, such as Linuxbrew and Tigerbrew?\r\n\r\nI think for now: yes. https://github.com/Homebrew/brew/pull/168 may be interesting for the beginning of work that may make this easier. Homebrew doesn't require Ruby 2.0 yet but will do soon enough it's probably worth aiming for that. \r\n\r\nI'm going to close this out not to kill conversation but just to indicate this isn't something the current Homebrew maintainers plan on working on. We'll accept PRs after https://github.com/Homebrew/brew/pull/168 taking a similar approach if they work on iOS. Thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 186
	},
	{
		"id" : 216437628,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T05:12:52Z",
		"body" : "You don't want to use `$SHELL` for this anyway: it is the user's preferred default shell (e.g. what they have set in `/etc/passwd`), not the shell that this process is currently running under. There's no standard environment variable that indicates the lowermost shell that a process is actually running under. (And there might not be one anyway, if it was `exec`'ed away.)\r\n\r\nTo detect the shell, walk up the parent PID tree (gleaned from `ps` or native Ruby code) until you encounter a known shell, and use that command name as the default shell. And we should provide a `--shell <name>` option to override it, for weird cases, or if you wanted to get the commands in a given shell's syntax for incorporating in a profile file or something for a particular shell, regardless of what shell you're calling `brew --env` from.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 187
	},
	{
		"id" : 216446601,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-05-03T06:10:24Z",
		"body" : "@apjanke\r\n\r\nSounds like a good suggestion, walking up the process tree and seeing what things smell shell-like. Here's my first stab a function to do that. The `end_with?(\"sh\")` will be replaced with a better test that'll compare the basename of argv[0] against a known list of shells (and handle that weird login shell thing where argv[0] begins with `-` (e.g. `-tcsh`)).\r\n\r\nHow exactly would one go about adding support for a new command line argument of a subcommand (is `--env` considered a subcommand?). I've tried looking at a few examples and most of them seem to be checking if ARGV includes a particular string.\r\n\r\n``` ruby\r\n  def getshell\r\n    shell_pid = Process.ppid\r\n    if \r\n      shell_command = `ps -p #{shell_pid} -o command=`.chomp\r\n      if shell_command.end_with?(\"sh\")\r\n        return shell_command\r\n      end\r\n      shell_pid = `ps -p #{shell_pid} -o ppid=`.chomp\r\n      if shell_pid = \"\"\r\n        return \"sh\"\r\n      end\r\n    end\r\n  end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 187
	},
	{
		"id" : 216447320,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T06:17:32Z",
		"body" : "> How exactly would one go about adding support for a new command line argument of a subcommand (is `--env` considered a subcommand?). I've tried looking at a few examples and most of them seem to be checking if ARGV includes a particular string.\r\n\r\nThat's basically how we do it, and then parse ARGV directly to get a value for it if you need one. It's a little Wild West out here.\r\n\r\nUnfortunately, most of our options are booleans, and we haven't standardized on how to handle options that take arguments. In fact, for the few that do, some use the style `--foo=4` and some use `--foo 4`.\r\n\r\nProbably a good time to try to regularize this before more options that take arguments crop up and we diverge even more. Let me get some sleep and I'll put in something for this tomorrow; it really could use some centralized code for it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 187
	},
	{
		"id" : 216448367,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T06:27:39Z",
		"body" : "Oh, and yes, `--env` is a subcommand even though it looks like an option. Anything that has a corresponding `cmd/--whatever.rb` file is a subcommand.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 187
	},
	{
		"id" : 216464754,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T08:13:57Z",
		"body" : "Hmm, I'm not sure what I think about this. Certainly if you just want Fish support I'd just add Fish rather than other shells you don't use. CC @mistydemeo as, I believe, a Fish user.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 187
	},
	{
		"id" : 216567139,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-05-03T15:31:45Z",
		"body" : "I use tcsh. There are a few other projects out there like opam and virtualenv that generate shell scripts intended to be `source`d or `eval`ed elsewhere that support Bourne-like shells, csh, and fish but not less common things like scsh or rc/es.\r\n\r\nIn either case since all that `--env` does is export environment variables it'd be simple enough to\r\n\r\n     # csh\r\n     brew --env | sed -e 's/export/setenv/' -e 's/=/ /'\r\n     # fish\r\n     brew --env | sed -e 's/export/set -gx/' -e 's/=/ /'\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 187
	},
	{
		"id" : 216570327,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T15:40:31Z",
		"body" : "One csh user motivated enough to work on a PR means there's probably plenty more out there among our 30,000 stargazers. I'd say let's do it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 187
	},
	{
		"id" : 217008441,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-05-04T21:26:38Z",
		"body" : "I've added the functionality to detect the shell and some logic to parse `--shell <shell-name>` and `--shell=<shell-name>` to my fork, but I haven't added tests yet. Is it appropriate to submit a pull request anyway and ask for recommendations/help about tests there?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 187
	},
	{
		"id" : 217015282,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-04T21:53:53Z",
		"body" : "Yes. If you can submit a partially complete PR, that gives us something concrete to discuss, and it's easy to iterate on code changes. Go ahead and do so. Once you have a PR submitted, you can close this issue out in favor of it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 187
	},
	{
		"id" : 217020845,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-05-04T22:18:45Z",
		"body" : "Closing issue in favor of PR https://github.com/Homebrew/brew/pull/201",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 187
	},
	{
		"id" : 216464482,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T08:12:10Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 189
	},
	{
		"id" : 216448035,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T06:24:34Z",
		"body" : "Good catch. Thank you!\r\n\r\nMerged, and thank you for your contribution to Homebrew!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 190
	},
	{
		"id" : 216533937,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T13:52:34Z",
		"body" : "LGTM if it works üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 191
	},
	{
		"id" : 216535115,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T13:55:23Z",
		"body" : "Thanks. I tested it for a couple bottle pulls on Ruby 2.0 and 1.8.7 on my OS X 10.9.5 box and it worked. Waiting to hear from @ilovezfs to see if it fixes it for him, too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 191
	},
	{
		"id" : 216546560,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-03T14:29:02Z",
		"body" : ":+1: \r\nYup, fixed. Thanks @apjanke \r\n\r\n```\r\nJosephs-MacBook-Pro:homebrew-x11 joe$ git reset --hard HEAD^\r\nHEAD is now at 962cafa scantailor 0.9.12.2\r\nJosephs-MacBook-Pro:homebrew-x11 joe$ git reset --hard HEAD^\r\nHEAD is now at ea82649 swi-prolog: migrate to core\r\nJosephs-MacBook-Pro:homebrew-x11 joe$ brew pull --bottle https://github.com/Homebrew/homebrew-x11/pull/205\r\n==> Fetching patch \r\nPatch: https://github.com/Homebrew/homebrew-x11/pull/205.patch\r\n==> Applying patch\r\nApplying: scantailor 0.9.12.2\r\n==> Patch closes issue #205\r\n==> Fetching patch (bottle commit)\r\nPatch: https://github.com/BrewTestBot/homebrew-x11/compare/homebrew:master...pr-205.patch\r\n==> Applying patch\r\nApplying: scantailor 0.9.12.2\r\nApplying: scantailor: update 0.9.12.2 bottle.\r\n==> Publishing on Bintray: scantailor 0.9.12.2\r\n{\"files\":0}\r\n==> Patch changed:\r\n scantailor.rb | 86 +++++++++++++++--------------------------------------------\r\n 1 file changed, 21 insertions(+), 65 deletions(-)\r\n==> Verifying bottles published on Bintray\r\nVerifying bottle: scantailor-0.9.12.2.mavericks.bottle.tar.gz\r\nError: can't convert Hash into String\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/http.rb:560:in `initialize'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/http.rb:560:in `open'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/http.rb:560:in `connect'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/timeout.rb:53:in `timeout'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/timeout.rb:101:in `timeout'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/http.rb:560:in `connect'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/http.rb:553:in `do_start'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/http.rb:542:in `start'\r\n/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/net/http.rb:440:in `start'\r\n/usr/local/Library/Homebrew/cmd/pull.rb:521:in `verify_bintray_published'\r\n/usr/local/Library/Homebrew/cmd/pull.rb:502:in `each'\r\n/usr/local/Library/Homebrew/cmd/pull.rb:502:in `verify_bintray_published'\r\n/usr/local/Library/Homebrew/extend/pathname.rb:328:in `cd'\r\n/usr/local/Library/Homebrew/extend/pathname.rb:328:in `chdir'\r\n/usr/local/Library/Homebrew/extend/pathname.rb:328:in `cd'\r\n/usr/local/Library/Homebrew/cmd/pull.rb:501:in `verify_bintray_published'\r\n/usr/local/Library/Homebrew/cmd/pull.rb:234:in `pull'\r\n/usr/local/Library/brew.rb:87:in `send'\r\n/usr/local/Library/brew.rb:87\r\nJosephs-MacBook-Pro:homebrew-x11 joe$ git reset --hard @{u}\r\nHEAD is now at 49eb1d4 scantailor: update 0.9.12.2 bottle.\r\nJosephs-MacBook-Pro:homebrew-x11 joe$ git reset --hard HEAD^\r\nHEAD is now at 962cafa scantailor 0.9.12.2\r\nJosephs-MacBook-Pro:homebrew-x11 joe$ git reset --hard HEAD^\r\nHEAD is now at ea82649 swi-prolog: migrate to core\r\nJosephs-MacBook-Pro:homebrew-x11 joe$ cd /usr/local\r\nJosephs-MacBook-Pro:local joe$ git reset --hard @{u}\r\nHEAD is now at 60e3737 update: improve some edge cases.\r\nJosephs-MacBook-Pro:local joe$ brew pull https://github.com/Homebrew/brew/pull/191\r\n==> Fetching patch \r\nPatch: https://github.com/Homebrew/brew/pull/191.patch\r\n==> Applying patch\r\nApplying: pull: fix polling code for Ruby 1.8.7 Net::HTTP\r\n==> Patch closes issue #191\r\n==> Patch changed:\r\n Library/Homebrew/cmd/pull.rb | 6 ++++--\r\n 1 file changed, 4 insertions(+), 2 deletions(-)\r\nJosephs-MacBook-Pro:local joe$ cd -\r\nJosephs-MacBook-Pro:homebrew-x11 joe$ git status\r\nOn branch master\r\nYour branch is behind 'origin/master' by 2 commits, and can be fast-forwarded.\r\n  (use \"git pull\" to update your local branch)\r\n\r\nnothing to commit, working directory clean\r\nJosephs-MacBook-Pro:homebrew-x11 joe$ brew pull --bottle https://github.com/Homebrew/homebrew-x11/pull/205\r\n==> Fetching patch \r\nPatch: https://github.com/Homebrew/homebrew-x11/pull/205.patch\r\n==> Applying patch\r\nApplying: scantailor 0.9.12.2\r\n==> Patch closes issue #205\r\n==> Fetching patch (bottle commit)\r\nPatch: https://github.com/BrewTestBot/homebrew-x11/compare/homebrew:master...pr-205.patch\r\n==> Applying patch\r\nApplying: scantailor 0.9.12.2\r\nApplying: scantailor: update 0.9.12.2 bottle.\r\n==> Publishing on Bintray: scantailor 0.9.12.2\r\n{\"files\":0}\r\n==> Patch changed:\r\n scantailor.rb | 86 +++++++++++++++--------------------------------------------\r\n 1 file changed, 21 insertions(+), 65 deletions(-)\r\n==> Verifying bottles published on Bintray\r\nVerifying bottle: scantailor-0.9.12.2.yosemite.bottle.tar.gz\r\n######################################################################## 100.0%\r\nJosephs-MacBook-Pro:homebrew-x11 joe$\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 191
	},
	{
		"id" : 216547130,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T14:30:14Z",
		"body" : "Merged. You should be good to go now. Sorry for the inconvenience!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 191
	},
	{
		"id" : 216547288,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-03T14:30:44Z",
		"body" : "No problem! Sorry for being a stick in the mud with my beloved 10.8.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 191
	},
	{
		"id" : 216547532,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-03T14:31:35Z",
		"body" : "Hey, no worries. When the 10.12 beta comes out in a couple months, that's gonna be me and my beloved 10.9.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 191
	},
	{
		"id" : 216540584,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-03T14:10:33Z",
		"body" : "Unfortunately this doesn't fix the main problem, which is that even if it's aborted, it will occur again just the same way as soon as you brew update. I think something as potent as `-X theirs` or `-X ours` may be required.\r\n```\r\nbash-3.2$ brew update\r\nAlready up-to-date.\r\nbash-3.2$ pwd\r\n/usr/local\r\nbash-3.2$ git cherry origin/master\r\nbash-3.2$ brew pull https://github.com/Homebrew/brew/pull/192\r\n==> Fetching patch \r\nPatch: https://github.com/Homebrew/brew/pull/192.patch\r\n==> Applying patch\r\nApplying: update.sh: abort rebase and merge.\r\n==> Patch closes issue #192\r\n==> Patch changed:\r\n Library/Homebrew/cmd/update.sh | 3 +++\r\n 1 file changed, 3 insertions(+)\r\nbash-3.2$ git cherry origin/master\r\n+ 47249ccb296b0cd4b857122d95e1bae99a6eb584\r\nbash-3.2$ cd /usr/local/Library/Taps/homebrew/homebrew-core/\r\nbash-3.2$ git reset --hard 08ecb75f9ef7ff419155ae4d7d805d04405cdff8\r\nHEAD is now at 08ecb75 PR template: use HR to separate checklist from body\r\nbash-3.2$ perl -p -i -e 's/8506/9617/' Formula/dwarf.rb\r\nbash-3.2$ git diff\r\ndiff --git a/Formula/dwarf.rb b/Formula/dwarf.rb\r\nindex 2189e9c..ed1b595 100644\r\n--- a/Formula/dwarf.rb\r\n+++ b/Formula/dwarf.rb\r\n@@ -2,7 +2,7 @@ class Dwarf < Formula\r\n   desc \"Object file manipulation tool\"\r\n   homepage \"https://code.google.com/p/dwarf-ng/\"\r\n   url \"https://dwarf-ng.googlecode.com/files/dwarf-0.3.0.tar.gz\"\r\n-  sha256 \"85062d0d3e8aa31374dd085cb79ce02c2b8737e9b143f640a262556233715763\"\r\n+  sha256 \"96172d0d3e8aa31374dd085cb79ce02c2b8737e9b143f640a262556233715763\"\r\n \r\n   depends_on \"readline\"\r\n \r\nbash-3.2$ git commit -am \"foo\"\r\n[master bee6ee6] foo\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\nbash-3.2$ brew update \r\nFailed to merge in the changes.\r\nPatch failed at 0001 foo\r\nThe copy of the patch that failed is found in:\r\n   /usr/local/Library/Taps/homebrew/homebrew-core/.git/rebase-apply/patch\r\n\r\nWhen you have resolved this problem, run \"git rebase --continue\".\r\nIf you prefer to skip this patch, run \"git rebase --skip\" instead.\r\nTo check out the original branch and stop rebasing, run \"git rebase --abort\".\r\n\r\nUpdated 1 tap (homebrew/core).\r\n==> Updated Formulae\r\nbind                              dwarf                             jenkins                         \r\nbash-3.2$ git status\r\nrebase in progress; onto b52e7ca\r\nYou are currently rebasing branch 'master' on 'b52e7ca'.\r\n  (fix conflicts and then run \"git rebase --continue\")\r\n  (use \"git rebase --skip\" to skip this patch)\r\n  (use \"git rebase --abort\" to check out the original branch)\r\n\r\nUnmerged paths:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n  (use \"git add <file>...\" to mark resolution)\r\n\r\n\tboth modified:      Formula/dwarf.rb\r\n\r\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\r\nbash-3.2$ brew update\r\nFailed to merge in the changes.\r\nPatch failed at 0001 foo\r\nThe copy of the patch that failed is found in:\r\n   /usr/local/Library/Taps/homebrew/homebrew-core/.git/rebase-apply/patch\r\n\r\nWhen you have resolved this problem, run \"git rebase --continue\".\r\nIf you prefer to skip this patch, run \"git rebase --skip\" instead.\r\nTo check out the original branch and stop rebasing, run \"git rebase --abort\".\r\n\r\nTo restore the stashed changes to /usr/local/Library/Taps/homebrew/homebrew-core run:\r\n  'cd /usr/local/Library/Taps/homebrew/homebrew-core && git stash pop'\r\nUpdated 1 tap (homebrew/core).\r\n==> Updated Formulae\r\nbind                              dwarf                             jenkins                         \r\nbash-3.2$ git status\r\nrebase in progress; onto b52e7ca\r\nYou are currently rebasing branch 'master' on 'b52e7ca'.\r\n  (fix conflicts and then run \"git rebase --continue\")\r\n  (use \"git rebase --skip\" to skip this patch)\r\n  (use \"git rebase --abort\" to check out the original branch)\r\n\r\nUnmerged paths:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n  (use \"git add <file>...\" to mark resolution)\r\n\r\n\tboth modified:      Formula/dwarf.rb\r\n\r\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\r\nbash-3.2$ cd /usr/local\r\nbash-3.2$ git cherry origin/master\r\n+ 47249ccb296b0cd4b857122d95e1bae99a6eb584\r\nbash-3.2$ brew update\r\nFailed to merge in the changes.\r\nPatch failed at 0001 foo\r\nThe copy of the patch that failed is found in:\r\n   /usr/local/Library/Taps/homebrew/homebrew-core/.git/rebase-apply/patch\r\n\r\nWhen you have resolved this problem, run \"git rebase --continue\".\r\nIf you prefer to skip this patch, run \"git rebase --skip\" instead.\r\nTo check out the original branch and stop rebasing, run \"git rebase --abort\".\r\n\r\nTo restore the stashed changes to /usr/local/Library/Taps/homebrew/homebrew-core run:\r\n  'cd /usr/local/Library/Taps/homebrew/homebrew-core && git stash pop'\r\nUpdated 1 tap (homebrew/core).\r\n==> Updated Formulae\r\nbind                              dwarf                             jenkins                         \r\nbash-3.2$\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 192
	},
	{
		"id" : 216541663,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:14:15Z",
		"body" : "That looks like a legitimate failure, though, that you need to resolve a merge conflict?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 192
	},
	{
		"id" : 216542021,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:15:33Z",
		"body" : "@ilovezfs If this improves any situations for you: any objections to merging?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 192
	},
	{
		"id" : 216542186,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-03T14:16:09Z",
		"body" : "@mikemcquaid Nope, it's a legitimate conflict but resolved seamlessly  without issue under the old strategy pre-#123 as the test script I pasted there shows.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 192
	},
	{
		"id" : 216542849,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-03T14:18:24Z",
		"body" : "I have no objections to merging this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 192
	},
	{
		"id" : 216544412,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-03T14:23:02Z",
		"body" : "@mikemcquaid only issue with this PR I see is that the aborts are in reverse order in the two different places, but I think that probably won't matter ever (rarely?).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 192
	},
	{
		"id" : 216546369,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:28:29Z",
		"body" : "Yeh, the ordering shouldn't matter there; if you've got merge and rebase conflicts you have other problems. It's annoying that it autohandled this before; perhaps there's options we can provide to rebase to better handle this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 192
	},
	{
		"id" : 216550141,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-03T14:40:11Z",
		"body" : "@mikemcquaid Yup, there are. That's what I was referring to above when I mentioned `-X theirs` and `-X ours`. Since we generally want to defer to what brew update is bringing in and not what's lingering locally, `-X theirs` is probably preferable, on balance.\r\n ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 192
	},
	{
		"id" : 216552359,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T14:47:40Z",
		"body" : "@ilovezfs üÜí. Open to making a PR to see if you can reproduce the nice, `--merge` behaviour?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 192
	},
	{
		"id" : 216552600,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-03T14:48:32Z",
		"body" : "Sure, no problem.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 192
	},
	{
		"id" : 216576980,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-03T16:01:22Z",
		"body" : "@brian-eng Can you paste the output of `brew install -v iperf3 --debug`? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 193
	},
	{
		"id" : 216583580,
		"user" : {
			"login" : "brian-eng"
		},
		"created_at" : "2016-05-03T16:22:03Z",
		"body" : "@mikemcquaid Here's the output with debug flag added.\r\n\r\n```\r\nadmin$ brew install -v iperf3 --debug\r\n/usr/local/Library/brew.rb (Formulary::FormulaLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/iperf3.rb\r\nError: Connection refused - connect(2)\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/net/http.rb:878:in `initialize'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/net/http.rb:878:in `open'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/net/http.rb:878:in `block in connect'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/timeout.rb:52:in `timeout'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/net/http.rb:877:in `connect'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/net/http.rb:862:in `do_start'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/net/http.rb:851:in `start'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/open-uri.rb:313:in `open_http'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/open-uri.rb:709:in `buffer_open'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/open-uri.rb:210:in `block in open_loop'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/open-uri.rb:208:in `catch'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/open-uri.rb:208:in `open_loop'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/open-uri.rb:149:in `open_uri'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/open-uri.rb:689:in `open'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/open-uri.rb:30:in `open'\r\n/usr/local/Library/Homebrew/utils.rb:648:in `open'\r\n/usr/local/Library/Homebrew/utils.rb:739:in `private_repo?'\r\n/usr/local/Library/Homebrew/tap.rb:493:in `read_or_set_private_config'\r\n/usr/local/Library/Homebrew/tap.rb:156:in `private?'\r\n/usr/local/Library/Homebrew/formula_installer.rb:205:in `install'\r\n/usr/local/Library/Homebrew/cmd/install.rb:270:in `install_formula'\r\n/usr/local/Library/Homebrew/cmd/install.rb:144:in `block in install'\r\n/usr/local/Library/Homebrew/cmd/install.rb:144:in `each'\r\n/usr/local/Library/Homebrew/cmd/install.rb:144:in `install'\r\n/usr/local/Library/brew.rb:87:in `<main>'\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 193
	},
	{
		"id" : 217396001,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T09:27:27Z",
		"body" : "@xu-cheng Thoughts on what to do here? It seems the `private_repo?` stuff doesn't support proxies. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 193
	},
	{
		"id" : 217629308,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-07T11:08:12Z",
		"body" : "I think this is the problem that Github API module doesn't support proxies well, which has always been a known case. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 193
	},
	{
		"id" : 217742510,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-08T19:56:05Z",
		"body" : "Unfortunately as @xu-cheng has said @brian-eng it's an issue with your proxy usage. You may want to set `HOMEBREW_NO_GITHUB_API` in your environment.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 193
	},
	{
		"id" : 217894342,
		"user" : {
			"login" : "brian-eng"
		},
		"created_at" : "2016-05-09T15:15:59Z",
		"body" : "Setting that variable allowed Homebrew to install without any errors, installing bottles works now too.\r\n\r\nAny chance that this is the issue: https://www.jethrocarr.com/2014/08/14/ruby-nethttp-proxies/",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 193
	},
	{
		"id" : 217895318,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-09T15:19:03Z",
		"body" : "@brian-eng It could be but I think it's a little deeper than that, unfortunately.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 193
	},
	{
		"id" : 217922404,
		"user" : {
			"login" : "brian-eng"
		},
		"created_at" : "2016-05-09T16:54:52Z",
		"body" : "Bummer.\r\n\r\nSince I've got a workaround now, I'll leave the decision to close this issue up to you guys.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 193
	},
	{
		"id" : 221257840,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-24T12:47:46Z",
		"body" : "Closing this in favor of #264 where discussion on resolving the proxy issues is currently ongoing, see particularly https://github.com/Homebrew/brew/issues/264#issuecomment-220852772 and below. Any help with getting this implemented is much appreciated!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 193
	},
	{
		"id" : 247035980,
		"user" : {
			"login" : "tc0nn"
		},
		"created_at" : "2016-09-14T14:42:59Z",
		"body" : "Solved by owning /usr/local/Library in my case. I do use a proxy also.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 193
	},
	{
		"id" : 217125856,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-05T11:04:58Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 194
	},
	{
		"id" : 217665421,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-07T19:59:31Z",
		"body" : "Pulled with the style nit fixed. Happy to have further debate on the `which(@language.to_s)` style syntax but this is an improvement over the status quo at least.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 194
	},
	{
		"id" : 216946089,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-04T17:49:17Z",
		"body" : "If that's not asking too much, I'd like to read a (short) high level overview of how this is supposed to work and to what extent these things will be automatic or require user intervention. I'd like to know that before I start commenting on the implementation. (Note that I'm fine waiting for that overview, as this code is still work in progress‚Äîand maybe the exact idea how this is supposed to work also isn't finalized yet.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 195
	},
	{
		"id" : 218739664,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-12T12:16:36Z",
		"body" : "> @xu-cheng Can we pull this into PR comments? It's hard to \"find\" these comments now. Assuming there has been a git --version check before the initial opt symlink is set I think that code is fine: a symlink there means we know it's been setup correctly. I also think it's worth worrying about Git issues in a future PR; I'm still not convinced using install-vendor is necessarily the best approach for Git when we have bottles and the ability to install using the formula directly.\r\n\r\nI pull the comment here for better visibility. \r\n\r\n>  Assuming there has been a git --version check before the initial opt symlink is set I think that code is fine: a symlink there means we know it's been setup correctly. \r\n\r\nBut we don't know whether the git is outdated, especially for security updates.\r\n\r\n> I also think it's worth worrying about Git issues in a future PR;\r\n\r\nUnfortunately, we have to make sure `install-vendor` works for git now, because we won't be able to largely change the workflow of `install-vendor` in the future.\r\n\r\n> I'm still not convinced using install-vendor is necessarily the best approach for Git when we have bottles and the ability to install using the formula directly.\r\n\r\nIf you have done some extensive test, you will find there are several obstacles:\r\n* The first one is the bootstrap problem. And `brew install url` has many its own problem.\r\n* `Tap#private?` which will be called by `brew install` requires git. We probably need to fix it in another PR.\r\n* The use experience from Linuxbrew has shown me that using formula installation as homebrew's runtime deps is quiet fragile.\r\n\r\nAnd vendor git can solve all of them in quite simple and robust way.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 195
	},
	{
		"id" : 218747803,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-12T12:52:58Z",
		"body" : "> I pull the comment here for better visibility.\r\n\r\nThanks!\r\n\r\n> But we don't know whether the git is outdated, especially for security updates.\r\n\r\nWe should continue to use the old Git until the new one is working. This is the same as we do with Homebrew's security updates and linking.\r\n\r\n> Unfortunately, we have to make sure install-vendor works for git now, because we won't be able to largely change the workflow of install-vendor in the future.\r\n\r\nWhy not?\r\n\r\n> The first one is the bootstrap problem. And brew install url has many its own problem.\r\n\r\nCan you elaborate on these problems?\r\n\r\n> Tap#private? which will be called by brew install requires git. We probably need to fix it in another PR.\r\n\r\nYeh, that seems like another PR that can go in before this one.\r\n\r\n> The use experience from Linuxbrew has shown me that using formula installation as homebrew's runtime deps is quiet fragile.\r\n\r\nI don't know if this applies to Homebrew. Also, I'd rather improve this situation rather than rely on another script which will have its own edge cases, issues and bugs. We have to use Bash to install Ruby so we can run most of Homebrew; this does not apply to Git or even Curl which could both be installed using pure Ruby and HTTP.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 195
	},
	{
		"id" : 218751675,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-12T13:09:25Z",
		"body" : "> We should continue to use the old Git until the new one is working. This is the same as we do with Homebrew's security updates and linking.\r\n\r\nThe reality is with your proposed way is we won't be able to know whether the new one is working. It may work for `git --version`, but fail for another issues. And git will never know there is a revision here. As for security, it is extremely bad idea to use an vulnerable version when there is a fix. Not mention, your propose solution would easily allow an attacker to introduce downgrade attack as attacking vector.  \r\n\r\n> Why not?\r\n\r\nWe cannot make symlink created by scripts for now, and fallback to control by git in the later. It will introduce  git conflict.\r\n\r\n> Can you elaborate on these problems?\r\n\r\nEven without mentioning the possible dep issues, installing by url will tag the tap to `nil`. And it could cause many problem in formula resolution process and stopping bottle to be fetched.\r\n\r\n> I don't know if this applies to Homebrew. Also, I'd rather improve this situation rather than rely on another script which will have its own edge cases, issues and bugs. We have to use Bash to install Ruby so we can run most of Homebrew; this does not apply to Git or even Curl which could both be installed using pure Ruby and HTTP.\r\n\r\nThese problems are all applied to Homebrew. Linuxbrew or tigerbrew just happens to revel the problem more easily. Using formulae as homebrew's runtime deps will cause nightmare for `brew reinstall/upgrade/unlink`. Trust me, decoupling the deps issue is the right way and most simple and robust solution.\r\n\r\n> even Curl which could both be installed using pure Ruby and HTTP.\r\n\r\nBut how do you install ruby? You will need curl. Again, the bootstrap problem .",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 195
	},
	{
		"id" : 218753072,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-12T13:15:05Z",
		"body" : "> The reality is with your proposed way is we won't be able to know whether the new one is working. It may work for git --version, but fail for another issues. And git will never know there is a revision here. As for security, it is extremely bad idea to use an vulnerable version when there is a fix. Not mention, your propose solution would easily allow an attacker to introduce downgrade attack as attacking vector.\r\n\r\nI think you've misunderstood my solution: I'm saying we should always upgrade unless the upgrade fails.\r\n\r\n> We cannot make symlink created by scripts for now, and fallback to control by git in the later. It will introduce git conflict.\r\n\r\nPlease elaborate on this (and length); I don't understand.\r\n\r\n> Even without mentioning the possible dep issues, installing by url will tag the tap to nil. And it could cause many problem in formula resolution process and stopping bottle to be fetched.\r\n\r\nIt could cause problems but does it? We could easily fix that installing by URL issue if we detect we're installing from a tap's URL.\r\n\r\n> These problems are all applied to Homebrew. Linuxbrew or tigerbrew just happens to revel the problem more easily. Using formulae as homebrew's runtime deps will cause nightmare for brew reinstall/upgrade/unlink. Trust me, decoupling the deps issue is the right way and most simple and robust solution.\r\n\r\nWell we've been doing this for earlier versions of Homebrew for a long time with `curl` and `git` and not experienced problems. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 195
	},
	{
		"id" : 218753750,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-12T13:17:35Z",
		"body" : "> But how do you install ruby? You will need curl. Again, the bootstrap problem .\r\n\r\nSure; I'm arguing this is why a `install-vendor` doesn't need to install Curl so we agree. My point was that if you really needed to you can do HTTP transfers using Ruby itself.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 195
	},
	{
		"id" : 218755609,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-12T13:24:16Z",
		"body" : "> I think you've misunderstood my solution: I'm saying we should always upgrade unless the upgrade fails.\r\n\r\nMy major problem is how do you know there is a git update. If you don't store such information in symlink.\r\n\r\n> Please elaborate on this (and length); I don't understand.\r\n\r\nBasically, there are two proposed solutions here.\r\n* One is my current PR, i.e. the symlink is maintained by git repo. For every update, we update the symlink in git commit.\r\n* The next is yours. i.e. the symlink should be created by `install-vendor` based on the outcome whether it is success. i.e. the symlink is ignored by git.\r\n\r\nWe could move my solution to yours. But not in reverse, because it will cause git conflict in update.\r\n\r\n> Well we've been doing this for earlier versions of Homebrew for a long time with curl and git and not experienced problems.\r\n\r\nTry to upgrade or reinstall them. This is what you got https://gist.github.com/anonymous/158e41f6ca542c348796ae380da56a0f\r\n\r\nThe current solution is to manually do ` brew fetch; brew install`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 195
	},
	{
		"id" : 218756957,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-12T13:28:57Z",
		"body" : "> My major problem is how do you know there is a git update. If you don't store such information in symlink.\r\n\r\nHave a `vendor/git-version` file.\r\n\r\n> Try to upgrade or reinstall them. This is what you got https://gist.github.com/anonymous/158e41f6ca542c348796ae380da56a0f\r\n\r\nThat can be improved by not using HTTPS and relying on checksum security instead. We can also quieten some of those warnings. Doesn't seem insurmountable and doesn't apply to `git`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 195
	},
	{
		"id" : 218759295,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-12T13:37:14Z",
		"body" : "> Have a vendor/git-version file.\r\n\r\nThe next question is how to check the git-version file. Supporting we have the logic mentioned in https://github.com/Homebrew/brew/pull/195#discussion_r63005898 in `ENV/scm/git`.\r\n\r\n> That can be improved by not using HTTPS and relying on checksum security instead. We can also quieten some of those warnings. \r\n\r\nThere are certainly some hack we can use to mitigate the issue. But why not using a simple and robust vendor approach? It can solve all of them and doesn't require human interaction in edge cases. \r\n\r\n> Doesn't seem insurmountable and doesn't apply to git.\r\n\r\nIt applies to git, if there is openssl update. And git depends on curl on old system. Basically, we have git curl and openssl formulae depend on each other. A reinstall or upgrade on any of them requires manually fix the bootstrap problem. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 195
	},
	{
		"id" : 218767784,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-12T14:06:48Z",
		"body" : "> The next question is how to check the git-version file. Supporting we have the logic mentioned in #195 (comment) in ENV/scm/git.\r\n\r\nI don't think we need to. I think we just use `opt` and then we install the latest versions at `update` time or something?\r\n\r\n> It applies to git, if there is openssl update. And git depends on curl on old system. Basically, we have git curl and openssl formulae depend on each other. A reinstall or upgrade on any of them requires manually fix the bootstrap problem.\r\n\r\n> There are certainly some hack we can use to mitigate the issue. But why not using a simple and robust vendor approach? It can solve all of them and doesn't require human interaction in edge cases.\r\n\r\nI think this is a problem that we can solve (but don't need to for this PR) and I'm not yet convinced that the vendor approach is more simple or robust. It's not clear to me how I build a new vendor version, how I upload it, how I distribute it or test it. We know how to do this for formulae and `git` is a formula that updates pretty regularly whereas `ruby` is something we cannot use a dedicated formula for this and will not be updated more often than OS X releases.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 195
	},
	{
		"id" : 218774336,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-12T14:28:01Z",
		"body" : "> I don't think we need to. I think we just use opt and then we install the latest versions at update time or something?\r\n\r\nThat's my whole point. It will never be checked. Noted, there are not much difference between `brew update` and `Utils.git_available?`.\r\n\r\n> I think this is a problem that we can solve (but don't need to for this PR)\r\n\r\nNo, you cannot. There are hard deps on git for old systems, which it's enough to make `brew install url` unappliable.\r\n\r\n> It's not clear to me how I build a new vendor version, how I upload it, how I distribute it or test it. We know how to do this for formulae \r\n\r\nYou can read readme at https://github.com/xu-cheng/homebrew-portable for how. Short story is it is almost identical to normal formula. I can add more document if it's requested. But please not just reject something because it is new to you.\r\n\r\n> and `git` is a formula that updates pretty regularly\r\n\r\nFor vendor git, we don't need to follow the latest git. We can only update if it's required or follow apple's git.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 195
	},
	{
		"id" : 218779110,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-12T14:43:04Z",
		"body" : "> That's my whole point. It will never be checked. Noted, there are not much difference between brew update and Utils.git_available?.\r\n\r\nIt could be, though, there's no technical reason preventing it.\r\n\r\n> No, you cannot. There are hard deps on git for old systems, which it's enough to make brew install url unappliable.\r\n\r\n`brew install` from a URL does not require Git so I don't know what your point is here.\r\n\r\n> You can read readme at https://github.com/xu-cheng/homebrew-portable for how. Short story is it is almost identical to normal formula. I can add more document if it's requested. \r\n\r\nThat's completely different to the process of how we build, upload and release to users a new version of a formula.\r\n\r\n> But please not just reject something because it is new to you.\r\n\r\nI'm not and I don't really appreciate the insinuation. It's not clear you've thought through all the edge-cases of what will happen if e.g. the installation fails. Old code has known bugs and edge cases. New code will have bugs and edge cases (perhaps far fewer, perhaps almost none) but they are currently unknown, undocumented and only the work of a single maintainer. This is concerning for something we're going to introduce as a mandatory requirement to all Homebrew users on old versions.\r\n\r\n> For vendor git, we don't need to follow the latest git. We can only update if it's required or follow apple's git.\r\n\r\nBetween Git, OpenSSL and Curl there's a lot more regular security updates to be done than Ruby 2.0.x.\r\n\r\nI've said before: I don't think this PR needs to be blocked on figuring out how we're going to handle Git and/or Curl and I don't think we need to talk about them here as there's more discussion needed about the merits of different approaches.\r\n\r\n-- \r\n\r\nAnyway, what does need to be done before this PR is merged (or at least before it is enabled by default rather than guarded behind an environment option temporarily) is the following things:\r\n\r\n1. Allow Homebrew users to be able to run `brew update` and then go without internet and still have a `ruby` that works.\r\n2. Ensure that the 32-bit Ruby still works on a 64-bit 10.8 (ideally 64-bit 10.11)\r\n3. Provide a script and ideally a CI job so any Homebrew maintainer can upgrade this Ruby if there's an urgent security vulnerability and you're unavailable (and I think this means it'd be sensible to rely on existing infrastructure such as Bintray, Jenkins and a Homebrew organisation repository but that's up-to-you)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 195
	},
	{
		"id" : 218787905,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-12T15:10:56Z",
		"body" : "> It could be, though, there's no technical reason preventing it.\r\n\r\nBut we need to figure it out before merging this, as I said that we won't be able to change it in the future\r\n\r\n> `brew install` from a URL does not require Git so I don't know what your point is here.\r\n\r\nTo install Homebrew core tap, you will need git. And I mean you cannot use `brew install url` as approach to bootstrap Homebrew on old system.\r\n\r\n> That's completely different to the process of how we build, upload and release to users a new version of a formula.\r\n\r\nIs it? The only different is that we don't need to bottle them but just package the build binary.\r\n\r\n> I'm not and I don't really appreciate the insinuation. It's not clear you've thought through all the edge-cases of what will happen if e.g. the installation fails. Old code has known bugs and edge cases. New code will have bugs and edge cases (perhaps far fewer, perhaps almost none) but they are currently unknown, undocumented and only the work of a single maintainer. This is concerning for something we're going to introduce as a mandatory requirement to all Homebrew users on old versions.\r\n\r\nI will apologize if there is any insinuation. Please you do need to keep a open mind on new solution. Because it indeed solved certain issue that old system cannot. Let's please not take away from technical reality.\r\n\r\n> Between Git, OpenSSL and Curl there's a lot more regular security updates to be done than Ruby 2.0.x.\r\n\r\nOpenSSL's update is appiled to ruby as well. I don't see there is too much difference.\r\n\r\n> I've said before: I don't think this PR needs to be blocked on figuring out how we're going to handle Git and/or Curl and I don't think we need to talk about them here as there's more discussion needed about the merits of different approaches.\r\n\r\nAs I said, we need to figure out how to manage the opt symlink as it cannot be changed in the future.\r\n\r\n> Allow Homebrew users to be able to run `brew update` and then go without internet and still have a `ruby` that works.\r\n\r\nI'm open to solution, but it need be discussed thoroughly in this PR.\r\n\r\n> Ensure that the 32-bit Ruby still works on a 64-bit 10.8 (ideally 64-bit 10.11)\r\n\r\nThis is already done. You can test this PR now with the vendor ruby.\r\n\r\n> Provide a script and ideally a CI job so any Homebrew maintainer can upgrade this Ruby if there's an urgent security vulnerability and you're unavailable (and I think this means it'd be sensible to rely on existing infrastructure such as Bintray, Jenkins and a Homebrew organisation repository but that's up-to-you)\r\n\r\nWe could add CI job if we add Leopard VM. This final binary will definitely go to bintary, so it is the repo. Current build is only for test purpose only.\r\n\r\nAnyway, it's late on my TZ. I will let other maintainers to join the discussion.\r\n ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 195
	},
	{
		"id" : 218791420,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-12T15:22:17Z",
		"body" : "> But we need to figure it out before merging this, as I said that we won't be able to change it in the future\r\n\r\nSure, I think that's revealing a limitation in the current approach that would be solved with a `vendor/git-version` approach, as mentioned before.\r\n\r\n> To install Homebrew core tap, you will need git. And I mean you cannot use brew install url as approach to bootstrap Homebrew on old system.\r\n\r\nWe _can_, you just don't think we _should_. I think improving that flow would solve a lot of problems. Regardless, that doesn't need to be decided in this PR: we just need to decide how to use the symlink.\r\n\r\n> Is it? The only different is that we don't need to bottle them but just package the build binary.\r\n\r\nThat's pretty different, to me. It's much more like how we used to do packaging before CI (which was a pain).\r\n\r\n> I will apologize if there is any insinuation. Please you do need to keep a open mind on new solution. Because it indeed solved certain issue that old system cannot. Let's please not take away from technical reality.\r\n\r\nI'm definitely keeping an open mind. I'm üëç on this general solution. The only things I think need tweaked are mentioned above but it's 95% of the way there already.\r\n\r\n> I will apologize if there is any insinuation.\r\n\r\nThanks üôá \r\n\r\n> Please you do need to keep a open mind on new solution. Because it indeed solved certain issue that old system cannot. Let's please not take away from technical reality.\r\n\r\nI think this does solve some problems and introduces some new ones but, as said, it only needs a few tweaks to address them.\r\n\r\n> This is already done. You can test this PR now with the vendor ruby.\r\n\r\nOk, üÜí, I wasn't sure.\r\n\r\n> We could add CI job if we add Leopard VM. This final binary will definitely go to bintary, so it is the repo. Current build is only for test purpose only.\r\n\r\nYeh, we can add a 10.5 VM. I'd be interested if it's possible to build this on a new version in 32-bit mode and have it work on an old version, though. With or without CI that would make uploading/testing new versions much easier.\r\n\r\n> Anyway, it's late on my TZ. I will let other maintainers to join the discussion.\r\n\r\nüëç Thanks for all your hard work here @xu-cheng. I do appreciate it, I'm just trying to make sure we end up with a robust, maintainable, understood solution.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 195
	},
	{
		"id" : 216714627,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-04T01:14:18Z",
		"body" : "I think this is useful information worth including in `brew info`.\r\n\r\n> I'm using ISO 8601 date format here because it's most widely accepted across the world (hopefully), but this is debatable.\r\n\r\nThanks! Obviously a bikeshedding topic, but I hope most technically inclined folks will agree that this is the only sane (and reasonably unambiguous) date format. I certainly do!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 196
	},
	{
		"id" : 217083545,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-05T06:17:42Z",
		"body" : "> Thanks! Obviously a bikeshedding topic, but I hope most technically inclined folks will agree that this is the only sane (and reasonably unambiguous) date format. I certainly do!\r\n\r\nOne more item for the Style Guide. Team 8601 for life!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 196
	},
	{
		"id" : 217125813,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-05T11:04:37Z",
		"body" : "Given this is producing no more lines of output than before (my initial objection) I'm üÜí with it üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 196
	},
	{
		"id" : 217291482,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-05T21:56:27Z",
		"body" : "Merged in 1fa48234e5301f018dc93e62bc7e03d71729b296. Thank you for another contribution to Homebrew, @zmwangx! :tada:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 196
	},
	{
		"id" : 216968197,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-04T19:03:16Z",
		"body" : "> This doesn't address the related issue that `MacOS::Xcode.version` is a string, not a `Version`, so doing `<` or `>=` comparisons sorts lexicographically, and may give the wrong answer for the semantics of version strings.\r\n\r\nActually, this isn't even an issue at the moment, because this function is guaranteed to return a string that has only single-digit version components, so lexicographic and version number comparison should yield identical results. (Our current `MacOS::Xcode.version` will simply fail once there's an Xcode 10.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 197
	},
	{
		"id" : 216982252,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-04T19:53:16Z",
		"body" : "> ...so lexicographic and version number comparison should yield identical results\r\n\r\nExcellent. This is guaranteed simply because no existing Xcode release has had a major, minor, or patch version component larger than 9, right?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 197
	},
	{
		"id" : 216983201,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-04T19:56:51Z",
		"body" : "> This is guaranteed simply because no existing Xcode release has had a major, minor, or patch version component larger than 9, right?\r\n\r\nAnd because the regular expression we use to extract the Xcode version number doesn't allow for multi-digit version components, probably because this hasn't been necessary yet. üòÄ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 197
	},
	{
		"id" : 216984720,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-04T20:02:40Z",
		"body" : "Cool.\r\n\r\nI'm kind of itching to change `MacOS::Xcode.version` to use a `Version` object, and give `Version` a representation for \"N/A\" to eliminate this whole nil check. But it's not a pressing need, so... maybe some day.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 197
	},
	{
		"id" : 216997274,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-04T20:45:18Z",
		"body" : ":+1: this version is more readable too",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 198
	},
	{
		"id" : 217124382,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-05T10:54:40Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 198
	},
	{
		"id" : 216995772,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-04T20:39:40Z",
		"body" : "Hasn't been updated on CI yet, no. Will fix that as soon as the CI queue finishes up. You need to update [this line](https://github.com/UniqMartin/brew/blob/xcode-7.3.1/Library/Homebrew/os/mac/xcode.rb#L175) as well :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 199
	},
	{
		"id" : 216997775,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-04T20:47:16Z",
		"body" : "> You need to update [this line](https://github.com/UniqMartin/brew/blob/xcode-7.3.1/Library/Homebrew/os/mac/xcode.rb#L175) as well :)\r\n\r\nNo, I don't. üòâ But thanks for the careful review! There's no new version of the CLT (yet?), thus its Clang version still matches the one from Xcode 7.3. If you have both Xcode and CLT installed, compare:\r\n\r\n```\r\n$ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang --version\r\nApple LLVM version 7.3.0 (clang-703.0.31)\r\nTarget: x86_64-apple-darwin15.4.0\r\nThread model: posix\r\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\r\n\r\n$ /Library/Developer/CommandLineTools/usr/bin/clang --version\r\nApple LLVM version 7.3.0 (clang-703.0.29)\r\nTarget: x86_64-apple-darwin15.4.0\r\nThread model: posix\r\nInstalledDir: /Library/Developer/CommandLineTools/usr/bin\r\n```\r\n\r\n(Sadly, this means CLT-only users are also stuck with an older unpatched Git version.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 199
	},
	{
		"id" : 216999391,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-04T20:53:17Z",
		"body" : "> There's no new version of the CLT (yet?)\r\n\r\nThere is, Apple just haven't pushed it to MAS for some reason. This happened last time but it was up within a few hours.\r\n\r\n```\r\n~> /Library/Developer/CommandLineTools/usr/bin/clang --version\r\nApple LLVM version 7.3.0 (clang-703.0.31)\r\nTarget: x86_64-apple-darwin15.5.0\r\nThread model: posix\r\nInstalledDir: /Library/Developer/CommandLineTools/usr/bin\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 199
	},
	{
		"id" : 217003859,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-04T21:10:29Z",
		"body" : "> There is, Apple just haven't pushed it to MAS for some reason.\r\n\r\nStrange. Definitely hasn't appeared in my MAS yet. Maybe they withheld it intentionally?\r\n\r\n> ```\r\n> Target: x86_64-apple-darwin15.5.0\r\n> ```\r\n\r\nYou seem to be on the 10.11.5 Beta (I'm on 10.11.4). Could that be why you have it and I don't?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 199
	},
	{
		"id" : 217005208,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-04T21:16:04Z",
		"body" : "> Maybe they withheld it intentionally?\r\n\r\nWouldn't think so. This happened last time so perhaps it's just the \"new normal\".\r\n\r\n> Could that be why you have it and I don't?\r\n\r\nI don't use MAS for Xcode because it blows for large downloads. I went and fetched it manually from Apple's \"Additional Downloads\" and noticed the CLT whilst I was there.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 199
	},
	{
		"id" : 217007149,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-04T21:23:45Z",
		"body" : "> I don't use MAS for Xcode because it blows for large downloads.\r\n\r\nGetting a bit off-topic, but it actually works fine (at least for me). The only issue is that because it uses a delta, it has to validate what is on your system and then applying the delta usually takes much longer than the actual download (which was only 200 MB for this update). Because the MAS UI is horrible, there's hardly any indication of what is going on, so it can often appear stuck ‚Ä¶ but it only requires patience.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 199
	},
	{
		"id" : 217042054,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-04T23:55:21Z",
		"body" : "Updated the main El Cap CI. Will do the backup later today, but will be enough for this PR to pass CI. May wish to wait to see what the CLT situation is given what happened last time but up to you.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 199
	},
	{
		"id" : 217061116,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-05T02:34:54Z",
		"body" : "> May wish to wait to see what the CLT situation is given what happened last time but up to you.\r\n\r\nUpdated as suggested by you now that Apple has graced me with not only one, but two CLT updates:\r\n\r\n![MAS CLT Weirdness](https://cloud.githubusercontent.com/assets/11892150/15034842/707c9d9c-127a-11e6-9319-62b2085db4ac.png)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 199
	},
	{
		"id" : 217128258,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-05T11:22:34Z",
		"body" : "Updated all the machines.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 199
	},
	{
		"id" : 217181239,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-05T15:12:32Z",
		"body" : "Thanks Mike! Did the main one last night but it took a while to finish installing so I went to üò¥ after, heh.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 199
	},
	{
		"id" : 217286299,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-05T21:32:33Z",
		"body" : "Thank you both!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 199
	},
	{
		"id" : 217009382,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-04T21:29:07Z",
		"body" : "Do you literally mean `/usr/local/bin`? If so, placing executables with such a short name is likely to be problematic. Or do you talk about abbreviations you can use with `brew`, e.g. `brew i` would mean `brew install`. If that's what you are looking for, there's already a solution: https://github.com/Homebrew/homebrew-aliases",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 200
	},
	{
		"id" : 217016163,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-04T21:57:38Z",
		"body" : "Yeah, I think for either of these, per-user aliases configured in the shell (for standalone commands) or `brew alias` (for `brew` subcommands) is the way to go, not something global like adding to `/usr/local/bin` or making subcommand aliases for everyone.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 200
	},
	{
		"id" : 217591294,
		"user" : {
			"login" : "AndrewSB"
		},
		"created_at" : "2016-05-07T00:12:14Z",
		"body" : "https://github.com/Homebrew/homebrew-aliases is what I was talking about. Thanks @UniqMartin, wasn't able to find that, satisfies my need :)\r\n\r\n@apjanke why not add subcommand aliases (like `brew i` for `brew install`) for everyone? I feel as if it's a common pattern for package managers now?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 200
	},
	{
		"id" : 217628091,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-07T10:43:16Z",
		"body" : "@AndrewSB We may consider that in future but not now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 200
	},
	{
		"id" : 217042985,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-05-05T00:01:25Z",
		"body" : "I used the construction\r\n\r\n    for x in 1..MAX_ITERATIONS\r\n        # body does not include x\r\n    end\r\n\r\nwhich was rejected by the style-checker / static analysis tool.\r\n\r\nIs there a way to run the style tests locally?\r\nIs there anything like `Integer::times` but with early termination?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 217072305,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-05T03:58:49Z",
		"body" : "It probably wants you to do\r\n```\r\n(1..MAX_ITERATIONS).each do\r\n   # ... body, and I think you can use 'break' for early exit ...\r\nend\r\n\r\n> Is there a way to run the style tests locally?\r\n\r\nYep. `brew style <filename.rb>`. This uses [RuboCop](https://github.com/bbatsov/rubocop), with some Homebrew-specific options.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 217125372,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-05T11:01:08Z",
		"body" : "Made a bunch of comments here. I like the idea and where it's going but probably needs a few rounds of style tweaks to get there. Thanks!\r\n\r\n> When I ran the test suite I encountered one failure in an integration test\r\n> if I run the test suite under tcsh but none if I run it under bash. The integration test\r\n> will probably need to be updated to use an explicit shell.\r\n\r\nCould you do this? Thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 217174429,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-05T14:50:03Z",
		"body" : "Just want to point out:\r\n* You can find an existed implemention to find present shell at here https://github.com/Homebrew/homebrew-command-not-found/blob/master/cmd/brew-command-not-found-init.rb#L3-L17\r\n* I think the method of finding parent/preferred shell as well as how to export value in these shells can be used in multiple place of Homebrew. So I think it is a better idea to put shell related methods to a new file, e.g. `Library/Homebrew/utils/shell.rb`. It could be something like this:\r\n```ruby\r\nmodule Utils\r\n  module Shell\r\n    def self.preferred_shell\r\n    end\r\n\r\n    def self.parent_shell\r\n    end\r\n\r\n    def self.shell_profile\r\n      # move current method at https://github.com/Homebrew/brew/blob/master/Library/Homebrew/utils.rb#L510-L517 to here\r\n    end\r\n\r\n    def self.export_value(shell, key, value)\r\n    end\r\n  end\r\nend\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 217302341,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-05-05T22:48:14Z",
		"body" : "Still todo:\r\n1) tests\r\n2) refactor shell-related utility commands to utility class\r\n2a) use symbols for shell names instead of strings\r\n3) ARGV\r\n4) Do we look at the argv[0] of just the parent processes or multiple processes before falling back to `SHELL`?\r\n\r\nSo, I cleaned up the style a little bit, fixed the failing integration test, and added `sh_quote` (also works for fish) and `csh_quote` implementations that should probably be refactored into the new shell utility class. The existing practice of putting double quotes around the raw value breaks for values containing `\"`, `$`, `` ` ... ` ``, `$( ... )` (and possibly more) in sh-derived shells and for values containing `\"`, `$`, `!`, `` ` ... ` `` or a literal newline in tcsh.\r\n\r\nI'm also overloading `--shell` so that with an an explicit empty value `--shell=`, it prints in the `key: value` and doesn't quote anything. This is the format used when brew detects that the output is a tty. This format is convenient to script against if you need to parse the output for some reason.\r\n\r\n@mikemcquaid\r\n\r\nI fixed the style issues. As for the parsing `ARGV` I can't seem to find documentation for a `value` method for arrays or for `ARGV` specifically (which I think is just an array). I essentially haven't written any Ruby before so even basic stuff is tricky :/\r\n\r\n@xu-cheng  \r\n\r\nI just want to get a better understanding of what the different methods in the proposed utility module do.\r\n\r\nDoes `self.preferred_shell` return the value of the `SHELL` environment variable or does it return the value taken from the command line?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 217360282,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-06T06:41:53Z",
		"body" : "@gregory-nisbet For example, you can:\r\n```ruby\r\nmodule Utils\r\n  module Shell\r\n    def self.preferred_shell\r\n      case ENV[\"SHELL\"]\r\n      when %r{/(ba)?sh} then :bash\r\n      when %r{/zsh} then :zsh\r\n      when ... then ...\r\n      else :bash # default to bash\r\n      end\r\n    end\r\n\r\n    def self.parent_shell\r\n      case `ps c -p #{Process.ppid} -o 'ucomm='`.chuzzle\r\n      when %r{/(ba)?sh} then :bash\r\n      when %r{/zsh} then :zsh\r\n      when ... then ...\r\n      else preferred_shell\r\n      end\r\n    end\r\n\r\n    def self.shell_profile\r\n      # move current method at https://github.com/Homebrew/brew/blob/master/Library/Homebrew/utils.rb#L510-L517 to here\r\n     case preferred_shell\r\n     when :bash then \"~/.bash_profile\"\r\n     ...\r\n     end\r\n    end\r\n\r\n    def self.export_value(shell, key, value)\r\n      case shell\r\n      when :bash, :zsh then \"export #{key}=\\\"#{value}\\\"\"\r\n      ...\r\n      end\r\n    end\r\n  end\r\nend\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 217372473,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-05-06T07:45:29Z",
		"body" : "@gregory-nisbet You might want to look at the [`shellwords`](http://ruby-doc.org/stdlib-2.3.0/libdoc/shellwords/rdoc/Shellwords.html) module for the quotes thing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 217388883,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T08:55:19Z",
		"body" : "> I fixed the style issues. As for the parsing ARGV I can't seem to find documentation for a value method for arrays or for ARGV specifically (which I think is just an array). I essentially haven't written any Ruby before so even basic stuff is tricky :/\r\n\r\nDon't worry, we're happy to help. `ARGV.value` is a Homebrew internal thing; you can see a usage example here: https://github.com/Homebrew/brew/blob/1fa48234e5301f018dc93e62bc7e03d71729b296/Library/Homebrew/cleanup.rb#L141-L149",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 217683423,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-05-08T02:13:12Z",
		"body" : "I added the `utils/shell.rb` file and some tests to `test_intregation_cmds.rb` .\r\n\r\nThe `shell_profile` method (https://github.com/Homebrew/brew/blob/master/Library/Homebrew/utils.rb#L510-L517) has been moved and its tests updated.\r\n\r\nBroadly speaking, most of the changes I made involving `shell_profile` are probably wrong / not idiomatic since I used `Utils::Shell.shell_profile` all over the place. I'm still trying to figure out the module system works and how pseudo-static methods (`def self.method_name`) work.\r\n\r\n`ARGV.value` does not seem to distinguish an explicit value of empty string, e.g.\r\n\r\nWhen executing this command\r\n\r\n    $ brew --env --shell=\r\n\r\nThe value of `ARGV.value(\"shell\")` would be `nil`.\r\n\r\nI think it should be empty string, but other parts of the codebase may depend on this behavior. So right now I'm using `--shell=none` to explicit force `brew --env` to output the build environment in the `key: value` format. I'm thinking it should probably either be `--shell=` with an empty argument or a dedicated command line option like `--noshell` or `--prettyprint` or something.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 217749080,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-05-08T22:05:16Z",
		"body" : "The last few builds seem to be failing at least in part because a merge conflict that I resolved manually (affecting `diagnostics.rb`) in this branch seems to be producing an invalid patch file or something. (Although I think there's also a problem related to ruby 1.8 compatibility ...)\r\n\r\nThis PR now has a bunch of changes in it that could be factored into two PRs... one for `utils/shell.rb` and one for `csh` and `fish` support.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 217749948,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-08T22:25:01Z",
		"body" : "I allowed myself to tweak the PR title to make it more descriptive. Feel free to adjust it if I failed to capture the gist of this PR.\r\n\r\n> This PR now has a bunch of changes in it that could be factored into two PRs... one for `utils/shell.rb` and one for `csh` and `fish` support.\r\n\r\nI think it's fine to keep them together. After all, `utils/shell.rb` grew out of the needs of this PR. However, you could rebase your work on top of `master` (if you haven't already), then squash and possibly amend the commits in your branch so that you end up with these two commits:\r\n\r\n1. Introduces `utils/shell.rb`. Makes adjustments to affected parts of Homebrew.\r\n2. Enhances `cmd/--env.rb`.\r\n\r\n(This will also help resolve the problem that our test bot is currently unable to pull your changes.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 218360347,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-05-11T04:42:46Z",
		"body" : "I added some unit tests for `utils/shell.rb` in `tests/test_shell.rb`, alphabetized the shells in `utils/shell.rb`. and updated the `test/test_integration_cmds.rb` file.\r\n\r\nI changed the way that `csh_quote` and `sh_quote` work to be more like `Shellwords.shellescape`. Instead of wrapping the whole thing with `\"...\"`, it just inserts `\\` as needed and replaces newline with \"\\n\" or \"\\\\\\\\\\n\" as appropriate.\r\n\r\nI also changed some of the integration test to reflect the new quoting stuff. It now assumes that the `CMAKE_PREFIX_PATH` only contains alphanumeric characters, `/`, `@`, `:`.\r\n\r\nAlso ... how do I squash the commits so the tests can be run on the build bot?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 218859294,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-12T19:22:32Z",
		"body" : "> Also ... how do I squash the commits so the tests can be run on the build bot?\r\n\r\nSquash commits by running `brew update; git checkout $YOUR_BRANCH; git rebase --interactive origin/master` and then mark each commit other than the first as `squash` or `fixup` then `git push -f`. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 218974917,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-05-13T07:50:11Z",
		"body" : "Okay, I'm really confused now. In the latest test run, I'm seeing the following statuses for the result of two tests in Yosemite, El Capitan, and Mavericks.\r\n\r\n    tests\t1 min 18 sec\tFixed\r\n    tests --no-compat\t56 sec\tFixed\r\n\r\nI don't see any errors, but the build is still marked as failing. I'm also seeing `test (no failures)` in the summary for each of the OSes.\r\n\r\nI've incorporated all the feedback I've gotten so far (thanks again for your patience, everyone), except for @xu-cheng's suggestion to change the `export key=value` message to something shell-specific in a few places because I'm not sure what to do.\r\n\r\nI followed @UniqMartin's suggestion to change `brew --env` to have backwards-compatible behavior (I think the only thing that I changed is escaping the contents of variables). Meaning that it will use the plain output if stdout is a tty and bash-compatible syntax if it is not. An explicit shell can be specified with `--shell` and a shell will be inferred if `--shell=auto`. The `--env` option also honors `--plain`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 218975438,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-13T07:52:55Z",
		"body" : "> I don't see any errors, but the build is still marked as failing. I'm also seeing test (no failures) in the summary for each of the OSes.\r\n\r\nIgnore the failure, it's a false negative.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 220838268,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-22T15:27:29Z",
		"body" : "@BrewTestBot test this please",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 220856672,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-05-22T21:10:41Z",
		"body" : "Wait ... no way. It's passing now? What was up with the test bot? Also, the way the `csh_quote` works is broken because it doesn't insert double quotes when inserting a single-quoted newline. I'm going to update that now and add a test.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 220856951,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-22T21:16:34Z",
		"body" : "> What was up with the test bot?\r\n\r\nIt was suffering from a mild case of the ol' FUBAR. We're hoping to fix the real issue at some point but for now there's a mitigation in place.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 220868125,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-05-23T01:03:46Z",
		"body" : "I have modified the help text in diagnostic.rb to be shell-specific and added tests for the new features.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 223496543,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-06-03T05:52:22Z",
		"body" : "So there might not be enough csh users to justify including that specifically and I can remove it, but I think the Utils::Shell thing and shell-specific profile advice is probably useful. I don't think there are any open style concerns at the moment...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 223563745,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-03T12:16:56Z",
		"body" : "This is looking really good now. A few final, minor tweaks and conflicts that need resolved and I think we can üö¢ this. Thanks for all the patience and hard work @gregory-nisbet: almost there!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 223760067,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-04T14:58:40Z",
		"body" : "Just to check, will `shell_profile` continue working or does every example need to be changed?\r\n\r\nWe use `shell_profile` in at least a couple of formulae (And it should be used more widely really, rather than assuming everyone in the world uses `bash`).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 223784361,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-04T23:38:50Z",
		"body" : "Sorry for the late comment and for the long intermediate silence @gregory-nisbet! I'd like to give this a more thorough test and a review, but I'm a bit short on time this weekend. I'd appreciate if merging this could wait a few more days. (I'll try to follow up with a proper review as soon as possible.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 223833960,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-06-05T19:57:33Z",
		"body" : "Thanks for your patience and feedback, everyone.\r\n\r\n@MikeMcQuaid\r\n\r\nI factored out the regex into a constant. I‚Äôm not sure what to call it since newlines are also unsafe (in fact, they are so unsafe they need to be quoted individually).\r\n\r\n`UNSAFE_SHELL_CHAR = /([^A-Za-z0-9_\\-.,:\\/@\\n])/‚Ä®`\r\n`sh_quote` and `csh_quote` are still pretty similar, not really sure what to do since the right place for `sh_quote` would probably be in some kind of compatibility wrapper for ruby 1.8 since it‚Äôs the same as shell_escape. `csh_quote` could easily be just a call to `shell_escape` that throws an exception if the string contains a newline.\r\n\r\n@DomT4\r\n‚Ä®As for `shell_profile`, the old shell_profile is still there in `Library/Homebrew/utils.rb`, so there shouldn‚Äôt be a problem with scripts that depend on it. I can add a deprecation notice to the old definition.\r\n\r\nSince the new method is in a new utility module I think it needs to be referred to as `Utils::Shell.shell_profile`, but I‚Äôm not sure how the Ruby module system / strategy for namespace management actually works.\r\n\r\n@UniqMartin\r\n\r\nSounds good. I look forward to your feedback.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 223892560,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-06T08:02:47Z",
		"body" : "> I factored out the regex into a constant. I‚Äôm not sure what to call it since newlines are also unsafe (in fact, they are so unsafe they need to be quoted individually).\r\n\r\nüëç \r\n\r\n> As for shell_profile, the old shell_profile is still there in Library/Homebrew/utils.rb, so there shouldn‚Äôt be a problem with scripts that depend on it. I can add a deprecation notice to the old definition.\r\n\r\nYeh, add one using `opoo` and move it to `Library/Homebrew/compat/utils.rb`, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 226092265,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-06-15T05:34:18Z",
		"body" : "Sorry for the delay. Moved the `shell_profile` function, added deprecation warning.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 226608833,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-16T20:46:43Z",
		"body" : "LGTM. Any final thoughts, @UniqMartin?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 232321245,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T10:47:39Z",
		"body" : "> An explicit argument of --shell= or --shell ''\r\n> with an empty string forces brew --env to dump the environment in\r\n> the key: value format that it uses when it detects that\r\n> stdout is a tty.\r\n\r\n`brew --env --shell=''` appears to run as `brew --env` does. `brew --env --shell '' ` produces `Error: No available formula with the name \"\"`. \r\n\r\n`brew --env --shell=bash` produces `export CXX=\"clang\\+\\+\"` which seems wrong.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 238815787,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:36:58Z",
		"body" : "@gregory-nisbet any news here?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 239084171,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-08-11T06:38:22Z",
		"body" : "@MikeMcQuaid \r\n\r\nThanks for the ping and sorry for the long delay.\r\n\r\nI think that `brew --env --shell ''` is bypassing `cmd/--env.rb` completely.\r\n\r\nAs a quick experiment I added a debug `puts` in `cmd/--env.rb` and doesn't print in the `brew --env --shell ''` case, but does with `--shell=''` and `--shell bash`.\r\n\r\n```\r\n  8 module Homebrew\r\n  9   def __env\r\n 10     ENV.activate_extensions!\r\n 11     ENV.deps = ARGV.formulae if superenv?\r\n 12     ENV.setup_build_environment\r\n 13     ENV.universal_binary if ARGV.build_universal?\r\n 14\r\n 15     shell_value = ARGV.value(\"shell\")\r\n 16     puts \"woof\"\r\n 17     puts shell_value\r\n```\r\n\r\nas for escaping the `+` when the shell is set to bash, this is what `Shellwords.escape` does.\r\n\r\n```\r\nirb(main):010:0> Shellwords.escape '+'\r\n=> \"\\\\+\"\r\n```\r\n\r\nIf it's overkill / looks bad in this case I can change the `sh_quote` function to be less aggressive.\r\n\r\n`export CXX=\"clang\\+\\+\"`\r\n\r\nI can add a test for the `brew --env -shell ''` case and try to track down why it isn't delegating to the `--env` subcommand like we would expect.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 239549988,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-12T20:19:44Z",
		"body" : "> If it's overkill / looks bad in this case I can change the sh_quote function to escape things less aggressively.\r\n\r\nThat's fine then, ignore me üëç \r\n\r\n> I can add a test for the brew --env --shell '' case and try to track down why it isn't delegating to the --env subcommand like we would expect.\r\n\r\nThanks üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 239634292,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-08-13T18:17:04Z",
		"body" : "regarding the mysterious `brew --env --shell ''` thing. The same error shows up if you give it a name that isn't a valid formula.\r\n\r\n`brew --env --shell fishl` for instance does fails with the same error\r\n```Error: No available formula with the name \"fishl\"```\r\n\r\n`fish`, `bash`, `zsh` and the other shells I tested just happened to also be valid formula names.\r\n\r\nI'm going to change the `--env` command so that it doesn't keep processing unused arguments as formula names.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 241103578,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-08-19T18:51:22Z",
		"body" : "Is there a plan for cleaning up argument parsing and making it more consistent?\r\n\r\nI think fixing the `brew --env --shell <whatever>` case should be a consequence of cleaning up the argument parsing rather than special-cased, since we're grabbing the command line argument with `ARGV.value` anyway.\r\n\r\n`brew --env <name_of_formula>` does have a valid use case. It's just that most formulas happen not to modify the environment.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 241124726,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-19T20:21:02Z",
		"body" : "I'm afraid I don't understand why the observed behavior is a problem. `ARGV.value(\"shell\")` returns `<whatever>` from `--shell=<whatever>` (note the equals sign instead of a space). It doesn't work if used with `--shell <whatever>`, but it happily returns an empty string for `--shell=` (i.e. an empty value to the `--shell` option). `--shell <whatever>` could be handled by `ARGV.include?(\"--shell\")` followed by `ARGV.next`, but I'm strongly in favor of only supporting the `--shell=` style.\r\n\r\nSorry if I'm completely missing the point and for how long the PR has been sitting here. I've failed to set aside some time to review it and to help get it to a mergeable state ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 244548169,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:01:47Z",
		"body" : "@gregory-nisbet @UniqMartin What's your understanding of what needs addressed here before merge?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 244556561,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-09-03T16:39:52Z",
		"body" : "I don't think there's anything else that needs to be addressed, since some of the quirks of argument parsing have a reasonable explanation.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 244626520,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-04T20:23:54Z",
		"body" : "Looks good to me locally. Thanks for the hard work and patience here @gregory-nisbet! Without people like you submitting PRs we couldn't run this project. You rock! üëè ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 201
	},
	{
		"id" : 217388341,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T08:52:24Z",
		"body" : "Please report this to https://github.com/Homebrew/homebrew-core/issues, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 203
	},
	{
		"id" : 217442708,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T13:37:15Z",
		"body" : "> Any suggestion?\r\n\r\nRun `brew missing` for more details?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 204
	},
	{
		"id" : 217447640,
		"user" : {
			"login" : "betoharres"
		},
		"created_at" : "2016-05-06T13:58:21Z",
		"body" : "@mikemcquaid sorry I forgot to mention that:\r\n```\r\n$ brew missing         \r\ndinghy: docker docker-machine```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 204
	},
	{
		"id" : 217448677,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T14:02:36Z",
		"body" : "In that case you need to either `brew uninstall dinghy` and/or convince the `dinghy` formula creator to not `depends_on \"docker\"`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 204
	},
	{
		"id" : 217500191,
		"user" : {
			"login" : "betoharres"
		},
		"created_at" : "2016-05-06T17:05:12Z",
		"body" : "@mikemcquaid Thanks a lot Mike! It worked!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 204
	},
	{
		"id" : 217454718,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-06T14:28:15Z",
		"body" : "I'm _almost_ certain we tried this before and ran into major problems. I'll try and hunt down the original PR just in case I'm hallucinating and whether this approach can resolve the problems that arose.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217458349,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T14:40:18Z",
		"body" : "My previous, broken version: https://github.com/Homebrew/legacy-homebrew/pull/47889",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217465590,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-06T14:58:11Z",
		"body" : "Thanks Mike.\r\n\r\nI can see from that that I'll have to adjust some stuff in `fetch`. Slapping an \"in progress\" tag on this in the mean time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217477706,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-06T15:38:07Z",
		"body" : "I've added support in `fetch`, `reinstall`, and `upgrade`.\r\n\r\nI think this PR addresses the problems with the prior PR. It centralizes the logic for whether deciding whether each formula is installed from source or bottle _in this run_ in `FormulaInstaller` and has `fetch` delegate to that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217480990,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T15:47:51Z",
		"body" : "One nit, otherwise üëç and thanks for picking this up.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217486084,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-06T16:08:22Z",
		"body" : "Nit addressed. And no problem!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217512285,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T17:48:38Z",
		"body" : "One final nit but otherwise: üö¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217513516,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-05-06T17:53:28Z",
		"body" : "Just so I'm clear (sorry to be confused), if I have `HOMEBREW_BUILD_FROM_SOURCE` set, the old behavior will remain unchanged?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217516141,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T18:03:18Z",
		"body" : "@chdiza Yep. It'll only be changed if, instead of that variable, you manually passed `--build-from-source` every time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217517780,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-05-06T18:09:54Z",
		"body" : "@mikemcquaid OK, sweet.  My wrappers to `install`, and my unattended-giant-build scripts, need not be mucked with :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217521397,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-06T18:24:42Z",
		"body" : "Nit picked.\r\n\r\nI'll ship this once I'm back from lunch and will be around to handle regressions if they crop up.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217551766,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-06T20:36:00Z",
		"body" : "I don't think the behavior of `--build-from-source` should differ from the behavior of `HOMEBREW_BUILD_FROM_SOURCE`. That makes about as much sense as `--verbose` differing from `HOMEBREW_VERBOSE` or `--debug` differing from `HOMEBREW_DEBUG` or `--sandbox` differing from `HOMEBREW_SANDBOX`. If both behaviors are useful in various contexts, that's fine, but let's give them different names and not conflate them.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217559554,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-06T21:11:44Z",
		"body" : "Sorry for being late to the party. I can see a desire for the behavior implemented in this PR, but I'm somewhat with @ilovezfs that this is not the behavior I would expect from the option. I think prior to this PR, the solution would have been:\r\n\r\n```\r\nbrew install --only-dependencies <formula>\r\nbrew install --build-from-source <formula>\r\n```\r\n\r\nDoes this PR solve an issue that couldn't be solved with the above sequence, apart from being shorter? (In case this sounds overly critical, I'm mostly curious. I'm fine with this change, just not entirely happy with `--build-from-source` and `HOMEBREW_BUILD_FROM_SOURCE` now having different meaning.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217562328,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T21:25:06Z",
		"body" : "> Does this PR solve an issue that couldn't be solved with the above sequence, apart from being shorter?\r\n\r\nNo.\r\n\r\n> just not entirely happy with --build-from-source and HOMEBREW_BUILD_FROM_SOURCE now having different meaning\r\n\r\nBeing useful is more important than being consistent. Previously the `--build-from-source` behaviour was not useful.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217563296,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-06T21:29:54Z",
		"body" : ">Previously the --build-from-source behaviour was not useful.\r\n\r\nThen `HOMEBREW_BUILD_FROM_SOURCE` should do the same thing as the new behavior.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217563719,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T21:32:02Z",
		"body" : "Why (beyond \"consistency\")? Setting `HOMEBREW_BUILD_FROM_SOURCE` signals the intent \"I want everything to be always built from source\". Passing `brew install foo bar --build-from-source` signals the intent \"I want to build foo and bar from source\".",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217565392,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-06T21:40:55Z",
		"body" : "It's about semantics not \"consistency\" or purity. To me `HOMEBREW_BUILD_FROM_SOURCE` literally means always do the equivalent of passing `--build-from-source` (without making me pass the option every time), which then means whatever it means. If it's really important that there be some kind of never-bottle option/environment variable, then let's have one, but not at the expense of coherence.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217566557,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-06T21:44:55Z",
		"body" : "If we change the behaviour of `HOMEBREW_BUILD_FROM_SOURCE` (as demonstrated but @chdiza's comments above): we'll break people's workflows. We could introduce a new option for this but then what would the point in the flag be if the current one is not useful and downright irritating to the current users?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217568318,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-05-06T21:48:56Z",
		"body" : "> Then HOMEBREW_BUILD_FROM_SOURCE should do the same thing as the new behavior.\r\n\r\nNo, because *that* shellvar *was* (and thankfully still is) useful.\r\n\r\nAnyway, the old meaning of the flag was useful too; it was just less useful than the corresponding shellvar, because it was pain to keep typing the flag every time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217568821,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-05-06T21:50:44Z",
		"body" : "> To me HOMEBREW_BUILD_FROM_SOURCE literally means always do the equivalent of passing --build-from-source (without making me pass the option every time)\r\n\r\nBut the latter also \"literally\" (whatever that means) means \"build from source\", not \"build this, but nothing else, from source\".\r\n\r\nI don't understand why the meaning of the flag was changed, rather than making a new flag with a new name for the desired purpose.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217570505,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-06T21:59:02Z",
		"body" : "Some people's workflows will depend on the \"old\" meaning of `--build-from-source`, too.\r\n\r\nI find the \"old\" behavior often useful and often irritating, depending on what I'm trying to accomplish. Having to resort to `HOMEBREW_BUILD_FROM_SOURCE` to get back the old behavior when I want it is a hack. (For example, previously I would know exactly what `--build-from-source` was going to do. Now it will be random, since I will get stray bottles whenever a 10.8 bottle still exists but most of the time not. If I want predictability, I now must resort to an environment variable.)\r\n\r\nNot being able to get the \"new\" `--build-from-source` behavior via an environment variable is also needlessly limiting since it means if you want the new behavior you have to type out the option every time.\r\n\r\nOther than attempting to limit the number of options and environment variables to `n - 1` instead of `n`, why would we not want both behaviors available as options and environment variables?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 205
	},
	{
		"id" : 217605011,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-07T04:01:02Z",
		"body" : ">  However there was no way for me to keep it from getting upgraded in the future, meaning every time that the formula updated I would need to re-run brew switch.\r\n\r\nThis part is actually by design, if I understand what you're saying here. If you have other things installed that `depends_on \"ffmpeg\"` and they get upgraded, your `ffmpeg` is dragged along with it.\r\n\r\nThis is because we only test and bottle the latest against the latest in core formulae and it's a rabbit-hole of misery to open ourselves up to configurations where people keep increasingly old versions around and used with up-to-date other formulae and don't expect chaos.\r\n\r\nIf you're saying that you have `ffmpeg` installed but nothing that `brew uses ffmpeg` I'm more sympathetic to the idea an `upgrade` later shouldn't bump it, if that's happening for you.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 206
	},
	{
		"id" : 217656123,
		"user" : {
			"login" : "dljsjr"
		},
		"created_at" : "2016-05-07T17:54:20Z",
		"body" : "> If you're saying that you have ffmpeg installed but nothing that brew uses ffmpeg I'm more sympathetic to the idea an upgrade later shouldn't bump it, if that's happening for you.\r\n\r\nThis is the idea. I do not have anything from homebrew that uses ffmpeg, only internal libraries that need it, and I had to come up with my own way to pin at an older version because I didn't pin it when 2.8.6 was the newest version back in February.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 206
	},
	{
		"id" : 217730273,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-08T16:13:29Z",
		"body" : "This usually works\r\n```\r\nbash-3.2$ brew log ffmpeg | grep bottle|grep 2.8|head -1\r\n    ffmpeg: update 2.8.6 bottle.\r\nbash-3.2$ cd /usr/local/Library/Taps/homebrew/homebrew-core\r\nbash-3.2$ git reset --hard 7c988bdb8ffb9d2ffcce7606a43e360d98e4982c\r\nHEAD is now at 7c988bd ffmpeg: update 2.8.6 bottle.\r\nbash-3.2$ HOMEBREW_NO_AUTO_UPDATE=1 brew install ffmpeg\r\n==> Installing dependencies for ffmpeg: x264, lame, libvo-aacenc, xvid\r\n==> Installing ffmpeg dependency: x264\r\n==> Downloading https://homebrew.bintray.com/bottles/x264-r2601.el_capitan.bottle.tar.gz\r\nAlready downloaded: /Users/joe/Library/Caches/Homebrew/x264-r2601.el_capitan.bottle.tar.gz\r\n==> Pouring x264-r2601.el_capitan.bottle.tar.gz\r\nüç∫  /usr/local/Cellar/x264/r2601: 10 files, 3.3M\r\n==> Installing ffmpeg dependency: lame\r\n==> Downloading https://homebrew.bintray.com/bottles/lame-3.99.5.el_capitan.bottle.1.tar.gz\r\nAlready downloaded: /Users/joe/Library/Caches/Homebrew/lame-3.99.5.el_capitan.bottle.1.tar.gz\r\n==> Pouring lame-3.99.5.el_capitan.bottle.1.tar.gz\r\nüç∫  /usr/local/Cellar/lame/3.99.5: 26 files, 2M\r\n==> Installing ffmpeg dependency: libvo-aacenc\r\n==> Downloading https://homebrew.bintray.com/bottles/libvo-aacenc-0.1.3.el_capitan.bottle.tar.gz\r\nAlready downloaded: /Users/joe/Library/Caches/Homebrew/libvo-aacenc-0.1.3.el_capitan.bottle.tar.gz\r\n==> Pouring libvo-aacenc-0.1.3.el_capitan.bottle.tar.gz\r\nüç∫  /usr/local/Cellar/libvo-aacenc/0.1.3: 16 files, 297.5K\r\n==> Installing ffmpeg dependency: xvid\r\n==> Downloading https://homebrew.bintray.com/bottles/xvid-1.3.4.el_capitan.bottle.tar.gz\r\nAlready downloaded: /Users/joe/Library/Caches/Homebrew/xvid-1.3.4.el_capitan.bottle.tar.gz\r\n==> Pouring xvid-1.3.4.el_capitan.bottle.tar.gz\r\nüç∫  /usr/local/Cellar/xvid/1.3.4: 9 files, 1.3M\r\n==> Installing ffmpeg\r\n==> Downloading https://homebrew.bintray.com/bottles/ffmpeg-2.8.6.el_capitan.bottle.tar.gz\r\nAlready downloaded: /Users/joe/Library/Caches/Homebrew/ffmpeg-2.8.6.el_capitan.bottle.tar.gz\r\n==> Pouring ffmpeg-2.8.6.el_capitan.bottle.tar.gz\r\n==> Caveats\r\nFFmpeg has been built without libfaac for licensing reasons;\r\nlibvo-aacenc is used by default.\r\nTo install with libfaac, you can:\r\n  brew reinstall ffmpeg --with-faac\r\n\r\nYou can also use the experimental FFmpeg encoder, libfdk-aac, or\r\nlibvo_aacenc to encode AAC audio:\r\n  ffmpeg -i input.wav -c:a aac -strict experimental output.m4a\r\nOr:\r\n  brew reinstall ffmpeg --with-fdk-aac\r\n  ffmpeg -i input.wav -c:a libfdk_aac output.m4a\r\n==> Summary\r\nüç∫  /usr/local/Cellar/ffmpeg/2.8.6: 228 files, 44.5M\r\nbash-3.2$ brew pin ffmpeg\r\nbash-3.2$ git reset --hard origin/master\r\nHEAD is now at 965c7ad mmix: update 20131017 bottle.\r\nbash-3.2$ brew outdated\r\nffmpeg (2.8.6 < 3.0.2)\r\nbash-3.2$ brew upgrade\r\n==> No packages to upgrade\r\n==> Not upgrading 1 pinned package:\r\nffmpeg 3.0.2\r\nbash-3.2$\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 206
	},
	{
		"id" : 217731156,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-08T16:31:31Z",
		"body" : "If you actually need to pin something in a way that isn't subject to the whims of reverse dependencies' upgrade paths, you'd need to maintain a tap with that version and all its requirements.\r\n\r\nIt might be convenient if `brew upgrade` of another formula wasn't allowed to override an explicit pin, but that also would need to cause the upgrade of the reverse dependency to fail unless some other kind of force were applied. Such a change is unlikely to be made, I think.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 206
	},
	{
		"id" : 217742049,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-08T19:47:31Z",
		"body" : "This kinda comes down to a general request for Homebrew to support versions better. This is something we're exploring but, as @ilovezfs, the best bet if you need control over versions is to maintain your own tap for them. Sorry and thanks for the issue.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 206
	},
	{
		"id" : 217555270,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-06T20:50:41Z",
		"body" : "Wait a minute. In each of the projects, it still does some Git activity on master. Most of the projects are set up with distinct workspaces, so they don't collide. You can see this by examining the Console Output for a build job on the [main node](http://bot.brew.sh/job/Homebrew%20Apache%20Pull%20Requests/56/console) and not one of the configurations (mavericks/yosemite/el capitan).\r\n\r\n[Here's](http://bot.brew.sh/job/Homebrew%20Apache%20Pull%20Requests/56/console) what the Apache project's jobs look like:\r\n\r\n```\r\nGitHub pull request #117 of commit ab74c60e6c4ee74e8db31427c912be12adbc04dc, no merge conflicts.\r\nSetting status of ab74c60e6c4ee74e8db31427c912be12adbc04dc to PENDING with url http://bot.brew.sh/job/Homebrew%20Apache%20Pull%20Requests/56/ and message: 'Build started sha1 is merged.'\r\n[EnvInject] - Loading node environment variables.\r\nBuilding on master in workspace /Users/brew/Jenkins/apache\r\n > git rev-parse --is-inside-work-tree # timeout=10\r\n``` \r\n\r\n[Here's](http://bot.brew.sh/job/Homebrew%20Dupes%20Pull%20Requests/259/console) what Dupes looks like:\r\n```\r\nGitHub pull request #600 of commit f4a41ab27ef01e44385aedf2da77668d4f559604, no merge conflicts.\r\nSetting status of f4a41ab27ef01e44385aedf2da77668d4f559604 to PENDING with url http://bot.brew.sh/job/Homebrew%20Dupes%20Pull%20Requests/259/ and message: 'Build started sha1 is merged.'\r\n[EnvInject] - Loading node environment variables.\r\nBuilding on master in workspace /Users/brew/Jenkins/dupes\r\n > git rev-parse --is-inside-work-tree # timeout=10\r\n```\r\n\r\n[Here's](http://bot.brew.sh/job/Homebrew%20Versions%20Pull%20Requests/1382/console) what Versions looks like:\r\n```\r\nGitHub pull request #1252 of commit 2bbb6bf27d6293a01c782c16e4ae9caa358ffc7d, no merge conflicts.\r\nSetting status of 2bbb6bf27d6293a01c782c16e4ae9caa358ffc7d to PENDING with url http://bot.brew.sh/job/Homebrew%20Versions%20Pull%20Requests/1382/ and message: 'Build started sha1 is merged.'\r\n[EnvInject] - Loading node environment variables.\r\nBuilding on master in workspace /Users/brew/Jenkins/versions\r\n > git rev-parse --is-inside-work-tree # timeout=10\r\n```\r\n\r\n[Here's](http://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/1448/console) what Core looks like:\r\n```\r\nGitHub pull request #914 of commit 76a950a7e0f339ec289dd80a6a36233f6689a9b0, no merge conflicts.\r\nSetting status of 76a950a7e0f339ec289dd80a6a36233f6689a9b0 to PENDING with url http://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/1448/ and message: 'Build started sha1 is merged.'\r\n[EnvInject] - Loading node environment variables.\r\nBuilding on master in workspace /Users/brew/Jenkins/versions\r\n > git rev-parse --is-inside-work-tree # timeout=10\r\n```\r\n\r\nWait a minute ‚Äì¬†\"workspace `/Users/brew/Jenkins/versions`\"? Not `/Users/brew/Jenkins/core`?\r\n\r\nHere's a Jenkins build timeline from today.\r\n\r\n<img width=\"355\" alt=\"screen shot 2016-05-06 at 4 22 53 pm\" src=\"https://cloud.githubusercontent.com/assets/2618447/15085221/e0168cb2-13a6-11e6-979b-eaac2504306e.png\">\r\n\r\nSome of those Bottles jobs are overlapping other jobs. Is that supposed to happen?\r\n\r\nHomebrew Core Pull Requests # 1450 ran from 20:41:43 to 20:54:44\r\nHomebrew Bottles # 49226 ran from 20:45:19 to 20:45:39 (and failed)\r\n\r\nSimilarly, Homebrew Bottles # 49228 overlapped a Homebrew Versions PR run.\r\n\r\nHere's another clue. The error message from one of the failed bottle runs is complaining about an extant lock file in the `homebrew/versions` tap inside its workspace.\r\n\r\n```\r\ngit reset --hard origin/master\r\nHEAD is now at 96bff5b gnupg21: add 2.1.12 bottle.\r\nbrew update\r\nerror: cannot lock ref 'refs/remotes/origin/master': Unable to create '/Users/brew/Jenkins/jobs/Homebrew Bottles/workspace/Library/Taps/homebrew/homebrew-versions/.git/refs/remotes/origin/master.lock': File exists.\r\n\r\nIf no other git process is currently running, this probably means a\r\ngit process crashed in this repository earlier. Make sure no other git\r\nprocess is running and remove the file manually to continue.\r\n```\r\n\r\nMost of the others just complain about remote ref SHA mismatches.\r\n\r\n```\r\n\r\ngit checkout -f master\r\nAlready on 'master'\r\nYour branch is ahead of 'origin/master' by 2 commits.\r\n  (use \"git push\" to publish your local commits)\r\ngit reset --hard origin/master\r\nHEAD is now at a6b99a5 civl: remove cvc4 dependency\r\nbrew update\r\nerror: cannot lock ref 'refs/remotes/origin/master': ref refs/remotes/origin/master is at f08e21a7961085ca4452b778c0b56e8f4982a144 but expected a6b99a561cf09867c7613a6fdc937b53cc72ba65\r\nerror: cannot lock ref 'refs/remotes/origin/master': ref refs/remotes/origin/master is at f08e21a7961085ca4452b778c0b56e8f4982a144 but expected a6b99a561cf09867c7613a6fdc937b53cc72ba65\r\nerror: cannot lock ref 'refs/remotes/origin/master': ref refs/remotes/origin/master is at f08e21a7961085ca4452b778c0b56e8f4982a144 but expected a6b99a561cf09867c7613a6fdc937b53cc72ba65\r\nerror: cannot lock ref 'refs/remotes/origin/master': ref refs/remotes/origin/master is at f08e21a7961085ca4452b778c0b56e8f4982a144 but expected a6b99a561cf09867c7613a6fdc937b53cc72ba65\r\n```\r\n\r\nThis is a brew update operation that seems to be interacting with some job's git operations.\r\n\r\nHere's another thing. most of the projects seem to have their own workspaces. But Versions and Core do not. Could their workspaces be aliased to `/usr/local`, so that their local in-workspace git operations are acting on the same repo that Bottle's `brew update` is acting on?\r\n\r\n```\r\nrobotunicorn:jobs brew$ pwd\r\n/Users/brew/Jenkins/jobs\r\nrobotunicorn:jobs brew$ ls -ld */workspace\r\ndrwxr-xr-x+  2 brew  staff   68 Nov 27  2014 Homebrew Apache Pull Requests/workspace\r\ndrwxr-xr-x+  2 brew  staff   68 Oct 30  2014 Homebrew Binary Pull Requests/workspace\r\ndrwxr-xr-x+ 14 brew  staff  476 May  6 21:46 Homebrew Bottles/workspace\r\ndrwxr-xr-x+  2 brew  staff   68 Oct 25  2014 Homebrew Completions Pull Requests/workspace\r\ndrwxr-xr-x+  2 brew  staff   68 Dec 30  2014 Homebrew Devel-Only Pull Requests/workspace\r\ndrwxr-xr-x+  2 brew  staff   68 Oct 23  2014 Homebrew Dupes Pull Requests/workspace\r\ndrwxr-xr-x+  2 brew  staff   68 Oct 23  2014 Homebrew Games Pull Requests/workspace\r\ndrwxr-xr-x+  2 brew  staff   68 Oct 30  2014 Homebrew Head-Only Pull Requests/workspace\r\ndrwxr-xr-x+  2 brew  staff   68 Nov  4  2014 Homebrew Nginx Pull Requests/workspace\r\ndrwxr-xr-x+  2 brew  staff   68 Oct 30  2014 Homebrew PHP Pull Requests/workspace\r\ndrwxr-xr-x+  2 brew  staff   68 Oct 30  2014 Homebrew Python Pull Requests/workspace\r\ndrwxr-xr-x+  2 brew  staff   68 Oct 23  2014 Homebrew Science Pull Requests/workspace\r\ndrwxr-xr-x+  2 brew  staff   68 Feb  8  2014 Homebrew Testing/workspace\r\ndrwxr-xr-x+  2 brew  staff   68 Nov  6  2014 Homebrew X11 Pull Requests/workspace\r\nrobotunicorn:jobs brew$\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 217741921,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-08T19:45:15Z",
		"body" : "@apjanke The bottle job should be using the Homebrew just in the `Homebrew Bottles/workspace` workspace and not touching anything in `/usr/local`. Looking at the configuration this should be what's happening (but clearly isn't)?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 217848851,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-09T12:18:27Z",
		"body" : "it may be the rebase-is-default-now thing again",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 207
	},
	{
		"id" : 218100551,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T09:05:56Z",
		"body" : "> error: cannot lock ref 'refs/remotes/origin/master': ref refs/remotes/origin/master is at f08e21a7961085ca4452b778c0b56e8f4982a144 but expected a6b99a561cf09867c7613a6fdc937b53cc72ba65\r\n\r\nThis is the issue; it's barfing at the different between `legacy-homebrew.git` and `brew.git`. I've pulled these into a separate upload job (http://bot.brew.sh/job/Legacy%20Homebrew%20Bottles/) which should have fixed the problem.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 207
	},
	{
		"id" : 218392401,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-11T08:16:53Z",
		"body" : "I don't think this is fixed yet. üò¢ I pulled several bottles last night and for (almost) every one of them I had to restart a failed bottle job, sometimes twice, to make it succeed. The failed ones have a multitude of the usual `error: cannot lock ref` messages ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 207
	},
	{
		"id" : 218392724,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-11T08:18:24Z",
		"body" : "Ok. I think somehow it's still related. It would be good if it was more than just me working on a fix here üòâ ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 207
	},
	{
		"id" : 218517069,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-11T16:40:18Z",
		"body" : "Sorry for lack of PR to go with the bug report. Really not familiar with this area of `brew`. Have been reading through the code and Jenkins output to figure out how to approach it, but still don't understand it well enough to suggest any concrete fix.\r\n\r\nI'm going to log in to the box and manually examine its Homebrew installation to see if anything stands out.\r\n\r\nThe Jenkins build timeline only seems to be showing half a day's worth of runs. Is there a way to retain more of that so we can get a better view of things?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 207
	},
	{
		"id" : 218523231,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-11T17:01:55Z",
		"body" : "I added an email notification post-build step to the Homebrew Bottles project configuration, to notify me upon failure, so I can log in and get a fresh look at the state of the Homebrew prefix repos right after a failed run.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 207
	},
	{
		"id" : 218665512,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-12T05:44:53Z",
		"body" : "> It would be good if it was more than just me working on a fix here üòâ\r\n\r\nAgreed. I tried unsuccessfully yesterday. Looked at the `test-bot` code and spent a lot of time poking the Jenkins configuration. Even though I found nothing yet, I'm now much more familiar with Jenkins and have a much better understanding of our Jenkins setup.\r\n\r\n> Sorry for lack of PR to go with the bug report. Really not familiar with this area of `brew`.\r\n\r\nI don't think there's something to be sorry about. I too wouldn't know how to make a PR if I didn't know yet what the underlying issue is.\r\n\r\n> The Jenkins build timeline only seems to be showing half a day's worth of runs. Is there a way to retain more of that so we can get a better view of things?\r\n\r\nI bumped the number of ‚ÄúHomebrew Bottle‚Äù builds to retain from 50 to 100. I believe those builds are relatively lightweight, so shouldn't hurt to keep more of them and provides more data for investigation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 218668417,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-12T06:08:32Z",
		"body" : "Is it clear when this started? Any hope of bisecting the problem rather than thinking about it?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 218754333,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-12T13:19:37Z",
		"body" : "> Is it clear when this started? Any hope of bisecting the problem rather than thinking about it?\r\n\r\nI think the answer is \"no\" to both of these, because we don't retain enough build history in Jenkins. This has been going on for a few days, but the oldest job I see in Jenkins is [4970](http://bot.brew.sh/job/Homebrew%20Bottles/49570/), from just yesterday.\r\n\r\nYou could get an approximate date of when it started by looking through comments in PRs and seeing when we started having to re-run them more often, but I think it's several days back, based on my recall of when I started seeing a lot of those failed `brew pull` commands that required reruns.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 218764973,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-12T13:57:17Z",
		"body" : "@apjanke Could it be https://github.com/Homebrew/brew/commit/1c1c48c92005b27aba4e17e12b49c4d1cbb0b331",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 218771978,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-12T14:20:41Z",
		"body" : "It's definitely not related to the push. It feels to me that this started happening around the recently `brew pull` changes but I could be wrong. I pretty strongly suspect that something is using the `/usr/local` repository rather than the one in the working directory.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 218773514,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-12T14:25:27Z",
		"body" : "Was anything changed on Jenkins? There's currently a run of 20 bottle jobs that didn't have the issue.\r\n\r\n> @apjanke Could it be 1c1c48c92005b27aba4e17e12b49c4d1cbb0b331\r\n\r\nSeems unlikely given that the problem is with the local Git repository (the one on our CI) and not with the remote and the change shouldn't have an influence on the former. (At least that's what I thought.)\r\n\r\nBut upon closer inspection, those pushes are also messing with the `master` tag and the Git errors are about `refs/remotes/origin/master`. Additionally, the state of `master` might be different between the first (now removed) and the second `git push`. I'd say reverting this change and checking whether that fixes the issue wouldn't be a horrible thing. The problem that is being addressed in the commit seems a lot less pressing than these constant Git-related bottle job failures.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 218774213,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-12T14:27:37Z",
		"body" : "> Was anything changed on Jenkins?\r\n\r\nNot that I'm aware of. I added a notify-on-failure alert with myself in the recipients list, but didn't make any other changes and don't know of any.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 218774372,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-12T14:28:08Z",
		"body" : "The last change I made was the legacy bottles separation. It could be that has fixed it now the backlog was worked through.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 218778119,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-12T14:39:50Z",
		"body" : "> The last change I made was the legacy bottles separation. It could be that has fixed it now the backlog was worked through.\r\n\r\nIt was worth a try, but I don't think this had any effect. üò¢ It has been in place for like two days (?) and there have been failures since, even with PRs that have been opened less than a day ago.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 218781620,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-12T14:51:19Z",
		"body" : "> error: cannot lock ref 'refs/remotes/origin/master': Unable to create '/Users/brew/Jenkins/jobs/Homebrew Bottles/workspace/Library/Taps/homebrew/homebrew-core/.git/refs/remotes/origin/master.lock': File exists.\r\n\r\nAdded:\r\n`rm -rf .git/refs/heads/*.lock Library/Taps/*/*/.git/refs/remotes/origin/*.lock`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 218783383,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-12T14:56:21Z",
		"body" : "Replaced the `git fetch` with a `brew update` now that the `test-bot` redoing it is a quick no-op and so it cleans up every tap rather than just one. Once we have https://github.com/Homebrew/brew/pull/166 we shouldn't need to tap at all.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 219840044,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-17T20:16:52Z",
		"body" : "Seems fixed now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 219852108,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-17T20:59:23Z",
		"body" : "I got an isolated spate of failure notifications yesterday, but nothing else recently. Does seem fixed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 219946344,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-18T07:21:35Z",
		"body" : "It'll still fail sometimes due to e.g. upload attempts after publishing but it looks generally right now üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 207
	},
	{
		"id" : 217596269,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-05-07T01:18:37Z",
		"body" : "cc @UniqMartin @mikemcquaid ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217602651,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-07T03:25:54Z",
		"body" : "I guess I'll have to go quietly if this has been discussed elsewhere but I have some concerns on this.\r\n\r\nI understand the reasoning but I'm quite against this implementation, to be honest. I don't think it gains us all that much, and I think it leads to contributors (or you) having to rewrite existing \"bad\" tests that may never become \"good\" tests to clarify they are \"bad\".\r\n\r\nWe're already really quite explicit in the [Cookbook](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md#add-a-test-to-the-formula) which kinds of tests are good and bad, but despite that in most situations even the maintainers struggle to write \"good\" tests for a lot of formulae because we're not all that familiar with the formula in question.\r\n\r\nI've also pretty much lost count of how many PRs have suddenly gone silent after we've asked for a stronger test. A lot of contributions to Homebrew are _\"Hey this is popular, I found it, played with it a bit and it seems cool, maybe others want to use it too\"_ - I'd say we get considerably more contributions like that than we do people who know the tool intimately. I'm reluctant to further stigmatise simple tests when we explicitly say simple is better than nothing at all.\r\n\r\nThis feels like a heavy-handed use of DSL modification & a one-size-fits-all kind of change, where contributors are \"taught\" `version` or `help` are \"bad\" when sometimes (A bunch of GUI or X11 stuff comes to mind immediately) \"bad\" is as good as we're going to every get, short of being able to fake interactivity.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217603785,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-05-07T03:45:20Z",
		"body" : "@DomT4 There was a partial discussion here: Homebrew/homebrew-core#883\r\n\r\nI don't think that the goal with this is to stigmatize `version` or `help` tests when those are the only option (e.g. GUIs) or when the contributor isn't familiar enough to write a more complex test (e.g. myself, on several occasions), but to allow Homebrew to differentiate and keep track of tests that could stand some improvement in the future.\r\n\r\nThe primary benefit in my eyes is that this could be used to dynamically whip up a quick list of testless/trivial-test only formulae as an easy place for new contributors to start. If you think the busywork and added confusion of this change aren't justified, I'm happy to accede on the PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217605050,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-07T04:02:08Z",
		"body" : "Thanks @woodruffw, I'll read through that later today to see the original discussion. For now I should go back to sleep; I got up to grab some water and somehow ended up working on Homebrew stuff. Welp.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217628084,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-07T10:43:01Z",
		"body" : "I'm personally üëé on this too. I think it's worth asking: why do we have test blocks and encourage people to create them? The main reason is because we want to ensure the software was built, packaged and installed correctly. A more complex test exercises this more but a `--version` test honestly catches pretty much all the issues that a more complex one does (and `brew linkage` does not catch the case that e.g. it's linked fine but segfaults on startup due to missing non-library files or bad compilation). A more useful thing than adding complex tests to all formulae would be trying to add regression tests to formulae that have had packaging issues to make sure we don't provide broken versions in future. As a result I'd rather avoid a DSL element that can already be revealed by `grep`, would require large amounts of manual work on existing formulae to flag them and honestly doesn't seem to solve any end-user problems.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217718943,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-08T13:35:11Z",
		"body" : "This reminds me of `fails_with do`'s `cause`, which now just sits there looking pretty. Using the DSL for documentation purposes seems like an abuse unless it's actually functionally doing something to change behavior. Maybe `brew info` could be taught to guess what type of test it has?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217726974,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-08T15:26:45Z",
		"body" : "> I'm reluctant to further stigmatise simple tests when we explicitly say simple is better than nothing at all.\r\n\r\n@DomT4 Maybe the `:trivial` tag sounds too derogatory? I think this can be addressed by using a different word.\r\n\r\n> [‚Ä¶] but to allow Homebrew to differentiate and keep track of tests that could stand some improvement in the future.\r\n>\r\n> The primary benefit in my eyes is that this could be used to dynamically whip up a quick list of testless/trivial-test only formulae as an easy place for new contributors to start.\r\n\r\nThis. :+1:\r\n\r\n> This feels like a heavy-handed use of DSL modification & a one-size-fits-all kind of change, where contributors are \"taught\" `version` or `help` are \"bad\" when sometimes (A bunch of GUI or X11 stuff comes to mind immediately) \"bad\" is as good as we're going to every get, short of being able to fake interactivity.\r\n\r\nWell, they are often bad. Also, GUI-only stuff is rare in Homebrew, we're increasingly pushing for GUI-only stuff to be moved to Cask, and X11 stuff is niche enough to not impact this discussion. And the fact that we can't do better than `--version` could be easily expressed by using a different tag. The approach is quite powerful and general enough to allow for this kind of flexibility and the point of this discussion is to talk about such cases and flesh out the idea.\r\n\r\n> I think it's worth asking: why do we have test blocks and encourage people to create them? The main reason is because we want to ensure the software was built, packaged and installed correctly. A more complex test exercises this more but a `--version` test honestly catches pretty much all the issues that a more complex one does [‚Ä¶].\r\n\r\n@mikemcquaid That `--version` will catch this kind of breakage is frequently not true. Just think about formulae implemented in an interpreted language like Python, where most modules won't even be loaded if only the version is queried. The same applies for compiled programs that have a plugin structure. A test that uses some of the actual functionality of a formula won't (and shouldn't) ever replace an upstream test suite, but will give us much more realistic coverage than a simple `--version`.\r\n\r\n> A more useful thing than adding complex tests to all formulae would be trying to add regression tests to formulae that have had packaging issues to make sure we don't provide broken versions in future.\r\n\r\nSorry to be this frank, but my feeling is that you're derailing the discussion here. I agree this is a useful thing to have, but that's completely orthogonal to what is being proposed here.\r\n\r\n> As a result I'd rather avoid a DSL element that can already be revealed by `grep`, would require large amounts of manual work on existing formulae to flag them [‚Ä¶]\r\n\r\nWhat's the issue with making this `grep`pable? I don't see a good alternative to making this part of the DSL *if* we want to be able to query information about a formula's test (beyond whether it exists or not) from code. But maybe I'm overlooking something. Like with many other changes, I don't see why we wouldn't be able to introduce this incrementally in the course of updating formulae. To facilitate this, the default tag could be `:unclassified` while `:trivial` and `:nontrivial` would be used explicitly. We're in no hurry to update existing tests of formulae that haven't been touched for a long time.\r\n\r\n> [‚Ä¶] and honestly doesn't seem to solve any end-user problems.\r\n\r\nI honestly don't understand this statement. A non-negligible problem of our users is that the software we package ends up being broken. Tests help to ensure it is working properly (which depends on it being installed correctly). Exercising some functionality of the software in the test makes us more confident about that. After all, most users care about the functionality some software provides, not whether `<program> --version` works.\r\n\r\n> Using the DSL for documentation purposes seems like an abuse unless it's actually functionally doing something to change behavior.\r\n\r\n@ilovezfs I don't agree. A formula's `desc` is also mostly useless and doesn't affect functionality of `brew` at all unless you start searching for a description. The same can be said of the proposed test tagging. In its current form, it is exposed via `Formula#test_trivial?` and could be immediately used in a code snippet like below. (Fleshing this out a bit more and making it a `dev-cmd` would be easy, but premature and possibly a waste of time‚Äîjudging by the currently dominant stance towards this PR.)\r\n\r\n```\r\nbrew for-each-formula 'puts f.full_name if f.test_trivial?'\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217727781,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-05-08T15:45:38Z",
		"body" : "@ilovezfs I think that integrating test type into `brew info` is a good idea, but how would it get that information without some kind of additional information expressed by the `test` block?\r\n\r\n\r\n>> I'm reluctant to further stigmatise simple tests when we explicitly say simple is better than nothing at all.\r\n> \r\n> @DomT4 Maybe the :trivial tag sounds too derogatory? I think this can be addressed by using a different word.\r\n\r\nOne of the concerns both @DomT4 and @mikemcquaid brought up earlier is that a lot of `--version`-style tests are currently present in formulae, so maybe a default of `:untagged` or `:unspecified`?\r\n\r\n> And the fact that we can't do better than --version could be easily expressed by using a different tag. The approach is quite powerful and general enough to allow for this kind of flexibility and the point of this discussion is to talk about such cases and flesh out the idea.\r\n\r\n:+1: I think this would be a great use of this approaches' generality. `test :help` and `test :version` would express the contents of the test even better than `test :trivial`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217728983,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-08T15:52:19Z",
		"body" : "```\r\n$ cat <(ag '_output' | grep '\\-[vV]') <(ag 'assert' | grep '\\-[vV]') <(ag 'system' | grep '\\-[vV]'| grep bin) | sort | uniq\r\n```\r\nI wonder how many this misses.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217730039,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-05-08T16:09:15Z",
		"body" : "> `$ cat <(ag '_output' | grep '\\-[vV]') <(ag 'assert' | grep '\\-[vV]') <(ag 'system' | grep '\\-[vV]'| grep bin) | sort | uniq`\r\n\r\nThat's 10 execs, 7 regular expressions, and 8 redirections for a command that won't catch `--version`, `--help`, or any command to that effect inside of backticks. Compare that to:\r\n\r\n`egrep -l \"test :(version|help) do\" Formula/*`\r\n\r\nThat won't catch untagged formulae (where a heuristic would be useful), but it'll catch 100% of tagged formulae and should be a lot speedier.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217731743,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-08T16:42:40Z",
		"body" : "Won't catch `--version`?\r\n```\r\n cat <(ag '_output' | grep '\\-[vV]') <(ag 'assert' | grep '\\-[vV]') <(ag 'system' | grep '\\-[vV]'| grep bin) | sort | uniq|grep version|wc -l\r\n     282\r\n```\r\n\r\nAnyway, still definitely :-1: on this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217732599,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-08T16:52:03Z",
		"body" : "Martin's talking me in to this. This sounds like it would be genuinely useful, with the main downside being that it adds stuff to the contributor-facing public API for formula DSL, and pushes Homebrew another step towards being more bureaucratic.\r\n\r\n(I don't think grepping for stuff in the test implementation is a sufficient substitute, because the tagging really reflects human judgment, and there's so much variation with command line options in the wild.)\r\n\r\nBut I think we should be awfully conservative about adding stuff to the formula DSL, because once it's in, we're basically stuck with it forever. And this will affect our culture, not just our syntax. Pushing for tests at all seems like it was a substantial effort.\r\n\r\nSo while I'm now :+1: on the basic idea of this, maybe it's something we should just mull over for a month or two before actually doing anything about.\r\n\r\n(And take my opinion with a grain of salt: I come from an enterprise software background, and I _love_ this sort of bureaucracy and introspection. :wink: )",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217733107,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-05-08T17:02:49Z",
		"body" : "@ilovezfs 11 execs, 8 regexes, 11 redirections and it won't catch `--help` or `-h`, much less backticks. I'm usually (aggressively) for constructive pipelines, but there's way too much variation between individual tests to make it an effective approach in this case (IMO).\r\n\r\nTo further the point, what about utilities that use a subcommand (e.g. `/bin/foo version`)? What about those that use `-?` for help? We can't control the features of the programs being packaged, but we *can* control how their characteristics are exposed in the formulae.\r\n\r\n> But I think we should be awfully conservative about adding stuff to the formula DSL, because once it's in, we're basically stuck with it forever. And this will affect our culture, not just our syntax. Pushing for tests at all seems like it was a substantial effort.\r\n> \r\n> So while I'm now :+1: on the basic idea of this, maybe it's something we should just mull over for a month or two before actually doing anything about.\r\n\r\n@apjanke 100% behind this. I recognize that changing the DSL is a hard sell, especially in a way that requires both new contributors and maintainers to take on additional work. An abundance of review and debate is necessary :bow: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217733275,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-08T17:05:41Z",
		"body" : "> This sounds like it would be genuinely useful\r\n\r\nWhat will you do with it other than generate a list of formulae with the tag and report about the number and percent of formulae that have this or that kind of tag?\r\n\r\n@woodruffw I see no need to get the exact list. That was the point.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217734009,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-08T17:10:10Z",
		"body" : "> Using the DSL for documentation purposes seems like an abuse unless it's actually functionally doing something to change behavior.\r\n\r\nAgreed.\r\n\r\n> That --version will catch this kind of breakage is frequently not true. Just think about formulae implemented in an interpreted language like Python, where most modules won't even be loaded if only the version is queried. The same applies for compiled programs that have a plugin structure. A test that uses some of the actual functionality of a formula won't (and shouldn't) ever replace an upstream test suite, but will give us much more realistic coverage than a simple --version.\r\n\r\nI'd like a citation here for \"frequently not true\". While I don't disagree with your theory (that's why I used to push harder for non-`--version` tests everywhere) in practice it hasn't been showed to be true.\r\n\r\n> Sorry to be this frank, but my feeling is that you're derailing the discussion here. I agree this is a useful thing to have, but that's completely orthogonal to what is being proposed here.\r\n\r\nIt's not derailing for several reasons:\r\n1. we have a finite amount of time to spend on Homebrew (and GSoC) and to spend a bunch of time working on something with little or no provable end-user benefit and little maintainer benefit is not a good use of that finite time\r\n2. it's a way of improving tests that actually addresses issues we've seen in the wild. \r\n\r\n> What's the issue with making this greppable? I don't see a good alternative to making this part of the DSL if we want to be able to query information about a formula's test (beyond whether it exists or not) from code.\r\n\r\nMy point here was it's already greppable (as demonstrated in this PR). You could make it more so with `TODO: add better test` rather than a DSL.\r\n\r\n> I honestly don't understand this statement. A non-negligible problem of our users is that the software we package ends up being broken. Tests help to ensure it is working properly (which depends on it being installed correctly). Exercising some functionality of the software in the test makes us more confident about that. After all, most users care about the functionality some software provides, not whether <program> --version works.\r\n\r\nPlease point me to 2+ end-user filed issues that would have been caught by CI with a non-`--version` test (not a specific regression test but a \"good\" one like `cmake.rb`). Otherwise we're in \"speculatively fixing bugs\" territory which, to repeat my usual speech, is a bad idea because it bloats our code with YAGNI error checking, pushes more effort onto contributors who want to work with our already underdocumented Formula DSL and doesn't appear to have demonstrable user benefit. \r\n\r\n> A formula's desc is also mostly useless and doesn't affect functionality of brew at all unless you start searching for a description.\r\n\r\nThis was a feature requested by many end-users for a long time and has several commands that interact with it. Not a good example, I fear.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217734010,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-08T17:10:10Z",
		"body" : "> What will you do with it other than generate a list of formulae with the tag and report about the number and percent of formulae that have this or that kind of tag?\r\n\r\nUse it as a TODO list, especially as a \"low hanging fruit\" list for new contributors. Though the latter could be done about as well by listing formulae with no `test do` at all.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217734059,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-05-08T17:11:09Z",
		"body" : "> What will you do with it other than generate a list of formulae with the tag and report about the number and percent of formulae that have this or that kind of tag?\r\n\r\nUltimately, the goal would be to replace `version` and `help` tests with more complex ones, programs permitting. As put by @UniqMartin:\r\n\r\n>That --version will catch this kind of breakage is frequently not true. Just think about formulae implemented in an interpreted language like Python, where most modules won't even be loaded if only the version is queried. The same applies for compiled programs that have a plugin structure. A test that uses some of the actual functionality of a formula won't (and shouldn't) ever replace an upstream test suite, but will give us much more realistic coverage than a simple --version.\r\n\r\nCompiling a list of formula that are more susceptible to undetected breakage is certainly a good goal, from a usability perspective.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217734085,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-08T17:11:37Z",
		"body" : "> But I think we should be awfully conservative about adding stuff to the formula DSL, because once it's in, we're basically stuck with it forever. And this will affect our culture, not just our syntax. Pushing for tests at all seems like it was a substantial effort.\r\n\r\nAgreed with this. If you look at third-party taps many of them don't use `test` at all.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217734230,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-05-08T17:14:23Z",
		"body" : "Oh, just to clarify. I won't be using my GSoC time on this - it'll be dedicated to ruby-macho and the goals we've set out for it.\r\n\r\nThis is just a run-of-the-mill suggestion/contribution :smile: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217734821,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-08T17:25:07Z",
		"body" : "More explicitly, I don't think we should be abusing DSL like this. Adding new DSL is a delicate enough process, let alone modifying active DSL used so widely.\r\n\r\nI appreciate the idea, and I'm certainly not intending to bash William on this (who is routinely great), but I'm sharply üëé on this as-is. I'm seeing minimal user upside, major rewriting of existing tests required with inconsistent application and a general recipe for contributor confusion.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217734872,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-08T17:26:09Z",
		"body" : "Realized one more thing: since ideally you would have all formulae classified this way, this wouldn't be an odd bit of DSL that one could use just when you need it; it would be present in all formulae. Which means it would be another DSL item that all users and contributors would have to learn in order to understand even basic formulae. It would impose a time and attention cost and make the learning curve a bit steeper. That's significant: given how large our user base is, even a tiny increase in the learning curve turns in to a lot of spent time.\r\n\r\nPlus, so many changes to existing formula files to go in the commit history.\r\n\r\nSince this is just classification/documentation and doesn't execute during any `brew` operations, you could mostly implement this using an external data file and tools. The main advantage to having it in the DSL is just prompting contributors to update the tag if needed when they update the test.\r\n\r\nGiven that and Mike's comments, I'm _now_ talked in to strongly thinking that while I would like and use this functionality, we _really_ should not do it as part of the DSL.\r\n\r\nDefinitely appreciate the suggestion though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217735180,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-05-08T17:32:19Z",
		"body" : "> Given that and Mike's comments, I'm now talked in to strongly thinking that while I would like and use this functionality, we really should not do it as part of the DSL.\r\n\r\nIf this is the general consensus, I have to agree. I haven't been around for DSL modifications before, but if they're as involved as stated then we should definitely pursue other approaches to getting this sort of information out of tests.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217735879,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-08T17:46:51Z",
		"body" : "> I haven't been around for DSL modifications before, but if they're as involved as stated...\r\n\r\nYeah, they are a huge deal. Thousands of formula files over dozens of repos (including many outside the organization) and probably a hundred thousand or more users who read formula files. Not to be undertaken lightly. :wink:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217739950,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-08T19:06:38Z",
		"body" : "> I'd like a citation here for \"frequently not true\". While I don't disagree with your theory (that's why I used to push harder for non-`--version` tests everywhere) in practice it hasn't been showed to be true.\r\n\r\nI don't have a citation. My assertion is theoretical, thus nothing more than an educated guess.\r\n\r\n> Please point me to 2+ end-user filed issues that would have been caught by CI with a non-`--version` test (not a specific regression test but a \"good\" one like `cmake.rb`). Otherwise we're in \"speculatively fixing bugs\" territory which, [‚Ä¶]\r\n\r\nAgain, not something I have hard evidence for. I'm just having a hard time getting to grips with the ‚Äúif it hasn't been reported by a user, it's not broken‚Äù mentality (my interpretation, not what you literally wrote).\r\n\r\n> Oh, just to clarify. I won't be using my GSoC time on this - it'll be dedicated to ruby-macho and the goals we've set out for it. This is just a run-of-the-mill suggestion/contribution.\r\n\r\n@woodruffw Thanks for giving this a try! I liked the idea, but I can understand why it's facing this much resistance. (I certainly have some takeaways from this discussion.) I think the outcome of this is pretty clear now, so feel free to close the PR if you agree. And if you feel like it, let's get back to adding tests to formulae that don't have them yet instead of spending more time on this meta issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217740639,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-08T19:19:36Z",
		"body" : "> Again, not something I have hard evidence for. I'm just having a hard time getting to grips with the ‚Äúif it hasn't been reported by a user, it's not broken‚Äù mentality (my interpretation, not what you literally wrote).\r\n\r\nJust as this is worth elaborating: it's not so much \"it's not broken\" as \"we have a long list of other things that _are_ broken that users want fixed\".",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217741079,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-05-08T19:28:07Z",
		"body" : "> Thanks for giving this a try! I liked the idea, but I can understand why it's facing this much resistance. (I certainly have some takeaways from this discussion.) I think the outcome of this is pretty clear now, so feel free to close the PR if you agree. And if you feel like it, let's get back to adding tests to formulae that don't have them yet instead of spending more time on this meta issue.\r\n\r\nThank you too, and to everybody who gave feedback! The benefits of this approach don't seem to outweigh the increased complexity and bureaucracy they'll bring, so I'm closing this PR.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217741494,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-08T19:36:51Z",
		"body" : "> Thank you too, and to everybody who gave feedback! The benefits of this approach don't seem to outweigh the increased complexity and bureaucracy they'll bring, so I'm closing this PR.\r\n\r\nThanks for understanding and for the PR @woodruffw üôá ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217753046,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-08T23:38:31Z",
		"body" : "Here's an idea for getting some of the functionality this would provide but without altering any DSL: #221. It just adds an option to `brew audit` to make the output more suitable for grepping.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217754192,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-09T00:03:45Z",
		"body" : "> Here's an idea for getting some of the functionality this would provide but without altering any DSL: #221.\r\n\r\nThat PR is of course more general, but the result of the example provided therein (find formulae that have no test defined) can already be achieved as follows (and much more quickly as `brew audit` has quite some overhead). Assuming `homebrew/dev-tools` has been tapped:\r\n\r\n```shell\r\nbrew for-each-formula 'puts f.full_name unless f.test_defined?'\r\nbrew for-each-formula 'puts f.full_name if f.name.start_with?(\"a\") && !f.test_defined?' # Some basic filtering.\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217754318,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-09T00:06:09Z",
		"body" : "Yeah, that's better for checking just the tests. Doing a full `audit` is kind of slow.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 208
	},
	{
		"id" : 217599116,
		"user" : {
			"login" : "hfiguiere"
		},
		"created_at" : "2016-05-07T02:11:03Z",
		"body" : "Worse:\r\n\r\n````\r\n$ wget --no-check-certificate https://tango.freedesktop.org/releases/icon-naming-utils-0.8.90.tar.gz\r\n--2016-05-06 22:10:21--  https://tango.freedesktop.org/releases/icon-naming-utils-0.8.90.tar.gz\r\nResolving tango.freedesktop.org... 131.252.210.176, 2610:10:20:722:a800:ff:feda:470f\r\nConnecting to tango.freedesktop.org|131.252.210.176|:443... connected.\r\nWARNING: no certificate subject alternative name matches\r\n\trequested host name 'tango.freedesktop.org'.\r\nHTTP request sent, awaiting response... 404 Not Found\r\n2016-05-06 22:10:21 ERROR 404: Not Found.\r\n````",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 209
	},
	{
		"id" : 217599722,
		"user" : {
			"login" : "hfiguiere"
		},
		"created_at" : "2016-05-07T02:24:33Z",
		"body" : "Found the tar.bz2 in a src RPM from Fedora, and edited the formula.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 209
	},
	{
		"id" : 217601403,
		"user" : {
			"login" : "hfiguiere"
		},
		"created_at" : "2016-05-07T02:53:55Z",
		"body" : "Debian has the verbatim tarball. using that. See PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 209
	},
	{
		"id" : 217602856,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-07T03:27:57Z",
		"body" : "Closing in favour of https://github.com/Homebrew/homebrew-core/pull/939.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 209
	},
	{
		"id" : 217603569,
		"user" : {
			"login" : "hfiguiere"
		},
		"created_at" : "2016-05-07T03:38:56Z",
		"body" : "Also I mistakenly filed it here instead of -core, I apologize.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 209
	},
	{
		"id" : 217727385,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-08T15:36:49Z",
		"body" : "> From my point of view you hid an one-liner somewhere people are not going to look easily... that downright sneaky.\r\n\r\nFor a start, it's not a one liner. It's an entire block of a message, and now has its own separate command `brew analytics` which offers a simple on/off switch.\r\n\r\nIf you have something productive to add, please let us know. Otherwise there's a queue of people who have insisted we're not decent humans these past couple of weeks you can join, Thanks.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 210
	},
	{
		"id" : 217730567,
		"user" : {
			"login" : "jayhesselberth"
		},
		"created_at" : "2016-05-08T16:19:48Z",
		"body" : "Fixed the first problem. Now getting the (possibly related, looks similar) error:\r\n\r\n``` bash\r\n==> Upgrading vim\r\nError: undefined method `locate' for OS::Mac:Module\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/usr/local/Library/Homebrew/os/mac/sdk.rb:40:in `sdk_paths'\r\n/usr/local/Library/Homebrew/os/mac/sdk.rb:18:in `sdk_for'\r\n/usr/local/Library/Homebrew/os/mac.rb:97:in `sdk'\r\n/usr/local/Library/Homebrew/os/mac.rb:108:in `sdk_path'\r\n/usr/local/Library/Homebrew/extend/ENV/std.rb:175:in `remove_macosxsdk'\r\n/usr/local/Library/Homebrew/extend/ENV/std.rb:193:in `macosxsdk'\r\n/usr/local/Library/Homebrew/extend/ENV/std.rb:64:in `setup_build_environment'\r\n/usr/local/Library/Homebrew/build.rb:91:in `install'\r\n/usr/local/Library/Homebrew/build.rb:178:in `<main>'\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 216
	},
	{
		"id" : 217730682,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-08T16:22:11Z",
		"body" : "@jayhesselberth On it. Can I see your `brew config`? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 216
	},
	{
		"id" : 217847105,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-09T12:09:29Z",
		"body" : "@jayhesselberth Still interested in seeing your `brew config` if you get the chance so I can figure out why I didn't hit this locally. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 216
	},
	{
		"id" : 217731763,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-08T16:43:01Z",
		"body" : "Thanks for picking this up! It needs a bit more work though (see my code comment).\r\n\r\n> The only questionable part of the change is that I no longer set Homebrew.failed = 1, but I believe this is a side-effectless change.\r\n\r\nThat's actually not an issue, as you replaced this with raising an exception and this will also make `brew` exit with an error code. Thus your change is correct and won't alter the behavior (aside from possibly printing a much better help message).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 217
	},
	{
		"id" : 217734703,
		"user" : {
			"login" : "jamandbees"
		},
		"created_at" : "2016-05-08T17:22:40Z",
		"body" : "@UniqMartin I've made the changes you suggested; I'm not super familiar with gist-logs, but I think I've captured what it does and what its one option does.\r\n\r\nWhen I generated the new man page, the man page looks fine in the man pager, and the html version looks fine in a browser, but it looks like I've got a different version of whichever gem generates the html version. You'll see in the diff that there's some (semantically insignificant) whitespace introduced, and some colons and whatnot introduced. If you'd prefer I regenerate the html man page, can you let me know what gem versions I should use to generate the html how  you'd prefer it?\r\n\r\nThanks for the feedback!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 217
	},
	{
		"id" : 217735245,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-08T17:33:52Z",
		"body" : "> I've made the changes you suggested; I'm not super familiar with gist-logs, but I think I've captured what it does and what its one option does.\r\n\r\nYou did. Great work so far! See my code comments for some minor adjustments and and explanation for why the regenerated files changed so drastically.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 217
	},
	{
		"id" : 217742078,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-08T19:48:07Z",
		"body" : "Loving this so far üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 217
	},
	{
		"id" : 217749337,
		"user" : {
			"login" : "jamandbees"
		},
		"created_at" : "2016-05-08T22:10:46Z",
		"body" : "@UniqMartin I've made the changes you suggested. This time, I made sure to run my diff tool against the man page in /usr/local/share/man/man1/brew.1. I can see the changes I've made, but there's an extra line difference. On line 284 of the man page, the following formatting has changed:\r\n\r\n\\fBHOMEBREW_BUILD_FROM_SOURCE\\fR has become HOMEBREW_BUILD_FROM_SOURCE\r\n\r\nI changed the wording in that file from \"several different ways\" to \"in several different ways\", as that was the origination point for my copying the wording to Specifying Formulae, so I wanted to fix the same wording issue in both places I knew it existed.\r\n\r\nIt seemed like when I removed the change and regenerated the man page, the above two control characters around HOMEBREW_BUILD_FROM_SOURCE were lost. If I check out the master branch and generate the man pages from master, I see the same change to the control characters surrounding that variable. I don't see any easily discernible cause, but I don't think that change is originating from the changes I've made.\r\n\r\nThanks for spending so much time with me on this! I wanted to use making a help change as a stepping stone to actually working a little more on homebrew, and you've been incredibly welcoming.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 217
	},
	{
		"id" : 217753638,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-08T23:52:38Z",
		"body" : "> I've made the changes you suggested.\r\n\r\nI'm sorry this needs another round trip, but there still a few things that need to be addressed:\r\n\r\n-  Capitalization (you seem to have missed some comments): ‚Äúgist‚Äù ‚û°Ô∏è ‚ÄúGist‚Äù, ‚Äúgithub‚Äù ‚û°Ô∏è ‚ÄúGitHub‚Äù.\r\n- `[SPECIFYING FORMULAE][]`: You added the trailing `[]` but then (accidentally) reverted this change in a later commit.\r\n- Make sure to re-generate the man page and HTML version of it by running `brew man` as the very last step (a quick inspection shows that your changes and these generated files are out of sync).\r\n\r\n> I can see the changes I've made, but there's an extra line difference. On line 284 of the man page, the following formatting has changed:\r\n> \r\n> \\fBHOMEBREW_BUILD_FROM_SOURCE\\fR has become HOMEBREW_BUILD_FROM_SOURCE\r\n\r\nThese are some last-minute changes from #205 that apparently didn't make it into the final commit. (It's easy to forget to re-run `brew man` as you've already learned.) I fixed this now. If you update your Homebrew via `brew update`, check out your `gist-logs-help` branch, and run `git rebase master` (this should complete without any conflicts), then your changes will be based off the latest commit to `master` and those spurious changes will be gone. (You should do this before adding the above mentioned changes.)\r\n\r\nIf you feel comfortable using `git rebase --interactive`, consider squashing your branch to a single commit and then pushing that, when you are done. Don't worry if you aren't. I can also do that for you when integrating your changes into Homebrew. No matter if you squashed your commits or not, you should be able to see the changes that will end up in this PR once you push if you run `git diff master...gist-logs-help` locally.\r\n\r\n> I changed the wording in that file from \"several different ways\" to \"in several different ways\", as that was the origination point for my copying the wording to Specifying Formulae, so I wanted to fix the same wording issue in both places I knew it existed.\r\n\r\nThat's fine. Thanks!\r\n\r\n> Thanks for spending so much time with me on this! I wanted to use making a help change as a stepping stone to actually working a little more on homebrew, and you've been incredibly welcoming.\r\n\r\nI'm glad you're feeling that way. Thanks for the kind words! ‚ù§Ô∏è",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 217
	},
	{
		"id" : 217763949,
		"user" : {
			"login" : "jamandbees"
		},
		"created_at" : "2016-05-09T02:27:32Z",
		"body" : "@UniqMartin You've been so patient with me, thank you!\r\n\r\nI've squashed my changes into one commit and pushed them to GitHub. It's funny how so much work over the course of a day is actually only a few lines when squashed down.\r\n\r\nIf I've missed another detail, please don't hesitate to let me know. I think I caught everything you mentioned this time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 217
	},
	{
		"id" : 217765027,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-09T02:40:45Z",
		"body" : "Merged in a558629654c28fff1ccfb8e9895485e0da79e167. Thank you for this contribution to Homebrew, @jamandbees! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 217
	},
	{
		"id" : 217732986,
		"user" : {
			"login" : "Tristor"
		},
		"created_at" : "2016-05-08T17:00:24Z",
		"body" : "I ran `brew update` again right after creating this issue, and it appears the issue has already been resolved üëç \r\n\r\n```\r\n‚ùØ brew update\r\nUpdated Homebrew from 9e7b8c6 to 5041520.\r\nNo changes to formulae.\r\n```\r\n\r\nThanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 218
	},
	{
		"id" : 217736631,
		"user" : {
			"login" : "glaszig"
		},
		"created_at" : "2016-05-08T18:01:00Z",
		"body" : "just did a `brew update` and now get a similar issue. related?\r\n\r\n```\r\n$ brew upgrade imagemagick\r\n==> Upgrading 1 outdated package, with result:\r\nimagemagick 6.9.3-10\r\n==> Upgrading imagemagick\r\n==> Installing dependencies for imagemagick: libtiff, freetype, fontconfig\r\n==> Installing imagemagick dependency: libtiff\r\n==> Downloading https://homebrew.bintray.com/bottles/libtiff-4.0.6.el_capitan.bottle.tar.gz\r\nAlready downloaded: /Library/Caches/Homebrew/libtiff-4.0.6.el_capitan.bottle.tar.gz\r\n==> Pouring libtiff-4.0.6.el_capitan.bottle.tar.gz\r\nError: undefined method `default_compiler' for OS::Mac:Module\r\nWarning: Bottle installation failed: building from source.\r\n==> Downloading http://download.osgeo.org/libtiff/tiff-4.0.6.tar.gz\r\nAlready downloaded: /Library/Caches/Homebrew/libtiff-4.0.6.tar.gz\r\n==> ./configure --prefix=/usr/local/Cellar/libtiff/4.0.6 --without-x --disable-lzma --with-jpeg-include-dir=/usr/local/opt/jpeg/include --with-jpeg-lib-dir=/usr/local/opt/jpeg/lib\r\n==> make install\r\nError: undefined method `default_compiler' for OS::Mac:Module\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/usr/local/Library/Homebrew/tab.rb:190:in `compiler'\r\n/usr/local/Library/Homebrew/tab.rb:196:in `cxxstdlib'\r\n/usr/local/Library/Homebrew/cxxstdlib.rb:61:in `block in check_dependencies'\r\n/usr/local/Library/Homebrew/cxxstdlib.rb:56:in `each'\r\n/usr/local/Library/Homebrew/cxxstdlib.rb:56:in `check_dependencies'\r\n/usr/local/Library/Homebrew/cxxstdlib.rb:29:in `check_compatibility'\r\n/usr/local/Library/Homebrew/build.rb:145:in `detect_stdlibs'\r\n/usr/local/Library/Homebrew/build.rb:133:in `block in install'\r\n/usr/local/Library/Homebrew/formula.rb:934:in `block in brew'\r\n/usr/local/Library/Homebrew/formula.rb:1563:in `block in stage'\r\n/usr/local/Library/Homebrew/resource.rb:98:in `block in unpack'\r\n/usr/local/Library/Homebrew/extend/fileutils.rb:14:in `block in mktemp'\r\n/usr/local/Library/Homebrew/extend/fileutils.rb:75:in `block in run'\r\n/usr/local/Library/Homebrew/extend/fileutils.rb:75:in `chdir'\r\n/usr/local/Library/Homebrew/extend/fileutils.rb:75:in `run'\r\n/usr/local/Library/Homebrew/extend/fileutils.rb:13:in `mktemp'\r\n/usr/local/Library/Homebrew/resource.rb:94:in `unpack'\r\n/usr/local/Library/Homebrew/resource.rb:86:in `stage'\r\n/usr/local/Library/Homebrew/formula.rb:1553:in `stage'\r\n/usr/local/Library/Homebrew/formula.rb:929:in `brew'\r\n/usr/local/Library/Homebrew/build.rb:108:in `install'\r\n/usr/local/Library/Homebrew/build.rb:178:in `<main>'\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 219
	},
	{
		"id" : 217737642,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-08T18:20:31Z",
		"body" : "@glaszig Yes, it's related but different. Should be resolved by 86fa42b36c98e482490ca347849e041ee9316011. Can you `brew update` and retry?\r\n\r\n@rolandjitsu This issue seems a bit more involved and is related to changes made today in #168. I'm looking into this, but tagging the original author (@mikemcquaid) so that he will notice and possibly beat me to resolving this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 219
	},
	{
		"id" : 217739253,
		"user" : {
			"login" : "glaszig"
		},
		"created_at" : "2016-05-08T18:53:14Z",
		"body" : "@UniqMartin works for me. thx.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 219
	},
	{
		"id" : 217742953,
		"user" : {
			"login" : "mankoff"
		},
		"created_at" : "2016-05-08T20:04:27Z",
		"body" : "Full error message is:\r\n\r\n```\r\n$ brew install octave\r\nError: uninitialized constant OS::Mac::DeveloperTools\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/usr/local/Library/Homebrew/compat/macos.rb:85:in `clang_version'\r\n/usr/local/Library/Taps/homebrew/homebrew-science/octave.rb:32:in `<class:Octave>'\r\n/usr/local/Library/Taps/homebrew/homebrew-science/octave.rb:1:in `load_formula'\r\n/usr/local/Library/Homebrew/formulary.rb:21:in `module_eval'\r\n/usr/local/Library/Homebrew/formulary.rb:21:in `load_formula'\r\n/usr/local/Library/Homebrew/formulary.rb:38:in `load_formula_from_path'\r\n/usr/local/Library/Homebrew/formulary.rb:87:in `load_file'\r\n/usr/local/Library/Homebrew/formulary.rb:78:in `klass'\r\n/usr/local/Library/Homebrew/formulary.rb:74:in `get_formula'\r\n/usr/local/Library/Homebrew/formulary.rb:211:in `factory'\r\n/usr/local/Library/Homebrew/formulary.rb:356:in `find_with_priority'\r\n/usr/local/Library/Homebrew/extend/ARGV.rb:20:in `block in formulae'\r\n/usr/local/Library/Homebrew/extend/ARGV.rb:16:in `map'\r\n/usr/local/Library/Homebrew/extend/ARGV.rb:16:in `formulae'\r\n/usr/local/Library/Homebrew/cmd/install.rb:100:in `install'\r\n/usr/local/Library/brew.rb:87:in `<main>'\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 220
	},
	{
		"id" : 217746963,
		"user" : {
			"login" : "lanjiann"
		},
		"created_at" : "2016-05-08T21:22:25Z",
		"body" : "**Similar Bug Report:**\r\nI just `brew update` (more than twice), and then `brew upgrade`. I get the error message below:\r\n\r\n```\r\nError: uninitialized constant OS::Mac::DeveloperTools\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/usr/local/Library/Homebrew/compat/macos.rb:87:in `clang_version'\r\n/usr/local/Library/Taps/homebrew/homebrew-science/octave.rb:32:in `<class:Octave>'\r\n/usr/local/Library/Taps/homebrew/homebrew-science/octave.rb:1:in `load_formula'\r\n/usr/local/Library/Homebrew/formulary.rb:21:in `module_eval'\r\n/usr/local/Library/Homebrew/formulary.rb:21:in `load_formula'\r\n/usr/local/Library/Homebrew/formulary.rb:38:in `load_formula_from_path'\r\n/usr/local/Library/Homebrew/formulary.rb:87:in `load_file'\r\n/usr/local/Library/Homebrew/formulary.rb:78:in `klass'\r\n/usr/local/Library/Homebrew/formulary.rb:74:in `get_formula'\r\n/usr/local/Library/Homebrew/formulary.rb:171:in `get_formula'\r\n/usr/local/Library/Homebrew/formulary.rb:211:in `factory'\r\n/usr/local/Library/Homebrew/formulary.rb:230:in `from_rack'\r\n/usr/local/Library/Homebrew/formula.rb:1141:in `block in installed'\r\n/usr/local/Library/Homebrew/formula.rb:1139:in `map'\r\n/usr/local/Library/Homebrew/formula.rb:1139:in `installed'\r\n/usr/local/Library/Homebrew/cmd/upgrade.rb:21:in `upgrade'\r\n/usr/local/Library/brew.rb:87:in `<main>'\r\n```\r\n\r\nMy softwares have the same versions information as **mankoff**, and  I'm pretty sure that I run `brew update` when @mikemcquaid has already committed some bug fix code and closed this issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 220
	},
	{
		"id" : 217747882,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-08T21:40:24Z",
		"body" : "@lanjiann Thanks for the report! The previous fix unfortunately contained a typo. 4059d5fc2634e24a0b5f9f02a416bda1a7016435 should have fixed things for real (tested locally using `brew info octave`). `brew upgrade` should finally work again for you after one final `brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 220
	},
	{
		"id" : 217754399,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-09T00:07:41Z",
		"body" : "@UniqMartin noted that that missing-test search could be done more easily with a script and `dev-tools`.\r\n\r\n```shell\r\nbrew for-each-formula 'puts f.full_name unless f.test_defined?'\r\nbrew for-each-formula 'puts f.full_name if f.name.start_with?(\"a\") && !f.test_defined?' # Some basic filtering.\r\n```\r\n\r\nNot sure how useful this is given that alternate approach, since that'd be my initial use case for it. Still might be useful for seeing how widespread certain audit violations are.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 221
	},
	{
		"id" : 217755035,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-09T00:20:27Z",
		"body" : "> This \"`--display-filename`\" might not be the best wording of the option name, since it actually displays formula names instead of file paths.\r\n\r\nWhy not make that output the path of the formula files instead? Granted, it will be a bit more verbose, but that shouldn't be a big issue if `grep`pability is the primary concern. Printing the file name has the benefit that it allows things like: Cmd+Click on a file name in my terminal will immediately open it in my editor.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 221
	},
	{
		"id" : 217756780,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-09T00:54:31Z",
		"body" : "> Why not make that output the path of the formula files instead? \r\n\r\nThat's a good idea.\r\n\r\n> Cmd+Click on a file name in my terminal will immediately open it in my editor.\r\n\r\nMine too. I'm using iTerm2.\r\n\r\nChanged it to do so. Now this is more useful.\r\n\r\n```\r\n$ brew audit --strict --display-filename [ab]*.rb | grep 'test do'\r\n/usr/local/Library/Taps/homebrew/homebrew-science/alembic.rb: * A `test do` test block should be added\r\n/usr/local/Library/Taps/homebrew/homebrew-science/arow++.rb: * A `test do` test block should be added\r\n/usr/local/Library/Taps/homebrew/homebrew-science/atomic-pseudopotential-engine.rb: * A `test do` test block should be added\r\n/usr/local/Library/Taps/homebrew/homebrew-science/bact.rb: * A `test do` test block should be added\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 221
	},
	{
		"id" : 217787750,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-09T06:45:45Z",
		"body" : "Looks good üëç. I would suggest perhaps instead of full paths you could use relative to `HOMEBREW_REPOSITORY` or even `Library/Taps`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 221
	},
	{
		"id" : 218038844,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-10T01:49:23Z",
		"body" : "I actually like the full absolute-path display vs tap-relative display, because it means you can usefully grab that output in the shell or terminal and use it with non-`brew` commands. E.g. I can copy-and-paste to a `vi <file>` command, or send it through another grep/sed pipe to do something, or Cmd-click on it in iTerm2 or whatever Martin is running.\r\n\r\nThough the relative-path or formula name is more human-readable.\r\n\r\nIf we have one or the other, I'd prefer the full absolute path. Is it worth having an additional option to switch between them? I could see that being useful if you're grepping for human consumption vs grepping for script consumption. (And if you're running this for script consumption, adding another command-line option is no big deal.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 221
	},
	{
		"id" : 218075383,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T07:03:57Z",
		"body" : "@apjanke Nah, feel free to stick with absolute üëç \r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 221
	},
	{
		"id" : 218369548,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-11T06:02:23Z",
		"body" : ":+1: In general and for sticking with absolute path names.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 221
	},
	{
		"id" : 217796423,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-09T07:41:35Z",
		"body" : "Thanks @koraktor!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 222
	},
	{
		"id" : 217821271,
		"user" : {
			"login" : "retokromer"
		},
		"created_at" : "2016-05-09T09:46:20Z",
		"body" : "Please restore the alignment.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 223
	},
	{
		"id" : 217837220,
		"user" : {
			"login" : "sedm0784"
		},
		"created_at" : "2016-05-09T11:10:55Z",
		"body" : "Forgot to write that the machine is running OS X 10.11.4.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 224
	},
	{
		"id" : 217853347,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-09T12:41:11Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 225
	},
	{
		"id" : 217894251,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-09T15:15:41Z",
		"body" : "CC @xu-cheng for more thoughts about why this changed happens; I'm personally lacking context here.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 226
	},
	{
		"id" : 218033932,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-10T01:11:43Z",
		"body" : "TL;DR: What exactly do you want to accomplish here by leaving `$JAVA_HOME` undefined? I'll bet you can accomplish that through other means. Or if you can't, we can provide a purpose-designed hook for it. `brew` probably really does want to make sure that `$JAVA_HOME` is defined and controlled by `brew`, as part of setting up a uniform build environment.\r\n\r\nDetails follow:\r\n\r\n------------\r\n\r\nHomebrew takes responsibility for locating all the needed compilers and runtimes for software builds. it accepts user input, but doesn't just pass through the user's environment for build tools to use to do their own location logic. We try to reduce variance and impose control, and minimize sensitivity to user configuration.\r\n\r\nIt identifies and selects the JDK it's going to use for building, and setting `$JAVA_HOME` \r\n\r\n> because if JAVA_HOME isn't set, then won't Java-based commands just use the default anyway?\r\n\r\nThis begs the question of \"what is the default, and how is it chosen?\". And there's a lot of variance between Java packages' build processes, because Java never standardized any platform-specific deployment processes. (Much to its and our detriment, but it is what it is.)\r\n\r\nAs an experienced Java developer, I think Homebrew almost certainly wants to define and take responsibility for `$JAVA_HOME` within its builds. We can (and IMHO probably should) [respect user-supplied `$JAVA_HOME`](https://github.com/Homebrew/brew/pull/183) for location of JDK installations. But leaving `$JAVA_HOME` undefined and allowing Java packages to do their own JDK detection is a recipe for unending pain, for Homebrew users and maintainers both.\r\n\r\nHomebrew definitely should not be sensitive to a user-specific `~/.mavenrc`. I would also argue that it should not be sensitive to a machine-specific `/etc/mavenrc`, either. In Maven terms, Homebrew produces globally-relevant build artifacts that are relocatable to all users. `~/.mavenrc` and `/etc/mavenrc` are relevant for developers. If they provide caching and upstream provider configuration, we should respect that, but that's mostly for performance. Anything that changes the actual outcome of a build is something Homebrew would want to filter out. This is analagous to changing the location of the upstream `homebrew/brew` repo and bottle domain: probably useful to some people, but an advanced configuration, and something we should reject hard in the normal use case.\r\n\r\nSo, _all that being said_: yeah, Homebrew's interaction with Maven is a little half-assed. But Homebrew's goal is to minimize user-dependent variability, and to provide standard quasi-system-level builds of stuff. I think `$JAVA_HOME` JDK detection and Maven configuration are largely orthogonal: Maven is mostly concerned about artifact identification and caching, and has a very good system for that. If we can align our sandboxing with the Maven repo caching configuration, that could make our builds faster and smoother. But in general, Maven configuration that alters the outcome of a build, as opposed to how you fetch centrally-tracked artifacts, is non-brewy.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 226
	},
	{
		"id" : 218035123,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-10T01:20:47Z",
		"body" : "Put another way: When you are installing Java software using Homebrew, `brew` is the primary installation tool, and its use of Maven is an internal implementation detail, which should not be sensitive to the user environment except in ways that `brew` provides as part of its public API. Homebrew installs packages for users, not developers of those packages.\r\n\r\nIMHO, the whole fact that a package is even implemented in Java should be basically transparent to end users. ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 226
	},
	{
		"id" : 221288833,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-24T14:28:27Z",
		"body" : "I believe @apjanke has provided an extensive answer. Feel free to follow up, if there's still something not addressed by it. But I'm closing this now, as I don't see something actionable (and no bug awaiting a fix).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 226
	},
	{
		"id" : 217945753,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-09T18:20:23Z",
		"body" : "What is the output of `ls -AlF /usr/local/Library/Taps` and `ls -AlF /usr/local/Library/Taps/*`?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 227
	},
	{
		"id" : 217958781,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-09T19:06:29Z",
		"body" : "> What is the output of `ls -AlF /usr/local/Library/Taps` and `ls -AlF /usr/local/Library/Taps/*`?\r\n\r\nNevermind! I was able to reproduce this locally and fixed the bug. Thanks for reporting it! Can you please do the following one last time and report back whether it worked this time?\r\n\r\n```\r\ncd /usr/local\r\ngit checkout master\r\ngit fetch origin\r\ngit reset --hard origin/master\r\nbrew update\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 227
	},
	{
		"id" : 217959729,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-09T19:10:25Z",
		"body" : "cc @xu-cheng Do 93e0f4f9465978460d411f27214e19ae3fc4d294 and 500f9eada854c1939bf9a0caf94085214c9399b0 need to be backported to [Homebrew/legacy-homebrew](https://github.com/Homebrew/legacy-homebrew)?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 227
	},
	{
		"id" : 217962076,
		"user" : {
			"login" : "geleiademocoto"
		},
		"created_at" : "2016-05-09T19:19:38Z",
		"body" : "@UniqMartin \r\nIt worked! Thank you!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 227
	},
	{
		"id" : 218084378,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-10T07:54:04Z",
		"body" : "@UniqMartin I think so. Thanks for catching this. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 227
	},
	{
		"id" : 218298132,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-10T21:31:29Z",
		"body" : "> I think so. Thanks for catching this.\r\n\r\nDone in https://github.com/Homebrew/legacy-homebrew/commit/43dda695290bb4fcc5ed458759ce797c41abb83e and https://github.com/Homebrew/legacy-homebrew/commit/f0b70e5725662377ea2feb14f59e407bd7071fe0.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 227
	},
	{
		"id" : 218092977,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T08:35:06Z",
		"body" : "> Methods that are expected to be overridden by child classes cannot be alias_method'ed.\r\n\r\nWhat would the correct solution here be, for our learning?\r\n\r\nUnrelatedly, `f.startup_plist` is deprecated at this point anyway so should probably just be removed if it's been broken for this long.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 228
	},
	{
		"id" : 218210619,
		"user" : {
			"login" : "13k"
		},
		"created_at" : "2016-05-10T16:18:13Z",
		"body" : "Simply define `#startup_list` invoking `#plist`:\r\n\r\n```ruby\r\nclass Formula\r\n  def plist; nil; end\r\n  def startup_plist; plist; end\r\nend\r\n\r\nclass App < Formula\r\n  def plist; \"<!-- XML is like violence -->\"; end\r\nend\r\n\r\nf = Formula.new; p [f.plist, f.startup_plist]\r\n# => [nil, nil]\r\napp = App.new; p [app.plist, app.startup_plist]\r\n# => [\"<!-- XML is like violence -->\", \"<!-- XML is like violence -->\"]\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 228
	},
	{
		"id" : 218093092,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T08:35:38Z",
		"body" : "Yeh, somewhat a known issue but it should probably not be e.g. doing the commit.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 229
	},
	{
		"id" : 218094031,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-10T08:39:53Z",
		"body" : "It's looking up version from the old loaded formula file. Could it load the formula from a temporary copy of that file that has had the string replacements done?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 229
	},
	{
		"id" : 218094930,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T08:43:42Z",
		"body" : "If it's dry-run we could maybe just fake it?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 229
	},
	{
		"id" : 218094952,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T08:43:48Z",
		"body" : "(and not write any files)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 229
	},
	{
		"id" : 218095437,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-10T08:45:52Z",
		"body" : "Yeah either temporary file in the Homebrew temporary directory, or load the file into memory, modify in memory, and then load formula from that modified data.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 229
	},
	{
		"id" : 226622386,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-16T21:42:03Z",
		"body" : "Closed via https://github.com/Homebrew/brew/pull/318",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 229
	},
	{
		"id" : 218136874,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T12:00:37Z",
		"body" : "What's the output of  `git clone https://github.com/Homebrew/brew`?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 230
	},
	{
		"id" : 218136992,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T12:01:10Z",
		"body" : "and `git clone https://github.com/Homebrew/homebrew-core /usr/local/Library/Taps/homebrew/homebrew-core --config core.autocrlf=false --depth=1`",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 230
	},
	{
		"id" : 218147578,
		"user" : {
			"login" : "sebastientaggart"
		},
		"created_at" : "2016-05-10T12:51:20Z",
		"body" : "```\r\n/usr/local *$ git clone https://github.com/Homebrew/brew\r\nCloning into 'brew'...\r\nfatal: repository 'https://github.com/Homebrew/brew/' not found\r\n```\r\n\r\n```\r\n/usr/local *$ git clone https://github.com/Homebrew/homebrew-core /usr/local/Library/Taps/homebrew/homebrew-core --config core.autocrlf=false --depth=1\r\nCloning into '/usr/local/Library/Taps/homebrew/homebrew-core'...\r\nfatal: repository 'https://github.com/Homebrew/homebrew-core/' not found\r\n```\r\n\r\nHowever, ``git clone https://github.com/Homebrew/brew.git`` at least connects...\r\n```\r\n/usr/local *$ git clone https://github.com/Homebrew/brew.git\r\nCloning into 'brew'...\r\nremote: Counting objects: 58211, done.\r\nremote: Compressing objects: 100% (77/77), done.\r\nremote: Total 58211 (delta 47), reused 0 (delta 0), pack-reused 58123\r\nReceiving objects: 100% (58211/58211), 11.39 MiB | 3.64 MiB/s, done.\r\nResolving deltas: 100% (40765/40765), done.\r\nChecking connectivity... done.\r\n```\r\n\r\n\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 230
	},
	{
		"id" : 218148128,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-10T12:53:41Z",
		"body" : "@sebastientaggart It sounds like you may have some issues with your ISP and/or proxy.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 230
	},
	{
		"id" : 218149576,
		"user" : {
			"login" : "sebastientaggart"
		},
		"created_at" : "2016-05-10T12:59:26Z",
		"body" : "In case anyone happens to run into something similar, @mikemcquaid you are correct, thank you.\r\n\r\nI don't have anything messing with the connection locally that I know of, so to test the ISP I SSH tunneled into an offsite machine and ran ``git clone https://github.com/Homebrew/brew``, and voila, worked fine.  Now the install script works as expected, and I found out I've nuked the homebrew install chasing a red herring.  \r\n\r\nOh well, at least it's easy to install everything back.  Thanks very much for the support.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 230
	},
	{
		"id" : 218150243,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-10T13:02:20Z",
		"body" : "@sebastientaggart next time use https://github.com/Homebrew/homebrew-bundle :)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 230
	},
	{
		"id" : 218150633,
		"user" : {
			"login" : "sebastientaggart"
		},
		"created_at" : "2016-05-10T13:03:59Z",
		"body" : "@ilovezfs thanks for the suggestion, why would that have helped me in this situation?  I've never heard of homebrew-bundle",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 230
	},
	{
		"id" : 218151270,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-10T13:06:39Z",
		"body" : "It lets you create a template file of your existing install, including customized build options, taps, etc., so that reassembling an equivalent installation can later be triggered with a single command.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 230
	},
	{
		"id" : 218364163,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-11T05:18:47Z",
		"body" : "Tiny nits but otherwise LGTM üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 231
	},
	{
		"id" : 218364342,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-11T05:20:18Z",
		"body" : "Seems good to me overall.\r\n\r\nCouple questions:\r\n\r\nWhy disallow `-` in option names?\r\n\r\n~~And why disallow empty strings as the argument value? Even though we don't use it for anything now AFAIK, it seems like a legit usage to explicitly set something to an empty string. For example, in Makefiles, you might want `DESTDIR` or a program name prefix to be the empty string, which would correspond to a command line option like `--destdir=` or `--destdir=\"\"` or `--program-prefix=''`. Allowing syntax for explicitly setting something to an empty string can make option processing code simpler, especially when you're generating argument lists to be passed to another program; otherwise the caller has to both be aware of the callee's default behavior and deliberately remove arguments to get the default value, instead of just setting everything from a key/value set.~~\r\n\r\nEDIT: That whole last paragraph was irrelevant because I misread what \"arg\" was referring to in the original PR. Disregard.\r\n\r\nInstead of just disallowing `-` and `=`, maybe it would make more sense to positively construct the pattern for valid option names, (e.g. `/^[a-zA-Z0-9_-]+$/`) and disallow everything that doesn't match it. The new logic still allows for spaces, special characters, and wacky unicode stuff, like `--‚òÉ=frosty`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 231
	},
	{
		"id" : 218364885,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-11T05:24:57Z",
		"body" : "May be a good opportunity for a reword, too. The use of `arg` as a variable name and term in prose here threw me off a bit, because it doesn't align with what seems to be conventional use for it. In command line parsing, the whole `--foo=bar` token is a command line \"argument\", and when it's interpreted as an option, then `foo` or `--foo` is the \"option name\", and `bar` is the \"option value\" or \"option argument\" aka \"optarg\". But here we're using \"arg\" to refer to the `foo` part (I think). I haven't seen anything else call that part an \"argument\". A `def value(name)` or `def value(option_name)` might make more sense.\r\n\r\nIn fact, I just realized that I made this mistake while reading this PR: when you said \"Don't allow for ... an empty `<arg>`\", I misread that as meaning the `bar` value part. You can disregard that whole paragraph I wrote about \"empty strings as the argument value\".",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 231
	},
	{
		"id" : 218366332,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-11T05:36:43Z",
		"body" : "> Why disallow `-` in option names?\r\n\r\nYou are right. This is simply a mistake and would break a lot of stuff. What I meant to prevent by this was funky stuff like `---option=` (notice the third dash), but right now it would also prevent legitimate cases like `--program-prefix=`.\r\n\r\n> And why disallow empty strings as the argument value?\r\n\r\nI realize you noticed this already, but just to be super clear: The intention is to prevent `--=value`; `--name=` is of course perfectly valid and desirable. (In fact one of the aims of this change is to allow for `--name=`, i.e. `ARGV.value(\"name\")` should return an empty string but currently returns `nil`.)\r\n\r\n> Instead of just disallowing `-` and `=`, maybe it would make more sense to positively construct the pattern for valid option names, (e.g. `/^[a-zA-Z0-9_-]+$/`) and disallow everything that doesn't match it. The new logic still allows for spaces, special characters, and wacky unicode stuff, like `--‚òÉ=frosty`.\r\n\r\nThat's an excellent suggestion. I like the Unicode stuff, but I guess there's no need to support it in option names (a sane subset of ASCII is more reasonable).\r\n\r\n> May be a good opportunity for a reword, too. The use of `arg` as a variable name and term in prose here threw me off a bit, [‚Ä¶]\r\n\r\nI fully agree. Thanks for this input! What was I thinking when submitting this? I guess sticking to the existing identifiers was too tempting. Back to the drawing board. :wink:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 231
	},
	{
		"id" : 218367143,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-11T05:43:24Z",
		"body" : "Cool. :+1:, modulo those items. And I think switching to `/^[a-zA-Z0-9][a-zA-Z0-9_-]*$/` (which requires first character to be alphanumeric) would fix those other weird edge cases with `---foo=bar` and `--=bar`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 231
	},
	{
		"id" : 218375930,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-11T06:46:20Z",
		"body" : "Can this be fixed by a better regex expression, say:\r\n```ruby\r\narg = find { |o| o =~ /^--#{Regexp.escape(arg)}=(.+)$/ }\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 231
	},
	{
		"id" : 218386883,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-11T07:48:54Z",
		"body" : "Addressed the variable naming issues. Terminology that I'm using now: `--name=value` in its entirety is an *argument*. It consists of two hyphens, the *option name*, an equals sign, and the *option value*. Two hyphens plus the option name are called a *flag*. Does that make some sense?\r\n\r\nDecided to completely drop my half-hearted attempt at validating the option name. This needs to be done properly and requires more testing. It also doesn't make sense to restrict the validation to the `ARGV.value` method, but‚Äîonce introduced‚Äîshould be done in all option-handling methods. I'd prefer to postpone this to a future PR (and thanks to your feedback I have a pretty good idea how to do it).\r\n\r\n> Can this be fixed by a better regex expression, say:\r\n\r\nCould be, but there's really no good reason to use a regular expression here. I think the string handling is clearer, possibly a bit faster, and requires no escaping.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 231
	},
	{
		"id" : 218512635,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-11T16:24:25Z",
		"body" : "> Terminology that I'm using now: --name=value in its entirety is an argument. It consists of two hyphens, the option name, an equals sign, and the option value. Two hyphens plus the option name are called a flag. Does that make some sense?\r\n\r\nYep!\r\n\r\nPostponing option name validation makes sense.\r\n\r\nNew parameter/variable names make this a lot more readable imho.\r\n\r\n:+1: to merging this as is now.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 231
	},
	{
		"id" : 218667941,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-12T06:04:52Z",
		"body" : "Re 745a1312dce936ddd519c2e151e889459243c543: I'm pretty sure this line can be just dropped (and should be to avoid future confusion). It is probably unlikely to ever matter, but I'd use the same opportunity to bump `max_curl_retries` to 2 or 3.\r\n\r\nI guess the morale of the story could be to run `brew readall --syntax` (and `tests`!) locally if the bot is particularly busy and you're inclined to pull before the `test-bot` run finishes successfully.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 232
	},
	{
		"id" : 218752764,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-12T13:13:53Z",
		"body" : "Yeah, it was a dumb bug on my part after I moved the `retry_count += 1` down into the `rescue` block. Removed in 2044294a865a85c4c3144a3000bd9a48427e12c6. Sorry about that.\r\n\r\nI had run `brew tests` locally, but I never do `brew readall --syntax`. Maybe `brew tests` should incorporate `brew readall --syntax` as a test, for convenience, and so our PR template steps include it?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 232
	},
	{
		"id" : 218767377,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-12T14:05:22Z",
		"body" : "> I had run `brew tests` locally, but I never do `brew readall --syntax`. Maybe `brew tests` should incorporate `brew readall --syntax` as a test, for convenience, and so our PR template steps include it?\r\n\r\nIf you want to poke this code a bit, I think nowadays (after the split) `readall` is making even less sense than it did a while ago, because it performs two completely orthogonal tasks:\r\n\r\n- Check the Ruby syntax of Homebrew (the package manager) files.\r\n- Validate aliases and try to load all formula files, either from a specified tap or all installed taps.\r\n\r\nThe former only makes sense for the Homebrew/brew repository and the latter only makes sense in the various Homebrew/homebrew-* repositories, thus some rearrangement would make sense. I don't think `tests` is the right place for it, but maybe it would be convenient to have a developer command that can be run locally without too much thought and does something similar to `test-bot` for Homebrew/brew.\r\n\r\nThat said, if you really wanted to dive into the code, I think `test-bot` could benefit from some refactoring around `readall` and `tests`. Not all of it makes sense in both the Homebrew/brew repository and the Homebrew/homebrew-* repositories now that we have separated them.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 232
	},
	{
		"id" : 218772382,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-12T14:21:55Z",
		"body" : "> The former only makes sense for the Homebrew/brew repository and the latter only makes sense in the various Homebrew/homebrew-* repositories, thus some rearrangement would make sense.\r\n\r\nüëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 232
	},
	{
		"id" : 218821134,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-12T17:03:42Z",
		"body" : "Was some discussion on this line from https://github.com/Homebrew/homebrew-core/pull/999#issuecomment-218608832 and below, if anyone wonders historically why my hack seemingly came out of the blue üòÑ.\r\n\r\nAgree with @UniqMartin's comment above here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 232
	},
	{
		"id" : 218969271,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-13T07:17:41Z",
		"body" : "> Warning: neovim/neovim/neovim-HEAD already installed\r\n\r\nNeovim was already installed so it did not install it again.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 234
	},
	{
		"id" : 218976882,
		"user" : {
			"login" : "Blaisorblade"
		},
		"created_at" : "2016-05-13T08:00:22Z",
		"body" : "> Warning: neovim/neovim/neovim-HEAD already installed\r\nNeovim was already installed so it did not install it again.\r\n\r\nPlease reopen. Later messages show neovim was not installed, only `/usr/local/Cellar/neovim/HEAD` existed. All the data is in the transcript ‚Äî my summary was probably insufficient.\r\n\r\nMy point was, that message is false. neovim was not installed, and this part of the transcript sounds evidence to me:\r\n```\r\n$ ls /usr/local/Cellar/neovim/HEAD\r\nINSTALL_RECEIPT.json  README.md\r\n$ which nvim\r\n$\r\n```\r\nNote that `which nvim` gave no output, meaning it found no nvim. (The command name is correct, and `nvim` is found now).\r\n\r\nThe question seems (to me): was the borked `/usr/local/Cellar/neovim/HEAD` created during tapping (as I assumed) or was it there from before, even though `neovim/neovim` was not tapped?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 234
	},
	{
		"id" : 218977317,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-13T08:02:50Z",
		"body" : "> The question seems (to me): was the borked /usr/local/Cellar/neovim/HEAD created during tapping (as I assumed)\r\n\r\nIt was not.\r\n\r\n> was it there from before, even though neovim/neovim was not tapped?\r\n\r\nIt was.\r\n\r\nAt some point you've installed a borked version of `neowin` so, when Homebrew tried to install the new version, it told you the existing version was installed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 234
	},
	{
		"id" : 218985966,
		"user" : {
			"login" : "Blaisorblade"
		},
		"created_at" : "2016-05-13T08:46:31Z",
		"body" : "Turns out you're probably right.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 234
	},
	{
		"id" : 218947067,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-13T04:01:13Z",
		"body" : "The commands you see printed in verbose output are not the commands superenv executes; they're the incoming requests to superenv, which then decides what to actually execute. If you want to see what commands are actually being executed, you need to inspect the log file ~Library/Logs/Homebrew/python/03.make where you will see things like this:\r\n```\r\nclang called with: -g -O2 -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -o MyDocument.o -c ./MyDocument.m\r\nsuperenv removed:  -g -O2 -g -O3 -Wall -Wstrict-prototypes\r\nsuperenv added:    -pipe -w -Os -march=core2 -isystem/usr/local/include -isystem/usr/include/libxml2 -isystem/System/Library/Frameworks/OpenGL.framework/Versions/Current/Headers -I/usr/local/opt/readline/include -I/usr/local/opt/sqlite/include -I/usr/local/opt/openssl/include\r\nsuperenv executed: clang -pipe -w -Os -march=core2 -fno-strict-aliasing -fno-common -dynamic -DNDEBUG -fwrapv -o MyDocument.o -c ./MyDocument.m -isystem/usr/local/include -isystem/usr/include/libxml2 -isystem/System/Library/Frameworks/OpenGL.framework/Versions/Current/Headers -I/usr/local/opt/readline/include -I/usr/local/opt/sqlite/include -I/usr/local/opt/openssl/include\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 235
	},
	{
		"id" : 218968415,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-13T07:12:19Z",
		"body" : "> I'm trying to build software for old macs on newer mac hardware, so I need to go for lowest common denominator to avoid \"Illegal Instruction 4\":\r\n> Homebrew/legacy-homebrew#19567\r\n> \r\n> The advice seems to be to use --build-bottle:\r\n> Homebrew/legacy-homebrew#31483\r\n\r\nWe do not support using build bottle for this. If you need software to work on older Macs: you should build it yourself and not in Homebrew. We'll only accept issues that are reproducible building our bottles. Sorry!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 235
	},
	{
		"id" : 218920570,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-13T00:10:51Z",
		"body" : "@apjanke not sure what to do about this one but seems to be failing all builds at the moment.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 218922303,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-13T00:23:57Z",
		"body" : "This one wasn't Andrew's issue. It appears the Jenkins security update applied today causes authentication exclusively on the archiving stage to fail, intermittently. It started earlier, then went away for a while, and now seems to be back.\r\n\r\nDoesn't seem to have a direct impact on the builds themselves, both upstream and downstream builds pass okay, just the archiving stage falls on its face. Still looking into the root cause.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 218923038,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-13T00:29:58Z",
		"body" : "@DomT4 I know, I just figured Andrew would be awake ;)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 218923299,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-13T00:32:06Z",
		"body" : "You'd be right, by the looks of it üòâ. I'm going to try a couple of things but there's not a lot we can do if they don't work; the alternative is downgrading onto a release with 7 known vulnerabilities. One day we can kill off Jenkins and life will be a happy happy place.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 218925559,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-13T00:50:07Z",
		"body" : "Apparently temporarily fixed by just restarting the darn thing `¬Ø\\_(„ÉÑ)_/¬Ø`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 218927537,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-13T01:07:38Z",
		"body" : "Nice. Who says UNIX cannot be more like Windows?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 218928311,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-13T01:13:35Z",
		"body" : "üòÜ I laughed far too much at that. I'm hoping that if it can be consistently resolved by effectively restarting it every time it's a Jenkins bug and not some configuration nightmare.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 218966349,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-13T06:58:35Z",
		"body" : "Looks like it's back http://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/1799/version=el_capitan/console",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 218968542,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-13T07:13:07Z",
		"body" : "Maybe worth filing an issue upstream about this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 219045408,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-13T13:39:08Z",
		"body" : "Someone [already did](https://issues.jenkins-ci.org/browse/JENKINS-34775).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 219166189,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-13T21:40:54Z",
		"body" : "Looks like a downgrade is in order.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 219167099,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-13T21:45:37Z",
		"body" : "Looks like there's a preliminary fix for this: https://github.com/jenkinsci/ghprb-plugin/pull/336\r\n\r\nSo perhaps we should try that patch even though it's not in a final form.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 219182408,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-13T23:24:33Z",
		"body" : "Apparently this may be a workaround:\r\n\r\n>Christopher Orr added a comment - 18 minutes ago\r\n\r\n>This is related to the fix for SECURITY-243 mentioned here:\r\nhttps://wiki.jenkins-ci.org/display/SECURITY/Jenkins+Security+Advisory+2016-05-11\r\n\r\n>Enabling the system property mentioned in that part of the security advisory should temporarily work around this problem.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 219182957,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-13T23:28:58Z",
		"body" : "We'd already enabled that to resolve other plugin issues but this one proved sticky.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 219183124,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-13T23:30:32Z",
		"body" : "Did whitelist all parameters listed?\r\n```\r\n If using the standard ${sha1} branch spec, builds will fail with \"Couldn't find any revision to build\".\r\nPull requests remain in the \"pending\" state as the plugin fails to update the PR with the build outcome\r\nOpenParameter names used\r\nghprbActualCommit,ghprbActualCommitAuthor,ghprbActualCommitAuthorEmail,ghprbAuthorRepoGitUrl,\r\nghprbCommentBody,ghprbCredentialsId,ghprbGhRepository,ghprbPullAuthorEmail,ghprbPullAuthorLogin,\r\nghprbPullAuthorLoginMention,ghprbPullDescription,ghprbPullId,ghprbPullLink,\r\nghprbPullLongDescription,ghprbPullTitle,ghprbSourceBranch,ghprbTargetBranch,ghprbTriggerAuthor,\r\nghprbTriggerAuthorEmail,ghprbTriggerAuthorLogin,ghprbTriggerAuthorLoginMention,GIT_BRANCH,sha1\r\n\r\n\r\n\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 219183351,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-13T23:32:31Z",
		"body" : "We whitelisted literally everything üòÑ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 219183460,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-13T23:33:21Z",
		"body" : "Then it sounds like it's time for a downgrade or the experimental PR https://github.com/jenkinsci/ghprb-plugin/pull/336",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 219184079,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-13T23:39:07Z",
		"body" : "Check the team chat.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 236
	},
	{
		"id" : 218969545,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-13T07:19:17Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 237
	},
	{
		"id" : 218988154,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-13T08:56:10Z",
		"body" : "This is not possible because the filesystem is our storage mechanism rather than a database. You can still remove then with `brew uninstall` and it's not possible for us to tell the difference between a e.g. `neovim` formula that's working and was installed from another branch and an orphaned one like in the example you have. `brew ls` still lists them and `brew uninstall` still uninstalls them so that's the best we can do really, sorry.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 238
	},
	{
		"id" : 219021303,
		"user" : {
			"login" : "Blaisorblade"
		},
		"created_at" : "2016-05-13T11:45:16Z",
		"body" : "Thanks for the response. But can't you compare installations with existing\nformulas? Of course you can't detect whether installations work, I'm not\nasking for that, and I don't want such installations to be autoremoved.\n\n-- \nPaolo Giarrusso\nFrom smartphone, sorry for typos or excessive brevity\nOn May 13, 2016 10:56, \"Mike McQuaid\" <notifications@github.com> wrote:\n\n> This is not possible because the filesystem is our storage mechanism\n> rather than a database. You can still remove then with brew uninstall and\n> it's not possible for us to tell the difference between a e.g. neovim\n> formula that's working and was installed from another branch and an\n> orphaned one like in the example you have. brew ls still lists them and brew\n> uninstall still uninstalls them so that's the best we can do really,\n> sorry.\n>\n> ‚Äî\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> <https://github.com/Homebrew/brew/issues/238#issuecomment-218988154>\n>\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 238
	},
	{
		"id" : 219034532,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-13T12:54:14Z",
		"body" : "We could but then they would break if your tap was missing or you changed branch etc. If you'd like to add a check for this we'll accept a pull request but I'm not sure what would have handled this case for you anyway (unless you looked at e.g. `brew missing` and/or `brew doctor` regularly before installing).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 238
	},
	{
		"id" : 219061621,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-13T14:36:55Z",
		"body" : "Keep in mind this may be difficult for `brew` to detect correctly, because `brew` also supports installing packages from formula files at arbitrary locations: you can write your own `foo.rb` formula file, and then do a `brew install /path/to/foo.rb` to install it. So you may have legit installations of packages that have no corresponding formula file inside any of your taps, or anywhere else. In short, the answer to \"But can't you compare installations with existing formulas?\" is \"no\", because there are legit, supported use cases for installations that do not correspond to existing formulae, regardless of the tap state WRT branches and so on.\r\n\r\nThe installation receipt file may be able to help distinguish that. But this may be an edge case that `brew` just can't give very good diagnostic info on without deprecating other `brew` functionality.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 238
	},
	{
		"id" : 219087403,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-13T16:06:15Z",
		"body" : "FWIW, Homebrew even supports no-formula at all. i.e. Compile the source by yourself and install it to an arbitrary prefix, and run `brew link` manually.   ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 238
	},
	{
		"id" : 218988031,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-13T08:55:36Z",
		"body" : "This is a known issue and not a high-priority one.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 239
	},
	{
		"id" : 218988959,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-13T08:59:55Z",
		"body" : "> This is a known issue \r\n\r\nThis is not issue. This is the correct behavior. The number of symlinks will be changed depending on your other files in the prefix.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 239
	},
	{
		"id" : 218990666,
		"user" : {
			"login" : "Blaisorblade"
		},
		"created_at" : "2016-05-13T09:07:32Z",
		"body" : "And that makes it impossible to count how many links are actually created\nor removed?\n\"A message to the user says nonsense\" is an UX issue. I'll agree it's a\nlow-priority one.\n\n-- \nPaolo Giarrusso\nFrom smartphone, sorry for typos or excessive brevity\nOn May 13, 2016 10:59, \"Xu Cheng\" <notifications@github.com> wrote:\n\nThis is a known issue\n\nThis is not issue. This is the correct behavior. The number of symlinks\nwill be changed depending on your other files in the prefix.\n\n‚Äî\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n<https://github.com/Homebrew/brew/issues/239#issuecomment-218988959>\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 239
	},
	{
		"id" : 218991170,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-13T09:10:03Z",
		"body" : "> And that makes it impossible to count how many links are actually created\r\nor removed?\r\n\r\nIt is not the problem of counting. The symlink numbers does change between link and unlink. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 239
	},
	{
		"id" : 219004193,
		"user" : {
			"login" : "Blaisorblade"
		},
		"created_at" : "2016-05-13T10:09:42Z",
		"body" : "> It is not the problem of counting. The symlink numbers does change between link and unlink.\r\n\r\nThat seems absurd. More likely problem: `unlink` counts directory removals too, while there's no directly matching code for `link`:\r\nhttps://github.com/Homebrew/brew/blob/master/Library/Homebrew/extend/pathname.rb#L532-L536\r\n\r\nThat seems absurd because:\r\n- if `link` and `unlink` are inverses, unlink must destroy what `link` creates\r\n- if they weren't inverses, repeating those two commands is either destroying or creating files.\r\n\r\nIf the intended behavior is more complicated for good reason, feel free to point me to docs explaining it, or to reopen the issue calling for them to be written.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 239
	},
	{
		"id" : 219034320,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-13T12:53:15Z",
		"body" : "Your tone is starting to get a little rude @Blaisorblade; please check out our Code of Conduct: https://github.com/Homebrew/brew/blob/master/CODEOFCONDUCT.md.\r\n\r\nIf you would like to submit a pull request to improve this situation: feel free but we will not reopen something we do not consider to be an issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 239
	},
	{
		"id" : 219170212,
		"user" : {
			"login" : "Blaisorblade"
		},
		"created_at" : "2016-05-13T22:02:14Z",
		"body" : "Thanks for offering to consider a pull request, I provided one in #242. Of course, I did not request that you fix the issue, because I agree it is a small one (I filed it anyway while I noticed), and I'm happy to contribute a fix. One strong point of Homebrew is its well-designed interface.\r\n\r\nI'm sorry I overreacted to the technical disagreement and violated the CoC.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 239
	},
	{
		"id" : 219194414,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-14T01:56:04Z",
		"body" : "Thanks for making a concrete PR out of this. It may take us a couple days to respond to it, since we're rolling up on the weekend now and this is a low/non-priority issue, but we appreciate you contributing and respecting the CoC.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 239
	},
	{
		"id" : 219234736,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-14T18:08:59Z",
		"body" : "> Thanks for offering to consider a pull request, I provided one in #242. Of course, I did not request that you fix the issue, because I agree it is a small one (I filed it anyway while I noticed), and I'm happy to contribute a fix. One strong point of Homebrew is its well-designed interface.\r\n\r\nAwesome, will take a look.\r\n\r\n> I'm sorry I overreacted to the technical disagreement and violated the CoC.\r\n\r\nNo worries, we really appreciate the apology ‚ù§Ô∏è ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 239
	},
	{
		"id" : 219197104,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-05-14T03:00:15Z",
		"body" : "Can you post the output of `brew config`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 240
	},
	{
		"id" : 219229874,
		"user" : {
			"login" : "surajsharma"
		},
		"created_at" : "2016-05-14T16:35:26Z",
		"body" : "apparently i did a `brew install git` and everythin works fine now! did not have git but didnt know brew needed it for updates.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 240
	},
	{
		"id" : 219255568,
		"user" : {
			"login" : "Blaisorblade"
		},
		"created_at" : "2016-05-14T22:40:26Z",
		"body" : "`brew` does use git for updates. Is it possible you had some version of `git` installed, but it lacked just support for HTTPS (because not compiled in)? Because that'd be my guess given the output you posted ‚Äî I reproduced something similar (see below).\r\n\r\nTo verify that, I'd try `brew unlink git` followed by `which git` (and maybe post the output, in addition to `brew config`). Then do `brew link git` to make the Brew-installed git available again.\r\n\r\nMy output (with more taps so more errors):\r\n```\r\n$ mv /usr/local/Cellar/git/2.8.2_1/libexec/git-core/git-remote-https /usr/local/Cellar/git/2.8.2_1/libexec/git-core/git-remote-https-away\r\npgiarrusso [bluevelvet: /usr/local: 00:02: 7 (0)]\r\n$ brew update\r\nfatal: Unable to find remote helper for 'https'\r\nfatal: Unable to find remote helper for 'https'\r\nfatal: Unable to find remote helper for 'https'\r\nfatal: Unable to find remote helper for 'https'\r\nfatal: Unable to find remote helper for 'https'\r\nError: Fetching /usr/local/Library/Taps/homebrew/homebrew-binary failed!\r\nFetching /usr/local/Library/Taps/homebrew/homebrew-command-not-found failed!\r\nFetching /usr/local/Library/Taps/caskroom/homebrew-cask failed!\r\nFetching /usr/local/Library/Taps/homebrew/homebrew-core failed!\r\nFetching /usr/local/Library/Taps/homebrew/homebrew-x11 failed!\r\n```\r\n\r\nThings that Homebrew could do:\r\n- would it help diagnosis if brew had said \"Git failed fetching /usr/local!\" instead of `Fetching /usr/local failed!\"? Changing the error would be easy (it's at https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cmd/update.sh#L358).\r\n-  beyond testing if Git exists (which brew update already appears to do), it could test for the helper's existence ‚Äî it seems `echo | git remote-https origin` from `/usr/local` would work. Not sure this is worthwhile though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 240
	},
	{
		"id" : 219298571,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-15T17:22:30Z",
		"body" : "> it could test for the helper's existence ‚Äî it seems echo | git remote-https origin from /usr/local would work. Not sure this is worthwhile though.\r\n\r\nThis seems like a good idea üëç  CC @xu-cheng ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 240
	},
	{
		"id" : 219651486,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-17T08:23:21Z",
		"body" : "> This seems like a good idea üëç CC @xu-cheng\r\n\r\nI just test a bit. This won't work if the origin is not https, for example ssh or `git://`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 240
	},
	{
		"id" : 219654686,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-17T08:37:43Z",
		"body" : "@xu-cheng Sure but in that case we can check? HTTPS is the default so we should handle that case not working, no?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 240
	},
	{
		"id" : 219656471,
		"user" : {
			"login" : "Blaisorblade"
		},
		"created_at" : "2016-05-17T08:46:03Z",
		"body" : "> This won't work if the origin is not https, for example ssh or git://\r\n\r\n@xu-cheng Oh, I thought that `origin` in `/usr/local` is managed by Homebrew... Anyway, `echo | git remote-https https://github.com/Homebrew/brew.git` appears to work (with exit code 0) in any folder.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 240
	},
	{
		"id" : 219658970,
		"user" : {
			"login" : "Blaisorblade"
		},
		"created_at" : "2016-05-17T08:57:21Z",
		"body" : "> @xu-cheng Sure but in that case we can check? HTTPS is the default so we should handle that case not working, no?\r\n\r\nMy earlier command *breaks* (with a segfault) if `origin` is not HTTPS, my bad ‚Äî which I guess is reasonable for you devs?\r\n\r\nSeparately, there are other helpers, but I think Homebrew need not check for them:\r\n1. common ones (ssh/git/local repos) need no helper\r\n2. HTTPS needs a helper which [is optional](https://github.com/git/git/blob/master/Makefile#L35-L37), though disabling it seems a bad idea. Should you want to support this, you could make the `remote-https` check conditional\r\n3. stranger URLs are possible, but I've never seen them. If a user wants to use them, he should be fine with troubleshooting based on the Git error.\r\n\r\nOrthogonally, when Homebrew shows an external command failed, it might be good to show the actual command and path (e.g. for advanced users in scenario 3), beyond mentioning Git.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 240
	},
	{
		"id" : 219659162,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-17T08:58:11Z",
		"body" : "@mikemcquaid My main concern is there are so many ways the git installation can be broken. So it seems unscalable to check all of them. Plus that the fact, git has already printed the necessary error message. So I would like to see more of issues report to add such check.(But sure, it can be done)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 240
	},
	{
		"id" : 219662522,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-17T09:13:37Z",
		"body" : "Seems reasonable.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 240
	},
	{
		"id" : 221256895,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-24T12:43:50Z",
		"body" : "Closing since the original issue has been resolved and I agree that attempting to test whether `git` is broken won't scale and isn't necessary as the error message produced by `git` is pretty clear.\r\n\r\nThe only thing that looks like it could see some improvement would be to make the error summary printed by us clearer, e.g. by adding the command (with arguments) that failed to the error output, as suggested by @Blaisorblade. If anyone wants to give this a try, a PR is certainly welcome.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 240
	},
	{
		"id" : 219132538,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-13T19:04:53Z",
		"body" : "Small notations:\r\n* This isn't the finished product in terms of documentation, Linux/ancient OS X testing or necessarily design/goals.\r\n* Opening the PR at this point allows for some discussion _on the idea_.\r\n* Opening the PR at this point also allows you to roast my Ruby skills, which people tend to enjoy üòâ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 241
	},
	{
		"id" : 219167628,
		"user" : {
			"login" : "geoff-codes"
		},
		"created_at" : "2016-05-13T21:48:45Z",
		"body" : "Other thoughts (which maybe you're already working on, of course):\r\n- Keep a SHA256 of the latest bundle somewhere\r\n- Use it to check the bundles during `brew audit`\r\n- Possibly consider one central file, and hardlink or symlink to it, rather that copy each time?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 241
	},
	{
		"id" : 219235128,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-14T18:16:58Z",
		"body" : "üëç on the idea. I wonder if there's a way to check if this needs to be run and do it automatically, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 241
	},
	{
		"id" : 219270262,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-15T07:10:00Z",
		"body" : "Can we have a more specific name like `brew update-certs` or something?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 241
	},
	{
		"id" : 219277501,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-15T10:30:54Z",
		"body" : "Also, here is a crazy thought. Would it make more sense to make this a cmd in core tap instead of brew. Because this seems to be very specific to certain formula. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 241
	},
	{
		"id" : 244133833,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-01T16:25:08Z",
		"body" : "Someone else is welcome to pick this up as desired, but I have no immediate plans to complete it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 241
	},
	{
		"id" : 219235064,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-14T18:15:39Z",
		"body" : "Nice work here. A suggestion but otherwise üëç. Thanks for jumping on this!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 242
	},
	{
		"id" : 219238140,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-14T19:16:42Z",
		"body" : "LGTM. Will wait for any other maintainer thoughts and otherwise üö¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 242
	},
	{
		"id" : 219267038,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-15T05:19:37Z",
		"body" : "LGTM. but FYI, this won't fix all the synchronized number problem. Because depending on your other files in the prefix, how the symlink will be created will be varied.(See `Keg#resolve_any_conflicts` for more detail. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 242
	},
	{
		"id" : 219275183,
		"user" : {
			"login" : "Blaisorblade"
		},
		"created_at" : "2016-05-15T09:30:02Z",
		"body" : "> Because depending on your other files in the prefix, how the symlink will be created will be varied.(See Keg#resolve_any_conflicts for more detail.\r\n\r\nAh, thanks for the pointer! I think I see what you mean, but it seems that cannot keep happening if I keep repeating `link/unlink` as in #239.\r\nJust to make sure I get it: For each conflict, `brew link foo` will replace a symlink to a directory pertaining to another formula to symlinks to individual files; `brew unlink foo` will not remove symlinks for other formulas, and it will not \"merge\" the symlinks to a directory back into one to a folder, so we arrive at a slightly different situation (which is fine).\r\n\r\nHowever, it appears that repeating immediately `brew link foo`/`brew unlink foo` will not find again the same conflicts, so there the counts should match. And that's good: otherwise, just repeated linking and unlinking (certainly an odd operation) would \"leak\" inodes. That's why I opened #239.\r\n\r\nAnyway:  I'm satisfied with the result after this PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 242
	},
	{
		"id" : 219278947,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-15T11:08:02Z",
		"body" : "Thanks for your contribution to Homebrew! Without people like you submitting PRs we couldn't run this project. You rock!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 242
	},
	{
		"id" : 219188682,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-14T00:26:53Z",
		"body" : "Closing in favour of https://github.com/Homebrew/brew/pull/244.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 243
	},
	{
		"id" : 219188839,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-14T00:28:47Z",
		"body" : "It's not invalid as such, the documentation is just a little unclear/misguided. You use `brew search --desc` with a keyword of what you're looking for, i.e. I want to find formula that provide some kind of `sql` solution so I run:\r\n\r\n```\r\n~> brew search --desc sql\r\napache-drill: Schema-free SQL query engine for Hadoop and NoSQL\r\napgdiff: Another PostgreSQL diff tool\r\nautomysqlbackup: Automate MySQL backups\r\ncitus: PostgreSQL-based distributed RDBMS\r\nfastbit: Open-source data processing library in NoSQL spirit\r\nfreetds: Libraries to talk to Microsoft SQL Server and Sybase databases\r\ngom: GObject wrapper around SQLite\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 244
	},
	{
		"id" : 219189826,
		"user" : {
			"login" : "kaizensoze"
		},
		"created_at" : "2016-05-14T00:41:39Z",
		"body" : "Would it be ok to change this PR to have it say the following?\r\n\r\n3. Or use brew search --desc text|/text/ to browse packages from the command line.\r\n\r\nIn addition I can create a separate PR to add --desc to the help text for brew search. Are there any other flags missing from that text?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 244
	},
	{
		"id" : 219192413,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-14T01:19:38Z",
		"body" : "> Would it be ok to change this PR to have it say ...\r\n\r\nYes; please! That text is confusing as is; I would have made the same mistake. Or closing this and opening a new PR to do so might be less work than revising this and editing the description and comment history on this one to still be cogent.\r\n\r\nAt this location, I'd do something simpler like \"`brew search --desc <keyword>`\"; don't worry too much about the full syntax with `|` and such, since this is a brief, informal message.\r\n\r\n> In addition I can create a separate PR to add --desc to the help text for brew search\r\n\r\n:+1: You could just include it in the same PR, since it's related. It would be nice to have this too, since `--desc` is intended for common use by end users, so `brew --help` should describe it.\r\n\r\n...and while you're in there, this is what the current `brew --help search` says:\r\n\r\n```\r\nbrew search, -S:\r\n    Display all locally available formulae for brewing (including tapped ones).\r\n    No online search is performed if called without arguments.\r\n\r\nbrew search, -S text|/text/:\r\n    Perform a substring search of formula names for text. If text is\r\n    surrounded with slashes, then it is interpreted as a regular expression.\r\n    The search for text is extended online to some popular taps.\r\n```\r\n\r\nI dunno about you, but that \"`brew search, -S`\" format with the comma seems odd and hard to read to me, and isn't standard quasi-BNF syntax. And using \"text\" as the placeholder for both literal text and regex patterns is hard to read IMHO. Maybe it should be something more like:\r\n\r\n```\r\nbrew (search | -S)\r\n   ...\r\nbrew (search | -S) (text | /pattern/)\r\n   ...\r\n```\r\n\r\nOr just drop the `-S` from the helptext entirely, since it makes the syntax description more complex, and I'll bet 80%+ of users are using the `search` form instead of `-S`. If nothing else, change all the helptext to say `brew search ...` and then just put a footnote at the bottom saying \"`-S` may be used as a synonym for `search`\". Something like this, with appropriate markup:\r\n\r\n```\r\nbrew search\r\n   ...\r\nbrew search (text | /pattern/)\r\n   ...\r\n\r\nThe `-S` switch may be used as a synonym for the `search` subcommand.\r\n```\r\n\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 244
	},
	{
		"id" : 219221186,
		"user" : {
			"login" : "kaizensoze"
		},
		"created_at" : "2016-05-14T13:45:12Z",
		"body" : "Ok I'll take a look.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 244
	},
	{
		"id" : 219206115,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-14T07:34:09Z",
		"body" : "What does `brew upgrade --devel wxwidgets` do?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 245
	},
	{
		"id" : 219211045,
		"user" : {
			"login" : "ghazel"
		},
		"created_at" : "2016-05-14T09:42:10Z",
		"body" : "```\r\n$ brew upgrade --devel wxwidgets\r\n==> Upgrading 1 outdated package, with result:\r\nwxmac 3.1.0_2\r\n==> Upgrading wxmac\r\n==> Downloading https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.0/wxWidgets-3.1.0.tar.bz2\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 245
	},
	{
		"id" : 219234854,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-14T18:11:27Z",
		"body" : "Yeh, so, that's expected behaviour. `install` will never upgrade but `upgrade` will.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 245
	},
	{
		"id" : 219218213,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-14T12:38:56Z",
		"body" : "Geoff,\r\n\r\nI won't speak on behalf of other maintainers, but I can and will speak to my own concerns & experiences.\r\n\r\nI'll also note the following for transparency's sake:\r\n* In the last 3 months I have erased the contents of one Issue, because it contained purely personal abuse to the Homebrew maintainers on really quite a nasty level.\r\n* Over my time in Homebrew 4 people have been blocked organisation-wide by me:\r\n  * One for persistent GitHub insults to maintainers, and then finding maintainer's personal Twitter accounts and tweeting personal abuse to each of us repeatedly, over a persistent period of a couple of days.\r\n  * One for sending abusive emails to maintainers' personal email accounts after doing so repeatedly on GitHub and being asked to stop.\r\n  * One for posting repeated personal abuse on various GitHub issues, including to normal contributors, and refusing to stop when asked. That block was removed after a week, and then re-implemented when that person went right back to abusing contributors.\r\n  * One for creating a new account that had been blocked previously to continue abusing the maintainers.\r\n\r\nI'll also note that fundamentally, whilst the Code of Conduct is absolutely applied equally, white men have a severe imbalance in influence over open source and the voices and experiences of women and non-white contributors are frequently trampled over by FOSS communities. Homebrew is determined to not become one of those communities.\r\n\r\nYou have free speech to call me a prick, insist I should quit FOSS, suggest I should jump off a bridge, etc, and I'll note those aren't _theoretical examples_ of things that have been emailed, tweeted or posted on GitHub at me personally during my time maintaining Homebrew.\r\n\r\nYou have the free speech to say those things to me, but I have the free speech to say we don't welcome those comments around Homebrew and we won't endure them. Your free speech does not === the right to abuse me. That's not what free speech is, not even in law for many legal systems; most have \"harm exemptions\" to the free speech mechanism.\r\n\r\nJust as your local pub can throw you out to stop you yelling at the guy sat next to you that you think he's a waste of oxygen and looks like Shrek, Homebrew can do the same thing. This is why Code of Conduct's exist, to enforce a _minimum_ conduct. Not to make sure every comment is one of grovelling approval but to make sure it doesn't degrade into outright insults and personal attacks.\r\n\r\nYour local pub tossing you out because you won't stop yelling insults at that poor guy is by the strictest definition censorship, but degrees of censorship are everywhere in life _(Twitter will suspend your account if you do nothing but tweet racist abuse @ people, for example)_. Yelling censorship like its a one-size-fits-all problem is disingenuous, and I apply that broadly over the last couple of weeks more than I apply it to your comment, I add.\r\n\r\nI will note that if people have constructive suggestions to make about analytics that go beyond _\"you are all terrible human beings and this is something the NSA would do\"_ your Issue will remain open until we can resolve it one way or another. As a shining example [this issue](https://github.com/Homebrew/brew/issues/152) was opened on a productive subject Homebrew could work with, and has remained open for 18 days without significant issue.\r\n\r\nCome to us with _\"Oh you could improve the opt-out mechanism with this tweak\"_ or _\"Have you considered this analytics provider instead?\"_ or anything like that and the issue is not only welcome but encouraged. If you come to us with _\"You're all a disgrace to open source, spies for Google and have been paid off by the government to collect this data\"_ and again, those aren't _theoretical examples_, that's an Issue that clearly isn't going anywhere and harm reduction comes into play.\r\n\r\nIn terms of the \"humblebrag\" I contributed _the most_ commits to the Homebrew organisation last year, let alone the amount of Issues and Pull Requests I review. Contribution buys you _trust_, it doesn't necessarily buy you the right to make others feel absolutely awful, and look, I have fairly crappy health, I've written about that publicly before now _(and removed the posts 6 months later worrying about them)_, but none of this has been good for my health and I _have a lot of fondness_ for working on Homebrew.\r\n\r\nImagine being someone who doesn't know Homebrew, or someone who is vulnerable or from a section of society whose voices are respected less than us white men, and going to file an Issue with Homebrew, but before you do you check the Issue below and discover someone calling the maintainers every name under the sun and comparing them to their favourite government spy agency. Would that make _you_ want to contribute to Homebrew or would it make you want to run in the opposite direction as fast as you could? This isn't a theoretical problem. Look at tech's ongoing diversity problem, that is amplified _significantly_ in FOSS.\r\n\r\nTo be blunt, if you feel threatened by us trying to make Homebrew a safer space for everyone, from all walks of life, and the people who feel threatened feel a bit safer, I'll take that trade off because the difference between their real threat level and your's is almost universally huge, just huge.\r\n\r\nAnd don't take that as me wanting you to feel like you aren't welcome here, because you _absolutely are_ and I appreciate your contributions and the discussions we've had this week _alone_, but we're both privileged to be white men and that discussion has a place in free speech and its consequences.\r\n\r\nI am permanently uneasy with the erasure of comments, but I will not discard the harm inflicted by those comments in terms of both maintainer health and also with the view that Homebrew and FOSS would not be a worse place if people who weren't white men felt more comfortable contributing on a regular basis. There is a balance here, but the balance isn't to allow people to say and do unto others whatever they desire without consequence.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 246
	},
	{
		"id" : 219218898,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-14T12:54:47Z",
		"body" : "Hi @geoff-codes,\r\n\r\nFirstly, our bug tracker is not an area for public expression; it's a place for reporting actionable bugs or issues we have previously not closed as a WONTFIX. People who want to express themselves publicly have Twitter, blogs and any number of other places on the internet for doing that (but @DomT4 has already made the point on this better than I have).\r\n\r\nSecondly, you're one of the first (maybe the only) person who has created an issue about this who has actually contributed meaningfully to Homebrew. Most people who have \"expressed concerns\" have not been part of this community and have been publicly or privately abusive (particularly to me and @DomT4). I don't want to bore you by digging up the number or content of the private abusive emails I've been getting over the last few weeks but I'm beyond bored of them now. I edit content because I regularly have to click through issues and I don't want to read abuse repeated to me again and again.\r\n\r\nThirdly, the priority for me when running Homebrew is the sanity of the maintainers who contribute the most to Homebrew. As @DomT4 mentioned, between him and I we're two of the most active maintainers on this project and there's a bunch of stuff in the sidelines (applying for GSoC, keeping CI servers running, managing our finances, apply for SFC) that may not happen if the two of us dropped off. This whole analytics situation has had me very tempted on more than one occasion to leave open-source altogether and (without being too arrogant here): that would be bad for this project. If Homebrew has no more maintainers the project will die.\r\n\r\nFinally, I'm happy to work to address concerns beyond \"no analytics!\" and \"analytics should be opt-out\" for reasons I've explained at extreme length in multiple other places. Whenever these concerns have been raised I've made PRs to fix them usually merged within 24 hours.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 246
	},
	{
		"id" : 219278968,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-15T11:08:55Z",
		"body" : "@geoff-codes Interested in your thoughts on the above comments when you get the chance, thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 246
	},
	{
		"id" : 219665528,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-17T09:26:59Z",
		"body" : "Closing this out as there's nothing more actionable here but still interested in @geoff-codes' reply.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 246
	},
	{
		"id" : 220203602,
		"user" : {
			"login" : "geoff-codes"
		},
		"created_at" : "2016-05-19T01:21:10Z",
		"body" : "@DomT4 @mikemcquaid Thank you for your very thoughtful and considerate replies. I apologize for not responding sooner (I've been away for a few days). I intend to follow up in greater detail with some additional, detailed thoughts very soon, but for the time being, I'll just say your points are well taken, and again, thank you for your thoughtful responses.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 246
	},
	{
		"id" : 225345656,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-11T09:00:30Z",
		"body" : "> I intend to follow up in greater detail with some additional and more detailed thoughts very soon, but for the time being, I'll just say your points are well taken, and again, thank you for your kind and detailed response(s).\r\n\r\n@geoff-codes Still interested in this, even if it's privately.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 246
	},
	{
		"id" : 219322045,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-05-15T23:43:35Z",
		"body" : "Thanks for the report!  As it happens, though, we just removed `eet` since it's been superseded by EFL: https://github.com/Homebrew/homebrew-core/commit/8716fc67b430e77e20c9223099fba4b08801e2fe",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 247
	},
	{
		"id" : 219633718,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-17T06:49:41Z",
		"body" : "Does it work to enforce a \"/\" instead of \"-\"?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 248
	},
	{
		"id" : 219763653,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-17T15:54:30Z",
		"body" : "> Does it work to enforce a \"/\" instead of \"-\"?\r\n\r\nYeah, it does. The old syntax definitely worked up till March, but changing to the slash is fine locally.\r\n```ruby\r\nif head_only?(formula) && formula.tap.to_s.downcase !~ /\\/devel-only$/\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 248
	},
	{
		"id" : 220053274,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-18T14:57:49Z",
		"body" : "LGTM üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 248
	},
	{
		"id" : 220175890,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-18T22:22:05Z",
		"body" : "I think the least invasive fix that will preserve the spirit of the original commit would be to tweak the regular expressions very slightly:\r\n\r\n- `/-devel-only$/` ‚û°Ô∏è `/[-/]devel-only$/` and\r\n- `/-devel-only$/` ‚û°Ô∏è `/[-/]head-only$/`.\r\n\r\nThis will work for both `<user>/devel-only` (our primary use case) and `<user>/<prefix>-devel-only` as the tap name (and similarly for the `head-only` case).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 248
	},
	{
		"id" : 221826819,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-26T09:47:31Z",
		"body" : "@MikeMcQuaid Can we get a decision on this one way or another? I need to patch the formula waiting on it: https://github.com/Homebrew/homebrew-devel-only/pull/45",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 248
	},
	{
		"id" : 221829050,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-26T09:57:54Z",
		"body" : "I initially went for something close to Martin's comment, and then we had a volley of similar suggestions and I sort of gave up on anyone agreeing on one.\r\n\r\nI'm going to pick this back up on Martin's suggestion above, which is close to what I originally did, and if people want to file a follow-up PR and discuss this more they can. Just don't CC me into it üòâ.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 248
	},
	{
		"id" : 221829699,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-26T10:01:01Z",
		"body" : "Yeah I really don't think we need fancy Ruby methods if three additional characters in each of the preexisting regular expressions do the job. :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 248
	},
	{
		"id" : 221830797,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-26T10:06:40Z",
		"body" : "Merged.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 248
	},
	{
		"id" : 219951817,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-18T07:49:56Z",
		"body" : "CC @tdsmith for thoughts.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 249
	},
	{
		"id" : 220027150,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-05-18T13:34:08Z",
		"body" : "It would make sense! ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 249
	},
	{
		"id" : 238813467,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:27:19Z",
		"body" : "If this is still broken for you: we'll accept PRs for this but we're not actively working on it at this time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 249
	},
	{
		"id" : 241240616,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-21T05:59:23Z",
		"body" : "I'm working on this but the details are annoying and I don't like my solution yet; within the next week, for sure.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 249
	},
	{
		"id" : 244546533,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T13:28:01Z",
		"body" : "@tdsmith Any news on this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 249
	},
	{
		"id" : 219969159,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-18T09:09:53Z",
		"body" : ":+1:\r\n\r\nDo you know if there's a place non-GitHub-employees can submit PRs or bug reports to? I see a couple typos in it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 250
	},
	{
		"id" : 219970103,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-18T09:14:01Z",
		"body" : "@apjanke https://github.com/support or support@github.com will get triaged and sent to the relevant folks. No PRs, unfortunately.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 250
	},
	{
		"id" : 219968736,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-18T09:08:02Z",
		"body" : "Feels reasonable but would like to see this tested with a reasonable number of formulae before merging üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 220220132,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-19T03:39:01Z",
		"body" : "My personal feeling is that setting both `MACOSX_DEPLOYMENT_TARGET` and `SDKROOT` as is currently done has helped us fix quite a few builds that previously failed with Xcode 7 on 10.10, thus I'd be happy if we can make this PR default to opt-out, if possible. To be more specific: I think setting `SDKROOT` if Xcode is installed is always the Right Thing<sup>TM</sup> to do. If that causes breakage, it's probably the build system's fault.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 220223796,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-19T04:16:52Z",
		"body" : "Okay, seems I have missed quite some discussion in Homebrew/homebrew-core#1046, which puts this PR into perspective. It would have been nice if that was mentioned as a motivation and the PR body and/or commit message contained some information about why this change is being made and its pros/cons given that the change has a non-trivial impact on the build process. (And the current message probably can be dropped, as it's only a prose version of what is already obvious from the code.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 220234906,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-19T06:01:27Z",
		"body" : ">I think setting SDKROOT if Xcode is installed is always the Right ThingTM to do. If that causes breakage, it's probably the build system's fault.\r\n\r\nI tend to agree, and I think some things are going to break either way. I'm happy to close this PR and make it opt out.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 220235625,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-19T06:07:12Z",
		"body" : "@UniqMartin Would you prefer we go in the other direction and make it `if MacOS::Xcode.installed?` instead of `if MacOS::Xcode.without_clt? || (MacOS::Xcode.installed? && MacOS::Xcode.version.to_i >= 7)`. I think I would.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 220235812,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-19T06:08:32Z",
		"body" : "I'm also happy with leaving the current code unchanged.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 220239645,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-19T06:36:00Z",
		"body" : "My ideal scenario for `MACOSX_DEPLOYMENT_TARGET` would be to always set this variable.\r\n\r\nFor `SDKROOT`, I'm leaning (like you) towards always setting it to Xcode's SDK, if available, but I think this will be both unpopular among other maintainers and cause more issues as exemplified by [the Ruby problem if the 10.11 SDK is used on 10.10](https://github.com/Homebrew/homebrew-core/pull/1046#issuecomment-219406238) (I think Misty once filed a bug report about this with Apple).\r\n\r\nNow that I'm looking at the code again, I think some of our problems might be related to the fact that we're using different conditions for setting up `SDKROOT` and `HOMEBREW_SDKROOT` (via `effective_sysroot`). The latter influences `superenv` filtering. `SDKROOT` currently gets set if `MacOS::Xcode.without_clt? || (MacOS::Xcode.installed? && MacOS::Xcode.version.to_i >= 7)`, but `HOMEBREW_SDKROOT` only gets set if `MacOS::Xcode.without_clt?`. What do you think?\r\n\r\nDo you have a list of formulae that have previously failed due to SDK and/or deployment target issues and depending on whether CLT and/or Xcode is installed? Or can assemble such a list? I think before making any change, it would be good to make sure none of the known problematic cases got worse (hopefully better) and then check that other popular/complex formulae still build correctly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 220242633,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-19T06:56:00Z",
		"body" : "> I tend to agree, and I think some things are going to break either way. I'm happy to close this PR and leave it opt out.\r\n\r\nAs long as we're tested it with enough formulae to make an informed decision I'm happy with this going in as-is.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 220242678,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-19T06:56:16Z",
		"body" : ">My ideal scenario for MACOSX_DEPLOYMENT_TARGET would be to always set this variable.\r\n\r\nThe problem with that is that it causes some build systems to go looking for the corresponding SDK folder, which can cause build failure that otherwise wouldn't occur if you have CLT only. That said, I believe that's a build system bug.\r\n\r\n>Do you have a list of formulae \r\nYes, vim, portmidi, h2o, baresip are some. Of these baresip is the most problematic since as of now even with this PR it will fail unless the CLT is installed, as I mentioned here: https://github.com/Homebrew/homebrew-core/pull/794#issuecomment-220075564\r\n\r\n>Now that I'm looking at the code again ‚Ä¶\r\n\r\nYes, I think that may be a bug. Also, I think this may be a bug too: https://github.com/Homebrew/brew/blob/master/Library/Homebrew/extend/ENV/super.rb#L110-L112\r\n\r\nThat seems to assume the pre- https://github.com/Homebrew/legacy-homebrew/pull/50355 logic.\r\n\r\nI'm inclined to close this PR even if it's \"unpopular\" because I think it makes things less correct than the status quo, and it's really silly if a given build system cannot handle SDKROOT set to ‚Ä¶ the SDK root.\r\n\r\nRegarding vim specifically, as I mentioned here https://github.com/Homebrew/homebrew-core/pull/784#issuecomment-219239278, adding `-I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/include/ruby-2.0.0/universal-darwin15` to `CFLAGS` fixes that *without* having to unset SDKROOT.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 220250182,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-19T07:40:08Z",
		"body" : "I think this is what @UniqMartin likes:\r\n```\r\nself[\"MACOSX_DEPLOYMENT_TARGET\"] = MacOS.version.to_s\r\nself[\"SDKROOT\"] = MacOS.sdk_path if MacOS::Xcode.installed?\r\n```\r\n\r\nI think this caters to broken build systems:\r\n```\r\nself[\"MACOSX_DEPLOYMENT_TARGET\"] = MacOS.version.to_s if MacOS::Xcode.installed? && MacOS::Xcode.version.to_i >= 7\r\nself[\"SDKROOT\"] = MacOS.sdk_path if MacOS::Xcode.without_clt?\r\n```\r\n\r\nI think this is the bare minimum that is required:\r\n```\r\nself[\"MACOSX_DEPLOYMENT_TARGET\"] if MacOS::Xcode.installed? && MacOS::Xcode.version.to_i >= 7\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 225368675,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-11T15:11:01Z",
		"body" : "Sorry for failing to follow up here! (Not sure why you simply closed this, though.)\r\n\r\nIn light of https://github.com/Homebrew/homebrew-core/pull/1859#issuecomment-225368504 and your comments in that same PR I think we somehow need to revive this topic and find a more satisfying solution. I don't think there is a setup that can work universally for all formulae, so we might end up with some DSL element to tag formulae that fail on an Xcode-only system and those that fail on a CLT-only system (I guess `depends_on :xcode` does this already to some extent). The big question of course is: Who has enough time to ponder this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 225369524,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-11T15:22:09Z",
		"body" : "To maybe give some late input on https://github.com/Homebrew/brew/pull/251#issuecomment-220250182:\r\n\r\nI think there is never a good reason not to set `MACOSX_DEPLOYMENT_TARGET`. Thus this could be decoupled from setting `SDKROOT` and the code could become something like (very rough sketch):\r\n\r\n```ruby\r\nself[\"MACOSX_DEPLOYMENT_TARGET\"] = MacOS.version.to_s\r\nif formula_fails_with_clt_sdk\r\n  if MacOS::Xcode.installed?\r\n    self[\"SDKROOT\"] = MacOS.sdk_path\r\n  else\r\n    raise \"Failure.\"\r\n  end\r\nelsif formula_fails_with_xcode_sdk\r\n  if MacOS::Xcode.without_clt?\r\n    raise \"Failure.\"\r\n  else\r\n    self[\"SDKROOT\"] = \"/\" # Or unset?\r\n  end\r\nelse # formula_builds_with_any_sdk\r\n  if MacOS::Xcode.installed? && \r\n    self[\"SDKROOT\"] = MacOS.sdk_path\r\n  else\r\n    self[\"SDKROOT\"] = \"/\" # Or unset?\r\n  end\r\nend\r\n```\r\n\r\nDoes this make sense? Have I omitted an important case? Am I overlooking something?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 225369552,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-11T15:22:30Z",
		"body" : "The outcome in the referenced PR was that we learned about a bug that affects anyone without the CLT both before the Xcode 7 SDKROOT changes to superenv and after them. As a result of setting SDKROOT, our CI, which does have CLT, was still able to reveal a bug we'd not otherwise have known about until someone with Xcode-only reported it, and the fix for that bug kills two birds with one stone.\r\n\r\nMy takeaway is that superenv's setting sysroot does not play nicely with Autotools AC_CHECK_LIB, which is much more fragile than one might think.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 225369642,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-11T15:23:47Z",
		"body" : "As I mentioned above, setting MACOSX_DEPLOYMENT_TARGET when you don't have Xcode causes some formulae to blow up that are fine right now. Whack-a-mole.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 225369877,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-11T15:27:15Z",
		"body" : "> My takeaway is that superenv's setting sysroot does not play nicely with Autotools AC_CHECK_LIB, which is much more fragile than one might think.\r\n\r\nYes, that's an important takeaway. No idea what the correct solution for this is, though.\r\n\r\n> As I mentioned above, setting MACOSX_DEPLOYMENT_TARGET when you don't have Xcode causes some formulae to blow up that are fine right now. Wack-a-mole.\r\n\r\nYou're totally right, sorry! It escaped my memory and I failed to properly look at the previous comments. I guess I'm just too attached to an ideal world where build systems don't get confused by that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 225370950,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-11T15:47:26Z",
		"body" : "@UniqMartin For what it's worth, I think if we change anything, I'd lean toward being maximally aggressive and set\r\n```\r\nself[\"MACOSX_DEPLOYMENT_TARGET\"] = MacOS.version.to_s\r\nself[\"SDKROOT\"] = MacOS.sdk_path if MacOS::Xcode.installed?\r\n```\r\n\r\nThen address whatever fails directly since bugs are bugs, and those two settings *should* be possible universally except when the build system itself is broken in some way which should be addressed head on.\r\n\r\nOne piece of low-hanging fruit that might help is to have a way to require the CLT. That could then be combined with the ENV.delete(\"SDKROOT\") workarounds to be significantly more robust since there have been several cases where that workaround did nothing for you if you were without CLT, and you'd in fact have been impacted regardless of the Xcode 7 changes. If we could require CLT for those formulae, that problem goes away in all cases, which then lets us choose whether to address the underlying bug directly or not at our leisure without impacting users (other than the trouble of installing the CLT if they hadn't already).\r\n\r\n>No idea what the correct solution for this is, though.\r\n\r\nMe neither, but I wonder if the AC_CHECK_LIB code itself could be improved to detect the linkage failure even when clang exits 0 (perhaps by also confirming the linked paths actually exist!).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 225371239,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-11T15:53:33Z",
		"body" : "I think it's also worth noting that the missing library file was added by Apple for real in 10.11. I think the underlying cause in this case is `/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/lib/libnetwork.tbd` which contains\r\n```\r\narchs:           [ x86_64 ]\r\nplatform:        macosx\r\ninstall-name:    /usr/lib/libnetwork.dylib\r\n```\r\nwhich is totally bogus on 10.10, since that file just doesn't exist on Yosemite despite the fact that they've provided only the one SDK.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 225372956,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-11T16:26:03Z",
		"body" : "> For what it's worth, I think if we change anything, I'd lean toward being maximally aggressive and set\r\n\r\nI fully agree. Only thing is, I'm a bit afraid that this will break too many builds, causing us major hassle with formula updates on our CI and a significantly increased support burden due to issues filed by users.\r\n\r\n> Then address whatever fails directly since bugs are bugs, and those two settings *should* be possible universally except when the build system itself is broken in some way which should be addressed head on.\r\n\r\nIdeally, yes. The problem is that we'll be blamed that we broke people's builds and we just don't have the man power to fix all those breakages ourselves or to pester upstream to do it, with some upstreams understandably not being too interested in OS X. Things were a lot easier, if we could properly test these changes in a separate branch in the background and only deploy this once we are confident that most build failures are fixed or worked around. But this would require more CI than we currently have and ideally a set of VMs where the configurations are items of the Cartesian product of {10.9, 10.10, 10.11} with {CLT-only, Xcode-only, CLT-and-Xcode} ‚Ä¶\r\n\r\n> One piece of low-hanging fruit that might help is to have a way to require the CLT.\r\n\r\nAgreed.\r\n\r\n> Me neither, but I wonder if the AC_CHECK_LIB code itself could be improved to detect the linkage failure even when clang exits 0 (perhaps by also confirming the linked paths actually exist!).\r\n\r\nThis could help dealing with what I believe to be an Apple bug (see below). It will only partially help as it will still fail to detect missing symbols and other problems.\r\n\r\n> I think it's also worth noting that the missing library file was added by Apple for real in 10.11. I think the underlying cause in this case is `/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/lib/libnetwork.tbd` which contains [‚Ä¶] which is totally bogus on 10.10, since that file just doesn't exist on Yosemite despite the fact that they've provided only the one SDK.\r\n\r\nYes, failure like this isn't actually a build system failure but a bug in Apple's SDK and/or build tools. In this specific example, `libnetwork.tbd` should have been tagged with a minimum OS X release of 10.11 and the linker should fail the link when the deployment target is set to 10.10.\r\n\r\nThat's not the only problem with these `.tbd` files. I have also seen a case where the library referenced by the `.tbd` file existed on both 10.10 and 10.11, but the list of symbols included symbols that were not available in the 10.10 version of that library. In that case, the link also succeeded though it should have failed. (But Apple apparently didn't think about attaching version information to symbols.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 225373134,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-11T16:29:37Z",
		"body" : ">I'm a bit afraid that this will break too many builds\r\n\r\nFear not! `git revert` works astoundingly well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 225373462,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-11T16:35:57Z",
		"body" : "> Fear not! `git revert` works astoundingly well.\r\n\r\nYou mean just give it a try and backtrack if the backlash is too much to handle? üòÄ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 225373611,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-11T16:38:34Z",
		"body" : "Correct. I'd not assume a massive (or even substantial/significant/pick-your-favorite-word) problem would be created without some evidence.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 225378327,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-11T17:32:53Z",
		"body" : "For \"try things out and see how they go\" the best option is a environment-variable flag which we set in CI rather than testing things on users.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 225378638,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-11T17:34:35Z",
		"body" : "That makes sense.\r\n```\r\nself[\"MACOSX_DEPLOYMENT_TARGET\"] = MacOS.version.to_s\r\nself[\"SDKROOT\"] = MacOS.sdk_path if MacOS::Xcode.installed?\r\n```\r\nReally shouldn't be that scary, though ;)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 225392154,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-11T20:21:24Z",
		"body" : ">But Apple apparently didn't think about attaching version information to symbols.\r\n\r\nPerhaps at some point they'll admit they really only support the latest version of OS X.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 225430994,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-12T12:58:37Z",
		"body" : "> Really shouldn't be that scary, though ;)\r\n\r\nAs long as we're willing to revert it pretty quickly if it breaks things: I agree.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 251
	},
	{
		"id" : 220064051,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-18T15:29:55Z",
		"body" : "Important note: `fails_with :llvm` still works, it's just a no-op now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 252
	},
	{
		"id" : 220065498,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-18T15:34:26Z",
		"body" : "And tested installation with `node` which has a `fails_with :llvm` too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 252
	},
	{
		"id" : 220185377,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-18T23:13:20Z",
		"body" : "Aside from the code comments, I think [`test/test_stdlib.rb`](https://github.com/Homebrew/brew/blob/406fdbb391e844ea604c3eac1075c3f2562d07a9/Library/Homebrew/test/test_stdlib.rb) should be adjusted for this change.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 252
	},
	{
		"id" : 220242174,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-19T06:52:53Z",
		"body" : "> Aside from the code comments, I think test/test_stdlib.rb should be adjusted for this change.\r\n\r\nI disagree; it's good to keep LLVM tests around to verify that we aren't breaking the existing compiler support DSLs.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 252
	},
	{
		"id" : 220454618,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-19T21:16:33Z",
		"body" : "> I disagree; it's good to keep LLVM tests around to verify that we aren't breaking the existing compiler support DSLs.\r\n\r\nI agree with this as a general rule, but in this specific test file I can't see anything that would be related to formula DSL. And the tests about C++ standard library compatibility contained therein still make sense once LLVM-GCC (what we really mean with LLVM here) is out of the picture.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 252
	},
	{
		"id" : 220103568,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-18T17:42:29Z",
		"body" : "Try to `cd /usr/local; git reset --hard origin/master; brew update`.\r\n\r\nCC @xu-cheng for what looks like a locking bug.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220105683,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-18T17:50:10Z",
		"body" : "Can you show the output of `ls -al /tmp/`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220109741,
		"user" : {
			"login" : "ramonrails"
		},
		"created_at" : "2016-05-18T18:03:58Z",
		"body" : "I just restarted the terminal. brew  updated correctly. You may close this\nplease.\n\nRegards, Ram\n\nOn May 18, 2016 11:20 PM, \"Xu Cheng\" <notifications@github.com> wrote:\n\n> Can you show the output of ls -al /tmp/\n>\n> ‚Äî\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> <https://github.com/Homebrew/brew/issues/253#issuecomment-220105683>\n>\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220110410,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-18T18:06:31Z",
		"body" : "@ramonrails Were you using `tmux` or `screen` or anything? The output of `ls -al /tmp/` would still be useful if you can provide it so we can avoid others hitting this issue. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220110809,
		"user" : {
			"login" : "ramonrails"
		},
		"created_at" : "2016-05-18T18:07:53Z",
		"body" : "@mikemcquaid I just did. the relevant part only, though. thank you.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220116746,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-18T18:29:23Z",
		"body" : "@ramonrails Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220250567,
		"user" : {
			"login" : "ramonrails"
		},
		"created_at" : "2016-05-19T07:42:00Z",
		"body" : "This came again Today. Here are the complete output and steps.\r\n\r\nbrew doctor is clean\r\n```\r\nruby-2.3.1 ~/work/projects/code/sso (develop)*$ brew doctor\r\nYour system is ready to brew.\r\n```\r\n\r\nbrew update complained about another process (I only had single terminal console open.\r\n\r\n```\r\nruby-2.3.1 ~/work/projects/code/sso (develop)*$ brew update\r\n-e:1:in `initialize': Bad file descriptor (Errno::EBADF)\r\n\tfrom -e:1:in `new'\r\n\tfrom -e:1:in `<main>'\r\nError: Another active Homebrew process is already in progress.\r\nPlease wait for it to finish or terminate it to continue.\r\n```\r\n\r\nI looked at the /tmp folder as suggested above\r\n\r\n```\r\nruby-2.3.1 ~/work/projects/code/sso (develop)*$ ll /tmp/\r\ntotal 8\r\ndrwxrwxrwt  12 root  wheel   408B May 19 13:03 ./\r\ndrwxr-xr-x@  6 root  wheel   204B May 15 14:58 ../\r\n-rw-rw-rw-   1 ram   wheel     0B May 19 12:53 .keystone_install_lock\r\ndrwx------   3 ram   wheel   102B May 19 12:53 KSOutOfProcessFetcher.501.ppfIhqX0vjaTSb8AJYobDV7Cu68=/\r\ndrwx------   3 ram   wheel   102B May 19 12:53 com.apple.launchd.LVqVic1quK/\r\ndrwx------   3 ram   wheel   102B May 19 12:53 com.apple.launchd.UhC06p2CBa/\r\n-rw-r--r--@  1 ram   wheel     0B May 19 12:53 ct.shutdown\r\n-rw-r--r--   1 ram   wheel     0B May 19 13:03 homebrew-usr-local-update.lock\r\nsrwx------   1 ram   wheel     0B May 19 12:53 mongodb-27017.sock\r\nsrwxrwxrwx   1 ram   wheel     0B May 19 12:53 mysql.sock\r\n-rw-------   1 ram   wheel     4B May 19 12:53 mysql.sock.lock\r\nsrwxr-xr-x   1 ram   wheel     0B May 19 12:57 textmate-501.sock\r\n```\r\n\r\nfound home-brew-.... lock file, removed it.\r\n\r\n```\r\nruby-2.3.1 ~/work/projects/code/sso (develop)*$ rm /tmp/homebrew-usr-local-update.lock \r\nruby-2.3.1 ~/work/projects/code/sso (develop)*$ ll /tmp/\r\ntotal 8\r\ndrwxrwxrwt  11 root  wheel   374B May 19 13:04 ./\r\ndrwxr-xr-x@  6 root  wheel   204B May 15 14:58 ../\r\n-rw-rw-rw-   1 ram   wheel     0B May 19 12:53 .keystone_install_lock\r\ndrwx------   3 ram   wheel   102B May 19 12:53 KSOutOfProcessFetcher.501.ppfIhqX0vjaTSb8AJYobDV7Cu68=/\r\ndrwx------   3 ram   wheel   102B May 19 12:53 com.apple.launchd.LVqVic1quK/\r\ndrwx------   3 ram   wheel   102B May 19 12:53 com.apple.launchd.UhC06p2CBa/\r\n-rw-r--r--@  1 ram   wheel     0B May 19 12:53 ct.shutdown\r\nsrwx------   1 ram   wheel     0B May 19 12:53 mongodb-27017.sock\r\nsrwxrwxrwx   1 ram   wheel     0B May 19 12:53 mysql.sock\r\n-rw-------   1 ram   wheel     4B May 19 12:53 mysql.sock.lock\r\nsrwxr-xr-x   1 ram   wheel     0B May 19 12:57 textmate-501.sock\r\n```\r\n\r\n`brew update` failed anyways. the lock file was also re-created somehow during the `brew update` command\r\n\r\n```\r\nruby-2.3.1 ~/work/projects/code/sso (develop)*$ brew update\r\n-e:1:in `initialize': Bad file descriptor (Errno::EBADF)\r\n\tfrom -e:1:in `new'\r\n\tfrom -e:1:in `<main>'\r\nError: Another active Homebrew process is already in progress.\r\nPlease wait for it to finish or terminate it to continue.\r\nruby-2.3.1 ~/work/projects/code/sso (develop)*$ ll /tmp/\r\ntotal 8\r\ndrwxrwxrwt  11 root  wheel   374B May 19 13:05 ./\r\ndrwxr-xr-x@  6 root  wheel   204B May 15 14:58 ../\r\n-rw-rw-rw-   1 ram   wheel     0B May 19 12:53 .keystone_install_lock\r\ndrwx------   3 ram   wheel   102B May 19 12:53 KSOutOfProcessFetcher.501.ppfIhqX0vjaTSb8AJYobDV7Cu68=/\r\ndrwx------   3 ram   wheel   102B May 19 12:53 com.apple.launchd.LVqVic1quK/\r\ndrwx------   3 ram   wheel   102B May 19 12:53 com.apple.launchd.UhC06p2CBa/\r\n-rw-r--r--@  1 ram   wheel     0B May 19 12:53 ct.shutdown\r\n-rw-r--r--   1 ram   wheel     0B May 19 13:04 homebrew-usr-local-update.lock\r\nsrwx------   1 ram   wheel     0B May 19 12:53 mongodb-27017.sock\r\nsrwxrwxrwx   1 ram   wheel     0B May 19 12:53 mysql.sock\r\n-rw-------   1 ram   wheel     4B May 19 12:53 mysql.sock.lock\r\n```\r\n\r\n_PS: I was not sure whether to create a new issue or re-open this one. So, I just posted here on the closed issue @mikemcquaid @xu-cheng thank you for looking into this. Meanwhile, I will just reinstall home-brew fresh again to see if this goes away._\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220250946,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-19T07:43:51Z",
		"body" : "May I ask the output of `which ruby`? Are you using rbenv or RVM?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220251150,
		"user" : {
			"login" : "ramonrails"
		},
		"created_at" : "2016-05-19T07:44:49Z",
		"body" : "`rbenv 1.0.0`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220251633,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-19T07:47:19Z",
		"body" : "What's the output of `rbenv which ruby` and `rbenv version`?\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220258963,
		"user" : {
			"login" : "ramonrails"
		},
		"created_at" : "2016-05-19T08:23:49Z",
		"body" : "```\r\nruby-2.3.1 ~ $ rbenv which ruby\r\n/Users/ram/.rbenv/versions/2.3.1/bin/ruby\r\n```\r\n\r\n```\r\nruby-2.3.1 ~ $ rbenv version\r\n2.3.1 (set by /Users/ram/.rbenv/version)\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220959982,
		"user" : {
			"login" : "KatsCyl"
		},
		"created_at" : "2016-05-23T11:55:20Z",
		"body" : "I have the exact same problem, running brew update gives\r\n\r\n```\r\nErrno::EBADF: Bad file descriptor - Bad file descriptor\r\n  initialize at org/jruby/RubyIO.java:923\r\n  initialize at org/jruby/RubyFile.java:362\r\n         new at org/jruby/RubyIO.java:853\r\n      (root) at -e:1\r\nError: Another active Homebrew process is already in progress.\r\n```\r\n\r\nI'm using rvm, outputs of aforeasked \r\n\r\n```\r\nwhich ruby\r\n/Users/ahtikatiska/.rvm/rubies/jruby-1.7.23/bin/ruby\r\n```\r\n\r\n```\r\nrvm which ruby\r\n/Users/ahtikatiska/.rvm/rubies/jruby-1.7.23/bin/ruby\r\n```\r\n```\r\nrvm version\r\nrvm 1.27.0 (latest) by Wayne E. Seguin <wayneeseguin@gmail.com>, Michal Papis <mpapis@gmail.com> [https://rvm.io/]\r\n```\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220965952,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-23T12:26:34Z",
		"body" : "@ramonrails @KatsCyl \r\n\r\nIn order to help me debug this, could you show the output for following commands run in Bash?\r\n```\r\nbrew config\r\nbrew doctor\r\nls -al /dev/fd/\r\nexec 200>/tmp/test.lock\r\nls -al /dev/fd/\r\nruby -e 'File.new(200)'\r\n```\r\n\r\nAlso have you set Bash in restricted mode or other non-standard mode?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220967365,
		"user" : {
			"login" : "KatsCyl"
		},
		"created_at" : "2016-05-23T12:33:24Z",
		"body" : "```\r\nbrew config\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew\r\nHEAD: 2f20a42292e7d8d8f9ae9286632155a46e599700\r\nLast commit: 8 days ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 0a6ddaa2dce2a03675f9296d7fafc98278a73cbc\r\nCore tap last commit: 7 days ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: 8-core 64-bit haswell\r\nClang: 7.3 build 703\r\nPerl: /usr/bin/perl\r\nPython: /usr/bin/python\r\nRuby: /Users/ahtikatiska/.rvm/rubies/jruby-1.7.23/bin/ruby => /Users/ahtikatiska/.rvm/rubies/jruby-1.7.23/bin/jruby\r\nJava: 1.8.0_92, 1.8.0_91\r\nSystem Ruby: 2.0.0-p648\r\nOS X: 10.11.5-x86_64\r\nXcode: N/A\r\nCLT: 7.3.1.0.1.1461711523\r\nX11: N/A\r\n```\r\n```\r\nbrew doctor\r\nPlease note that these warnings are just used to help the Homebrew maintainers\r\nwith debugging if you file an issue. If everything you use Homebrew for is\r\nworking fine: please don't worry and just ignore them. Thanks!\r\n\r\nWarning: Your Homebrew is outdated.\r\nYou haven't updated for at least 24 hours. This is a long time in brewland!\r\nTo update Homebrew, run `brew update`.\r\n```\r\n```\r\nls -al /dev/fd/\r\ntotal 0\r\ncrw--w----   1 ahtikatiska  tty     16,   0 May 23 15:31 0\r\ncrw--w----   1 ahtikatiska  tty     16,   0 May 23 15:31 1\r\ncrw--w----   1 ahtikatiska  tty     16,   0 May 23 15:31 2\r\ndrw-r--r--  36 ahtikatiska  staff      1224 May 23 13:48 3\r\ndr--r--r--   1 root         wheel         0 May 23 14:39 4\r\n```\r\n```\r\nexec 200>/tmp/test.lock\r\n```\r\n```\r\nls -al /dev/fd/\r\ntotal 0\r\ncrw--w----   1 ahtikatiska  tty     16,   0 May 23 15:32 0\r\ncrw--w----   1 ahtikatiska  tty     16,   0 May 23 15:32 1\r\ncrw--w----   1 ahtikatiska  tty     16,   0 May 23 15:32 2\r\n-rw-r--r--   1 ahtikatiska  wheel         0 May 23 15:32 200\r\ndrw-r--r--  36 ahtikatiska  staff      1224 May 23 13:48 3\r\ndr--r--r--   1 root         wheel         0 May 23 14:39 4\r\n```\r\n```\r\nruby -e 'File.new(200)'\r\nErrno::EBADF: Bad file descriptor - Bad file descriptor\r\n  initialize at org/jruby/RubyIO.java:923\r\n  initialize at org/jruby/RubyFile.java:362\r\n         new at org/jruby/RubyIO.java:853\r\n      (root) at -e:1\r\n```\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220970909,
		"user" : {
			"login" : "ramonrails"
		},
		"created_at" : "2016-05-23T12:49:59Z",
		"body" : "```\r\nruby-2.3.1 ~/tmp $ brew config\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew\r\nHEAD: d345483de164e062727f95d3fbd575433d735548\r\nLast commit: 16 hours ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 6442c12aea41de740333aff8249cc3c09fb1dd9e\r\nCore tap last commit: 10 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: 8-core 64-bit ivybridge\r\nClang: 7.3 build 703\r\nPerl: /usr/bin/perl\r\nPython: /usr/bin/python\r\nRuby: /Users/ram/.rbenv/shims/ruby => /Users/ram/.rbenv/versions/2.3.1/bin/ruby\r\nJava: N/A\r\nSystem Ruby: 2.0.0-p648\r\nOS X: 10.11.4-x86_64\r\nXcode: 7.3.1\r\nCLT: 7.3.1.0.1.1461711523\r\nX11: N/A\r\n```\r\n\r\n```\r\nruby-2.3.1 ~/tmp $ brew doctor\r\nYour system is ready to brew.\r\nruby-2.3.1 ~/tmp $ ls -al /dev/fd/\r\ntotal 0\r\ncrw--w----  1 ram   tty     16,   2 May 23 18:17 0\r\ncrw--w----  1 ram   tty     16,   2 May 23 18:17 1\r\ncrw--w----  1 ram   tty     16,   2 May 23 18:17 2\r\ndrw-r--r--  5 ram   staff       170 May 22 23:41 3\r\ndr--r--r--  1 root  wheel         0 May 23 11:52 4\r\n```\r\n\r\n```\r\nruby-2.3.1 ~/tmp $ exec 200>/tmp/test.lock\r\n```\r\n\r\n```\r\nruby-2.3.1 ~/tmp $ ls -al /dev/fd/\r\ntotal 0\r\ncrw--w----  1 ram   tty     16,   2 May 23 18:18 0\r\ncrw--w----  1 ram   tty     16,   2 May 23 18:18 1\r\ncrw--w----  1 ram   tty     16,   2 May 23 18:18 2\r\n-rw-r--r--  1 ram   wheel         0 May 23 18:18 200\r\ndrw-r--r--  5 ram   staff       170 May 22 23:41 3\r\ndr--r--r--  1 root  wheel         0 May 23 11:52 4\r\n```\r\n\r\n```\r\nruby-2.3.1 ~/tmp $ ruby -e 'File.new(200)'\r\nruby-2.3.1 ~/tmp $ \r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220973454,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-23T13:01:05Z",
		"body" : "@ramonrails It seems that error has been gone for you.\r\n\r\n@KatsCyl Can you try:\r\n```\r\nexec 200>/tmp/test.lock\r\n/usr/bin/ruby -e 'File.new(200)'\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220973733,
		"user" : {
			"login" : "KatsCyl"
		},
		"created_at" : "2016-05-23T13:02:18Z",
		"body" : "That completed without errors",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220973851,
		"user" : {
			"login" : "ramonrails"
		},
		"created_at" : "2016-05-23T13:02:47Z",
		"body" : "As I explained above, I just needed to move on with my work, so reinstalled everything. Thank you for your time & attention to this issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220974752,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-23T13:06:40Z",
		"body" : "@MikeMcQuaid It seems that this bug comes from third party ruby interpreter. Shall we hardcore the path to `/usr/bin/ruby`, i.e. system ruby?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220976019,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-23T13:12:15Z",
		"body" : "@xu-cheng Seems like a good idea for now on OS X and then it can use the vendored Ruby when that exists.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220976662,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-23T13:15:03Z",
		"body" : "@MikeMcQuaid Since I have no Mac access in this week, would you mind to open the PR?\r\n\r\nAs for vendor Ruby, I think we can keep to use system Ruby because this one line command is Ruby 1.x compatible. And we will use this lock when installing vendor Ruby.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220978695,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-23T13:23:21Z",
		"body" : "@xu-cheng done in https://github.com/Homebrew/brew/pull/271",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 241241150,
		"user" : {
			"login" : "ourobourbon"
		},
		"created_at" : "2016-08-21T06:21:46Z",
		"body" : "I just had this problem arise for me. Is there a \"cliff notes\" version to resolving it?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 248801969,
		"user" : {
			"login" : "rochastuff"
		},
		"created_at" : "2016-09-22T03:29:35Z",
		"body" : "I had the same issue, my problem was that i run a sudo command that probably affected some permissions, so to fix Homebrew i first run the following command to fix the permissions:\r\n\r\n`sudo chown -R \"$USER\":admin /usr/local`\r\n\r\nAfter that I did a cleanup:\r\n\r\n`brew cleanup`\r\n\r\nAnd I was successfully able to update Homebrew and install packages.\r\nHope this helps!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 250096217,
		"user" : {
			"login" : "yizhi401"
		},
		"created_at" : "2016-09-28T07:48:35Z",
		"body" : "@rochastuff helped me!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 253
	},
	{
		"id" : 220406165,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-19T18:07:49Z",
		"body" : "It'd be equally good to audit for the alternative situation, where the same file gets `inreplace`d multiple times without using a `inreplace do` block.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 254
	},
	{
		"id" : 220430128,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-19T19:38:57Z",
		"body" : "@DomT4 Agreed üëç (but not in this PR üòâ)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 254
	},
	{
		"id" : 220192260,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-18T23:57:11Z",
		"body" : "I found many regressions by comparing `brew info --json=v1 --all` before and after. (Once this PR is finalized, the diff should probably be empty.) Pseudo-diff of select examples:\r\n\r\n```diff\r\n $ brew info abi-compliance-checker | head -n 1\r\n-abi-compliance-checker: stable 1.99.9 (bottled)\r\n+abi-compliance-checker: stable 1.99.9.tar.gz (bottled)\r\n $ brew info apib | head -n 1\r\n-apib: stable 1.0 (bottled), HEAD\r\n+apib: stable APIB_1_0.tar.gz (bottled), HEAD\r\n $ brew info aria2 | head -n 1\r\n-aria2: stable 1.23.0 (bottled)\r\n+aria2: stable release-1.23.0 (bottled)\r\n $ brew info atdtool | head -n 1\r\n-atdtool: stable 1.3 (bottled)\r\n+atdtool: stable upstream (bottled)\r\n $ brew info cjdns | head -n 1\r\n-cjdns: stable 17.3 (bottled), HEAD\r\n+cjdns: stable v17.3.tar.gz (bottled), HEAD\r\n```\r\n\r\n> No tests needed changed which indicates this doesn‚Äôt break any of our tested cases.\r\n\r\nSadly this also shows that our test cases are far from perfect ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 255
	},
	{
		"id" : 220201039,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-19T01:01:43Z",
		"body" : "üëç",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 256
	},
	{
		"id" : 220187650,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-18T23:26:42Z",
		"body" : "Thanks for the report! Does `ls $(brew --cellar)` show the same behavior? If so, do you have anything in your environment that could affect the operation of `ls`? Do you see the same issue if you, e.g., use `brew search git`? What terminal are you using? Are you using `screen` or `tmux`?\r\n\r\n> Issue may be related to / may be fixed by #201.\r\n\r\nI'm pretty sure that's unrelated. What makes you think otherwise?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 257
	},
	{
		"id" : 220188934,
		"user" : {
			"login" : "Phlosioneer"
		},
		"created_at" : "2016-05-18T23:34:28Z",
		"body" : ">Does `ls $(brew --cellar)` show the same behavior?\r\n\r\nNo, it doesn't. It prints everything perfectly.\r\n\r\n>Do you see the same issue if you, e.g., use `brew search git`?\r\n\r\nNo, it shows searches perfectly, even for one as large as that.\r\n\r\n>What terminal are you using?\r\n\r\nStandard OS X one. Terminal version 2.6.1, OS X version 10.11.4\r\n\r\n>I'm pretty sure that's unrelated. What makes you think otherwise?\r\n\r\nI thought it might be, because they're doing a lot of changes to the methods that output stuff to terminals. I may be wrong; it was the most interesting one I found while searching older issues for list problems. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 257
	},
	{
		"id" : 220194289,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-19T00:10:58Z",
		"body" : "Interesting, but I don't have an idea yet and cannot reproduce. (I asked about `ls` because that's what is used internally by `brew list`.) What is the output of `echo \"$TERM\"`? What does `which ls` print? What do you get from `env | egrep '^(LANG|LC_)'`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 257
	},
	{
		"id" : 220196139,
		"user" : {
			"login" : "Phlosioneer"
		},
		"created_at" : "2016-05-19T00:23:48Z",
		"body" : "> Interesting, but I don't have an idea yet and cannot reproduce.\r\nHuh. I'll try and provide as much information as I can, because I can reproduce the bug indefinitely.\r\n\r\n> What is the output of echo \"$TERM\"?\r\n\r\n`xterm-256color`\r\n\r\nI tried cycling through the various terminal types that are built in to the OS X Terminal. After a while, I figured out that only one instance of the shell was misprinting. So this probably wasn't brew's fault.\r\n\r\nHowever, it is still _very_ interesting that the `brew list` behavior differed from `ls (brew --cellar)`\r\nI'm going to close this issue, though the difference might be worth looking at the code.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 257
	},
	{
		"id" : 220225187,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-19T04:31:44Z",
		"body" : "`brew ls` has two forms: one that lists the files in a formula, and one that lists the installed formulae. In this case, OP is calling the formula-listing form, and that one doesn't involve the `ls` command, at least not for output. The output of plain `brew ls` is formatted by `brew`'s own [`puts_columns` method](https://github.com/Homebrew/brew/blob/9e7b8c61a99c4d4c69da36f95759e375b7a4e116/Library/Homebrew/utils.rb#L360) in `utils.rb`. So its formatting won't necessarily match that of `ls`.\r\n\r\nI'd suspect a minor arithmetic bug in `puts_columns` in [this part of the code](https://github.com/Homebrew/brew/blob/9e7b8c61a99c4d4c69da36f95759e375b7a4e116/Library/Homebrew/utils.rb#L380-L393) which calculates column widths and pads the items for output with `ljust`. If so, this would be sensitive to your terminal window's exact size, and the exact list of items you have installed. Opening a new session might have fixed it just because you had a different terminal window size.\r\n\r\nShould be able to reproduce this by taking that list of formula names and feeding it to some test code that calls `puts_columns` on an arbitrary list of strings, and re-running that at various terminal window sizes. (Or just overriding the `$COLUMNS` value when calling it, which you could script.)\r\n\r\nIf this is the case, I bet the bug could be fixed, and the `puts_columns` code made more readable, by switching it to use `printf` with fixed field widths in the format specifiers, instead of padding the input items before passing to `puts`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 257
	},
	{
		"id" : 220225498,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-19T04:35:12Z",
		"body" : "> `brew ls` has two forms: one that lists the files in a formula, and one that lists the installed formulae. In this case, OP is calling the formula-listing form, and that one doesn't involve the `ls` command, at least not for output. The output of plain `brew ls` is formatted by `brew`'s own [`puts_columns` method](https://github.com/Homebrew/brew/blob/9e7b8c61a99c4d4c69da36f95759e375b7a4e116/Library/Homebrew/utils.rb#L360) in `utils.rb`. So its formatting won't necessarily match that of `ls`.\r\n\r\nNope. :wink: It probably should be like you say, but it isn't. See [`cmd/list.rb`](https://github.com/Homebrew/brew/blob/406fdbb391e844ea604c3eac1075c3f2562d07a9/Library/Homebrew/cmd/list.rb#L50-L51).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 257
	},
	{
		"id" : 220225920,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-19T04:39:41Z",
		"body" : "> If this is the case, I bet the bug could be fixed, and the `puts_columns` code made more readable, by switching it to use `printf` with fixed field widths in the format specifiers, instead of padding the input items before passing to `puts`.\r\n\r\nAnd this cannot be done because the character count is not equal to the display width thanks to ANSI escape characters that we use for formatting, but that are effectively zero-width in the output. (At least if we want to get the columns to align in both formatted and unformatted output using the same code.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 257
	},
	{
		"id" : 220227789,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-19T04:57:52Z",
		"body" : "Ooooops. Sorry for the misread.\r\n\r\nThough it looks like `puts_columns` [does use `strip_ansi`](https://github.com/Homebrew/brew/blob/9e7b8c61a99c4d4c69da36f95759e375b7a4e116/Library/Homebrew/utils.rb#L371) to remove (some) terminal control sequences when calculating column widths. And it wouldn't be hard to expand it to cover other control sequences if there's still an issue with that.\r\n\r\nThat's weird then. Possibly a similar arithmetic edge case bug in `ls`? Though I'm hesitant to think that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 257
	},
	{
		"id" : 220231201,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-19T05:30:13Z",
		"body" : "We're getting a bit off track, but oh well ‚Ä¶\r\n\r\n> Though it looks like `puts_columns` [does use `strip_ansi`](https://github.com/Homebrew/brew/blob/9e7b8c61a99c4d4c69da36f95759e375b7a4e116/Library/Homebrew/utils.rb#L371) to remove (some) terminal control sequences when calculating column widths. And it wouldn't be hard to expand it to cover other control sequences if there's still an issue with that.\r\n\r\nYes, `strip_ansi` is used to compute the display width of the items. (I doubt there's an issue with this code, but who knows. It strips the ANSI control sequences we insert for formatting, but of course doesn't take into account other characters that might already exist in a given string and affect the output rendering in a terminal.)\r\n\r\nI tested this code (`puts_columns`) pretty thoroughly with various item widths, terminal widths, and column counts. Thus I'm pretty confident it works correctly and has no arithmetic edge cases.\r\n\r\nTo get back to the question of format strings: My impression was that they are not too popular in the Ruby community. And I'm dubious whether\r\n\r\n```ruby\r\nitems = items.each_with_index.map do |item, index|\r\n  format(\"%-*s\", col_width + (item.length - plain_item_lengths[index]), item)\r\nend\r\n```\r\n\r\nis any clearer than\r\n\r\n```ruby\r\nitems = items.each_with_index.map do |item, index|\r\n  item + \"\".ljust(col_width - plain_item_lengths[index])\r\nend\r\n```\r\n\r\n> Possibly a similar arithmetic edge case bug in `ls`? Though I'm hesitant to think that.\r\n\r\nVery unlikely, IMO. I guess we will never know unless we find a way to reproduce this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 257
	},
	{
		"id" : 220339387,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-19T14:22:35Z",
		"body" : "> We're getting a bit off track, but oh well ‚Ä¶\r\n> [...] Thus I'm pretty confident [`puts_columns`] works correctly [...]\r\n\r\nYou're right, this is a red herring. The only reason to suspect a bug in the `puts_columns` code was the OP's observed bad output. But since that code path is not actually getting hit, no reason to think it's buggy.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 257
	},
	{
		"id" : 220216575,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-19T03:05:36Z",
		"body" : "Thanks for the PR! The change will need to be made in `cmd/install.rb` though (there's a special documentation comment at the top). After you made the change there, please run `brew man` to regenerate the man page and its HTML version, then make sure all three changed files are added to the commit.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 258
	},
	{
		"id" : 220226673,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-19T04:47:03Z",
		"body" : "Yup; :+1: once converted to fix `cmd/install.rb` too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 258
	},
	{
		"id" : 220239396,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-05-19T06:34:26Z",
		"body" : "Thanks for the tip. Corrected.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 258
	},
	{
		"id" : 220240988,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-19T06:44:45Z",
		"body" : "Merged. Thank you for this PR and another contribution to Homebrew, @zmwangx! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 258
	},
	{
		"id" : 220254442,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-19T08:01:37Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 259
	},
	{
		"id" : 220383589,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-19T16:45:05Z",
		"body" : "üëç :shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 259
	},
	{
		"id" : 220549847,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-20T08:45:14Z",
		"body" : "Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 262
	},
	{
		"id" : 222191470,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-27T16:25:47Z",
		"body" : "Closing as dead but please do shout if there's anything further we can do to help here. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 262
	},
	{
		"id" : 220565677,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-20T09:59:14Z",
		"body" : "Thanks for this. Have been meaning to write it into the `pull` command for a while but Andrew rewrote most of `pull` and I lost track of the logic in that command. Looks reasonable to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 263
	},
	{
		"id" : 220666220,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-20T17:20:20Z",
		"body" : "Nice one! :+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 263
	},
	{
		"id" : 220708321,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-20T20:18:15Z",
		"body" : "Neat! I didn't know we did this.\r\n\r\nShould we also mirror files that are:\r\n* on known-flaky servers\r\n* in the archive.org wayback machine\r\n* known to delete or change URLs for old versions\r\n?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 263
	},
	{
		"id" : 220764329,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-21T07:45:15Z",
		"body" : "@apjanke Yes but we need to not mirror too much stuff as if we're ever space-restricted then bottles are more impotant üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 263
	},
	{
		"id" : 220667889,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-20T17:27:00Z",
		"body" : "@britztopher Could you post your `brew config` and `env | grep -i proxy`? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 264
	},
	{
		"id" : 220692230,
		"user" : {
			"login" : "britztopher"
		},
		"created_at" : "2016-05-20T19:05:03Z",
		"body" : "@MikeMcQuaid Thing is i reverted back and i really dont want to have to go back and try this all over again.  Would homebrew legacy and homebrew 'new' be the same config file?  Also, i have my `http_proxy` and `https_proxy` set in my environment vars.    I have seen talk on SO that states this could be an issue with ruby's uri implementation, however, i dont understand why this works with legacy and not the 0.9.9 release.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 264
	},
	{
		"id" : 220692595,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-20T19:06:41Z",
		"body" : "@britztopher That's fine, still interested in both those values on legacy-homebrew, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 264
	},
	{
		"id" : 220791307,
		"user" : {
			"login" : "britztopher"
		},
		"created_at" : "2016-05-21T17:47:28Z",
		"body" : "@MikeMcQuaid  here is my brew config \r\nHOMEBREW_VERSION: 0.9.8\r\nORIGIN: https://github.com/Homebrew/legacy-homebrew.git\r\nHEAD: f0b70e5725662377ea2feb14f59e407bd7071fe0\r\nLast commit: 11 days ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 89833243043754e669be26ea756cab12b150c9a4\r\nCore tap last commit: 32 hours ago\r\nHOMEBREW_PREFIX: /usr/local/legacy-homebrew\r\nHOMEBREW_REPOSITORY: /usr/local/legacy-homebrew\r\nHOMEBREW_CELLAR: /usr/local/legacy-homebrew/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: 8-core 64-bit haswell\r\nOS X: 10.11.4-x86_64\r\nXcode: 7.3.1\r\nCLT: 7.3.1.0.1.1461711523\r\nClang: 7.3 build 703\r\nX11: N/A\r\nSystem Ruby: 2.0.0-p648\r\nPerl: /usr/bin/perl\r\nPython: /usr/bin/python\r\nRuby: /usr/bin/ruby => /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby\r\nJava: 1.8.0_60, 1.7.0_80\r\n\r\nalso, i shared my proxy env vars already.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 264
	},
	{
		"id" : 220791623,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-21T17:53:53Z",
		"body" : "@britztopher I'm still interested in the output of `env | grep -i proxy` if you get the chance, thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 264
	},
	{
		"id" : 220852772,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-22T19:59:24Z",
		"body" : "@Homebrew/maintainers Given the dire state of Ruby's proxy support (in relation to `curl`'s) I'm tempted to say we rewrite anything using the Ruby HTTP APIs to use `curl` instead. Any objections?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 264
	},
	{
		"id" : 220854125,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-22T20:24:59Z",
		"body" : "Presuming we enforce the use of our `curl` where we know the system's is useless, üëç from me in principle.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 264
	},
	{
		"id" : 220967927,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-23T12:36:22Z",
		"body" : "A quick `grep` indicates that we're currently using Ruby's HTTP/HTTPS APIs for GitHub API access and for uploading Gists via `brew gist-logs`. Have I missed anything? (`brew pull` also uses it, but that's probably less of a concern as this isn't user facing.)\r\n\r\nI'm in favor making all those instances use `curl`, if that can be feasibly done (and I guess it can be).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 264
	},
	{
		"id" : 220975726,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-23T13:10:58Z",
		"body" : "> A quick grep indicates that we're currently using Ruby's HTTP/HTTPS APIs for GitHub API access and for uploading Gists via brew gist-logs. Have I missed anything?\r\n\r\n@UniqMartin Those are also the main places I thought of.\r\n\r\n> (brew pull also uses it, but that's probably less of a concern as this isn't user facing.)\r\n\r\nYeh, that was a case where I thought using the API is fine as no maintainers have complained about it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 264
	},
	{
		"id" : 221008516,
		"user" : {
			"login" : "britztopher"
		},
		"created_at" : "2016-05-23T15:19:38Z",
		"body" : "@MikeMcQuaid here are my env vars for `env | grep -i proxy`:\r\n\r\n    https_proxy=https://un:pw@myproxy.com:1234 \r\n    http_proxy=http://un:pw@myproxy.com:1234 \r\n    HTTP_PROXY=http://un:pw@myproxy.com:1234\r\n    HTTPS_PROXY=https://un:pw@myproxy.com:1234\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 264
	},
	{
		"id" : 221136858,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-24T00:44:37Z",
		"body" : "> > (brew pull also uses it, but that's probably less of a concern as this isn't user facing.)\r\n>\r\n> Yeh, that was a case where I thought using the API is fine as no maintainers have complained about it.\r\n\r\nYeah, and the particular thing it's doing can't be done in pure `curl`; otherwise I would have just used `curl`.\r\n\r\nNo objections to rewriting other uses in `curl`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 264
	},
	{
		"id" : 221484818,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-25T06:29:46Z",
		"body" : "@britztopher Kinda curious to me, What will happen if you run `brew gist-logs <any formula you installed>`? If it were a success, I believe the root problem is not Ruby's HTTP proxy support is broken but open-uri's proxy support doesn't work with basic auth.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 264
	},
	{
		"id" : 223623688,
		"user" : {
			"login" : "brian-eng"
		},
		"created_at" : "2016-06-03T16:16:19Z",
		"body" : "After updating homebrew so I got the changes from #295 I no longer need to set the env HOMEBREW_NO_GITHUB_API in order to add taps or install new formula as per https://github.com/Homebrew/brew/issues/193#issuecomment-217742510\r\n\r\nGranted, the proxy I'm behind doesn't require authentication so it's not exactly the same issue as @britztopher has.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 264
	},
	{
		"id" : 223652559,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-03T18:12:39Z",
		"body" : "@brian-eng Thanks for the feedback! This sounds encouraging.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 264
	},
	{
		"id" : 223757811,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-04T14:12:44Z",
		"body" : "@brian-eng Glad to hear it. @britztopher I'm going to assume I've fixed this for you but comment if I have not.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 264
	},
	{
		"id" : 220667978,
		"user" : {
			"login" : "mikemcquaid"
		},
		"created_at" : "2016-05-20T17:27:21Z",
		"body" : "No, sorry, you'll need to create your own formula.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 265
	},
	{
		"id" : 220837610,
		"user" : {
			"login" : "antoniobrandao"
		},
		"created_at" : "2016-05-22T15:14:35Z",
		"body" : "ok thanks",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 265
	},
	{
		"id" : 220710287,
		"user" : {
			"login" : "kmincks"
		},
		"created_at" : "2016-05-20T20:27:14Z",
		"body" : "Oh, I did try to manually download the file and move it into the /Library/Caches/Homebrew/ folder, but it is still not picking up the dependency from that location",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 266
	},
	{
		"id" : 220711686,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-20T20:33:54Z",
		"body" : "Fixed via https://github.com/Homebrew/homebrew-versions/commit/516908f1edff0362d6f1004007c3aff1505062b2. Please `brew update` and try again. \r\n\r\nNote reporting issues that apply to `homebrew/versions` formulae should be done in that tap, Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 266
	},
	{
		"id" : 220788720,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-05-21T16:58:53Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 267
	},
	{
		"id" : 220790971,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-21T17:40:29Z",
		"body" : "Since those arguments are guaranteed to be routed to the multi-argument `system` call (via `cabal_install`) it's never necessary to apply the additional quoting, but instead constitutes an error as those quotes will never be seen by a shell. Nice catch!\r\n\r\n**TL;DR:** :+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 267
	},
	{
		"id" : 220852705,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-22T19:57:56Z",
		"body" : "Makes sense to me üëç @xu-cheng?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 268
	},
	{
		"id" : 221136845,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-05-24T00:44:29Z",
		"body" : "Thanks for the notes @xu-cheng! Fixed as you suggested.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 268
	},
	{
		"id" : 220888027,
		"user" : {
			"login" : "dabrahams"
		},
		"created_at" : "2016-05-23T05:03:52Z",
		"body" : "Never mind; I was expecting to see it in the wrong place.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 269
	},
	{
		"id" : 221131779,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-24T00:09:17Z",
		"body" : "@BrewTestBot test this please",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 221225858,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-24T10:13:30Z",
		"body" : "Thanks for the PR! Aside from the code comments, here are some general steps that need to be followed when contributing command documentation changes:\r\n\r\n1. Make the change in the corresponding command's implementation file (you did this).\r\n2. Check the output of `brew help <command>` still looks sensible.\r\n3. Regenerate the man page and its HTML version by running `brew man`.\r\n4. Check that the diff for those two files is limited to the changed section. If the diff is big, it most likely means some change broke the overall formatting.\r\n5. Check that the man page still renders as expected by running `man brew`.\r\n6. Add all three files (changed command implementation and auto-generated files) to your commit.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 221330769,
		"user" : {
			"login" : "kaizensoze"
		},
		"created_at" : "2016-05-24T16:39:28Z",
		"body" : "Cool I'll go ahead and make the appropriate changes. I wasn't aware of `brew man && man brew` (now I know). Should that maybe be added to either the PR checklist, README, or a CONTRIBUTING.md?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 221353866,
		"user" : {
			"login" : "kaizensoze"
		},
		"created_at" : "2016-05-24T18:01:32Z",
		"body" : "Since both (`search`|`-S`) and `search`, `-S` are confusing, I was going to propose adding \"alias: `brew -S`\" as the last line of the description of the first command, but the fact that the alias starts with a dash is confusing in itself so I think it's better to just leave it out of the doc.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 221429859,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-24T23:14:31Z",
		"body" : "> [‚Ä¶], but the fact that the alias starts with a dash is confusing in itself so I think it's better to just leave it out of the doc.\r\n\r\nI'm fine with this, but would like to give other maintainers a chance to voice objections they might have before merging. If this is met with approval, I think it would be best to do the same for other commands that have a documented alias (at least `link` and `list`, maybe others). If not, we'll have to figure out a better way for documenting our pre-defined command aliases.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 221437852,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-25T00:04:35Z",
		"body" : "Hmmm. The subcommand aliases that start with a `-` are kind of confusing, especially when you throw them in to a usage synopsis.\r\n\r\n```\r\n  brew ( search | -S ) [--desc] <text> | /<text>/\r\n```\r\n\r\nMy reaction to that would be \"huh? a subcommand is alternating with an option?\" And my reaction to the original one with the comma:\r\n\r\n```\r\n  brew search, -S [--desc] <text> | /<text>/\r\n```\r\n\r\nwas \"huh? what does that comma mean?\". It's not normal pseudo-BNF, from what I've seen. And a comma often indicates sequencing in programming languages, not alternation.\r\n\r\nThere are some aliases that I suspect are pretty commonly used, like `rm` and `ln`. I think those may be better off left in the synopses. But I think the BNF style parentheses Martin is talking about would be a better form for them.\r\n\r\n```\r\n  brew ( uninstall | rm | remove ) [--force] formula:\r\n```\r\n\r\nThat's readable to me, and I think it would be for other newer users.\r\n\r\nNot sure what the best thing to do is here, but my inclination would be to remove the aliases starting with `-` and rarely-used aliases from the per-command helptext, leave the probably-commonly-used normal-word aliases in, and document all the removed aliases in a separate \"Subcommand Aliases\" section in the main `man brew` page near where the alias feature itself is documented. Though we'd just be guessing which aliases were really commonly used. And it does make the rules for generating the synopsis documentation inconsistent; it leaves the inclusion up to human judgment.\r\n\r\nMy guess would be that only the `rm`, `ls`, `--repo`, and maybe `ln` aliases are commonly used, and the rest are abbreviations for advanced users, typo fixes, beer jokes, or conveniences for people coming from other package managers, and don't need to be included in the per-command helptext.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 221622912,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-25T16:00:41Z",
		"body" : "> Not sure what the best thing to do is here, but my inclination would be to remove the aliases starting with - and rarely-used aliases from the per-command helptext, leave the probably-commonly-used normal-word aliases in, and document all the removed aliases in a separate \"Subcommand Aliases\" section in the main man brew page near where the alias feature itself is documented.\r\n\r\nAgreed üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 221670307,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-25T18:49:20Z",
		"body" : "I wonder if dropping the aliases from the documentation of `link`, `list`, and `uninstall` (I think these are the documented and popular ones) and instead adding short paragraphs as follows would be a good solution for documenting the aliases in the man page:\r\n\r\n```\r\n`ln` <arguments>\r\n    Alias for `link` <arguments>. See there for full documentation.\r\n```\r\n\r\nThis would make it easier to find them in the man page, as they could be ordered naturally. Currently one has to scroll down to `uninstall` to find the documentation, if one is used to typing `rm` or `remove`.\r\n\r\n----\r\n\r\nI'm not suggesting to document all existing aliases, and most of them are probably there for backwards compatibility. For example, probably nobody needs to know that `abv` is an alias for `info`. (I don't even know what `abv` refers to, but I do wonder.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 221763205,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-26T02:40:55Z",
		"body" : "My one concern with that would be that I bet `rm` and `ls` are so commonly used that they show up in public code snippets a lot, and newish users reading those and doing a ` brew rm --help` and being presented with a page that doesn't say `rm` anywhere on it might be confusing.\r\n\r\nMy basis for thinking they're widely used like this is that they're what I use myself, having learned that from seeing other people writing about them, and in code snippets here on GitHub issue discussions, IIRC, I usually see ``rm` and `ls` instead of the longer forms.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 221797294,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-26T07:27:03Z",
		"body" : "Thinking about this more: I think the nicest option is to have the aliases on the zero-argument version and omit them on the rest.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 221797340,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-26T07:27:18Z",
		"body" : "(as I think the `, -S` only reads weirdly when there are arguments)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 221892556,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-26T14:46:27Z",
		"body" : "Merged. Thank you for this contribution to Homebrew, @kaizensoze! :tada:\r\n\r\nI think the issue of improving the documentation of our built-in aliases is out of scope for this PR and the change made here is definitely an improvement over the current situation, hence the merge. We'll need to figure out a better solution for our aliases in a follow-up PR.\r\n\r\n----\r\n\r\n> My one concern with that would be that I bet `rm` and `ls` are so commonly used that they show up in public code snippets a lot, and newish users reading those and doing a ` brew rm --help` and being presented with a page that doesn't say `rm` anywhere on it might be confusing.\r\n\r\nThis can be fixed relatively easy, as the [code responsible for printing the `brew <command> --help` output](https://github.com/Homebrew/brew/blob/e517e2e41d2166d967a5ca8a71d4e178804a360c/Library/Homebrew/cmd/help.rb#L66) has enough information to programmatically append an `Aliases:` line like:\r\n\r\n```\r\nbrew uninstall [--force] formula:\r\n    Uninstall formula.\r\n\r\n    If --force is passed, and there are multiple versions of formula\r\n    installed, delete all installed versions.\r\n\r\n    Aliases: rm, remove\r\n```\r\n\r\n> Thinking about this more: I think the nicest option is to have the aliases on the zero-argument version and omit them on the rest.\r\n> (as I think the `, -S` only reads weirdly when there are arguments)\r\n\r\nIf you are specifically referring to only this alias (the only single-letter option alias we have), then I tend to agree. If that was meant more broadly, I'm afraid this doesn't scale too well, as for example `rm` has no zero-argument version.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 221896064,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-26T14:58:03Z",
		"body" : "> I think the issue of improving the documentation of our built-in aliases is out of scope for this PR and the change made here is definitely an improvement over the current situation, hence the merge. We'll need to figure out a better solution for our aliases in a follow-up PR.\r\n\r\nI'm fine for that to be the case but if so: please re-add the existing aliases into the help text until we decide how to change them.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 221910123,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-26T15:44:03Z",
		"body" : "> I'm fine for that to be the case but if so: please re-add the existing aliases into the help text until we decide how to change them.\r\n\r\nI'm fine with doing so and will do that in a minute, just want to be clear on the why.\r\n\r\nAre you expecting this omission to create a lot of confusion among users? My guess would be that those who already know about `-S` will happily continue using it, but (again guessing) most people are using `search` and will benefit from the less confusing help text. Also, those who already use `-S` will still see meaningful help with `brew help -S` and will likely figure out to look for ‚Äúsearch‚Äú in the man page, as they already know what `-S` stands for.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 221913994,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-26T15:56:39Z",
		"body" : "> I'm fine with doing so and will do that in a minute, [‚Ä¶]\r\n\r\nDone in 1c581a232cb59bea25d5cb3a4d4885854938ccb8.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 222075861,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-27T07:08:38Z",
		"body" : "@UniqMartin Thanks!\r\n\r\n> Are you expecting this omission to create a lot of confusion among users? My guess would be that those who already know about -S will happily continue using it, but (again guessing) most people are using search and will benefit from the less confusing help text. Also, those who already use -S will still see meaningful help with brew help -S and will likely figure out to look for ‚Äúsearch‚Äú in the man page, as they already know what -S stands for.\r\n\r\nIt's more just that we hadn't reached a conclusion of that discussion so I'd rather we didn't make a change without one.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 270
	},
	{
		"id" : 220981010,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-23T13:32:19Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 271
	},
	{
		"id" : 238815685,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:36:30Z",
		"body" : "@UniqMartin Can you address the comments and get this üö¢d? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 272
	},
	{
		"id" : 240624733,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T05:04:04Z",
		"body" : "> Can you address the comments and get this üö¢d? Thanks!\r\n\r\nI will as soon as possible. Sorry for letting this linger for way too long ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 272
	},
	{
		"id" : 244548176,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:01:59Z",
		"body" : "Gentle ping on this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 272
	},
	{
		"id" : 221652394,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-25T17:46:08Z",
		"body" : "Here are some examples:\r\nhttps://github.com/ilovezfs/homebrew-ghc/commit/01e6220dfedb077f043a23d6aade1ff9825f185e\r\nhttps://github.com/ilovezfs/homebrew-ghc/commit/a5722e97324d7a11c40398003037faae60cdd861\r\nhttps://github.com/ilovezfs/homebrew-ghc/commit/7b733c56530fc12b52d8bb18ac8e6687953e6624",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 273
	},
	{
		"id" : 221664795,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-25T18:29:56Z",
		"body" : "I'm currently :-1: on this. If I'm understanding things correctly, this shortens `system \"cabal\", \"get\", \"foo\"` to `cabal_get \"foo\"` but has no other benefits. Adding a level of indirection (that makes formula code harder to read) only to save a few characters seems unjustified to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 273
	},
	{
		"id" : 221665830,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-25T18:33:43Z",
		"body" : "It maintains consistency in the formulae that use it, which go through language/haskell for all other cabal calls. Also: https://github.com/Homebrew/homebrew-core/pull/1307#discussion_r64011302\r\n@MikeMcQuaid @DomT4 ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 273
	},
	{
		"id" : 221793612,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-26T07:04:20Z",
		"body" : "Does `system \"cabal\"` work with the PATH handled correctly? If so, I'd pass on this. If not, I can see an argument rather than having to specify the full path.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 273
	},
	{
		"id" : 221794115,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-26T07:07:44Z",
		"body" : "Yes, it works, just as it would for every other method language/haskell. I'd really prefer not to have every cabal call in these formulae except one going through language/haskell. Not sure what the issue here is since this got two thumbs up less than a week ago.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 273
	},
	{
		"id" : 221799560,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-26T07:39:37Z",
		"body" : "@ilovezfs Sorry, I thought I said two weeks ago (but wasn't clear) that I'd be üëç for this if it's replacing having to manually specify the full path but not if it's just replacing a `system` call.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 273
	},
	{
		"id" : 221800667,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-26T07:45:30Z",
		"body" : "Ah, then I misunderstood.\r\n\r\nWhat I'm also wondering here is whether we should have something like a `cabal_package_inreplace` that takes a package name, (possibly) a version, and a replacement before/after, since this is feeling like repetitive boilerplate:\r\n\r\nhttps://github.com/ilovezfs/homebrew-ghc/blob/01e6220dfedb077f043a23d6aade1ff9825f185e/Formula/postgrest.rb#L25-L44\r\n\r\nhttps://github.com/ilovezfs/homebrew-ghc/blob/a5722e97324d7a11c40398003037faae60cdd861/Formula/pandoc-crossref.rb#L33-L49\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 273
	},
	{
		"id" : 221808069,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-26T08:22:55Z",
		"body" : "I'd say the rule of three applies: if we're using a boilerplatey form in at least three places: üëç to pulling it into a function if it significantly helps readability.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 273
	},
	{
		"id" : 221808790,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-26T08:26:23Z",
		"body" : "I think it's fine as is for now. How readable do you consider https://github.com/ilovezfs/homebrew-ghc/blob/01e6220dfedb077f043a23d6aade1ff9825f185e/Formula/postgrest.rb#L25-L44 ?\r\n\r\nAlso, regarding \"cabal get,\" obviously I could also use a resource block. Is that preferred? \"cabal get\" feels more idiomatic in this context since we already have cabal fetching everything anyway, but I'm totally indifferent either way.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 273
	},
	{
		"id" : 221813254,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-26T08:47:25Z",
		"body" : "> I think it's fine as is for now. How readable do you consider https://github.com/ilovezfs/homebrew-ghc/blob/01e6220dfedb077f043a23d6aade1ff9825f185e/Formula/postgrest.rb#L25-L44 ?\r\n\r\nNot very but the best it can be given the circumstances. I think the rule of three is just to prevent adding too many DSL methods that won't have longevity.\r\n\r\n> Also, regarding \"cabal get,\" obviously I could also use a resource block. Is that preferred? \"cabal get\" feels more idiomatic in this context since we already have cabal fetching everything anyway, but I'm totally indifferent either way.\r\n\r\n`cabal get` feels fine to me for the reasons you state üëç \r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 273
	},
	{
		"id" : 221822797,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-26T09:30:11Z",
		"body" : "I don't have a massively strong opinion here.\r\n\r\nIf someone added `npm_i` to the Node language handling to save us writing `npm install` everywhere I'd probably give the PR a slightly strange look, but the ship on Cabal stuff sailed a while ago in terms of Homebrew using customised short(er) hand.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 273
	},
	{
		"id" : 221823488,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-26T09:33:01Z",
		"body" : "That ship may be able to be un-sailed now that we have GHC 8 + Cabal 1.24 + cabal install 1.24, if this is as good as I hope it is http://blog.ezyang.com/2016/05/announcing-cabal-new-build-nix-style-local-builds/",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 273
	},
	{
		"id" : 221825931,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-26T09:43:32Z",
		"body" : "Closing since I was confused about what was desired. If it were up to me, we'd do all of the cabal calls using system because I'm having to wrap the `install_cabal_package` thing in `cabal_sandbox do` anyway, and it's all super inflexible right now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 273
	},
	{
		"id" : 223923836,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-06-06T10:36:08Z",
		"body" : "@xu-cheng I tried to make `HeadVersion` work so it has nil `@commit` at the moment we initialize it and when `VCSDownloadStrategy#fetch` is executed,  `@commit` gets its non-nil value. However there is a pitfall in this approach for `brew install`. When we installing a formula, we have one instance of formula in `FormulaInstaller` and another in `build.rb` fork. We do `VCSDownloadStrategy#fetch` in `build.rb`, it goes OK, `formula.prefix.mkpath` inside `Build#install` works just fine and creates proper directory, but `Formula` inside `FormulaInstaller` still has nil `@commit` in its version, so when we check for empty install we check if `HEAD` directory exists and is not empty, however we have our install in `HEAD-<commit>` directory.\r\n\r\nI found the following workaround here:\r\nBe able to store `@downloader` inside of `HeadVersion`, so we can make `HeadVersion#commit` return `@downloader.last_commit` unless `@downloader` is `nil`.\r\nHeadVersion is firstly initialized in `DSL`:\r\n```ruby\r\n    def head(val = nil, specs = {}, &block)\r\n      @head ||= HeadSoftwareSpec.new\r\n      if block_given?\r\n        @head.instance_eval(&block)\r\n      elsif val\r\n        @head.url(val, specs)\r\n      else\r\n        @head\r\n      end\r\n    end\r\n```\r\n\r\nWe can try to initialize `downloader` of `HeadVersion` after `url` is set or better do it after `owner` is set for the `resource` of the `HeadSoftwareSpec`. To initialize downloader we need both `url` and `name` or `owner`. As a result I overrode `Resource#owner=` and `Resource#url=` so they initialize `downloader` for `HeadVersion`. Is it OK or we need some another solution?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 274
	},
	{
		"id" : 225411908,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-12T06:01:03Z",
		"body" : "I wonder can we simplify the way we update commit. Instead of bundling downloader into HeadVersion class. Can we just simple manual update, like so?\r\n\r\n* When initialize formula, let's just make HeadVersion \"HEAD\", i.e. no commit.\r\n* After fetching during `brew install`, let's update commit to what we just fetched.\r\n* After `build.rb`'s execution is finished, manually update commit the version in FormulaInstaller.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 274
	},
	{
		"id" : 225716373,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-06-13T21:36:56Z",
		"body" : "> I wonder can we simplify the way we update commit. Instead of bundling downloader into HeadVersion class. Can we just simple manual update, like so?\r\n\r\n\r\nFor install and reinstall it seem to work just fine. However there can be difficulties at some places where we call `HeadSoftwareSpec#version` I don't know if there are many of them, I can try to search for their occurrences and try to update it as we do it in `FormulaInstaller`, but every time someone changes something that calls `version` on `HeadSoftwareSpec`, he should be careful. I'll think about some workaround here and am also open to suggestions.\r\n\r\nFor now at least `Formula#installed_prefix` is broken since `head.version` has `nil` commit.\r\n\r\n```ruby\r\n  def installed_prefix\r\n    if head && (head_prefix = prefix(PkgVersion.new(head.version, revision))).directory?\r\n      head_prefix\r\n    elsif devel && (devel_prefix = prefix(PkgVersion.new(devel.version, revision))).directory?\r\n      devel_prefix\r\n    elsif stable && (stable_prefix = prefix(PkgVersion.new(stable.version, revision))).directory?\r\n      stable_prefix\r\n    else\r\n      prefix\r\n    end\r\n  end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 274
	},
	{
		"id" : 226988779,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-19T09:53:08Z",
		"body" : "Other than some minor style issues and edge bugs, so far so good :+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 274
	},
	{
		"id" : 233974450,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-20T14:54:39Z",
		"body" : "@xu-cheng, I wonder if we can implement `latest_head_version` and `latest_head_prefix` like this, and then reimplement `head_version_outdated?` (probably name should be changed) and `outdated_versions` which checks if latest HEAD version installed is outdated. As a result, there is no need to check every HEAD prefix and we can check only one of them in `outdated_versions`.\r\n\r\n```diff\r\ndiff --git a/Library/Homebrew/formula.rb b/Library/Homebrew/formula.rb\r\nindex 5e8232d..ac5a63f 100644\r\n--- a/Library/Homebrew/formula.rb\r\n+++ b/Library/Homebrew/formula.rb\r\n@@ -300,6 +300,10 @@ class Formula\r\n     PkgVersion.new(version, revision)\r\n   end\r\n \r\n+  def head_pkg_version\r\n+    PkgVersion.new(Version.create(head.version), revision)\r\n+  end\r\n+\r\n   # A named Resource for the currently active {SoftwareSpec}.\r\n   # Additional downloads can be defined as {#resource}s.\r\n   # {Resource#stage} will create a temporary directory and yield to a block.\r\n@@ -413,24 +417,47 @@ class Formula\r\n     Pathname.new(\"#{HOMEBREW_LIBRARY}/LinkedKegs/#{name}\")\r\n   end\r\n \r\n-  def latest_head_prefix\r\n+  def latest_head_version\r\n+    return @latest_head_version if @latest_head_version\r\n+\r\n     head_versions = installed_prefixes.map do |pn|\r\n       pn_pkgversion = PkgVersion.parse(pn.basename.to_s)\r\n       pn_pkgversion if pn_pkgversion.head?\r\n     end.compact\r\n \r\n-    latest_head_version = head_versions.max_by do |pn_pkgversion|\r\n+    @latest_head_version ||= head_versions.max_by do |pn_pkgversion|\r\n       [Tab.for_keg(prefix(pn_pkgversion)).source_modified_time, pn_pkgversion.revision]\r\n     end\r\n+  end\r\n+\r\n+  def latest_head_prefix\r\n     prefix(latest_head_version) if latest_head_version\r\n   end\r\n \r\n+  def head_version_outdated?(options={})\r\n+    return false unless latest_head_prefix\r\n+\r\n+    tab = Tab.for_keg(latest_head_prefix)\r\n+    return true if stable && tab.stable_version && tab.stable_version < stable.version\r\n+    return true if devel && tab.devel_version && tab.devel_version < devel.version\r\n+\r\n+    return false unless head && head.downloader.is_a?(VCSDownloadStrategy)\r\n+\r\n+    if options[:fetch_head]\r\n+      downloader = head.downloader\r\n+      downloader.shutup! unless ARGV.verbose?\r\n+      return false unless downloader.fetch_last_commit\r\n+\r\n+      latest_head_version.version.commit != head_pkg_version.version.commit\r\n+    end\r\n+  end\r\n+\r\n   # The latest prefix for this formula. Checks for {#head}, then {#devel}\r\n   # and then {#stable}'s {#prefix}\r\n   # @private\r\n   def installed_prefix\r\n-    if head && (head_prefix = latest_head_prefix) && head_prefix.directory?\r\n-      head_prefix\r\n+    if head && latest_head_prefix && !head_version_outdated?\r\n+      latest_head_prefix\r\n     elsif devel && (devel_prefix = prefix(PkgVersion.new(devel.version, revision))).directory?\r\n       devel_prefix\r\n     elsif stable && (stable_prefix = prefix(PkgVersion.new(stable.version, revision))).directory?\r\n@@ -988,7 +1015,7 @@ class Formula\r\n   end\r\n \r\n   # @private\r\n-  def outdated_versions\r\n+  def outdated_versions(options={})\r\n     @outdated_versions ||= begin\r\n       all_versions = []\r\n \r\n@@ -997,16 +1024,21 @@ class Formula\r\n       installed_kegs.each do |keg|\r\n         version = keg.version\r\n         all_versions << version\r\n-        return [] if pkg_version <= version\r\n+\r\n+        return [] if pkg_version <= version && !version.head?\r\n       end\r\n \r\n-      all_versions.sort!\r\n+      if latest_head_version\r\n+        head_version_outdated?(options) ? all_versions.sort! : []\r\n+      else\r\n+        all_versions.sort!\r\n+      end\r\n     end\r\n   end\r\n \r\n   # @private\r\n-  def outdated?\r\n-    outdated_versions.any?\r\n+  def outdated?(options={})\r\n+    outdated_versions(options).any?\r\n   rescue Migrator::MigrationNeededError\r\n     true\r\n   end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 274
	},
	{
		"id" : 221691127,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-25T20:06:33Z",
		"body" : "Can you provide the full `brew doctor` output? Thanks",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 276
	},
	{
		"id" : 221692074,
		"user" : {
			"login" : "Dalan-Miller"
		},
		"created_at" : "2016-05-25T20:10:02Z",
		"body" : "`Please note that these warnings are just used to help the Homebrew maintainers\r\nwith debugging if you file an issue. If everything you use Homebrew for is\r\nworking fine: please don't worry and just ignore them. Thanks!\r\n\r\nWarning: A newer Command Line Tools release is available.\r\nUpdate them from Software Update in the App Store.\r\n\r\nWarning: You have external commands with conflicting names.\r\n\r\nFound command `brew-cask` in following places:\r\n    /usr/local/bin/brew-cask\r\n    /usr/local/Library/Taps/caskroom/homebrew-cask/cmd/brew-cask.rb\r\n\r\nWarning: You have unlinked kegs in your Cellar\r\nLeaving kegs unlinked can lead to build-trouble and cause brews that depend on\r\nthose kegs to fail to run properly once built. Run `brew link` on these:\r\n    node\r\n    xz\r\n\r\nWarning: Your Xcode (7.3) is outdated\r\nPlease update to Xcode 7.3.1.\r\nXcode can be updated from the App Store.`",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 276
	},
	{
		"id" : 221692216,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-25T20:10:34Z",
		"body" : "Please also have a look at our [Troubleshooting Guide](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting), follow (all of) the steps therein, and post the requested information here so we can help you better with your problem. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 276
	},
	{
		"id" : 221693818,
		"user" : {
			"login" : "Dalan-Miller"
		},
		"created_at" : "2016-05-25T20:16:23Z",
		"body" : "Ok, I have a Gist if you need it: https://gist.github.com/anonymous/f675385468f52797722fe460e9dc3d21",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 276
	},
	{
		"id" : 221697458,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-25T20:29:52Z",
		"body" : "Have you tried following this advice from the [Check for common issues](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#check-for-common-issues) section of the document I linked you to?\r\n\r\n- If things fail with permissions errors, check the permissions in `/usr/local`. If you‚Äôre unsure what to do, you can `sudo chown -R $(whoami) /usr/local`.\r\n\r\nI believe this should resolve your trouble.\r\n\r\n----\r\n\r\nRegarding this output from `brew doctor`:\r\n\r\n> ```\r\n> Warning: You have external commands with conflicting names.\r\n>\r\n> Found command brew-cask in following places:\r\n> /usr/local/bin/brew-cask\r\n> /usr/local/Library/Taps/caskroom/homebrew-cask/cmd/brew-cask.rb\r\n> ```\r\n\r\nYou can run `brew uninstall brew-cask`. It's no longer necessary to install `brew-cask` as a formula, as nowadays tapping `Caskroom/cask` is sufficient.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 276
	},
	{
		"id" : 221698356,
		"user" : {
			"login" : "Dalan-Miller"
		},
		"created_at" : "2016-05-25T20:33:05Z",
		"body" : "> Have you tried following this advice from the Check for common issues section of the document I linked you to?\r\n\r\nIf things fail with permissions errors, check the permissions in /usr/local. If you‚Äôre unsure what to do, you can sudo chown -R $(whoami) /usr/local.\r\nI believe this should resolve your trouble.\r\n\r\nThis worked, thank you!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 276
	},
	{
		"id" : 221793793,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-26T07:05:30Z",
		"body" : "`chmod 775 /usr/local/bin`",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 277
	},
	{
		"id" : 221793793,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-26T07:05:30Z",
		"body" : "`chmod 775 /usr/local/bin`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 277
	},
	{
		"id" : 222215799,
		"user" : {
			"login" : "IronCraftMan"
		},
		"created_at" : "2016-05-27T18:09:43Z",
		"body" : "Hi, this worked for that directory, but it decided to call out other directories including sbin, lib. etc. It seems as if OS X 10.11 has messed up the permissions of /usr/local for me. I decided to use `brew list` to get a list of installed packages, and just do `sudo rm -rf /usr/local`. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 277
	},
	{
		"id" : 222382794,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-29T21:07:47Z",
		"body" : "@IronCraftMan Glad you got it sorted!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 277
	},
	{
		"id" : 221797576,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-26T07:28:47Z",
		"body" : "Seems fine üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 278
	},
	{
		"id" : 221795299,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-26T07:15:23Z",
		"body" : "Nice work here üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 221798170,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-26T07:32:07Z",
		"body" : "Thank you! Style comments addressed with an amended revision, though I have some questions about the control flow stuff, noted in line comment replies.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 221798934,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-26T07:36:03Z",
		"body" : "Also, maybe \"truncate\" is the wrong word here, because \"truncate\" usually means \"cut off the end\", where this function (usually) cuts things out of the middle. I don't have a good alternative; \"elide\" sounds too snooty and \"snip\" too precious.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 221799430,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-26T07:38:50Z",
		"body" : "Amended to add comments for the method, since I don't think it's sufficiently self-explanatory from the method name.\r\n\r\n```\r\n# Truncates a text string to fit within a byte size constraint,\r\n# preserving character encoding validity. The returned string will\r\n# be strictly less than the specified max_bytes, though the exact\r\n# shortfall may vary.\r\n```\r\n\r\nLet me know if this is useful or overkill, since we don't usually put comments on methods.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 221799597,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-26T07:39:53Z",
		"body" : "And, haha, noticed an error in those comments. Fixed.\r\n\r\n```\r\n\r\n# Truncates a text string to fit within a byte size constraint,\r\n# preserving character encoding validity. The returned string will\r\n# be no longer than the specified max_bytes, though the exact\r\n# shortfall may vary.\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 221811650,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-26T08:40:12Z",
		"body" : "> I think truncation is totally fine. IIRC we already do that somewhere else. Build output is all we're interested in here and if a Êº¢ becomes a ÔøΩ\r\n\r\nYeah, but, if truncation happens in the wrong place, it's not that a Êº¢ becomes a ÔøΩ; it's that the whole document may get rejected as \"invalid UTF-8 encoding\", and it's useless for strict consumers. And the Gist posting process, since it's JSON, is probably a strict consumer. Remember those build failures where Jenkins would just say something like \"Java error: failed to read: invalid byte sequence in UTF-8\" and the whole build output is unavailable? That's the sort of truncation error I'm talking about here. A bad truncation could cause `gist-logs` itself to fail, and you'll have no output to look at.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 221812089,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-26T08:42:12Z",
		"body" : "The point of this implementation is not to make sure that the results look exactly right for everyone looking at the gists, but to make sure that `brew gist-logs` actually runs for all users. I think the failure mode on bad truncation is likely to be an ugly error message for the user running `brew gist-logs` and a hard-to-diagnose Issue posting; not just a mis-displayed character for maintainers.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 221944651,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-26T17:50:53Z",
		"body" : "> The point of this implementation is not to make sure that the results look exactly right for everyone looking at the gists, but to make sure that `brew gist-logs` actually runs for all users.\r\n\r\nTo add to [my comment from above](https://github.com/Homebrew/brew/pull/279#discussion_r64787097), I think we should be fine with relying on Ruby to make sure the final output is still valid UTF-8 and if Ruby is not capable of doing this, just replace everything that is not a valid ASCII character (> 127) with the UTF-8 encoded Unicode replacement character (ÔøΩ).\r\n\r\nIf we're really concerned about preserving information that could be contained in those non-ASCII bytes, we could as well replace them with `\\x<byte>` where `<byte>` would be a two-digit hex number for the replaced byte. (I think it's optimistic, but also extremely realistic to assume few characters will leave the ASCII range, so replacing them won't have a noticeable impact on the overall upload size.)\r\n\r\nOn a side note, valid Unicode code points are limited to an upper limit of 1,114,112, thus the maximum number of bytes needed for an UTF-8 encoded code point is only 4 bytes. While surrogates, that really only makes sense with UTF-16, sometimes end up being encoded as UTF-8, they are not valid UTF-8.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 222061011,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-27T05:04:59Z",
		"body" : "Amended to address the feedback.\r\n\r\nI removed the loop and am round-tripping it through `BINARY` like Martin suggested, relying on replacement characters in the re-encoding step to handle multibyte UTF-8 characters that get snipped apart at the truncation point. I was making this way more complicated than it needed to be. Tested interactively and it works.\r\n\r\nThis is close enough to the `test-bot` implementation that I was able to refactor it to use the new truncation function as well.\r\n\r\nAfter this change:\r\n\r\n```\r\n$ brew gist-logs openblas\r\nhttps://gist.github.com/a8651961a371dca35be5e4e02f2857a1\r\n```\r\n\r\nAnd the Gist page loads nice and quick, without getting a unicorn error.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 222061228,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-27T05:07:19Z",
		"body" : "Oh, yeah: I checked that the new implementation is Ruby 1.8.7 compatible, too. That's why you see an apparently-spurious \"`out`\" statement on the last line of the function, for 1.8.7 compatibility. (Otherwise it returns `nil`, I think as a result of the unsatisfied `if` preceding it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 222070810,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-27T06:32:46Z",
		"body" : "Amended to fix the `encode` vs `encode!` issues and make it more readable.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 222074862,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-27T07:02:12Z",
		"body" : "This looks good to me now üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 222253165,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-27T21:06:25Z",
		"body" : "I can offer a few more nitpicks if that's desired, but it's also good to go as-is. Nice work! :+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 222259352,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-27T21:40:30Z",
		"body" : "Pick away, Martin. I'm going to be on the computer for the next few hours so I'll be able to address them, and this isn't an urgent fix.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 222266848,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-27T22:27:20Z",
		"body" : "> Pick away, Martin.\r\n\r\nI just did (two new code comments and one tucked under an existing discussion). I pointed out a few corner cases and maybe this causes you to think what should happen then. If you're feeling fancy, the best way to check them and to codify your expectations would be to add a few tests to [`test_utils.rb`](https://github.com/Homebrew/brew/blob/9cf2710dc95f1c81e8c5111e22681836225e32e2/Library/Homebrew/test/test_utils.rb):\r\n\r\n- Correct behavior in extreme cases like `front_weight = 0.0` and `front_weight = 1.0`.\r\n- Correct behavior when dealing with partially invalid input. (Does the substitution actually work?)\r\n- Maybe other interesting cases that come to mind.\r\n\r\nIt's up to you whether you want to do that, but I don't expect adding the tests to be particularly hard and the tests are super quick when limited to a certain test file (use `brew tests --only=utils`).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 222274810,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-27T23:34:59Z",
		"body" : "Comments addressed. That was edge case breakage. And significant ones: the front_weight = 0.0 case is actually used.\r\n\r\nYeah: Given my oversight here on the 0.0 and 1.0 edge cases and that there were a couple other bugs, I will add unit tests before merging this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 228497269,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-25T00:51:20Z",
		"body" : "Added unit test and rebased on master. Refactored for readability based on Martin's suggestion.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 228567075,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-25T19:43:43Z",
		"body" : "üëç when you're happy and the tiny nit is sorted.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 229040053,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-28T12:53:58Z",
		"body" : "A few minor style comments and one semantic issue in the test, but otherwise :+1:.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 229173420,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-28T20:31:02Z",
		"body" : "Fixed the `assert_*` argument order, regex anchoring, and operator spacing style nits.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 229370532,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-29T14:19:57Z",
		"body" : ":+1: if you're happy with it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 229380929,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-29T14:51:32Z",
		"body" : "Well, now `gist-logs` is breaking for me, with or without this PR, so I can't give this a final test before merging. https://github.com/Homebrew/brew/issues/417\r\n\r\nThink I might call it a night and pick this up tomorrow.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 229388067,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-29T15:13:14Z",
		"body" : "Dang, that's a pity. I have to admit that I haven't actually tested this locally, because I didn't want to upload useless Gists. Is the breakage happening even if you don't apply the changes from this PR?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 229393953,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-29T15:31:25Z",
		"body" : "Yup, it's independent of this PR.\r\n\r\nDon't worry, I think I already have a diagnosis.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 229403466,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-29T16:01:33Z",
		"body" : "Okay, I'm pretty convinced that [the other `gist-logs` breakage](https://github.com/Homebrew/brew/issues/417) is an unrelated I/O race condition, and this PR is good to go. I've manually tested it locally again, on my machine that wasn't affected by the other breakage. (I don't mind creating useless gists for testing purposes.)\r\n\r\nBut I'm about to go to bed, so I'm going to wait until morning to merge this so I can be around if any regressions happen.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 279
	},
	{
		"id" : 221859106,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-26T12:38:58Z",
		"body" : "üëç if it's been tested with a few formulae.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 280
	},
	{
		"id" : 222391019,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-30T00:12:43Z",
		"body" : "I'm late to this party but the no insecure redirect variable wasn't applied to the Apache curl method by deliberate design choice at the time, as documented [here](https://github.com/Homebrew/brew/blob/8284fb3fef9860a67f3303f17cb6fd99a2ebc168/Library/Homebrew/manpages/brew.1.md.erb#L187) in the manpage.\r\n\r\nI'm fine with changing it but the manpage should've been updated as well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 280
	},
	{
		"id" : 222521397,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-30T16:07:15Z",
		"body" : "https://github.com/Homebrew/brew/commit/a11262788847e2b9c84f6a78b3266d2b2be4a2ad",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 280
	},
	{
		"id" : 231595370,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-10T15:41:55Z",
		"body" : "Preserving the time stamp of the cached downloads has an unfortunate consequence. The files that end up in `HOMEBREW_CACHE` and have just been downloaded are then often immediately purged by `brew cleanup --prune=14` as the publication date is often way beyond this threshold. This also affects our CI, causing it to constantly re-download huge files (e.g. the Qt 5.7.0 tarball), particularly for PRs where the process is lengthy or where the PR is submitted well after the upstream publication date.\r\n\r\nI don't currently have an idea how to address this problem while preserving the changes made here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 280
	},
	{
		"id" : 232276888,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-13T07:24:31Z",
		"body" : "@UniqMartin I guess one of solutions is to change Cache directory structure. Instead of putting cache files like `HOMEBREW_CACHE/formula-foo-1.0`, we could make them like `HOMEBREW_CACHE/formula-foo/formula-foo-1.0`. Therefore, we can use parent directory's mtime as indicator of fetching time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 280
	},
	{
		"id" : 232297287,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T08:56:14Z",
		"body" : "> @UniqMartin I guess one of solutions is to change Cache directory structure. Instead of putting cache files like HOMEBREW_CACHE/formula-foo-1.0, we could make them like HOMEBREW_CACHE/formula-foo/formula-foo-1.0. Therefore, we can use parent directory's mtime as indicator of fetching time.\r\n\r\nThis is on my todo list to think about but it'd be great for anyone to pick up: make the cache follow the same format as the cellar e.g. `HOMEBREW_CACHE/formula-foo/1.0/$FILES`. This will massively simplify e.g. `cleanup`'s ability to figure out what files belong to what (which brings us closer to a much faster `cleanup` no-op and the possibility of running it automatically).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 280
	},
	{
		"id" : 232735207,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-14T17:31:35Z",
		"body" : "I have to admit that I really like the simplicity of the current flat hierarchy in the cache, but I agree that having a hierarchy like `HOMEBREW_CACHE/formula-foo/1.0/$FILES` would make some things a lot easier. Currently some files in the cache are skipped or erroneously cleaned up because the cleanup code cannot figure out what formula a file belongs to.\r\n\r\nWhere would things live that aren't specific to a certain formula version, like resources (and patches) that are used across multiple versions of a formula? Currently they have the form `formula-foo--<resource>-<version>.<extension>`. I guess a similar question could be posed for VCS clones/checkouts like `x264--git`.\r\n\r\nI didn't do anything related to this, but I have [some WIP code](https://github.com/UniqMartin/brew/tree/spring-cleaning) that can properly clean up most resources whereas the current cleanup code only cares about the primary downloads of a formula (doesn't matter to most users that only install from bottles). It probably even slows down the current cleanup because it has to perform a few more checks ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 280
	},
	{
		"id" : 232751177,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-14T18:28:26Z",
		"body" : "> I have to admit that I really like the simplicity of the current flat hierarchy in the cache, but I agree that having a hierarchy like HOMEBREW_CACHE/formula-foo/1.0/$FILES would make some things a lot easier. Currently some files in the cache are skipped or erroneously cleaned up because the cleanup code cannot figure out what formula a file belongs to.\r\n\r\nIndeed, that's my thought too üëç \r\n\r\n> Where would things live that aren't specific to a certain formula version, like resources (and patches) that are used across multiple versions of a formula? Currently they have the form formula-foo--<resource>-<version>.<extension>. I guess a similar question could be posed for VCS clones/checkouts like x264--git.\r\n\r\nMaybe in `HOMEBREW_CACHE/formula-foo/$FILES`?\r\n\r\n> I didn't do anything related to this, but I have some WIP code that can properly clean up most resources whereas the current cleanup code only cares about the primary downloads of a formula (doesn't matter to most users that only install from bottles). It probably even slows down the current cleanup because it has to perform a few more checks ‚Ä¶\r\n\r\nI think improving correctness would be great and we can think about alternate cache layouts for speed later.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 280
	},
	{
		"id" : 232757866,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-14T18:51:52Z",
		"body" : "> Maybe in `HOMEBREW_CACHE/formula-foo/$FILES`?\r\n\r\nYep, that should work (and works for me). Though if we want to fully embrace the two-level layout, we could think about `HOMEBREW_CACHE/formula-foo/patches/$FILES` (for the resources created by `patch do` blocks) and `HOMEBREW_CACHE/formula-foo/resources/$FILES` (for all other resources).\r\n\r\n> I think improving correctness would be great and we can think about alternate cache layouts for speed later.\r\n\r\nThat's good to hear! I'll see if I can get this branch cleaned up a bit and submit it as a PR. The main issue is really that some files in the cache cannot be attributed to a formula, partially due to our somewhat lax rules for what constitutes a valid formula name and a valid version string, e.g. `app-engine-go-32-1.2.3.tar.gz` could be both interpreted as\r\n\r\n- formula `app-engine-go` and version `32-1.2.3` or\r\n- formula `app-engine-go-32` and version `1.2.3`.\r\n\r\nThat's not really fixable without inspecting all formulae (in the hopes that the formula hasn't been removed/renamed yet) or imposing stricter rules on formula names/versions that avoid this ambiguity (or making name and version separate path components in a nested cache layout).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 280
	},
	{
		"id" : 232758970,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-14T18:55:53Z",
		"body" : "> Yep, that should work (and works for me). Though if we want to fully embrace the two-level layout, we could think about HOMEBREW_CACHE/formula-foo/patches/$FILES (for the resources created by patch do blocks) and HOMEBREW_CACHE/formula-foo/resources/$FILES (for all other resources).\r\n\r\nAgreed üëç Perhaps similarly with even `bottles` and `sources`.\r\n\r\n> That's good to hear! I'll see if I can get this branch cleaned up a bit and submit it as a PR.\r\n\r\nüëç \r\n\r\n\r\n\r\n> (or making name and version separate path components in a nested cache layout).\r\n\r\nüëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 280
	},
	{
		"id" : 232769750,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-14T19:38:09Z",
		"body" : "> Agreed üëç Perhaps similarly with even `bottles` and `sources`.\r\n\r\nTrue. I always forget these (particularly the bottles), because in my mind Homebrew is still a pure build-from-source package manager:\r\n\r\n```console\r\n$ brew ls | wc -l\r\n     179\r\n$ ls \"$(brew --cache)\"/*bottle*\r\n/opt/homebrew/.brew-cache/shellcheck-0.4.4.el_capitan.bottle.tar.gz\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 280
	},
	{
		"id" : 222076056,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-27T07:09:46Z",
		"body" : "üëç nice work.\r\n\r\n> The check that t4 is not an external command would always succeed, but not because the file wasn't executable, but because it wasn't even found due to the missing brew- prefix.\r\n\r\nThis is why I'm dubious about \"test failure\" unit tests unless they are super specific.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 281
	},
	{
		"id" : 222076141,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-27T07:10:19Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 282
	},
	{
		"id" : 222151177,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-05-27T13:49:46Z",
		"body" : "Looks good to me, much DRYer than my solution :+1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 282
	},
	{
		"id" : 222061345,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-27T05:08:49Z",
		"body" : "If possible, I hope we could rename this method. `paths` as a variable name has been used extensively throughout out the codebase. Therefore, it's confusing to have it as a global method.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 283
	},
	{
		"id" : 222065371,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-27T05:46:32Z",
		"body" : "> If possible, I hope we could rename this method. `paths` as a variable name has been used extensively throughout out the codebase. Therefore, it's confusing to have it as a global method.\r\n\r\nI agree and had to filter though a lot of uses as a variable to find the few callers of this method. I'm happy to extend this PR to include a rename of the method, if there's no objection to the PRs main change. (And I'd be glad to receive naming suggestions for that; the only passable names I can currently come up with are `binary_paths` or `search_paths`, but they are not really satisfying.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 283
	},
	{
		"id" : 222065728,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-27T05:49:44Z",
		"body" : "I wonder whether it makes more sense to make it `ENV.paths`. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 283
	},
	{
		"id" : 222076408,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-27T07:11:54Z",
		"body" : "> To my knowledge, the issue addressed here doesn't currently affect any Homebrew code. However, it revealed itself while working on some yet-to-be-published improvements to Homebrew.\r\n\r\nI'd like to see these improvements before including this. As mentioned before, I don't really believe in speculative bugfixing and if the \"yet-to-be-published improvements\" don't get merged then this could break e.g. an external command or formula with no actual benefit to us.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 283
	},
	{
		"id" : 222077072,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-27T07:15:54Z",
		"body" : "FWIW, I don't believe uncache something will break anything. And I think avoid caching on a dynamic variable is a good call.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 283
	},
	{
		"id" : 222078173,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-27T07:22:48Z",
		"body" : "> FWIW, I don't believe uncache something will break anything. And I think avoid caching on a dynamic variable is a good call.\r\n\r\n@xu-cheng As you state yourself, you \"don't believe\" and @UniqMartin has this \"to [his] knowledge\". That makes this change alone not worthwhile to me but it may become worthwhile in the context of a larger change that requires it.\r\n\r\nWe're dealing with a legacy codebase here. Unless it's required for new functionality/features we need to be careful about changing the way code behaves (as opposed to just style).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 283
	},
	{
		"id" : 222191897,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-27T16:27:44Z",
		"body" : "> I'd like to see these improvements before including this.\r\n\r\nI'll submit them in due time, but they are not ready for public consumption yet. The bug fixed here was merely discovered while working on them, but has merit on its own and I'd rather not conflate a bug fix with a feature/refactoring, as this makes the latter harder to review.\r\n\r\n> As mentioned before, I don't really believe in speculative bugfixing and if the \"yet-to-be-published improvements\" don't get merged then this could break e.g. an external command or formula with no actual benefit to us.\r\n\r\nI'm well aware of your views, but I disagree. This is not speculative, but an actual bug that doesn't seem to affect users out of sheer luck (and frankly because of the brokenness of the code). I went to great lengths to both describe and demonstrate the problem. If you don't agree that the current behavior is flat out wrong, then I don't know what to say.\r\n\r\nThis is an internal and undocumented API. If an external command or formula relies on it and relies on the current broken behavior, then it is most likely broken anyway. The benefit to us is that we'll have one less function in our code base that behaves unpredictably. \r\n\r\n> We're dealing with a legacy codebase here. Unless it's required for new functionality/features we need to be careful about changing the way code behaves (as opposed to just style).\r\n\r\nI have carefully reviewed all uses of `paths` in the Homebrew/brew code base and tested this fix without observing any regression. Yes, this is a behavioral change, but if anything relied on this particular behavior it's broken for sure. (If you disagree, please provide an example where the current behavior does make sense and is desirable!)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 283
	},
	{
		"id" : 222226799,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-27T18:56:28Z",
		"body" : "> I'll submit them in due time, but they are not ready for public consumption yet.\r\n\r\nWould you care to tell us what they are?\r\n\r\n> The bug fixed here was merely discovered while working on them, but has merit on its own and I'd rather not conflate a bug fix with a feature/refactoring, as this makes the latter harder to review.\r\n\r\nI don't think a single-line change of a few characters makes it harder to review.\r\n\r\n> I'm well aware of your views, but I disagree. This is not speculative, but an actual bug that doesn't seem to affect users out of sheer luck (and frankly because of the brokenness of the code). I went to great lengths to both describe and demonstrate the problem. If you don't agree that the current behavior is flat out wrong, then I don't know what to say.\r\n\r\nWhen a bug does not affect users, again as I've said before, I think there's a lot of other things that do affect users that I honestly wish people would spend time working on but ultimately that's up to you.\r\n\r\n> An alternative is sketched in UniqMartin/brew@1e82bbf (paths-fix-cache branch). By moving paths to a module we get consistent behavior, but the cache is never invalidated, which breaks the test suite as it currently relies on the broken caching behavior. (Addendum: Getting this right will require some form of cache invalidation, either manually or by checking whether ENV[\"PATH\"] has changed.)\r\n\r\nI'd rather see a version that retains a cache and has manual invalidation. It may be worth putting in a new file rather than an inline module, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 283
	},
	{
		"id" : 222251447,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-27T20:57:04Z",
		"body" : "> Would you care to tell us what they are?\r\n\r\nIf you prefer to be spoiled, sure. :wink: It's a refactoring of the command lookup/dispatch code. It centralizes the logic and eliminates several pieces of  duplicated code between `brew.sh`, `brew.rb`, `cmd/command.rb`, `cmd/commands.rb`, `cmd/help.rb`, and `cmd/man.rb` (all of which have to look up or list commands to some extent or perform other command-related tasks). This work was additionally motivated by:\r\n\r\n- https://github.com/Homebrew/brew/pull/10#discussion_r59028717\r\n- https://github.com/Homebrew/brew/pull/10#discussion_r59029578\r\n- https://github.com/Homebrew/legacy-homebrew/pull/49184#discussion_r52888206\r\n- https://github.com/Homebrew/legacy-homebrew/pull/44999#issuecomment-148464043\r\n\r\n> I don't think a single-line change of a few characters makes it harder to review.\r\n\r\nI think it does, because it would be a refactoring vs. a loosely related bug fix. And if this PR has taught me anything, then there's no single-line change, even if carefully executed, explained, and demonstrated that doesn't have the potential to become controversial and distract from the main objective.\r\n\r\n> When a bug does not affect users, again as I've said before, I think there's a lot of other things that do affect users that I honestly wish people would spend time working on but ultimately that's up to you.\r\n\r\nIndeed, up to me. Please correct me if I'm wrong, but despite not being among the more high-throughput maintainers I do my share of formula PR and bug wrangling and then also allow myself to work on things I'm passionate about, though they might not be immediately prompted by the needs of our users.\r\n\r\n> I'd rather see a version that retains a cache and has manual invalidation. It may be worth putting in a new file rather than an inline module, though.\r\n\r\nThat's definitely not my favorite solution because of the added complexity that doesn't seem to be warranted and feels like an act of premature optimization, particularly given that the function is currently only used by two of `brew`'s sub-commands, both of which are not performance critical. That said, I can live with a caching alternative and the code I linked to was really just a rough sketch of this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 283
	},
	{
		"id" : 222293871,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-28T06:54:33Z",
		"body" : "> If you prefer to be spoiled, sure. üòâ It's a refactoring of the command lookup/dispatch code. It centralizes the logic and eliminates several pieces of duplicated code between brew.sh, brew.rb, cmd/command.rb, cmd/commands.rb, cmd/help.rb, and cmd/man.rb (all of which have to look up or list commands to some extent or perform other command-related tasks).\r\n\r\nOk, thanks, that sounds useful.\r\n\r\n> Please correct me if I'm wrong, but despite not being among the more high-throughput maintainers I do my share of formula PR and bug wrangling and then also allow myself to work on things I'm passionate about, though they might not be immediately prompted by the needs of our users.\r\n\r\nYes, that's true and fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 283
	},
	{
		"id" : 222183619,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-27T15:53:30Z",
		"body" : "> I tried `brew update` but no luck. Any idea?\r\n\r\nWhat do you mean by that? What's the output of `brew update` and of `brew config`? If your Homebrew is trying to download `libpng` 1.6.18, that means it hasn't been updated in more than six months.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 284
	},
	{
		"id" : 223212066,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T07:04:09Z",
		"body" : "My guess is this is a failed migration to brew+homebrew/core.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 284
	},
	{
		"id" : 223214656,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-02T07:18:58Z",
		"body" : "@jeremyrajan Can you paste the output from running `brew update` again? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 284
	},
	{
		"id" : 223244857,
		"user" : {
			"login" : "jeremyrajan"
		},
		"created_at" : "2016-06-02T09:44:25Z",
		"body" : "Hi guys,\r\n\r\nApologies for the late reply. It was failing when i tried 'brew update'. In the end what I did was remove brew completely and then install again. That fixed the issue :)\r\n\r\nNot sure, why it was happening though. \r\n\r\nCheers,\r\nJeremy",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 284
	},
	{
		"id" : 223245882,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-02T09:49:09Z",
		"body" : "Glad it's fixed, thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 284
	},
	{
		"id" : 222292162,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-28T06:00:10Z",
		"body" : "1. May I suggest to make the log structure like this: `HOMEBREW_LOGS/<formula>/{build,postinstall,test}`? In this way, it is easier to view the log from the same formula. And make `brew build-logs` happy, which I used a lot and is available from `homebrew/dev-tools`.\r\n2. You need to handle post_install.\r\n2. Instead of adding more methods to `formula`, can we simply set the log path directly in `build.rb/postinstall.rb/test.rb`. I hope we can achieve the same goal without adding too much complexity ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 285
	},
	{
		"id" : 222298977,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-28T09:18:49Z",
		"body" : "Good point; I had overlooked `post_install`. Thanks. I've amended this PR with an attempt to address this.\r\n\r\n1. Yeah, that probably makes more sense. Keeps related logs closer together, and less chance of the change breaking things that use `Formula.logs`.\r\n\r\nHow about `HOMEBREW_LOGS/Formula/<formula>/{install,post_install,test,...}`? This still keeps all the per-formula logs together, and plain `Formula.logs()` meaningful, but the extra `Formula` level of indirection leaves space for logging other things if needed. It wouldn't be used right away, but since this directory structure reorganization is a potentially breaking change, I'd like to create the ability to add other logging stuff later without requiring an additional breaking change.\r\n\r\nThis naming scheme uses `install`/`post_install`/`test` so the stage names exactly match the method names of the stages in formulae. Though maybe it should be `postinstall` instead, to match the subcommand names instead of the DSL methods.\r\n\r\nI've changed this PR to do this. Under it, `brew build-logs` keeps working without modification. For example, here's `brew build-logs anjuta` after a `brew install -s anjuta`.\r\n\r\n<img width=\"802\" alt=\"brew build-logs anjuta under separate build and test log dirs\" src=\"https://cloud.githubusercontent.com/assets/2618447/15626192/323a28d2-248c-11e6-832b-6b43b67a812a.png\">\r\n\r\nI think this not only works, but is an improvement, because now the post_install step is broken out in to a separate group. Here's the current `brew build-logs anjuta` for comparison; note the duplication in steps 01 and 02.\r\n\r\n<img width=\"837\" alt=\"brew build-logs current for anjuta\" src=\"https://cloud.githubusercontent.com/assets/2618447/15626470/67055b70-2493-11e6-9eb8-ae23fb390c92.png\">\r\n\r\n(The new version happens to be ordered correctly in `build-logs`, too, but that's just an accident of alphabetical ordering. I don't think we can enforce ordering here without introducing another place for potentially breaking changes upon future reorganizations where an additional step is added. Maybe that's worth it, but my first thought is no.)\r\n\r\n2. Handled post_install.\r\n\r\n3. This other way seems more complex to me, because then control of the formula-related log directory structure is distributed throughout the codebase. It'd effectively be using a public mutable property to control the internal behavior of `Formula` code, since it's `Formula.system` that's writing the logs. So someone not familiar with the code and wanting to learn the log structure would have to read the entire code base to determine all the places where the log directory might be set. The way this PR does it now, all the log dir structure code is in one file, `formula.rb`, so you can read that and be confident you get the whole thing. (To the extent that you can do that in a monkey-patchable language like Ruby.)\r\n\r\nThe `Formula` class is getting quite large, but in my view, adding these few methods just linearly adds to that complexity, whereas opening it up for setting log paths and distributing that logic throughout the codebase adds another degree of freedom, and no validity constraints on it, which is a greater increase in overall codebase complexity IMHO.\r\n\r\nIf the size of `Formula` is a concern, maybe we could factor out the logging-related code to a separate `Logs` class. I feel like the excessive size of `Formula` here is a consequence of its existing design, and `Formula` (or a dedicated auxiliary class) is still the right place for this logic.\r\n\r\n####  Testing\r\n\r\nI tested this with `brew install -s anjuta`, since it has a `post_install` step with `system` calls in it, and so do some of its dependencies.\r\n\r\n####  Outstanding TODOs\r\n\r\n* `gist-logs` does not pick up the post_install logs as part of the build logs, but I think it probably should.\r\n* The `sandbox.build.log` should probably be relocated to `install/sandbox.build.log`, and there should probably be support for a `sandbox.postinstall.log`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 285
	},
	{
		"id" : 222320502,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-05-28T17:41:21Z",
		"body" : "I think it would be better to leave the build logs \"loose\" in `$HOMEBREW_LOG/formula_name`, and put the test logs in `$HOMEBREW_LOG/formula_name/test`.  (Assuming this still fixes the problem this PR was created to solve.)\r\n\r\nThe fewer levels of navigation necessary, the better.\r\n\r\nAlso, it wouldn't break anybody's scripts that might depend on build logs being where they currently are.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 285
	},
	{
		"id" : 222321841,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-05-28T18:10:09Z",
		"body" : "Hmm. I personally like my current arrangement better, but I think you're probably right here.\r\n\r\n> I think it would be better to leave the build logs \"loose\" in `$HOMEBREW_LOG/formula_name`, and put the test logs in `$HOMEBREW_LOG/formula_name/test`.  (Assuming this still fixes the problem this PR was created to solve.)\r\n\r\nYes, that would solve the problem, I think; it provides the needed separation. (Along with a `HOMEBREW_LOGS/<formula_name>/postinstall`.) And it does seem less prone to break things. Especially because the state after a failed build, which is by far the most common time to use logs (I think), would be the same as the current log handling logic, and this would only change how logs are arranged after a successful build/test.\r\n\r\nI think it also has the advantage of ensuring that the `test` and `postinstall` logs for a formula correspond to the version installed by `brew install` whose logs are there. In my current implementation, if you do `brew install -s foo`, `brew test foo`, and then later `brew upgrade foo`, you could end up with a `test` log from an old version of `foo` and the `install` log from the newer one. Or if installation failed during the main installation, you could have a leftover `postinstall` step from a previous installation. Those seem undesirable.\r\n\r\n>  The fewer levels of navigation necessary, the better.\r\n\r\nHmm. I'd rather get rid of some of the need for manual navigation by introducing a `brew info --log-path` option or similar, so users could write up a little shell alias and jump right to the appropriate logs, instead of having to manually do the `cd ~/Library/Logs/Homebrew` part or know the exact log dir structure. And non-Ruby external scripts could be switched to use it, so they no longer have to embed knowledge of the log directory structure.\r\n\r\nNavigating within these per-formula subdirectories would be convenient, since `postinstall` and `test` would naturally sort after all the numbered files from the build.\r\n\r\n> Also, it wouldn't break anybody's scripts that might depend on build logs being where they currently are.\r\n\r\nIt could still break some things: anything that depends on the current case of every child of the formula log directory being a regular file and a log file could choke once we introduce subdirectories. (E.g. `brew gist-logs`.) But those are probably a minority of scripts, and could be fixed with small tweaks. And anything run after a failed build would have no chance of breakage (unless the failure was specifically in the `postinstall` stage) because the dir layout is unchanged at that point.\r\n\r\nMy gut really likes the tidiness of `HOMEBREW_LOGS/Formula/<name>/{install,postinstall,test}`, but I have to admit that your version is probably better for users (both end users and contributors), and we could always add in the `Formula` indirection later if & when the need actually arises.\r\n\r\nAny other folks see advantages for one way or the other? I haven't tried out the actual code changes yet, but chdiza's way does seem a lot more conservative, and would probably be a non-breaking change for most uses outside the core `brew` code.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 285
	},
	{
		"id" : 222332550,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-28T22:26:25Z",
		"body" : "I haven't had a chance to review the code changes yet, but may I suggest a somewhat simpler and less invasive approach? My suggestion would be to leave the log files in the directory where they are currently placed and just change the code such that the files get an additional prefix that signifies the corresponding stage:\r\n\r\n- `install.01.<command>` etc. for the formula `install` stage. Could be also `build.01.<command>` or even stay as `01.<command>` as these are the files most people care about and logs from the other stages are less likely to even be created. (Keeping the old name has the benefit that nobody will be surprised by a rename/move while still keeping things tidy.)\r\n- `postinstall.01.<command>` etc. for the `postinstall` stage.\r\n- `test.01.<command>` etc. for the `test` stage.\r\n\r\nHow does that sound?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 285
	},
	{
		"id" : 222332753,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-28T22:33:27Z",
		"body" : "Forgot to mention this in the previous comment: :+1: for tackling this issue. It has frequently annoyed me that these logs can overlap, as it's not too uncommon for me to run all three steps locally, but apparently not enough to pursue a change. (Sorting the directory listing by time is my current workaround.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 285
	},
	{
		"id" : 238815609,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:36:05Z",
		"body" : "@apjanke Could you get this fixed up and merged in? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 285
	},
	{
		"id" : 239702946,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-14T22:55:56Z",
		"body" : "Okay, I've cleaned this up, addressed feedback, and rebased on master.\r\n\r\nI switched to using a flat directory structure with prefixes on the log file names themselves, like Martin suggested. Did this because it:\r\n\r\n* Results in simpler code changes.\r\n* Avoids introducing extra Formula methods.\r\n* Keeps files in same dir arrangement, like chdiza suggested.\r\n* In the basic build case, keeps log file names exactly as before, reducing user-visible changes.\r\n\r\nThe \"sandbox.*.log\" files are renamed to \"*.sandbox.log\" so they now sort with the phase they are describing.\r\n\r\nHere's what the log file names look like now:\r\n\r\n```\r\n[~/Library/Logs/Homebrew/anjuta]\r\n$ ls\r\n01.configure     02.make.cc         post_install.01.glib-compile-schemas    test.01.anjuta\r\n01.configure.cc  build.sandbox.log  post_install.02.gtk3-update-icon-cache  test.sandbox.log\r\n02.make          config.log         post_install.03.update-mime-database\r\n```\r\n\r\n`brew gist-logs` picks up all files for the formula. Here's an example gist-logs made using these changes: https://gist.github.com/a5ab0b16f1aab062d0abf041fb42e02a\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 285
	},
	{
		"id" : 240046807,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T09:07:09Z",
		"body" : "A few more nits.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 285
	},
	{
		"id" : 240520321,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-17T19:27:50Z",
		"body" : "Nits picked, rebased on master. Anything else before merging?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 285
	},
	{
		"id" : 240530182,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T20:03:31Z",
		"body" : "üëç :shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 285
	},
	{
		"id" : 240854032,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T20:56:33Z",
		"body" : "I pointed out a few more nits and a few a-bit-more-than-nits. üôà\r\n\r\n> I switched to using a flat directory structure with prefixes on the log file names themselves, like Martin suggested. Did this because it:\r\n\r\nAwesome work! Thanks a lot! :bow:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 285
	},
	{
		"id" : 240929443,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-19T05:10:58Z",
		"body" : "Further nits addressed.\r\n\r\n> Awesome work! Thanks a lot!\r\n\r\nYou're welcome!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 285
	},
	{
		"id" : 240950697,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-19T07:43:33Z",
		"body" : ":+1: Great work! Finally log files that don't overwrite each other! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 285
	},
	{
		"id" : 241065883,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-19T16:27:49Z",
		"body" : "Merged. Thanks for the help an patience, everyone!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 285
	},
	{
		"id" : 222321385,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-28T18:01:30Z",
		"body" : "Shouldn't you do the ska thing for `brew pull`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 287
	},
	{
		"id" : 222321680,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-28T18:07:01Z",
		"body" : "@xu-cheng Yep, I was waiting on that to see how many PRs there were left that we wanted to pull and, as I've just closed them all out, I'm going to remove this from `pull` now too üòÄ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 287
	},
	{
		"id" : 223222731,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T08:02:29Z",
		"body" : "I've seen the no-op case cause it to hang, but I'm not sure of the exact cause yet, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 288
	},
	{
		"id" : 223223718,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-02T08:07:28Z",
		"body" : "@ilovezfs Which no-op case; when there's no updates to perform? `brew update --debug` will spam you relentlessly but may help identify it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 288
	},
	{
		"id" : 223223994,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T08:08:54Z",
		"body" : "Yes, when there's no update to perform because the heads match. Yeah, debug seemed to report the appropriate API error code and then just sit there. I'll pay closer attention if/when it happens again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 288
	},
	{
		"id" : 223224374,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T08:10:57Z",
		"body" : "Also, I think auto-stashing and rebase-as-default, combined with this PR, are going to add up to something super annoying.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 288
	},
	{
		"id" : 223226452,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-02T08:21:14Z",
		"body" : "@ilovezfs after https://github.com/Homebrew/brew/pull/312 it should be a lot less annoying for people with `HOMEBREW_DEVELOPER` set. Arguably we should move a bunch more stuff like `brew pull` and friends to be `dev-cmd` and encourage anyone submitting a PR to set it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 288
	},
	{
		"id" : 223226526,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-02T08:21:33Z",
		"body" : "Hell, even `brew audit`, `brew create` and `brew edit` arguably.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 288
	},
	{
		"id" : 223227155,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T08:24:30Z",
		"body" : "The problem with that is that it causes our experience to diverge significantly from the users', which then interferes with dog-fooding, but oh well, I guess.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 288
	},
	{
		"id" : 238891435,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T14:50:58Z",
		"body" : "For anyone following along at home: the final PR to enable this is in https://github.com/Homebrew/brew/pull/679 and @ilovezfs seems to be less annoyed by it now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 288
	},
	{
		"id" : 238892748,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-10T14:54:49Z",
		"body" : "Indeed! :shipit: :shipit: :shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 288
	},
	{
		"id" : 238813546,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:27:39Z",
		"body" : "Passing on this.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 289
	},
	{
		"id" : 227852101,
		"user" : {
			"login" : "Jack-Barry"
		},
		"created_at" : "2016-06-22T19:31:52Z",
		"body" : "I'm somewhat of a novice but I'd like to start contributing to some open source projects and this improvement seems do-able given my current skill level.  \r\n\r\nWhere would be a good place to start with these?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 290
	},
	{
		"id" : 228166201,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-23T20:00:33Z",
		"body" : "@Jack-Barry Good questions. As a novice you'd be a great person to work on this. I'd post to this issue the various terms of jargon in Homebrew that you understood immediately, understood after a while and don't understand. Feel free to say your understanding of some of your terms here and we can clarify if they are correct (which will help understand whether they are jargon or not). Once we've got that we can help you create a pull request to change some of them. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 290
	},
	{
		"id" : 228245505,
		"user" : {
			"login" : "Jack-Barry"
		},
		"created_at" : "2016-06-24T02:54:14Z",
		"body" : "In all honesty I had to look these up in blog posts, since I have not paid much attention to the jargon during use.  (If the software I'm trying to download works, I usually just keep on truckin'.)  However, some of the terms are more understandable than others.\r\n\r\n1. `Cellar` is the directory where all Homebrew installed software lives.  \r\n   This one is pretty straightforward, it's where you keep all your beers, aka downloaded materials \r\n2. A `bottle` is a piece of software downloaded by Homebrew that will reside in your `Cellar`  \r\n   This is also very clear. (I guess I should say brown or green, depending on the beer, heh heh)  \r\n3. A `keg` is a package downloaded by Homebrew.  \r\n   This one I'm a little unclear on, is a `keg` comprised of multiple `bottles`? Or are `kegs`/packages referring to something else entirely? If something else entirely would maybe `can` or `pint` be a valid replacement?\r\n4. A `tap` refers to a repo/source for software to be downloaded from.  \r\n   Also pretty understandable.  If you're looking for different flavors of beers, or `bottles` you'll pour them from different `taps`\r\n  \r\nLet me know if these are accurate or way off base, and any other terms to look into.\r\n\r\nCheers",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 290
	},
	{
		"id" : 228566282,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-25T19:26:03Z",
		"body" : "> Cellar is the directory where all Homebrew installed software lives.\r\n> This one is pretty straightforward, it's where you keep all your beers, aka downloaded materials\r\n\r\nYep correct üëç except downloaded things are in `HOMEBREW_CACHE`\r\n\r\n> A bottle is a piece of software downloaded by Homebrew that will reside in your Cellar\r\n> This is also very clear. (I guess I should say brown or green, depending on the beer, heh heh)\r\n\r\nThis is not quite right; a bottle is a precompiled (or technically: the `install` method already run) package which not everything installed by Homebrew is.\r\n\r\n\r\n> A keg is a package downloaded by Homebrew.\r\n> This one I'm a little unclear on, is a keg comprised of multiple bottles? Or are kegs/packages referring to something else entirely? If something else entirely would maybe can or pint be a valid replacement?\r\n\r\nA keg is the installation location for a particular package. It can be installed from a bottle or not from a bottle.\r\n\r\n\r\n> A tap refers to a repo/source for software to be downloaded from.\r\n> Also pretty understandable. If you're looking for different flavors of beers, or bottles you'll pour them from different taps\r\n\r\nYeh, pretty much; it's a repository that contains `formulae` (package installation instructions) and/or external commands but otherwise: yep üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 290
	},
	{
		"id" : 228611939,
		"user" : {
			"login" : "snood1205"
		},
		"created_at" : "2016-06-26T17:21:32Z",
		"body" : "I actually really like the so called jargon. I think it fits in perfectly with `brew`'s theme and is pretty easy to understand. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 290
	},
	{
		"id" : 229843218,
		"user" : {
			"login" : "Jack-Barry"
		},
		"created_at" : "2016-07-01T03:03:56Z",
		"body" : "What would be the next steps here?  I also like the jargon a lot but if there's ways to make it more accessible/user friendly I'm all for it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 290
	},
	{
		"id" : 230073667,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-07-02T00:38:34Z",
		"body" : "Would a picture or a cartoon help?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 290
	},
	{
		"id" : 230578475,
		"user" : {
			"login" : "Jack-Barry"
		},
		"created_at" : "2016-07-05T19:31:00Z",
		"body" : "@MikeMcQuaid I think the only one that was in need of a more widely understood term was `keg`.  If `bottles` are something you download, but `kegs` aren't, it's a little misleading because the way I'd take it is \"kegs are basically like giant bottles,\" but in this analogy you'd be pouring `bottles` (or non-bottles) into a `keg`.\r\n\r\nAside from that, everything else made pretty decent sense aside from some minor technical details, but nothing that would be too hard to figure out.  Those details would only come into play when digging deep and getting really far under the hood which I'm *guessing* most users of Homebrew won't be involved in.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 290
	},
	{
		"id" : 231578349,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-10T08:58:08Z",
		"body" : "@Jack-Barry Keg could be hidden as an implementation detail; can you remember where you say it as a user?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 290
	},
	{
		"id" : 238813585,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:27:48Z",
		"body" : "Passing on this.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 290
	},
	{
		"id" : 222317851,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-28T16:45:41Z",
		"body" : "Tim's solution sounds ideal to me, if it works as expected, FWIW.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 291
	},
	{
		"id" : 240394528,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T12:19:58Z",
		"body" : "We currently print: \r\n```\r\nWarning: /usr/local/sbin is not in your PATH\r\nYou can amend this by altering your ~/.zshrc file\r\n```\r\n\r\nThis seems ideal to me so don't need any additional caveats.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 291
	},
	{
		"id" : 222320602,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-28T17:43:37Z",
		"body" : "Is the migration really worth it? Seems like starting over with fresh caches might be less prone to support problems.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222321153,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-28T17:56:30Z",
		"body" : "By moving cache folder in a per-user paths, we will need a new place for Formula lock files. Otherwise, it will be broken for multiple user cases. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222321187,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-28T17:57:23Z",
		"body" : "This looks like it's going to trigger migration of ancient cache directories if the user has an old /Library/Caches lying around because he switched to ~/Library/Caches/Homebrew a long time ago but never blew away the old /Library/Caches/Homebrew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222321248,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-28T17:58:45Z",
		"body" : "The migration will also be totally random on a multi-user system based on a race of who sits down and uses brew first.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222321341,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-28T18:00:21Z",
		"body" : "I agree with @ilovezfs, starting with fresh seems to be the most simple and robust way. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222325126,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-28T19:16:44Z",
		"body" : "> I agree with @ilovezfs, starting with fresh seems to be the most simple and robust way.\r\n\r\n@xu-cheng and the way that shows 0Ô∏è‚É£ consideration to people with slow internet connections.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222334457,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-28T23:31:17Z",
		"body" : "> The migration will also be totally random on a multi-user system based on a race of who sits down and uses brew first.\r\n\r\nMaybe a crazy idea, but we could symlink stuff from the legacy cache directory to the new per-user cache directory to address this. (This will raise many other questions I probably don't have answers to.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222343356,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-29T05:18:10Z",
		"body" : "@MikeMcQuaid I only thought that robust should be more important than usability here. But point taken. \r\n\r\nAlso what's your thought on lock file directory, as I mentioned in https://github.com/Homebrew/brew/pull/292#issuecomment-222321153",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222345578,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-29T06:41:57Z",
		"body" : "@UniqMartin Another option might be hardlinks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222380843,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-29T20:26:11Z",
		"body" : "I've updated this to move instead of copy, not rerun every time on failure but instead print a warning telling users to manually migrate. I've tested this with various combinations of bad permissions and it behaves as expected as the `FileUtils` methods do not fails on being unable to `touch` or `rm_rf`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222470921,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-30T11:18:33Z",
		"body" : "Just want to remind that formula lock directory should be addressed in this or future PR. (TL;DR by moving cache to a per user dir, lock will fail on multiuser machines)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222520856,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-30T16:03:36Z",
		"body" : "> Just want to remind that formula lock directory should be addressed in this or future PR. (TL;DR by moving cache to a per user dir, lock will fail on multiuser machines)\r\n\r\nüëç That's already the case with the legacy `~/Library/LaunchAgents` so I think it's a future PR thing. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222723492,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-31T15:23:10Z",
		"body" : "Any objections to üö¢ing the current code and iterating on any issues? Happy to wait for folks here to do more review or testing but just want to be sure I'm waiting on the right people üòÄ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222733798,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-31T15:55:51Z",
		"body" : "I still think this is a bad idea, but I don't intend to stand in front of the :train: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222735213,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-31T16:00:16Z",
		"body" : "@ilovezfs The migration or the move?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222736589,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-31T16:04:45Z",
		"body" : "I think switching to ~/Library/Caches/Homebrew is the best thing since sliced bread. The migration, not so much.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222917886,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-01T07:46:29Z",
		"body" : "Pushing with the migration. If there's issues it should be easy to disable (particularly as `brew update` means the `master` version of `update-report` is always run now).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 292
	},
	{
		"id" : 222964824,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-01T11:24:38Z",
		"body" : "Fun:\r\n```\r\niMac-TMP:homebrew-core joe$ brew update\r\nUpdated 1 tap (homebrew/core).\r\n==> Cleaning up /Library/Caches/Homebrew...\r\n==> Migrating /Library/Caches/Homebrew to /Users/joe/Library/Caches/Homebrew...\r\n==> Deleting /Library/Caches/Homebrew...\r\n==> Updated Formulae\r\nbfg\r\niMac-TMP:homebrew-core joe$ git reset --hard HEAD^\r\nHEAD is now at b8f2c4a emojify 1.0.0 (new formula) (#1607)\r\niMac-TMP:homebrew-core joe$ brew update\r\nUpdated 1 tap (homebrew/core).\r\n==> Cleaning up /Library/Caches/Homebrew...\r\n==> Migrating /Library/Caches/Homebrew to /Users/joe/Library/Caches/Homebrew...\r\n==> Deleting /Library/Caches/Homebrew...\r\n==> Updated Formulae\r\nbfg\r\n```\r\nRinse, lather, repeat.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222965953,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-01T11:30:41Z",
		"body" : "@ilovezfs Can you confirm why the check is failing in your case?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222966251,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-01T11:32:12Z",
		"body" : "Where's the fun in that? But sure.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222968006,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-01T11:41:47Z",
		"body" : "It's creating the .migration_attempted and then deleting it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222969064,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-01T11:47:17Z",
		"body" : "@ilovezfs but, presumably, failing to delete the actual cache?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222969519,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-01T11:49:34Z",
		"body" : "@ilovezfs should be fixed as-of 8108106; let me know.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222970247,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-01T11:53:40Z",
		"body" : "Right. The `FileUtils.rm_rf ` leaves behind `/Library/Caches/Homebrew` and `/Library/Caches/Homebrew/Formula/[a bunch of .brewing files]` because `/Library/Caches/Homebrew/Formula` isn't owned by me. That commit should \"fix\" it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222970756,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-01T11:56:41Z",
		"body" : "Yup:\r\n```\r\n1\r\n.\r\n..\r\n.migration_attempted\r\nFormula\r\n==> Deleting /Library/Caches/Homebrew...\r\n2\r\n.\r\n..\r\nFormula\r\nNo changes to formulae.\r\niMac-TMP:homebrew-core joe$ brew update\r\nAlready up-to-date.\r\niMac-TMP:homebrew-core joe$ git reset --hard HEAD^\r\nHEAD is now at b8f2c4a emojify 1.0.0 (new formula) (#1607)\r\niMac-TMP:homebrew-core joe$ brew update\r\nUpdated 1 tap (homebrew/core).\r\n==> Updated Formulae\r\nbfg\r\n```\r\n\r\nOf course that also potentially leaves behind who-knows-how-much-stuff that will now never be removed or attempted to be removed, since the .migration_attempted isn't per user, which it probably should be (like .migration_attempted.501).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222972158,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-01T12:03:44Z",
		"body" : "@ilovezfs Glad it works. \r\n\r\n> Of course that also potentially leaves behind who-knows-how-much-stuff that will now never be removed or attempted to be removed\r\n\r\nTweaked messaging for this case in 4a8fcae.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222972753,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-01T12:06:43Z",
		"body" : "Better notice the warning the first time!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 292
	},
	{
		"id" : 222326316,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-28T19:44:47Z",
		"body" : "LGTM.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 294
	},
	{
		"id" : 222332106,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-28T22:13:58Z",
		"body" : "Thanks for making this a reality! :tada: Something similar was in the back of my head, but I never got around to doing this, partially because I shied away from addressing the baked-in assumption that `tap` is always set to something ‚Ä¶ something you fixed in the other `test-bot` PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 294
	},
	{
		"id" : 222333761,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-28T23:05:40Z",
		"body" : "A few small suggestions, but nothing major. Already very solid on the first iteration as far as I can tell. :+1: (And splitting the commits was indeed very helpful for review.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222343461,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-29T05:22:32Z",
		"body" : "@MikeMcQuaid just want to ask what's your thought on https://github.com/Homebrew/brew/issues/264#issuecomment-221484818\r\n\r\nI will do some test to confirm my theory. But it looks like that we could keep using Ruby HTTP API by using `net/http` instead of `open-uri` like what we did in `gist-logs`. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222343505,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-29T05:24:26Z",
		"body" : "If we switch to curl, it may be worthy to make `gist-logs` to do the same. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222352280,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-29T09:54:43Z",
		"body" : "> @MikeMcQuaid just want to ask what's your thought on #264 (comment)\r\n\r\nI think it's fine for Homebrew developer-centric stuff to not use `curl`. That said, I'm pretty sure that it's possible somehow using `curl`.\r\n\r\n> If we switch to curl, it may be worthy to make gist-logs to do the same.\r\n\r\nYep, I'll address that as part of this PR. The goal is to having anything that end-users use to use `curl`; even if the Ruby HTTP API works well it'll still handle proxies/authentication slightly differently so I think it's worth using `curl` universally.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222353030,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-29T10:13:06Z",
		"body" : "If we choose to use curl, here is a list of issues need to be addressed:\r\n* [ ] Compatible on old system. Will old system cert problem impact this?\r\n* [ ] Security. \r\n  * [ ] If I run `brew --verbose`, the token should not be displayed.\r\n  * [ ] If possible, can we not create a new temp file? It may leak sensitive information on multi users machine. Can we use file descriptor and StringIO instead?\r\n* [ ] Performance, a benchmark is preferable compared with Ruby API. \r\n* [ ] Robust, we could use `mitproxy` to test different proxies to make sure new implementation do solve the problem. And since we are implementing lots of lower level details on our own, test case may be required. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222353419,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-29T10:23:30Z",
		"body" : "> Compatible on old system. Will old system cert problem impact this?\r\n\r\nWe already use `curl` to download lots of things from GitHub already.\r\n\r\n> If possible, can we not create a new temp file? It may leak sensitive information on multi users machine. Can we use file descriptor and StringIO instead?\r\n\r\nWhat sensitive information?\r\n\r\n> Performance, a benchmark is preferable compared with Ruby API.\r\n\r\nThis code is not performance critical and better proxy support and consistency trumps performance.\r\n\r\n> Robust, we could use mitproxy to test different proxies to make sure new implementation do solve the problem. And since we are implementing lots of lower level details on our own, test case may be required.\r\n\r\nUnneeded, we already rely on `curl` for most HTTP transfers already.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222353897,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-29T10:35:56Z",
		"body" : "> We already use curl to download lots of things from GitHub already.\r\n\r\nBut we are using `--insecure` on old system at least for tigerbrew, which may be fine for fetching but not for sending request with token.\r\n\r\n> What sensitive information?\r\n\r\ncookies and token.\r\n\r\n> This code is not performance critical and better proxy support and consistency trumps performance.\r\n\r\nI mean better performance is always preferable. Also I don't believe Ruby has less proxy support(except open-uri)\r\n\r\n> Unneeded, we already rely on `curl` for most HTTP transfers already.\r\n\r\nWe never use curl do auth transfers over auth proxy. And by test case, I mean to test the code parse the headers/http code/output",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222354042,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-29T10:40:54Z",
		"body" : "> cookies and token.\r\n\r\nWe are not sending cookies and tokens are not included in the returned headers.\r\n\r\n> Also I don't believe Ruby has less proxy support(except open-uri)\r\n\r\nIf you would like to remove open-uri support and instead use net/http in another pull request: please feel free. I will not be doing it in this one.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222354116,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-29T10:42:56Z",
		"body" : "> If you would like to remove open-uri support and instead use net/http in another pull request: please feel free. I will not be doing it in this one.\r\n\r\nI can sure submit a PR for comparison. Just want to compare two approaches more thoroughly. :wink: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222354282,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-29T10:47:57Z",
		"body" : "@xu-cheng üÜí, I just don't think that comparison needs to necessarily block this PR being merged and I think there's merit in standardising on a single method of HTTP communication.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222354510,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-29T10:54:03Z",
		"body" : "> I think there's merit in standardising on a single method of HTTP communication.\r\n\r\nSeconded. It also makes us more consistent with respect to HTTPS handling, e.g. because we're not consulting possibly different certificate stores. I'm also convinced that network speed is the dominating factor here and not how quickly we can shell out to `curl` vs. some native API. And it's not like we're sending hundreds of requests in short succession, we're only sending a few every once in a while.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222354540,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-29T10:55:05Z",
		"body" : "> I'm also convinced that network speed is the dominating factor here and not how quickly we can shell out to curl vs. some native API.\r\n\r\nüëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222356296,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-29T11:43:12Z",
		"body" : "> And it's not like we're sending hundreds of requests in short succession, we're only sending a few every once in a while.\r\n\r\nHow about `brew search`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222356627,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-29T11:52:09Z",
		"body" : "@xu-cheng We're not sending hundreds in that case, either üòâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222358956,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-29T12:50:34Z",
		"body" : "Pushed and addressed feedback. This should be ready for testing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222723533,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-31T15:23:16Z",
		"body" : "Any objections to üö¢ing the current code and iterating on any issues? Happy to wait for folks here to do more review or testing but just want to be sure I'm waiting on the right people üòÄ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222919061,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-01T07:52:23Z",
		"body" : "I'm :+1: on shipping as-is. Did work as expected in my (admittedly rather limited) testing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 223806756,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-05T11:00:23Z",
		"body" : "@MikeMcQuaid Did you intentionally squash merge this PR? I think it would have been useful to preserve the individual commits in our history.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 223807368,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-05T11:14:38Z",
		"body" : "@UniqMartin Will bear that in mind in future. Do we want to enable merge commits on this repository now for this situation, do you think?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 223807371,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-05T11:14:46Z",
		"body" : "(you can enable both)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 223807978,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-05T11:29:57Z",
		"body" : "I'm personally fond of the linear history and thus tend to use `brew pull` for multi-commit PRs, but I can totally see the appeal for being able to merge directly from the GitHub website without having to resort to the command line.\r\n\r\n> Do we want to enable merge commits on this repository now for this situation, do you think?\r\n\r\nNow that we have a separate repository for the package manager, I think this makes sense and wouldn't have a noticeably negative impact on the readability of our history. For changes like these I'd certainly prefer the context and step-by-step nature of individual commits in a side branch, that would be retained by a merge commit. (But I was really just curious whether the squash merge was a conscious decision.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 223808445,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-05T11:41:09Z",
		"body" : "> Now that we have a separate repository for the package manager, I think this makes sense and wouldn't have a noticeably negative impact on the readability of our history.\r\n\r\n:cool: done üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 223809699,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-05T12:09:27Z",
		"body" : "> üÜí done üëç\r\n\r\nThanks! :bow:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 295
	},
	{
		"id" : 222385162,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-29T21:56:55Z",
		"body" : "You're getting sulked at by the tests at the moment, but üëç on this as an idea. I'd actually aliased `brewtap` onto `brew tap --full` because the existing behaviour was so much bother.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 297
	},
	{
		"id" : 222386025,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-29T22:16:46Z",
		"body" : ":+1: on the general idea, but I'm fairly strongly against deciding this inside our internal API in `tap.rb`.\r\n\r\nIt feels more appropriate to put this distinction between regular user and Homebrew developer into `cmd/tap.rb`. (And if I'm understanding the code correctly, this also doesn't work as it should, because `cmd/tap.rb` is always passing the `:full_clone` option to `Tap#install`, thus the changed default doesn't have an effect on `brew tap <whatever>`.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 297
	},
	{
		"id" : 222386302,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-29T22:23:49Z",
		"body" : "> You need a non-shallow clone to push branches upstream so if you often tap and untap taps (e.g. `homebrew/boneyard`) then you need to remember to manually `fetch --unshallow`.\r\n\r\nSorry if I'm nitpicking a bit here, but this isn't actually true. `brew tap foo/bar` followed by `brew tap --full foo/bar` will also unshallow the clone as can be seen here:\r\n\r\n```\r\n$ brew tap homebrew/gui\r\n==> Tapping homebrew/gui\r\nCloning into '/opt/brewery/dummy/Library/Taps/homebrew/homebrew-gui'...\r\nremote: Counting objects: 25, done.\r\nremote: Compressing objects: 100% (25/25), done.\r\nremote: Total 25 (delta 0), reused 13 (delta 0), pack-reused 0\r\nUnpacking objects: 100% (25/25), done.\r\nChecking connectivity... done.\r\nTapped 21 formulae (69 files, 80.8K)\r\n\r\n$ brew tap --full homebrew/gui\r\n==> Unshallowing homebrew/gui\r\nremote: Counting objects: 155, done.\r\nremote: Compressing objects: 100% (85/85), done.\r\nremote: Total 155 (delta 91), reused 133 (delta 69), pack-reused 0\r\nReceiving objects: 100% (155/155), 23.78 KiB | 0 bytes/s, done.\r\nResolving deltas: 100% (91/91), completed with 22 local objects.\r\n```\r\n\r\n(I'm not debating that for maintainers this is still less convenient than immediately getting a full clone.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 297
	},
	{
		"id" : 222462179,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-30T10:23:10Z",
		"body" : "> It feels more appropriate to put this distinction between regular user and Homebrew developer into cmd/tap.rb.\r\n\r\nüëç \r\n\r\n> brew tap foo/bar followed by brew tap --full foo/bar will also unshallow the clone as can be seen here:\r\n\r\nSorry, I meant `brew tap --full` or `brew fetch --unshallow`; either way requires manual intervention.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 297
	},
	{
		"id" : 222463415,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-30T10:30:33Z",
		"body" : "Feedback addressed, tests passing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 297
	},
	{
		"id" : 222470573,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-30T11:16:10Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 297
	},
	{
		"id" : 222385404,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-29T22:02:50Z",
		"body" : ":+1: This also helps to keep down the pollution in a user's tab completion for `brew`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 298
	},
	{
		"id" : 222539399,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-30T18:39:58Z",
		"body" : "Don't know if it matters, but this change causes the `test_integration_cmds` test to fail if `HOMEBREW_DEVELOPER` isn't set. Stumbled across that testing something else locally with that deliberately unset.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 298
	},
	{
		"id" : 222552704,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-30T20:47:24Z",
		"body" : "@DomT4 f12932c ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 298
	},
	{
		"id" : 223660772,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-06-03T18:44:29Z",
		"body" : "Just noticed this change after our CI that uses `test-bot` failed. I guess I could start watching this repository since it doesn't have all the noise of the homebrew-core formulae. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 298
	},
	{
		"id" : 223757541,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-04T14:07:42Z",
		"body" : "@scpeters Yeh, probably not a bad idea. It's worth setting `HOMEBREW_DEVELOPER` anyway on CI and locally if you're ever really doing work on Homebrew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 298
	},
	{
		"id" : 222385564,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-29T22:06:37Z",
		"body" : ":+1: Makes sense and helps with fine-grained local testing. There's no conceivably good lower limit when running only a subset of the test suite and just falling below a threshold shouldn't be causing a failure.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 299
	},
	{
		"id" : 222385059,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-29T21:54:42Z",
		"body" : ":+1: Thanks for following up to my comment with a PR! Feel free to merge as-is.\r\n\r\nI left a few thoughts in the code comments, in case you'd like to incorporate them (but they might be out of scope for this PR). If not, that's equally fine and I'll do that in a follow-up PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 300
	},
	{
		"id" : 222461986,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-30T10:22:03Z",
		"body" : "> I left a few thoughts in the code comments, in case you'd like to incorporate them (but they might be out of scope for this PR). If not, that's equally fine and I'll do that in a follow-up PR.\r\n\r\nGood comments, have incorporated them üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 300
	},
	{
		"id" : 222470028,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-30T11:12:34Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 300
	},
	{
		"id" : 222470733,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-05-30T11:17:12Z",
		"body" : ":+1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 300
	},
	{
		"id" : 222406983,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-30T03:55:32Z",
		"body" : "This seems reasonable to me but I'd possibly wait for Mike to yay/nay in the morning.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 301
	},
	{
		"id" : 222444938,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-05-30T08:51:30Z",
		"body" : "@MikeMcQuaid thoughts on this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 301
	},
	{
		"id" : 222447082,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-30T09:02:15Z",
		"body" : "üëç :shipit: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 301
	},
	{
		"id" : 222547691,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-30T20:00:01Z",
		"body" : "> if p.start_with? \"ftp://ftp.mirrorservice.org\"\r\n\r\nThis element can be shunted into the above block if people aren't fussed about distinguishing between \"FTP as a first resort is bad here\" and \"Use secure URLs\". The separation is deliberate right now as the purposes are slightly different, but I'll go quietly if people prefer to focus on the end advice being the same.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 302
	},
	{
		"id" : 222566196,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-30T23:40:31Z",
		"body" : ":+1: overall with a few nits left in the code comments and also more nits regarding the commit messages (if changing them is not too much of a bother):\r\n\r\n- `audit: prefer https/s => ftp where known available` üëâ `audit: prefer https/s over ftp where known available`\r\n- `audit: rubocop appeasement` üëâ `audit: appease rubocop`\r\n- At the danger of being awarded nitpicker of the week: I believe proper capitalization helps with readability of HTTP, FTP, RuboCop, CPAN, and similar terms.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 302
	},
	{
		"id" : 222571822,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-31T01:04:48Z",
		"body" : "Changes pushed.\r\n\r\n> also more nits regarding the commit messages (if changing them is not too much of a bother)\r\n\r\nIs this your way of saying I've done something to upset you & you'd like revenge? üòú.\r\n\r\n>  I believe proper capitalization helps with readability of HTTP, FTP, RuboCop, CPAN, and similar terms.\r\n\r\nIn the file or in commit messages? Agree either way, but we've been extremely inconsistent about this and have mildly leaned towards lowercasing which is why I stick with that at the moment.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 302
	},
	{
		"id" : 222575094,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-31T01:43:39Z",
		"body" : ":+1:\r\n\r\n> Is this your way of saying I've done something to upset you & you'd like revenge? üòú.\r\n\r\nNope. At least not that I'm aware of. Just my usual dosage of pedantry. üòú\r\n\r\n> In the file or in commit messages?\r\n\r\nBoth, though in this specific case the commit messages. But I don't feel very strongly about this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 302
	},
	{
		"id" : 222629517,
		"user" : {
			"login" : "nijikon"
		},
		"created_at" : "2016-05-31T08:52:32Z",
		"body" : "Let's merge this üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 302
	},
	{
		"id" : 222576644,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-05-31T01:59:57Z",
		"body" : "Yeah, `sourcekitten` builds fine for me with the latest `git` from Homebrew. Maybe it's worth filing an rdar with Apple to see if they're aware of this; it's a nasty enough regression to merit a fix before El Cap stops being the current release of OS X, _hopefully_.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 303
	},
	{
		"id" : 222578898,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-31T02:24:00Z",
		"body" : "> Maybe it's worth filing an rdar with Apple to see if they're aware of this; it's a nasty enough regression to merit a fix before El Cap stops being the current release of OS X, *hopefully**.\r\n\r\nXcode 7.3.1 is currently the only version affected by this and I think Apple is unlikely to cut a new release just to address this bug. They have also been pretty quick to adopt new Git versions in the recent past: Xcode 7.2(.1) had 2.5.4, Xcode 7.3 had 2.6.4, and Xcode 7.3.1 already has 2.7.4, so I think it's not completely unlikely the next Xcode release will have Git 2.8.3 or higher. But of course all of this is just an excuse not to file a rdar as I've never done this before. :wink:\r\n\r\nIt's only nasty if you have recursive submodules *and* dare to move your working copies around on disk.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 303
	},
	{
		"id" : 222612390,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-31T07:28:35Z",
		"body" : "Makes sense to me üëç. What's the performance like e.g. how long does this take on your machine on a random repository?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 303
	},
	{
		"id" : 222716656,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-31T15:02:18Z",
		"body" : "> What's the performance like e.g. how long does this take on your machine on a random repository?\r\n\r\nThere's zero impact on repositories without submodules. For those that have submodules, the cost is approximately linear in the number of submodules and dominated by how quickly `git submodule foreach --recursive` is able to enumerate them (about 0.5s for the `sourcekitten` repository with 9 submodules). The time for this tends to be significantly less than the preceding recursive `git submodule sync` and the initialization of submodule repositories not previously cloned.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 303
	},
	{
		"id" : 222716926,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-31T15:03:08Z",
		"body" : "@UniqMartin Sounds good üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 303
	},
	{
		"id" : 222610599,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-31T07:18:57Z",
		"body" : "üëç but ideally add a test to ensure we don't go back to the old form.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 304
	},
	{
		"id" : 222713730,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-31T14:53:29Z",
		"body" : "> ideally add a test to ensure we don't go back to the old form.\r\n\r\nDo you have something specific in mind? The only thing that inspects our code style during test bot runs is `brew readall --syntax` to make sure we don't introduce syntax warnings or even errors. We don't run `brew style` on our code base, just on formula submissions, but even if we did, there's currently no cop to check this particular style issue. (So the only thing I can currently think of‚Äîprovided some leisure time‚Äîwould be to contribute a new cop to RuboCop to check for this and then work towards making `brew style` a part of our test bot runs for Homebrew/brew.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 304
	},
	{
		"id" : 222719716,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-31T15:11:34Z",
		"body" : "@UniqMartin Yeh, fitting it into any of those would be a good call.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 304
	},
	{
		"id" : 222742715,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-05-31T16:25:43Z",
		"body" : "Just FYI @UniqMartin `ack` uses `--nogroup` by default when you pipe its output. `ack foo | wc -l` is equivalent to `ack --nogroup foo | wc -l`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 304
	},
	{
		"id" : 222745691,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-31T16:36:07Z",
		"body" : "> Yeh, fitting it into any of those would be a good call.\r\n\r\nI think I'd like to address this in RuboCop as soon as time permits, so a wider community can benefit from this. I'll try to pursue making `brew style` part of our Homebrew/brew test bot runs and addressing the still unfixed code style issues, but that's more of a long-term projects of mine (and lower priority than other pending improvements). But I guess this doesn't block this PR from being merged, or does it?\r\n\r\n> Just FYI, `ack` uses `--nogroup` by default when you pipe its output. `ack foo | wc -l` is equivalent to `ack --nogroup foo | wc -l`.\r\n\r\nThanks for the hint, I never checked but assumed as much! The reason it's still in my snippet in the top comment is that I ran it before without the trailing `| wc -l` to inspect the occurrences (and grouping wasn't helpful in this case). And then I just lazily appended the `| wc -l` to get the numbers.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 304
	},
	{
		"id" : 222773557,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-05-31T18:14:52Z",
		"body" : "Another thing I realised today that's way off in \"nice to haves\" is moving more of the `audit` logic into Rubocop itself.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 304
	},
	{
		"id" : 222783383,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-31T18:48:13Z",
		"body" : "> Another thing I realised today that's way off in \"nice to haves\" is moving more of the audit logic into Rubocop itself.\r\n\r\nThat's true, if it applies more broadly to Ruby projects and their style. Of course there's also a lot of domain-specific checks in there and they'll probably have to stay in our code. For simple stuff like trailing whitespace you'll notice there is duplicate output in `brew audit --strict` already (see below), because this is both checked in our audit code directly and indirectly via RuboCop.\r\n\r\n```\r\n$ brew audit --strict xz\r\nxz:\r\n  * 25: Trailing whitespace was found\r\n  * C: 25: col 29: Trailing whitespace detected.\r\nError: 2 problems in 1 formula\r\n```\r\n\r\n(We could disable those checks in our code if `--strict` is passed, filter them from the RuboCop output, or maybe do something else. Not sure what's best or whether ignoring this for now is fine, too.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 304
	},
	{
		"id" : 222913859,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-01T07:24:44Z",
		"body" : "> That's true, if it applies more broadly to Ruby projects and their style. Of course there's also a lot of domain-specific checks in there and they'll probably have to stay in our code. For simple stuff like trailing whitespace you'll notice there is duplicate output in brew audit --strict already (see below), because this is both checked in our audit code directly and indirectly via RuboCop.\r\n\r\n@UniqMartin Sorry, I mean writing our own RuboCop plugins for most things as RuboCop can actually parse Ruby rather than requiring regex. Definitely would be nice to kill the duplicate output at some point üëç.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 304
	},
	{
		"id" : 222917651,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-01T07:45:17Z",
		"body" : "I see. Yes, something similar to [rubocop-cask](https://github.com/caskroom/rubocop-cask) would be nice to have. We just have to find someone who's interested in that topic and has sufficient time to pursue it. Maybe that's something worth drafting for our brew-evolution repository?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 304
	},
	{
		"id" : 222790377,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-31T19:13:00Z",
		"body" : "> `brew tests` passes, but `brew tests --only=integration_cmds/home` raises an error. Rake also aborts (possibly whenever `--only` is used). Error messages are copied below.\r\n\r\nThe reason for this is that you are using the `Formula` class in this test, but you don't have a `require \"formula\"` at the top of the `test_integration_cmds.rb` file, so the full implementation of the `Formula` class isn't available and this causes the error.\r\n\r\nThe reason you (usually) don't see this error when running the full test suite is that some other test will have `require`d `formula` and thus the code therein will be already available once the test suite starts going through the tests in `test_integration_cmds.rb`. (But this is not guaranteed, since the tests are run in a random order each time you execute `brew tests`, so with rather low probability you might end up hitting this issue even when running the full test suite.)\r\n\r\nAs for a solution to this issue, I see two options:\r\n\r\n- Add a `require \"formula\"` line to `test_integration_cmds.rb`.\r\n- Don't use `Formula` in the test code you added. What I mean by that is that you can put the dummy homepage (just the string) into a local variable and then use that both in writing the `testball` formula and when checking the output of `brew home testball`.\r\n\r\nI personally prefer the second solution.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 305
	},
	{
		"id" : 222813775,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-05-31T20:42:08Z",
		"body" : "> > brew tests passes, but brew tests --only=integration_cmds/home raises an error. Rake also aborts (possibly whenever --only is used). Error messages are copied below.\r\n\r\n> The reason for this is that you are using the Formula class in this test, but you don't have a require \"formula\" at the top of the test_integration_cmds.rb file, so the full implementation of the Formula class isn't available and this causes the error.\r\n\r\n@UniqMartin Thanks for explaining everything. One more question -- how does `require` know where to locate files? I would have thought that filenames needed to be referenced relative to `Homebrew/test/`, (where the integration tests file lives) but this doesn't seem to be the case.\r\n\r\n> As for a solution to this issue, I see two options:\r\n> \r\n> - Add a require \"formula\" line to test_integration_cmds.rb.\r\n> - Don't use Formula in the test code you added. What I mean by that is that you can put the dummy homepage (just the string) into a local variable and then use that both in writing the testball formula and when checking the output of brew home testball.\r\n> \r\n> I personally prefer the second solution.\r\n\r\nI'm a little attached to using `Formula[\"testball\"]` (since it seems \"prettier\") but I'll wait to see if anyone else has a preference. ‚ò∫Ô∏è ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 305
	},
	{
		"id" : 222836978,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-31T22:11:38Z",
		"body" : "> One more question -- how does `require` know where to locate files? I would have thought that filenames needed to be referenced relative to `Homebrew/test/`, (where the integration tests file lives) but this doesn't seem to be the case.\r\n\r\n[There are quite a few details to it](http://ruby-doc.org/core-2.3.1/Kernel.html#method-i-require) and it is further customized by RubyGems, but the gist of it is that it looks at the special Ruby global `$LOAD_PATH` (an array of directories) and tries to resolve the name relative to these directories. The first match is used. (Try `puts $LOAD_PATH` in an interactive `brew irb` session to see its contents.) In a way it's very similar to the shell's search path in the `PATH` environment variable.\r\n\r\nThe main Homebrew search path (`Homebrew/Library/`) is set up in [`brew.rb`](https://github.com/Homebrew/brew/blob/b9552a5fbf3772b408cdb25c3a545bb1444ba8ff/Library/brew.rb#L5) (`$:` is equivalent to `$LOAD_PATH`). In the test suite `brew.rb` isn't loaded, so this setup happens in [`testing_env.rb`](https://github.com/Homebrew/brew/blob/b9552a5fbf3772b408cdb25c3a545bb1444ba8ff/Library/Homebrew/test/testing_env.rb#L1-2) where both `Library/Homebrew/` and `Library/Homebrew/test/lib/` are prefixed to the search path. The latter has higher precedence and this is what allows the test suite to provide [a custom `config.rb`](https://github.com/Homebrew/brew/blob/b9552a5fbf3772b408cdb25c3a545bb1444ba8ff/Library/Homebrew/test/lib/config.rb) that is different from [the regular `config.rb`](https://github.com/Homebrew/brew/blob/b9552a5fbf3772b408cdb25c3a545bb1444ba8ff/Library/Homebrew/config.rb). This is also the explanation for why the test suite can write in various locations without messing up the actual Homebrew installation. Most paths are redirected to a temporary location that only exists for the duration of the test run.\r\n\r\n> I'm a little attached to using `Formula[\"testball\"]` (since it seems \"prettier\") but I'll wait to see if anyone else has a preference. ‚ò∫Ô∏è\r\n\r\nFair. I'm fine with either solution (or a third one I might have not thought of). I don't feel very strongly about this detail, but if it was up to me I'd use the second option. :wink:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 305
	},
	{
		"id" : 222838569,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-05-31T22:18:58Z",
		"body" : "> I would have thought that filenames needed to be referenced relative to `Homebrew/test/`, (where the integration tests file lives) but this doesn't seem to be the case.\r\n\r\n*One small addendum:* This is also possible, though that would be done with `require_relative`. It's not used in Homebrew because `require_relative` isn't available in Ruby 1.8.7, that we still support (though we plan to depend on Ruby 2.0 or above some time soon). And maybe because it's less useful to us.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 305
	},
	{
		"id" : 222898562,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-06-01T05:46:00Z",
		"body" : "@UniqMartin Thanks for the explanations! I did try to research the background of `require`, but your explanations provided some much needed context. üòÇ ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 305
	},
	{
		"id" : 222913522,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-01T07:22:47Z",
		"body" : "> Add a require \"formula\" line to test_integration_cmds.rb.\r\n\r\nThis seems like a good call to me in this case üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 305
	},
	{
		"id" : 223094943,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-06-01T19:12:20Z",
		"body" : "üëç  New commit has been pushed (adding `require 'formula'` and removing the altered indentation & additional whitespace).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 305
	},
	{
		"id" : 223140455,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-01T22:10:43Z",
		"body" : ":+1: Aside from a stylistic nit this looks good to me.\r\n\r\nI'd personally drop the `, require 'pathname'` from the commit subject as it's both unnecessary and misleading (I suppose you intended to write `formula` instead of `pathname` here). If I may suggest a commit message, something like `tests: extend cmd/home integration test` might be even better.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 305
	},
	{
		"id" : 223145530,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-06-01T22:35:30Z",
		"body" : "Oops!! I certainly did intend to write `formula`, not `pathname`. Thanks again @UniqMartin for pointing that out, and thanks for suggesting a better commit message. I'll plan to use the same message format for future commits in the same vein.\r\n\r\nI've pushed a new commit; hopefully everything looks OK at this point. üç™ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 305
	},
	{
		"id" : 223154581,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-01T23:26:24Z",
		"body" : "> I've pushed a new commit; hopefully everything looks OK at this point. üç™\r\n\r\nIt does! Thanks for addressing all feedback so swiftly and for enduring my nitpicking. I'm somewhat famous for picking apart submissions I get the chance to look at. :wink: Looking forward to your next PR!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 305
	},
	{
		"id" : 223214486,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-02T07:17:59Z",
		"body" : "Nice work @eirinikos üëè ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 305
	},
	{
		"id" : 222913250,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-01T07:21:09Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 306
	},
	{
		"id" : 222913344,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-01T07:21:40Z",
		"body" : "üëç although I do wonder if we need to have `brew doctor` complain about this at this point.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 307
	},
	{
		"id" : 222916722,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-01T07:40:20Z",
		"body" : "> although I do wonder if we need to have `brew doctor` complain about this at this point.\r\n\r\nWe don't complain if it's not installed and hopefully most of our newer users don't have it installed. If we keep track of the up-to-date version anyway in our code, I guess it's a nice touch that we nudge those who have it installed to upgrade, as XQuartz updates usually come with some security updates.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 307
	},
	{
		"id" : 222957631,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-01T10:47:14Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 222957657,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-01T10:47:21Z",
		"body" : "(but I'd wait for a couple more reviews first)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223132888,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-01T21:38:15Z",
		"body" : "Have added one code style comment, but otherwise the solution seems sound. (I haven't done extensive testing, though, and our dependency resolution code is‚Äîwell‚Äîcomplicated.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223203947,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T06:10:12Z",
		"body" : "@UniqMartin PR refreshed with that change.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223209340,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T06:46:59Z",
		"body" : "@xu-cheng did you have a chance to review this PR?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223209943,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-02T06:51:13Z",
		"body" : "LGTM",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223210895,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T06:56:53Z",
		"body" : "PR updated with the `<< ` change.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223213446,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-02T07:11:56Z",
		"body" : "> PR updated with the `<< ` change.\r\n\r\nNo! Unless I'm completely missing something, this will add the `Options` instance returned by the `inherited_options_for` method as a single element to the `Options` instance created in the `expand_dependencies` method. Definitely not the concatenation of arrays that should be here. (We want a flat array/list of options not an array of option arrays.)\r\n\r\nAnd while we're iterating through various operators here, on second thought `|=` seems more appropriate, as we don't really want to have duplicate options, hence better use a set union.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223214261,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-02T07:16:48Z",
		"body" : "> No! \r\n\r\nOops, I completely misread the code. @UniqMartin is right, it should be `|=` or `+=`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223214344,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T07:17:11Z",
		"body" : "@UniqMartin Yes, I think you're right. Interestingly, although this last change causes my test of the underlying `brew install wine` failure to immediately blow up, the brew test framework didn't care at all. That's every so slightly discomforting.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223214440,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T07:17:46Z",
		"body" : "Here's how that failure presents:\r\n```\r\niMac-TMP:local joe$ brew install wine\r\n==> Installing dependencies for wine: xz, libpng, freetype, jpeg, libtool, pkg-config, libusb,\r\n==> Installing wine dependency: xz\r\nError: undefined method `flag' for #<Options: []>\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/set.rb:232:in `each_key'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/set.rb:232:in `each'\r\n/usr/local/Library/Homebrew/options.rb:69:in `each'\r\n/usr/local/Library/Homebrew/options.rb:102:in `map'\r\n/usr/local/Library/Homebrew/options.rb:102:in `as_flags'\r\n/usr/local/Library/Homebrew/formula_installer.rb:551:in `build_argv'\r\n/usr/local/Library/Homebrew/formula_installer.rb:569:in `build'\r\n/usr/local/Library/Homebrew/formula_installer.rb:236:in `install'\r\n/usr/local/Library/Homebrew/formula_installer.rb:437:in `install_dependency'\r\n/usr/local/Library/Homebrew/formula_installer.rb:388:in `block in install_dependencies'\r\n/usr/local/Library/Homebrew/formula_installer.rb:388:in `each'\r\n/usr/local/Library/Homebrew/formula_installer.rb:388:in `install_dependencies'\r\n/usr/local/Library/Homebrew/formula_installer.rb:188:in `install'\r\n/usr/local/Library/Homebrew/cmd/install.rb:275:in `install_formula'\r\n/usr/local/Library/Homebrew/cmd/install.rb:149:in `block in install'\r\n/usr/local/Library/Homebrew/cmd/install.rb:149:in `each'\r\n/usr/local/Library/Homebrew/cmd/install.rb:149:in `install'\r\n/usr/local/Library/brew.rb:87:in `<main>'\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223215993,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T07:26:36Z",
		"body" : "`|=` ftw.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223216525,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T07:29:47Z",
		"body" : "Yeah, it appears the test framework doesn't have an inherited options test.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223216627,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-02T07:30:25Z",
		"body" : "> [‚Ä¶], the brew test framework didn't care at all. That's every so slightly discomforting.\r\n\r\nSadly, we're quite a bit away from being able to rely on it. If it blows up, at least the likelihood is big that somethings broken. If it stays calm, this can really mean anything.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223217016,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T07:32:27Z",
		"body" : ">If it stays calm, this can really mean anything.\r\n\r\nIndeed. Or as the aphorism goes, \"absence of evidence is not evidence of absence.\"",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223218036,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T07:38:15Z",
		"body" : ":shipit: ?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223219623,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-02T07:46:46Z",
		"body" : "I think the combination of `||=` and `|=` next to each other looks really weird, but oh well ‚Ä¶ From a technical standpoint: :shipit:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223219731,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-02T07:47:19Z",
		"body" : "@ilovezfs As long as it works with your local testing üëç üö¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223223242,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T08:04:59Z",
		"body" : ">I think the combination of ||= and |= next to each other looks really weird\r\n\r\nLOL. I'm putting that in the `:uniqmartin-self-fix` bucket :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223224023,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-02T08:09:05Z",
		"body" : "> LOL. I'm putting that in the `:uniqmartin-self-fix` bucket :)\r\n\r\n:joy: Put this before the loop to initialize the hash:\r\n\r\n```ruby\r\ninherited_options = Hash.new { |hash, key| hash[key] = Options.new } \r\n```\r\n\r\nAnd then only do this in the loop:\r\n\r\n```ruby\r\ninherited_options[dep.name] |= inherited_options_for(dep)```\r\n```\r\n\r\nAccessed elements are implicitly initialized and the problem is solved.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223224652,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-02T08:12:22Z",
		"body" : "Caveat for this suggestion: `inherited_options[<something>]` now never returns `nil` and one has to remember to use `Hash#key?`, `Hash#include?`, or `Hash#member?` to check whether an element exists in the hash. This can sometimes make quite a difference and break existing assumptions.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223225185,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T08:15:07Z",
		"body" : "I think I'm happy with this as is.\r\n\r\nAlso, under the hood\r\n```\r\n  def initialize(*args)\r\n    @options = Set.new(*args)\r\n  end\r\n\r\n  def +(o)\r\n    self.class.new(@options + o)\r\n  end\r\n\r\n def |(o)\r\n    self.class.new(@options | o)\r\n  end\r\n```\r\nSince @options is a set, what's the difference between `+` and `|` other than appearance in this case.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223226787,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-02T08:22:39Z",
		"body" : "> Since `@options` is a set, what's the difference between `+` and `|` other than appearance in this case.\r\n\r\nTechnically, there's none. I didn't notice this implementation detail when I suggested to use `|=`, so my mention of duplicate options in the list/array is obviously not true as the underlying data structure is a set. I still think `|=` is subtly better at communicating what it is doing (set union) than `+=`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223227909,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T08:28:02Z",
		"body" : "@UniqMartin also, I don't think the nil/non-nil assumptions have changed actually. As far as I can tell, the code without this PR leads to always-initialized too\r\n```\r\n  options = inherited_options[dep.name] = inherited_options_for(dep)\r\n```\r\nwhere `inherited_options_for(dep)` returns at minimum an `Options.new`. Or did I miss something?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223228714,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T08:31:47Z",
		"body" : "I guess you're saying `inherited_options = {}` leads to a difference outcome vs. `Hash.new { |hash, key| hash[key] = Options.new }` in the case where there are no deps at all?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223229789,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-02T08:36:51Z",
		"body" : "> I guess you're saying `inherited_options = {}` leads to a difference outcome vs. `Hash.new { |hash, key| hash[key] = Options.new }` in the case where there are no deps at all?\r\n\r\nNot necessarily in this case, but yes that was what my caveats was referring to. That one has to be careful replacing `{}` with `Hash.new`-with-block. But let's just ship this as-is and be done!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223230471,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T08:40:04Z",
		"body" : "Ah yes, I see what you mean now. You were proposing to have it auto-initialize the value on access. I think that would probably be fine though, since that hash doesn't survive this method does it? The return value is\r\n```\r\n    expanded_deps.map { |dep| [dep, inherited_options[dep.name]] }\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223237672,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T09:12:04Z",
		"body" : "@UniqMartin I refreshed the PR with your proposal. The two approaches seem to be approximately equally idiomatic in the code base, and it's one less line of code. Plus, it keeps the focus on what we care about in the iteration, which is the `|=`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223244105,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-02T09:41:05Z",
		"body" : "Glad you like it. But more importantly: Great work at debugging and identifying the issue so quickly! üéâ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223244867,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-02T09:44:28Z",
		"body" : "Thanks :) Also three cheers for our awesome users who reported it so quickly, as it made identifying the commit in which the regression occurred straightforward with git bisect.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 308
	},
	{
		"id" : 223030957,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-01T15:31:45Z",
		"body" : "> Can someone point me to the commit which explains this change?\r\n\r\nhttps://github.com/Homebrew/brew/pull/292 should help. If not, ask any other questions you have here.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 309
	},
	{
		"id" : 223040652,
		"user" : {
			"login" : "chrisfinazzo"
		},
		"created_at" : "2016-06-01T16:01:53Z",
		"body" : "Ah. That explains it.\r\n\r\nAlthough Homebrew is reasonably protected from SIP changes by putting formulae in `/usr/local`, using the root level Library for other stuff makes me nervous that something _could_ happen, even if `/Library` is also considered safe.\r\n\r\nIt's more portable now, too üòÄ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 309
	},
	{
		"id" : 223145978,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-01T22:37:45Z",
		"body" : "I'm pretty sure this isn't a glitch but a broken symlink that already existed before the migration, as I'm pretty sure `java-1.8.0_60-b27.dmg` shouldn't have been placed directly in the Homebrew cache in the first place. Thanks for the heads up and feel free to clear it yourself!\r\n\r\nAfter all it's only a cache and not vital to the operation of either Homebrew or Cask, as things will be (re)downloaded as needed and the particular file in question is an outdated version of Java.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 310
	},
	{
		"id" : 223185718,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-02T03:20:27Z",
		"body" : "Do the majority of alternative URLs conform to the `central` or `repo(n)` format? If so, presuming you've checked the output against a few fetched-from-maven formulae, seems reasonable to me. Consistency is certainly welcome.\r\n\r\n> would it be prudent of me to file a follow-up PR in core that changes the URLs in those formulae that don't adhere to this audit check yet?\r\n\r\nIt helps reinforce the consistency aspect, but not an obligation by any means.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 311
	},
	{
		"id" : 223195853,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-02T05:00:17Z",
		"body" : "> Do the majority of alternative URLs conform to the `central` or `repo(n)` format? If so, presuming you've checked the output against a few fetched-from-maven formulae, seems reasonable to me. Consistency is certainly welcome.\r\n\r\nThe majority in the formulae and what I've seen in the wild are prefixed with `repo1`, as that seems to be the primary server people get redirected to (and then just take this URL). I checked *all* core formulae with URLs diverging from what I'm suggesting here, and they all continue to work once changed as suggested by the audit (and of course with identical `sha256`).\r\n\r\n> It helps reinforce the consistency aspect, but not an obligation by any means.\r\n\r\nThe branch is already prepared, due to (somewhat optimistic) hope that this is going to be approved. üòÑ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 311
	},
	{
		"id" : 223216658,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-02T07:30:36Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 311
	},
	{
		"id" : 223243294,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-02T09:37:30Z",
		"body" : "> Sadly ... 8-core 64-bit skylake\r\n\r\nIf it makes you üò¢ I'll happily swap it for a worse CPU üòâ \r\n\r\nInline note but üëç to the general idea.\r\n\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 313
	},
	{
		"id" : 223243847,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-02T09:39:55Z",
		"body" : "Why I feel current output is a little misleading? `brew config` reports to me `8-core 64-bit haswell`. But in reality, my CPU only has four cores but eight hyperthreads. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 313
	},
	{
		"id" : 223246490,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-02T09:52:00Z",
		"body" : "> If it makes you üò¢ I'll happily swap it for a worse CPU üòâ\r\n\r\nNote that I wasn't quoting from me there. I'm still working with my 1st generation rMBP, that I'd happily upgrade if I'd be offered a new one. Just came across it in some recently closed issue. :wink:\r\n\r\n> Why I feel current output is a little misleading? `brew config` reports to me `8-core 64-bit haswell`. But in reality, my CPU only has four cores but eight hyperthreads.\r\n\r\nSame situation with my `quad-core 64-bit ivybridge`. It's actually a dual-core with hyper-threading. Haven't looked into whether there's some easily accessible information that allows extracting this detail, so that we can report the number of physical cores. `HOMEBREW_MAKE_JOBS=\"2\"` is the way I cope with this discrepancy, as otherwise my system becomes completely unusable during a longer compile if Homebrew tries to use as many cores as it believes there to be.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 313
	},
	{
		"id" : 223250773,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-02T10:12:05Z",
		"body" : "> Same situation with my quad-core 64-bit ivybridge. It's actually a dual-core with hyper-threading. Haven't looked into whether there's some easily accessible information that allows extracting this detail, so that we can report the number of physical cores.\r\n\r\nApparently it is readily available:\r\n\r\n```\r\n$ sysctl machdep.cpu.core_count machdep.cpu.thread_count\r\nmachdep.cpu.core_count: 2\r\nmachdep.cpu.thread_count: 4\r\n```\r\n\r\nHaven't researched how far back (in terms of OS X releases) this information is available, but we can always fall back on `hw.ncpu` that we're currently using of the above two are unavailable.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 313
	},
	{
		"id" : 223254085,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-02T10:27:42Z",
		"body" : "I think we could make it two methods `Hardware::CPU.cores` and `Hardware::CPU.threads`. And use `cores` to display `config`, and `threads` to control `jobs`.\r\n\r\nAlso from manpage:\r\n\r\n>  hw.ncpu\r\n             The number of cpus. This attribute is **deprecated** and it is recom-\r\n             mended that hw.logicalcpu, hw.logicalcpu_max, hw.physicalcpu, or\r\n             hw.physicalcpu_max be used instead.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 313
	},
	{
		"id" : 223255319,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-02T10:34:18Z",
		"body" : "I don't think we should use `machdep.cpu.core_count machdep.cpu.thread_count` The reason is from manpage:\r\n\r\n> CTL_MACHDEP\r\n     The set of variables defined is architecture dependent.  The following\r\n     variables are defined for the i386 architecture.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 313
	},
	{
		"id" : 223266177,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-02T11:33:43Z",
		"body" : "As someone likely using a `8-core 64-bit haswell` for the next couple of years at least, unless I lose control over my enjoyment of shiny things, I applaud the stylistic consistency of this PR üòâ. Though I agree it's not \"really\" an 8-core CPU, and Apple doesn't report it as such on the system report.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 313
	},
	{
		"id" : 223383518,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-02T18:40:42Z",
		"body" : ":+1: on fixing the physical vs virtual cores display discrepancy.\r\n\r\nYeah, let's use `hw.physicalcpu` and `hw.logicalcpu` and separate `cores`/`threads` methods like xucheng suggests. And maybe call it \"logical_cores\" or \"vcores\" instead of \"threads\", to avoid confusion with OS or program execution threads?\r\n\r\n> And use `cores` to display config, and `threads` to control jobs.\r\n\r\nMaybe we should be using the physical core count instead of the thread count to set `HOMEBREW_MAKE_JOBS`. Most of the parallelizable steps in a build are going to be CPU- and memory-bandwidth-bound, and not spending much time in I/O or idle. In that scenario, leaning on hyperthreading may not help much, and may in fact make overall throughput worse because you're incurring more context switches and CPU cache pressure. Hyperthreading is more appropriate when you have many threads which may sometimes be idle or blocked on I/O, but want to swap in quickly to respond to events (like a web server or database), or when responsiveness is more important than throughput, like in a GUI.\r\n\r\nI don't have any benchmarks to support that, but it shouldn't be hard to make some.\r\n\r\nThat should probably be in a separate PR, though, since it's a functional change and not just a display fix.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 313
	},
	{
		"id" : 223384451,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-02T18:43:52Z",
		"body" : ">  And maybe call it \"logical_cores\" or \"vcores\" instead of \"threads\", to avoid confusion with OS or program execution threads?\r\n\r\nWell, not \"vcores\", since that's terminology used in VM provisioning like in VMware Fusion, so that term is overloaded, too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 313
	},
	{
		"id" : 223562589,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-03T12:10:35Z",
		"body" : "Looks great, nice work üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 314
	},
	{
		"id" : 223562674,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-03T12:11:03Z",
		"body" : "Well spotted and nice change!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 315
	},
	{
		"id" : 223764437,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-04T16:23:06Z",
		"body" : "Thanks for your contribution to Homebrew! Without people like you submitting PRs we couldn't run this project. You rock!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 316
	},
	{
		"id" : 223790189,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-05T02:55:17Z",
		"body" : "> After upgrading to OS X 10.11, a few actions trigger a stacktrace\r\n\r\nCan you elaborate on this a bit, in terms of which commands cause the issue? ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 317
	},
	{
		"id" : 223805455,
		"user" : {
			"login" : "Blaisorblade"
		},
		"created_at" : "2016-06-05T10:38:45Z",
		"body" : "I got it both from `brew upgrade --cleanup`, after it completed `darcs` and at `gd`, and from `brew doctor`.\r\n\r\nBut the stack traces are slightly different for the two commands, I'm sorry; below there are more accurate ones (the one given was from `brew doctor`). Line numbers should be from commit d363ae53c08abd7e658a0124e7d3bb79d38a1f08.\r\n\r\nSome formulas did upgrade successfully. It turns out that one needs to invoke `f.keg_only_reason.valid?` on a formula `f` that is marked as keg-only for reason `:provided_until_xcode43` or `:provided_until_xcode5`.\r\n\r\nThe upgrade command checks recursive dependencies of the formula to upgrade, to ensure they're either keg-only or linked. So for me this only happened when upgrading `gd`‚Äîthat can trigger the above bug on any of `autoconf`, `automake`, `libtool` because they're all `:provided_until_xcode43`.\r\n\r\n```\r\n$ brew upgrade --cleanup\r\n==> Upgrading 13 outdated packages, with result:\r\ncabal-install 1.24.0.0_1, curl 7.49.1, darcs 2.12.0, gd 2.2.1_1, ghc 8.0.1, graphicsmagick 1.3.24, haskell-stack 1.1.2_3, imagemagick 6.9.4-7, homebrew/dupes/make 4.2, node 6.2.1, poppler 0.44.0, tmux 2.2, vim 7.4.1864_1\r\n[... successful upgrades...]\r\n==> Upgrading darcs\r\n==> Downloading https://homebrew.bintray.com/bottles/darcs-2.12.0.el_capitan.bottle.1.tar.gz\r\n######################################################################## 100.0%\r\n==> Pouring darcs-2.12.0.el_capitan.bottle.1.tar.gz\r\nüç∫  /usr/local/Cellar/darcs/2.12.0: 7 files, 46.2M\r\nRemoving: /usr/local/Cellar/darcs/2.10.3... (7 files, 30.4M)\r\nError: undefined method `<' for nil:NilClass\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/usr/local/Library/Homebrew/formula_support.rb:21:in `valid?'\r\n/usr/local/Library/Homebrew/formula.rb:851:in `keg_only?'\r\n/usr/local/Library/Homebrew/formula_installer.rb:148:in `block in check_install_sanity'\r\n/usr/local/Library/Homebrew/formula_installer.rb:147:in `select'\r\n/usr/local/Library/Homebrew/formula_installer.rb:147:in `check_install_sanity'\r\n/usr/local/Library/Homebrew/formula_installer.rb:124:in `prelude'\r\n/usr/local/Library/Homebrew/cmd/upgrade.rb:78:in `upgrade_formula'\r\n/usr/local/Library/Homebrew/cmd/upgrade.rb:56:in `block in upgrade'\r\n/usr/local/Library/Homebrew/cmd/upgrade.rb:55:in `each'\r\n/usr/local/Library/Homebrew/cmd/upgrade.rb:55:in `upgrade'\r\n/usr/local/Library/brew.rb:87:in `<main>'\r\n```\r\n\r\n```\r\n[...]\r\nWarning: No developer tools installed.\r\nInstall the Command Line Tools:\r\n  xcode-select --install\r\n[...]\r\nWarning: Your Xcode is configured with an invalid path.\r\nYou should change it to the correct path:\r\n  sudo xcode-select -switch /Developer\r\nError: undefined method `<' for nil:NilClass\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/usr/local/Library/Homebrew/formula_support.rb:21:in `valid?'\r\n/usr/local/Library/Homebrew/formula.rb:851:in `keg_only?'\r\n/usr/local/Library/Homebrew/diagnostic.rb:837:in `block in check_for_linked_keg_only_brews'\r\n/usr/local/Library/Homebrew/diagnostic.rb:836:in `select'\r\n/usr/local/Library/Homebrew/diagnostic.rb:836:in `check_for_linked_keg_only_brews'\r\n/usr/local/Library/Homebrew/cmd/doctor.rb:42:in `block in doctor'\r\n/usr/local/Library/Homebrew/cmd/doctor.rb:35:in `each'\r\n/usr/local/Library/Homebrew/cmd/doctor.rb:35:in `doctor'\r\n/usr/local/Library/brew.rb:87:in `<main>'\r\n```\r\n\r\n```\r\n$ brew irb\r\n> 'gd'.f.recursive_dependencies.map(&:to_formula).select do |f| f.keg_only_reason != nil end.map do |f| [f.name, f.keg_only_reason] end\r\n=> [[\"autoconf\", #<KegOnlyReason:0x007fb2093b3bd0 @reason=:provided_until_xcode43, @explanation=\"\">], [\"automake\", #<KegOnlyReason:0x007fb2093bb0d8 @reason=:provided_until_xcode43, @explanation=\"\">], [\"libtool\", #<KegOnlyReason:0x007fb2093c8fa8 @reason=:provided_until_xcode43, @explanation=\"\">], [\"gettext\", #<KegOnlyReason:0x007fb20889de30 @reason=:shadowed_by_osx, @explanation=\"OS X provides the BSD gettext library and some software gets confused if both are in the library path.\">], [\"libpng\", #<KegOnlyReason:0x007fb2093b9878 @reason=:provided_pre_mountain_lion, @explanation=\"\">], [\"freetype\", #<KegOnlyReason:0x007fb2093d03c0 @reason=:provided_pre_mountain_lion, @explanation=\"\">], [\"fontconfig\", #<KegOnlyReason:0x007fb208837888 @reason=:provided_pre_mountain_lion, @explanation=\"\">]]\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 317
	},
	{
		"id" : 223806310,
		"user" : {
			"login" : "Blaisorblade"
		},
		"created_at" : "2016-06-05T10:49:44Z",
		"body" : "BTW, since I was looking at this code ‚Äî I noticed it seems to run afoul of the \"deprecation\" in https://github.com/Homebrew/brew/blob/master/Library/Homebrew/os/mac/xcode.rb#L103-L107.\r\n```\r\nclass KegOnlyReason\r\n  # ...\r\n  def valid?\r\n    case @reason\r\n    # ...\r\n    when :provided_until_xcode43\r\n      MacOS::Xcode.version < \"4.3\"\r\n    when :provided_until_xcode5\r\n      MacOS::Xcode.version < \"5.0\"\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 317
	},
	{
		"id" : 223806386,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-05T10:51:36Z",
		"body" : "@Blaisorblade Thanks for the report and for the detailed and spot-on analysis! Fixed this in 25baaa61acc8743e69032233823a5ac33858d49e, so it should no longer fail for you after a `brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 317
	},
	{
		"id" : 223807846,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-05T11:26:20Z",
		"body" : "@UniqMartin You're on a roll of fixing things before I swing back online this week, thank you for picking this up ‚ù§Ô∏è.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 317
	},
	{
		"id" : 223808570,
		"user" : {
			"login" : "Blaisorblade"
		},
		"created_at" : "2016-06-05T11:43:55Z",
		"body" : "Thanks, that's better! But in case others have opinions, I have a nitpick on the fix here... But this nitpick only applies to old configurations, so before you look at it I wonder: do you actually support OS X before Mavericks? You have code but no testbot for it and I couldn't find info in docs.\r\n\r\nI ask because I do see a bug, but I'd rather delete the offending feature than spend your time explaining it.\r\n\r\nhttps://github.com/Homebrew/brew/commit/25baaa61acc8743e69032233823a5ac33858d49e#commitcomment-17745007",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 317
	},
	{
		"id" : 223808994,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-05T11:53:57Z",
		"body" : "> do you actually support OS X before Mavericks?\r\n\r\nWe haven't barred people from running Homebrew on 10.8 or lower but we no longer _officially_ support doing so and people encountering issues are expected to help fix them, essentially. `brew` [issues a warning](https://github.com/Homebrew/brew/blob/9e7b8c61a99c4d4c69da36f95759e375b7a4e116/Library/Homebrew/extend/os/mac/diagnostic.rb#L4-L22) on <10.8 and below.\r\n\r\nI don't think any maintainer is running less than 10.9 & as you've noted we've only the CI capacity to continuously test/support 3 OS X releases at a time, so our capacity for testing & fixing things for older OS X releases is fairly slim. CI is sadly very maintenance heavy even supporting \"only\" the three most recent releases.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 317
	},
	{
		"id" : 223809560,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-05T12:06:10Z",
		"body" : "Additionally, it doesn't make much sense to fully support older OS X releases as they have been abandoned by Apple, too. (But we don't try to actively rip out code so that Homebrew only runs with the OS X releases we and Apple officially support either.)\r\n\r\n>  ask because I do see a bug, but I'd rather delete the offending feature than <s>spend your time explaining it</s> EDIT have you spend time reading the issue.\r\n>\r\n> https://github.com/Homebrew/brew/commit/25baaa61acc8743e69032233823a5ac33858d49e#commitcomment-17745007\r\n\r\nThanks for taking the time to look into this more thoroughly! I think the remaining inaccuracy is negligible, as it really only affects legacy systems that don't have Xcode 4.3.x-4.6.x installed, but have the matching Command Line Tools on their systems. Furthermore, it only affects users that have the `cvs` formula installed and the only undesirable (?) effect would be that now our `cvs` is no longer keg-only and thus would take precedence over the one provided by the Command Line Tools. I think this is a sufficiently small attack surface that we should only act on this if prompted by a bug report where this actually creates an issue. Solving the original issue you reported here has a much greater impact and certainly for the good (since we no longer abort with a stack trace).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 317
	},
	{
		"id" : 223799942,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-05T08:30:02Z",
		"body" : "@MikeMcQuaid This addresses https://github.com/Homebrew/brew/issues/229",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 223800144,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-05T08:35:43Z",
		"body" : "I used this PR to generate https://github.com/Homebrew/homebrew-core/pull/1722. Dry-run output is\r\n```\r\n$ brew bump-formula-pr --dry-run --url=https://downloads.sourceforge.net/project/aide/devel/0.16b1/aide-0.16b1.tar.gz --sha256=35d99899d8b7cd723ac744b8cbd8d5f911ec22a4b568134dd0b6f7116d21b566 --devel aide\r\n==> brew update\r\n==> replace 'https://downloads.sourceforge.net/project/aide/devel/0.16a2/aide-0.16a2.tar.gz' with 'https://downloads.sourceforge.net/project/aide/devel/0.16b1/aide-0.16b1.tar.gz'\r\n==> replace 'b52451816bc85409ea09dc612e32823336f78438afd28248c252912ea8b91b87' with '35d99899d8b7cd723ac744b8cbd8d5f911ec22a4b568134dd0b6f7116d21b566'\r\n==> git checkout -b aide-0.16b1 origin/master\r\n==> git commit --no-edit --verbose --message='aide 0.16b1 (devel)' -- /usr/local/Library/Taps/homebrew/homebrew-core/Formula/aide.rb\r\n==> hub fork --no-remote\r\n==> hub fork\r\n==> hub fork (to read $HUB_REMOTE)\r\n==> git push $HUB_REMOTE aide-0.16b1:aide-0.16b1\r\n==> hub pull-request --browse -m 'aide 0.16b1 (devel)'\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 223803283,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-05T09:57:35Z",
		"body" : "@MikeMcQuaid PR refreshed to use a temp file.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 223803753,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-05T10:11:39Z",
		"body" : "üëç assuming StringIO was tried and doesn't work.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 223803865,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-05T10:14:32Z",
		"body" : "@MikeMcQuaid Would prefer to use StringIO, but Utils::Inreplace expects a path, and StringIO's .path is nil. I could certainly use something other than Utils::Inreplace but then the dry-run would be less realistic. Which approach do you prefer?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 223804145,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-05T10:21:53Z",
		"body" : "@ilovezfs I think it'd be reasonable to fix `Utils::Inreplace` so it can work with `StringIO`; just want to avoid fiddling with Formula loading stuff.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 223804191,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-05T10:22:53Z",
		"body" : "Sure, that sounds useful. I'll take a look.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 224850940,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-09T09:57:05Z",
		"body" : "@MikeMcQuaid PR refreshed to use StringIO.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 224859171,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-09T10:38:05Z",
		"body" : "Can you use `Formulary.from_contents` directly ?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 224859484,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-09T10:39:55Z",
		"body" : "@xu-cheng Possibly. I'll try that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 224865761,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-09T11:13:51Z",
		"body" : "@xu-cheng OK, updated to use `Formulary.from_contents`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 224871326,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-09T11:43:26Z",
		"body" : "@MikeMcQuaid @xu-cheng PR refreshed to avoid changing `inreplace` at all.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 225332498,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-11T02:42:04Z",
		"body" : "Any changes desired?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 225430721,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-12T12:51:52Z",
		"body" : "LGTM üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 225520267,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-13T08:38:12Z",
		"body" : "@UniqMartin Do you mind looking this over as well?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 225756843,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-14T01:34:04Z",
		"body" : "Probably not originally intended for this PR, but an automatic reset of the formula revision (if present) seems like something worth adding to a heavily automated process like this. Stripping lines that match\r\n\r\n```ruby\r\n/^  revision \\d+$/\r\n```\r\n\r\nwill probably work just fine in almost all cases.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 225757425,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-14T01:38:39Z",
		"body" : "Yeah I already have code for that locally ;)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 226446997,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-16T10:24:54Z",
		"body" : "@UniqMartin PR refreshed with changes discussed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 226461161,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-16T11:39:54Z",
		"body" : "@UniqMartin perhaps we should return to @MikeMcQuaid's idea to support `StringIO` class in `Utils::Inreplace`. Here's what that looked like when it was in the PR:\r\n```\r\ncommit 8de273e6067937731374ee41edf69ebf07cd039e\r\nAuthor: ilovezfs <ilovezfs@icloud.com>\r\nDate:   Thu Jun 9 02:54:08 2016 -0700\r\n\r\n    Utils::Inreplace: support StringIO\r\n    \r\n    This allows `inreplace` to accept paths or StringIOs or both.\r\n\r\ndiff --git a/Library/Homebrew/utils/inreplace.rb b/Library/Homebrew/utils/inreplace.rb\r\nindex ee47da4..20bfd1b 100644\r\n--- a/Library/Homebrew/utils/inreplace.rb\r\n+++ b/Library/Homebrew/utils/inreplace.rb\r\n@@ -15,26 +15,43 @@ module Utils\r\n     # HOMEBREW_PREFIX is available in the embedded patch.\r\n     # inreplace supports regular expressions.\r\n     # <pre>inreplace \"somefile.cfg\", /look[for]what?/, \"replace by #{bin}/tool\"</pre>\r\n-    def inreplace(paths, before = nil, after = nil)\r\n-      errors = {}\r\n \r\n-      Array(paths).each do |path|\r\n-        s = File.open(path, \"rb\", &:read).extend(StringInreplaceExtension)\r\n+    def inreplace_impl(input, before, after, errors, &block)\r\n+      file = input.class <= Pathname || input.class <= String\r\n+      s = file ?  File.open(input, \"rb\", &:read) : input.read\r\n+      s = s.extend(StringInreplaceExtension)\r\n \r\n-        if before.nil? && after.nil?\r\n-          yield s\r\n-        else\r\n-          after = after.to_s if Symbol === after\r\n-          s.gsub!(before, after)\r\n-        end\r\n+      if before.nil? && after.nil?\r\n+        yield s\r\n+      else\r\n+        after = after.to_s if Symbol === after\r\n+        s.gsub!(before, after)\r\n+      end\r\n+\r\n+      errors[input] = s.errors if s.errors.any?\r\n \r\n-        errors[path] = s.errors if s.errors.any?\r\n+      if file\r\n+        Pathname.new(input).atomic_write(s)\r\n+      else\r\n+        input.rewind\r\n+        input.write(s)\r\n+        input.rewind\r\n+      end\r\n+    end\r\n \r\n-        Pathname(path).atomic_write(s)\r\n+    def inreplace(input, before = nil, after = nil, &block)\r\n+      errors = {}\r\n+      if input.class <= Array\r\n+        input.each do |i|\r\n+          inreplace_impl(i, before, after, errors, &block)\r\n+        end\r\n+      else\r\n+        inreplace_impl(input, before, after, errors, &block)\r\n       end\r\n \r\n       raise InreplaceError.new(errors) if errors.any?\r\n     end\r\n     module_function :inreplace\r\n+    module_function :inreplace_impl\r\n   end\r\n end\r\n\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 226466399,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-16T12:07:44Z",
		"body" : "@ilovezfs Before I come forward with a new suggestion or more complaints about code duplication, let me summarize what I learned so far. Ideally, you'd like to have an implementation of `inreplace` that can everything it currently does and in addition:\r\n\r\n- Returns the resulting string to the caller after all substitutions have been applied.\r\n- Supports a dry-run/read-only mode where the resulting string is not written back to the input file.\r\n\r\nIs that correct? I believe `StringIO` will allow for even more flexibility, but is any of its flexibility needed or was it just a tool to achieve the above goals? Will `StringIO` enable additional usage patterns and do you see use cases for them? (Just trying to finally understand the problem and the constraints better.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 226471715,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-16T12:33:19Z",
		"body" : "@UniqMartin yes that all sounds accurate. Only tweak I'd make to what you said is that I wouldn't necessarily care about getting the string itself back if we could operate in a dry-run fashion on the contents of a formula without having to re-feed the Formulary a new copy of the contents, but otherwise, yes.\r\n\r\nI don't like the idea of inventing synthetic use cases whose necessity has not yet presented itself just to justify a new feature, but of course boneyard-formula-pr would use it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 226611273,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-16T20:56:10Z",
		"body" : "> Returns the resulting string to the caller after all substitutions have been applied.\r\n> Supports a dry-run/read-only mode where the resulting string is not written back to the input file.\r\n\r\nAt this point is it not worth just using `String#gsub`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 226611608,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-16T20:57:27Z",
		"body" : "@MikeMcQuaid It is: https://github.com/Homebrew/brew/pull/318/files#diff-bd1e2ccd6350a553602c33a962d60309R24",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 226612449,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-16T21:00:36Z",
		"body" : "@ilovezfs Sorry, I was commenting on @UniqMartin's `inreplace` comments.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 226614160,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-16T21:07:22Z",
		"body" : "@MikeMcQuaid In any case, I'm happy with this as it currently is written in the because the non-dry-run case uses standard `inreplace`. Yes, there are ten lines of \"duplication\" as @UniqMartin has pointed out, but it seems that's outweighed by the fact that the non-dry-run case gets to use the standard function. If, however, it is preferred to just do `formula.path.atomic_write(s) unless ARGV.dry_run?` and thereby avoid the duplication at the cost of not using the \"standard\" function in the non-dry-run case, I'm happy to change to that too, as it's what was already in the PR two iterations ago.\r\n\r\nIdeally, inreplace would natively support this sort of thing, but if that's not immediately obvious to all involved, I'll live with this functionality sitting off in a random helper function in an obscure dev-cmd as long as it gets the job done. :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 226615789,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-16T21:14:17Z",
		"body" : ":shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 226619373,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-16T21:28:57Z",
		"body" : "@MikeMcQuaid Done.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 226764201,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T13:07:48Z",
		"body" : "Thanks for taking the time to explain the use case and your thoughts behind using `inreplace` even at the cost of a few more lines. I think extending `inreplace` with a dry-run mode makes sense, even if the majority of use cases (formulae) won't need that. But that can happen in a separate PR and then applied to this command. In case the message got lost: Great work in this PR and definitely an improvement! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 318
	},
	{
		"id" : 223810596,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-05T12:31:11Z",
		"body" : "The first output is probably coming from Git as there's no such string in the Homebrew code. Do you have `HOMEBREW_VERBOSE=1` in your environment?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 319
	},
	{
		"id" : 223810634,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-05T12:32:10Z",
		"body" : "Nope, no HOMEBREW_VERBOSE.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 319
	},
	{
		"id" : 223810874,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-05T12:37:52Z",
		"body" : "```\r\nJosephs-MacBook-Pro:~ joe$ strings /usr/bin/git|grep Already\r\nAlready on '%s'\r\nAlready up-to-date.\r\nAlready up-to-date. Yeeah!\r\nAlready up-to-date!\r\nJosephs-MacBook-Pro:~ joe$ strings /usr/local/bin/git|grep Already\r\nAlready on '%s'\r\nAlready up-to-date.\r\nAlready up-to-date. Yeeah!\r\nAlready up-to-date!\r\nJosephs-MacBook-Pro:~ joe$ \r\n```\r\nSo yes, it's coming from git.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 319
	},
	{
		"id" : 223810995,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-05T12:41:18Z",
		"body" : "It seems to be caused by having an untracked file.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 319
	},
	{
		"id" : 223811310,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-05T12:49:24Z",
		"body" : "Also need to have HOMEBREW_DEVELOPER set.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 319
	},
	{
		"id" : 223811678,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-05T12:57:13Z",
		"body" : "It's `git stash pop -q`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 319
	},
	{
		"id" : 223817676,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-05T14:56:39Z",
		"body" : "Closed via #320 2cd81e50513f96a657454031e52fa4aec773ea97",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 319
	},
	{
		"id" : 223813116,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-05T13:28:59Z",
		"body" : "@UniqMartin this shuts it up.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 320
	},
	{
		"id" : 223815899,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-05T14:23:51Z",
		"body" : "@ilovezfs so even with `-q` it still prints this message to `stdout` regardless? ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 320
	},
	{
		"id" : 223815948,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-05T14:24:44Z",
		"body" : "Indeed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 320
	},
	{
		"id" : 223817085,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-05T14:46:54Z",
		"body" : "üëç if someone else can reproduce this; I can't.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 320
	},
	{
		"id" : 223817270,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-05T14:50:07Z",
		"body" : "@MikeMcQuaid It's straightforward to reproduce. The keyword is \"untracked.\"\r\n\r\n```\r\n$ mkdir git\r\n$ cd git\r\n$ git init\r\nInitialized empty Git repository in /Users/joe/git/.git/\r\n$ touch foo\r\n$ git add foo\r\n$ git commit -m foo\r\n[master (root-commit) 7a4f966] foo\r\n 1 file changed, 0 insertions(+), 0 deletions(-)\r\n create mode 100644 foo\r\n$ touch bar\r\n$ git stash save --include-untracked\r\nSaved working directory and index state WIP on master: 7a4f966 foo\r\nHEAD is now at 7a4f966 foo\r\n$ git stash pop -q\r\nAlready up-to-date!\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 320
	},
	{
		"id" : 223817408,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-05T14:52:30Z",
		"body" : "Got it now üëç from me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 320
	},
	{
		"id" : 223817421,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-05T14:52:49Z",
		"body" : "Cool.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 320
	},
	{
		"id" : 223891342,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-06T07:56:04Z",
		"body" : "Seems reasonable to me but will let other maintainers chime in.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 223941337,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-06T12:11:44Z",
		"body" : "This looks like an incomplete fix. Even after applying the patch, I'm getting:\r\n\r\n```\r\n$ brew deps --tree dpkg\r\ndpkg (required dependencies)\r\n‚îú‚îÄ‚îÄ xz\r\n‚îú‚îÄ‚îÄ pkg-config\r\n‚îú‚îÄ‚îÄ gnu-tar\r\n‚îî‚îÄ‚îÄ xz\r\n\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 223958470,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-06T13:28:22Z",
		"body" : "I think @xu-cheng has written useful comments on this problem before, but I could be misremembering which maintainer that was.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 223960890,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-06T13:37:31Z",
		"body" : "I believe this is what we want:\r\n```diff\r\ndiff --git a/Library/Homebrew/cmd/deps.rb b/Library/Homebrew/cmd/deps.rb\r\nindex 4c5dbb9..3965977 100644\r\n--- a/Library/Homebrew/cmd/deps.rb\r\n+++ b/Library/Homebrew/cmd/deps.rb\r\n@@ -125,13 +125,13 @@ module Homebrew\r\n       chr = i == max ? \"‚îî‚îÄ‚îÄ\" : \"‚îú‚îÄ‚îÄ\"\r\n       puts prefix + \"#{chr} :#{req.to_dependency.name}\"\r\n     end\r\n-    deps = f.deps.default\r\n+    deps = f.deps.default.map(&:name).uniq\r\n     max = deps.length - 1\r\n     deps.each_with_index do |dep, i|\r\n       chr = i == max ? \"‚îî‚îÄ‚îÄ\" : \"‚îú‚îÄ‚îÄ\"\r\n       prefix_ext = i == max ? \"    \" : \"‚îÇ   \"\r\n-      puts prefix + \"#{chr} #{dep.name}\"\r\n-      recursive_deps_tree(Formulary.factory(dep.name), prefix + prefix_ext)\r\n+      puts prefix + \"#{chr} #{dep}\"\r\n+      recursive_deps_tree(Formulary.factory(dep), prefix + prefix_ext)\r\n     end\r\n   end\r\n end\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 223962020,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-06-06T13:41:32Z",
		"body" : "nice! this patch works!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 223962762,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-06T13:44:12Z",
		"body" : "Or (to be close to our actual dependency resolution logic) just:\r\n\r\n```diff\r\ndiff --git i/Library/Homebrew/cmd/deps.rb w/Library/Homebrew/cmd/deps.rb\r\nindex 2faefb50..03a63050 100644\r\n--- i/Library/Homebrew/cmd/deps.rb\r\n+++ w/Library/Homebrew/cmd/deps.rb\r\n@@ -125,7 +125,7 @@ module Homebrew\r\n       chr = i == max ? \"‚îî‚îÄ‚îÄ\" : \"‚îú‚îÄ‚îÄ\"\r\n       puts prefix + \"#{chr} :#{req.to_dependency.name}\"\r\n     end\r\n-    deps = f.deps.default\r\n+    deps = Dependency.merge_repeats(f.deps.default)\r\n     max = deps.length - 1\r\n     deps.each_with_index do |dep, i|\r\n       chr = i == max ? \"‚îî‚îÄ‚îÄ\" : \"‚îú‚îÄ‚îÄ\"\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 223963836,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-06-06T13:47:52Z",
		"body" : "good one too. By the way, unlike `brew deps`,  `brew deps --tree` includes build dependencies:\r\n\r\n```\r\n$ brew deps dpkg\r\ngnu-tar\r\nxz\r\n\r\n$ brew deps dpkg --include-build\r\ngnu-tar\r\npkg-config\r\nxz\r\n\r\n$ brew deps --tree dpkg\r\ndpkg (required dependencies)\r\n‚îú‚îÄ‚îÄ xz\r\n‚îú‚îÄ‚îÄ pkg-config\r\n‚îî‚îÄ‚îÄ gnu-tar\r\n```\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 223964007,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-06-06T13:48:26Z",
		"body" : "also note the order of dependencies",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 224085720,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-06-06T20:56:20Z",
		"body" : "it would be good to add extra identifiers (i.e. `(build)`, `(runtime)`) next to package names unless (a not yet existing) `--plan` flag is specified.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 224096865,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-06T21:39:48Z",
		"body" : "`brew deps --tree` isn't in very good shape. It would be great if you would like to extend this PR to improve it and make it more consistent with the other modes of `brew deps` (if you haven't yet, have a look at `brew help deps`). In my opinion, things worth improving are:\r\n\r\n- Sort items by name. (They are in no particular order as you already noticed.)\r\n\r\n- Add support for the `--include-build`, `--include-optional`, and `--skip-recommended` options, so that it is able to display the same dependencies `brew deps` (without `--tree`) would be displaying. The only difference being that dependencies are shown as a tree instead of a flat list.\r\n\r\n- Annotate tree items so that one can see whether a dependency is a build-time dependency, an optional dependency, a recommended dependency, or a mandatory dependency. (Already noticed and something similar suggested by you.) No need to add an extra option for that, as `brew deps --tree` is only useful for humans and thus does not need to keep a stable/parseable output.\r\n\r\n- Maybe, but this is certainly up for debate, add an option that allows truncating the tree at a certain depth. E.g., `brew deps --tree --depth=2 <formula>` would only show the immediate dependencies of `<formula>` and the immediate dependencies of those first-level dependencies.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 224103456,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-06T22:06:51Z",
		"body" : "> Add support for the --include-build, --include-optional, and --skip-recommended options, so that it is able to display the same dependencies brew deps (without --tree) would be displaying.\r\n\r\nIt's probably a bit late to unsail this ship but I've been finding the `--include-x` syntax pretty clunky to use. Using `--without-x` and `--with-x` feels more natural, but I guess that's the price I pay for missing the original discussion.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 224104742,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-06T22:12:39Z",
		"body" : "> It's probably a bit late to unsail this ship but I've been finding the `--include-x` syntax pretty clunky to use. Using `--without-x` and `--with-x` feels more natural, but I guess that's the price I pay for missing the original discussion.\r\n\r\nI think we're well advised reserving the namespace of `--with-*` and `--without-*` arguments to formula options and actually avoid using them as arguments to influence the behavior of Homebrew commands (everything that isn't immediately tied to formula installation).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 232143648,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-07-12T18:52:56Z",
		"body" : "Was this solved in some other commit? Should this one be closed?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 232214087,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-12T23:40:31Z",
		"body" : "No, unless I'm overlooking something. Feel free to use the snippet I offered and test it a bit to see if there's something else that needs to be refined. And of course I would be more than happy if you were interested to do something about the things mentioned in https://github.com/Homebrew/brew/pull/321#issuecomment-224096865, either as part of this PR or in a separate follow-up PR.\r\n\r\nOr if you completely lost interest in this topic (I hope not), we should close the PR as in its current form it isn't ready to be merged yet.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 238815528,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:35:45Z",
		"body" : "> Or if you completely lost interest in this topic (I hope not), we should close the PR as in its current form it isn't ready to be merged yet.\r\n\r\nAny thoughts on this either way?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 239263750,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-08-11T19:21:37Z",
		"body" : "I'll work on this PR soon.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 244548187,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:02:09Z",
		"body" : "Gentle ping on this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 321
	},
	{
		"id" : 223868223,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-06-06T04:50:12Z",
		"body" : "1. This part of audit code is under `--strict`.\r\n2. Probable solution: change lines 922&mdash;924 of `Homebrew/cmd/audit.rb` to\r\n```\r\n      if line =~ %r{share(.+)#{Regexp.escape(formula.name)}[/'\"]}\r\n        problem \"Use pkgshare instead of (share#{$1}#{formula.name}\\\")\"\r\n      end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 322
	},
	{
		"id" : 223868467,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-06T04:52:53Z",
		"body" : "1. Right.\r\n2. Feel free to open a PR. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 322
	},
	{
		"id" : 223869004,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-06-06T04:59:31Z",
		"body" : "can open a PR but I'm concerned that `(.+)` can match a lot of things...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 322
	},
	{
		"id" : 223869102,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-06T05:00:50Z",
		"body" : "Then make it a more precise solution :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 322
	},
	{
		"id" : 224084995,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-06-06T20:53:54Z",
		"body" : "I think using non-word character makes most sense:\r\n```\r\n 922       if line =~ %r{share(\\W*)#{Regexp.escape(formula.name)}[/'\"]}\r\n 923         problem \"Use pkgshare instead of (share#{$1}#{formula.name}\\\")\"\r\n 924       end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 322
	},
	{
		"id" : 224093346,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-06T21:25:38Z",
		"body" : "> I think using non-word character makes most sense:\r\n\r\nThis seems too permissive and too restrictive at the same time. My proposed improvement is in #328.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 322
	},
	{
		"id" : 223896712,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-06T08:24:38Z",
		"body" : "I'm not sure I agree with the idea that we should be installing \"temporary\" symlinks as a crutch, but if we are, this will suppress unnecessary warnings triggered by them.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 323
	},
	{
		"id" : 223896931,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-06T08:25:37Z",
		"body" : "This PR can be tested with https://github.com/Homebrew/homebrew-core/pull/1732",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 323
	},
	{
		"id" : 223929035,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-06T11:04:21Z",
		"body" : "Closing since I think these symlinks are a bad idea anyway.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 323
	},
	{
		"id" : 223958800,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-06T13:29:40Z",
		"body" : "Seems fine but it'd be great if there was any way to do this with an environment variable instead.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 223959063,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-06T13:30:43Z",
		"body" : "Can we ignore global gitconfig complete?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 223961854,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-06T13:40:59Z",
		"body" : "> any way to do this with an environment variable instead.\r\n\r\nI'm not aware of an env variable to handle this, sadly. I'll hunt around to see if I can find one though.\r\n\r\n> Can we ignore global gitconfig complete?\r\n\r\n`git` prefers local configs first I believe, so we might be able to use variations of:\r\n\r\n```ruby\r\nsystem \"git\", \"init\"\r\nsystem \"git\", \"config\", \"--local\", \"commit.gpgsign\", \"false\"\r\n```\r\nin our tests. That might work.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 223962008,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-06T13:41:29Z",
		"body" : "Apparently `brew pull` borks pulling this. That's a bit strange. The `tests` themselves are passing at least, as they did locally.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 223962726,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-06T13:44:03Z",
		"body" : "> git prefers local configs first I believe, so we might be able to use variations of:\r\n\r\nI mean can we make `brew tests` always work regardless the content of your global gitconfig file. So it won't break for any other reason than gpg problem. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 223963072,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-06T13:45:14Z",
		"body" : "For example, set `HOME` to temp path?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 223963088,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-06T13:45:18Z",
		"body" : "We could hijack `HOME` as we do for formula installations, I guess, that seems like it could work. Wouldn't handle the situation where someone uses a `gitconfig` in say `/usr/local/etc` though or where `GITCONFIG` is set with an exact path, but the former is less common and we could `unset` the latter.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 223963764,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-06T13:47:37Z",
		"body" : ">  GIT_CONFIG_NOSYSTEM\r\n           Whether to skip reading settings from the system-wide\r\n           $(prefix)/etc/gitconfig file. This environment variable can be used\r\n           along with $HOME and $XDG_CONFIG_HOME to create a predictable\r\n           environment for a picky script, or you can set it temporarily to\r\n           avoid using a buggy /etc/gitconfig file while waiting for someone\r\n           with sufficient permissions to fix it.\r\n\r\nFrom manpage, this may help. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 223963889,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-06T13:48:05Z",
		"body" : "We suggested the same thing at the same time üòÑ. I'm happy to explore redirecting `HOME` and unsetting `GITCONFIG` instead for the whole set of `tests` if people are happy with that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 223964286,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-06T13:49:29Z",
		"body" : "> From manpage, this may help.\r\n\r\nNice, that sounds handy. So redirect `HOME`, unset `GITCONFIG` and set `GIT_CONFIG_NOSYSTEM`? Should make things more robust against user configuration.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 223968942,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-06T14:05:41Z",
		"body" : "> So redirect HOME, unset GITCONFIG and set GIT_CONFIG_NOSYSTEM? \r\n\r\nYep.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 223984561,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-06T14:57:13Z",
		"body" : "Making the environment more predictable as suggested by the Git man page seems like the best solution to me. If you address it like that for all of `brew tests`, please fold [this workaround in `cmd/tests.rb`](https://github.com/Homebrew/brew/blob/2cd81e50513f96a657454031e52fa4aec773ea97/Library/Homebrew/cmd/tests.rb#L15-L20) into your solution or at least put your solution next to it. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 223992494,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-06T15:23:00Z",
		"body" : "I'm not saying I'm an idiot but I just spent 15 minutes running straight into:\r\n\r\n```\r\n==> Using the sandbox\r\n==> Downloading file:///usr/local/Library/Homebrew/test/tarballs/testball-0.1.tbz\r\nError: Failed to download resource \"testball\"\r\nFile does not exist: /usr/local/Library/Homebrew/test/tarballs/testball-0.1.tbz\r\nF\r\n```\r\n\r\nAnd wondering how on earth changing `HOME` could cause that, before remembering due to some testing I did earlier on an unrelated issue I had `SSL_CERT_DIR` set in the `env` still, which causes _a lot_ of breakage in `tests`.\r\n\r\nWhoops. We warn about `SSL_CERT_DIR` in `brew doctor` at least I guess, so people shouldn't wander into that \"in the wild\" too much.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 224146595,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-07T02:17:30Z",
		"body" : "Pretty much have a PR ready here that's working locally, but want to test it a bit more in the morning. Currently working on 4 unique core PRs so my time has been split a fair bit.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 224198795,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-07T07:12:05Z",
		"body" : "> Currently working on 4 unique core PRs so my time has been split a fair bit.\r\n\r\n@DomT4 Gentle nudge there that context switching kills productivity so I'd advise never really having more than 1-2 on the go at once.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 224273402,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-07T13:03:16Z",
		"body" : "Yeah, I know, it's bad form. I try to keep up with no more than two but hit some snags with one of the PRs (the most important one, really) which has mandated that requiring more rewriting/testing before getting it üö¢ed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 224303808,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-07T14:45:56Z",
		"body" : "Closing in favour of https://github.com/Homebrew/brew/pull/332.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 324
	},
	{
		"id" : 223972343,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-06T14:17:52Z",
		"body" : "We don't really do package requests. Could you try and open a pull request? [This document](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md#how-to-open-a-homebrew-pull-request-and-get-it-merged) should help and I'm happy to walk you through anything else.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 325
	},
	{
		"id" : 224187717,
		"user" : {
			"login" : "timkofu"
		},
		"created_at" : "2016-06-07T06:05:33Z",
		"body" : "Alright. Starting to make a formula for it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 325
	},
	{
		"id" : 224199113,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-07T07:13:54Z",
		"body" : "@danielbayley Can I see your `cat ~/.gitconfig`, `cat /usr/local/.gitconfig` and if `/usr/local` is installed on or ever copied from an external drive, network share or another machine. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 326
	},
	{
		"id" : 224924464,
		"user" : {
			"login" : "danielbayley"
		},
		"created_at" : "2016-06-09T15:05:53Z",
		"body" : "@MikeMcQuaid Sure, although there is no `/usr/local/.gitconfig` and `/usr/local` has nothing to do with any external drives‚Ä¶ I think it's even excluded from Time Machine backups in fact.\r\n\r\n~~~ sh\r\n$ cat \"$XDG_CONFIG_HOME\"/git/config\r\n\r\n[user]\r\n[core]\r\n\tquotepath = false\r\n\tignorecase = false\r\n\teditor = atom -w\r\n[diff]\r\n\ttool = Kaleidoscope\r\n[difftool \"Kaleidoscope\"]\r\n\tcmd = ksdiff --partial-changeset --relative-path \\\"$MERGED\\\" -- \\\"$LOCAL\\\" \\\"$REMOTE\\\"\r\n[difftool]\r\n\tprompt = false\r\n[merge]\r\n\ttool = Kaleidoscope\r\n[mergetool \"Kaleidoscope\"]\r\n\tcmd = ksdiff --merge --output \\\"$MERGED\\\" --base \\\"$BASE\\\" -- \\\"$LOCAL\\\" --snapshot \\\"$REMOTE\\\" --snapshot\r\n\ttrustexitcode = true\r\n[mergetool]\r\n\tkeepBackup = false\r\n\tprompt = false\r\n[filter \"media\"]\r\n\trequired = true\r\n\tclean = git media clean %f\r\n\tsmudge = git media smudge %f\r\n[github]\r\n\ttoken = ***********************************\r\n\tusername = danielbayley\r\n[filter \"hawser\"]\r\n\tclean = git hawser clean %f\r\n\tsmudge = git hawser smudge %f\r\n\trequired = true\r\n[user]\r\n\tname = Daniel Bayley\r\n\temail = daniel.bayley@me.com\r\n[filter \"lfs\"]\r\n\tclean = git-lfs clean %f\r\n\tsmudge = git-lfs smudge %f\r\n\trequired = true\r\n[push]\r\n\tfollowTags = true\r\n\tdefault = simple\r\n[credential]\r\n\thelper = osxkeychain\r\n~~~\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 326
	},
	{
		"id" : 225431159,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-12T13:01:52Z",
		"body" : "I'm not really sure what's going on here but you'll note it's looking at the `CRLF` vs `LF` in binary files (which it should not be doing). Can you try to remove everything temporarily from your `\"$XDG_CONFIG_HOME\"/git/config` and also show the output of `/usr/local/.git/config`? thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 326
	},
	{
		"id" : 231581538,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-10T10:21:58Z",
		"body" : "Ping on Mike's request?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 326
	},
	{
		"id" : 231908952,
		"user" : {
			"login" : "danielbayley"
		},
		"created_at" : "2016-07-12T00:56:25Z",
		"body" : "@MikeMcQuaid Sorry‚Ä¶ so many issues! üòÑ\r\n\r\nOk, so I temporarily cleared out the global git config (`$XDG_CONFIG_HOME/git/config`) and then the following output as requested:\r\n~~~ sh\r\n$ cat /usr/local/.git/config\r\n\r\n[core]\r\n\trepositoryformatversion = 0\r\n\tfilemode = true\r\n\tbare = false\r\n\tlogallrefupdates = true\r\n\tignorecase = true\r\n\tprecomposeunicode = true\r\n\tautocrlf = false\r\n[remote \"origin\"]\r\n\turl = https://github.com/Homebrew/brew.git\r\n\tfetch = +refs/heads/*:refs/remotes/origin/*\r\n[homebrew]\r\n\tanalyticsmessage = true\r\n\tanalyticsuuid = ********-****-****-****-************\r\n~~~\r\nStill seeing the same issue even with the global git config empty‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 326
	},
	{
		"id" : 232308621,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T09:46:58Z",
		"body" : "@danielbayley Hmm, not sure what's going on here. Can you try a full reinstall? You can dump your package list with `brew bundle dump` and reinstall with `brew bundle`. Sorry!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 326
	},
	{
		"id" : 232353800,
		"user" : {
			"login" : "danielbayley"
		},
		"created_at" : "2016-07-13T13:25:39Z",
		"body" : "@MikeMcQuaid I was hoping to avoid that üòû\r\n\r\nBefore I do though, what about _cask_? Is there an equivalent command?\r\n\r\n I don‚Äôt want to potentially lose anything (including a couple of _taps_ IIRC).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 326
	},
	{
		"id" : 232354613,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T13:28:31Z",
		"body" : "`brew bundle dump` will dump all your Homebrew packages (with options), taps and Casks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 326
	},
	{
		"id" : 232772839,
		"user" : {
			"login" : "danielbayley"
		},
		"created_at" : "2016-07-14T19:51:24Z",
		"body" : "Ok, great! I will try a completely clean install üòü",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 326
	},
	{
		"id" : 233320339,
		"user" : {
			"login" : "danielbayley"
		},
		"created_at" : "2016-07-18T12:56:00Z",
		"body" : "So I completely wiped `/usr/local` and then reinstalled _all_ my formulas with `bundle install` from the `Brewfile` generated with `brew bundle dump`.\r\n\r\nSadly, even after all that I‚Äôm still having the same trouble:\r\n~~~ sh\r\n$ brew update\r\nwarning: CRLF will be replaced by LF in Library/Homebrew/test/fixtures/test.pcap.\r\nThe file will have its original line endings in your working directory.\r\nwarning: CRLF will be replaced by LF in Library/Homebrew/test/fixtures/test.png.\r\nThe file will have its original line endings in your working directory.\r\nwarning: CRLF will be replaced by LF in share/doc/homebrew/images/analytics.png.\r\nThe file will have its original line endings in your working directory.\r\nwarning: CRLF will be replaced by LF in share/doc/homebrew/images/brew-test-bot-failed-jenkins.png.\r\nThe file will have its original line endings in your working directory.\r\nwarning: CRLF will be replaced by LF in share/doc/homebrew/images/brew-test-bot-failed-pr.png. \r\n~~~\r\nüòû ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 326
	},
	{
		"id" : 233323063,
		"user" : {
			"login" : "danielbayley"
		},
		"created_at" : "2016-07-18T13:08:06Z",
		"body" : "Never mind; I finally fixed it! Turns out I had `*.* text eol=lf` in my global git attributes file that was causing this. üôà \r\n\r\n@MikeMcQuaid Thanks for helping to narrow it down at least. I thought it was something to do with the fact I sometimes contribute to Homebrew Cask and something had gone awry with git‚Ä¶\r\n\r\nAt least I learned about [mas](https://github.com/argon/mas) :)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 326
	},
	{
		"id" : 233367115,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-18T15:40:00Z",
		"body" : "@danielbayley Thanks for sharing the cause with us and glad you were able to solve the issue!\r\n\r\nHaving something like that in a global `gitattributes` file is indeed not the best idea. Such things should (in my understanding of Git) be limited to per-repository `.gitattributes` files and only when it makes sense for the particular project ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 326
	},
	{
		"id" : 224064963,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-06T19:39:18Z",
		"body" : "What is the output of `xcode-select --print-path` on the affected system?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 327
	},
	{
		"id" : 224073921,
		"user" : {
			"login" : "Blaisorblade"
		},
		"created_at" : "2016-06-06T20:13:18Z",
		"body" : "Whoops. I already did `xcode-select --install` to workaround the problem, and now I get:\r\n\r\n```\r\n$ xcode-select --print-path\r\n/Library/Developer/CommandLineTools\r\n```\r\n\r\nHowever, logs on the other computer where I had #317 (which was similarly setup ‚Äî they were originally cloned from each other) show that I got this output also *before* installing the command-line tools.\r\nIs there some code detecting whether CLT is installed that is getting fooled?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 327
	},
	{
		"id" : 224100713,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-06T21:54:48Z",
		"body" : "My theory for your specific scenario is that prior to the update, you had the Command Line Tools installed and `xcode-select --print-path` pointed to them. During the upgrade to 10.11, the Command Line Tools were wiped from your installation (as they are specific to an OS X release), but the link managed by `xcode-select` would continue pointing at the old location. `xcode-select --print-path` then continues to return this path without an error, even though the directory doesn't exist. It's only `xcrun` and the various wrappers in `/usr/bin` (like `/usr/bin/git`) that notice that the link is broken and then complain in exactly the way you have observed ‚Ä¶\r\n\r\nI guess the morale of the story, though I haven't looked at the code yet, would be to inspect all our code that relies on `xcode-select` (either directly or indirectly) and to make sure `xcode-select` not only returns a path, but that the returned path actually exists (maybe even check for the presence of a tool like `otool` that is expected to always be there).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 327
	},
	{
		"id" : 238813650,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:28:04Z",
		"body" : "This has been improved as much as it will be for now. If this is still broken for you: we'll accept PRs for this but we're not actively working on it at this time.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 327
	},
	{
		"id" : 224103980,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-06T22:09:19Z",
		"body" : "This sort of thing is why I've been trying to kill off the fight between `/` and `+` usage in formulae in favour of the former. Change here seems reasonable to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 328
	},
	{
		"id" : 224104635,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-06-06T22:12:11Z",
		"body" : "looks good. how about single quotes?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 328
	},
	{
		"id" : 224104950,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-06-06T22:13:30Z",
		"body" : " `\"` ~> `['\"]` should do the trick",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 328
	},
	{
		"id" : 224106184,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-06T22:18:37Z",
		"body" : "> This sort of thing is why I've been trying to kill off the fight between / and + usage in formulae in favour of the former.\r\n\r\nI think we have pretty much standardized on `/` for path concatenation in formulae by now. There are of course a few formulae that haven't been touched in ages or where that use has been overlooked, but eventually we'll get to a state where only `/` is used for that ‚Ä¶\r\n\r\n> how about single quotes?\r\n\r\nSingle quotes will be flagged separately (by a RuboCop style check), so once that has been corrected this check will trigger. Thus I don't think it's necessary to adjust this check for single quotes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 328
	},
	{
		"id" : 224107523,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-06-06T22:24:41Z",
		"body" : "> Single quotes will be flagged separately (by a RuboCop style check), so once that has been corrected this check will trigger. Thus I don't think it's necessary to adjust this check for single quotes.\r\n\r\nThen why did you leave it in the end of the expression `[/'\"]`?\r\n\r\nOne more note: should not whitespaces be forbidden before and after `/` while being allowed before and after `+`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 328
	},
	{
		"id" : 224113183,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-06T22:52:25Z",
		"body" : "> Then why did you leave it in the end of the expression `[/'\"]`?\r\n\r\nLaziness. :wink: Updated the PR to do proper matching of opening and closing quotes.\r\n\r\n> One more note: should not whitespaces be forbidden before and after `/` while being allowed before and after `+`?\r\n\r\nThat's a style rule checked by RuboCop, but unfortunately it cannot be customized to this degree. What we would like to have is that whitespace around binary operators is enforced for all operators except `/`. For `/` we need to allow both, as it can be used in a path concatenation (where we don't want spaces) and in a division (where we want to have surrounding spaces).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 328
	},
	{
		"id" : 224114525,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-06-06T23:00:05Z",
		"body" : "Well, here spaces should not be allowed, so maybe `(\\s*[\\+]\\s*|[\\/])` ?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 328
	},
	{
		"id" : 224117844,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-06T23:19:15Z",
		"body" : "> Well, here spaces should not be allowed, so maybe `(\\s*[\\+]\\s*|[\\/])`?\r\n\r\nNo. Given what you said above about the quotes, we want to catch this even if the user used spaces contrary to our preferred style. It's not like we're suggesting the user should be using spaces. (Also putting a single character into a character group in a regular expression, e.g. `[+]`, is somewhat silly.)\r\n\r\n> note: I used `irb` to test the matching conditions and it complained without backslashes.\r\n\r\nThe backslash isn't needed for `+` because we both used it in a character group, so there's no ambiguity with the `+` denoting repetition. It is not needed for `/` because we're using `%r{‚Ä¶}` instead if `/‚Ä¶/` for the regular expression. I tried with various Ruby versions and was unable to provoke a warning with my code.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 328
	},
	{
		"id" : 224122615,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-06-06T23:48:28Z",
		"body" : "Oh! I didn't know `(share / \"formula name\")` is actually a valid syntax... that's nice",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 328
	},
	{
		"id" : 224125687,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-07T00:08:15Z",
		"body" : "> I didn't know `(share / \"formula name\")` is actually a valid syntax (in `irb` similar syntax fails)...\r\n\r\nThe `Pathname#/` method was only added in Ruby 2.2, but there's [code in Homebrew](https://github.com/Homebrew/brew/blob/2cd81e50513f96a657454031e52fa4aec773ea97/Library/Homebrew/extend/pathname.rb#L356-L362) that makes it available to older Ruby versions, too. For experiments you'll want to use `brew irb` instead of plain `irb`, as that will give you access to the Homebrew internals (some stuff needs to be `require`d first) ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 328
	},
	{
		"id" : 224198678,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-07T07:11:27Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 328
	},
	{
		"id" : 224225883,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-07T09:20:19Z",
		"body" : "Seems reasonable to me but may want other @Homebrew/maintainers to give a üëç first.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 329
	},
	{
		"id" : 224226373,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-07T09:22:22Z",
		"body" : "@MikeMcQuaid See comments here: https://github.com/Homebrew/homebrew-core/pull/1764#issuecomment-224190992\r\n\r\nAlso, this is required if we're going to add patch-do blocks to resource blocks as was discussed in passing the other day.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 329
	},
	{
		"id" : 224227909,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-07T09:29:09Z",
		"body" : "> Also, this is required if we're going to add patch-do blocks to resource blocks as was discussed in passing the other day.\r\n\r\nCan you elaborate a bit more on that; not disagreeing.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 329
	},
	{
		"id" : 224227975,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-07T09:29:28Z",
		"body" : "> @MikeMcQuaid See comments here: Homebrew/homebrew-core#1764 (comment)\r\n\r\n@ilovezfs Makes sense to me üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 329
	},
	{
		"id" : 224230094,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-07T09:38:33Z",
		"body" : ">Can you elaborate a bit more on that; not disagreeing.\r\n\r\nPatch blocks imply patch urls, which are usually github.com/foo/bar/commit/12345678.patch or .diff, and not infrequently such a patch cannot be applied cleanly unless the invisible files are present since the corresponding commit has modified them. This is one of the reasons we sometimes have to use a source archive tarball temporarily instead of a release tarball. So it would be kind of lame for resource blocks' patch-do blocks to always puke if a patch happens to modify invisible file(s) with the only reason being that we deliberately left those files behind in the cache directory instead of unpacking them with everything else. Though I guess if we applied the patches after unpacking but before installing, it wouldn't matter one way or the other. I'm not sure if that's the ideal time to apply them or not. If it is, then this PR is irrelevant with respect to resource patching. If it's not, then it is relevant.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 329
	},
	{
		"id" : 224322250,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-07T15:43:04Z",
		"body" : ":+1: (Just have a suggestion for a possibly clearer implementation.)\r\n\r\nNice find! I imagine this might have caused us subtle issues in the past where essential `.*` files have been omitted during staging (though they were contained in a release tarball), causing the build system to behave strangely. I can also sympathize with the `patch`-related motivation, too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 329
	},
	{
		"id" : 224361320,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-07T17:54:53Z",
		"body" : "@UniqMartin yes that \"fancy\" Pathname approach does look better, assuming it's 100% identical.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 329
	},
	{
		"id" : 224363170,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-07T18:01:03Z",
		"body" : "PR refreshed.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 329
	},
	{
		"id" : 224373529,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-07T18:35:42Z",
		"body" : ":+1:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 329
	},
	{
		"id" : 224336770,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-07T16:30:00Z",
		"body" : "> `brew doctor` shows only warnings, no errors.\r\n\r\nCan you please post the output of `brew doctor`? All it outputs is just warnings, but one of them might be responsible for the behavior you are seeing.\r\n\r\n> When I try to update brew (I tried many times) I get the error:\r\n\r\nCan you please post the contents of `/usr/local/.git/config` and your own `.gitconfig` in your home directory? (Make sure the latter doesn't contain sensitive information you don't want to post publicly.) The update issue sounds like some Git configuration problem, so seeing those files would be really helpful.\r\n\r\nWhat happens if you do the following? (Please also post the output of these commands.)\r\n\r\n```\r\ncd \"$(brew --repository)\"\r\ngit remote -v\r\ngit fetch origin\r\n```\r\n\r\n> brew version is:\r\n>\r\n> ```\r\n> $ brew --version\r\n> Homebrew 0.9.8 (git revision dde20; last commit 2016-06-04)\r\n> Homebrew/homebrew-core (git revision d6ae; last commit 2016-06-07)\r\n> ```\r\n\r\nThis looks really suspicious. Something went wrong with the migration to the new Homebrew repository and you're stuck with Homebrew 0.9.8. It should be showing ‚ÄúHomebrew 0.9.9‚Äù, but the problem is probably related to the update issue (that might be related to a Git configuration problem).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 224499002,
		"user" : {
			"login" : "francwalter"
		},
		"created_at" : "2016-06-08T06:16:18Z",
		"body" : "[brew doctor result on gist](https://gist.github.com/francwalter/ee557ec19bba6f952aa6da339bba1df1)\r\n\r\nContent of **/usr/local/.git/config**:\r\n```\r\n[core]\r\n        repositoryformatversion = 0\r\n        filemode = true\r\n        bare = false\r\n        logallrefupdates = true\r\n        ignorecase = true\r\n        precomposeunicode = true\r\n        autocrlf = false\r\n[remote \"origin\"]\r\n        url = https://github.com/Homebrew/brew.git\r\n        fetch = +refs/heads/*:refs/remotes/origin/*\r\n```\r\nContent of **~/.gitconfig**:\r\n```\r\n[user]\r\n        name = franc walter\r\n        email = halfsecretemail@abc.de\r\n[filter \"lfs\"]\r\n        clean = git-lfs clean %f\r\n        smudge = git-lfs smudge %f\r\n        required = true\r\n```\r\n```\r\n$ git remote -v\r\norigin\thttps://github.com/Homebrew/brew.git (fetch)\r\norigin\thttps://github.com/Homebrew/brew.git (push)\r\n```\r\n```\r\n$ git fetch origin\r\nremote: Counting objects: 58144, done.\r\nremote: Compressing objects: 100% (15252/15252), done.\r\nremote: Total 58144 (delta 41619), reused 57743 (delta 41231), pack-reused 0\r\nReceiving objects: 100% (58144/58144), 8.58 MiB | 326.00 KiB/s, done.\r\nResolving deltas: 100% (41619/41619), completed with 390 local objects.\r\nFrom https://github.com/Homebrew/brew\r\n + dde20cd...21ca138 master     -> origin/master  (forced update)\r\n```\r\n\r\nThank for the help!\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 224620294,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-08T15:10:03Z",
		"body" : "You have quite a few warnings in your `brew doctor` output, but nothing that would explain the trouble. Your Git configuration also looks fine and manually fetching with `git fetch origin` seems to work. I suppose you haven't made any customizations to Homebrew itself, thus please try the following:\r\n\r\n```\r\ncd \"$(brew --repository)\"\r\ngit checkout --force -B master origin/master\r\n```\r\n\r\nIf this doesn't print an error, run `brew --version` first (it should be printing ‚ÄúHomebrew 0.9.9‚Äù) and then give `brew update` one more try. I'm somewhat hopeful it will work this time.\r\n\r\n----\r\n\r\nUnrelated to the problem at hand, but if you can, try to fix some of the warnings printed by `brew doctor`. E.g. the complaint about a duplicate `brew-cask` is because Homebrew Cask no longer needs to be installed as a formula. You can run `brew remove brew-cask` and `brew cask` will continue to work as usual.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 224641705,
		"user" : {
			"login" : "francwalter"
		},
		"created_at" : "2016-06-08T16:10:35Z",
		"body" : "OK, after:\r\n```\r\n$ git checkout --force -B master origin/master\r\nBranch master set up to track remote branch master from origin.\r\nReset branch 'master'\r\nFRANC-MACBOOK:local f$ brew --version\r\nHomebrew 0.9.9 (git revision 21ca; last commit 2016-06-07)\r\nHomebrew/homebrew-core (git revision d6ae; last commit 2016-06-07)\r\n```\r\nThis shows indeed 0.9.9! But then:\r\n```\r\n$ brew update\r\nerror: The requested URL returned error: 403 Forbidden while accessing https://github.com/Homebrew/homebrew-core/info/refs\r\n\r\nfatal: HTTP request failed\r\nerror: The requested URL returned error: 403 Forbidden while accessing https://github.com/caskroom/homebrew-cask/info/refs\r\n\r\nfatal: HTTP request failed\r\nerror: The requested URL returned error: 403 Forbidden while accessing https://github.com/Homebrew/brew.git/info/refs\r\n\r\nfatal: HTTP request failed\r\nError: Fetching /usr/local/Library/Taps/homebrew/homebrew-core failed!\r\nFetching /usr/local/Library/Taps/caskroom/homebrew-cask failed!\r\nFetching /usr/local failed!\r\n==> Homebrew has enabled anonymous aggregate user behaviour analytics\r\nRead the analytics documentation (and how to opt-out) here:\r\n  https://git.io/brew-analytics\r\n==> Cleaning up /Library/Caches/Homebrew...\r\nRemoving: /Library/Caches/Homebrew/ffmpeg-3.0.el_capitan.bottle.tar.gz... (18.2M)\r\nRemoving: /Library/Caches/Homebrew/openssl-1.0.2d_1.el_capitan.bottle.tar.gz... (3.5M)\r\nRemoving: /Library/Caches/Homebrew/openssl-1.0.2g.el_capitan.bottle.tar.gz... (3.6M)\r\nRemoving: /Library/Caches/Homebrew/x264-r2601.el_capitan.bottle.tar.gz... (1.3M)\r\n==> Migrating /Library/Caches/Homebrew to /Users/f/Library/Caches/Homebrew...\r\n==> Deleting /Library/Caches/Homebrew...\r\nError: Could not link caskroom/cask manpages to:\r\n  /usr/local/share/man/man1/brew-cask.1\r\n\r\nPlease delete these files and run `brew tap --repair`.\r\n```\r\nAgain I did brew update:\r\n```\r\n$ brew update\r\nerror: The requested URL returned error: 403 Forbidden while accessing https://github.com/Homebrew/homebrew-core/info/refs\r\n\r\nfatal: HTTP request failed\r\nerror: The requested URL returned error: 403 Forbidden while accessing https://github.com/Homebrew/brew.git/info/refs\r\n\r\nfatal: HTTP request failed\r\nerror: The requested URL returned error: 403 Forbidden while accessing https://github.com/caskroom/homebrew-cask/info/refs\r\n\r\nfatal: HTTP request failed\r\nError: Fetching /usr/local/Library/Taps/homebrew/homebrew-core failed!\r\nFetching /usr/local failed!\r\nFetching /usr/local/Library/Taps/caskroom/homebrew-cask failed!\r\nError: Could not link caskroom/cask manpages to:\r\n  /usr/local/share/man/man1/brew-cask.1\r\n\r\nPlease delete these files and run `brew tap --repair`.\r\n```\r\nAnd I dont know which file I should delete...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 224646043,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-08T16:24:27Z",
		"body" : "Alright, first to fix the errors relating to `/usr/local/share/man/man1/brew-cask.1`:\r\n\r\n```\r\nbrew remove --force brew-cask\r\nrm /usr/local/share/man/man1/brew-cask.1\r\nbrew tap --repair\r\n```\r\n\r\n----\r\n\r\nBack to the update issue, I'm not sure yet what is going on. Are you using a proxy that might be causing this issue? What is the output of `env | grep -i proxy`?\r\n\r\nPlease also try one more time with `brew update --verbose` and post the output of this command.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 224690936,
		"user" : {
			"login" : "francwalter"
		},
		"created_at" : "2016-06-08T18:50:28Z",
		"body" : "``` \r\n$ brew remove --force brew-cask\r\nUninstalling brew-cask... (2,731 files, 1.5M)\r\n```\r\ndid uninstall it.\r\n```\r\n$ rm /usr/local/share/man/man1/brew-cask.1\r\nrm: Entfernen von ‚Äû/usr/local/share/man/man1/brew-cask.1‚Äú nicht m√∂glich: No such file or directory\r\n```\r\nand then the brew-cask.1 file seems gone.\r\n\r\n```$ brew tap --repair``` and  ```env | grep -i proxy```  \r\ngives no result.\r\n\r\nBut the update keeps errors:\r\n```\r\n$ brew update --verbose\r\nerror: The requested URL returned error: 403 Forbidden while accessing https://github.com/Homebrew/brew.git/info/refs\r\n\r\nfatal: HTTP request failed\r\nerror: The requested URL returned error: 403 Forbidden while accessing https://github.com/Homebrew/homebrew-core/info/refs\r\n\r\nfatal: HTTP request failed\r\nerror: The requested URL returned error: 403 Forbidden while accessing https://github.com/caskroom/homebrew-cask/info/refs\r\n\r\nfatal: HTTP request failed\r\nError: Fetching /usr/local failed!\r\nFetching /usr/local/Library/Taps/homebrew/homebrew-core failed!\r\nFetching /usr/local/Library/Taps/caskroom/homebrew-cask failed!\r\nCurrent branch master is up to date.\r\nCurrent branch master is up to date.\r\nCurrent branch master is up to date.\r\n```\r\nWhy do I get this 403 Forbidden error? This seems unnormal!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 224970619,
		"user" : {
			"login" : "francwalter"
		},
		"created_at" : "2016-06-09T17:39:52Z",
		"body" : "I just don't see the cause of this error ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 225050544,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-09T22:53:45Z",
		"body" : "To be honest, I'm also running out of ideas right now. Can you give it one more try, but this time with the `--debug` flag, i.e. `brew update --debug --verbose` and post the output? Hopefully this provides a bit more information and helps me understand where it's actually failing and why ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 225086334,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-10T03:41:02Z",
		"body" : "And: What is the output of `which git` and `git --version`? Are you using the system `git` on or did you install it via Homebrew? If the latter, could you temporarily unlink it via `brew unlink git`, check that `git --version` returns something like `git version 2.7.4 (Apple Git-66)`, and then try `brew update` again?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 225089598,
		"user" : {
			"login" : "francwalter"
		},
		"created_at" : "2016-06-10T04:18:35Z",
		"body" : "[brew update --debug --verbose on gist](https://gist.github.com/francwalter/3173ab9e4758adbedabf03194b4bf971)\r\n```\r\n$ which git\r\n/usr/local/git/bin/git\r\n$ git --version\r\ngit version 2.4.3\r\n$ brew unlink git\r\nError: No such keg: /usr/local/Cellar/git\r\n```\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 225092450,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-10T04:49:03Z",
		"body" : "> ```\r\n> $ which git\r\n> /usr/local/git/bin/git\r\n> ```\r\n\r\nWhere does this custom Git installation come from? That's not the system Git and also not installed via Homebrew. Additionally, it is a bit outdated. Can you please try removing it from your `PATH` such that `which git` outputs `/usr/bin/git` and `git --version` outputs `git version 2.7.4 (Apple Git-66)`?\r\n\r\nYou might need to run `hash -r` if your shell prints an error message that is something like ‚ÄúNo such file or directory‚Äù or continues to invoke the old Git even after you changed the `PATH`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 225119954,
		"user" : {
			"login" : "francwalter"
		},
		"created_at" : "2016-06-10T08:13:00Z",
		"body" : "Hurra:\r\n```\r\n$ brew update\r\nUpdated Homebrew from 21ca138 to 11d47e8.\r\nUpdated 2 taps (caskroom/cask, homebrew/core).\r\n==> Updated Formulae\r\napp-engine-go-32       doctl                  gst-libav              hevea                  passenger              swiftlint            \r\napp-engine-go-64       emojify                gst-plugins-bad        homebank               postgrest              the_platinum_searcher\r\napp-engine-python      git                    gst-plugins-base       hunspell               psql2csv               vim                  \r\naws-sdk-cpp            gitup                  gst-plugins-good       imagemagick            qt5                    wakatime-cli         \r\nawscli                 gnutls                 gst-plugins-ugly       kobalt                 rack                   webkitgtk            \r\nbitrise                gor                    gst-python             loudmouth              redpen                 wimlib               \r\ncake                   groovy                 gst-validate           macosvpn               snappystream           wireshark            \r\ncgrep                  groovysdk              gstreamer              msgpack                stlink                 xonsh                \r\nchromedriver           gst-editing-services   headphones             nim                    swiftgen               zsh-navigation-tools \r\n==> Deleted Formulae\r\nmemo                                                                   powerline  \r\n```\r\nYou did it!\r\nYou exactly right, the git was wrong. Long ago I had (think from a previous OS) a very and too old git version, I vaguely remember, 1.6.5, and I updated to this at that time new 2.4.3, put it in the path and forgot it.\r\nNow I had three versions of git, still this old 1.6.5 in:\r\n**/usr/local/bin/git**, so I renamed it:\r\n```mv /usr/local/bin/git /usr/local/bin/git.1.6.5```\r\nand I put off the path the 2.4.3 and also renamed it:\r\n```mv /usr/local/git/bin/git /usr/local/git/bin/git.2.4.3```\r\nand now I get a true:\r\n```\r\n$ git --version\r\ngit version 2.7.4 (Apple Git-66)\r\n$ which git\r\n/usr/bin/git\r\n```\r\nThe system git now is acutal enough I hope, I mean more actual than my older stuff which I had needed, whyever (dont remember).\r\n\r\nThank you very much and for your patience!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 225217691,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-10T15:39:49Z",
		"body" : "You're welcome! I'm glad we were able to figure out the problem at last. üò∫",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 225310001,
		"user" : {
			"login" : "dougreese"
		},
		"created_at" : "2016-06-10T22:20:35Z",
		"body" : "Just to add another data point on this issue, I was facing a similar issue:\r\n\r\n```\r\n$ brew update\r\nerror: The requested URL returned error: 403 Forbidden while accessing\r\nhttps://github.com/Homebrew/homebrew-core/info/refs\r\n\r\nfatal: HTTP request failed\r\nError: Fetching /usr/local/Library/Taps/homebrew/homebrew-core failed!\r\n```\r\n\r\nDoing the update manually enables things to work again:\r\n\r\n```\r\ncd /usr/local/Library/Taps/homebrew/homebrew-core\r\ngit reset\r\ngit fetch\r\n```\r\n\r\nTurns out I had a version of git installed in `/usr/local/git/libexec/git-core/git`.  It was a pretty old version 1.6.4 (from a previous OS version, I'm guessing), and it was in my path but not before the default installed `/usr/bin/git`.  So the `brew update` command is using a different version of git than what is used when run from the command prompt manually.  Why is that?\r\n\r\nIt might be helpful if the output `brew config` contained the path to git and its version as well as the other tools being used.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 225317321,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-10T23:13:35Z",
		"body" : "Thanks for your input @dougreese and thank you for following up on my mail!\r\n\r\n> Turns out I had a version of git installed in `/usr/local/git/libexec/git-core/git`.  It was a pretty old version 1.6.4 (from a previous OS version, I'm guessing), and it was in my path but not before the default installed `/usr/bin/git`.  So the `brew update` command is using a different version of git than what is used when run from the command prompt manually.  Why is that?\r\n\r\nThe lookup logic is actually quite complicated and does a lot more than just looking in `PATH`:\r\n\r\n1. If `HOMEBREW_GIT` is set in the environment, try that.\r\n2. If `GIT` is set in the environment, try that.\r\n3. If the `git` formula is installed, try that.\r\n4. Iterate over all `git` binaries in `PATH`, but exclude `/usr/bin/git` because it might be a non-functional popup stub if neither Xcode nor Command Line Tools are installed.\r\n5. Try locating a `git` binary using `xcrun -find git`.\r\n6. Try using `git` from Xcode if it is installed in `/Applications/Xcode.app`.\r\n7. Try `/usr/bin/git` if all else failed and we're sure it's not a popup stub.\r\n8. Give up.\r\n\r\nThe first item from that list that matches wins. Now that I've written down the logic, I'm no longer sure this is what should be happening. You might just have helped uncover a bug (or misfeature) in our code. I'll ponder this a bit and check whether we want to improve on that. (In any case, this rundown should help understand why it was picking the ‚Äúwrong‚Äù Git on your machine, probably in step 4.)\r\n\r\n> It might be helpful if the output `brew config` contained the path to git and its version as well as the other tools being used.\r\n\r\nThis is a good suggestion; I agree! Homebrew relies quite a bit on a working Git installation, thus including things like its version and installation path would be valuable information in `brew config`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 225430965,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-12T12:57:58Z",
		"body" : "@UniqMartin sounds like we should follow that logic but also check the version to ensure that we only use a Git that's got a high enough version to e.g. handle GitHub's HTTPS.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 225457709,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-12T20:12:19Z",
		"body" : "@MikeMcQuaid I agree that a version check could be useful, at least in `brew doctor`. I think we can basically keep the lookup order, but we should really avoid shifting `/usr/bin` to the end of the list so that other custom paths in `PATH` get prioritized. I think this is very counterintuitive (as the above two cases illustrate nicely). I have experimented with a few modifications locally and will try to prepare a PR soon.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 238106834,
		"user" : {
			"login" : "jtwg"
		},
		"created_at" : "2016-08-07T20:36:37Z",
		"body" : "Found this thread and was able to resolve simply by updating Git.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 330
	},
	{
		"id" : 224341097,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-07T16:44:48Z",
		"body" : "It worked flawlessly for me when I pulled Homebrew/homebrew-boneyard#124. It didn't complain about bottles or non-standard commit subjects either.\r\n\r\nAll of this might be related to the issue that Homebrew/homebrew-boneyard#125 retained the `bottle do` block, something we normally drop when boneyarding (it wouldn't work after the move anyway). I guess that's something your `boneyard-formula-pr` doesn't do yet, though it should. :wink:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 331
	},
	{
		"id" : 224341547,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-07T16:46:28Z",
		"body" : "Interesting. I'll see if that's the cause, and add it to the PR if it is.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 331
	},
	{
		"id" : 225132094,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-10T09:12:30Z",
		"body" : "@UniqMartin Hmm still seems to do it even with bottle block dropped.\r\n```\r\nJosephs-MacBook-Pro:homebrew-boneyard joe$ brew pull https://github.com/Homebrew/homebrew-boneyard/pull/127\r\n==> Fetching patch \r\nPatch: https://github.com/Homebrew/homebrew-boneyard/pull/127.patch\r\n==> Applying patch\r\nApplying: visualnetkit: migrate from core\r\n==> Patch closes issue #127\r\nWarning: Nonstandard bump subject: visualnetkit: migrate from core\r\nWarning: Subject should be: visualnetkit 1.4 (new formula)\r\n==> Patch changed:\r\n visualnetkit.rb | 120 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n 1 file changed, 120 insertions(+)\r\nJosephs-MacBook-Pro:homebrew-boneyard joe$ \r\n\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 331
	},
	{
		"id" : 225134031,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-10T09:19:35Z",
		"body" : "Ah, the cause is the order. The message occurs if you do the brew pull + git push for the pr boneyarding it in core before doing the brew pull for the pr importing it into boneyard. It's tripping on `if old[:nonexistent]`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 331
	},
	{
		"id" : 225221128,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-10T15:52:14Z",
		"body" : "The order here is important. To be on the safe side, you always have to pull and push in the boneyard repository first, then pull and push in the originating repository. If you're doing it the other way round, you're opening up a (small) window where `tap_migrations.json` claims the formula has been migrated to the boneyard, but then `brew` taps the boneyard repository and the formula isn't actually there. Not a likely thing to happen, but not entirely impossible for a project of our size. It is also safer in the unlikely situation that you have a network outage between the pushes. (Actually, all of this applies to migrations in general.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 331
	},
	{
		"id" : 225222934,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-10T15:59:00Z",
		"body" : "That's all well and good but beside the point. The command is giving bogus output and this is a bug.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 331
	},
	{
		"id" : 225228216,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-10T16:19:14Z",
		"body" : "> That's all well and good but beside the point.\r\n\r\nNope. You mentioned that you're doing this the other way round, so I felt it important to explain this.\r\n\r\n> The command is giving bogus output and this is a bug.\r\n\r\nThe command is giving bogus output, but this is just a minor inconvenience. Migrations are infrequent compared to all other `brew pull` action, `brew pull` is a developer-facing command, and most boneyard migrations are happening via the GitHub website nowadays (‚Äúsquash merge‚Äù works just fine for cases with one formula per PR because there's no bottle involved).\r\n\r\nI don't consider this a bug because it does what you ask it to do and just prints a warning that happens to not apply (because it doesn't have enough information to do better and is optimized for the common case). Just like with `brew doctor` warnings these can be safely ignored if everything is as expected.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 331
	},
	{
		"id" : 225229254,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-10T16:23:34Z",
		"body" : "I think procedure is a poor excuse for a bug, and the order in which the ultimate `git push` commands should occur is a separate matter from what `brew pull` output is or is not correct.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 331
	},
	{
		"id" : 225234837,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-10T16:46:43Z",
		"body" : "Does it produce an invalid result? No, hence it's not a bug. Does it print a warning that *could* mean something is wrong, but in fact isn't? Yes, and tons of tools do this (including your favorite C compiler).\r\n\r\n**But let's make this more productive:** I don't think `brew pull` can learn just from the commit it is pulling that this must be a migration. What it could do is to silence the warning if one of two conditions apply:\r\n\r\n- The commit subject exactly matches `<formula>: migrate from <repository>` and the commit adds a formula file.\r\n- The commit subject exactly matches `<formula>: migrate to <repository>`, the commit removes a formula file, and the commit changes the contents of `tap_migrations.json` (or adds this file).\r\n\r\nIf desired, one could go one step further and add a `--migrate` option (similar to the `--bump` option) so the intention of a migration can be expressed very explicitly. This would then check that one of the two conditions from above is met, auto-correct the commit subject if necessary (just like `--bump`), and fail hard if the commit contents (added/modified/deleted files) don't match expectations.\r\n\r\nI think that's the way forward if the current behavior bothers you sufficiently (I'm getting the impression). And it shouldn't be too difficult to implement with the existing infrastructure in place.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 331
	},
	{
		"id" : 225236207,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-10T16:52:40Z",
		"body" : "Now we're on the same wavelength again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 331
	},
	{
		"id" : 224304065,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-07T14:46:47Z",
		"body" : "CC @xu-cheng @MikeMcQuaid @UniqMartin since you all commented on the prior PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 224459324,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-08T01:06:46Z",
		"body" : "Definitely a move in the right direction! Have added quite a few code comments that hopefully help to make the implementation better (and help to work around one major downside this currently has).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 224507431,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-08T07:09:45Z",
		"body" : "I don't feel super strongly about this but this feels pretty invasive and a lot of code to maintain just to prevent Git from reading a global configuration.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 224507480,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-08T07:10:03Z",
		"body" : "I'd prefer something that was scoped only to handle the Git case for now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 224607258,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-08T14:29:35Z",
		"body" : "Thanks for the comments so far. If I'm lucky with time I'll reply here properly this evening once I've pushed my other more time-sensitive core PR. Hopefully that gives Xu some time to review as well so I don't change things & we get into another loop where maintainers prefer different approaches üòÑ.\r\n\r\n> I'd prefer something that was scoped only to handle the Git case for now.\r\n\r\nThis pretty much _is_ scoped to handle the Git case for now.\r\n\r\nThere doesn't seem to be a native way to tell Git to simply ignore the global configuration file, and we need to handle the case where there's something \"problematic\" in the global configuration file so we avoid that by \"borrowing\" `HOME` & `git` moves onto the system configuration file and there's potentially problematic elements there as well, for example.\r\n\r\nIn terms of being a lot to maintain, there's something like ~12 new lines of code here. A lot of the rest of the diff is things needing indentation or placement changes, and code comments. It looks worse than it is, even whilst I accept ideally there'd be a simple env to tell `git` to not bother reading configuration files temporarily.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 224611701,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-08T14:43:22Z",
		"body" : "> There doesn't seem to be a native way to tell Git to simply ignore the global configuration file, and we need to handle the case where there's something \"problematic\" in the global configuration file so we avoid that by \"borrowing\" HOME & git moves onto the system configuration file and there's potentially problematic elements there as well, for example.\r\n\r\nYou can override it by setting `GITCONFIG` in the tests?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 238815459,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:35:30Z",
		"body" : "Seems this is an improvement so would be good to üö¢.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 238861584,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-10T13:10:52Z",
		"body" : "> Seems this is an improvement so would be good to üö¢.\r\n\r\nIf you meant the idea implemented in this PR, I fully agree! If you mean the PR as-is, I have to kindly ask that the discussed but unaddressed code comments be dealt with somehow.\r\n\r\nThe fact that this currently causes `bundle install` to run every single time is a blocker for me, as it destroys the ability to work on tests and run them locally without a network connection. All other things I'm happy to compromise on and volunteer to fix/improve them in a follow-up PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 238862531,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-10T13:14:22Z",
		"body" : "@UniqMartin Don't worry, I'll address your comments either today or tomorrow before this goes anywhere.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 238865212,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T13:24:39Z",
		"body" : "@UniqMartin I mean post-improvements.\r\n@DomT4 No rush on this; can wait until after GSoC.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 244548212,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:02:44Z",
		"body" : "@DomT4 Any thoughts here?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 244548327,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-03T14:04:48Z",
		"body" : "I'll carve some time out this afternoon to look at it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 244583499,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-04T04:19:09Z",
		"body" : "Should have this pushed for review today. Mostly working locally, but I haven't had time to chase down the last couple issues yet.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 250907145,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T11:22:03Z",
		"body" : "Passing on this for now. I think we should double-down on sanitising all environment variables rather than playing whack-a-mole with this. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 250907145,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T11:22:03Z",
		"body" : "Passing on this for now. I think we should double-down on sanitising all environment variables rather than playing whack-a-mole with this. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 250912959,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-10-01T13:38:27Z",
		"body" : "Yeah, I have a working copy locally but after your comments elsewhere about a more general solution I hadn't bothered pushing it for review. Just left the PR sitting in case we decided a more general solution wasn't immediately forthcoming.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 332
	},
	{
		"id" : 224452339,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-08T00:16:25Z",
		"body" : "> I still haven't figured out how to test [these lines of `cmd/log.rb`](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cmd/log.rb#L23-L25). Would it actually be OK to write a `/.git/shallow` file to both `HOMEBREW_REPOSITORY` and the `homebrew-core` tap and then test that the message is output?\r\n\r\nI suppose the cleanest solution would be to create a Git repository in a temporary location, then perform a shallow clone of this repository to the destination (`git clone --depth=1`) and then use `brew log` on that. I guess just creating the `.git/shallow` file might also work, but I'm not entirely sure whether that might confuse Git if the repository isn't actually a shallow clone.\r\n\r\nNo need to do this for both the main repository and a tap repository. Should be sufficient to do this just in the newly added test that deals with the tap repository, so that the original test covers the non-shallow behavior and the new test covers the shallow behavior. (Integration tests are fairly expensive compared to all other tests, significantly increasing the run time of `brew tests`. That's why I'd like to keep the number of those tests as small as possible.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 333
	},
	{
		"id" : 224475600,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-06-08T03:05:53Z",
		"body" : "Thanks @UniqMartin for all the feedback!\r\n\r\n> This new test is pretty complicated and involves some setup. I think it's worth moving it into a separate test method (maybe `test_log_with_formula`) to keep it cleanly separated from what is already here, especially since there doesn't seem to be any shared code.\r\n\r\nMakes sense -- I've moved the test to a method named `test_log_formula`, which seems consistent with the other integration test pairs (e.g., `test_cache` and `test_cache_formula`).\r\n\r\n> I suppose the cleanest solution would be to create a Git repository in a temporary location, then perform a shallow clone of this repository to the destination (git clone --depth=1) and then use brew log on that. I guess just creating the .git/shallow file might also work, but I'm not entirely sure whether that might confuse Git if the repository isn't actually a shallow clone.\r\n\r\nI tried making a local clone on my computer and received this warning:\r\n`warning: --depth is ignored in local clones; use file:// instead.`\r\n\r\nIt looks like `/.git/shallow` isn't written for local clones. Is `file://` a possible solution for this test?\r\n\r\n> No need to do this for both the main repository and a tap repository. Should be sufficient to do this just in the newly added test that deals with the tap repository, so that the original test covers the non-shallow behavior and the new test covers the shallow behavior. (Integration tests are fairly expensive compared to all other tests, significantly increasing the run time of `brew tests`. That's why I'd like to keep the number of those tests as small as possible.)\r\n\r\nMakes sense. Not sure why I was thinking about duplicating something that only needed to be tested once! The approach I'm taking this summer, though, is to focus on adding integration tests for the commands (instead of unit tests -- at least for now). Starting to worry that I'm not on the right track? üòü  Or are you just referring to eliminating redundancies in these tests?\r\n\r\nThis is what I have for the test at the moment:\r\n```\r\n  def test_log_formula\r\n    core_tap = CoreTap.new\r\n    formula_file = core_tap.formula_dir/\"testball.rb\"\r\n    formula_file.write <<-EOS.undent\r\n      class Testball < Formula\r\n        url \"https://example.com/testball-0.1.tar.gz\"\r\n      end\r\n    EOS\r\n\r\n    core_tap.path.cd do\r\n      shutup do\r\n        system \"git\", \"init\"\r\n        system \"git\", \"add\", \"--all\"\r\n        system \"git\", \"commit\", \"-m\", \"This is a test commit for Testball\"\r\n        system \"mkdir\", \"../homebrew-core-clone\"\r\n        system \"git\", \"clone\", \"--depth=1\", \".\", \"../homebrew-core-clone\"\r\n      end\r\n    end\r\n\r\n    (core_tap.path.dirname/\"homebrew-core-clone\").cd do\r\n      assert_match \"This is a test commit for Testball\", cmd(\"log\", \"testball\")\r\n    end\r\n  ensure\r\n    formula_file.unlink\r\n    (core_tap.path/\".git\").rmtree\r\n    (core_tap.path.dirname/\"homebrew-core-clone\").rmtree\r\n  end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 333
	},
	{
		"id" : 224510562,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-08T07:26:55Z",
		"body" : "> Makes sense. Not sure why I was thinking about duplicating something that only needed to be tested once! The approach I'm taking this summer, though, is to focus on adding integration tests for the commands (instead of unit tests -- at least for now). Starting to worry that I'm not on the right track? üòü Or are you just referring to eliminating redundancies in these tests?\r\n\r\n@eirinikos I think it's worth including this test but with future integration tests I think it's worth focusing down on two areas (in order):\r\n\r\n1. any commands listed in `brew help` or `man brew` that currently have no integration test\r\n2. after 1) is done: focus on the most commonly used user flows for integration tests e.g. around `brew install`, `brew install --with-options`, etc. to try and increase code coverage around our installation code (e.g. `formula_installer`)\r\n3. unit testing for classes with low code coverage but particularly focusing on `formula.rb` and `formula_installer.rb`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 333
	},
	{
		"id" : 224603460,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-08T14:18:04Z",
		"body" : "> The approach I'm taking this summer, though, is to focus on adding integration tests for the commands (instead of unit tests -- at least for now). Starting to worry that I'm not on the right track? üòü Or are you just referring to eliminating redundancies in these tests?\r\n\r\nYes, I was referring to the redundancies and what could be stated as ‚Äúmaximum impact with as few tests as necessary‚Äù. I wasn't questioning integration tests per se. Don't worry, you're still on the right track! üò∫ Other than that, Mike has laid out some good guidelines on where to focus your attention.\r\n\r\n> I tried making a local clone on my computer and received this warning:\r\n> `warning: --depth is ignored in local clones; use file:// instead.`\r\n> \r\n> It looks like `/.git/shallow` isn't written for local clones. Is `file://` a possible solution for this test?\r\n\r\nThe `file://` suggestion made by Git is good. I think you can work with that in the test. And you can always do some experimenting by creating and cloning Git repositories locally on your machine. I'm confident you'll figure this out. üí™\r\n\r\n> This is what I have for the test at the moment:\r\n\r\nYou're on the right track, but there are still some details to work out. That will be easier to do (using code comments) once you push the new code to this PR's branch.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 333
	},
	{
		"id" : 224703498,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-06-08T19:36:50Z",
		"body" : "> @eirinikos I think it's worth including this test but with future integration tests I think it's worth focusing down on two areas (in order):\r\n> \r\n> 1. any commands listed in `brew help` or `man brew` that currently have no integration test\r\n> 2. after 1) is done: focus on the most commonly used user flows for integration tests e.g. around `brew install`, `brew install --with-options`, etc. to try and increase code coverage around our installation code (e.g. `formula_installer`)\r\n> 3. unit testing for classes with low code coverage but particularly focusing on `formula.rb` and `formula_installer.rb`\r\n\r\nThanks @MikeMcQuaid.\r\n\r\n**Re: any commands listed in `brew help` or `man brew` that currently have no integration test**, it looks like `search`, `update`, and `man` are at the top of the heap.\r\n\r\nThere's no need to test alias commands, right? And `brew update` refers to `cmd/update.sh`, doesn't it? `update.sh` doesn't show up in the `.simplecov` report; is this because `.sh` files don't get tested?\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 333
	},
	{
		"id" : 224735620,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-08T21:33:17Z",
		"body" : "> There's no need to test alias commands, right?\r\n\r\nCorrect.\r\n\r\n> And `brew update` refers to `cmd/update.sh`, doesn't it?\r\n\r\nCorrect.\r\n\r\n> `update.sh` doesn't show up in the `.simplecov` report; is this because `.sh` files don't get tested?\r\n\r\nCorrect. The update is implemented as shell code (Bash, to be more precise; hence the `.sh` suffix). We currently cannot test this (though that's not completely impossible). The test framework we use is limited to Ruby code, thus only Ruby code shows up in the coverage report generated by SimpleCov.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 333
	},
	{
		"id" : 224788711,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-06-09T02:59:20Z",
		"body" : "> The file:// suggestion made by Git is good. I think you can work with that in the test. And you can always do some experimenting by creating and cloning Git repositories locally on your machine. I'm confident you'll figure this out. üí™\r\n\r\nThanks @UniqMartin for the vote of confidence! üòÇ  I spent some time in various circles of frustration today but managed to make progress. Then I squashed the wrong commit with `git rebase` and was unable to restore the correct commit (apparently I'd already overwritten the correct work in the \"correct\" commit)! Sorry for the mess; [commit 11b5467](https://github.com/Homebrew/brew/pull/333/commits/11b5467fe694d4a153023ef544a26840d4ed7a60) has both the correct message and work.\r\n\r\nI'm still not able to verify that the `opoo` message is output for the shallow clone!... The existence of `/.git/shallow` is verified, though... üòê ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 333
	},
	{
		"id" : 225430674,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-12T12:50:40Z",
		"body" : "Thanks again @eirinikos and @UniqMartin for the review.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 333
	},
	{
		"id" : 224433044,
		"user" : {
			"login" : "staticfloat"
		},
		"created_at" : "2016-06-07T22:23:55Z",
		"body" : "Comments addressed with a new squashed commit.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 334
	},
	{
		"id" : 224436258,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-07T22:40:25Z",
		"body" : "This looks like a good change to me and I'm definitely :+1: on this, but will give other maintainers a chance to voice their opinions before merging this.\r\n\r\nCan you provide the output of an affected `brew <some-command>` invocation before and after applying this change? Would be just nice to have for comparison and to document it here. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 334
	},
	{
		"id" : 224437448,
		"user" : {
			"login" : "staticfloat"
		},
		"created_at" : "2016-06-07T22:46:50Z",
		"body" : "Sure thing; I'll use `brew update` as an example.  Without this change:\r\n```\r\n$ brew update\r\nxcode-select: error: unable to get active developer directory, use `xcode-select --switch` to set one (or see `man xcode-select`)\r\nAlready up-to-date.\r\n$ \r\n```\r\nAs well as popping up the window shown in the screenshot above.\r\n\r\nWith this change:\r\n```\r\n$ brew update\r\nAlready up-to-date.\r\n$ \r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 334
	},
	{
		"id" : 224508277,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-08T07:14:26Z",
		"body" : "üëç from me. Nice work @staticfloat. Happy to squash any more of these cases as they come up, too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 334
	},
	{
		"id" : 224579531,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-08T12:53:50Z",
		"body" : "Merged. Nice improvement! Thank you for this contribution to Homebrew, @staticfloat! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 334
	},
	{
		"id" : 224452895,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-08T00:20:28Z",
		"body" : "What is the problem here? Have you tried hitting the RETURN (or ENTER) key on your keyboard as suggested by the last line of output? (The script waits for your input because it wants you to confirm the changes it is about to make.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 335
	},
	{
		"id" : 226701507,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-17T07:37:17Z",
		"body" : "I'm guessing this has been figured out. @phuocho please let us know if you're still stuck.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 335
	},
	{
		"id" : 224506887,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-08T07:06:42Z",
		"body" : "Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 336
	},
	{
		"id" : 224521795,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-08T08:23:17Z",
		"body" : "Closing in favour of https://github.com/Homebrew/homebrew-core/issues/1808",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 336
	},
	{
		"id" : 224532871,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-08T09:10:15Z",
		"body" : "Tiny comment otherwise üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 337
	},
	{
		"id" : 224533868,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-08T09:14:47Z",
		"body" : "Updated.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 337
	},
	{
		"id" : 224578266,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T12:48:28Z",
		"body" : "Am I misreading it, or is the default actually `/usr/local/Library/Locks`. I assume `/Library/Lock.d` is just a typo in the commit message?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 337
	},
	{
		"id" : 224578522,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-08T12:49:34Z",
		"body" : "Oops, forget to update commit message. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 337
	},
	{
		"id" : 225079735,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-10T02:32:42Z",
		"body" : "Minor comment: I'm finding the code a bit hard to follow, mostly as a result of the existing initialization logic.\r\n\r\nThere's a one-to-many relationship between a `HOMEBREW_REPOSITORY` and `HOMEBREW_PREFIX`es. (AFAIK.) It's not very clear from the code whether this lock dir is per-repo or per-prefix. I think this is because existing the `HOMEBREW_LIBRARY_PATH` is initialized from a source-relative path rather than one of `HOMEBREW_REPOSITORY` or `HOMEBREW_PREFIX`.\r\n\r\n```\r\nunless defined? HOMEBREW_LIBRARY_PATH\r\n  HOMEBREW_LIBRARY_PATH = Pathname.new(__FILE__).realpath.parent\r\nend\r\n```\r\n\r\nMy reading of this PR is that the locks are per-repo, not per-prefix, and I think that's how it should be. But it took a bit of reading and thinking to figure that out. Maybe we could rewrite `HOMEBREW_LIBRARY_PATH` to be in terms of `HOMEBREW_REPOSITORY` or `HOMEBREW_PREFIX` instead of  being relative to `config.rb`? Would fit well in this PR, imho.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 337
	},
	{
		"id" : 225099336,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-10T05:51:37Z",
		"body" : "@apjanke I think you may mistake the variable with `HOMEBREW_LIBRARY` and `HOMEBREW_LIBRARY_PATH`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 337
	},
	{
		"id" : 224533049,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-08T09:11:07Z",
		"body" : "I was thinking the other day about introducing head builds to CI but I'm unsure what I think about that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224533454,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T09:12:58Z",
		"body" : "I only noticed this was an issue because it causes `brew livecheck` to stop in its tracks and prompt for username and password when non-existent GitHub head urls are encountered, which the test above works around, but which, of course, also adds to the total run time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224534694,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T09:18:17Z",
		"body" : "By the way that's also the behavior that our end users get when they attempt to `brew install --HEAD foo` with a non-existent GitHub head url:\r\n```\r\niMac-TMP:~ joe$ brew install --HEAD aws-sdk-cpp\r\n==> Cloning https://github.com/awss/aws-sdk-cpp.git\r\nUpdating /Users/joe/Library/Caches/Homebrew/aws-sdk-cpp--git\r\nUsername for 'https://github.com': \r\nPassword for 'https://github.com': \r\nremote: Repository not found.\r\nfatal: Authentication failed for 'https://github.com/awss/aws-sdk-cpp.git/'\r\nError: Failed to download resource \"aws-sdk-cpp\"\r\nFailure while executing: git fetch -q origin\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224535452,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T09:21:28Z",
		"body" : "We could also use the curl workaround above to detect the issue just-in-time and report out a better error, and then wait for a user to open an issue about it, but audit seems a little more friendly. I guess we could also do both since there's no guarantee the url is still valid even though it passed audit during the last CI whenever that may have been (for example, `memo` which went entirely MIA).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224536413,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T09:25:27Z",
		"body" : "Regarding head builds for CI, I wonder if that would make sense as something to run asynchronously when CI resources are idle?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224587375,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-08T13:24:21Z",
		"body" : "> I was thinking the other day about introducing head builds to CI but I'm unsure what I think about that.\r\n\r\nI've considered this a few times and ended up at resounding \"Nope\" every time in my head. I'm not sure we have the capacity to handle it, a PR for a formula could pass Monday morning but fail Monday evening for reasons wholly unrelated to the actual change, and CI testing implies supporting upstream heads & fixing where necessary, which makes me nervous.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224588012,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-08T13:26:40Z",
		"body" : "> CI testing implies supporting upstream heads & fixing where necessary, which makes me nervous.\r\n\r\nI kinda think the opposite; it implies removing broken upstream heads but maybe @ilovezfs's method is enough for that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224589800,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-08T13:33:20Z",
		"body" : "My worry there is similar. It breaks Monday so I commit a removal of `head`, someone files a PR on Thursday adding a `head` line back and it's merged by another maintainer because none of us have the time to go hunting through formula histories to review every single PR, and then it breaks again Sunday. \r\n\r\nHEADs are just inherently unreliable and I think it does reduce our support burden to simply be able to turn around and say \"We don't spend time/resources supporting `head`, install it at your own risk\".\r\n\r\nI'm in favour of a simple `curl -I -L` ding on `head`s to check they still exist in the audit, but somewhat problematically that would seem to mandate `audit` can't run offline, or we tag the check with `@online` which means it doesn't get run regularly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224590488,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-08T13:35:56Z",
		"body" : "> I'm in favour of a simple curl -I -L ding on heads to check they still exist in the audit, but somewhat problematically that would seem to mandate audit can't run offline, or we tag the check with @online which means it doesn't get run regularly.\r\n\r\n@DomT4 I think it's fine to have it be part of `--online`.\r\n\r\n> HEADs are just inherently unreliable and I think it does reduce our support burden to simply be able to turn around and say \"We don't spend time/resources supporting head, install it at your own risk\".\r\n\r\nFeature request: print this message before attempting HEAD installation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224591692,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T13:40:05Z",
		"body" : ">or we tag the check with @online which means it doesn't get run regularly.\r\n\r\nWhy is that?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224593521,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-08T13:46:25Z",
		"body" : "> Feature request: print this message before attempting HEAD installation.\r\n\r\nShould be simple enough. I'll see if I can squeak a quick PR later tonight, working on other things at the moment üòÖ.\r\n\r\n> Why is that?\r\n\r\nIt contains things that we don't want run every time, like GitHub notability checks, which we don't \"care\" about if we've already accepted the formula.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224594265,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-08T13:49:03Z",
		"body" : "> It contains things that we don't want run every time, like GitHub notability checks, which we don't \"care\" about if we've already accepted the formula.\r\n\r\nWell, to be more specific, it contains things that require an internet connection to check.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224594673,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-08T13:50:23Z",
		"body" : "Oh, yeah, that too üôà. You're supposed to be able to run `audit` offline if desired. I need more coffee, apparently.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224596271,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T13:55:20Z",
		"body" : "It looks like `test-bot` uses `--online` so I'm wondering in what sense you meant \"not regularly.\" Are you referring to how often it's run? (If so, running every time it goes through test-bot seems regularly enough.) Or do you just mean not regularly as in \"the vanilla invocation without additional command line switches\"?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224596655,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-08T13:56:27Z",
		"body" : "`test-bot` only uses `--online` when the PR is handling a new formula. Otherwise a vanilla `brew audit` is executed instead.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224597018,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-08T13:57:35Z",
		"body" : "It's possible we should further break down `--online` into `--online` and `--new-submission` but we had enough trouble getting people to start using `--online` regularly so I'm not sure how much love anyone would have for the idea.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224597309,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-08T13:58:32Z",
		"body" : "There's `--online` and `--strict`; I think the latter implies `new submission` and we should run `brew audit --online` in the bot üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224597683,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-08T13:59:35Z",
		"body" : "We'd probably want to tweak `audit_github_repository` to make sure it only runs when both `--strict` and `--online` are passed then?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224598164,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-08T14:01:13Z",
		"body" : "I wonder if this should be handled via in-formula DSL instead of command line options.\r\nLike\r\n```\r\nindulgences => [:notability, :test]\r\n```\r\nNo, I'm not actually suggesting DSL literally named `indulgences`. ;)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 225430918,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-12T12:56:46Z",
		"body" : "> We'd probably want to tweak audit_github_repository to make sure it only runs when both --strict and --online are passed then?\r\n\r\n@DomT4 Yeh, probably. Definitely üëé on having this be a DSL in formulae themselves; like `brew doctor` the point of (most of) these warnings is to flag badly written formulae and we shouldn't really allow an opt-out. There are some what may perhaps only apply to official taps, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 338
	},
	{
		"id" : 224635231,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-08T15:53:15Z",
		"body" : "Nice find! Merged. Thank you for this contribution to Homebrew, @tkelman! :tada:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 339
	},
	{
		"id" : 225062327,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-10T00:08:51Z",
		"body" : "I find this to be a reasonable extension of the output, but I also find the placement extremely odd. One could argue it doesn't really matter as the output is mainly consumed by machines, but I would prefer if this was placed either before or after `{recommended,optional}_dependencies` instead of tearing apart this closely related pair.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 340
	},
	{
		"id" : 225077642,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-10T02:14:52Z",
		"body" : "Sounds reasonable to me too. This is a substantial aspect of dependencies, and the idea is for the JSON output to expose it all.\r\n\r\nIf we're going to have `build_` dependencies, I think we should also have `run_` dependencies here, which is another aspect of the axis this is exposing. And then your \"always\" dependencies are computable as a set diff from the main dependencies list vs the `build` and `run` dependencies, like your `required` dependencies are computable from the main list vs the `recommended` and `optional` dependencies.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 340
	},
	{
		"id" : 225090778,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-10T04:31:39Z",
		"body" : "> If we're going to have `build_` dependencies, I think we should also have `run_` dependencies here,\r\n\r\nI mildly disagree here. True dependencies (not requirements) of type `:run` are really just a way to shut up `brew audit` if stuff like `autoconf` is not tagged with `:build`, i.e. a way to say ‚ÄúI really want this to be a run-time dependency, not just a build-time dependency like in most cases‚Äù. Otherwise there are really only two temporal categories for dependencies:\r\n\r\n- `:build` dependencies: Required only during build. Can (and often will be) removed afterwards.\r\n- All other dependencies: Required both during build (typically for headers, static/dynamic libraries, etc.) and at run time (dynamic libraries, executables, etc.).\r\n  - While it could make sense, Homebrew currently doesn't have a notion of dependencies that don't need to be present during the build phase, but are required at run time. (Examples I can think of is everything with fairly loose coupling, e.g. when it is sufficient that a binary can be executed under a well-known name once the formula is already installed.)\r\n\r\nThus adding `build_dependencies` should be sufficient and together with `dependencies` provides all necessary information to categorize *all* dependencies (as seen from an outsider's perspective).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 340
	},
	{
		"id" : 225094653,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-10T05:12:00Z",
		"body" : "I'm gonna have to think about that for a bit.\r\n\r\nNo need to wait on my approval to merge this: a `run_dependencies` could always be added later without conflict, and the presence of `build_dependencies` doesn't block anything, AFAICT.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 340
	},
	{
		"id" : 225401389,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-12T00:04:20Z",
		"body" : "Seems like this change hasn't sparked a huge controversy. üòÄ\r\n\r\nMerged in e9cc2a5d88da6d1719763a26c1fc455c51e2c3db. Thank you for another contribution to Homebrew, @staticfloat! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 340
	},
	{
		"id" : 225096213,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-10T05:26:35Z",
		"body" : "Do we have a way to check whether this fixes this for good? Maybe create a test file with all valid Unicode code points (as UTF-8) and a few invalid bytes for good measure and then make the test bot output it? Or maybe check with the library that is used by Jenkins directly? (You're the Java guru here, so maybe the latter is easier to do and more practical.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 341
	},
	{
		"id" : 225097188,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-10T05:34:30Z",
		"body" : "Writing a test that produces \"all valid\" or \"known invalid\" Unicode characters kind of begs the question of whether we know what's valid in the first place. And we want to guard against build scripts that may be producing arbitrary output. Maybe we should write a test that just spews all byte values 0-FF as part of its output, and see if that passes? And maybe add some tricky multibyte sequences if we want to be clever?\r\n\r\nI don't think we should bother checking with the Jenkins libraries directly: we don't care about the implementation here, what we want is to make sure that any output, or as close to that as possible, passes all the way to the results page. `brew test-bot`'s job is to produce valid XML as output, not care about the consumer's implementation (in theory). So let's ignore the Jenkins implementation, and just put noise into the test inputs, if we're going to test this. (And if we find stuff that's valid XML but still breaks Jenkins, report it as an upstream bug to Jenkins.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 341
	},
	{
		"id" : 225108694,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-10T07:04:31Z",
		"body" : "> Maybe we should write a test that just spews all byte values 0-FF as part of its output, and see if that passes?\r\n\r\nI believe I did this in #342 (see [build 600](http://bot.brew.sh/job/Brew%20Pull%20Requests/600/)) but somehow this didn't cause any XML validity issues. Does the test make sense? Did I miss something obvious?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 341
	},
	{
		"id" : 225317237,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-10T23:12:53Z",
		"body" : "Looks like it [did fail on Mavericks](http://bot.brew.sh/job/Brew%20Pull%20Requests/600/version=mavericks/) due to XML validity, similar to how czmq was only erroring on Mavericks. Here's what I see for the Mavericks build, which is what we'd expect of the test was working.\r\n\r\n```\r\nFailed to read test report file /Users/brew/Jenkins/pr-brew/version/mavericks/brew-test-bot.xml\r\norg.dom4j.DocumentException: Error on line 105 of document file:///Users/brew/Jenkins/pr-brew/version/mavericks/brew-test-bot.xml : An invalid XML character (Unicode: 0x1) was found in the CDATA section. Nested exception: An invalid XML character (Unicode: 0x1) was found in the CDATA section.\r\n\tat org.dom4j.io.SAXReader.read(SAXReader.java:482)\r\n\tat org.dom4j.io.SAXReader.read(SAXReader.java:264)\r\n\tat hudson.tasks.junit.SuiteResult.parse(SuiteResult.java:126)\r\n\tat hudson.tasks.junit.TestResult.parse(TestResult.java:301)\r\n```\r\n\r\nWhich I think makes sense: the Yosemite and El Cap test bots are running Ruby 2.0, which has encodings so it's using the correct XML sanitization regex; it's only under Ruby 1.8.x that `test-bot` is falling back to the per-byte deletion whose code is missing some of the invalid characters.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 341
	},
	{
		"id" : 225320345,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-10T23:39:50Z",
		"body" : "You're right! I completely overlooked this. Not sure what I was checking but I obviously missed this `[failed-to-read]` report. Cherry-picked your commit from this PR into my branch and pushed, if you fix works as intended, this should still yield a test failure (because my dummy test always fails), but shouldn't cause a read error. We'll find out very soon (see [build 602](http://bot.brew.sh/job/Brew%20Pull%20Requests/602/)) ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 341
	},
	{
		"id" : 225323294,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-11T00:07:32Z",
		"body" : "Never mind. This of course cannot be tested like that because it's not using your fixed `test-bot.rb` in the CI run which is by design. (Not sure if we can easily test this fix upfront without merging this PR.)\r\n\r\nBut I'm optimistic this fixes the problem and if it doesn't, it at least improves the situation considerably. If you were to ask me: Just go ahead and merge this as-is and we'll improve on this later (if necessary).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 341
	},
	{
		"id" : 225430972,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-12T12:58:07Z",
		"body" : "> Just go ahead and merge this as-is and we'll improve on this later (if necessary).\r\n\r\nüëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 341
	},
	{
		"id" : 225561898,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-13T12:03:08Z",
		"body" : "Merged, and kicked off a `czmq` test rerun, which should exercise the new code.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 341
	},
	{
		"id" : 225562918,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-13T12:07:53Z",
		"body" : "...and the `czmq` [test rerun is green](http://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/3072/). So this at least fixed that issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 341
	},
	{
		"id" : 225568318,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-13T12:35:19Z",
		"body" : "[Build 605](http://bot.brew.sh/job/Brew%20Pull%20Requests/605/) of PR #342 also completed successfully in the sense that there was no read error. Thanks! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 341
	},
	{
		"id" : 225430940,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-12T12:57:18Z",
		"body" : "Are you sure this is a Homebrew issue and not an issue with this installed manually outside Homebrew too?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 343
	},
	{
		"id" : 226381484,
		"user" : {
			"login" : "frobibar"
		},
		"created_at" : "2016-06-16T03:48:21Z",
		"body" : "Just downloaded android-sdk_r24.4.1-macosx.zip, same outcome, sorry about that will close this.\r\n\r\nI've raised it here as well:\r\nhttps://code.google.com/p/android/issues/detail?id=210223&q=fabio&colspec=ID%20Status%20Priority%20Owner%20Summary%20Stars%20Reporter%20Opened",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 343
	},
	{
		"id" : 227020877,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-19T21:18:20Z",
		"body" : "> Installing applications with this method yields clearer and much less code than the current method. If we trust pip to talk to pypi, we can pass a list of requirements instead of using resources, which means even less code.\r\n\r\nMy concern is the code becomes pretty opaque as to what's actually being done. There's a reason we e.g. deprecated `Formula` subclasses previously and it was because `Formula` are designed to be as human readable as machine readable and this feels like a bit of a step back to me.\r\n\r\n> Virtualenvs do not have either problem.\r\n\r\nI do agree that virtualenvs do feel like The Right Solution for this, though.\r\n\r\n> Where is the right place to store the virtualenv package's URL and hash? Should we just package a tarball in the Homebrew repository?\r\n\r\nI'm not sure I understand what the virtualenv package is and what it would contain.\r\n\r\n> Should this happen in Language::Python or is it more logical to write a Formula#python_virtualenv method that handles the hackery?\r\n\r\nI think splitting out `Formula#system` into a utility function would be best.\r\n\r\n> Can we usefully define tests for this class? (An example would be helpful!)\r\n\r\nAt least integration tests.\r\n\r\n> Does this belong in the evolution process?\r\n\r\nProbably but given there's a sample implementation here I'm happy to discuss code over abstract concepts üòâ \r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 227022600,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-19T21:53:34Z",
		"body" : ">> Where is the right place to store the virtualenv package's URL and hash? Should we just package a tarball in the Homebrew repository?\r\n> I'm not sure I understand what the virtualenv package is and what it would contain.\r\n\r\nBy \"the virtualenv package\" I mean that the virtualenv tool isn't part of the Python stdlib so we need to download it from Pypi at some point. The current implementation instantiates a Resource using a URL and checksum defined as constants on the Python module to fetch (and cache) it as needed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 227033292,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-20T01:25:56Z",
		"body" : "> My concern is the code becomes pretty opaque as to what's actually being done.\r\n\r\nI've tried to clean up the API a little bit; the only public methods now are `pip_install!(target)` and `pip_install_and_link_scripts!(target, destination)`. `target` is passed through to pip unless `target` is a Resource, in which case it is staged and installed. This way, it's at least explicit that we're invoking pip. Does that help?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 227065545,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-20T07:08:45Z",
		"body" : "> > If we trust pip to talk to pypi, we can pass a list of requirements instead of using resources, which means even less code.\r\n\r\nCan you elaborate a bit more on what this might look like, even just with sample code that doesn't work yet?\r\n\r\n> By \"the virtualenv package\" I mean that the virtualenv tool isn't part of the Python stdlib so we need to download it from Pypi at some point. The current implementation instantiates a Resource using a URL and checksum defined as constants on the Python module to fetch (and cache) it as needed.\r\n\r\nFeels like this should probably be a dedicated formula and/or `depends_on :virtualenv`. It'll otherwise produce pretty confusing errors when the download fails.\r\n\r\n> ETA: @xu-cheng favors adding a keg-only virtualenv formula but I think this is an internal implementation detail and would prefer that it did not contaminate brew search, especially since it's hard to deliver a useful virtualenv formula since people expect it to be bound to their favorite Python.\r\n\r\nTo me that at least points towards a `depends_on :virtualenv`.\r\n\r\n> pip_install!(target) and pip_install_and_link_scripts!(target, destination). target is passed through to pip unless target is a Resource, in which case it is staged and installed. This way, it's at least explicit that we're invoking pip. Does that help?\r\n\r\nI like `pip_install` (but don't think we need the `!`) but `pip_install_and_link_scripts` feels like it's doing a bit too much.\r\n\r\n--\r\n\r\nAs a general concern with this: we've done Clever Stuff with Python before and I just want us to be extra sure that this code is readable, maintainable and works well with system Python, Homebrew's Python and a random external Pythons (or at least just picks one and works well with that).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 227151999,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-20T14:06:43Z",
		"body" : ">> If we trust pip to talk to pypi, we can pass a list of requirements instead of using resources, which means even less code.\r\n\r\n> Can you elaborate a bit more on what this might look like, even just with sample code that doesn't work yet?\r\n\r\nI've updated the example gist to reflect the current API: https://gist.github.com/tdsmith/f9e83e9ce66fa19349ac711b1c170462\r\n\r\nOne note is that `pip` normally maintains a per-user download cache but I expect that our $HOME munging will render that ineffective. We can manually set a cache directory to some persistent location, e.g. a child of HOMEBREW_CACHE or whatever it is, if the sandbox allows. NB the pip cache doesn't provide integrity guarantees, so allowing writes to the cache would permit malicious code to poison the cache on CI, so we'd want to explicitly clean that up in test-bot.\r\n\r\n> `pip_install_and_link_scripts` feels like it's doing a bit too much\r\n\r\nThe problem this tries to solve is that we don't want to link scripts for everything that's installed into the virtualenv: some dependencies of the application we're installing will also have scripts. These will all end up in the same place in the virtualenv. That means (I think) we want a method which can keep track of which scripts exist before and after we install our \"real\" application, and take care of linking the scripts we want into `bin`. The gist above shows the difference in action.\r\n\r\n> Feels like this should probably be a dedicated formula and/or depends_on :virtualenv. It'll otherwise produce pretty confusing errors when the download fails.\r\n\r\nI think it's not so bad: https://gist.github.com/b18ee6238915542d9df2ae0816f94ff0 -- I'll work on a branch for `:virtualenv` but I think it's also nice that in the current implementation virtualenv is cached exactly once for however many formulas need it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 227153809,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-20T14:12:59Z",
		"body" : "> NB the pip cache doesn't provide integrity guarantees, so allowing writes to the cache would permit malicious code to poison the cache on CI, so we'd want to explicitly clean that up in test-bot.\r\n\r\nDoes that mean it doesn't use checksums? If so, I think we'd need to pass on that.\r\n\r\n> I've updated the example gist to reflect the current API: https://gist.github.com/tdsmith/f9e83e9ce66fa19349ac711b1c170462\r\n\r\nI think it would be nicer to have that take a hash of packages and their versions but it's otherwise pretty appealing in the simplicity.\r\n\r\n> That means (I think) we want a method which can keep track of which scripts exist before and after we install our \"real\" application, and take care of linking the scripts we want into bin. The gist above shows the difference in action.\r\n\r\nIs there a way to have the virtualenv use different directories for this, by any chance?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 227162220,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-20T14:41:12Z",
		"body" : ">>  NB the pip cache doesn't provide integrity guarantees, so allowing writes to the cache would permit malicious code to poison the cache on CI, so we'd want to explicitly clean that up in test-bot.\r\n\r\n> Does that mean it doesn't use checksums? If so, I think we'd need to pass on that.\r\n\r\npip doesn't re-verify the checksums against PyPI before using the cache; any local list of checksums would have the same trust properties as the cache.\r\n\r\n> I think it would be nicer to have that take a hash of packages and their versions but it's otherwise pretty appealing in the simplicity.\r\n\r\nI like that, too.\r\n\r\n> Is there a way to have the virtualenv use different directories for this, by any chance?\r\n\r\nWelllllll I think so; pip doesn't support this directly (yet) but setuptools does and pip lets you pass through options to the underlying `setup.py` like `--install-option=\"--install-scripts=/foo/bar\"`. I'm not confident that actually works with virtualenvs but I can test. This is potentially not future-proof since there's work afoot to allow pip to work with build systems other than distutils/setuptools and this breaks the encapsulation around the underlying build systems. It probably works fine for everything that exists today.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 227162322,
		"user" : {
			"login" : "dstufft"
		},
		"created_at" : "2016-06-20T14:41:31Z",
		"body" : "Couple thoughts here:\r\n\r\n* You can use ``venv`` on Python 3 which involves far less black magic and hackery than ``virtualenv`` does, and is less likely to break on patch upgrades because while ``virtualenv`` involves copying parts of the stdlib into the virtual environment, ``venv`` does not.\r\n\r\n* It's a little hacky, but you can bake hashes for the entire dependency tree into a ``requirements.txt`` file (possibly dynamically written?) so that you still get the same \"verify sha256 hashes\" that Homebrew itself gets and protect yourself from both a malicious cache and a malicious PyPI.\r\n\r\n* You probably don't want to diff the installed scripts because you're going to then link scripts from dependencies too, not just the top level. With a little bit of Python code you should be able to extract the names of all of the scripts for a particular package using the ``pkg_resources`` library.\r\n\r\n* Also, specific to ``virtualenv`` and not ``venv``, what version of Python you have virtualenv installed with only really matters for what the default is for creating virtual environments. Beyond that you can easily create a virtual environment for different Pythons by using the ``-p`` flag. I think Debian has switched their ``virtualenv`` over to using Python3 but patched it so the default remains 2.x.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 227163103,
		"user" : {
			"login" : "dstufft"
		},
		"created_at" : "2016-06-20T14:44:07Z",
		"body" : "> pip doesn't re-verify the checksums against PyPI before using the cache; any local list of checksums would have the same trust properties as the cache.\r\n\r\nSmall bit of clarification, pip *does* verify hashes from PyPI, but that's also a HTTP request and thus can be cached in the same HTTP cache that package downloads themselves are in. So if someone is in a position to insert malicious packages into that cache they are also in a position to insert malicious checksums into that cache.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 227165639,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-20T14:51:55Z",
		"body" : "Thanks for taking a look, Donald! One note; diffing installed scripts should be reliable since we're sending --no-deps to all of the pip invocations to force the dependency tree to be fixed in the formula.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 227166081,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-20T14:53:16Z",
		"body" : "Added a note about pip_install! accepting version specs as text strings vs Ruby hashes to my comment above.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 227166335,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-20T14:54:03Z",
		"body" : "> pip doesn't re-verify the checksums against PyPI before using the cache; any local list of checksums would have the same trust properties as the cache.\r\n\r\nWhen are the checksums ever verified; initial download? If that's the case it seems probably fine. After all, most people have the same write permissions on their cache and `Library/Taps` where the resource checksums are.\r\n\r\n> Welllllll I think so; pip doesn't support this directly (yet) but setuptools does and pip lets you pass through options to the underlying setup.py like --install-option=\"--install-scripts=/foo/bar\". I'm not confident that actually works with virtualenvs but I can test. This is potentially not future-proof since there's work afoot to allow pip to work with build systems other than distutils/setuptools and this breaks the encapsulation around the underlying build systems. It probably works fine for everything that exists today.\r\n\r\nI guess I'm curious how e.g. Debian and friends handle this situation as presumably they also don't want to dump _everything_ in `/usr/bin`? Regardless, your current solution seems fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 227166784,
		"user" : {
			"login" : "dstufft"
		},
		"created_at" : "2016-06-20T14:55:24Z",
		"body" : "> diffing installed scripts should be reliable since we're sending --no-deps to all of the pip invocations to force the dependency tree to be fixed in the formula.\r\n\r\nOh, are you doing a multi-stage install then to install the \"real\" thing separately from it's dependencies? Diffing scripts will work in that case, I just assumed you were doing a single shot and done.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 227167592,
		"user" : {
			"login" : "dstufft"
		},
		"created_at" : "2016-06-20T14:57:59Z",
		"body" : "> When are the checksums ever verified; initial download? If that's the case it seems probably fine. After all, most people have the same write permissions on their cache and Library/Taps where the resource checksums are.\r\n\r\npip *always* verifies hashes if given, but those come from PyPI via HTTPS the same as package downloads. Our download cache is a transparent HTTP cache that doesn't speak anything pip or packaging specific. There's been an idea in my head about refusing to cache things that fail the initial hash check but that's mostly about preventing getting into a broken cache situation rather than anything security related, since (unless you're using the explicit ``--hash`` feature new in pip 8) the only hashes we have are the ones that come via PyPI that are also routed via this same caching mechanism.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 227183295,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-20T15:49:48Z",
		"body" : "> I guess I'm curious how e.g. Debian and friends handle this situation as presumably they also don't want to dump _everything_ in /usr/bin? Regardless, your current solution seems fine.\r\n\r\nI think they mostly don't. For system packages, Debian et al have scores of `python-foo` packages to handle dependencies and dpkg doesn't run pip at install time; distros can use their control files to curate whatever they want in /usr/bin. The distributions don't affect what happens when a user runs pip on their own.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 229254803,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-29T04:41:51Z",
		"body" : "Pushed changes that reflect @xu-cheng's wish that I use `Formula#resource` instead of instantiating a `Resource` directly, and removed the exclamation marks on the Virtualenv methods.\r\n\r\nSample formula is here: https://gist.github.com/89f443db881a0cb0e8f3cc9fd0a57f82\r\n\r\nI am not confident that I did a reasonable thing by creating the `Virtualenv` module. Does it make sense to have a `Virtualenv` class inside a `Virtualenv` module? I need to retain some state and I don't think I want to add instance variables to the `Formula` the module is being mixed in to so I think this is necessary. @xu-cheng, what do you think?\r\n\r\nI thought about it for a few minutes and I don't know how to implement `depends_on :virtualenv` ‚Äî i.e., a Requirement that sets up a(n ephemeral or permanent) `virtualenv` installation without a Formula on disk. I do regret hard-coding a URL and hash into core code. Since at that point we're effectively vendoring a remote resource, my favorite alternative is just vendoring the virtualenv tarball directly into the Homebrew/brew repository.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 229290998,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-29T08:29:31Z",
		"body" : "> Does it make sense to have a Virtualenv class inside a Virtualenv module? \r\n\r\nI think it's fine. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 229498866,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-29T21:45:45Z",
		"body" : "Want to do more detailed review on this but won't be able to probably until next week. Just a request if this can hold off until then, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 229500810,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-29T21:53:50Z",
		"body" : "Sounds good.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 230392372,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-05T05:47:48Z",
		"body" : "I decided I liked it. https://gist.github.com/89f443db881a0cb0e8f3cc9fd0a57f82 has been updated with the new link_scripts method.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 344
	},
	{
		"id" : 231313468,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-08T09:15:39Z",
		"body" : "> I'm not trying to be difficult but I don't follow. The issue is that packages make breaking changes. Mitigating the acknowledged risk of pulling in breaking changes by fixing dependency versions is a fix for a concrete and acknowledged issue.\r\n\r\nOk, to be more specific: which packages have made these breaking changes? When? What were the breakages?\r\n\r\n> Because Homebrew will be slower to pick up new releases, it becomes more likely that something will become broken between our updates.\r\n\r\nAgain, I'd like to see some specific evidence that this is/was the case.\r\n\r\n> You'd guard a pip_install invocation with a build.with test, which is no different than how you would treat a resource. I think these are not very common in our corpus of existing Python applications.\r\n\r\nCould you provide some sample code? How would `pip freeze` work in that case?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231314553,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-08T09:21:09Z",
		"body" : "> It's nice to have super-succinct formulae and let the language-specific package manager do all the work, but this massively depends on the language of choice and isn't a universal solution.\r\n\r\nOn the flip side it's worth restating: why do we set higher standards for Python packages than the official Python package manager does?\r\n\r\n> We have to be honest here and acknowledge that Tim is doing most of the Python work (as far as I have observed). If Python formulae start to fall apart, it will be because he's not around. And it won't make a difference if we have a long list of resource blocks, a dump of a frozen requirements.txt used by the code in this PR, or any other language-specific wrapper like install_cabal_package. They are all equally easy or hard to understand (they always require domain-specific knowledge of the package management in the respective language ecosystem). I'm confident that Tim will follow up with documentation for this solution in a timely manner, making it at least as approachable as any other existing or proposed solution.\r\n\r\nTim is currently doing most of the Python work, I agree. Previously we had a similar situation and that maintainer left the project and I had to step up and fix all the underdocumented and overcomplicated code. Tim could get hit by a bus tomorrow (I hope he doesn't!) and if that happens then we need the project to be at a stage where multiple (maybe even all) maintainers are in a position to understand the code and how it works. At this point all maintainers understand resource blocks whereas it's not clear to me that anyone except Tim understands the workflow for using this new functionality.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231332655,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T10:57:57Z",
		"body" : "Putting aside the fixed vs. unfixed versions of requirements conversation, the net functional differences of this PR vs. the status quo seem to be a) the output is coming from pip freeze instead of from poet b) the checksum is no longer required c) the URL is no longer required d) the version is now explicitly required instead of the URL.\r\n\r\na) is a regression because it means the relevant information in the formula file moves from being expressed entirely in the DSL into a heredoc\r\nb) is a regression because it reduces security unless we were to record and verify all pypi checksums in a database that's checked into git\r\nc) is a minor feature, but only because the current URLs are more than 80 characters, which means the versions at the end wrap to the next line rather annoyingly\r\nd) is a wash because the version still has to be derived from elsewhere just like the URL\r\n\r\nI think (a) is a show stopper and (c) makes me just want shorter URLs, and then shrug.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231379768,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-08T14:48:41Z",
		"body" : ">> I'm not trying to be difficult but I don't follow. The issue is that packages make breaking changes. Mitigating the acknowledged risk of pulling in breaking changes by fixing dependency versions is a fix for a concrete and acknowledged issue.\r\n\r\n> Ok, to be more specific: which packages have made these breaking changes? When? What were the breakages?\r\n\r\nI am not in a position to observe these breakages because Homebrew's current practice pins the dependency graph and therefore does not allow them. Similarly, community best practice is to pin dependencies for deployment so that this breakage is not encountered. As a trivial existence proof, I've encountered scientific tools that did not work with current versions of scipy. Absence of evidence is not evidence of absence; you can imagine conducting some sort of artificial experiment but this is difficult to observe in the wild exactly because people deploy mitigation strategies.\r\n\r\n> > Because Homebrew will be slower to pick up new releases, it becomes more likely that something will become broken between our updates.\r\n\r\n> Again, I'd like to see some specific evidence that this is/was the case.\r\n\r\nCan you explain what sort of evidence you'd find convincing? This is difficult to observe in the wild for the same reasons noted above; similarly, we would not observe it in Homebrew because our current practices do not allow it to be observed.\r\n\r\n> > You'd guard a pip_install invocation with a build.with test, which is no different than how you would treat a resource. I think these are not very common in our corpus of existing Python applications.\r\n\r\n> Could you provide some sample code? How would pip freeze work in that case?\r\n\r\nToday, you'd run `poet` twice. After running it normally, you'd install the extra dependencies with `pip`, observe which additional formulas pip installed, and then run `poet` against that list to generate the resource blocks for the option.\r\n\r\nIf we allow pip to download packages, we instead run `pip freeze` before and after installing the optional dependencies and observe which packages exist only in the latter output.\r\n\r\n```ruby\r\noption \"with-spam\", \"Build with spam support\"\r\n...\r\nvirtualenv(libexec) do |venv|\r\n  pip_install package_set_1\r\n  pip_install package_set_2 if build.with? \"spam\"\r\nend\r\n```\r\n\r\nWith resources:\r\n```ruby\r\n[several resource blocks]\r\n...\r\nvirtualenv(libexec) do |venv|\r\n  %w[r1 r2 r3 r4 r5] each do |r|\r\n    pip_install resource(r)\r\n  end\r\n  if build.with? \"spam\"\r\n    %w[spam r6].each do |r|\r\n      pip_install resource(r)\r\n    end\r\n  end\r\nend\r\n``` \r\n\r\n> > It's nice to have super-succinct formulae and let the language-specific package manager do all the work, but this massively depends on the language of choice and isn't a universal solution.\r\n\r\n> On the flip side it's worth restating: why do we set higher standards for Python packages than the official Python package manager does?\r\n\r\nIt may not have been clear that I was responding to this point, but my response above was that a) Homebrew formulas breaking reflects on Homebrew, not anyone else, and b) when it breaks in Homebrew, I have to fix it. In the worst case where authors fail to pin dependencies, `pip install some_formula==some_old_version`, which has the same effect of fixing one package while allowing the rest of the dependency graph to float, is morally similar to installing a Homebrew formula from git history, and we know that's a bad experience.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231381306,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-08T14:54:25Z",
		"body" : "@ilovezfs said:\r\n> Putting aside the fixed vs. unfixed versions of requirements conversation, the net functional differences of this PR vs. the status quo seem to be a) the output is coming from pip freeze instead of from poet b) the checksum is no longer required c) the URL is no longer required d) the version is now explicitly required instead of the URL.\r\n\r\nAlthough these are all nice outcomes, I think using virtualenvs for isolation is the more important aspect of this PR. If these objections prove fatal, we can continue using resources to declare and fetch dependencies, although we miss an opportunity to make the formulas nicer.\r\n\r\nI also want to push back on the phrase \"reduce security\" because I think \"security\" is not a scalar value; specifically, if we choose not to require checksums for downloads from PyPI, the difference in our security posture is that we trust that PyPI has not been compromised by a malicious actor. Using HTTPS for the transfer means that we are still protected against MITM attacks or en-route corruption.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231384192,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T15:04:49Z",
		"body" : ">I think using virtualenvs for isolation is the more important aspect of this PR\r\n\r\nand what problems do we currently have that that is solving?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231385023,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-08T15:08:06Z",
		"body" : "> when it breaks in Homebrew, I have to fix it. In the worst case where authors fail to pin dependencies, pip install some_formula==some_old_version, which has the same effect of fixing one package while allowing the rest of the dependency graph to float, is morally similar to installing a Homebrew formula from git history, and we know that's a bad experience.\r\n\r\nI don't think it's just on you to fix, FWIW. I also don't think the analogy applies here; it would be more the equivalent of picking the latest tag from the git history which is quite a big stability jump.\r\n\r\n> Absence of evidence is not evidence of absence; you can imagine conducting some sort of artificial experiment but this is difficult to observe in the wild exactly because people deploy mitigation strategies.\r\n\r\n> Can you explain what sort of evidence you'd find convincing?\r\n\r\nYour two arguments above combine make my point for me, I think. Your view is that we should press forward with this approach despite evidence or reproduction that it's required, my view is the opposite (to be explicit: we should require evidence that pinning is required by finding an example breakage and analysing it before doubling down on it further).\r\n\r\n> Although these are all nice outcomes, I think using virtualenvs for isolation is the more important aspect of this PR. If these objections prove fatal, we can continue using resources to declare and fetch dependencies, although we miss an opportunity to make the formulas nicer.\r\n\r\nIf virtualenvs solve the PYTHONPATH issues then I'm üëç on reworking this PR to just do that for now while we/you figure out how to handle e.g. resources/requirements.txt/pinning in a future PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231387110,
		"user" : {
			"login" : "dstufft"
		},
		"created_at" : "2016-07-08T15:15:41Z",
		"body" : "> Homebrew formulas breaking reflects on Homebrew, not anyone else\r\n\r\nAlso the obviousness of the fix when someone's ``pip install foobar`` breaks and someone's ``brew install foobar`` breaks is a bit different.\r\n\r\nFor ``pip install foobar`` you know where the environment is located, you know you need to use pip, and to be quite honest you're likely to be at least passingly familiar with Python development. This puts you in a better position to diagnose the problem and know exactly what you need to do to fix it.\r\n\r\nOn the flip side with ``brew install foobar``, there's a good chance you're not a Python developer at all so you already start out at a disadvantage to figuring out what broke. Add onto that you need to figure out what sort of Isolation mechanism Homebrew is doing behind the scenes, locate that virtual environment, and *then* do all the same steps you'd do in the ``pip install foobar`` case, just with a greater possibility the person has no experience with Python development.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231387774,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-08T15:18:15Z",
		"body" : "> Your two arguments above combine make my point for me, I think. Your view is that we should press forward with this approach despite evidence or reproduction that it's required, my view is the opposite (to be explicit: we should require evidence that pinning is required by finding an example breakage and analysing it before doubling down on it further).\r\n\r\nMy view is that we should have a reasonable expectation, based on our experience managing dependencies for Homebrew, our intuitions about the existence and nature of breaking changes, and by considering best practices in the Python community, that dependency graph instability is a real issue, and that therefore we should continue to mitigate it. In Bayesian terms, my prior belief is that this is likely to be a problem; your prior belief seems to be that this is not likely to be a problem. I'd like to have some insight into what sorts of evidence would tend to shift your priors.\r\n\r\nFWIW this PR works fine with resources as is; I don't think the code needs to change. I'll write some documentation.\r\n\r\n@ilovezfs said:\r\n>> I think using virtualenvs for isolation is the more important aspect of this PR\r\n\r\n> and what problems do we currently have that that is solving?\r\n\r\nI would like to invite your attention to the comment at the top of the thread.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231387776,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T15:18:15Z",
		"body" : ">If virtualenvs solve the PYTHONPATH issues then I'm :+1: on reworking this PR to just do that for now while we/you figure out how to handle e.g. resources/requirements.txt/pinning in a future PR.\r\n\r\nI agree with this, unless there are forseeable (`--with-crystal-ball` is `:recommended`) new problem(s) virtualenvs will create that we've not discussed yet.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231388959,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T15:22:36Z",
		"body" : ">FWIW this PR works fine with resources as is; I don't think the code needs to change. I'll write some documentation.\r\n\r\nI disagree. I'd like to see it not have additional easter eggs built in and be restricted to the minimal possible subset.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231389132,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-08T15:23:11Z",
		"body" : "> I'd like to have some insight into what sorts of evidence would tend to shift your priors.\r\n\r\nSure: a new Formula for an any version of an application package in `pip` released in the last 2 years (ideally one we already package) which would have been broken by their sloppy version matching demonstrating a breakage without pinning.\r\n\r\n> FWIW this PR works fine with resources as is; I don't think the code needs to change.\r\n\r\nI think everyone would be happy for the virtualenv stuff to be merged now if the other code around e.g. `requirements.txt` is stripped out. I'm üëé on merging this if it's got a bunch of code that may or may not be used by formulae.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231389920,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T15:26:05Z",
		"body" : ">Sure: a new Formula for an any version of an application package in pip released in the last 2 years (ideally one we already package) which would have been broken by their sloppy version matching demonstrating a breakage without pinning.\r\n\r\nSubject to a cost-benefit analysis, since the costs of pinning aren't trivial even if such an example were stipulated to exist.\r\n\r\n>I think everyone would be happy for the virtualenv stuff to be merged now if the other code around e.g. requirements.txt is stripped out. I'm :-1: on merging this if it's got a bunch of code that may or may not be used by formulae.\r\n\r\nThis.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231392264,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-08T15:34:24Z",
		"body" : "@ilovezfs: I'm pretty comfortable with the idea that there's no evidence which will move you, but consider that no current proposal eliminates the cost of pinning :)\r\n\r\nfwiw there's only a single line of code that's only necessary for the heredoc stuff: https://github.com/Homebrew/brew/pull/344/files#diff-86d78c9fcb1fe847e0ef982ea0b5adfdR187",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231392908,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T15:36:46Z",
		"body" : "If you could automate the pinning without any version numbers, etc. appearing in formulae I might suddenly be moved.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231393593,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-08T15:39:22Z",
		"body" : "> If you could automate the pinning without any version numbers, etc. appearing in formulae I might suddenly be moved.\r\n\r\nAs a more general comment: there's a bunch of similar things like this that it would be nice if there was a way for @BrewTestBot to just do them after a PR is merged but before it's üö¢d to users e.g. `brew style --fix` on all relevant files.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231393698,
		"user" : {
			"login" : "dstufft"
		},
		"created_at" : "2016-07-08T15:39:45Z",
		"body" : "> Sure: a new Formula for an any version of an application package in pip released in the last 2 years (ideally one we already package) which would have been broken by their sloppy version matching demonstrating a breakage without pinning.\r\n\r\nDue to the fact I'm a pip core (and the RM for pip) a good bit of my examples resolve around packaging tools themselves, but that's just a consequence of what I work on, not that packaging tools are special here.\r\n\r\nOn May 11th, 2016 I released pip 8.1.2 which meant that any version of the application `pip-tools` (a non standard wrapper around some missing pip functionality) was broken unless you downgraded to pip 8.1.1, and it remained broken by default until just yesterday when ``pip-tools`` released 1.7.0 which restored compatibility.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231393862,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T15:40:24Z",
		"body" : "@MikeMcQuaid I hesitate to let the cat out of the bag: `cabal freeze` also exists, but don't tell @tdsmith ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231396822,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T15:51:32Z",
		"body" : "@tdsmith Looking at this again https://gist.github.com/tdsmith/f9e83e9ce66fa19349ac711b1c170462, I wonder if the heredoc should be in its own resource block outside of `install`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231398286,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T15:57:04Z",
		"body" : "Which parts of this change on a per formula basis?\r\n```\r\n    Language::Python.virtualenv(self, libexec/\"venv\") do |venv|\r\n      venv.pip_install! FREEZETHINGY\r\n      venv.pip_install_and_link_scripts!(\".\", bin)\r\n    end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231398516,
		"user" : {
			"login" : "dstufft"
		},
		"created_at" : "2016-07-08T15:57:58Z",
		"body" : "Oh, and actually there's a wealth of examples coming out of openstak, where they have a requirements.txt file they use for all Openstack related projects and you can just scroll down the history to find things like:\r\n\r\n* [Don't use Warlock 1.3.0 because it breaks GlanceClient](https://github.com/openstack/requirements/commit/0e7a14a4f11ab22734724c60c824598be2fd7451#diff-d7d5c6fa7118ea10d88f3afeaef4da77).\r\n* [Don't use os-brick 1.4.0](https://github.com/openstack/requirements/commit/95d6d430f9f720704d3f072e8a05f82cda635fe3#diff-d7d5c6fa7118ea10d88f3afeaef4da77).\r\n* [Don't use latest version of PySCSS until issue with MDI Web Font is fixed](https://github.com/openstack/requirements/commit/caf1ec4bef9cecb92de9226655a31b793ed8bed4#diff-d7d5c6fa7118ea10d88f3afeaef4da77).\r\n* [Don't install ryu 4.2.1 because it's not compatible with latest ovs](https://github.com/openstack/requirements/commit/00cabb48e4e8867acb17038a5ccbc3906cd747c7).\r\n* [Don't install the latest cinderclient (1.7.1) because it breaks Nova](https://github.com/openstack/requirements/commit/f8a368bdc4a7f69e022dcb0be6923d04d284380c).\r\n* [Don't install the latest cinderclient (1.7.0) because it's backwards incompatible](https://github.com/openstack/requirements/commit/67bb6f37f1535b6a913d2739dc7abcefc4eecb1e#diff-d7d5c6fa7118ea10d88f3afeaef4da77).\r\n* [Lock ryu version <=4.0 because of bugs in the latest version](https://github.com/openstack/requirements/commit/378a981f9d18f2a25343dd7cf01f3bbb2581d55e).\r\n* [Block DNSPython 1.13.0 because it added a new mandatory parameter](https://github.com/openstack/requirements/commit/3066de55f5ae04d1e9a3f4d997a5732da2f96d9b).\r\n* [Block netmiko 0.4.3 because Linux Connector is broken](https://github.com/openstack/requirements/commit/46715143211e5e4791273827f4850563fb49dfaf).\r\n\r\nI got back as far as April of 2016 before I got bored, I also didn't investigate all the commits so I suspect there were more of them (particularly ones where they had to increase a lower bounds or add an upper bounds) that didn't immediately stand out to me as fixing a broken state of the world due to a release of something other than the primary application(s).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231400009,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-08T16:03:51Z",
		"body" : "@ilovezfs said:\r\n\r\n> I wonder if the heredoc should be in its own resource block outside of install.\r\n\r\nWhat's the goal? Making it externally visible?\r\n\r\n> Which parts of this change on a per formula basis?\r\n\r\n[A more recent \"this\"](https://github.com/Homebrew/homebrew-core/compare/master...tdsmith:jrnl-virtualenv#diff-f234881e1eaa994e2db5d570060372a7R19); probably none of them except `FREEZETHINGY` (which will be `resources` if we use resources). We might not always want to `pip_install \".\"` if we're installing something which is not an sdist from pypi.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231400331,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T16:05:12Z",
		"body" : ">What's the goal? Making it externally visible?\r\n\r\nPut FREEZETHINGY in its own block and make install a one-liner.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231401856,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T16:11:23Z",
		"body" : "```\r\n  pip_freeze do\r\n    keyring==9.3\r\n    parsedatetime==2.1\r\n    pycrypto==2.6.1\r\n    python-dateutil==1.5\r\n    pytz==2016.4\r\n    six==1.10.0\r\n    tzlocal==1.2.2\r\n  end\r\n\r\n  def install\r\n    pip_install\r\n  end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231403985,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-08T16:19:49Z",
		"body" : "Another benefit of that is you could have the tooling generate it automatically for you and actually edit the formula.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231409642,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-08T16:40:57Z",
		"body" : "I'd worry that `pip_do_the_needful` is a little too magical, like [we discussed earlier](https://github.com/Homebrew/brew/pull/344#issuecomment-227020877); I think the API this PR proposes strikes a good balance between being concise and being explicit.\r\n\r\nA `python_requirements` DSL is interesting. How would you handle optional dependencies? I guess you'd put tests for `build.with?` on the class definition; are we trying to avoid that pattern?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231410990,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T16:46:36Z",
		"body" : "Could probably do something like\r\n```\r\npip_freeze \"with-foo\" do\r\n...\r\nend\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231436604,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T18:27:34Z",
		"body" : "@tdsmith to be honest it makes me not want to allow any options on python formulae lol",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231521730,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-09T07:51:33Z",
		"body" : "If the target directories are always libexec and bin, and the only parts ever customized are the set of resources installed (depending on the exact options) and the arguments to the pip_install \".\" other than \".\" (again, depending on the exact options), it seems we shouldn't need to specify bin, we shouldn't need to specify libexec, and there should be a shorthand when the plan is to install all resources + the main event.\r\n\r\nBreaking them up when there's some sort of customization due to options is fair enough, but burying the main event inside venv.link_scripts doesn't really make sense to me. Is the point there that libexec venv.link_scripts needs to know which package to link? We seem to already know that information since it's the package specified in the spec rather than in the resources.\r\n\r\nI think I'd model this on install_cabal_package (see git-annex for a relatively complex example)\r\n```\r\ninstall_pip_package :using => [any packages that always have to be installed first], :flags/options => [any flags that aren't formula options] do\r\n  [implicit setup behavior installing all (other) resources (besides the packages specified in :using) in the main pip freeze heredoc; presumably the ones specified above in :using can be skipped but it doesn't matter anyway since pip will notice they're already installed]\r\n\r\n  any formula build.with? option specific packages that need to be installed before the main event specified explicitly here:\r\n\r\n  if build.with? \"foo\"\r\n    pip install (flags from above automatically passed here) (any other options you need to explicitly set) resource(\"foo-specific-heredoc-resource\")\r\n  elsif etc.\r\n  end\r\n\r\n  if formula build.with? option specific switches must be passed to pip install \".\", pip install \".\" can also be explicitly invoked here, but by default that is not needed, flags from the top will always be passed either away, though additional options can be specified.\r\n\r\n  explicit block we passed in returns, but before leaving the virtualenv:\r\n  (a) implicit/automatic behavior to pip install \".\" unless we already did that (again, of course, passing all the flags/options from the top) and a redundant pip install should be fine since it will just say already installed\r\n  (b) implicit/automatic behavior: link scripts links automatically occurs for bin and \".\". \r\nend\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231522358,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-09T08:08:25Z",
		"body" : "As an additional detail concerning flexibility, note that if additional setup and finalization behavior (that must occur after the main event) beyond what occurs in `install_cabal_package` is needed, the whole thing can be wrapped inside of a block passed to `cabal_sandbox do` and this works fine because attempting to reinitialize the sandbox as part of install_cabal_package is basically a noop and it just reuses the one that is wrapping it. The analogous flexibility here could be this:\r\n```\r\nvirtualenv do\r\n  [additional setup]\r\n  install_pip_package do\r\n  end\r\n  [additional finalization behavior that must occur after main event]\r\nend\r\n```\r\nBut by default this additional wrapping is never needed of course.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231522513,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-09T08:13:09Z",
		"body" : "Therefore, in the simple case we actually do end up with nothing more than\r\n```\r\npip_freeze do\r\n  main heredoc for deps\r\nend\r\n\r\ndef install\r\n  install_pip_package\r\nend\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231523789,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-09T08:46:58Z",
		"body" : "I think you're using the length of the install method as an optimization metric and while you're right that a) there's some boilerplate which b) makes your proposal possible, I'm still concerned that abbreviating the formulas so much adds a layer of mystery. I can't begin to tell you what the Haskell stuff actually does and if I'm to believe your comments it sounds like I probably object to it. :)\r\n\r\n`bin` and `libexec` in particular give hints about the physical locations where things are being placed, which I think is helpful. I don't love `link_scripts` but it lets us keep the helper methods a thin wrapper around pip invocations. In general I think a thinner wrapper is better to avoid complicating the helper code or the API, and the closer the `install` method is to a series of `pip` invocations, the clearer it is.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231524473,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-09T09:04:08Z",
		"body" : "To quote Alan Kay, \"Simple things should be simple. Complex things should be possible.\"\r\n\r\nIt's not either/or. The lower level methods should be available to formulae, but they should not be used by default if they're not needed. `virtual_env do`, `venv.pip_install`, `venv.link_scripts` should exist, but they shouldn't be proliferated all over the place. Most of the time the higher level `install_pip_package`/`install_pip_package do` should be sufficient and should invoke the the lower level tools as needed.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231525510,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-09T09:31:31Z",
		"body" : "To get empirical, in core right now:\r\n\r\n`install_cabal_package` without `do`\r\n13 formulae (of which 5 have a `:using`)\r\n\r\n`install_cabal_package ... do`\r\n6 formulae (of which 1 has a `:using`)\r\n\r\n`cabal_install`\r\n4 formulae\r\n\r\n`cabal_sandbox do`\r\n5 formulae\r\n\r\n`cabal_sandbox_add_source`\r\n2 formulae",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231533587,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-09T13:05:08Z",
		"body" : "> It's not either/or. The lower level methods should be available to formulae, but they should not be used by default if they're not needed. virtual_env do, venv.pip_install, venv.link_scripts should exist, but they shouldn't be proliferated all over the place. Most of the time the higher level install_pip_package/install_pip_package do should be sufficient and should invoke the the lower level tools as needed.\r\n\r\nAgreed üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231556567,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-09T21:22:53Z",
		"body" : "Mike: Can you help me square that with your earlier concern that [it should be clear what the code is doing](https://github.com/Homebrew/brew/pull/344#issuecomment-227020877)? I think the declarative-style code that hides the implementation makes it a lot harder to understand what a formula does.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231556898,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-09T21:30:00Z",
		"body" : "I don't know how I feel about there being five different ways to use cabal, either; I think there's a good argument to be made that having a single interface is nicer than having a bunch of flavors to choose from.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231578079,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-10T08:50:30Z",
		"body" : "> Mike: Can you help me square that with your earlier concern that it should be clear what the code is doing? I think the declarative-style code that hides the implementation makes it a lot harder to understand what a formula does.\r\n\r\nThat's still my concern but: if we're going down this route anyway (which it seems we are) it feels like having less boilerplate makes sense.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231579462,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-10T09:26:14Z",
		"body" : "I think I'm OK with the pip freeze output as a heredoc in lieu of the resource blocks, as long as it's kept in separate blocks. Right now for plists we do this somewhat awkward thing:\r\n```\r\n  def plist; <<-EOS.undent\r\n    <plist>\r\n    ...\r\n    </plist>\r\n    EOS\r\n  end\r\n```\r\n\r\n@MikeMcQuaid do you agree that for this it would be better to use a DSL so it can be something like this?\r\n```\r\n  pip_freeze do\r\n    keyring==9.3\r\n    parsedatetime==2.1\r\n    pycrypto==2.6.1\r\n  end\r\n```\r\n(Though I guess that may not be possible?)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231582903,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-10T10:57:54Z",
		"body" : "@ilovezfs I agree but probably putting it in an `EOS.undent` every time will help editors not freak out about it being invalid Ruby code.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 231584426,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-10T11:35:18Z",
		"body" : "@MikeMcQuaid Yeah, that sounds right. So I guess something like\r\n```\r\n  py_resource do\r\n    pip_freeze <<-EOS.undent\r\n      keyring==9.3\r\n      parsedatetime==2.1\r\n      pycrypto==2.6.1\r\n    EOS\r\n  end\r\n```\r\nwhich would also be more flexible anyway since additional elements could be in there like `options` or `name` or `flags`, etc. if they become necessary for whatever reason.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 232554842,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-14T04:39:29Z",
		"body" : "After letting this age for a few days I'm still not really moved by the `pip_do_the_needful` API with a few different interfaces for exceptions; I'd rather have a single, thin, consistent interface that's more explicit. I think a little explanatory verbosity is a feature and not a sin. I'm willing to be overruled by _force majeure_ in the interest of landing the virtualenv encapsulation. How can we resolve this?\r\n\r\nMy preferred option is to merge the current proposal. :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 232556888,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-14T04:59:32Z",
		"body" : "The status quo in the Python formulae seems significantly preferable to redoing all the formulae to look like this:\r\n```\r\n    virtualenv(libexec) do |venv|\r\n      venv.pip_install <<-EOS\r\n        keyring==9.3\r\n        parsedatetime==2.1\r\n        pycrypto==2.6.1\r\n        python-dateutil==1.5\r\n        pytz==2016.4\r\n        six==1.10.0\r\n        tzlocal==1.2.2\r\n      EOS\r\n      venv.link_scripts(bin) { venv.pip_install \".\" }\r\n    end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 232557089,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-14T05:01:01Z",
		"body" : "That is not the current proposal; [this is the current proposal](https://github.com/tdsmith/brew/blob/e79dc44ccc8d75692697620b98ebcd2541acfa6a/share/doc/homebrew/Python-for-Formula-Authors.md#example).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 232557166,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-14T05:01:51Z",
		"body" : "That looks like jargon gibberish to me, sorry.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 232557781,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-14T05:06:49Z",
		"body" : "I don't think that's actionable feedback. I'm getting the message that you don't feel that it's worth engaging with my concerns.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 232558641,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-14T05:14:08Z",
		"body" : "You're probably right. I prefer the status quo.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 232560023,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-14T05:25:24Z",
		"body" : "This interaction is really demotivating.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 232577429,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-14T07:03:00Z",
		"body" : "It's looking better but have some feedback:\r\n\r\n> `virtualenv(libexec) do |venv|`\r\n\r\nI don't think it's obvious what `virtualenv` does as a function or what the `venv` object does. `virtualenv_sandbox`, `virtualenv_create(libexec)` or something, perhaps? Not a blocker, though.\r\n\r\n> `venv.pip_install resources`\r\n\r\nMaybe `virtualenv.pip_install_multiple resources` or `venv.pip_install_resources resources` or something? Again, don't feel too strongly.\r\n\r\n> `venv.link_scripts(bin) { venv.pip_install \".\" }`\r\n\r\nDon't understand why `venv.link_scripts` is a block rather than a following command. Don't think it's obvious that `venv.pip_install \".\"` is installing the current package. Maybe just `venv.pip_install_formula` or something?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 232578065,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-14T07:06:07Z",
		"body" : "> After letting this age for a few days I'm still not really moved by the pip_do_the_needful API with a few different interfaces for exceptions; I'd rather have a single, thin, consistent interface that's more explicit. I think a little explanatory verbosity is a feature and not a sin. I'm willing to be overruled by force majeure in the interest of landing the virtualenv encapsulation. How can we resolve this?\r\n\r\nI think the proposal, which I agree with, is to have your current interface be exposed so it can be used if needed but have `virtualenv_pip_install_link_formula_and_resources` or some other silly name which does it all for you to avoid having the same boilerplate in every `install` method. In my opinion as soon as we start removing `system` or `FileUtils` commands from formulae we may as well use an abstraction that involves less typing. Currently it's not obvious even from your more explicit DSL what each function is going to end up calling in terms of e.g. `system` calls so, for me, it loses readability/explicitness without gaining much in utility.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 232579690,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-14T07:11:58Z",
		"body" : "Will an individual formula install method ever modify the venv itself? If not there seems to be a huge emphasis on an aspect of the backend implementation that has nothing directly to do with contributors, users, upstream developers, or the software we're packaging.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 232583121,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-14T07:22:15Z",
		"body" : "> as soon as we start removing system or FileUtils commands from formulae\r\n\r\nWhat would \"all this virtualenv stuff\" look like if we did use `system` and `FileUtils` commands and not a DSL? I don't find the steps we currently do on the side before calling `poet -f` particularly onerous, and they might look fine without anything fancy wrapping them.\r\n\r\nAlso, I notice that the current method seems to do the build while inside the libexec directory and not staged in the buildpath. Or am I misunderstanding what's going on? I thought that we usually preferred not to do builds from inside the Cellar.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234236298,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-21T12:16:00Z",
		"body" : "`virtualenv_install_with_resources` <- :heart:\r\n\r\n@tdsmith I notice it's still using\r\n```\r\nvenv.link_scripts(bin) { venv.pip_install buildpath }\r\n```\r\nAny thoughts on what @MikeMcQuaid said here:\r\n\r\n>venv.link_scripts(bin) { venv.pip_install \".\" }\r\n>Don't understand why venv.link_scripts is a block rather than a following command.\r\n\r\nHigher up I'd said\r\n> burying the main event inside venv.link_scripts doesn't really make sense to me. Is the point there that libexec venv.link_scripts needs to know which package to link? We seem to already know that information since it's the package specified in the spec rather than in the resources.\r\n\r\n\r\nI'm still not sure I understand your earlier answer here\r\n>bin and libexec in particular give hints about the physical locations where things are being placed, which I think is helpful. I don't love link_scripts but it lets us keep the helper methods a thin wrapper around pip invocations. In general I think a thinner wrapper is better to avoid complicating the helper code or the API, and the closer the install method is to a series of pip invocations, the clearer it is.\r\n\r\nIt still seems it could be sequential and achieve the same goal, no?\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234236424,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-21T12:16:45Z",
		"body" : "Thanks for your feedback and patience; meant to get back to this more quickly!\r\n\r\n> > `virtualenv(libexec) do |venv|`\r\n\r\n> I don't think it's obvious what virtualenv does as a function or what the venv object does. virtualenv_sandbox, virtualenv_create(libexec) or something, perhaps?\r\n\r\nRenamed to `virtualenv_create`.\r\n\r\n> > `venv.pip_install resources`\r\n\r\n> Maybe virtualenv.pip_install_multiple resources or venv.pip_install_resources resources or something? Again, don't feel too strongly.\r\n\r\n`pip_install` is polymorphic and can accept a String (representing a path), Pathname, Resource, or array of any combination of those. Is that confusing?\r\n\r\n> Don't understand why venv.link_scripts is a block rather than a following command.\r\n\r\nIt diffs the contents of the virtualenv's `bin` directory (i.e. `libexec/bin`) before and after yielding to the block.\r\n\r\n> Don't think it's obvious that venv.pip_install \".\" is installing the current package.\r\n\r\nI revised the documentation to make the canonical invocation `venv.pip_install buildpath` which I think is clearer and produces nicer output.\r\n\r\n> What would \"all this virtualenv stuff\" look like if we did use system and FileUtils commands and not a DSL?\r\n\r\nIt would look like the `Virtualenv#create` method.\r\n\r\n> Also, I notice that the current method seems to do the build while inside the libexec directory and not staged in the buildpath.\r\n\r\nIt doesn't; it never chdirs into the venv_root.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234237165,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-21T12:20:28Z",
		"body" : "Oh! And, as @ilovezfs noticed, I added a `virtualenv_install_with_resources` method to handle the common case and updated the documentation to match.\r\n\r\nHere's a diff for `jrnl` using the new method: https://github.com/Homebrew/homebrew-core/compare/master...tdsmith:jrnl-virtualenv",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234237287,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-21T12:21:07Z",
		"body" : "@tdsmith you're awesome :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234242676,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-21T12:46:56Z",
		"body" : "@tdsmith do you anticipate a need for `venv.link_scripts` to be able to take a hash of arbitrary environment variables (e.g., https://github.com/Homebrew/homebrew-core/blob/d6184574086edf725bd98306f5cbe8f765604b0a/Formula/voldemort.rb#L25-L29)?\r\n\r\nAlso, it does still seem awkward to have `venv.link_scripts` taking the block that does ` venv.pip_install buildpath`. Could the virtualenv accumulate before and after state without needing to resort to nesting?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234317931,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-21T17:03:50Z",
		"body" : "No, using `write_env_script` would be the right thing to do in that case; `link_files` just makes symlinks and doesn't write wrappers.\r\n\r\n> Could the virtualenv accumulate before and after state without needing to resort to nesting?\r\n\r\nThe class could keep track of whatever the last `pip_install` invocation did, yeah. Do we feel okay about that? What would you name the method? `link_newest_scripts`? `link_last_scripts`?\r\n\r\n@dstufft pointed out earlier that:\r\n> With a little bit of Python code you should be able to extract the names of all of the scripts for a particular package using the pkg_resources library.\r\n\r\nI see how to get a list of entry_points out of pkg_resources but some packages (i.e. `awscli`) use the `script` mechanism instead and I don't immediately see how to get a list of those. (I think I'd also need to invoke `setup.py --name` to learn the name of the Python distribution we want to install and that means not everything is pip (which is probably fine?).)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234359605,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-21T19:34:18Z",
		"body" : "I have minor quibbles but I'm really happy to see how this has gone so think I'm now üëç on the API and underlying methods, thanks for working so hard and iterating on these, @tdsmith. I think we may need final docs and/or scripts but then I'm happy to üö¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234703666,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-23T07:00:52Z",
		"body" : "@tdsmith do you mind allowing `virtualenv_install_with_resources` to optionally take a block as here: https://github.com/Homebrew/brew/blob/master/Library/Homebrew/language/haskell.rb#L99",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234707066,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-23T08:30:20Z",
		"body" : "@tdsmith this seems to work to generate the resource blocks:\r\n```\r\n    virtualenv_create(buildpath/\"gen\") do |venv|\r\n      system buildpath/\"gen/bin/pip\", \"install\", \"--no-binary\", \":all:\", buildpath\r\n      Utils.popen_read(buildpath/\"gen/bin/pip\", \"freeze\").split(\"\\n\").each { |p| puts Utils.popen_read(HOMEBREW_PREFIX/\"bin/poet\", p.sub(/==.*/, \"\")) ; puts \"\" }\r\n    end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234728009,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-23T16:47:15Z",
		"body" : "> do you mind allowing virtualenv_install_with_resources to optionally take a block\r\n\r\nMy preference would be that it didn't. I think presenting fewer options for how to use virtualenvs is better, I think we're probably not going to need it very often, and I think all it would do is call `venv.pip_install resources` before `yield`ing?, so the potential savings don't seem large.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234728255,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-23T16:52:11Z",
		"body" : "We'll just end up doing this as a workaround:\r\n```\r\nvirtualenv_create(libexec) do |venv|\r\n  virtualenv_install_with_resources\r\nend\r\n```\r\nwhich is fine but it would be better to do\r\n```\r\nvirtualenv_install_with_resources do\r\nend\r\n```\r\nexcept when the first version is actually required in some particular circumstance.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234728819,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-23T17:03:10Z",
		"body" : "It looks like we also had two different opinions about what a method with that signature should do, which makes me a little warier. :)\r\n\r\nExtending an API later is cheap; let's get some experience with this and see if we'll really use it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234729030,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-23T17:07:45Z",
		"body" : "We already have the ability to take a block in install_cabal_package, and it is indeed used. I'm not sure why you'd deliberately cripple virtualenv_install_with_resources with less functionality before we even start seeing what works well and where.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234729193,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-23T17:10:50Z",
		"body" : "In the most complex case, this should be permissible:\r\n```\r\nvirtualenv_create(libexec) do |venv|\r\n  # blah\r\n  virtualenv_install_with_resources do\r\n    # blah blah\r\n  end\r\n  # blah blah blah\r\nend\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234752071,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-24T02:00:22Z",
		"body" : "Can you explain why you think it's axiomatic that everything should accept a block and what you think each method that accepts a block should do with that block? I don't think I understand the value of complicating the interface and the implementation.\r\n\r\nTaking another look, actually, I don't remember why `virtualenv_create` yields to a block instead of just returning a venv instance.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234752349,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-24T02:09:12Z",
		"body" : "There's no plausible finalization action after we're done installing things into the virtualenv and no need to drag it out of scope so let's just return a `Virtualenv` instance instead of yielding a block with access to one. Fewer blocks, hurrah!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 234941962,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-25T12:41:38Z",
		"body" : "Can we clarify whether we're going to use pip freeze output style heredocs at all or not? Also, if we are, how/where should the pip freeze spec be placed in the formulae for the virtualenv_install_with_resources case?\r\n\r\nPersonally, I'm eager to see this PR :ship: ASAP as it currently stands.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 235019530,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-25T17:16:38Z",
		"body" : "> Can we clarify whether we're going to use pip freeze output style heredocs at all or not?\r\n\r\nNot without an evolution proposal, I'd say.\r\n\r\nThanks for all your time and for caring about the outcome. I'll do a final squash now and leave it open for just another couple of days in case there are any final comments.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 235448544,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-27T00:39:18Z",
		"body" : "Would be great if you'd be willing to follow-up in `/core` changing a handful of the most popular Python-using formulae to the new system, particularly `jrnl` since we point to it as the example.\r\n\r\nOn these set of changes alone though, I think it's a significant improvement on the status quo & would be happy to see it shipped. Appreciate your work here Tim.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 235481592,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-27T04:33:39Z",
		"body" : "Thanks all!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 235485467,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T04:59:37Z",
		"body" : "Dang, I missed the deadline. Would you mind granting me a grace period of 1-2 days before this gets deployed to formulae? This would allow me to make some comments and suggest some minor tweaks (that nonetheless could affect the public interface, hence this request).\r\n\r\nIf not, that's also fair ‚Ä¶ after all there was an advance warning that it will be merged today-ish.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 235485783,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-27T05:01:00Z",
		"body" : "@UniqMartin You're too late! https://github.com/Homebrew/homebrew-core/pull/3352 :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 235486138,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-27T05:03:02Z",
		"body" : "I did make sure it was Wednesday in most relevant time zones. :) If you want changes can you make a PR by a firm date in the near future?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 235486762,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T05:06:07Z",
		"body" : "> I did make sure it was Wednesday in most relevant time zones. :)\r\n\r\nYou are correct, sir! And the only one I'm blaming is me.\r\n\r\n> If you want changes can you make a PR by a firm date in the near future?\r\n\r\nYes, this was how I was planning to follow up, now that I missed the comment deadline.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 236438462,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-31T16:04:49Z",
		"body" : "> > If you want changes can you make a PR by a firm date in the near future?\r\n>\r\n> Yes, this was how I was planning to follow up, now that I missed the comment deadline.\r\n\r\nSorry for the unexpectedly long delay: #613",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 242309612,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-25T08:00:15Z",
		"body" : "wrt the wisdom of fixing dependencies, the popular lxml package recently broke OS X builds on a patch release: https://bugs.launchpad.net/lxml/+bug/1614693",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 344
	},
	{
		"id" : 225570510,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-13T12:45:29Z",
		"body" : "This is an actual bug and an oversight on our part in #163. Thanks for catching and reporting it!\r\n\r\n> With the following changes to my Brew install:\r\n\r\nSince you already have a good solution, would you mind submitting it as a pull request, referencing this issue and PR #163 for context? I'd be happy to give you commit credit for finding and fixing this. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 346
	},
	{
		"id" : 225582737,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-13T13:37:24Z",
		"body" : "Thanks! Just a heads-up that the e-mail you used for committing isn't linked to your GitHub account, so if you care about this (and the related commit credit) you might want to fix this.\r\n\r\n> I'll put together tests once I've had a look at where it would be best to integrate - any suggestions helpful! :D\r\n\r\nNo worries! We can merge this without a test, as this is an area that is a bit difficult to test and we prefer to merge this quickly as it fixes a regression affecting users (like you).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 349
	},
	{
		"id" : 226066285,
		"user" : {
			"login" : "msbit"
		},
		"created_at" : "2016-06-15T01:44:30Z",
		"body" : "Updated the PR with tests for `Superenv`.\r\n\r\nTests for `Stdenv` will be tricky to be made useful, as it seems to need the `gcc-*` formulae installed, so I might punt that one.\r\n\r\nThe next question is whether @UniqMartin is happy with the more robust `Version` check or whether it's acceptable as is.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 349
	},
	{
		"id" : 226339072,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-15T22:29:14Z",
		"body" : "> Updated the PR with tests for `Superenv`.\r\n>\r\n> Tests for `Stdenv` will be tricky to be made useful, as it seems to need the `gcc-*` formulae installed, so I might punt that one.\r\n\r\nGreat work on the tests! I agree that testing `Stdenv` is more complicated, thus I'm completely happy with the tests as-is (module the adjustments I asked for in my code comments).\r\n\r\n> The next question is whether @UniqMartin is happy with the more robust `Version` check or whether it's acceptable as is.\r\n\r\nWe can keep the code as-is, but I'd be happier if you were to adopt my suggestion. Maybe to make things easier and because writing prose that describes this is harder than just showing a diff, here's what I imagine this could look like (feel free to make the following code part of this PR):\r\n\r\n```diff\r\ndiff --git i/Library/Homebrew/extend/ENV/shared.rb w/Library/Homebrew/extend/ENV/shared.rb\r\nindex eeba5bbf..2debbae5 100644\r\n--- i/Library/Homebrew/extend/ENV/shared.rb\r\n+++ w/Library/Homebrew/extend/ENV/shared.rb\r\n@@ -322,4 +322,9 @@ module SharedEnvExtension\r\n       raise \"Non-Apple GCC can't build universal binaries\"\r\n     end\r\n   end\r\n+\r\n+  def gcc_with_cxx11_support?(cc)\r\n+    version = cc[/^gcc-(\\d+(?:\\.\\d+)?)$/, 1]\r\n+    version && Version.new(version) >= Version.new(\"4.8\")\r\n+  end\r\n end\r\ndiff --git i/Library/Homebrew/extend/ENV/std.rb w/Library/Homebrew/extend/ENV/std.rb\r\nindex a8bf6b90..8be0b48c 100644\r\n--- i/Library/Homebrew/extend/ENV/std.rb\r\n+++ w/Library/Homebrew/extend/ENV/std.rb\r\n@@ -287,7 +287,7 @@ module Stdenv\r\n     if compiler == :clang\r\n       append \"CXX\", \"-std=c++11\"\r\n       append \"CXX\", \"-stdlib=libc++\"\r\n-    elsif compiler =~ /gcc-(4\\.(8|9)|[5-6])/\r\n+    elsif gcc_with_cxx11_support?(compiler)\r\n       append \"CXX\", \"-std=c++11\"\r\n     else\r\n       raise \"The selected compiler doesn't support C++11: #{compiler}\"\r\ndiff --git i/Library/Homebrew/extend/ENV/super.rb w/Library/Homebrew/extend/ENV/super.rb\r\nindex 0ff5ddc5..45281d79 100644\r\n--- i/Library/Homebrew/extend/ENV/super.rb\r\n+++ w/Library/Homebrew/extend/ENV/super.rb\r\n@@ -303,11 +303,10 @@ module Superenv\r\n   end\r\n \r\n   def cxx11\r\n-    case homebrew_cc\r\n-    when \"clang\"\r\n+    if homebrew_cc ==\"clang\"\r\n       append \"HOMEBREW_CCCFG\", \"x\", \"\"\r\n       append \"HOMEBREW_CCCFG\", \"g\", \"\"\r\n-    when /gcc-(4\\.(8|9)|[5-6])/\r\n+    elsif gcc_with_cxx11_support?(homebrew_cc)\r\n       append \"HOMEBREW_CCCFG\", \"x\", \"\"\r\n     else\r\n       raise \"The selected compiler doesn't support C++11: #{homebrew_cc}\"\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 349
	},
	{
		"id" : 226434963,
		"user" : {
			"login" : "msbit"
		},
		"created_at" : "2016-06-16T09:29:22Z",
		"body" : "@UniqMartin looks great, I've included that code in the PR.\r\n\r\nIn terms of merging in, did you want me to squash these commits down to a single commit?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 349
	},
	{
		"id" : 226439706,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-16T09:50:38Z",
		"body" : "> looks great, I've included that code in the PR.\r\n\r\nThanks! Did you overlook the other code comments I added prior to that or is there a reason you neither commented on them nor addressed them in the code you pushed so far?\r\n\r\n> In terms of merging in, did you want me to squash these commits down to a single commit?\r\n\r\nYes, squashing this down to a single commit would be nice, if that's no problem for you. Otherwise I can also squash your commits when merging.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 349
	},
	{
		"id" : 226445560,
		"user" : {
			"login" : "msbit"
		},
		"created_at" : "2016-06-16T10:17:57Z",
		"body" : "Uggh, sorry overlooked those notes you'd made.\r\nI'll include them, and then get the branch squashed down and ready to merge.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 349
	},
	{
		"id" : 226448062,
		"user" : {
			"login" : "msbit"
		},
		"created_at" : "2016-06-16T10:30:22Z",
		"body" : "@UniqMartin I've included the changes that you'd commented on and squashed the commits down. I'd missed them when looking at the last bit of activity on the PR.\r\nThanks for the help with putting it all together.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 349
	},
	{
		"id" : 226468274,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-16T12:16:56Z",
		"body" : "Merged in 01e8e180a89a761ba6ce9bacf0a54a478b9dcf65. Thank you for this contribution to Homebrew, @msbit! :tada:\r\n\r\n> Thanks for the help with putting it all together.\r\n\r\nThank you for noticing this problem, for following up with a PR to fix it, and for working with us!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 349
	},
	{
		"id" : 226502380,
		"user" : {
			"login" : "msbit"
		},
		"created_at" : "2016-06-16T14:29:49Z",
		"body" : "My pleasure üôã",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 349
	},
	{
		"id" : 225750782,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-14T00:47:42Z",
		"body" : "> `$HOMEBREW_REPOSITORY/Library/Taps/chdiza/homebrew-dizaone`\r\n\r\nDoes this path contain a directory named `.git`? If it does, this is assumed to be a Git repository and hence handled by `brew update`. If a `.git` directory doesn't exist, it will definitely be skipped. Particularly the code path that generates the cited error message cannot be triggered in absence of a `.git` directory.\r\n\r\nCan you share the output of `ls -AlF` for that tap? Maybe I'll spot something that you overlooked. But really, the tap handling is as simple as I described above and I'd expect to see a `.git` directory.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 352
	},
	{
		"id" : 225757011,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-06-14T01:35:22Z",
		"body" : "Good catch.  It does contain a .git folder, but it isn't supposed to.  I must've accidentally symlinked one in.\r\n\r\nSorry for the noise.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 352
	},
	{
		"id" : 225740828,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-13T23:44:34Z",
		"body" : "Because Homebrew was originally a package manager that built everything from source and even today has to fall back to building from source every once in a while, our packages normally install everything that is needed to develop software with a given package. Thus `*-dev` packages like in Debian are not needed. In your particular example, you'll find the headers in `$(brew --prefix)/opt/unixodbc/include` or `/usr/local/opt/unixodbc/include` (if you have installed Homebrew in the default location).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 354
	},
	{
		"id" : 225741113,
		"user" : {
			"login" : "kylecordes"
		},
		"created_at" : "2016-06-13T23:46:26Z",
		"body" : "Thank you, this is both excellent and very helpful. I wonder if there is some way to explain this in the running software or the documentation. It might already be there, though I looked around for quite a while before entering the issue. Thanks again for your answer.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 354
	},
	{
		"id" : 225742083,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-13T23:52:50Z",
		"body" : "> I wonder if there is some way to explain this in the running software or the documentation.\r\n\r\nI'm not really sure what ‚Äúthis‚Äù is referring to, so feel free to provide a bit more context. But generally you can have a look at `brew info <formula>` and it will list all installed versions of that formula, including the paths they are installed to. Everything belonging to a certain version of a given formula is located in its prefix, that you can learn by issuing `brew --prefix <formula>`. The [Formula Cookbook](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md) primarily addresses formula authors, but also starts off with some terminology and some overview of relevant formula paths in Homebrew. (Maybe that's the documentation you were looking for?)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 354
	},
	{
		"id" : 225742420,
		"user" : {
			"login" : "kylecordes"
		},
		"created_at" : "2016-06-13T23:54:42Z",
		"body" : "By \"this\", I mean that I searched everything I could find about homebrew quite extensively, looking for information about headers or \"dev\" packages. I could not find anything. Perhaps I overlooked it, but my suggestion was that the information you gave above, which is that brew already automatically provides those files and therefore does not need any extra packages, is fantastic information that I wish had been easy to find and obvious when I was looking for it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 354
	},
	{
		"id" : 225701026,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-13T20:38:38Z",
		"body" : "It's a design choice. `R` has a hard dependency on `gcc` _(For Fortran)_ so it'll be upgraded. We don't support building current formula against known-to-be-outdated dependencies because it's a recipe for chaos & a significant support burden on us, essentially.\r\n\r\nIf you want to use the old GCC the most reasonable route to get there is to `brew install homebrew/versions/gcc5` for example. GCC is too widely used to be reasonably pinned, really.\r\n\r\n> I think it's better to notify the user if package A requires a newer version of package B while package B is pinned. Thoughts?\r\n\r\nIt'd be easier to discuss a PR rather than an abstract idea on this sort of thing. It's hard to say until mechanisms are discussed. Interactivity after `brew install`/`upgrade`/etc has begun is off the table, but we'd review other ideas.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 355
	},
	{
		"id" : 226012715,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-06-14T20:53:07Z",
		"body" : "Gah... I just noticed that I forgot to remove some commented code that I'd added while following along with the changes in [this pull request](https://github.com/Homebrew/brew/pull/350). Should have checked `git diff` before committing!\r\n\r\nI've run `brew update` on my branch to try to resolve this, but wasn't able to squash the commits.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 356
	},
	{
		"id" : 226392199,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-16T05:33:38Z",
		"body" : "> I've run `brew update` on my branch to try to resolve this, but wasn't able to squash the commits.\r\n\r\nWhat you want to do to resolve this:\r\n\r\n```\r\ncd \"$(brew --repository)\"\r\ngit checkout add-cmd-search-test\r\ngit rebase -s recursive -X ours master\r\ngit push --force-with-lease\r\n```\r\n\r\nThe `git rebase` will take your branch and rebase it on top of an up-to-date master. The options help to make sure that conflicting parts are dropped in favor of the code in master, so that the spurious changes to `test_log` are simply discarded and only `test_search` remains. Once this finishes, your branch should be one commit ahead of `master`.\r\n\r\nYou can check what the history of all local branches looks like after that (and maybe before, too) by running `git log --graph --decorate --date-order --oneline --all` or a graphical Git interface of your choice. (Feel free to ping me on Slack if there's any trouble or the result isn't as you expected it to be.)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 356
	},
	{
		"id" : 226395993,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-16T06:06:04Z",
		"body" : "> I'm having trouble understanding how to test [these lines](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cmd/search.rb#L64-L96) in `search.rb`... not as straightforward as I'd assumed, but I'll try again tomorrow.\r\n\r\nThis is indeed a bit tricky. It is definitely doable and there are multiple approaches I can think of, but all of them involve some non-trivial adjustments to the overall test infrastructure. I think it's not as important to cover these cases, so I'd move this to the ‚Äúnice to have‚Äù part of your to do list and revisit it after you had more time poke and understand the test infrastructure (by writing other tests).\r\n\r\n> The URLs are long enough to need wrapping. But separating strings with `\\` and a newline seems to raise an error (due to the indentation on the newline). String concatenation doesn't seem ideal, either. Is there a better way? And would it be better to bypass the hash iteration and just have an assertion for each flag?\r\n\r\nWhat is the error you are seeing? Here's an example that worked for me (maybe this is already enough to spot the difference between what you tried and what it should have looked like):\r\n\r\n```ruby\r\nsingle_line = \"This is a short string.\"\r\nmulti_line = \"This is a very long string that won't quite fit \" \\\r\n  \"on a single line without making UniqMartin comment on that.\"\r\n```\r\n\r\nThat said, this is an example where the end of the string isn't as important and I wouldn't mind if it was kept on a single line. With one URL per line this could actually improve code readability.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 356
	},
	{
		"id" : 226591605,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-06-16T19:41:07Z",
		"body" : "Thanks @UniqMartin!! I've pushed a new commit.\r\n\r\n> The `git rebase` will take your branch and rebase it on top of an up-to-date master. The options help to make sure that conflicting parts are dropped in favor of the code in master, so that the spurious changes to `test_log` are simply discarded and only `test_search` remains. Once this finishes, your branch should be one commit ahead of master.\r\n> \r\n> You can check what the history of all local branches looks like after that (and maybe before, too) by running `git log --graph --decorate --date-order --oneline --all` or a graphical Git interface of your choice. \r\n\r\nThank you, this all seemed to work smoothly. I checked Git documentation to get a better idea of what `git rebase -s recursive -X ours master` does, and although I didn't understand 100% of the documentation, your explanation told me what I needed to know, anyway.\r\n\r\n> You can omit the curly braces. Trailing arguments of the form key => value are automatically collected in a Hash that is passed to the method that is being invoked as its last argument.\r\n\r\n> You could even consider keeping `HOMEBREW_CACHE/\"desc_cache.json\"` in a local variable as it is used multiple times throughout this test.\r\n\r\n`test_desc` also [uses `HOMEBREW_CACHE/\"desc_cache.json\"` multiple times](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/test/test_integration_cmds.rb#L329-L336) and there are also some [extra curly braces in `test_home`](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/test/test_integration_cmds.rb#L565-L578)... would it be worthwhile to perhaps submit another pull request to refactor/edit those two tests?\r\n\r\n> What is the error you are seeing? Here's an example that worked for me (maybe this is already enough to spot the difference between what you tried and what it should have looked like):\r\n> ```\r\n> single_line = \"This is a short string.\"\r\n> multi_line = \"This is a very long string that won't quite fit \" \\\r\n>   \"on a single line without making UniqMartin comment on that.\"\r\n> ```\r\n\r\nüòÜ  Right! I think the error came from writing the equivalent of:\r\n```\r\nmulti_line = \"This is a very long string that won't quite fit \\\r\n  on a single line without making UniqMartin comment on that.\"\r\n```\r\nI'll keep this in mind for future reference.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 356
	},
	{
		"id" : 226609784,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-16T20:50:20Z",
		"body" : "> test_desc also uses HOMEBREW_CACHE/\"desc_cache.json\" multiple times and there are also some extra curly braces in test_home... would it be worthwhile to perhaps submit another pull request to refactor/edit those two tests?\r\n\r\nSeems like a good idea. Any place there's identical or near-identical code in 3+ places it's worth pulling them into a method.\r\n\r\nThis looks good to me, as-is, though üëç. @UniqMartin any final thoughts?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 356
	},
	{
		"id" : 226745825,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T11:26:42Z",
		"body" : "> Thank you, this all seemed to work smoothly.\r\n\r\nI'm glad it worked! Once you understand the core data structure of a Git repository (a directed acyclic graph) and get somewhat comfortable with it, it loses a lot of its scariness. Then your only task tends to be to hunt down the command that performs the manipulation on that graph that you have in mind. üò∏\r\n\r\n> `test_desc` also [uses `HOMEBREW_CACHE/\"desc_cache.json\"` multiple times](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/test/test_integration_cmds.rb#L329-L336) and there are also some [extra curly braces in `test_home`](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/test/test_integration_cmds.rb#L565-L578)... would it be worthwhile to perhaps submit another pull request to refactor/edit those two tests?\r\n\r\nWe have a lot of code that doesn't adhere to a certain style we tend to use for new code. Because we haven't managed to clean that up yet, we can't currently run style checks on our CI to check for style violations in a somewhat automated fashion. However, what you can do is run `brew style <file>` on the modified file and check what it suggests and if any of the suggestions are about the newly added code.\r\n\r\nWhat helps me is that I have editor integration for RuboCop, that is internally used by `brew style`, so style violations get automatically highlighted while I'm editing the code. Might be worth checking if there's something similar for the editor you're using. (I'm using Sublime Text.)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 356
	},
	{
		"id" : 226746094,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T11:28:16Z",
		"body" : "Sorry, I hit the ‚ÄúComment‚Äù button too early ‚Ä¶\r\n\r\n> This looks good to me, as-is, though üëç. @UniqMartin any final thoughts?\r\n\r\nHave commented on some style nits, but no more thoughts on the code as such. Looks good to me!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 356
	},
	{
		"id" : 226878871,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-06-17T20:53:30Z",
		"body" : "> We have a lot of code that doesn't adhere to a certain style we tend to use for new code. Because we haven't managed to clean that up yet, we can't currently run style checks on our CI to check for style violations in a somewhat automated fashion. However, what you can do is run `brew style <file>` on the modified file and check what it suggests and if any of the suggestions are about the newly added code.\r\n> \r\n> What helps me is that I have editor integration for RuboCop, that is internally used by `brew style`, so style violations get automatically highlighted while I'm editing the code. Might be worth checking if there's something similar for the editor you're using. (I'm using Sublime Text.)\r\n\r\nGood to know, thanks @UniqMartin! I also use Sublime Text and recently installed a linter as suggested by @MikeMcQuaid. I'll get familiar with using `brew style`. A friend suggested that I use RuboCop a while back; I'll check it out!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 356
	},
	{
		"id" : 226898363,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T22:42:15Z",
		"body" : "> I also use Sublime Text and [‚Ä¶]\r\n\r\nFWIW, I'm using the [`SublimeLinter` plugin](http://www.sublimelinter.com/en/latest/) with the [`SublimeLinter-rubocop` plugin](https://github.com/SublimeLinter/SublimeLinter-rubocop) to interface with RuboCop. As soon as it can find RuboCop in the PATH, it will just work. The configuration is automatically picked up from the project directory, just like it would be if you invoke `rubocop` from the command line (though we wrapped that in `brew style`, mostly to make checking individual formulae a bit easier).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 356
	},
	{
		"id" : 227020971,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-19T21:20:26Z",
		"body" : "Thanks again @eirinikos!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 356
	},
	{
		"id" : 227025154,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-19T22:48:12Z",
		"body" : "An unfortunate side effect of these tests seems to be that we get spurious build failures on Travis due to hitting the GitHub rate limit for unauthenticated API requests, e.g.:\r\n\r\n- https://travis-ci.org/Homebrew/brew/builds/138773499\r\n- https://travis-ci.org/Homebrew/brew/builds/138775328\r\n- https://travis-ci.org/Homebrew/brew/builds/138777530\r\n\r\nAny ideas how to deal with that? Approaches I can think of:\r\n\r\n1. Generate an access token and use it in our Travis test runs.\r\n2. Skip tests that require talking to the GitHub API.\r\n3. Mock the `GitHub` module to provide canned responses instead of actually making an API call.\r\n\r\nNot sure what is best. The first option seems to be the easiest. The last one feels like the cleanest and most robust solution to me and would even allow testing these parts without a network connection.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 356
	},
	{
		"id" : 227063358,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-20T06:53:59Z",
		"body" : "> Generate an access token and use it in our Travis test runs.\r\n\r\nWe do actually already do this.\r\n\r\n> Skip tests that require talking to the GitHub API.\r\n> Mock the GitHub module to provide canned responses instead of actually making an API call.\r\n\r\nI'm happy with either here but rather than mocking the whole module I'd rather see us mock just the `curl` call.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 356
	},
	{
		"id" : 227212328,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-20T17:32:50Z",
		"body" : "> We do actually already do this.\r\n\r\nWe were only doing this for the `homebrew-core` and `legacy-homebrew` repositories, but not for the `brew` repository. I used the token from the former two and added it to the Travis CI configuration of `brew`.\r\n\r\n> I'm happy with either here but rather than mocking the whole module I'd rather see us mock just the `curl` call.\r\n\r\nThanks for phrasing it correctly! That's what I meant to say, but failed to express. Not sure though, if or when I find time to look into the latter (mocking the `curl` calls).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 356
	},
	{
		"id" : 227364769,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-21T07:43:38Z",
		"body" : "> We were only doing this for the homebrew-core and legacy-homebrew repositories, but not for the brew repository. I used the token from the former two and added it to the Travis CI configuration of brew.\r\n\r\nAh, nice üëç \r\n\r\n> Thanks for phrasing it correctly! That's what I meant to say, but failed to express. Not sure though, if or when I find time to look into the latter (mocking the curl calls).\r\n\r\nüëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 356
	},
	{
		"id" : 225777192,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-14T04:29:25Z",
		"body" : "I think we're probably better off just \"backporting\" the name and referring to everything as macOS.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 225787073,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-14T05:58:21Z",
		"body" : "Quite a few omissions if I'm not misgrepping this early in the morning, but maybe that's intentional as this PR in its current state might be just a proof of concept and a basis for discussion.\r\n\r\nI'm not too fond of making this dynamic, as this doesn't extend well to things like documentation. (What should out man page be using? Should the output of `brew help <command>` automatically adjust?)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 225794292,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-14T06:50:18Z",
		"body" : "> I think we're probably better off just \"backporting\" the name and referring to everything as macOS.\r\n\r\nI agree with this üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 225795404,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-14T06:56:40Z",
		"body" : "> I think we're probably better off just \"backporting\" the name and referring to everything as macOS.\r\n\r\nYou can probably guess by the sheer level of pedantry in this PR I wasn't going to be in love with this idea üòâ. I agree it's the simplest way, and I can understand simplicity and spend most of my time around here vouching for it, so I don't have strong objections but the pedant in me wanted to draw this up quickly just in case I could swing y'all onboard.\r\n\r\n> Quite a few omissions if I'm not misgrepping this early in the morning\r\n\r\nYeah, it's _just enough_ of a PoC for people to play with & actively use if they wanted to without me investing significant time into it if everyone turned around and laughed at me üòÑ.\r\n\r\n>  this doesn't extend well to things like documentation. (What should out man page be using? Should the output of brew help <command> automatically adjust?)\r\n\r\nI agree. Had a similar concern the second macOS was confirmed as official, heh. I was plotting to switch to OS X/macOS for documentation, but admit out of the gate that's clunky.\r\n\r\n_* Edit - Typo fix from `for` to `to`._",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 225797428,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-14T07:09:01Z",
		"body" : "We just have to convince your inner pedant that backporting the *superseding* name \"macOS\" is more correct and anyone who doesn't do that is in some way at least subtly *wrong*. (If necessary, we could publish some articles making this claim, which you could then use as citations when correcting the wayward users of the *deprecated* name \"OS X.\")",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 225797913,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-14T07:12:06Z",
		"body" : ">  (If necessary, we could publish some articles making this claim, which you could then use as citations when correcting the wayward users of the deprecated name \"OS X.\")\r\n\r\nI'd very much appreciate this. I think the \"gold standard\" here would be several long academic think pieces widely accepted by the developer community as thoughtful & persuasive. I think that'd cut it here as a cure for my rabid pedantry.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 225798117,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-14T07:13:16Z",
		"body" : "I'm sure someone is already planning a Semiotics thesis on this very subject. We should beat them to the punch. ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 225798613,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-14T07:16:07Z",
		"body" : "@DomT4 In that case a middle ground: when 10.12 gets released we use `macOS` in all documentation/caveats (as Apple will on their website, no doubt) and anything that does `#{MacOS.os_name} #{MacOS.version}` we replace with `#{MacOS.os_with_version}` which picks between OS X and macOS.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 225799385,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-14T07:20:25Z",
		"body" : "I see no need to use \"OS X\" anywhere in the code or the docs. It's like using outdated terms for various racial groups. You don't do it *just a little bit*. You just don't do it. :)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 225799751,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-14T07:22:30Z",
		"body" : "Technically it's not macOS until 10.12 is released, though üòâ ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 225800192,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-14T07:24:40Z",
		"body" : "üòÜ I'm not sure you can tie racist terms & Mac operating system series names together. The latter isn't likely to reinforce socioeconomic disparities between the external users of such terms & those groups the terms are designed to apply to üôà.\r\n\r\n>  In that case a middle ground: when 10.12 gets released we use macOS in all documentation/caveats (as Apple will on their website, no doubt) and anything that does #{MacOS.os_name} #{MacOS.version} we replace with #{MacOS.os_with_version} which picks between OS X and macOS.\r\n\r\nI'd be happy enough with that. Agree it can wait until macOS is golden master or something though. If everyone else is content with the suggestion willing to close this & note the idea down somewhere for that later date.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 225800742,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-14T07:27:21Z",
		"body" : "> everyone else is content with the suggestion willing to close this & note the idea down somewhere for that later date.\r\n\r\n@DomT4 I think, if you wanted, you could still implement the `MacOS.os_with_version` pretty easily now.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 225801125,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-14T07:29:15Z",
		"body" : "There are people who own machines that will not be upgradable to 10.12 and who cannot afford new machines at this time. You wouldn't want to marginalize them just for that reason, would you?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 225801287,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-14T07:29:58Z",
		"body" : "@ilovezfs üëè :trollface: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 225801786,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-14T07:32:25Z",
		"body" : "> You wouldn't want to marginalize them just for that reason, would you?\r\n\r\nPeak trolling, I applaud you.\r\n\r\n> I think, if you wanted, you could still implement the MacOS.os_with_version pretty easily now.\r\n\r\nAlright, will throw together 10 minutes later for a rewrite and testing.\r\n\r\n_Edit - I snipped my sentence, it didn't make much sense, it's not even 9am, give me a break üòÑ_.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 225853082,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-14T11:25:40Z",
		"body" : "Nice discussion here. :joy: If Xcode 8 beta release notes have any meaning, they are referencing 10.11 as ‚ÄúmacOS 10.11‚Äù, which may indicate a complete rebranding irrespective of the version.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 228624079,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-26T21:28:09Z",
		"body" : "FWIW, based on watching other FOSS projects my temptation is increasingly to swallow the boat & go for a wholesale rename to `macOS`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 229186029,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-28T21:15:13Z",
		"body" : "> FWIW, based on watching other FOSS projects my temptation is increasingly to swallow the boat & go for a wholesale rename to macOS.\r\n\r\nI'm üëç on that as long as we don't üö¢ until Apple calls it that on their website headers.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 238877216,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-10T14:06:26Z",
		"body" : "Let's explore this again once Sierra is closer & it's more obvious where Apple is going IRT to renaming the whole \"brand\".",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 359
	},
	{
		"id" : 247033193,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-14T14:34:37Z",
		"body" : "Ping @DomT4. You want to resume work on this? Ref #961.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 359
	},
	{
		"id" : 247056629,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-14T15:42:28Z",
		"body" : "Just to keep the history trail complete, my reply from the other thread: https://github.com/Homebrew/brew/issues/961#issuecomment-247036794.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 359
	},
	{
		"id" : 247059640,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-14T15:51:16Z",
		"body" : "can we please just s/os x/macos/ ... hard-coding pedantry is a waste of CPU cycles and everyone's time",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 359
	},
	{
		"id" : 247059850,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T15:51:54Z",
		"body" : "> everyone's time\r\n\r\nthen you are entitled to do no work to support it üòâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 359
	},
	{
		"id" : 247060060,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-14T15:52:31Z",
		"body" : "that was a foregone conclusion.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 359
	},
	{
		"id" : 247060132,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-14T15:52:42Z",
		"body" : "As usual :trollface: (Sorry üòâ)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 359
	},
	{
		"id" : 247060679,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-14T15:54:21Z",
		"body" : "https://github.com/Homebrew/brew/pull/359#issuecomment-225794292\r\n\r\nI guess that went out the window",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 359
	},
	{
		"id" : 247062006,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-14T15:58:16Z",
		"body" : "> I guess that went out the window\r\n\r\nIt evolved. We agreed to just call everything `macOS` in documentation, but there were objections to calling everything in code `macOS` and I didn't agree/disagree strongly enough to die on a hill over it either way.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 359
	},
	{
		"id" : 247062461,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-14T15:59:36Z",
		"body" : ">then you are entitled to do no work to support it\r\n\r\nyeah I'm just annoyed by the snarkiness of that when it was his position as well not exactly that long ago.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 359
	},
	{
		"id" : 247062998,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-14T16:01:12Z",
		"body" : "As I noted, others disagreed with calling everything `macOS` in code & I wasn't about to raise hell over it. I thought me not overruling the entire team was pretty much precisely what you've been dreaming of üòï.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 359
	},
	{
		"id" : 247065503,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-14T16:08:42Z",
		"body" : ">I thought me not overruling the entire team was pretty much precisely what you've been dreaming of :confused:.\r\n\r\nThat's never been my opinion of you or your behavior.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 359
	},
	{
		"id" : 247067712,
		"user" : {
			"login" : "JLHwung"
		},
		"created_at" : "2016-09-14T16:15:34Z",
		"body" : "> can we please just s/os x/macos/ ... hard-coding pedantry is a waste of CPU cycles and everyone's time\r\n\r\nLike @DomT4 said, \"within two years there will be no `OS X` version Homebrew formally supports\", so in the long term we will do `s/OS X/macOS` to save CPU cycles. But there will be at least couple years during which people still use OS X/macOS interchangeably, so currently, extra CPU cycles for transitional stage is not a bad idea.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 359
	},
	{
		"id" : 228430177,
		"user" : {
			"login" : "chmaynard"
		},
		"created_at" : "2016-06-24T18:51:58Z",
		"body" : "Maintainers, it's important to be precise and avoid spreading FUD.\r\n```Warning: You are using OS X 10.12.```\r\nAlmost correct. Apple changed the name to macOS. \r\n```We do not provide support for this pre-release version.```\r\nIt's unclear who \"we\" is or what \"provide support\" means.\r\n```You may encounter build failures or other breakages.```\r\nBuild failures occur all the time for many different reasons. Also, there's no such word as \"breakage\".\r\n```Please create pull-requests instead of filing issues.```\r\nWhat does this even mean? You don't want to know if your users are experiencing a problem?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 364
	},
	{
		"id" : 228452547,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-24T20:22:06Z",
		"body" : "Thanks for the feedback. We is us, support is this, [breakage is absolutely a word](http://www.merriam-webster.com/dictionary/breakage), and while fixing issues on prerelease operating systems is not a priority for us, especially early in the release cycle, we do appreciate and accept fixes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 364
	},
	{
		"id" : 249584815,
		"user" : {
			"login" : "edm00se"
		},
		"created_at" : "2016-09-26T14:25:15Z",
		"body" : "If anyone (else) comes across this after the fact, you may wish to check to confirm your version of homebrew is updating past 1.0. I found myself getting the message above after `brew update` and `brew upgrade`, but still needed to follow the info in [this thread](http://discourse.brew.sh/t/how-to-upgrade-brew-stuck-on-0-9-9/33) on the homebrew forum to get updated correctly. The message no longer shows after I got upgraded from v 0.9x to 1.x.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 364
	},
	{
		"id" : 226215488,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-15T15:02:24Z",
		"body" : "As far as the law seems to suggest, that _could_ be the case if we were collecting PII, which we aren't.\r\n\r\nTo quote myself from elsewhere:\r\n\r\n<img width=\"813\" alt=\"screen shot 2016-05-01 at 12 53 27\" src=\"https://cloud.githubusercontent.com/assets/6998367/16084939/648b4070-3312-11e6-8177-4f824bd2756d.png\">",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 366
	},
	{
		"id" : 226215749,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-15T15:03:10Z",
		"body" : "If this is unacceptable to you, please use another package manager.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 366
	},
	{
		"id" : 226238855,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-15T16:15:15Z",
		"body" : "@adamv Long time no see, you well? Can we see your `brew config` and `brew doctor`? Ta!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 367
	},
	{
		"id" : 226332822,
		"user" : {
			"login" : "adamv"
		},
		"created_at" : "2016-06-15T21:58:58Z",
		"body" : "Doing well, thanks. Hope everything is good with  you all. Sorry I only drop by when I have a problem!\r\n\r\n`brew doctor` is:\r\n\r\n```\r\nWarning: Your Homebrew is not installed to /usr/local\r\nYou can install Homebrew anywhere you want, but some brews may only build\r\ncorrectly if you install in /usr/local. Sorry!\r\n```\r\n\r\n`brew config` is:\r\n\r\n```\r\n$ brew config\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: c3c233dd809f9c358ba8aa5268b64c335202bc56\r\nLast commit: 8 weeks ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 405f79e67ab8854a1b4e0bb6404032a61521084f\r\nCore tap last commit: 6 hours ago\r\nHOMEBREW_PREFIX: /Users/adamv/hb\r\nHOMEBREW_REPOSITORY: /Users/adamv/source/homebrew\r\nHOMEBREW_CELLAR: /Users/adamv/source/homebrew/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: 8-core 64-bit haswell\r\nOS X: 10.11.5-x86_64\r\nXcode: N/A\r\nCLT: 7.3.1.0.1.1461711523\r\nClang: 7.3 build 703\r\nX11: N/A\r\nSystem Ruby: 2.0.0-p648\r\nPerl: /usr/bin/perl\r\nPython: /Users/adamv/hb/bin/python => /Users/adamv/source/homebrew/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/bin/python2.7\r\nRuby: /usr/bin/ruby => /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby\r\nJava: 1.8.0_74\r\n```\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 367
	},
	{
		"id" : 226332921,
		"user" : {
			"login" : "adamv"
		},
		"created_at" : "2016-06-15T21:59:29Z",
		"body" : "Off-topic, but if any maintainers are in the Issaquah / greater-Seattle area, do hit me up and we'll grab a bite/pint.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 367
	},
	{
		"id" : 226343447,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-15T22:52:46Z",
		"body" : "> ```\r\n> ORIGIN: https://github.com/Homebrew/brew.git\r\n> HEAD: c3c233dd809f9c358ba8aa5268b64c335202bc56\r\n> Last commit: 8 weeks ago\r\n> ```\r\n\r\nThis is the problem. For whatever reason you Homebrew repository (the one with the package manager inside) is stuck in the past, while the core forumlae repository has advanced as usual. This is problematic because recent changes to formulae use features added to the package manager.\r\n\r\nI suspect you have `HOMEBREW_DEVELOPER` set in your environment and checked out the main repository to a non-`master` branch. Under these conditions, `brew update` will update the `master` branch, but afterwards will restore your working directory to the previous state (original branch and local modifications, if any). This should fix your problem:\r\n\r\n```\r\ncd $(brew --repository)\r\ngit checkout master\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 367
	},
	{
		"id" : 226541609,
		"user" : {
			"login" : "adamv"
		},
		"created_at" : "2016-06-16T16:37:43Z",
		"body" : "That was it, thanks Martin.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 367
	},
	{
		"id" : 226566407,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-16T18:08:25Z",
		"body" : "> I suspect you have HOMEBREW_DEVELOPER set in your environment and checked out the main repository to a non-master branch. Under these conditions, brew update will update the master branch, but afterwards will restore your working directory to the previous state (original branch and local modifications, if any). This should fix your problem:\r\n\r\nWorth adding this to `brew doctor` or `brew config`, @UniqMartin?\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 367
	},
	{
		"id" : 226742377,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T11:05:47Z",
		"body" : "> Worth adding this to `brew doctor` or `brew config`, @UniqMartin?\r\n\r\nYou mean a doctor check whether any of the tap repositories and the package manager repository has a non-`master` branch checked out (or non-upstream branch using the same logic we use in `update.sh`)? I think the least we could do would be to append something to the SHA1-lines in `brew config` if the two main repositories that are listed there aren't on the `master` branch ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 367
	},
	{
		"id" : 226745270,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-17T11:23:24Z",
		"body" : "> You mean a doctor check whether any of the tap repositories and the package manager repository has a non-master branch checked out (or non-upstream branch using the same logic we use in update.sh)?\r\n\r\nThat could work. I was thinking of flagging `HOMEBREW_DEVELOPER`.\r\n\r\n> I think the least we could do would be to append something to the SHA1-lines in brew config if the two main repositories that are listed there aren't on the master branch ‚Ä¶\r\n\r\nYeh, `git symbolic-ref --short` should get you a branch name from that SHA; that'd be useful.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 367
	},
	{
		"id" : 226747025,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T11:33:56Z",
		"body" : "> That could work. I was thinking of flagging `HOMEBREW_DEVELOPER`.\r\n\r\nI figure this could be annoying if it was part of `brew doctor`. I'd never get a zero exit status again, nor any of our more prolific contributors that we want to encourage to use `HOMEBREW_DEVELOPER`, too, if I remember some recent discussion correctly. (Well, technically I already get a nonzero exit status, because I'm not using `/usr/local` for my Homebrew installation.)\r\n\r\n> Yeh, `git symbolic-ref --short` should get you a branch name from that SHA; that'd be useful.\r\n\r\nI'll put this on my list and see to it when things are a little calmer, if nobody beats me to it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 367
	},
	{
		"id" : 226425062,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-16T08:46:33Z",
		"body" : "Sorry, we don't accept formula requests. Additionally, these are GUI applications distributed as DMGs with pre-compiled binaries. As such, they are much more suited for inclusion in [Homebrew Cask](https://github.com/Caskroom/homebrew-cask).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 368
	},
	{
		"id" : 226635181,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-16T22:44:09Z",
		"body" : "CC @UniqMartin ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 369
	},
	{
		"id" : 226766074,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T13:16:39Z",
		"body" : "I'm afraid this doesn't yet take into account the *widely agreed upon* rule of an empty line between the `revision` and `head` lines but no empty line between the afterwards `revision`-less block and the possibly following `head` line ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 369
	},
	{
		"id" : 226774311,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-17T13:52:38Z",
		"body" : ">I'm afraid this doesn't yet take into account the widely agreed upon rule of an empty line between the revision and head lines but no empty line between the afterwards revision-less block and the possibly following head line ‚Ä¶\r\n\r\nThis seems to take care of that:\r\n```\r\ndiff --git a/Library/Homebrew/dev-cmd/bump-formula-pr.rb b/Library/Homebrew/dev-cmd/bump-formula-pr.rb\r\nindex e0285e0..f0fbd14 100644\r\n--- a/Library/Homebrew/dev-cmd/bump-formula-pr.rb\r\n+++ b/Library/Homebrew/dev-cmd/bump-formula-pr.rb\r\n@@ -19,11 +19,11 @@ module Homebrew\r\n     if ARGV.dry_run?\r\n       contents = path.open(\"r\") { |f| Formulary.set_encoding(f).read }\r\n       contents.extend(StringInreplaceExtension)\r\n-      replacement_pairs.each do |old, new|\r\n+      replacement_pairs.each do |old, new, audit|\r\n         unless ARGV.flag?(\"--quiet\")\r\n           ohai \"replace #{old.inspect} with #{new.inspect}\"\r\n         end\r\n-        contents.gsub!(old, new)\r\n+        contents.gsub!(old, new, audit)\r\n       end\r\n       if contents.errors.any?\r\n         raise Utils::InreplaceError, path => contents.errors\r\n@@ -108,6 +108,8 @@ module Homebrew\r\n       ]\r\n     end\r\n \r\n+    replacement_pairs << [\"\\n\\n  head \\\"\", \"\\n  head \\\"\", false]\r\n+\r\n     new_contents = inreplace_pairs(formula.path, replacement_pairs)\r\n \r\n     new_formula_version = formula_version(formula, requested_spec, new_contents)\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 369
	},
	{
		"id" : 226781089,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T14:18:25Z",
		"body" : "That's a possible solution, but can also be achieved by slightly modifying the replacement:\r\n\r\n```ruby\r\n[/^  revision \\d+\\n(\\n(  head \"))?/m, \"\\\\2\"]\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 369
	},
	{
		"id" : 226782406,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-17T14:23:12Z",
		"body" : "Works for me. Of course, \"Some people, when confronted with a problem, think 'I know, I'll use regular expressions.'  Now they have two problems.\"",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 369
	},
	{
		"id" : 226783412,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-17T14:26:55Z",
		"body" : "@UniqMartin Also, one issue with your way is that it doesn't \"fix\" cases that fail to conform to the \"convention\" but have no `revision` at the outset. Of course, that could be seen as a feature not a bug, but that's not obvious to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 369
	},
	{
		"id" : 226789422,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T14:48:14Z",
		"body" : "> Works for me. Of course, \"Some people, when confronted with a problem, think 'I know, I'll use regular expressions.' Now they have two problems.\"\r\n\r\nOf course! Why would I have spent so much time studying regular expressions and then end up not applying that knowledge? üòú\r\n\r\n> Also, one issue with your way is that it doesn't \"fix\" cases that fail to conform to the \"convention\" but have no revision at the outset. Of course, that could be seen as a feature not a bug, but that's not obvious to me.\r\n\r\nDefinitely a feature! This is supposed to remove revision lines, not to auto-correct random style issues.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 369
	},
	{
		"id" : 226802847,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-17T15:36:18Z",
		"body" : "@UniqMartin PR refreshed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 369
	},
	{
		"id" : 226804462,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T15:42:33Z",
		"body" : "Looks good to me! Feel free to :ship: as soon as the lights turn green (though the CI hardly looks at the modified file except for some very basic problems).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 369
	},
	{
		"id" : 226805297,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-17T15:45:35Z",
		"body" : "@UniqMartin BTW, for a follow-up PR, I'm wondering if we should have bump-formula-pr run `brew audit --strict` on the modified file before actually opening the PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 369
	},
	{
		"id" : 226807883,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T15:54:56Z",
		"body" : "> BTW, for a follow-up PR, I'm wondering if we should have bump-formula-pr run `brew audit --strict` on the modified file before actually opening the PR.\r\n\r\nSounds like a good idea. Would actually be somewhat embarrassing to create such a PR and then find out from the bot that some substitution accidentally did something silly and borked the formula.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 369
	},
	{
		"id" : 226713665,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-17T08:40:01Z",
		"body" : "A few comments but generally looking great üòç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 370
	},
	{
		"id" : 226815414,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T16:25:11Z",
		"body" : "The de-duplication of this stuff is good, but may I suggest a somewhat different approach? Here is what I'd hope this refactoring would yield:\r\n\r\n- A method named `setup_test_formula(name)` that:\r\n  - Creates either of three possible formulae depending on the given `name`: `testball`, `foo`, or `bar`.\r\n  - Adds the path (a `Pathname` object) of the just created formula to an array `@formula_files`.\r\n  - Returns that same path for use within the calling `test_*` method.\r\n- A modified `teardown` method that:\r\n  - Iterates over the entries of `@formula_files` and unlinks all those files. No need to do this in every single test in the `ensure` block.\r\n- A lot of modified `test_*` methods that:\r\n  - Only use the path returned by the `setup_test_formula` method and refrain from touching the `@formula_files` instance variable.\r\n  - Quite a few dropped or shortened `ensure` blocks.\r\n\r\nI hope I was somewhat convincing. üò∏ I strongly believe this will combine the benefits of less boilerplate (already achieved in the current code) with greater clarity (explicitly requesting certain formulae by name and getting their path in return while avoiding implicitly defined instance variables).\r\n\r\n----\r\n\r\nTo accommodate the currently unhandled cases where a more customized formula is needed, the method could be extended with a second argument to accept something like:\r\n\r\n```ruby\r\nbaz_path = setup_test_formula \"baz\", <<-EOS.undent\r\n  desc \"The baz formula\"\r\n  url \"http://example.com/baz-0.1.tar.gz\"\r\n  depends_on \"foo\"\r\n  depends_on \"bar\" => :optional\r\nEOS\r\n```\r\n\r\nThis would allow to still benefit from the auto-cleanup logic suggested above and the method could further reduce the necessary boilerplate code by providing the surrounding `class Baz` (generated with `Formulary.class_s` from `name`) and `end` lines.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 370
	},
	{
		"id" : 227318556,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-06-21T01:42:53Z",
		"body" : "Thanks for the suggestions, @UniqMartin! This was a fun challenge.\r\n\r\nI have:\r\n- defined `setup_test_formula`.\r\n- modified `setup`, `teardown`, and various `test_*` methods to account for the `@formula_files` array.\r\n\r\nI have also:\r\n- fixed most of the \"offenses\" detected by `brew style test_integration_cmds.rb`\r\n- refactored `test_desc` and `test_home` according to prior discussion re: `test_search`\r\n\r\nI hope it's OK that I made those extra changes even if they weren't strictly related to the task at hand; I figured I might as well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 370
	},
	{
		"id" : 227321719,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-21T02:07:39Z",
		"body" : "Unsurprisingly, I really like the approach. :joy: But in all seriousness, I think this is a very nice improvement to the testing code and a nice consolidation of the test formula setup logic. :+1: The diff statistics are also quite encouraging (we got rid of 166 basically redundant lines):\r\n\r\n```\r\n$ git merge pr/370\r\nAuto-merging Library/Homebrew/test/test_integration_cmds.rb\r\nMerge made by the 'recursive' strategy.\r\n Library/Homebrew/test/test_integration_cmds.rb | 388 +++++++++++++++++++----------------------------------------------\r\n 1 file changed, 111 insertions(+), 277 deletions(-)\r\n```\r\n\r\n> I hope it's OK that I made those extra changes even if they weren't strictly related to the task at hand; I figured I might as well.\r\n\r\nIdeally, these would have been separate commits, but I don't mind accepting this as-is (modulo the minor indentation fixes pointed out in the code comments).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 370
	},
	{
		"id" : 227329253,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-06-21T03:10:02Z",
		"body" : "> > I hope it's OK that I made those extra changes even if they weren't strictly related to the task at hand; I figured I might as well.\r\n\r\n> Ideally, these would have been separate commits, but I don't mind accepting this as-is (modulo the minor indentation fixes pointed out in the code comments).\r\n\r\nüëç  Thank you! I'll keep this in mind for future reference.\r\n\r\nI've made the indentation fixes, but I'm having trouble with `git rebase` (again üò£ )... attempts to remove the previous commit leads me to a modified file where the work of my previous commit has been wiped out, and there are merge conflicts for `test_deps` and `test_uses`...\r\n\r\nThis may be because I blindly ran `git rebase -s recursive -X ours master` at some point during this process. Sorry, any idea of how to resolve this problem?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 370
	},
	{
		"id" : 227332385,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-21T03:37:12Z",
		"body" : "> I've made the indentation fixes, but I'm having trouble with `git rebase` (again üò£ )... attempts to remove the previous commit leads me to a modified file where the work of my previous commit has been wiped out, and there are merge conflicts for `test_deps` and `test_uses`. Normally, just removing the previous commit during `rebase` seems to bring the desired effect...\r\n\r\nI'm assuming you're talking about `git rebase -i`? You almost never want to remove individual commits in the sheet this brings up, as that indeed removes the changes made in the respective commits. This would also explain the merge conflicts as the follow-up adjustments depend on those changes. What you instead want to do in almost all cases is combine the changes from multiple commits, e.g. you leave the first commit at `pick` and change the next commit in the list from `pick` to `squash`. This will combine these two commits and ask you for the commit message of this combined commit in the process.\r\n\r\nOr use `git commit --amend`, if all you want to do is make adjustments to the most recent commit.\r\n\r\n> This may be because I blindly ran `git rebase -s recursive -X ours master` at some point during this process. Sorry, any idea of how to resolve this problem?\r\n\r\nDon't do that, unless you know exactly what it is doing or someone else (me) has advised to use it in very specific circumstances after having tested it does the right thing. üòõ\r\n\r\nYou almost always want to use a regular `git rebase` or `git rebase -i` depending on whether you want to rebase your changes on top of an updated upstream branch or whether you want to squash/rearrange/‚Ä¶ commits in your current branch (but usually without actually *rebasing* your branch, i.e. the base commit in the upstream branch from where your branch forks off remains the same).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 370
	},
	{
		"id" : 227333147,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-21T03:44:01Z",
		"body" : "And if you're stuck with a borked local branch: The easiest fix in this case would be to throw away the local branch with `git branch -D refactor-formula-file-creation` and then recreate it from the remote branch in your forked repository via `git checkout eirinikos/refactor-formula-file-creation` (it is still in good condition). The indentation fixes are small enough to be manually reapplied on top of that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 370
	},
	{
		"id" : 227533525,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-06-21T18:43:07Z",
		"body" : "> > This may be because I blindly ran `git rebase -s recursive -X ours master` at some point during this process. Sorry, any idea of how to resolve this problem?\r\n\r\n> Don't do that, unless you know exactly what it is doing or someone else (me) has advised to use it in very specific circumstances after having tested it does the right thing. üòõ\r\n> \r\n> You almost always want to use a regular git rebase or git rebase -i depending on whether you want to rebase your changes on top of an updated upstream branch or whether you want to squash/rearrange/‚Ä¶ commits in your current branch (but usually without actually rebasing your branch, i.e. the base commit in the upstream branch from where your branch forks off remains the same).\r\n\r\nThanks @UniqMartin! Yup! I ought not to have done that; I guess I often throw caution to the wind when things seem desperate. üò¨ \r\n\r\n> And if you're stuck with a borked local branch: The easiest fix in this case would be to throw away the local branch with `git branch -D refactor-formula-file-creation` and then recreate it from the remote branch in your forked repository via `git checkout eirinikos/refactor-formula-file-creation` (it is still in good condition).\r\n\r\nI went ahead with this route, did `git add` and `git commit`, checked out and switched to a new branch, and successfully squashed the commits with `git rebase -i`. Thanks for the explanations; I've had a lot of trouble with rebasing and I'm still getting familiar with its usage.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 370
	},
	{
		"id" : 227619012,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-22T01:27:03Z",
		"body" : "I'm happy with this refactoring and think it's ready to be merged, but will keep it open a bit longer (maybe a day or two) so that @MikeMcQuaid and other maintainers have a chance to voice their opinions.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 370
	},
	{
		"id" : 227729759,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-22T12:37:23Z",
		"body" : "üòç @eirinikos!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 370
	},
	{
		"id" : 226651481,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-06-17T00:28:35Z",
		"body" : "See https://github.com/Homebrew/homebrew-science/pull/3753#issuecomment-226634919",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226694092,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-17T06:50:39Z",
		"body" : "I'm not sure if it does and if it doesn't: we'd welcome a PR to do so.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226783066,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-06-17T14:25:30Z",
		"body" : "Should the `RPATH` simply be deleted? I believe it's redundant with the absolute path `install_name` mechanism of finding shared libraries on Mac.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226783322,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-06-17T14:26:34Z",
		"body" : "`sailfish` includes an `RPATH`, which makes the bottle non-relocatable. Removing the `RPATH` makes it `cellar :any`.\r\n\r\n```\r\n‚ùØ‚ùØ‚ùØ brew install sailfish\r\n‚ùØ‚ùØ‚ùØ otool -l /usr/local/bin/sailfish |grep RPATH -A2\r\n          cmd LC_RPATH\r\n      cmdsize 56\r\n         path /usr/local/Cellar/sailfish/0.10.1/lib (offset 12)\r\n‚ùØ‚ùØ‚ùØ brew bottle -v sailfish\r\nWarning: String '/usr/local/Cellar' still exists in these files:\r\n/usr/local/Cellar/sailfish/0.10.1/bin/sailfish\r\n --> match '/usr/local/Cellar/sailfish/0.10.1/lib' at offset 0x9e4\r\n‚ùØ‚ùØ‚ùØ chmod u+w /usr/local/bin/sailfish\r\n‚ùØ‚ùØ‚ùØ install_name_tool -delete_rpath /usr/local/Cellar/sailfish/0.10.1/lib /usr/local/bin/sailfish\r\n‚ùØ‚ùØ‚ùØ brew bottle -v sailfish\r\n    cellar :any\r\n```\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226783418,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-17T14:26:57Z",
		"body" : "If it can be: yes, that makes sense.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226785267,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-06-17T14:33:42Z",
		"body" : "There's a relevant discussion on RPATH in Conda at https://github.com/conda/conda-build/issues/279",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226785897,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-06-17T14:35:57Z",
		"body" : "After some reading, it looks as though `RPATH` aren't used on Mac OS unless explicitly requested by `@rpath` in the `install_name`. If none of the dependent libraries use `@rpath` in the `install_name`, then `RPATH` is not used and can be safely deleted.\r\ne.g.\r\n`install_name = /usr/lib/libncurses.5.4.dylib`\r\nis equivalent to\r\n`install_name = @rpath/libncurses.5.4.dylib`, `RPATH=/usr/lib`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226786682,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T14:38:52Z",
		"body" : "Indeed, none of our Mach-O handling reads or manipulates the `LC_RPATH` load commands. That's probably because RPATHs haven't been a thing on OS X for too long and were very rarely used. The only thing stopping this from happening is that `otool -l` output is slightly more annoying to parse than `otool -L` and there's no more convenient way (I'm aware of) to list the embedded RPATHs.\r\n\r\nDepending on the urgency of this:\r\n\r\n- We implement a solution now that uses `otool` and `install_name_tool` to perform the task.\r\n- We wait until later this summer [`ruby-macho`](https://github.com/Homebrew/ruby-macho) learns to manipulate RPATHs and Homebrew switches to it for its Mach-O inspection and manipulation needs. At this point this feature will be trivial to implement as we'd be coding against a Ruby API. (`ruby-macho` is one of this year's Google Summer of Code projects.)\r\n\r\n> Should the `RPATH` simply be deleted? I believe it's redundant with the absolute path `install_name` mechanism of finding shared libraries on Mac.\r\n\r\nProbably, which is easy enough to do with `install_name_tool` once you know which path to remove. It would be good to collect a few formulae that use RPATHs and to check how they use them (also taking into account the state before our manipulation of `LC_*_DYLIB` load commands).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226788107,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T14:43:40Z",
		"body" : "> If none of the dependent libraries use `@rpath` in the `install_name`, then `RPATH` is not used and can be safely deleted.\r\n\r\nThat's not entirely correct. You'd have to inspect the full tree of dynamic dependencies, including libraries loaded via `dlopen` to make sure none of them depend on that particular RPATH in their `@rpath/`-prefixed dylib load commands. That's not even academic, as a frequent setup (at least in my experience) is that only the main executable contains the `LC_RPATH` load command and then all other dependencies rely on that and express their inter-dependencies using `@rpath/`-prefixed dylib load commands.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226788813,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-06-17T14:46:08Z",
		"body" : "Good clarification. Particularly the `dlopen` issue means that it's impossibly to determine statically whether the `RPATH` is used or not. So it's never safe to delete the `RPATH` without manual inspection, in which case it should be relocated using `@@HOMEBREW_CELLAR@@` like `install_name`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226793723,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T15:03:06Z",
		"body" : "Of the 1959 Mach-O binaries in my Homebrew installation, only one has embedded RPATHs. Though that one is truly beautiful (the bottled `shellcheck` binary, it needs none of those):\r\n\r\n```\r\n/opt/homebrew/Cellar/shellcheck/0.4.4/bin/shellcheck:\r\n  LC_LOAD_DYLIB=/usr/lib/libiconv.2.dylib\r\n  LC_LOAD_DYLIB=/usr/lib/libSystem.B.dylib\r\n  LC_RPATH=/usr/local/Cellar/shellcheck/0.4.4/lib/x86_64-osx-ghc-7.10.3/ShellCheck-0.4.4-Di0vBeJ5G22HeAaHhOLnuj\r\n  LC_RPATH=/private/tmp/shellcheck-20160515-52824-1fxs4fo/shellcheck-0.4.4/.cabal-sandbox/lib/x86_64-osx-ghc-7.10.3/QuickCheck-2.8.2-8v0RiFeBskC7UIoPaBQj4x\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/array_67iodizgJQIIxYVTp4emlA\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/base_HQfYBxpPvuw8OunzQu6JGM\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/binar_3uXFWMoAGBg0xKP9MHKRwi\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/rts\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/bytes_6VWy06pWzJq9evDvK2d4w6\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/conta_2C3ZI8RgPO2LBMidXKTvIU\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/deeps_6vMKxt5sPFR0XsbRWvvq59\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/direc_0hFG6ZxK1nk4zsyOqbNHfm\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/filep_Ey7a1in9roBAE8bUFJ5R9m\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/ghcpr_8TmvWUcS1U1IKHT0levwg3\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/integ_2aU3IZNMF9a7mQ0OzsZ0dS\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/libexec/integer-gmp/lib\r\n  LC_RPATH=/private/tmp/shellcheck-20160515-52824-1fxs4fo/shellcheck-0.4.4/.cabal-sandbox/lib/x86_64-osx-ghc-7.10.3/json-0.9.1-7kMKfrkn0Qy3BxYPUrdvN9\r\n  LC_RPATH=/private/tmp/shellcheck-20160515-52824-1fxs4fo/shellcheck-0.4.4/.cabal-sandbox/lib/x86_64-osx-ghc-7.10.3/mtl-2.2.1-1XgQYjia7VJ5otlr6LA5f9\r\n  LC_RPATH=/private/tmp/shellcheck-20160515-52824-1fxs4fo/shellcheck-0.4.4/.cabal-sandbox/lib/x86_64-osx-ghc-7.10.3/parsec-3.1.11-3g02YRopkV0859dUlfXjDZ\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/prett_JItwetRppk1H5Uq3xbjDGC\r\n  LC_RPATH=/private/tmp/shellcheck-20160515-52824-1fxs4fo/shellcheck-0.4.4/.cabal-sandbox/lib/x86_64-osx-ghc-7.10.3/primitive-0.6.1.0-CanAn0ZmSDe1O8lK6kBSP2\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/proce_52AgREEfSrnJLlkGV9YZZJ\r\n  LC_RPATH=/private/tmp/shellcheck-20160515-52824-1fxs4fo/shellcheck-0.4.4/.cabal-sandbox/lib/x86_64-osx-ghc-7.10.3/random-1.1-8PKo7QZOLuqJhOvzBKhJvd\r\n  LC_RPATH=/private/tmp/shellcheck-20160515-52824-1fxs4fo/shellcheck-0.4.4/.cabal-sandbox/lib/x86_64-osx-ghc-7.10.3/regex-base-0.93.2-5g5YXZiScrKLs2R8SL8lg0\r\n  LC_RPATH=/private/tmp/shellcheck-20160515-52824-1fxs4fo/shellcheck-0.4.4/.cabal-sandbox/lib/x86_64-osx-ghc-7.10.3/regex-tdfa-1.2.2-8NbBLGNW5Pf3YobyTLo8PR\r\n  LC_RPATH=/private/tmp/shellcheck-20160515-52824-1fxs4fo/shellcheck-0.4.4/.cabal-sandbox/lib/x86_64-osx-ghc-7.10.3/syb-0.6-8Ynz83QzMazFTSpu5qYzrN\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/templ_GJPvtLC64aA4c1Jl10o2qt\r\n  LC_RPATH=/private/tmp/shellcheck-20160515-52824-1fxs4fo/shellcheck-0.4.4/.cabal-sandbox/lib/x86_64-osx-ghc-7.10.3/text-1.2.2.1-8AnM1c81gDP9ebLwfSU223\r\n  LC_RPATH=/private/tmp/shellcheck-20160515-52824-1fxs4fo/shellcheck-0.4.4/.cabal-sandbox/lib/x86_64-osx-ghc-7.10.3/tf-random-0.5-FWUyVDgIgj9L0dx0uEV4dc\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/time_FTheb6LSxyX1UABIbBXRfn\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/trans_GZTjP9K5WFq01xC9BAGQpF\r\n  LC_RPATH=/usr/local/Cellar/ghc/7.10.3b/lib/ghc-7.10.3/unix_KZL8h98IqDM57kQSPo1mKx\r\n```\r\n\r\nI agree, we should probably clean them up and adjust the ones pointing into our prefix.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226797004,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-06-17T15:14:49Z",
		"body" : "Does `shellcheck` use `dlopen`? Otherwise I see only two `LC_LOAD_DYLIB` neither of which use `@rpath`.\r\n\r\n`sailfish`, which has an `RPATH` but no `@rpath` uses, is built using `cmake`. Is the default behaviour to set `RPATH`, or is something amiss with `sailfish`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226801258,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T15:30:20Z",
		"body" : "> Does `shellcheck` use `dlopen`? Otherwise I see only two `LC_LOAD_DYLIB` neither of which use `@rpath`.\r\n\r\nNo, not that I'm aware of. The libraries might exist in the given paths while `shellcheck` is built by the Glasgow Haskell compiler, but the end result is a statically linked binary that (as you correctly observed) only links to two system libraries. In any case, the binary is working fine though none of those paths specified in the `LC_RPATH` commands exist on my system.\r\n\r\n> `sailfish`, which has an `RPATH` but no `@rpath` uses, is built using `cmake`. Is the default behaviour of `cmake` to set `RPATH`, or is something amiss with `sailfish`?\r\n\r\nSorry, I'm not familiar with `sailfish`, but I presume they decided to use RPATHs in their OS X builds to make relocating the binaries and/or libraries easier. Assuming it's a set of libraries, adding a new RPATH in a client binary is easier than adjusting all dylib load commands.\r\n\r\n> I'm wondering whether all `cmake`-compiled executables are non-relocatable due to `RPATH`.\r\n\r\nCertainly not. A non-trivial amount of my binaries was built by `cmake` and none of them contain any RPATHs. That's totally up to the upstream authors and what they do with their build systems ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226803319,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-06-17T15:38:05Z",
		"body" : "`sailfish` does not use `RPATH` on Mac OS to locate any of its libraries, even though `RPATH` is set. Delete its `RPATH` and it works just fine. Perhaps its `cmake` configuration is incorrect.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226803664,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-06-17T15:39:24Z",
		"body" : "> In any case, the binary is working fine though none of those paths specified in the LC_RPATH commands exist on my system.\r\n\r\n`shellcheck` may be `cellar :any` if you delete all its `RPATH` entries, like `sailfish`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226806837,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-17T15:51:17Z",
		"body" : "> Perhaps its cmake configuration is incorrect.\r\n\r\nI vaguely recall from my CMake days there may be a way to globally disable such things. If not globally, there will be a way my either passing in a config variable or patching an option in.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226807047,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T15:52:06Z",
		"body" : "> `sailfish` does not use `RPATH` on Mac OS to locate any of its libraries, even though `RPATH` is set.\r\n\r\nSo in this regard it is similar to my `shellcheck` example ‚Ä¶\r\n\r\n> `shellcheck` may be `cellar :any` if you delete all its `RPATH` entries, like `sailfish`.\r\n\r\nQuite likely. I guess many of the formulae that are built with `ghc` might fall in that category, so that would be quite a win for relocatable bottles with a comparatively simple change.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226816260,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-06-17T16:28:27Z",
		"body" : "`pandoc`, also compiled by `ghc`, does not have any `RPATH`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 238813751,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:28:28Z",
		"body" : "This has been improved as much as it will be for now. If this is still broken for you: we'll accept PRs for this but we're not actively working on it at this time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 238856566,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-10T12:50:51Z",
		"body" : "*Some additional information:* Once #656 ships, the `ruby-macho` backend for Mach-O manipulation will have full support for enumerating, adding, modifying, and deleting RPATHs. Once it becomes the default backend and the `cctools`-based implementation has been removed, we can start using these new features, e.g. remove bogus RPATHs that point to temporary locations or adjust those that point into the Homebrew prefix to further improve relocatability of bottles.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 238910909,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-08-10T15:50:00Z",
		"body" : "Thanks, Martin!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 252741610,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-10-10T20:47:22Z",
		"body" : "Hey, all. I'm currently working on this.\r\n\r\nJust so that I'm sure I understand, is this the logic we want?\r\n\r\n* Delete nonsensical RPATHS (i.e., those pointing to nonexistent directories)\r\n* Replace `/usr/local/Cellar` in RPATHS with `CELLAR_PLACEHOLDER` for later relocation in `keg_relocate`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 252741761,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-10T20:48:03Z",
		"body" : "@woodruffw üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 371
	},
	{
		"id" : 226700797,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-17T07:33:11Z",
		"body" : "This doesn't really make sense to me since the other command line switches are actually setting something, whereas this is only validating something. If the idea is to validate the version, it's in the dry-run output.\r\n\r\nIf we are going to have a `--version` switch, it would probably make more sense to be for the purpose of setting the version in the cases where it needs to be specified manually, and raise an error that the switch should not be provided when it's redundant with what's detected from the URL, just as brew audit does.\r\n\r\nHow would you distinguish between when the version is explicitly specified for the sake of validation and when the version is explicitly specified for the sake of overriding? If anything, they would seem to need to be two separate switches.\r\n\r\nAlso, I don't think the meaning of these should be planned to change over time, since this is intended as an API of sorts.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 372
	},
	{
		"id" : 226712322,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-17T08:33:29Z",
		"body" : "> This doesn't really make sense to me since the other command line switches are actually setting something, whereas this is only validating something. If the idea is to validate the version, it's in the dry-run output.\r\n> \r\n> If we are going to have a --version switch, it would probably make more sense to be for the purpose of setting the version in the cases where it needs to be specified manually, and raise an error that the switch should not be provided when it's redundant with what's detected from the URL, just as brew audit does.\r\n\r\nAgreed üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 372
	},
	{
		"id" : 226794371,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-06-17T15:05:33Z",
		"body" : "That totally makes sense. I think I'll close this while I work on adding the following behavior:\r\n\r\n1. if `--version` tag is not supplied, keep existing behavior\r\n2. if `--version` is supplied:\r\n\r\n* and matches the `FromURL` version, make sure the new formula doesn't have an explicit `version` field set\r\n* and doesn't match the `FromURL` version, set an explicit `version` based on the supplied value",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 372
	},
	{
		"id" : 226730356,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-17T09:59:01Z",
		"body" : "Can you provide a bit more context for this? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 226733736,
		"user" : {
			"login" : "nijikon"
		},
		"created_at" : "2016-06-17T10:16:56Z",
		"body" : "https://github.com/Homebrew/homebrew-core/pull/2003",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 226798136,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T15:18:50Z",
		"body" : "> Have you added an explanation of what your changes do and why you'd like us to include them?\r\n\r\nPersonally, I'd hope that this was also done in PRs by maintainers. (Ticking the boxes from the PR template that actually apply would also be a nice touch.) Right now the commit message and PR only reveal *what* was changed, but completely leaves out the *why*. To be honest, that's still not clear to me even after reading the linked PR ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 226917566,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-18T02:46:05Z",
		"body" : "I'm not sure on the need to do this, to be honest.\r\n\r\n`homebrew-pypi-poet` will change them when used, and a lot of formula authors use that so it should happen fairly naturally, but otherwise I'm not massively keen for `brew audit` to start kicking people to change URLs for what as far as I'm aware was a cosmetic change.\r\n\r\nIf we're that bothered by it I'd rather someone just run a quick `sed` through the core.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 226950057,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-18T16:02:54Z",
		"body" : "Good thought but I don't think this is the best way to address this. Any existing PyPI URLs are fine; if we decide we need to change them we should do it automatically instead of piecemeal.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 226951334,
		"user" : {
			"login" : "nijikon"
		},
		"created_at" : "2016-06-18T16:26:44Z",
		"body" : "We can change all existing to the new ones. I assumed based on Homebrew/homebrew-core#2003 that this is what we want to do. I already started to change the url in new PRs.  So what do we want to do with it? Close this or carry on and change all url in core to the new ones and merge this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 226951519,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-18T16:30:12Z",
		"body" : "üëç to changing all existing ones without a PR (i.e. committing to `master`). Let's make this check only for `audit --strict`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 226952109,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-18T16:42:01Z",
		"body" : "Just to be clear, the difference is aesthetic, not functional; I don't think anything needs to change right now in any existing formula.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 226965040,
		"user" : {
			"login" : "nijikon"
		},
		"created_at" : "2016-06-18T21:10:35Z",
		"body" : "OK, so any objections for adding this in ```strict```?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 226971340,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-18T23:51:20Z",
		"body" : "I don't think this check affects the correctness of formulas. I don't mind if formulas use either or both patterns; if you do, this change shouldn't hurt anything, so I don't object.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 226994843,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-19T12:30:14Z",
		"body" : "I don't think this merits audit code particularly, given there's nothing \"wrong\" with the existing URLs. It's not like it's redirecting from plaintext to SSL/TLS & we can stop that tiny insecure step, or it's using a protocol that is likely to be firewalled, or using a URL that could stop working at some point, but my objection isn't a hugely strong one.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 227020608,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-19T21:12:41Z",
		"body" : "> I don't think this merits audit code particularly, given there's nothing \"wrong\" with the existing URLs.\r\n\r\nWe do get pedantic about other things when there's nothing \"wrong\" so I'm üëç to this; it makes it easier to turn our style preferences into code than internalised knowledge.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 227022913,
		"user" : {
			"login" : "nijikon"
		},
		"created_at" : "2016-06-19T21:59:38Z",
		"body" : "I'm also üëç , if we are changing it ourselves to this, then it makes sense. At least in ```strict``` for now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 238815331,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:35:01Z",
		"body" : "@nijikon Can you üö¢ this? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 238845287,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-10T11:58:13Z",
		"body" : "> Good thought but I don't think this is the best way to address this. Any existing PyPI URLs are fine; if we decide we need to change them we should do it automatically instead of piecemeal.\r\n\r\n> Let's make this check only for audit --strict\r\n\r\nWould like at least these two things done if we merge here, otherwise this is going to blow up _a lot_ in core.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 238866190,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T13:28:18Z",
		"body" : "> Would like at least these two things done if we merge here, otherwise this is going to blow up a lot in core.\r\n\r\nüëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 244548250,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:03:17Z",
		"body" : "@nijikon Ping on this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 373
	},
	{
		"id" : 226762374,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-17T12:59:20Z",
		"body" : "That usually means you haven't accepted the license agreement. Try `sudo xcodebuild -license`, agree to that, and then re-run `brew`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 374
	},
	{
		"id" : 226884768,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-17T21:22:30Z",
		"body" : "I imagine brew could probably print a better message.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 374
	},
	{
		"id" : 226893585,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-17T22:11:06Z",
		"body" : "We already attempt to in `brew.sh`, `brew doctor` and our `xcrun` wrapper but evidently we still miss a few cases.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 374
	},
	{
		"id" : 226935859,
		"user" : {
			"login" : "gjmveloso"
		},
		"created_at" : "2016-06-18T11:03:17Z",
		"body" : "Worked like a charm @DomT4 üòÉ \r\n\r\nThanks,\r\nGustavo",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 374
	},
	{
		"id" : 231590519,
		"user" : {
			"login" : "gjmveloso"
		},
		"created_at" : "2016-07-10T14:01:12Z",
		"body" : "With beta 2 of macOS Sierra I've started receiving this message when running ```sudo xcodebuild -license```:\r\n\r\n```\r\n~ sudo xcodebuild -license                   \r\nxcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance\r\n```\r\n\r\nThoughts?\r\n\r\nThanks.\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 374
	},
	{
		"id" : 231592149,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-10T14:35:38Z",
		"body" : "That's not a Homebrew issue. I suspect you don't have Xcode installed which means that command won't work.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 374
	},
	{
		"id" : 231601896,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-10T17:56:28Z",
		"body" : "@gjmveloso That's expected. The `xcodebuild` command only works if your active developer directory is the Xcode installation. You're not supposed to see CLT license issues; when you install it via MAS or the `.pkg` installer you should be given the license dialog at install.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 374
	},
	{
		"id" : 243016684,
		"user" : {
			"login" : "bryceadams"
		},
		"created_at" : "2016-08-29T02:03:27Z",
		"body" : "Try `xcode-select --install` instead @gjmveloso.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 374
	},
	{
		"id" : 227076530,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-20T08:11:17Z",
		"body" : "I'm now happy with this. Any other maintainers with feelings either way?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 375
	},
	{
		"id" : 227228159,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-20T18:29:54Z",
		"body" : "Should there be any logic (or at least a message for the user) to remove the installed Homebrew formula that has been migrated to a Cask?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 375
	},
	{
		"id" : 227229624,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-06-20T18:35:09Z",
		"body" : "Removing is handled by other related to all migrations code as I understood. When I tested this piece I got message that formula is deleted.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 375
	},
	{
		"id" : 227231563,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-20T18:42:03Z",
		"body" : "> Removing is handled by other related to all migrations code as I understood. When I tested this piece I got message that formula is deleted.\r\n\r\nUnless I'm overlooking something, you're talking about the message generated by `brew update` and it only means the formula has been removed from the respective Homebrew tap, but if it was previously installed it will remain installed (as can be verified by looking at the output of `brew list`).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 375
	},
	{
		"id" : 227233292,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-06-20T18:48:25Z",
		"body" : "Will look at it. Was sure that during all migrations it deletes old formulas by default and it stays in \"brew list\" because I run update with \"--simulate-from-current-branch\" flag",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 375
	},
	{
		"id" : 227235721,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-20T18:56:48Z",
		"body" : "The option `--simulate-from-current-branch` only affects what is being done by `brew update` during its first phase (normally fetching updates from remote repositories). It doesn't have an effect on anything else and is not taken into account in the post-processing that happens in `cmd/update-report.rb`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 375
	},
	{
		"id" : 227437453,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-21T13:22:06Z",
		"body" : "Now I'm the one who brought up uninstalling the corresponding Homebrew formula, but I'm not entirely sure if we should do this automatically. (I'm thinking about a situation where the formula is removed, but then the installation of the matching cask fails for whatever reason.) And if we do automatically uninstall, should we do this with `--force` to make sure to remove all versions of the previously installed formula?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 375
	},
	{
		"id" : 227437807,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-21T13:23:25Z",
		"body" : "@UniqMartin I think we probably should as otherwise the Cask is almost certain to conflict on installation. `--force` seems like a good idea, too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 375
	},
	{
		"id" : 227443269,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-21T13:42:42Z",
		"body" : "Since we're making a distinction between Homebrew Cask being already installed and not, would the following code snippet maybe make more sense? (Uninstall the formula if we are going to automatically install the matching cask, otherwise just include the `brew uninstall --force` line in the output.)\r\n\r\n```ruby\r\nif new_tap.installed? && (HOMEBREW_REPOSITORY/\"Caskroom\").directory?\r\n  ohai \"#{name} has been moved to Homebrew Cask. Installing #{name}...\"\r\n  system HOMEBREW_BREW_FILE, \"uninstall\", \"--force\", name\r\n  system HOMEBREW_BREW_FILE, \"cask\", \"install\", name\r\nelse\r\n  ohai \"#{name} has been moved to Homebrew Cask.\", <<-EOS.undent\r\n    To uninstall the formula and install the cask run:\r\n      brew uninstall --force #{name}\r\n      brew cask install #{name} \r\n  EOS\r\nend\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 375
	},
	{
		"id" : 227729528,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-22T12:36:22Z",
		"body" : "üëè @AnastasiaSulyagina!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 375
	},
	{
		"id" : 227733786,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-22T12:54:28Z",
		"body" : "I'm late for commenting. But I'm not sure that we should uninstall formula at all. The reason is formula and cask are two completely different things. Auto installing cask does not mean it will offer backward compatibility for all of cases. Two common breakages I can think of now:\r\n * For Apps who also happen to offer CLI tool, uninstalling formula may break user's script. Because the change of path. e.g. Users hard code `opt` path in their script.\r\n * If users happen to use `brew linkage`, we will just leave broke symlinks. And from my experience from cask, `brew cask install` will fail to move app to the dest place, i.e., failing silently.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 375
	},
	{
		"id" : 227738060,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-22T13:10:26Z",
		"body" : "> The reason is formula and cask are two completely different things.\r\n\r\nCurrently, yes, but that's not the longer-term plan.\r\n\r\n> Auto installing cask does not mean it will offer backward compatibility for all of cases.\r\n\r\nNeither does e.g. any formula change.\r\n\r\n> For Apps who also happen to offer CLI tool, uninstalling formula may break user's script. Because the change of path. e.g. Users hard code opt path in their script.\r\n\r\nThey will have to update their scripts anyway, in this case, so I'm not sure how this is an issue.\r\n\r\n> If users happen to use brew linkage, we will just leave broken symlinks. And from my experience of cask, brew cask install will fail to move app to the destination place, i.e., failing silently.\r\n\r\nDo you mean `brew linkapps`? We should cleanup those symlinks on uninstall, I agree.\r\n\r\n> And from my experience of cask, brew cask install will fail to move app to the destination place, i.e., failing silently.\r\n\r\nCask doesn't fail silently but are you saying this code will? If so, we should improve that, I agree.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 375
	},
	{
		"id" : 227757834,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-22T14:16:35Z",
		"body" : "> They will have to update their scripts anyway, in this case, so I'm not sure how this is an issue.\r\n\r\nI mean if we don't uninstall them. Their scripts won't be broken.\r\n\r\n> Do you mean brew linkapps? We should cleanup those symlinks on uninstall, I agree.\r\n\r\nYep. sorry about typo.\r\n\r\n> Cask doesn't fail silently but are you saying this code will? If so, we should improve that, I agree.\r\n\r\nI mean stale symlink will prevent cask properly install apps. For example:\r\n```\r\n$ ln -s stale-formula-link /Applications/Google\\ Chrome.app\r\n$ brew cask install google-chrome\r\n==> Downloading https://dl.google.com/chrome/mac/stable/GGRO/googlechrome.dmg\r\n######################################################################## 100.0%\r\n==> No checksum defined for Cask google-chrome, skipping verification\r\n==> It seems there is already an App at '/Applications/Google Chrome.app'; not moving.\r\nüç∫  google-chrome staged at '/usr/local/Caskroom/google-chrome/latest' (207 files, 196M)\r\n$ echo $?\r\n0\r\n```\r\n\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 375
	},
	{
		"id" : 227759460,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-22T14:21:30Z",
		"body" : ">> They will have to update their scripts anyway, in this case, so I'm not sure how this is an issue.\r\n> I mean if we don't uninstall them. Their scripts won't be broken.\r\n\r\nThey will be if they ever manually `uninstall` or `reinstall` them. It's not really going to help them to leave them around just to fail randomly at a guture point.\r\n\r\n> I mean stale symlink will prevent cask properly install apps.\r\n\r\nThat's a `brew cask` issue that's probably worth filing with them and we should make `brew uninstall` automatically unlink apps (I think @UniqMartin had talked about or started this before?)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 375
	},
	{
		"id" : 227805683,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-22T16:49:29Z",
		"body" : "> [‚Ä¶] and we should make brew uninstall automatically unlink apps (I think @UniqMartin had talked about or started this before?)\r\n\r\nAye, quite a while ago actually. But `linkapps` is such an underused feature that I never set aside time to finally add this automatic cleanup, though most pieces are in place after the refactoring on `[un]linkapps`. Sorry about that! It should be as simple invoking [`unlinkapps_prune`](https://github.com/Homebrew/brew/blob/915eed4c6427271c5b4c01fa36239361c3680c40/Library/Homebrew/cmd/unlinkapps.rb#L23-L27) in all the right spots (`reinstall`, `uninstall`, `upgarde`), something that is already done today when running [`brew prune`](https://github.com/Homebrew/brew/blob/915eed4c6427271c5b4c01fa36239361c3680c40/Library/Homebrew/cmd/prune.rb#L59).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 375
	},
	{
		"id" : 226828555,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-17T17:18:58Z",
		"body" : "CC @UniqMartin ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 226842123,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T18:14:15Z",
		"body" : "Unlike the code comments not directly related to this PR, but maybe something you'd want to add to your list of things to change in this command: I haven't checked, but I'm pretty sure mirrors are ignored and thus mistreated, producing wrong results for the bumped formula if `mirror` lines are present.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 226844597,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-17T18:23:58Z",
		"body" : "Indeed mirrors are currently unsupported and require manual follow-up (meaning double CI) or not using the command.\r\n\r\nBy the way, sneak preview:\r\n```\r\ndiff --git a/Library/Homebrew/dev-cmd/bump-formula-pr.rb b/Library/Homebrew/dev-cmd/bump-formula-pr.rb\r\nindex 10df658..3436878 100644\r\n--- a/Library/Homebrew/dev-cmd/bump-formula-pr.rb\r\n+++ b/Library/Homebrew/dev-cmd/bump-formula-pr.rb\r\n@@ -79,7 +79,15 @@ module Homebrew\r\n     elsif !hash_type\r\n       odie \"#{formula}: no tag/revision specified!\"\r\n     else\r\n-      odie \"#{formula}: no url/#{hash_type} specified!\"\r\n+      rsrc = Resource.new { @url = new_url }\r\n+      rsrc.download_strategy = CurlDownloadStrategy\r\n+      rsrc.owner = Resource.new(formula.name)\r\n+      rsrc_path = rsrc.fetch\r\n+      if Utils.popen_read(\"/usr/bin/tar\", \"-tf\", rsrc_path) =~ /\\/.*\\./\r\n+        new_hash = rsrc_path.sha256\r\n+      else\r\n+        odie \"#{formula}: no url/#{hash_type} specified!\"\r\n+      end\r\n     end\r\n \r\n     if ARGV.dry_run?\r\n\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 226847918,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T18:37:12Z",
		"body" : "> By the way, sneak preview:\r\n\r\nTo be honest, I'm utterly confused by the `tar` invocation in there. Would you care to explain what it does? Wouldn't it fail for anything not natively understood by `tar`, e.g. `xz` archives?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 226849490,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-17T18:42:45Z",
		"body" : "`tar -tf` works fine with xz if xz is installed, somewhat to my surprise too:\r\n```\r\nJosephs-MacBook-Pro:Homebrew joe$ brew uninstall xz\r\nUninstalling /usr/local/Cellar/xz/5.2.2... (91 files, 1.4M)\r\nJosephs-MacBook-Pro:Homebrew joe$ tar -tf libpng-1.6.21.tar.xz|tail -3\r\ntar: Error opening archive: Child process exited with status 254Child process exited with status 254\r\nJosephs-MacBook-Pro:Homebrew joe$ brew install xz\r\n==> Downloading https://fossies.org/linux/misc/xz-5.2.2.tar.gz\r\nAlready downloaded: /Users/joe/Library/Caches/Homebrew/xz-5.2.2.tar.gz\r\n==> ./configure --disable-silent-rules --prefix=/usr/local/Cellar/xz/5.2.2\r\n==> make install\r\nüç∫  /usr/local/Cellar/xz/5.2.2: 91 files, 1.4M, built in 25 seconds\r\nJosephs-MacBook-Pro:Homebrew joe$ tar -tf libpng-1.6.21.tar.xz|tail -3\r\nlibpng-1.6.21/README\r\nlibpng-1.6.21/pngbar.jpg\r\nlibpng-1.6.21/libpng-config.in\r\nJosephs-MacBook-Pro:Homebrew joe$ \r\n```\r\n\r\nThe idea is just to validate the output prints at least one path rather than throwing up:\r\n```\r\nJosephs-MacBook-Pro:Homebrew joe$ tar -tf libpng-1.6.21.tar.xz|tail -3\r\nlibpng-1.6.21/README\r\nlibpng-1.6.21/pngbar.jpg\r\nlibpng-1.6.21/libpng-config.in\r\nJosephs-MacBook-Pro:Homebrew joe$ dd if=/dev/random of=garbage.tar bs=512 count=1024\r\n1024+0 records in\r\n1024+0 records out\r\n524288 bytes transferred in 0.036058 secs (14540150 bytes/sec)\r\nJosephs-MacBook-Pro:Homebrew joe$ tar -tf garbage.tar \r\ntar: Unrecognized archive format\r\ntar: Error exit delayed from previous errors.\r\n\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 226851698,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-17T18:51:57Z",
		"body" : "By the way, I think that \"trick\" that `tar -tf` works when xz is installed means that we can also simplify download_strategy.rb not to special-case the handling of .tar.xz files, since `tar -xf` also works fine when `xz` is installed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 226854391,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-17T19:03:29Z",
		"body" : "> The idea is just to validate the output prints at least one path rather than throwing up:\r\n\r\nTo check stuff like broken redirects etc.? The check will also fail for valid non-archives, though those are relatively rare. To my surprise, `tar` even recognizes ZIP archives ‚Ä¶\r\n\r\n> By the way, I think that \"trick\" that `tar -tf` works when xz is installed means that we can also simplify download_strategy.rb not to special-case the handling of .tar.xz files, since `tar -xf` also works fine when `xz` is installed.\r\n\r\nI wonder when this was changed. It hasn't been too long ago when Misty added some code to explicitly pass `-z` or `-j` flags to `tar` to appease legacy OS X systems. This might also be an argument to not rely on the newer behavior, as otherwise we'll end up with two code paths for the same thing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 226872158,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-17T20:22:09Z",
		"body" : "Correct, it's intended to err on the side of false positives.\r\n\r\nAs for when the tar thing \"changed,\" I'm on 10.8, so it wasn't recently.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 227021012,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-19T21:21:40Z",
		"body" : "Don't have strong feelings but personally not a big fan of this; doesn't feel like it _needs_ to be in this file.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 227021074,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-19T21:22:55Z",
		"body" : ">Don't have strong feelings but personally not a big fan of this; doesn't feel like it needs to be in this file.\r\n\r\nWhat are you referring to?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 227063175,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-20T06:52:42Z",
		"body" : "> What are you referring to?\r\n\r\nAudit being done by this script.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 227063390,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-20T06:54:14Z",
		"body" : "Ah, I see. For what it's worth, it's proven very helpful to me so far: https://github.com/Homebrew/homebrew-core/issues/2184 all of which would have been failed CI without this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 227064811,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-20T07:03:40Z",
		"body" : "Of course, those issues are all preexisting problems in the formulae, not regressions introduced by bump-formula-pr, so it would work to do `brew $f && brew bump-formula-pr ...`, which is slightly less convenient, but has the upside of failing a tad faster.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 227065209,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-20T07:06:29Z",
		"body" : "@ilovezfs Yeh, I guess I'm thinking we'd typically still want a bump even if the `audit` is failing, particularly from non-maintainers who may not know how to fix the `audit` failure.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 227066103,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-20T07:12:20Z",
		"body" : "Yes, that's a good point, and would point towards maybe making it opt-in (`--audit`), not always/opt-out (`--no-audit`)?\r\n\r\nI'd just like to avoid adding redundant logic (meaning things `audit` knows how to do already) to `bump-formula-pr` as was being proposed here: https://github.com/Homebrew/brew/pull/372#issuecomment-226794371",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 227066921,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-20T07:17:41Z",
		"body" : "@ilovezfs Opt-in sounds good if you find it useful üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 227067185,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-20T07:19:09Z",
		"body" : "Cool",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 238815222,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:34:33Z",
		"body" : "@ilovezfs Can you make this opt-in and merge it in? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 244548261,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:03:26Z",
		"body" : "@ilovezfs Gentle ping on this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 244560215,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-03T17:47:42Z",
		"body" : "@MikeMcQuaid PR refreshed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 244615847,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-04T17:22:18Z",
		"body" : "üëç :shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 376
	},
	{
		"id" : 226949491,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-18T15:51:52Z",
		"body" : ":+1: Nice catch!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 377
	},
	{
		"id" : 227020900,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-19T21:18:52Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 377
	},
	{
		"id" : 226911927,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-18T00:51:37Z",
		"body" : "cc @UniqMartin, @MikeMcQuaid ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 378
	},
	{
		"id" : 226920950,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-18T04:19:22Z",
		"body" : "@UniqMartin Thoughts on changing `MachOFile#filetype` to be consistent with `cputype` (i.e., return a `Symbol` instead of a constant-name `String`)?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 378
	},
	{
		"id" : 226939348,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-18T12:33:16Z",
		"body" : "> Thoughts on changing `MachOFile#filetype` to be consistent with `cputype` (i.e., return a `Symbol` instead of a constant-name `String`)?\r\n\r\nDefinitely in favor, but that's something we can sneak in in a later update. üò∏ I'd suggest to derive the symbol names from the `MH_*` constants, i.e. `MH_EXECUTE` would become `:execute`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 378
	},
	{
		"id" : 226945729,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-18T14:37:19Z",
		"body" : "> Definitely in favor, but that's something we can sneak in in a later update.\r\n\r\nAgree, doesn't need to happen here.\r\n\r\n\r\n> I'd suggest to derive the symbol names from the MH_* constants, i.e. MH_EXECUTE would become :execute.\r\n\r\nYep, this is what I was thinking too :+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 378
	},
	{
		"id" : 226947159,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-18T15:06:40Z",
		"body" : "Put an `in progress` and `do not merge` label on this for now, as I'd like to conduct some final testing. But I would still appreciate hearing from other maintainers in the mean time, if they have any comments.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 378
	},
	{
		"id" : 226956764,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-18T18:12:52Z",
		"body" : "`HOMEBREW_RUBY_MACHO` has been set in `test-bot`, but I don't see it showing up in the Jenkins environment variables? Am I missing something here, or are we losing the variable somewhere down the call chain?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 378
	},
	{
		"id" : 226957462,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-18T18:22:55Z",
		"body" : "No, everything should be fine. The test bot run itself doesn't actually use the code from this PR (as far as the `brew test-bot` process is concerned), so the full effect will only be visible once this PR is merged.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 378
	},
	{
		"id" : 226957909,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-18T18:32:01Z",
		"body" : "Got it :+1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 378
	},
	{
		"id" : 226987266,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-19T09:11:10Z",
		"body" : "LGTM. I'm happy merging this whenever and fixing any issues if or when they arise.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 378
	},
	{
		"id" : 227016697,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-19T19:50:07Z",
		"body" : "Alright, local testing revealed an issue that would have immediately impacted the test bot. #381 will need to be merged before this goes in.\r\n\r\nOther than that I tested with quite a number of formulae, both built from source and installed from bottles and all Mach-O relocation went smoothly and produced the correct result. :+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 378
	},
	{
		"id" : 227277927,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-20T21:39:24Z",
		"body" : ":tada: Finished local testing (including a complete rebuild of all my installed formulae) and reviewed some more Homebrew code for possibly surprising interactions, but haven't discovered any other issues.\r\n\r\nLet's see what the test bot has to say about this change ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 378
	},
	{
		"id" : 227279016,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-20T21:43:39Z",
		"body" : "And I almost forgot: Thank you for yet another contribution to Homebrew, @woodruffw! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 378
	},
	{
		"id" : 227290646,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-20T22:35:10Z",
		"body" : "My pleasure :smile: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 378
	},
	{
		"id" : 226987322,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-19T09:12:39Z",
		"body" : "üëç but I'm wondering if this produces much/any slowdown?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 379
	},
	{
		"id" : 227020665,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-19T21:13:44Z",
		"body" : ":+1: Makes sense. I'd be curious to know whether there are any formulae in `homebrew/core` where we'd also hit that issue and where this change would (positively) impact current behavior.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 379
	},
	{
		"id" : 227064143,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-06-20T06:59:12Z",
		"body" : "Spent time with family today; I haven't had a chance to profile for slowdowns yet.  I'll give it a shot. Would skipping these checks be appropriate if the `--fast` flag is given?\r\n\r\nAlso, I imagine this bug isn't visible from any formulae in core, or it would already be fixed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 379
	},
	{
		"id" : 227065061,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-20T07:05:25Z",
		"body" : "@scpeters Nah, I don't think we need to skip and we may well include even with the slowdown, just wanting to be aware if it's adding 1/10/100s to typical runtime.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 379
	},
	{
		"id" : 227069761,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-06-20T07:34:25Z",
		"body" : "I did some [quick profiling of boost](https://gist.github.com/scpeters/4a8b7b3176172a766dc2129953981fe2) with my current dev environment, and it adds about 2 seconds to the test-bot script to do the recursive dependency conflict checking. Caveats are that the speed of this operation will depend on the number of other operations installed in the workspace. For a more thorough test, I would try to rebuild a boost bottle in a virtual machine, but I expect that would take a while.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 379
	},
	{
		"id" : 227073275,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-20T07:53:54Z",
		"body" : "2 seconds seems fine, thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 379
	},
	{
		"id" : 227020637,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-19T21:13:17Z",
		"body" : "Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 380
	},
	{
		"id" : 227528321,
		"user" : {
			"login" : "jwadolowski"
		},
		"created_at" : "2016-06-21T18:25:05Z",
		"body" : "Thanks for that @MikeMcQuaid. It was actually really helpful.\r\n\r\nI run `brew doctor` and there were some issues on my Mac:\r\n\r\n```\r\n$ brew doctor\r\nPlease note that these warnings are just used to help the Homebrew maintainers\r\nwith debugging if you file an issue. If everything you use Homebrew for is\r\nworking fine: please don't worry and just ignore them. Thanks!\r\n\r\nWarning: \"config\" scripts exist outside your system or Homebrew directories.\r\n`./configure` scripts often look for *-config scripts to determine if\r\nsoftware packages are installed, and what additional flags to use when\r\ncompiling and linking.\r\n\r\nHaving additional scripts in your path can confuse software installed via\r\nHomebrew if the config script overrides a system or Homebrew provided\r\nscript of the same name. We found the following \"config\" scripts:\r\n    /opt/chefdk/embedded/bin/curl-config\r\n    /opt/chefdk/embedded/bin/ncurses5-config\r\n    /opt/chefdk/embedded/bin/ncursesw5-config\r\n    /opt/chefdk/embedded/bin/pcre-config\r\n    /opt/chefdk/embedded/bin/pkg-config\r\n    /opt/chefdk/embedded/bin/xml2-config\r\n    /opt/chefdk/embedded/bin/xslt-config\r\n\r\nWarning: You have a non-Homebrew 'pkg-config' in your PATH:\r\n  /opt/chefdk/embedded/bin/pkg-config\r\n\r\n`./configure` may have problems finding brew-installed packages using\r\nthis other pkg-config.\r\n\r\nWarning: Broken symlinks were found. Remove them with `brew prune`:\r\n    /usr/local/bin/chef-zero\r\n    /usr/local/bin/fauxhai\r\n```\r\n\r\nAll of them are related to ChefDK and apparently Chef team is already aware of that:\r\nhttps://github.com/chef/chef-dk/issues/745\r\nhttps://github.com/chef/chef-dk/issues/313\r\n\r\nChefDK seems to interfere with `brew`, as it provides a separate set of `ruby` binaries that are added to `$PATH`. Without `chefdk` package `brew search` works perfectly fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 380
	},
	{
		"id" : 227016866,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-19T19:53:35Z",
		"body" : "Looks good to me! Glad this was caught before it became a CI failure.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 381
	},
	{
		"id" : 227019714,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-19T20:53:26Z",
		"body" : "Glad to fix this but it does feel like Ruby Macho should probably follow the symlinks at least?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 381
	},
	{
		"id" : 227019945,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-19T20:59:16Z",
		"body" : "> [‚Ä¶] but it does feel like Ruby Macho should probably follow the symlinks at least?\r\n\r\nIt does! If the symlink points to a file, then it will happily and transparently work with that. The real problem here was that directories were passed to `ruby-macho` for inspection. (Sorry! I didn't make this entirely clear.) The reason for also excluding symlinks during tree traversal is really just for consistency with other similar code in Homebrew and because checking the symlinks would be redundant here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 381
	},
	{
		"id" : 227020571,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-19T21:11:54Z",
		"body" : "@UniqMartin Gotcha, makes sense. üëç then.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 381
	},
	{
		"id" : 227056141,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-20T05:57:21Z",
		"body" : "Thanks for putting a PR together!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 382
	},
	{
		"id" : 227273180,
		"user" : {
			"login" : "lucafavatella"
		},
		"created_at" : "2016-06-20T21:20:41Z",
		"body" : "Testing locally both changes - let's see\r\nhttps://github.com/lucafavatella/brew/commit/f5e84126e0d7eb7e8ef80e45b779a51cdbeeadf1",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 382
	},
	{
		"id" : 227286627,
		"user" : {
			"login" : "lucafavatella"
		},
		"created_at" : "2016-06-20T22:16:14Z",
		"body" : "Applied the two comments, tested locally, force pushed. Here is how I tested it:\r\n```\r\n{ set -x; brew rm ansible; brew install --build-bottle ansible && brew bottle --verbose ansible && brew test ansible && brew audit ansible; } 2>&1 | tee tmp.out\r\n```\r\n\r\nThanks for your comments. Please let me know any other changes you suggest.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 382
	},
	{
		"id" : 227299132,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-20T23:23:37Z",
		"body" : "Great work! Merged in c6022104f9df7fa1fc7bae596a770cdc073c8552. Thank you for this contribution to Homebrew, @lucafavatella! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 382
	},
	{
		"id" : 227299950,
		"user" : {
			"login" : "lucafavatella"
		},
		"created_at" : "2016-06-20T23:28:49Z",
		"body" : "Is there any way that all python formulas are re-processed by the brew bot for the sake of attempting to make more bottles relocatables? Or shall a new upstream release and formula bump be waited for?\r\n\r\nIn particular - any way the [ansible](https://github.com/Homebrew/homebrew-core/blob/master/Formula/ansible.rb) could be re-processed by the brew bot?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 382
	},
	{
		"id" : 227301755,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-20T23:40:17Z",
		"body" : "> Is there any way that all python formulas are re-processed by the brew bot for the sake of attempting to make more bottles relocatables? Or shall a new upstream release and formula bump be waited for?\r\n\r\nI think updating them as new releases trickle in would be preferable. But if other maintainers feel differently, I'm not opposed to mass-rebuilding them (if we have a way to easily identify the affected formulae and their number isn't absurdly big).\r\n\r\n> In particular - any way the ansible formula could be re-processed by the brew bot?\r\n\r\n[I queued up a build of that formula](http://bot.brew.sh/job/Homebrew%20Testing/1023/) immediately after merging your change. If it finishes successfully and produces a relocatable bottle, I'll merge that and let you and everyone else reading this PR know. üò∏",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 382
	},
	{
		"id" : 227306775,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-21T00:13:19Z",
		"body" : "> In particular - any way the ansible formula could be re-processed by the brew bot?\r\n\r\nHere you go: Homebrew/homebrew-core@45f9513dd8351a8853b46a389a2d79ff2c2df2b6 ‚Äì as usual available after a `brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 382
	},
	{
		"id" : 227308942,
		"user" : {
			"login" : "lucafavatella"
		},
		"created_at" : "2016-06-21T00:29:22Z",
		"body" : "I ran brew update, the ansible bottle was picked from the repo and it looks\nworking. Thanks!\nOn 21 Jun 2016 01:13, \"Martin Afanasjew\" <notifications@github.com> wrote:\n\n> In particular - any way the ansible formula could be re-processed by the\n> brew bot?\n>\n> Here you go: Homebrew/homebrew-core@45f9513\n> <https://github.com/Homebrew/homebrew-core/commit/45f9513dd8351a8853b46a389a2d79ff2c2df2b6>\n> ‚Äì as usual available after a brew update.\n>\n> ‚Äî\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/Homebrew/brew/pull/382#issuecomment-227306775>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe/ABSC_0gCnfLrrjqaCAXL3djEUyUTlE0dks5qNyyigaJpZM4I5RFa>\n> .\n>\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 382
	},
	{
		"id" : 227240475,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-20T19:14:32Z",
		"body" : "I'm not very familiar with this feature of Homebrew when handling Python dependencies, but I believe what you intended to do is, i.e. you mixed up the order of `\"mako\"` and `:python`:\r\n\r\n```ruby\r\ndepends_on \"mako\" => :python\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 383
	},
	{
		"id" : 227337154,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-21T04:23:11Z",
		"body" : "Martin's right, but don't use that construct; it just tells you to pip install the thing :) You may find this guide helpful: https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Python-for-Formula-Authors.md",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 383
	},
	{
		"id" : 227337409,
		"user" : {
			"login" : "aeantipov"
		},
		"created_at" : "2016-06-21T04:25:24Z",
		"body" : "Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 383
	},
	{
		"id" : 227221324,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-20T18:05:29Z",
		"body" : "**Update:** Added another commit as it felt pretty uncontroversial:\r\n\r\n> Don't force installation of the `hub` formula if it can be found in the search path. (Avoids unnecessary installation when switching between multiple Homebrew installations for different tasks.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 384
	},
	{
		"id" : 227225066,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-20T18:19:01Z",
		"body" : ":+1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 384
	},
	{
		"id" : 227366307,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-21T07:51:20Z",
		"body" : "üëç but again almost certainly worth adding to `bump-formula-pr` and unifying the code in the two a bit (but that can be another PR)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 384
	},
	{
		"id" : 227437959,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-21T13:23:56Z",
		"body" : "> üëç but again almost certainly worth adding to `bump-formula-pr` and unifying the code in the two a bit (but that can be another PR)\r\n\r\nAgreed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 384
	},
	{
		"id" : 227366747,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-21T07:53:33Z",
		"body" : "@mrgaolei `sudo chown -R $(whoami) /usr/local`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 385
	},
	{
		"id" : 227519815,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-21T17:55:39Z",
		"body" : "üëç in general but would be good to understand how it fits into the bigger project goals",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 386
	},
	{
		"id" : 227531593,
		"user" : {
			"login" : "jainishshah17"
		},
		"created_at" : "2016-06-21T18:36:36Z",
		"body" : "This ENV (HOMEBREW_ARTIFACT_DOMAIN) will allow non-bottled formula to be downloaded from JFrog Artifactory. \r\nHere is how it works:\r\nset value of ENV by ```export HOMEBREW_ARTIFACT_BOTTLE=https://gcartifactory-us.jfrog.info/artifactory``` {your JFrog Artifactory URL}\r\nfor bottled formula:\r\n```brew install mysql```\r\n#### Downloading http://localhost:8080/artifactory/bottles/mysql-5.7.13.el_capitan.bottle.tar.gz\r\n\r\nfor non-bottle formula:\r\n```brew install riak```\r\n####Downloading http://localhost:8080/artifactory/bottles/s3.amazonaws.com/downloads.basho.com/riak/2.1/2.1.4/osx/10.8/riak-2.1.4-OSX-x86_64.tar.gz\r\n\r\nFor more information of JFrog Artifactory: https://www.jfrog.com/confluence/display/RTF/Welcome+to+Artifactory\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 387
	},
	{
		"id" : 228270397,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-24T06:45:37Z",
		"body" : "To summarize, this is what I think a better solution for requested feature.\r\n\r\n```diff\r\ndiff --git a/Library/Homebrew/download_strategy.rb b/Library/Homebrew/download_strategy.rb\r\nindex d63b2e6..87fe3cb 100644\r\n--- a/Library/Homebrew/download_strategy.rb\r\n+++ b/Library/Homebrew/download_strategy.rb\r\n@@ -324,6 +324,11 @@ class CurlDownloadStrategy < AbstractFileDownloadStrategy\r\n \r\n   # Private method, can be overridden if needed.\r\n   def _fetch\r\n+    if ENV[\"HOMEBREW_ARTIFACT_DOMAIN\"]\r\n+      @url.sub!(%r{^((ht|f)tps?://)?}, ENV[\"HOMEBREW_ARTIFACT_DOMAIN\"].chomp(\"/\") + \"/\")\r\n+      ohai \"Downloading from #{@url}\"\r\n+    end\r\n+\r\n     urls = actual_urls\r\n     unless urls.empty?\r\n       ohai \"Downloading from #{urls.last}\"\r\n```\r\n\r\nAlso we need manpage update.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 387
	},
	{
		"id" : 228965929,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-28T06:53:06Z",
		"body" : "@jainishshah17 Could you squash the commits and update manpage?\r\n\r\nTo update manpage, here is the step.\r\n * update `Library/Homebrew/manpages/brew.1.md.erb` to include this new env variable.\r\n * run `brew man`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 387
	},
	{
		"id" : 229801307,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-30T22:00:08Z",
		"body" : "I'm üëç on the code with a few manpage comments. @xu-cheng you üÜí with the code?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 387
	},
	{
		"id" : 229802165,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-30T22:04:03Z",
		"body" : "Squash commits by running `brew update; git checkout $YOUR_BRANCH; git rebase --interactive origin/master` and then mark each commit other than the first as `squash` or `fixup` then `git push -f`. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 387
	},
	{
		"id" : 231824653,
		"user" : {
			"login" : "jainishshah17"
		},
		"created_at" : "2016-07-11T18:36:48Z",
		"body" : "@MikeMcQuaid: It looks good now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 387
	},
	{
		"id" : 232320810,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T10:45:00Z",
		"body" : "Added in e195f493b271efeb4c73af094c4c4daad931253c with the `brew man` changes and a better commit message. Thanks @jainishshah17!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 387
	},
	{
		"id" : 227646230,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-22T05:20:08Z",
		"body" : "Adding RuboCop to the `Gemfile` is problematic in several ways:\r\n\r\n- It and some of its dependencies require Ruby 1.9+ (if I recollect correctly), thus will make our tests always fail on our Mavericks bot where we test against Ruby 1.8.7.\r\n- It adds a non-trivial dependency that further increases the test setup time on our test bots, where `bundler` needs to fetch and setup the gems on every run.\r\n\r\nI don't have a good solution to address these. But since `brew style` is exclusively used by maintainers and contributors, thus only affects a comparatively small number of people, I think we can live with not having a test for this command (at least until we find a better solution).\r\n\r\n> It seemed necessary to add `rubocop` to the `Gemfile`, [‚Ä¶]\r\n\r\nCan you elaborate on this? In normal operation, `brew style` automatically installs the `rubocop` gem into the `~/.gem` directory if it isn't already installed. Is that causing issues in the testing environment? What are the problems, error messages, etc.?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 388
	},
	{
		"id" : 227733690,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-22T12:54:06Z",
		"body" : "> Can you elaborate on this? In normal operation, brew style automatically installs the rubocop gem into the ~/.gem directory if it isn't already installed. Is that causing issues in the testing environment? What are the problems, error messages, etc.?\r\n\r\nYeh, I'm also interested in that. A step-by-step walkthrough of the commands you run and the errors you see would be great üëç \r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 388
	},
	{
		"id" : 227868193,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-06-22T20:34:33Z",
		"body" : "> Adding RuboCop to the Gemfile is problematic in several ways:\r\n> \r\n> - It and some of its dependencies require Ruby 1.9+ (if I recollect correctly), thus will make our tests always fail on our Mavericks bot where we test against Ruby 1.8.7.\r\n> - It adds a non-trivial dependency that further increases the test setup time on our test bots, where `bundler` needs to fetch and setup the gems on every run.\r\n> \r\n> I don't have a good solution to address these. But since `brew style` is exclusively used by maintainers and contributors, thus only affects a comparatively small number of people, I think we can live with not having a test for this command (at least until we find a better solution).\r\n\r\nGood to know and to keep in mind. üëç \r\n\r\n> > Can you elaborate on this? In normal operation, `brew style` automatically installs the `rubocop` gem into the `~/.gem` directory if it isn't already installed. Is that causing issues in the testing environment? What are the problems, error messages, etc.?\r\n> \r\n> Yeh, I'm also interested in that. A step-by-step walkthrough of the commands you run and the errors you see would be great üëç\r\n\r\nSure thing! I did see `Homebrew.install_gem_setup_path! \"rubocop\", \"0.40\"` in `cmd/style.rb` so I was also surprised by the problem.\r\n\r\nI've checked out a test branch from the `master` branch and added `test_style` to the integration tests (without modifying `Gemfile`). `brew tests` and `brew tests --only=integration_cmds/style` both return this failure (slightly modified for readability):\r\n\r\n```\r\n  1) Failure:\r\nIntegrationCommandTests#test_style [/usr/local/Library/Homebrew/test/test_integration_cmds.rb:855]:\r\nExpected /Prefer\\ double\\-quoted\\ strings/\r\nto match \"==> Installing or updating 'rubocop' gem\r\n\\nSuccessfully installed rainbow-2.1.0\r\n\\nSuccessfully installed ast-2.3.0\\nSuccessfully installed parser-2.3.1.2\r\n\\nSuccessfully installed powerpack-0.1.1\\nSuccessfully installed ruby-progressbar-1.8.1\r\n\\nSuccessfully installed unicode-display_width-1.1.0\\nSuccessfully installed rubocop-0.40.0\r\n\\n7 gems installed\\n/Users/mizou/.gem/ruby/2.0.0/gems/bundler-\r\n1.11.2/lib/bundler/rubygems_integration.rb:304:in `block in replace_gem':\r\nrubocop is not part of the bundle. Add it to Gemfile. (Gem::LoadError)\r\n\\n\\tfrom /Users/mizou/.gem/ruby/2.0.0/bin/rubocop:22:in `<main>'\"\r\n```\r\n\r\nI also receive this `rake` error (possibly unrelated to the specific problem at hand):\r\n```\r\nrake aborted!\r\nCommand failed with status (1):\r\n[ruby -I\"lib:/usr/local/Library/Homebrew/test\" -I\r\n\"/usr/local/Library/Homebrew/test/vendor/bundle/ruby/2.0.0/gems/rake-10.5.0/lib\" \r\n\"/usr/local/Library/Homebrew/test/vendor/bundle/ruby/2.0.0/gems/rake-\r\n10.5.0/lib/rake/rake_test_loader.rb\"\r\n```\r\n(followed by the names of the tests that were run)\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 388
	},
	{
		"id" : 227643158,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-22T04:53:57Z",
		"body" : "I like the proposed feature, but have left a few code comments regarding some implementation details.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 389
	},
	{
		"id" : 227645761,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-06-22T05:16:15Z",
		"body" : "@UniqMartin Thanks for the review. I believe all of your suggestions have been incorporated.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 389
	},
	{
		"id" : 227651571,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-22T06:02:40Z",
		"body" : "Looks good to me! Will merge this later if nobody objects and after others had a chance to look at this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 389
	},
	{
		"id" : 227733424,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-22T12:53:01Z",
		"body" : "LGTM üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 389
	},
	{
		"id" : 228267628,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-24T06:24:25Z",
		"body" : "Merged in cb711a2d39a9c76d40f43b4fe13564eba3424ea8. Thank you for another nice contribution to Homebrew, @zmwangx! :tada:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 389
	},
	{
		"id" : 227811871,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-22T17:09:16Z",
		"body" : "@UniqMartin @xu-cheng Neither of you are opposed to the overall concept of this PR? ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 390
	},
	{
		"id" : 227815800,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-22T17:23:07Z",
		"body" : "> @UniqMartin @xu-cheng Neither of you are opposed to the overall concept of this PR?\r\n\r\nI'm not opposed. Makes a lot of sense to me, though I personally don't care that much about these external commands because I don't use them. How long does this additional step approximately take to complete compared to a regular `brew tests` run? Does running this on our Mavericks test bot (with Ruby 1.8.7) make sense? Do those external commands even support Ruby 1.8.7?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 390
	},
	{
		"id" : 227950526,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-23T05:01:56Z",
		"body" : "I'm not oppose this PR's concept as well. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 390
	},
	{
		"id" : 229798542,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-30T21:47:09Z",
		"body" : "Have addressed feedback.\r\n\r\n> How long does this additional step approximately take to complete compared to a regular brew tests run? Does running this on our Mavericks test bot (with Ruby 1.8.7) make sense? Do those external commands even support Ruby 1.8.7?\r\n\r\nWill get you the numbers for this after this PR runs the CI job.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 390
	},
	{
		"id" : 230073255,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-02T00:32:56Z",
		"body" : "Have you been able to run `brew official-cmd-tap-tests` successfully? If I try that locally on my machine (OS X 10.11) in a Homebrew installation without any pre-installed taps except `homebew/core`, the Homebrew Cask tests actually fail with:\r\n\r\n```console\r\n$ brew official-cmd-tap-tests\r\n==> Running caskroom/cask tests:\r\n==> Tapping caskroom/cask\r\n[‚Ä¶snip‚Ä¶]\r\n8307 tests, 10105 assertions, 1 failures, 4 errors, 2395 skips\r\n[‚Ä¶snip‚Ä¶]\r\n```\r\n\r\nThe failure and those errors of course result in a nonzero exit code. On the other hand, the tests run for `homebrew/bundle` finish just fine.\r\n\r\n----\r\n\r\nIgnoring the failures for a moment, here are some numbers when running this locally:\r\n\r\n```console\r\n$ /usr/bin/time brew tests --no-compat\r\n[‚Ä¶snip‚Ä¶]\r\n       74.16 real        57.36 user        16.19 sys\r\n$ /usr/bin/time brew tests --no-compat\r\n[‚Ä¶snip‚Ä¶]\r\n       67.33 real        54.76 user        13.66 sys\r\n$ /usr/bin/time brew official-cmd-tap-tests\r\n[‚Ä¶snip‚Ä¶]\r\n      353.80 real       142.69 user        39.52 sys\r\n$ /usr/bin/time brew official-cmd-tap-tests\r\n[‚Ä¶snip‚Ä¶]\r\n      193.10 real        76.73 user        30.89 sys\r\n```\r\n\r\nThose extra tests are not exactly cheap, particularly on the first run when the taps need to be installed and the Gems required for testing need to be fetched and installed via `bundle install`. On our test bot we'll obviously always have the slower times because all the taps and Gems will need to be installed anew on every test bot run.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 390
	},
	{
		"id" : 227717867,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-22T11:37:20Z",
		"body" : "> The root of /usr/local isn't an appropriate place for these files, and it's a bit misleading as there are of course other, non-Homebrewed files within the tree to which this licence/code don't apply.\r\n\r\nIf `/usr/local` is where you have installed Homebrew it's expected that these live in the root of where you've installed Homebrew. This has been where we've installed these files since the beginning of the project and, as the the Git root directory, that's very unlikely to change.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 391
	},
	{
		"id" : 227719590,
		"user" : {
			"login" : "systemed"
		},
		"created_at" : "2016-06-22T11:46:25Z",
		"body" : "Hm. Not ideal but...\r\n\r\nAs best you know, do the instructions for 'relocating' Homebrew at https://gist.github.com/danmactough/96ccf7a51e733173894e/revisions still hold true?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 391
	},
	{
		"id" : 227720127,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-22T11:49:20Z",
		"body" : "No, that won't work consistently. The best way is to use `brew bundle dump` and `brew bundle` to dump and reinstall your packages list. It's also worth noting that many of our binary packages are only built for `/usr/local`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 391
	},
	{
		"id" : 227722149,
		"user" : {
			"login" : "systemed"
		},
		"created_at" : "2016-06-22T12:00:38Z",
		"body" : "Ok, thanks. I'll chalk this one up to \"mildly annoying but unfixable\" then. ;) Thanks for the explanations.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 391
	},
	{
		"id" : 229395679,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-06-29T15:37:01Z",
		"body" : "@systemed I too am annoyed by this.  Here is how I get around it:\r\n\r\n(1) Pick some place else for HB internals to go, e.g., `~/foo`.  (2) Git clone the brew repo to there. (3) Manually symlink the brew binary, the brew man page, and the share/doc/homebrew dirs into the corresponding places in /usr/local. (4) the KEY STEP is to create an empty dir called `/usr/local/Cellar` before you try installing anything.  (5) Do `brew tap Homebrew/homebrew-core`.  (6) Do `brew doctor` just to make sure things are sane.\r\n\r\nThis way, HB will still have the Cellar under /usr/local, which means you can still take advantage of any bottles that aren't relocatable, and won't have problems with the odd formula that hardcodes something with /usr/local.  But, since all the HB stuff is tucked away in `~/foo`, you aren't forced to look at HB detritus in /usr/local.\r\n\r\nIf you skip step (4), HB will auto-create a Cellar under ~/foo.  This will work, but you won't be able to pour some bottles (the ones that aren't relocatable).\r\n\r\nThe whole process mentioned above is easily bash-scriptable if you want an unattended install.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 391
	},
	{
		"id" : 232752488,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-14T18:33:00Z",
		"body" : "@chdiza Have you found any issues or bottles that fail with this approach?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 391
	},
	{
		"id" : 232768280,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-07-14T19:31:54Z",
		"body" : "@MikeMcQuaid None at all.  The only minor headache was creating a custom bash script to automatically carry out the described procedure.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 391
	},
	{
		"id" : 232768843,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-14T19:34:10Z",
		"body" : "@chdiza is it online somewhere we could see?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 391
	},
	{
		"id" : 232781333,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-07-14T20:23:59Z",
		"body" : "> is it online somewhere we could see?\r\n\r\nIt is [now](https://gist.github.com/chdiza/0ccb2efbecb9becd71fcf3592f05caaa).\r\n\r\nThe \"minor headache\" was from my lack of bash skills, not the core of the procedure.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 391
	},
	{
		"id" : 227809168,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-22T17:00:35Z",
		"body" : "Try to `cd /usr/local; git fetch; git reset --hard origin/master; brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 392
	},
	{
		"id" : 227993765,
		"user" : {
			"login" : "TheMSB"
		},
		"created_at" : "2016-06-23T09:15:05Z",
		"body" : "Unfortunately I can't try that anymore, I ended up working around the issue by completely removing brew and then reinstalling it. Less than ideal since I had to reinstall a bunch of other stuff because of it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 392
	},
	{
		"id" : 227794739,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-22T16:11:20Z",
		"body" : "Crumbs, this actually works now, I wasn't sure GNU were ever going to pull the trigger on this.\r\n\r\nThis isn't quite complete though, you'll want to remove the block starting at L1142 & tweak the URL on L1138. We may also want to update our manpage to highlight GNU formula will now fail with `HOMEBREW_NO_INSECURE_REDIRECT` set.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 393
	},
	{
		"id" : 227795369,
		"user" : {
			"login" : "vszakats"
		},
		"created_at" : "2016-06-22T16:13:20Z",
		"body" : "I'm going to look into these. FWIW the new https server appears to be lagging a bit yet, but it seems to work anyhow.\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 393
	},
	{
		"id" : 227796893,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-22T16:18:43Z",
		"body" : "Yeah, it's almost 100% slower it seems on head requests at times. Jump from 0.5 seconds to 1 second isn't something most people are likely to notice though.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 393
	},
	{
		"id" : 227797806,
		"user" : {
			"login" : "vszakats"
		},
		"created_at" : "2016-06-22T16:21:41Z",
		"body" : "Updates done.\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 393
	},
	{
		"id" : 227809034,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-22T17:00:09Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 393
	},
	{
		"id" : 227810369,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-22T17:03:59Z",
		"body" : "I'd be tempted to go with `some GNU & GNOME based` rather than `ftpmirror.gnu.org` in the manpage. I'm not sure URLs are the friendliest way to express these things to users.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 393
	},
	{
		"id" : 227811454,
		"user" : {
			"login" : "vszakats"
		},
		"created_at" : "2016-06-22T17:07:48Z",
		"body" : "I've been thinking about this as well. Will revisit this in a few hours when back to a keyboard.\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 393
	},
	{
		"id" : 227812144,
		"user" : {
			"login" : "vszakats"
		},
		"created_at" : "2016-06-22T17:10:12Z",
		"body" : "Committed now anyway. For anything more, I'll be back a bit later.\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 393
	},
	{
		"id" : 227820302,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-22T17:39:00Z",
		"body" : ":+1:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 393
	},
	{
		"id" : 227825471,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-22T17:56:46Z",
		"body" : "Merged in https://github.com/Homebrew/brew/commit/6bd24a7fb806184d401ee98e1f8c82d97f813107. Thanks for spotting this @vszakats, and your contribution to Homebrew üòÉ.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 393
	},
	{
		"id" : 227950389,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-23T05:00:37Z",
		"body" : "Thanks. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 394
	},
	{
		"id" : 227998339,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-23T09:34:50Z",
		"body" : "This seems to have broken bottling.\r\n```\r\n==> git clean -ffdx\r\nHEAD is now at 05649ce test-bot: do not diff tree recursively (#394)\r\nRecording test results\r\nArchiving artifacts\r\nWARN: No artifacts found that match the file pattern \"*.bottle*.*\". Configuration error?\r\nWARN: ‚Äò*.bottle*.*‚Äô doesn‚Äôt match anything\r\n```\r\nhttp://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/3653/version=el_capitan/console",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 394
	},
	{
		"id" : 228002357,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-23T09:49:24Z",
		"body" : "The problem seems to be that it only works in taps that don't use a Formula subdirectory, so I'm guessing this was tested in homebrew/science.\r\n\r\n```\r\nirb(main):002:0> Utils.popen_read(\"git diff-tree -r --name-only --diff-filter=M 2cc2611c5bdbec81eceaf5ec8284951232dca02f de6b2a14a5781341d1e50cbeb96e1133bde5e43c -- /usr/local/Library/Taps/homebrew/homebrew-core/Formula/youtube-dl.rb\").lines.map do |line|\r\nirb(main):003:1* file = Pathname.new line.chomp\r\nirb(main):004:1> next unless file.extname == \".rb\"\r\nirb(main):005:1> Tap.fetch(\"homebrew\", \"core\").formula_file_to_name(file)\r\nirb(main):006:1> end\r\n=> [\"youtube-dl\"]\r\nirb(main):007:0> Utils.popen_read(\"git diff-tree --name-only --diff-filter=M 2cc2611c5bdbec81eceaf5ec8284951232dca02f de6b2a14a5781341d1e50cbeb96e1133bde5e43c -- /usr/local/Library/Taps/homebrew/homebrew-core/Formula/youtube-dl.rb\").lines.map do |line|\r\nirb(main):008:1* file = Pathname.new line.chomp\r\nirb(main):009:1> next unless file.extname == \".rb\"\r\nirb(main):010:1> Tap.fetch(\"homebrew\", \"core\").formula_file_to_name(file)\r\nirb(main):011:1> end\r\n=> [nil]\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 394
	},
	{
		"id" : 228100004,
		"user" : {
			"login" : "dpo"
		},
		"created_at" : "2016-06-23T16:07:59Z",
		"body" : "Argh. Sorry about that. That's exactly the concern I had with this change but didn't know the right way to test it on other taps. Feel free to revert it until we identify a better solution.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 394
	},
	{
		"id" : 228267723,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-24T06:25:08Z",
		"body" : "@dpo I have fixed it using different approach https://github.com/Homebrew/brew/commit/66cda616d1f2a2f5cb6bcece7be9ff29f5d6f863",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 394
	},
	{
		"id" : 228337806,
		"user" : {
			"login" : "dpo"
		},
		"created_at" : "2016-06-24T12:53:49Z",
		"body" : "Thanks @xu-cheng !",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 394
	},
	{
		"id" : 228057454,
		"user" : {
			"login" : "bcdady"
		},
		"created_at" : "2016-06-23T13:55:04Z",
		"body" : "After uninstall script completed, and I re-ran install, it displayed the following progress:\r\n\r\n```\r\n==> This script will install:\r\n/usr/local/bin/brew\r\n/usr/local/Library/...\r\n/usr/local/share/doc/homebrew\r\n/usr/local/share/man/man1/brew.1\r\n/usr/local/share/zsh/site-functions/_brew\r\n/usr/local/etc/bash_completion.d/brew\r\n\r\nPress RETURN to continue or any other key to abort\r\n==> /usr/bin/sudo /bin/mkdir /Library/Caches/Homebrew\r\nPassword:\r\n==> /usr/bin/sudo /bin/chmod g+rwx /Library/Caches/Homebrew\r\n==> /usr/bin/sudo /usr/sbin/chown [user] /Library/Caches/Homebrew\r\n==> Downloading and installing Homebrew...\r\nremote: Counting objects: 496, done.\r\nremote: Compressing objects: 100% (445/445), done.\r\nremote: Total 496 (delta 31), reused 306 (delta 22), pack-reused 0\r\nReceiving objects: 100% (496/496), 774.73 KiB | 80.00 KiB/s, done.\r\nResolving deltas: 100% (31/31), done.\r\nFrom https://github.com/Homebrew/brew\r\n * [new branch]      master     -> origin/master\r\nChecking out files: 100% (486/486), done.\r\nHEAD is now at 66cda61 test-bot: fix diff_formulae\r\n==> Tapping homebrew/core\r\nCloning into '/usr/local/Library/Taps/homebrew/homebrew-core'...\r\nremote: Counting objects: 3706, done.\r\nremote: Compressing objects: 100% (3588/3588), done.\r\nremote: Total 3706 (delta 12), reused 2251 (delta 8), pack-reused 0\r\nReceiving objects: 100% (3706/3706), 2.88 MiB | 87.00 KiB/s, done.\r\nResolving deltas: 100% (12/12), done.\r\nChecking connectivity... done.\r\nChecking out files: 100% (3709/3709), done.\r\nTapped 3583 formulae (3,732 files, 8.9M)\r\n==> Installation successful!\r\n```\r\n\r\nThis is exactly what I had hoped it would do when I first re-ran install.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 395
	},
	{
		"id" : 228167336,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-23T20:04:45Z",
		"body" : "@bcdady We'll welcome pull requests for this but this isn't something I really think we can improve much as it's going to be really difficult to differentiate between a partial and valid install.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 395
	},
	{
		"id" : 228275119,
		"user" : {
			"login" : "bcdady"
		},
		"created_at" : "2016-06-24T07:19:57Z",
		"body" : "I'm not proficient with Ruby, but I'll give it a try.\r\nI'm assuming I'm missing some appreciation of the details ... why do we have to abort if\r\n`#{HOMEBREW_PREFIX}/.git/*` (/usr/local/.git/ in most? default cases) is not empty (line 136)?\r\n\r\nIs preemptively deleting the /.git/ directory problematic? I would suppose that most of the time, replacing that directory with a fresh copy of the **brew** repository will be the best option to get an interrupted/incomplete/partial install back on track, and ideally to a point where a new Homebrew user could then run `brew help`, `brew update` and/or `brew doctor`\r\n\r\nI can take a crack at updating a copy and preparing a pull request, but please let me know if this proposal won't hold water ... e.g. if there are other install or prerequisite steps that like being repeated.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 395
	},
	{
		"id" : 228566998,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-25T19:41:54Z",
		"body" : "> Is preemptively deleting the /.git/ directory problematic?\r\n\r\nYes, unfortunately so because it could be used by either an existing Homebrew installation or something else. This is why we can't really handle this automatically. What might be a better solution would be to modify the `install` script so it handles failures better and cleans up after itself so that running it again would be successful?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 395
	},
	{
		"id" : 229798567,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-30T21:47:16Z",
		"body" : "Have addressed feedback.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 396
	},
	{
		"id" : 229816833,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-30T23:28:01Z",
		"body" : "I guess this is the first time an integration test tries to run a `brew` subprocess and our test environment isn't really prepared to handle that. I'm afraid this PR is more involved than one would expect.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 396
	},
	{
		"id" : 231409023,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-08T16:38:25Z",
		"body" : "Addressed all commits, split into two commits.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 396
	},
	{
		"id" : 231411714,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-08T16:49:38Z",
		"body" : "Spotted one minor style issue (didn't notice any others, but maybe RuboCop sees more), thus a final re-run of RuboCop on the modified files before pulling this would be appreciated.\r\n\r\nOther than that, it looks good to me. Thanks for addressing everything! üëç when üçè.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 396
	},
	{
		"id" : 228223220,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-06-24T00:17:38Z",
		"body" : "looks like a duplicate of https://github.com/Homebrew/homebrew-core/pull/1359",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 397
	},
	{
		"id" : 228566470,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-25T19:30:20Z",
		"body" : "> looks like a duplicate of Homebrew/homebrew-core#1359\r\n\r\nClosing in favour of that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 397
	},
	{
		"id" : 231903641,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-07-12T00:18:53Z",
		"body" : "I've removed the `ensure` blocks thanks to [#475](https://github.com/Homebrew/brew/pull/475). üéâ \r\n\r\nAre any other revisions needed at this point? Wondering if I've missed any details in other pull requests that have since been merged...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 398
	},
	{
		"id" : 231948247,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-12T06:24:27Z",
		"body" : "> Are any other revisions needed at this point? Wondering if I've missed any details in other pull requests that have since been merged...\r\n\r\nOne minor suggestion, but apart from that I think we're good. Haven't spotted anything that would be missing or that would require adjustments to changes that have happened recently.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 398
	},
	{
		"id" : 228470114,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-24T21:47:39Z",
		"body" : "Oh well, it wouldn't be a rollout if there wasn't at least one bug :smile: \r\n\r\nCould we fix this in `Keg#mach_o_files`? We currently have this exclusion logic:\r\n\r\n```ruby\r\npath.find do |pn|\r\n      next if pn.symlink? || pn.directory?\r\n      mach_o_files << pn if pn.dylib? || pn.mach_o_bundle? || pn.mach_o_executable?\r\nend\r\n```\r\n\r\nOne possible approach is the one used in `Pathname#compute_disk_usage`, where a set of scanned files is built and only added to when a file's device ID/inode pair is unique.\r\n\r\nThoughts?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 399
	},
	{
		"id" : 228558560,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-25T17:06:57Z",
		"body" : ">I'm not sure that's something we actually want and it shouldn't be necessary if we address the other two items, but I wanted to list this for the sake of completeness\r\n\r\nAre the problems it can catch actually likely to occur? If not, it seems like mimicking the \"old\" behavior is the path of least resistance.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 399
	},
	{
		"id" : 228559658,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-25T17:17:36Z",
		"body" : "The two-line change I propose in #400 should fix the problem for both `cctools` and `ruby-macho` (since both use `Pathname#mach_o_files`), even though only `ruby-macho` actually complains about it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 399
	},
	{
		"id" : 228560048,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-25T17:21:30Z",
		"body" : "You need to be checking st_dev too as here https://github.com/Homebrew/brew/blob/master/Library/Homebrew/extend/pathname.rb#L40",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 399
	},
	{
		"id" : 228560500,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-25T17:26:22Z",
		"body" : "Updated it!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 399
	},
	{
		"id" : 228850145,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-27T19:31:03Z",
		"body" : "The fix in #400 looks reasonable to me; thanks for your clear explanation!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 399
	},
	{
		"id" : 228955816,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-28T05:58:27Z",
		"body" : "Presuming fixed by #400 but please reopen at will.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 399
	},
	{
		"id" : 229025776,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-28T11:44:31Z",
		"body" : "@ilovezfs @tdsmith Thanks a bunch for your help with this during my absence!\r\n\r\n> Oh well, it wouldn't be a rollout if there wasn't at least one bug üòÑ\r\n\r\nIndeed! üòÄ It's a rather subtle issue, as can be seen from my report. Absolutely not trying to blame you here, as none of us was able to foresee this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 399
	},
	{
		"id" : 228849129,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-27T19:27:08Z",
		"body" : "Does this need a new test?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 228883300,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-27T21:36:56Z",
		"body" : "@tdsmith I can add one, if you'd like!\r\n\r\nThe simplest test for correctness would probably just be a directory with one or more hardlinked binaries - `mach_o_files` should only report the ones with the same inodes once. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 228884011,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-27T21:39:31Z",
		"body" : "I'm on a testing kick so I think that would be grand but feel free to tell me off. :D",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 228884645,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-27T21:41:55Z",
		"body" : "I'm happy to. I'll have one up in a few minutes :smile: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 228915095,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-28T00:25:42Z",
		"body" : "Any insight onto what I'm doing wrong here? I'm not too familiar with constructing kegs...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 228954253,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-28T05:46:24Z",
		"body" : "That took me way too long to spot. This is why we write tests, I guess, ahahaha.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 228959791,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-28T06:27:01Z",
		"body" : "Reverted in cab97cf4d782ce because `brew install qt5` was breaking:\r\n\r\n```\r\n$ brew install qt5 && brew linkage qt5\r\n...\r\nVariable-referenced libraries:\r\n  @@HOMEBREW_CELLAR@@/qt5/5.6.1-1/lib/Qt3DCore.framework/Versions/5/Qt3DCore\r\n  @@HOMEBREW_CELLAR@@/qt5/5.6.1-1/lib/Qt3DInput.framework/Versions/5/Qt3DInput\r\n  @@HOMEBREW_CELLAR@@/qt5/5.6.1-1/lib/Qt3DQuick.framework/Versions/5/Qt3DQuick\r\n  @@HOMEBREW_CELLAR@@/qt5/5.6.1-1/lib/Qt3DRender.framework/Versions/5/Qt3DRender\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 228961794,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-28T06:36:15Z",
		"body" : "Ah: we should skip symlinks before we do the hardlink check. I guess because stat dereferences the symlink?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 228963359,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-28T06:42:10Z",
		"body" : "Here's a test:\r\n\r\n```ruby\r\n  def test_mach_o_files_isnt_confused_by_symlinks\r\n    a = HOMEBREW_CELLAR.join(\"a\", \"1.0\")\r\n    a.join(\"lib\").mkpath\r\n    FileUtils.cp dylib_path(\"i386\"), a.join(\"lib\", \"i386.dylib\")\r\n    FileUtils.ln a.join(\"lib\", \"i386.dylib\"), a.join(\"lib\", \"i386_link.dylib\")\r\n    FileUtils.ln_s a.join(\"lib\", \"i386.dylib\"), a.join(\"lib\", \"1.dylib\")\r\n\r\n    keg = Keg.new(a)\r\n    keg.link\r\n\r\n    assert_equal 1, keg.mach_o_files.size\r\n  ensure\r\n    keg.unlink\r\n    keg.uninstall\r\n  end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 228964955,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-28T06:48:34Z",
		"body" : "Confirmation that #stat dereferences symlinks: http://ruby-doc.org/core-2.3.1/File/Stat.html#method-i-symlink-3F",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 229024929,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-28T11:39:52Z",
		"body" : "@tdsmith Thanks for helping out with this and for suggesting to add a test! ‚ù§Ô∏è\r\n\r\n@woodruffw Unfortunately, my presence will remain spotty for the next couple of days. Nevertheless, I have added a few code comments beyond the actual fix that I'd love to see addressed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 229041770,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-28T13:01:41Z",
		"body" : "@UniqMartin Got it! I'll apply your recommended changes when I'm back at home :smile: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 229189078,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-28T21:26:42Z",
		"body" : "> Reverted a \"fixed\" version in cab97cf because brew install qt5 was breaking\r\n\r\nI think as a result it would be good to guard these new changes behind the same environment variable we're using for Ruby MachO rather than making them unconditional where they aren't needed. Ideally, I think it'd be worth just moving stuff like this into Ruby MachO itself so it's a better drop-in replacement for e.g. `otool` and `install_name_tool` and more useful for other projects.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 229197653,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-28T22:01:14Z",
		"body" : "Updates to python and python3 are pending on either landing this or disabling Ruby MachO on the test bot; I don't care which we do but I'd like to do it soon. :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 229197731,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-28T22:01:35Z",
		"body" : "> I think as a result it would be good to guard these new changes behind the same environment variable we're using for Ruby MachO rather than making them unconditional where they aren't needed.\r\n\r\nI disagree. They aren't needed in the sense that `install_name_tool` doesn't do proper error handling when changing dylib IDs and install names and that's the only reason why our broken behavior didn't cause a visible error (because `install_name_tool` silently fails). That this isn't desirable is (in my opinion) implicitly acknowledged by Apple, as the more recent additions for adding, changing, and deleting RPATHs all return with an error code in similar cases. It was just too late to change the existing behavior for the older `-id` and `-change` options.\r\n\r\nIf we don't use this opportunity to fix this, now that the stricter behavior of `ruby-macho` has exposed this bug, we're doing ourselves a disservice. As discussed in #371 we very likely want to inspect and modify RPATHs and if we decide to implement this for both the `ruby-macho` and the `cctools` backend, we'll be affected by this issue again, no matter which backend will be used.\r\n\r\n> Ideally, I think it'd be worth just moving stuff like this into Ruby MachO itself so it's a better drop-in replacement for e.g. `otool` and `install_name_tool` and more useful for other projects.\r\n\r\nIf packaged as a pure-Ruby version of `otool` and `install_name_tool`, it makes sense to exactly replicate the behavior including less desirable quirks like the mentioned error handling. But the library API should be stricter (as it currently is), giving the client code a chance to react to error conditions and leaving it up to the client code to (silently) swallow them if desired.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 229198589,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-28T22:04:49Z",
		"body" : "> Updates to python and python3 are pending on either landing this or disabling Ruby MachO on the test bot; I don't care which we do but I'd like to do it soon. :)\r\n\r\n@woodruffw just pushed code that I'm completely happy with and would tend to merge, if they pass CI.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 229215789,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-28T23:35:22Z",
		"body" : "> I disagree. They aren't needed in the sense that install_name_tool doesn't do proper error handling when changing dylib IDs and install names and that's the only reason why our broken behavior didn't cause a visible error (because install_name_tool silently fails). That this isn't desirable is (in my opinion) implicitly acknowledged by Apple, as the more recent additions for adding, changing, and deleting RPATHs all return with an error code in similar cases. It was just too late to change the existing behavior for the older -id and -change options.\r\n\r\nüëç I did not realise it was silently failing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 229255286,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-29T04:46:48Z",
		"body" : "I think this is all good on my end, please merge at your convenience!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 229344956,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-29T12:46:01Z",
		"body" : "> I think this is all good on my end, please merge at your convenience!\r\n\r\nLooks good to me; thanks! I merged it and will be monitoring the bot for a while just in case.\r\n\r\n> Updates to python and python3 are pending on either landing this or disabling Ruby MachO on the test bot; I don't care which we do but I'd like to do it soon. :)\r\n\r\nI re-queued builds for both Homebrew/homebrew-core#2415 (Python 3.5.2) and Homebrew/homebrew-core#2452 (Python 2.7.12). Let's see how that goes ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 229354965,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-29T13:26:53Z",
		"body" : "> I re-queued builds for both Homebrew/homebrew-core#2415 (Python 3.5.2) and Homebrew/homebrew-core#2452 (Python 2.7.12). Let's see how that goes ‚Ä¶\r\n\r\nBoth went through without error, so I'm somewhat optimistic we managed to fix this for real. :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 229364814,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-06-29T14:01:19Z",
		"body" : "Great news! ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 400
	},
	{
		"id" : 228767723,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-06-27T14:47:17Z",
		"body" : "> This means \"slow adopters\" are often left with many older kegs that have no use, even after using the command.\r\n\r\nBut what about people who *do* have a use for older kegs? One of the nice things about HB is the ability to keep multiple versions of something on hand and easily switch between them if needed.  IIUC, this PR would destroy this ability.  That makes `cleanup` too aggressive, I think.\r\n\r\nI agree that the current `cleanup` is not ideal and isn't aggressive enough for certain use cases.  There are just too many different kinds of tidying-up tasks, and too many different-but-reasonable expectations about what will/should happen, to be jammed into one command.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 228779344,
		"user" : {
			"login" : "usmonster"
		},
		"created_at" : "2016-06-27T15:23:41Z",
		"body" : "@chdiza Thanks for the feedback! About this:\r\n> But what about people who do have a use for older kegs? One of the nice things about HB is the ability to keep multiple versions of something on hand and easily switch between them if needed. IIUC, this PR would destroy this ability. [...]\r\n\r\nActually, no. üòÑ I'm not sure I was clear enough, but this PR only aligns behavior of the command with its description from `brew help cleanup`:\r\n> For all installed or specific formulae, remove any older versions from the cellar. [...]\r\n\r\nPeople who run `brew cleanup` want to remove older versions of all (or speficic) formulae. This PR makes that happen. It still won't remove old kegs that are linked or newer than the linked version. If none of the installed kegs for a formula are linked, it will still leave the one with the latest version. The use case you mention is not applicable to people who use this command.\r\n\r\nI hope this clarifies things for you. :) This PR just makes the command more generally-useful. üåà ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 229614502,
		"user" : {
			"login" : "sedm0784"
		},
		"created_at" : "2016-06-30T09:53:35Z",
		"body" : "> But what about people who do have a use for older kegs? One of the nice things about HB is the ability to keep multiple versions of something on hand and easily switch between them if needed. IIUC, this PR would destroy this ability. That makes cleanup too aggressive, I think.\r\n\r\nI don't understand this question. If a user has a use for the older versions and doesn't want them deleted, why are they running `brew cleanup` on those formulae? Isn't removing them the purpose of the command? What am I missing?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 229677811,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-06-30T14:37:14Z",
		"body" : "> If a user has a use for the older versions and doesn't want them deleted, why are they running brew cleanup on those formulae?\r\n\r\nThe user would run the two-word command `brew cleanup`, not `brew cleanup the-package-foo`, with the purpose of getting rid of all \"junk\" across the HB installation, not just the junk associated with `the-package-foo`.  I don't think I've ever once run `brew cleanup some-formula`.\r\n\r\nIt doesn't matter though, because this PR simply makes `cleanup` do what the docs advertised.  I had got used to, and comfortable with, its buggy form without noticing that it differs from the docs.  I'll probably just make my own external command to do what I want.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 229700697,
		"user" : {
			"login" : "usmonster"
		},
		"created_at" : "2016-06-30T15:46:55Z",
		"body" : "> I'll probably just make my own external command to do what I want.\r\n\r\n@chdiza If I understand you correctly, what you want to do can be simply done with `brew pin`. ;)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 229704303,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-06-30T15:58:56Z",
		"body" : "`pin` doesn't tidy up any junk.  It prevents the installation of the lastest version of something.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 229708755,
		"user" : {
			"login" : "usmonster"
		},
		"created_at" : "2016-06-30T16:13:45Z",
		"body" : "@chdiza Of course. To be clear, I mean `brew pin some-formula-you-don't-want-cleaned-up` followed by `brew cleanup`. This will address your specific need of not wanting old stuff cleaned up when you run `brew cleanup`. I think we're getting off-topic though. :grin:\r\n\r\nAny Project Members want to look at this PR?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 229747927,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-06-30T18:30:15Z",
		"body" : "@usmonster It also prevents me from installing the latest version of a formula, or even seeing that the one I have is `outdated`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 229785536,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-30T20:53:15Z",
		"body" : "I agree with the general goal of this PR, but I think we need to clean up the logic a bit. Currently it's just dealing with too many cases in too many separate branches of the `if` statement. Here's a suggestion for how to basically re-implement the entire `eligible_kegs_for_cleanup` method:\r\n\r\n1. If none or only one version of a formula is installed, immediately return an empty array and don't complain at all.\r\n2. If at least two versions of a formula are installed:\r\n  1. Pick the currently linked version as a partition point. If none is linked, use the latest installed version.\r\n  2. Iterate over all installed versions and do one of:\r\n    1. If it's older than the partition point, it is eligible and should be cleaned up.\r\n    2. If it's identical to the partition point, it should stay.\r\n    3. If it's newer than the partition point, it isn't eligible, but it should produce a warning that this newer version was skipped/preserved.\r\n\r\nDoes this logic make sense? Have I missed an important use case? I think this approach massively simplifies the logic and yields the desired result. It always cleans up versions older than the one currently in use and leaves all newer versions alone (that might have been installed in the mean time). Those newer versions might exist because a user upgraded and then went back to an older version via `brew switch` because the newer version turned out to be problematic in some way.\r\n\r\nThanks for bringing this up and coming up with a PR! Sorry for the somewhat late feedback; these are busy days for me and apparently also for other maintainers ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 229881404,
		"user" : {
			"login" : "usmonster"
		},
		"created_at" : "2016-07-01T07:55:47Z",
		"body" : "@UniqMartin, thanks for thre feedback! I'm applying the small changes in the line comments, and I mostly agree with the restructuring of the logic you propose. From what I understand, the only behavioral differences between my PR and your proposal are that, in yours:\r\n\r\n1. There's no more warning when skipping the only installed (non-pinned) version\r\n2. A warning is now printed when skipping any versions (strictly) newer than the linked version\r\n3. There's no warning when skipping a linked version(? ..please verify)\r\n\r\nIs this correct and desired? If so, I'll implement this. Thanks again for the response! (And don't worry about delays--everybody's busy üòâ.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 230157677,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-03T15:00:52Z",
		"body" : "> This would only be if the only installed version isn't linked, correct? So the first condition would be something like:\r\n\r\nAlmost. I think you can drop the `!linked_keg.exist?` check because to me it feels like it doesn't matter whether the outdated installed version is linked or not, as long as it is pinned. But it took me a few moments to come up with this argument, so maybe that's not as intuitive/useful. What do you think?\r\n\r\nAnother thing you could do (because I just noticed in your snippet), is to structure the code as follows once you update your PR. This limits the amount of indentation and makes it a bit easier to read:\r\n\r\n```ruby\r\nif installed_prefixes.length < 2\r\n  # Handle the simple case (zero or one installed version of a formula).\r\n  return []\r\nend\r\n\r\n# Handle the remaining cases (what would have previously been the `else` or `elsif` branch).\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 230165729,
		"user" : {
			"login" : "usmonster"
		},
		"created_at" : "2016-07-03T17:47:28Z",
		"body" : "> I think you can drop the `!linked_keg.exist?` check because to me it feels like it doesn't matter whether the outdated installed version is linked or not, as long as it is pinned.\r\n\r\nThe \"not linked\" check is only there because we don't want to complain when we're skipping a linked keg. What I understood from that first added line is that, if there are fewer than 2 kegs installed, we only want to warn when skipping 1) the only keg (`any_version_installed?`), 2) that is not the newest version (`!installed?`), 3) is not pinned (`!pinned?`), and 4) is not linked (`!linked_keg.exist?`)... Does that make sense, or should I still drop that check?\r\n\r\nIn any case, I'd also like to write the tests first, but as I mentioned in the PR, it's not immediately clear how to write the tests I need without making some nontrivial additions to the existing testing infrastructure (though I only did a quick first glance+attempt and may be totally wrong..).\r\n\r\nThanks again for the advice and feedback, @UniqMartin!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 236913688,
		"user" : {
			"login" : "chuchana"
		},
		"created_at" : "2016-08-02T14:02:26Z",
		"body" : "Would it be possible to add a switch that hides the warnings that the latest version is not installed?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 237519236,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T10:47:47Z",
		"body" : "> Would it be possible to add a switch that hides the warnings that the latest version is not installed?\r\n\r\n@chuchana No, I don't think we'd want that. Much in Homebrew assumes the latest version is the one installed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 237551630,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-04T13:25:15Z",
		"body" : "@usmonster What's the status of this PR? It would be nice to incorporate the changes we discussed and to rebase it on an up-to-date `master` to resolve the merge conflicts. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 238019111,
		"user" : {
			"login" : "usmonster"
		},
		"created_at" : "2016-08-06T11:33:28Z",
		"body" : "@UniqMartin I went on vacation shortly after my last comment (still not reliably online for a few more days), but I just rebased to resolve the conflicts. Haven't yet written the tests or made changes to logic, but hoping to get that done on an upcoming flight. ;)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 244548282,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:03:52Z",
		"body" : "Closing this for now but please feel free to create a new PR when comments are addressed and it's rebased. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 401
	},
	{
		"id" : 229047695,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-28T13:25:42Z",
		"body" : "You'll need to run `brew man` for the man page and its HTML version to pick up this change (and add the resulting changes to those files here). Otherwise, this change will be picked up next time `brew man` is used in some other documentation-related PR. However, I believe some maintainers prefer to keep these developer-centric commands undocumented. Personally, I'd like for all our commands to be properly documented, but we might need to devise some system that excludes this documentation from the man page, while still keeping it available to `brew help <command>` and `brew <command> --help`.\r\n\r\nWhat are your plans for this PR? If we wanted to align the added documentation with existing command help, we'd need to detail the use of the various options that are listed in the summary line.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 402
	},
	{
		"id" : 229074694,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-28T14:55:05Z",
		"body" : "Oh, I didn't realize. I just want `-h` to work; I'll try and blacklist it from the manpage.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 402
	},
	{
		"id" : 229077362,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-28T15:03:03Z",
		"body" : "> I'll try and blacklist it from the manpage.\r\n\r\nThe easiest way to achieve this is to move it from `cmd/` to `dev-cmd/`, as the man page is only being populated with commands from the former. :wink:\r\n\r\nThis might be problematic if we ever want to be able to run tests in non-developer mode (maybe because there's some distinction in the code between developer and non-developer mode and we'd like to cover both). But maybe that's a non-issue; I haven't really thought this through ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 402
	},
	{
		"id" : 229192335,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-28T21:39:31Z",
		"body" : "> The easiest way to achieve this is to move it from cmd/ to dev-cmd/, as the man page is only being populated with commands from the former.\r\n\r\nüëç \r\n\r\n> This might be problematic if we ever want to be able to run tests in non-developer mode (maybe because there's some distinction in the code between developer and non-developer mode and we'd like to cover both). But maybe that's a non-issue; I haven't really thought this through ‚Ä¶\r\n\r\nI think we may want to think about setting `HOMEBREW_DEVELOPER` automatically for people at some point if we're going to be moving more of this stuff to being a `dev-cmd`. I do think that's worth it, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 402
	},
	{
		"id" : 229196913,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-28T21:58:09Z",
		"body" : "I added a blacklist mechanism; any objections to merging this as is? Our PR guide and PR template tells people to run `brew tests` without setting HOMEBREW_DEVELOPER, which I think is probably fine?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 402
	},
	{
		"id" : 229209755,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-28T23:01:02Z",
		"body" : "> I think we may want to think about setting `HOMEBREW_DEVELOPER` automatically for people at some point [‚Ä¶]\r\n\r\nSorry, but I don't quite understand how we would do this. What would be the criterion for auto-enabling?\r\n\r\n> I added a blacklist mechanism; any objections to merging this as is?\r\n\r\nNo objection to the concept, but still a few issues with the implementation. Sorry about that!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 402
	},
	{
		"id" : 229378032,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-29T14:43:09Z",
		"body" : ":+1: Works for me as-is. Thanks for addressing my feedback!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 402
	},
	{
		"id" : 228785401,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-27T15:43:17Z",
		"body" : "I'm not aware of the context here but I think I would prefer not to support systems that can't handle certificate validation in Homebrew/brew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 403
	},
	{
		"id" : 228786151,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-27T15:45:47Z",
		"body" : "-- although I don't want to relitigate something that's already been discussed; have folks already talked about this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 403
	},
	{
		"id" : 228790343,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-06-27T15:59:24Z",
		"body" : "Context was that cask supports OS versions under 10.6 and have the line in utils code \r\nhttps://github.com/AnastasiaSulyagina/homebrew-cask/blob/master/lib/vendor/homebrew-fork/utils.rb#L40\r\nAnd as code is to be merged and cask's part to be deleted (as part of [#14384](https://github.com/caskroom/homebrew-cask/issues/14384) and my summer GSOC project), I added the line back here because it was not supposed to break anything in brew but made cask code work correctly with brew's core.\r\n\r\nThough I'm trying to understand now why did build fail here, it was not supposed to influence anything in brew",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 403
	},
	{
		"id" : 228793159,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-06-27T16:09:06Z",
		"body" : "Committed wrong piece, sorry. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 403
	},
	{
		"id" : 228801907,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-27T16:40:02Z",
		"body" : "I see. I think it's really dangerous to silently disable certificate verification.\r\n\r\nAssuming (without checking) that the curl on 10.6 and below is too old to support SNI or TLS 1.2 I think we shouldn't attempt to use it on the modern Internet. If supporting < 10.6 is a firm requirement (and maybe we should push back on that), maybe this is a candidate for vendoring for old systems, √† la git and ruby in #404? /cc @xu-cheng @DomT4 \r\n\r\nIf I'm wrong and the problem is just certificates, maybe we bundle the Mozilla certificate bundle from https://curl.haxx.se/docs/caextract.html?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 403
	},
	{
		"id" : 228807838,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-27T17:01:32Z",
		"body" : "Yeah, I'd be pretty unhappy to say the least if we stuck this back in. I'm not convinced it was an entirely good idea when we originally tolerated it, I think there's even less of a case for it today.\r\n\r\nI'm a little confused how this PR meshes with the [10.6 check](https://github.com/Homebrew/brew/blob/549c86dfe2a030705836a09ef212cc8ef74f7f49/Library/brew.rb#L14-L19) in `brew`.\r\n\r\nIt's perhaps worth noting that the code for handling `curl` has deviated pretty significantly from where it was when the Cask forked it, including wholly excluding our newer mechanisms for favouring Homebrew's `curl` when present on older systems.\r\n\r\nWe also have added a `doctor` nag nudging people using <10.9 to install Homebrew's `curl`, and I've started work on [a command](https://github.com/Homebrew/brew/pull/241) to update certificates shipped with `openssl`, `libressl`, `gnutls` etc, particularly (but not exclusively) on older systems.\r\n\r\nMy PR there is kind of paused at the moment because I managed to end up dumping far too much on my plate at once, but it isn't dead, FWIW.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 403
	},
	{
		"id" : 228820687,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-06-27T17:47:26Z",
		"body" : "Ok, did not expect that. It seemed pretty similar to the old state on first glance. So what options do I have? ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 403
	},
	{
		"id" : 228826647,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-27T18:06:58Z",
		"body" : "I'm not sure of the broader context here, beyond your original comment. For obvious reasons I've been keeping my nose out of other GSoC stuff, beside when directly pinged. If your need to do this is limited to how Homebrew currently uses `curl`, i.e. for the `fetch` mechanism, then you shouldn't need to change anything.\r\n\r\n10.8 and below users will still be nagged to install Homebrew's `curl`, should soonish have a way to update certs out-of-band & if we get issues on downloading for those platforms installing our `curl` will be our first suggestion. FWIW 98% of Homebrew's known userbase is running 10.9 or newer.\r\n\r\nIf you're planning to piggyback on the existing fetch mechanism no changes should be required to that purely in terms of which `curl` and why, but please do feel free to elaborate if there's a misunderstanding here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 403
	},
	{
		"id" : 229186606,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-28T21:17:28Z",
		"body" : "Thanks @AnastasiaSulyagina! I agree we probably don't need this. That said, we should eventually aim to have Homebrew/brew be effectively a merge of Tigerbrew and Linuxbrew's core but I agree unconditionally passing `--insecure` is probably not a good way of doing that. CC @mistydemeo for thoughts here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 403
	},
	{
		"id" : 228786080,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-27T15:45:32Z",
		"body" : "Could we make this PR just for Ruby for now to slim the diff and add documentation for how to build and upload the Ruby as part of this PR? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 404
	},
	{
		"id" : 228969592,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-28T07:11:27Z",
		"body" : "I make the PR only for ruby now.\r\n\r\n> add documentation for how to build and upload the Ruby as part of this PR?\r\n\r\nI have move the portable formulae repo under Homebrew's organization: https://github.com/Homebrew/homebrew-portable\r\nI think document should go to that repo.\r\n\r\nThere are already some basic document here. However, I may not find enough free time lately to working on automatic building/uploading tool. If any maintainers are interesting to work on that, feel free to do so. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 404
	},
	{
		"id" : 228969973,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-28T07:13:22Z",
		"body" : "cc @mistydemeo @sjackman for suggesting on automatic building PowerPC and Linux vendor tools.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 404
	},
	{
		"id" : 229096482,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-28T16:02:21Z",
		"body" : "> Add `install-vendor` command to install vendor ruby/git\r\n\r\nCan we rename this to `vendor-install` or something similar? The problem here is that this has a common prefix with the very popular `install` command and will annoy people that are used to the `install` command being tab-completed (including the trailing space). We can of course also address this by excluding `install-vendor` from tab completion, but this adds unnecessary complication.\r\n\r\n> The vendor Ruby/Git will be put inside `Library/Homebrew/vendor/{ruby,git}/<version>`, with a symlink `Library/Homebrew/vendor/{ruby,git}/opt` pointed to it.\r\n\r\nI think re-using `opt` here (I assume inspired from `HOMEBREW_PREFIX/opt`) feels a bit confusing to me, simply because the directory structure is a different one (`<package>/opt` vs. `opt/<package>`). I believe `active`, `current`, or `latest` (in this order of preference) would be a better name here. `opt` isn't self-explanatory if it appears in a directory listing next to a bunch of version numbers, but e.g. `active` is.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 404
	},
	{
		"id" : 229191178,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-28T21:34:54Z",
		"body" : "> I make the PR only for ruby now.\r\n\r\nThanks. I still see e.g. `git_URL` in here, though?\r\n\r\n> There are already some basic document here. However, I may not find enough free time lately to work on automatic building/uploading tool. If any maintainers are interesting to work on that, feel free to do so.\r\n\r\nWould be good to add how/where to upload to that document, even if it's not automatic or terminal commands but links to e.g. Bintray. Also, rather than documenting multiple commands just making a simple script that runs them and could be part of that tap feels like it'll be easier e.g. `brew portable-install ruby` that just runs those commands listed in the Ruby and checks the exit codes.\r\n\r\n> Can we rename this to vendor-install or something similar? The problem here is that this has a common prefix with the very popular install command and will annoy people that are used to the install command being tab-completed (including the trailing space).\r\n\r\nüëç \r\n\r\n> I think re-using opt here (I assume inspired from HOMEBREW_PREFIX/opt) feels a bit confusing to me, simply because the directory structure is a different one (<package>/opt vs. opt/<package>). I believe active, current, or latest (in this order of preference) would be a better name here. opt isn't self-explanatory if it appears in a directory listing next to a bunch of version numbers, but e.g. active is.\r\n\r\nüëç to `current` but üëç to this point in general.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 404
	},
	{
		"id" : 229295854,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-29T08:49:48Z",
		"body" : "> I still see e.g. git_URL in here, though?\r\n\r\nCan we keep it as is for now, which can help me to reduce conflicting in git rebase. Please note I want to ship vendoring Ruby and git at the same time, or at least in short time between two. As I have stated in the old PR, we need to make sure vendoring system work for both Ruby and Git(as they are invoked in different ways). It will create a lot of implemention as well as maintenance problems if we fail to make sure them in the first time. \r\n\r\nAs for auto-building, I am considering to ultilize test-bot in #410. But there are several things need to be done. One simple script for all won't work, because there are a few manually tests invoked. I will need to tweak test and linkage command to make auto test possible. \r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 404
	},
	{
		"id" : 229453595,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-29T18:55:37Z",
		"body" : "> Can we keep it as is for now, which can help me to reduce conflicting in git rebase. Please note I want to ship vendoring Ruby and git at the same time, or at least in short time between two. As I have stated in the old PR, we need to make sure vendoring system work for both Ruby and Git(as they are invoked in different ways). It will create a lot of implemention as well as maintenance problems if we fail to make sure them in the first time.\r\n\r\nI'm pretty distrustful of any system that involves us having to get it perfect first time. As a result, I'd like to consider making this opt-in using an environment variable so we can get wider testing with it in `master` before we roll it out to everyone to build confidence (as we did with the Bash updater which was a similarly dramatic change).\r\n\r\n I'm üëé on shipping Git and Ruby at the same time or having Git references in this PR. We should ship just Ruby first and shipping Git/Curl once we've had vendored Ruby working in production for users for e.g. a few weeks. Making the PR as minimal as possible will make review better and faster and introduce less changes that could break things.\r\n\r\n> As for auto-building, I am considering to ultilize test-bot in #410. But there are several things need to be done. One simple script for all won't work, because there are a few manually tests invoked. I will need to tweak test and linkage command to make auto test possible.\r\n\r\nWe don't need autobuild or autotesting but there's definitely room to script some of the instructions you have there and e.g. run commands and tell the developers to manually inspect them. Documentation gets easily outdated, scripts less so.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 404
	},
	{
		"id" : 229576750,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-30T07:03:15Z",
		"body" : ">  As a result, I'd like to consider making this opt-in using an environment variable so we can get wider testing with it in master before we roll it out to everyone to build confidence (as we did with the Bash updater which was a similarly dramatic change).\r\n\r\nWe can do it.\r\n\r\n> having Git references in this PR\r\n\r\nSorry, but I fail to understand why a simple line `git_URL` would cause any problem. It's very frustrated for me as you are basically asking me to repeatedly manually fix git conflict for me to test both vendor Ruby and Git locally whenever I refresh this PR. I'd like to choose the road which makes my development easier. \r\n\r\n> I'm üëé on shipping Git and Ruby at the same time\r\n\r\nOK, maybe I should rephrase my word. I won't ship any PR before I have confidence this vendor system can work for both git and ruby, which means it should at lease pass my local tests. As I have kept repeatedly stated, some part of details in system cannot be easily changed afterwards. \r\n\r\n> I'm pretty distrustful of any system that involves us having to get it perfect first time. \r\n\r\nI am just trying to make it as perfect as possible in the first time. I don't think you are against this right?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 404
	},
	{
		"id" : 229657460,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-30T13:27:28Z",
		"body" : "I think I have addressed all comments.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 404
	},
	{
		"id" : 229802098,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-30T22:03:45Z",
		"body" : "> We can do it.\r\n\r\nGreat üëç \r\n\r\n> Sorry, but I fail to understand why a simple line git_URL would cause any problem. It's very frustrated for me as you are basically asking me to repeatedly manually fix git conflict for me to test both vendor Ruby and Git locally whenever I refresh this PR. I'd like to choose the road which makes my development easier.\r\n\r\nSorry, I don't think resolving conflicts in your local development environment justifies adding code to a Homebrew pull request. It won't cause problems but it's dead code that implies a Git feature that's not reviewed yet or a hard requirement for 1.0 (like Ruby is). I'd suggest you focus on just building the Ruby feature for now and don't rebase the Git work until this PR is merged. \r\n\r\n> OK, maybe I should rephrase my word. I won't ship any PR before I have confidence this vendor system can work for both git and ruby, which means it should at lease pass my local tests. As I have kept repeatedly stated, some part of details in system cannot be easily changed afterwards.\r\n\r\nWhy does this system need to work for Git for us to ship the Ruby PR?\r\n\r\n> I am just trying to make it as perfect as possible in the first time. I don't think you are against this right?\r\n\r\nNope, but I do think it's important to focus on Ruby for now and Git later.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 404
	},
	{
		"id" : 229864728,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-01T06:28:52Z",
		"body" : "> Why does this system need to work for Git for us to ship the Ruby PR?\r\n\r\nThis is where you missed. We do need to make vendor system including update detection works for both Ruby and Git. On the one hand, I don't like the idea that we will have two different systems to vendor  them, if we find it fails for Git. On the other hand, it is extremely important that we should make sure users won't stuck on old vendor version. Because otherwise, we are creating a huge security hole here. And more improtantly, things like file structure cannot be esaily changed in the future PR at all.\r\n\r\nIf any help, I can remove the Git mention only before we are shipping this PR. But before then, I will keep it. I don't want to be shortsight on robutness and security. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 404
	},
	{
		"id" : 229974505,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-01T15:20:26Z",
		"body" : "> If any help, I can remove the Git mention only before we are shipping this PR. \r\n\r\nYes, that's fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 404
	},
	{
		"id" : 229121145,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-28T17:28:14Z",
		"body" : "Thanks for starting this! I allowed myself to leave some code comments with questions, suggestions, and the usual amount of style nit picking. üôà",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 405
	},
	{
		"id" : 229134068,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-28T18:10:59Z",
		"body" : "I noticed. :D",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 405
	},
	{
		"id" : 229142031,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-28T18:37:25Z",
		"body" : "Updated to address your feedback; thanks for taking a look.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 405
	},
	{
		"id" : 229145489,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-28T18:49:06Z",
		"body" : "Great, including the style changes that I haven't pointed out because I don't have them memorized! (But I don't have to, because I have my editor set up to highlight RuboCop violations during editing. If only `brew audit` would always output line and‚Äîif applicable‚Äîcolumn information, it could be used similarly.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 405
	},
	{
		"id" : 229768338,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-30T19:48:14Z",
		"body" : "Merged in 3e309d4643ab52ce823b8733d72f8665133dbf5e. Thank you for this contribution to Homebrew, @tonyta! You rock! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 406
	},
	{
		"id" : 229500994,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-06-29T21:54:39Z",
		"body" : "Anyone care to comment on this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 229505075,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-06-29T22:12:38Z",
		"body" : "@UniqMartin fixed",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 229506627,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-29T22:19:40Z",
		"body" : "I'm sorry, but the feedback I will be able to provide is limited because I'm not a ZSH user. Do I understand correctly, that the gist of this change is: if none of the built-in command completions apply, check whether a shell function named `_brew_<command>` exists and if it does, let it handle the completion?\r\n\r\nIf that's the case, I think this is a reasonable change. Ideally, and if you don't consider this to be out of scope, I'd love to see this PR extended such that the completion script is able to automatically load a completion file for an external command provided by a tap (as this tends to be the primary way of distributing external commands for `brew` nowadays). A very rough sketch would be:\r\n\r\n1. If applicable, use the built-in completion and be done.\r\n2. If it exists, use the `_brew_<command>` shell function and be done.\r\n3. If `brew command <command>` returns a path that points into the `cmd/` directory of a tap, use that to construct a path like `<tap>/cmd/completions/zsh/_brew_<command>` and try to source the file. Then retry step 2. (The exact path for hosting those completions in a tap is obviously up for debate.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 229507033,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-29T22:21:33Z",
		"body" : "> fixed\r\n\r\nNope, it's not. Please do this for all the variables in all the lines you touched (as I asked you in my comment), not just the single line I commented on. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 229514587,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-06-29T22:59:05Z",
		"body" : "My mistake - I misread your comment. Sorry about that. Should be all fixed now :)\r\n\r\nYes, you understand correctly. I'm flipping the responsibility for calling the brew cask completions to be from the brew completion rather than the other way around. The general convention for completions in zsh is that _command() defines a completion, and these functions are generally loaded automatically by the shell by sticking them somewhere in fpath and running compinit.\r\n\r\nOn your suggestion for extending this, I **think** it's possibly out of scope for this change. Completions installed as part of a tap should be symlinked to /usr/local/share/zsh/site-functions and hence be automatically loaded by the shell. I haven't confirmed this however. Can you please point me to an example of a tap completion that I can look at?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 229521423,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-29T23:41:01Z",
		"body" : "> My mistake - I misread your comment. Sorry about that. Should be all fixed now :)\r\n\r\nIt is. Thanks!\r\n\r\n> The general convention for completions in zsh is that _command() defines a completion, and these functions are generally loaded automatically by the shell by sticking them somewhere in fpath and running compinit.\r\n\r\nWhat is triggering the actual load? I imagine if one types `ls` for the first time then the logic behind `compinit` will make sure to load `_ls` from `fpath` to provide those completions. Am I right?\r\n\r\nBut how does the auto-loading work for something like `brew cask`? I imagine the load would need to be triggered from within `_brew`. Is doing `declare -f _brew_cask` sufficient to make ZSH look into `fpath` and load a file named `_brew_cask` if there's no function of that name yet? (Sorry for asking possibly stupid questions, but I figure this might still be faster than me becoming a ZSH user. :wink:)\r\n\r\n> On your suggestion for extending this, I **think** it's possibly out of scope for this change.\r\n\r\nThat's too bad. I think this would be really useful and it would be awesome if someone made the first step for the benefit of all external commands hosted in taps.\r\n\r\n> Completions installed as part of a tap should be symlinked to /usr/local/share/zsh/site-functions and hence be automatically loaded by the shell.\r\n\r\nThis partially taps into the above question regarding auto-loading. But regardless, I think symlinking is a bit more error prone than what I suggested and would require Homebrew to manage yet another set of symlinks in this directory, in addition to completions provided by Homebrew itself (just `_brew`) and completions provided by formulae. Obviously, that's just my opinion and other maintainers may strongly disagree. But to get back to being constructive, would automatically extending `fpath` from within `_brew` be a viable alternative to symlinking?\r\n\r\n> Can you please point me to an example of a tap completion that I can look at?\r\n\r\nUnfortunately, I cannot. I'm not aware of any taps with commands that define their own completions in this way, simply because the Homebrew completion script doesn't offer this level of extensibility (yet).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 229546023,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-06-30T02:48:03Z",
		"body" : "> What is triggering the actual load? I imagine if one types ls for the first time then the logic behind compinit will make sure to load _ls from fpath to provide those completions. Am I right?\r\n\r\nKinda - compinit sets up the autoload, but zsh manages the autoload when you do this.\r\n\r\n> But how does the auto-loading work for something like brew cask? I imagine the load would need to be triggered from within _brew. Is doing declare -f _brew_cask sufficient to make ZSH look into fpath and load a file named _brew_cask if there's no function of that name yet? (Sorry for asking possibly stupid questions, but I figure this might still be faster than me becoming a ZSH user. üòâ)\r\n\r\ncompinit runs and looks at the first couple of lines of each of the scripts in fpath. It checks each for autoload. If it's an autoloaded function it interacts with the default zsh autoload feature (load script from fpath when necessary). The `declare -f` line allows us to only call the autoloaded function if it's been previously defined / setup for autoload. If the function doesn't exist, it returns non-zero, so this does nothing if there's no other command defined. Otherwise, calling the function causes autoload to define the function body properly (and read the _brew_cask script / function in full) See https://github.com/joshka/zsh-completions/commit/31b4e82887626eee236a9806ec9c4f5dee90056c for the brew cask side of the funciton.\r\n\r\n> That's too bad. I think this would be really useful and it would be awesome if someone made the first step for the benefit of all external commands hosted in taps.\r\n\r\nI _personally_ think that the completions should belong in the homebrew cask repo rather than external, so that they can be versioned concurrently with the project, but the maintainers have suggested that they don't want it in the repo. See https://github.com/caskroom/homebrew-cask/issues/22434#issuecomment-229008519. @vitorgalvao might be able to provide more context on why this is so.\r\n\r\n> This partially taps into the above question regarding auto-loading. But regardless, I think symlinking is a bit more error prone than what I suggested and would require Homebrew to manage yet another set of symlinks in this directory, in addition to completions provided by Homebrew itself (just _brew) and completions provided by formulae. Obviously, that's just my opinion and other maintainers may strongly disagree. But to get back to being constructive, would automatically extending fpath from within _brew be a viable alternative to symlinking?\r\n\r\nMy /usr/local/share/zsh/site-functions already contains a bunch of symlinks to installed formulae.\r\n```\r\n$ ll /usr/local/share/zsh/site-functions\r\ntotal 72\r\n-rw-r--r--  1 joshka  admin   5.2K Jun 29 17:28 _brew\r\n-rw-r--r--  1 joshka  admin   3.1K Jun 27 16:17 _brew_cask\r\nlrwxr-xr-x  1 joshka  admin    55B Jun 16 15:08 _git -> ../../../Cellar/git/2.9.0/share/zsh/site-functions/_git\r\nlrwxr-xr-x  1 joshka  admin    60B Jun 26 17:49 _hg -> ../../../Cellar/mercurial/3.8.3/share/zsh/site-functions/_hg\r\nlrwxr-xr-x  1 joshka  admin    55B Feb 11 10:32 _hub -> ../../../Cellar/hub/2.2.3/share/zsh/site-functions/_hub\r\nlrwxr-xr-x  1 joshka  admin    56B Jun 26 17:49 _mpv -> ../../../Cellar/mpv/0.18.0/share/zsh/site-functions/_mpv\r\nlrwxr-xr-x  1 joshka  admin    74B Jun 26 17:49 _youtube-dl -> ../../../Cellar/youtube-dl/2016.06.26/share/zsh/site-functions/_youtube-dl\r\nlrwxr-xr-x  1 joshka  admin    70B Jun 16 15:08 git-completion.bash -> ../../../Cellar/git/2.9.0/share/zsh/site-functions/git-completion.bash\r\n```\r\nI'm assuming that this is the standard practice for formulae. I don't know how the tap side works and couldn't find the specific code that does this automatically. Perhaps I've misunderstood that particular part of the question. I think you probably could extend fpath, but it might make this a little harder to diagnose than a simple obvious symlink. If you suggested that bin folder of every formula ended up in your $PATH, you'd agree that that would be excessive I think. I'm also guided again by the way the git completion works in this regard. Consistency here seems better than doing something different.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 229756428,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-30T19:01:20Z",
		"body" : "Thank you for the detailed response and for your patience! I think the change you're proposing makes sense and I find your arguments convincing. Automatic discovery of completions for external commands from taps would certainly be a topic worth investigating further, but doesn't need to happen in this PR.\r\n\r\nI tested your changes by additionally downloading the `_brew_cask` file you linked to. Everything worked as I would have expected. I'm inclined to merge your changes, but would feel more comfortable if any of the ZSH-using maintainers could briefly have a look.\r\n\r\n@apjanke Do you happen to have time to review this? I think the changes proposed here are fine.\r\n\r\n> I don't know how the tap side works and couldn't find the specific code that does this automatically.\r\n\r\nThere's currently no automatic way for taps, but it could become part of the `tap`/`untap` procedure, that currently already automatically handles man pages [in `Tap#link_manpages`](https://github.com/Homebrew/brew/blob/0926f920dc48e297d569363acbb46d1058c6ba73/Library/Homebrew/tap.rb#L249-L270) and [in `Tap#unlink_manpages`](https://github.com/Homebrew/brew/blob/0926f920dc48e297d569363acbb46d1058c6ba73/Library/Homebrew/tap.rb#L288-L296). Something similar could be done for completions, if they were hosted in the tap repository.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 229789009,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-06-30T21:07:04Z",
		"body" : "Fixed. No problem @UniqMartin. Better to get it done right :)\r\n\r\nI agree with your idea about extending the tap link manpages idea to handle completions, but I think we can possibly get the same / better effect by moving the brew cask changes I suggested in zsh-completions to https://github.com/homebrew/homebrew-completions. This align's with the [comment](https://github.com/caskroom/homebrew-cask/issues/22434#issuecomment-229008519) by @vitorgalvao that  \"Completions belong in other projects\".",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 229795779,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-30T21:34:45Z",
		"body" : "> Fixed. No problem @UniqMartin. Better to get it done right :)\r\n\r\nThanks! Let's sit on this for a few more days and if nobody complains (or comments), I'll merge this. Feel free to ping me if there's no activity here and I happen to forget to deal with this.\r\n\r\n> I agree with your idea about extending the tap link manpages idea to handle completions, but I think we can possibly get the same / better effect by moving the brew cask changes I suggested in zsh-completions to\r\n\r\nJust to be clear, I think both approaches make sense and it's worth supporting both use cases. Cask would already be served by the change in this PR, but other projects might want to stick the completions into their tap repositories and make them an integral part of their commands. To me it makes a lot of sense to have them in the same repository and to update them together with commands and options being added and removed, but I respect if someone feels differently about this.\r\n\r\nThat said, that's often not happening when we perform those changes in Homebrew. Bash completions are seeing a bit more love (though they are also not exactly in sync), but ZSH completions are even worse. If you feel passionate about the latter, further PRs to improve them are more than welcome!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 238815093,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:34:02Z",
		"body" : "> I'll get on it.\r\n\r\nAny news?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 238842499,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-08-10T11:43:27Z",
		"body" : "I'm currently travelling for my birthday. I'll take a look in a couple of days from now ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 241140244,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-08-19T21:29:38Z",
		"body" : "@MikeMcQuaid / @apjanke I've just pushed https://github.com/joshka/brew-cask-zsh-completions. If you have some time to take a quick look for me I'd really appreciate it. `homebrew/homebrew-completion` update is in the works.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 241250491,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-21T10:44:10Z",
		"body" : "@joshka Not sure what I'm looking at/for personally so will pass to @apjanke.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 241652794,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-08-23T07:43:07Z",
		"body" : "@pstadler / @KevinBongart can either of you can comment on this change, given your authorship of the oh-my-zsh plugin. For a little TL;DR context, I'm suggesting that rather than overriding the `_brew()` completion function from the `_brew_cask()` we flip this so that `_brew()` calls `_brew_cask()` (or any other brew subcommand).\r\n\r\nI've also rewritten and cleaned up the `_brew_cask` completion and moved it to its own repo [joshka/brew-cask-zsh-completions](https://github.com/joshka/brew-cask-zsh-completions/blob/master/_brew_cask) which will be installable via the homebrew/homebrew-completions tap. This allows users that choose [prezto](https://github.com/sorin-ionescu/prezto) over oh-my-zsh to use the completions.\r\n\r\nOne thing I'd draw your attention to is I don't know if this break oh-my-zsh users usage.\r\n\r\n@apjanke do you have any feedback on this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 241724869,
		"user" : {
			"login" : "pstadler"
		},
		"created_at" : "2016-08-23T13:10:42Z",
		"body" : "@joshka The current implementation is definitely hacky, because I didn't want to touch the actual brew plugin back then. Honestly, I'm not using cask on a frequent basis, you probably know better how close those two projects are these days and how much sense it makes to merge or refactor this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 241754283,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-23T14:42:57Z",
		"body" : "Haven't had time to read through the full thing, but I like this approach, and what I've read so far looks good. Left a comment on how to make a `test` for it.\r\n\r\nMinor doco thing: The joshka/brew-cask-zsh-completions repo should have its own standalone installation instructions which are independent of OMZ/Prezto/brew, even if that's as minimal as \"copy this to your Zsh `site-functions` directory\", and should reference the `homebrew/completions` tap and installation method in its README.\r\n\r\nI think once this is working well, we should consider folding your completion definitions in to `homebrew/brew` itself, now that we are integrating Cask in to core Homebrew. It was Cask's policy to keep `zsh` completions as a separate project, but not core Homebrew's policy: core supplies them as part of the main Homebrew project. So if we migrate Cask to Homebrew core, it would be nice to have the completions for it available by default (and versioned to match the commands they go with).\r\n\r\nI will try to find time to read through and test the full code later today or tomorrow morning; I'm traveling at the moment.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 241754802,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-23T14:44:20Z",
		"body" : "> TL;DR context, I'm suggesting that rather than overriding the _brew() completion function from the _brew_cask() we flip this so that _brew() calls _brew_cask() (or any other brew subcommand).\r\n\r\nAnd TL;DR, yes, I think doing this makes sense as the basic approach to subcommand completion, including `cask`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 241879189,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-08-23T21:08:28Z",
		"body" : "@pstadler thanks for your comment\r\n\r\n> Minor doco thing: The joshka/brew-cask-zsh-completions repo should have its own standalone installation instructions which are independent of OMZ/Prezto/brew, even if that's as minimal as \"copy this to your Zsh site-functions directory\", and should reference the homebrew/completions tap and installation method in its README\r\nAgreed.\r\n>I think once this is working well, we should consider folding your completion definitions in to homebrew/brew itself, now that we are integrating Cask in to core Homebrew. It was Cask's policy to keep zsh completions as a separate project, but not core Homebrew's policy: core supplies them as part of the main Homebrew project. So if we migrate Cask to Homebrew core, it would be nice to have the completions for it available by default (and versioned to match the commands they go with).\r\nI agree. In the mean time however I'd like things to work with the least manual steps possible. I think the separate repo will be ok until cask is part of homebrew core.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 241900608,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-08-23T22:29:13Z",
		"body" : "@apjanke I updated the doco https://github.com/joshka/brew-cask-zsh-completions/blob/master/README.md",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 242026963,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-24T11:01:15Z",
		"body" : "> I agree. In the mean time however I'd like things to work with the least manual steps possible. I think the separate repo will be ok until cask is part of homebrew core.\r\n\r\nYeah, no rush on this. And having the separate repo will allow you to iterate faster if changes to the completion definitions are needed. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 244548310,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:04:24Z",
		"body" : "@apjanke Any objections to üö¢ ing this as-is?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 245191153,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-07T06:51:17Z",
		"body" : "No objections, as long as we're not considering this part of the \"Homebrew public API\" and committing to keeping the mechanism exactly as is. (And my understanding is that we aren't here, so :+1:.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 246164000,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-09-11T06:04:51Z",
		"body" : "Any chance someone might merge this so the other parts can proceed?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 246171434,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-11T09:44:08Z",
		"body" : "Thanks for your contribution to Homebrew! Without people like you submitting PRs we couldn't run this project. You rock!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 246186988,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-09-11T15:43:58Z",
		"body" : "Thanks @MikeMcQuaid ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 246195227,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-09-11T18:21:31Z",
		"body" : "Hey - I'm looking at how the cask command is now part of homebrew directly. This change happened between initially opening this PR and now. As such, I think it now makes a bunch of sense to include the brew_cask completion directly in this repo rather than a sub-repo. I'll open a new PR for this shortly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 407
	},
	{
		"id" : 230175876,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-03T21:16:31Z",
		"body" : "It does use the token it's just you've hit a rate limit which will refresh in 55 minutes and 9 seconds.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 408
	},
	{
		"id" : 230176084,
		"user" : {
			"login" : "patresi"
		},
		"created_at" : "2016-07-03T21:20:28Z",
		"body" : "So, why does the initial step of ```brew search``` work and if I do a ```brew cask search```afterwards it also does work?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 408
	},
	{
		"id" : 230356118,
		"user" : {
			"login" : "sedm0784"
		},
		"created_at" : "2016-07-04T21:29:55Z",
		"body" : "Further to the previous comment, if the rate limit is one which setting the token does not affect, why does the error message state that setting the token will bypass the limit?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 408
	},
	{
		"id" : 230526173,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-05T16:15:12Z",
		"body" : "This sounds a lot like the environment variable that should contain the token hasn't been properly set up. The quoted error message is coming *after* ‚ÄúSearching pull requests...‚Äù so it has already finished searching the taps and has moved on to the next step (and this is what is hitting the rate limit). I haven't checked yet, but it could be that different limits apply to different GitHub API operations. `brew cask search` is unaffected because it doesn't check for pull requests that could be related to the search.\r\n\r\nBy the way, the whole point of searching for related pull requests is that there's a chance the searched-for software is very new, has been submitted as a pull request, but hasn't ended up in Homebrew just yet.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 408
	},
	{
		"id" : 230536009,
		"user" : {
			"login" : "patresi"
		},
		"created_at" : "2016-07-05T16:52:08Z",
		"body" : "Does searching the taps include searching casks?\r\n\r\nBecause searching for a cask that exists just now I got the following output:\r\n\r\n```\r\n$ brew search firefox\r\nCaskroom/cask/firefox                           Caskroom/versions/firefox-beta-uk               Caskroom/versions/firefox-esr-zh-cn             Caskroom/versions/firefox-nl                    Caskroom/versions/firefox-zh-tw\r\nCaskroom/cask/multifirefox                      Caskroom/versions/firefox-beta-zh-cn            Caskroom/versions/firefox-esr                   Caskroom/versions/firefox-pl                    Caskroom/versions/firefoxdeveloperedition-cn\r\nCaskroom/versions/firefox-beta-de               Caskroom/versions/firefox-beta                  Caskroom/versions/firefox-fr                    Caskroom/versions/firefox-pt-br                 Caskroom/versions/firefoxdeveloperedition-ja\r\nCaskroom/versions/firefox-beta-en-gb            Caskroom/versions/firefox-de                    Caskroom/versions/firefox-gl                    Caskroom/versions/firefox-ru                    Caskroom/versions/firefoxdeveloperedition\r\nCaskroom/versions/firefox-beta-ja               Caskroom/versions/firefox-esr-ru                Caskroom/versions/firefox-it                    Caskroom/versions/firefox-uk                    Caskroom/versions/firefoxnightly-ja\r\nCaskroom/versions/firefox-beta-ru               Caskroom/versions/firefox-esr-uk                Caskroom/versions/firefox-ja                    Caskroom/versions/firefox-zh-cn                 Caskroom/versions/firefoxnightly\r\n\r\n$ brew search firefox\r\nNo formula found for \"firefox\".\r\n==> Searching pull requests...\r\nError: GitHub API Error: API rate limit exceeded for XXX.XXX.XXX.XXX. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\r\nTry again in 26 minutes 39 seconds, or create a personal access token:\r\n  https://github.com/settings/tokens/new?scopes=&description=Homebrew\r\nand then set the token as: export HOMEBREW_GITHUB_API_TOKEN=\"your_new_token\"\r\n\r\n$ brew cask search firefox\r\n==> Exact match\r\nfirefox\r\n==> Partial matches\r\nfirefox-beta\t\t     firefox-beta-ru\t\t  firefox-esr\t\t       firefox-fr\t\t    firefox-nl\t\t\t firefox-uk\t\t      firefoxdeveloperedition-cn   multifirefox\r\nfirefox-beta-de\t\t     firefox-beta-uk\t\t  firefox-esr-ru\t       firefox-gl\t\t    firefox-pl\t\t\t firefox-zh-cn\t\t      firefoxdeveloperedition-ja\r\nfirefox-beta-en-gb\t     firefox-beta-zh-cn\t\t  firefox-esr-uk\t       firefox-it\t\t    firefox-pt-br\t\t firefox-zh-tw\t\t      firefoxnightly\r\nfirefox-beta-ja\t\t     firefox-de\t\t\t  firefox-esr-zh-cn\t       firefox-ja\t\t    firefox-ru\t\t\t firefoxdeveloperedition      firefoxnightly-ja\r\n\r\n$ echo $HOMEBREW_GITHUB_API_TOKEN\r\n681xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n```\r\nI've setup the GitHub token with the following permissions:\r\n- [x] **repo**  Full control of private repositories\r\n- [x] **repo:status**  Access commit \r\n- [x] **repo_deployment**  Access deployment status\r\n- [x] **public_repo** Access public repositories",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 408
	},
	{
		"id" : 230542085,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-05T17:15:44Z",
		"body" : "> Does searching the taps include searching casks?\r\n\r\nYes, though only `caskroom/cask` and `caskroom/versions` will be inspected. And it will always search for casks via the GitHub API, even if you have the respective Cask repositories installed locally.\r\n\r\n> Because searching for a cask that exists just now I got the following output:\r\n\r\nI have to run `brew search firefox` four times in a row before I get this message (with no token set). But once I do set a token with\r\n\r\n```sh\r\nexport HOMEBREW_GITHUB_API_TOKEN=my_secret_token\r\n```\r\n\r\nI again get results for `brew search firefox` which tells me that the token is being used. (The token doesn't require any specific permissions, e.g. mine only has the permission to create Gists.) Are you sure that you not only assigned the variable in your current shell, but also exported it via `export`?\r\n\r\nIn any case, I guess one could say the failure behavior is suboptimal. It's not finding any matches when querying the respective GitHub repositories, but because the search is done in the background and in parallel, the GitHub API error messages related to that part of the search are never shown. Instead, and because apparently no matches were found, the search proceeds by checking for pull requests (and that's the point where you see the error message due to rate limiting).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 408
	},
	{
		"id" : 230544364,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-05T17:24:19Z",
		"body" : "> [‚Ä¶], but because the search is done in the background and in parallel, the GitHub API error messages related to that part of the search are never shown.\r\n\r\nJust a clarification on this part: The errors are recorded, but to avoid flooding the user's terminal, we only output the last error and only once all other processing has finished. That's why the error message is shown at the very end and it's not immediately clear from the error message what part of the search caused it. (So the error message doesn't necessarily reference the search for pull requests.)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 408
	},
	{
		"id" : 230566329,
		"user" : {
			"login" : "patresi"
		},
		"created_at" : "2016-07-05T18:44:10Z",
		"body" : "> I have to run brew search firefox four times in a row before I get this message (with no token set).\r\n\r\nIn a corporate environment where everyone has the same IP you would hit it on first try üòâ\r\n\r\n> I again get results for ```brew search firefox``` which tells me that the token is being used. (The token doesn't require any specific permissions, e.g. mine only has the permission to create Gists.) Are you sure that you not only assigned the variable in your current shell, but also exported it via ```export```?\r\n\r\nOk, so I'm using the fish shell and I had set my token with ```-U```, for exporting you need ```-x```or ```-xU```, doing it solved my issue üëç.\r\n\r\nThis behaviour is just strange because searching for something which yields results for both ```brew search``` and ```brew cask search``` only fails for the results which belong in Caskroom, and running ```brew cask search``` immediately after doesn't fail. It's a bit confusing, but maybe that's just GitHub throttling differently for each repository. Example with one successful search and a subsequent failure:\r\n```\r\n$ brew search docker\r\nboot2docker                                     docker-cloud                                    docker-machine                                  docker-machine-parallels                        homebrew/completions/docker-completion\r\ndocker                                          docker-compose                                  docker-machine-driver-xhyve                     docker-swarm                                    homebrew/completions/docker-compose-completion\r\ndocker-clean                                    docker-gen                                      docker-machine-nfs                              homebrew/completions/boot2docker-completion     homebrew/completions/docker-machine-completion\r\nhomebrew/emacs/dockerfile-mode                  homebrew/versions/docker171                     Caskroom/cask/boot2docker                       Caskroom/cask/docker                            Caskroom/versions/boot2docker-status-beta\r\nhomebrew/versions/docker110                     Caskroom/cask/boot2docker-status                Caskroom/cask/docker-compose                    Caskroom/cask/dockertoolbox\r\n\r\n$ brew search docker\r\nboot2docker                                     docker-cloud                                    docker-machine                                  docker-machine-parallels                        homebrew/completions/docker-completion\r\ndocker                                          docker-compose                                  docker-machine-driver-xhyve                     docker-swarm                                    homebrew/completions/docker-compose-completion\r\ndocker-clean                                    docker-gen                                      docker-machine-nfs                              homebrew/completions/boot2docker-completion     homebrew/completions/docker-machine-completion\r\nError: GitHub API Error: API rate limit exceeded for XXX.XXX.XXX.XXX. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\r\nTry again in 59 minutes 36 seconds, or create a personal access token:\r\n  https://github.com/settings/tokens/new?scopes=&description=Homebrew\r\nand then set the token as: export HOMEBREW_GITHUB_API_TOKEN=\"your_new_token\"\r\n```\r\n\r\nBut I guess this is a different issue from the one that I initially raised... Thank you for your help!\r\n\r\n\r\n ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 408
	},
	{
		"id" : 228959889,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-06-28T06:27:50Z",
		"body" : "Homebrew is designed not to allow packages to find other software that wasn't specified as a dependency; you'll need to add these lines to the dependencies for it to work:\r\n\r\n```ruby\r\ndepends_on \"pkg-config\" => \"build\"\r\ndepends_on \"spidermonkey\"\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 409
	},
	{
		"id" : 228962161,
		"user" : {
			"login" : "rlue"
		},
		"created_at" : "2016-06-28T06:37:40Z",
		"body" : "holy balls, that was fast. you're amazing!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 409
	},
	{
		"id" : 229153638,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-06-28T19:18:56Z",
		"body" : "```ruby\r\ndepends_on \"pkg-config\" => :build\r\n```\r\nJust to clarify üò∫.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 409
	},
	{
		"id" : 228973469,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-28T07:32:19Z",
		"body" : "cc @MikeMcQuaid we may be able to tweak the existing system to build and upload vendor ruby.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 410
	},
	{
		"id" : 229159891,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-28T19:42:47Z",
		"body" : "Can you link to the PR where this flag is used? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 410
	},
	{
		"id" : 229192043,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-28T21:38:19Z",
		"body" : "Sorry, misread the diff. üëç from me. I do wonder if we could somehow skip this relocation automatically when its not required, though, and remove use of `install_name_tool` when we don't actually need it. Thoughts?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 410
	},
	{
		"id" : 229212058,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-28T23:13:51Z",
		"body" : "> I do wonder if we could somehow skip this relocation automatically when its not required, though, and remove use of `install_name_tool` when we don't actually need it. Thoughts?\r\n\r\nWe cannot avoid it at the moment, because otherwise the `strings` invocation that checks for remaining mentions of the prefix (after the relocation with `install_name_tool`) will trigger for the unmodified load commands. Once we completely switch to `ruby-macho` it will be easier, as it could provide the offsets of the load commands so those could be filtered from the offsets returned by `strings`.\r\n\r\nHowever, the situation where we can completely avoid `install_name_tool` are relatively rare, because it means that there are no dylibs at all (as all dylibs have a dylib ID that is an absolute path in the Homebrew prefix) and that no executables can reference other Homebrew dylibs (as that would mean dylib load commands that contain paths into the Homebrew prefix). Under these very specific conditions, we already don't invoke `install_name_tool` today (because `otool` won't yield paths that need to be adjusted).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 410
	},
	{
		"id" : 229215682,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-28T23:34:40Z",
		"body" : "> We cannot avoid it at the moment, because otherwise the strings invocation that checks for remaining mentions of the prefix (after the relocation with install_name_tool) will trigger for the unmodified load commands. Once we completely switch to ruby-macho it will be easier, as it could provide the offsets of the load commands so those could be filtered from the offsets returned by strings.\r\n\r\nüëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 410
	},
	{
		"id" : 229292341,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-29T08:35:09Z",
		"body" : "@MikeMcQuaid Since this PR is to explore using existing test-bot to build vendor Ruby/Git/Curl, there is no way automatically to check whether it's relocatable. Please note, formulae in `homebrew/portable` are very special, which need to be treated differently than normal formulae. \r\n\r\nTo make this work, I have two questions need to be addressed. \r\n* How to setup a Leopard VM on bot.brew.sh?\r\n* @mistydemeo Can Homebrew be used on Mac OS X 10.5 to build formulae or these changes need to be ported to Tigerbrew?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 410
	},
	{
		"id" : 229451574,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-29T18:48:40Z",
		"body" : "> How to setup a Leopard VM on bot.brew.sh?\r\n\r\nWhy do we need this? Have you tested if e.g. a build on 10.11 works on earlier versions of OS X e.g. 10.6/7?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 410
	},
	{
		"id" : 229573886,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-30T06:45:50Z",
		"body" : "> Have you tested if e.g. a build on 10.11 works on earlier versions of OS X e.g. 10.6/7?\r\n\r\nIt won't work. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 410
	},
	{
		"id" : 229647877,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-30T12:47:39Z",
		"body" : ">> Have you tested if e.g. a build on 10.11 works on earlier versions of OS X e.g. 10.6/7?\r\n> \r\n> It won't work.\r\n\r\nSorry if I'm making you repeat things; it's quite possible you already elaborated on that. Why doesn't it work? Naively, I would assume that setting `MACOSX_DEPLOYMENT_TARGET` to `10.6` would be enough to produce a working binary. (Of course there can be all kinds of corner cases where a newer SDK doesn't sufficiently align with an older OS X release. Even Apple makes mistakes. Is that the case here?)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 410
	},
	{
		"id" : 229656943,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-30T13:25:30Z",
		"body" : "@UniqMartin The reason is I have tried it and it doesn't work. As far as I can tell, making it work is extreme hard and may be broken in unexpected way. While a VM solution is much easier.\r\n```\r\nVagrants-Mac-2:~ vagrant$ ./portable-ruby/2.0.0-p648/bin/ruby -v\r\nIllegal instruction\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 410
	},
	{
		"id" : 229799839,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-30T21:53:12Z",
		"body" : "> @UniqMartin The reason is I have tried it and it doesn't work. As far as I can tell, making it work is extreme hard and may be broken in unexpected way. While a VM solution is much easier.\r\n\r\nCan you detail what platform you tried building and testing it on and if it was on physical hardware or a VM? If we're going to have Homebrew depend on the vendored Ruby work we need to up the quality of understanding and documentation so it's not just you that understands how and why this works the way it does. I don't think replies like \"it doesn't work\" really help with building that understanding among maintainers who want to learn more.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 410
	},
	{
		"id" : 229863317,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-01T06:20:22Z",
		"body" : "I test it on 10.5 VM. Also, I don't think whether it's a VM or physical hardware matters. Because as a software, Homebrew should be oblivious to it.\r\n\r\nThe detail reasons are many. New SDK does't work and there is no way you can install old SDK to new machine. There is also ABI compatible issue as well. But overall, the only reason is Apple only supports some degree of backward compatibility but no forward compatibility. The latter one is a whole new story.\r\n\r\nI admit there is a slight possibility to make vendor Ruby built on modern OS and work for old OS. But it is extremely hard, and quite possible to be broken in some places where tests will fail to catch. And building on a VM is the simplest and most robust solution. Since we can have a VM, I don't think we should waste our time on that road.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 410
	},
	{
		"id" : 228977824,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-06-28T07:54:11Z",
		"body" : "@xu-cheng, what do you think about the `outdated_versions` tests?\r\n\r\nIs it OK that all of them go in separate methods and there is some code duplication?\r\nSplitting `outdated_versions` tests into several methods is handy when one of the tests fails, so we can explicitly know in which conditions it happens. If we put all of the tests logic into one method we won't be able to understand where exactly it fails that easily.\r\n\r\nSo, the question is do we need a separate `test_outdated_versions.rb` file or something?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 411
	},
	{
		"id" : 228982382,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-28T08:15:29Z",
		"body" : "> what do you think about the outdated_versions tests?\r\n\r\n:+1:\r\n\r\n> Is it OK that all of them go in separate methods and there is some code duplication?\r\n\r\nYes. I think it's a good idea to have multiple test methods to pin point the possible problem.\r\n\r\n> So, the question is do we need a separate test_outdated_versions.rb file with outdated_versions tests or something (maybe OutdatedVersionsTests < Homebrew::TestCase inside test_formula.rb)?\r\n\r\nI think both are fine. But personally I prefer to putting then in `test_formula.rb`, so it's easy to locate the test in the future. If you choose `OutdatedVersionsTests < Homebrew::TestCase`, then you can avoid duplication using `setup` and `teardown` methods.\r\n\r\nHave you run test case before simplifying the logic. Ideally, we should make the tests pass before and after you applying the logic change.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 411
	},
	{
		"id" : 228999013,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-06-28T09:29:37Z",
		"body" : "> Have you run test case before simplifying the logic. Ideally, we should make the tests pass before and after you applying the logic change.\r\nYes, It worked.\r\n\r\nDecided to add `OutdatedVersionsTests < Homebrew::TestCase`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 411
	},
	{
		"id" : 229108011,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-28T16:42:39Z",
		"body" : ":+1: on the simplification in this PR, but I have added a suggestion to further reduce unnecessary code duplication in the test methods.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 411
	},
	{
		"id" : 229130030,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-06-28T17:57:33Z",
		"body" : "üëç I didn't remove tab at the end of the `setup_tab_with_tap` method, did I need to? Now it's not used, that is true, but I'm not sure if I need to remove it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 411
	},
	{
		"id" : 229148003,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-28T18:57:58Z",
		"body" : "Thanks for making the change! To me the code now looks much cleaner.\r\n\r\n> I didn't remove tab at the end of the `setup_tab_with_tap` method, did I need to? Now it's not used, that is true, but I'm not sure if I need to remove it.\r\n\r\nYou don't have to. It's completely up to you and that's one additional line that doesn't really bother me (and maybe will even become useful later on).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 411
	},
	{
		"id" : 229349446,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-06-29T13:05:07Z",
		"body" : "Thanks everyone.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 411
	},
	{
		"id" : 229800380,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-30T21:55:54Z",
		"body" : "One comment that would be cool to address in a future PR. For refactoring like this it's sometimes nice to open the PR with just the commit with the added tests so we can see that all those tests pass on both the old and new versions.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 411
	},
	{
		"id" : 229611842,
		"user" : {
			"login" : "usmonster"
		},
		"created_at" : "2016-06-30T09:41:21Z",
		"body" : "I had the same questions and opened #401 a few days ago. :) Waiting for review.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 412
	},
	{
		"id" : 229776278,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-30T20:18:20Z",
		"body" : "> What is the reasoning behind disallowing the cleanup of older versions of formulas when the most recent is not installed?\r\n\r\nTechnically, Homebrew doesn't consider a formula to be installed unless the latest version it knows of is installed. And because only installed formulae (in the sense I explained here) are checked for older versions that could be cleaned up, this isn't happening.\r\n\r\nI guess for most users of Homebrew this isn't an issue, as they tend to update as soon as a new version is published. Thus, for them the `brew cleanup` logic behaves as expected. But I can sympathize with your use case and I think it is perfectly reasonable for cleanup to remove all but the most recent installed version of a formula, even if this version happens to be older than the latest available version.\r\n\r\nThat's not exactly an answer to your question, but to be honest I don't know why it was implemented as it is (this happened before my time with Homebrew) and I agree that this behavior is not ideal. What definitely needs to be factored into the decision is what version of a formula is currently linked into the prefix, as that one cannot be cleaned up. But I guess in your case this will always be the latest one you upgraded to (even if that's not the one Homebrew considers to be the latest).\r\n\r\n> Is there a simple way of removing older, inactive, versions of formulas when the most recent version is not yet installed?\r\n\r\nNone that I'm aware of. You'd basically had to do this manually by inspecting the ‚Äúrack‚Äù of a formula, i.e. the `Cellar/<formula>` directory in your Homebrew prefix, and then removing the ones that are no longer needed and making sure to retain the one that is currently linked and/or pinned. Certainly not ideal.\r\n\r\nClosing this as there's already PR #401 open to address this and I'm heading over there to provide feedback. If you have something to add to the discussion in that PR, feel free to chime in. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 412
	},
	{
		"id" : 229959789,
		"user" : {
			"login" : "sedm0784"
		},
		"created_at" : "2016-07-01T14:22:22Z",
		"body" : "Thanks for the information. I did wonder if maybe that was what was happening under the hood.\r\n\r\nJust for pedantry's sake, I feel compelled to respond to:\r\n\r\n> I guess for most users of Homebrew this isn't an issue, as they tend to update as soon as a new version is published. Thus, for them the brew cleanup logic behaves as expected.\r\n\r\nI also update as soon as a new version is published. It's just that I want to run `brew cleanup` immediately *before* updating, rather than after, in order to ensure I can easily revert to a known-working version if I encounter problems later on.\r\n\r\nIt's super moot, though: your suggested behaviour in #401 works great for me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 412
	},
	{
		"id" : 229032659,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-28T12:20:22Z",
		"body" : "I'm wondering if it's a problem with our API token and the GitHub API rate limit. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 413
	},
	{
		"id" : 229033032,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-28T12:22:15Z",
		"body" : "It's affecting bottling too:\r\nhttp://bot.brew.sh/job/Homebrew%20Bottles/\r\n\r\n```\r\nSuccess > Console Output\r\n#5‚Äã26‚Äã19\r\nJun 28, 2016 1:14 PM\r\n  [Re-scheduled after failure] 98 KB\r\nFailed > Console Output\r\n#5‚Äã26‚Äã18\r\nJun 28, 2016 1:12 PM\r\n  [Re-scheduled after failure] 96 KB\r\nFailed > Console Output\r\n#5‚Äã26‚Äã17\r\nJun 28, 2016 1:11 PM\r\n  [Re-scheduled after failure] 96 KB\r\nFailed > Console Output\r\n#5‚Äã26‚Äã16\r\nJun 28, 2016 1:10 PM\r\n 96 KB\r\nFailed > Console Output\r\n#5‚Äã26‚Äã15\r\nJun 28, 2016 1:09 PM\r\n  [Re-scheduled after failure] 96 KB\r\nFailed > Console Output\r\n#5‚Äã26‚Äã14\r\nJun 28, 2016 1:07 PM\r\n  [Re-scheduled after failure] 96 KB\r\nFailed > Console Output\r\n#5‚Äã26‚Äã13\r\nJun 28, 2016 1:06 PM\r\n  [Re-scheduled after failure] 96 KB\r\nFailed > Console Output\r\n#5‚Äã26‚Äã12\r\nJun 28, 2016 1:06 PM\r\n  [Re-scheduled after failure] 96 KB\r\nFailed > Console Output\r\n#5‚Äã26‚Äã11\r\nJun 28, 2016 12:56 PM\r\n 96 KB\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 413
	},
	{
		"id" : 229076205,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-28T14:59:29Z",
		"body" : "OK possibly some progress on this.\r\n```\r\nJosephs-MacBook-Pro:Formula joe$ wget https://github.com/Homebrew/homebrew-core/pull/2438.patch\r\n--2016-06-28 07:55:46--  https://github.com/Homebrew/homebrew-core/pull/2438.patch\r\nResolving github.com... 192.30.253.113\r\nConnecting to github.com|192.30.253.113|:443... connected.\r\nHTTP request sent, awaiting response... 302 Found\r\nLocation: https://patch-diff.githubusercontent.com/raw/Homebrew/homebrew-core/pull/2438.patch [following]\r\n--2016-06-28 07:55:46--  https://patch-diff.githubusercontent.com/raw/Homebrew/homebrew-core/pull/2438.patch\r\nResolving patch-diff.githubusercontent.com... 192.30.253.113\r\nConnecting to patch-diff.githubusercontent.com|192.30.253.113|:443... connected.\r\nERROR: no certificate subject alternative name matches\r\n\trequested host name ‚Äòpatch-diff.githubusercontent.com‚Äô.\r\nTo connect to patch-diff.githubusercontent.com insecurely, use `--no-check-certificate'.\r\nJosephs-MacBook-Pro:Formula joe$ pb git-secrets\r\n==> Fetching patch \r\nPatch: https://github.com/Homebrew/homebrew-core/pull/2438.patch\r\nError: Failure while executing: /usr/local/opt/curl/bin/curl --fail --progress-bar --remote-time --location --user-agent Homebrew/0.9.9\\ (Macintosh;\\ Intel\\ Mac\\ OS\\ X\\ 10.8.5)\\ curl/7.49.1 https://github.com/Homebrew/homebrew-core/pull/2438.patch -s -o /Users/joe/Library/Caches/Homebrew/2438.patch\r\nJosephs-MacBook-Pro:Formula joe$ wget https://github.com/Homebrew/homebrew-core/pull/2438.patch --no-check-certificate\r\n--2016-06-28 07:56:24--  https://github.com/Homebrew/homebrew-core/pull/2438.patch\r\nResolving github.com... 192.30.253.113\r\nConnecting to github.com|192.30.253.113|:443... connected.\r\nHTTP request sent, awaiting response... 302 Found\r\nLocation: https://patch-diff.githubusercontent.com/raw/Homebrew/homebrew-core/pull/2438.patch [following]\r\n--2016-06-28 07:56:25--  https://patch-diff.githubusercontent.com/raw/Homebrew/homebrew-core/pull/2438.patch\r\nResolving patch-diff.githubusercontent.com... 192.30.253.113\r\nConnecting to patch-diff.githubusercontent.com|192.30.253.113|:443... connected.\r\nWARNING: no certificate subject alternative name matches\r\n\trequested host name ‚Äòpatch-diff.githubusercontent.com‚Äô.\r\nHTTP request sent, awaiting response... 200 OK\r\nCookie coming from patch-diff.githubusercontent.com attempted to set domain to github.com\r\nLength: unspecified [text/plain]\r\nSaving to: ‚Äò2438.patch‚Äô\r\n\r\n2438.patch                                        [ <=>                                                                                             ]     953  --.-KB/s    in 0.001s  \r\n\r\n2016-06-28 07:56:26 (673 KB/s) - ‚Äò2438.patch‚Äô saved [953]\r\n\r\n```\r\nSo looks like the underlying issue may be a certificate problem on GitHub's end. CC @MikeMcQuaid @UniqMartin @tdsmith ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 413
	},
	{
		"id" : 229079088,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-28T15:08:38Z",
		"body" : "As a workaround it looks like if we use the URL\r\n\r\nhttps://patch-diff.githubusercontent.com/raw/Homebrew/homebrew-core/pull/2438.patch\r\ninstead of\r\nhttps://github.com/Homebrew/homebrew-core/pull/2438.patch\r\n\r\nthen curl doesn't complain.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 413
	},
	{
		"id" : 229082117,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-28T15:18:17Z",
		"body" : "Nope, still problematic, but now a more direct error:\r\n```\r\ncurl https://patch-diff.githubusercontent.com/raw/Homebrew/homebrew-core/pull/2438.patch\r\ncurl: (51) SSL peer certificate or SSH remote key was not OK\r\n```\r\nFirefox also isn't happy.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 413
	},
	{
		"id" : 229083695,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-28T15:23:15Z",
		"body" : "Wanna report to Github? https://github.com/contact",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 413
	},
	{
		"id" : 229087201,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-06-28T15:33:44Z",
		"body" : "Reported.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 413
	},
	{
		"id" : 229099838,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-28T16:13:52Z",
		"body" : "Thanks for reporting this! Very clearly looks like a GitHub issue and definitely unrelated to the API or our use of it, as these are simple HTTPS requests available to everyone without limits and/or authentication. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 413
	},
	{
		"id" : 233337883,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-18T14:04:50Z",
		"body" : "Fixed by GitHub a while ago.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 413
	},
	{
		"id" : 229189014,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-28T21:26:28Z",
		"body" : "Great change :+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 414
	},
	{
		"id" : 238813806,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:28:43Z",
		"body" : "@ilovezfs Still happening?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 415
	},
	{
		"id" : 238816388,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-10T09:39:28Z",
		"body" : "Yup. It can be difficult to trigger, but voil√†:\r\n```\r\niMac-TMP:~ joe$ brew tap caskroom/versions\r\n==> Tapping caskroom/versions\r\nCloning into '/usr/local/Library/Taps/caskroom/homebrew-versions'...\r\nremote: Counting objects: 293, done.\r\nremote: Compressing objects: 100% (276/276), done.\r\nremote: Total 293 (delta 75), reused 57 (delta 14), pack-reused 0\r\nReceiving objects: 100% (293/293), 96.27 KiB | 0 bytes/s, done.\r\nResolving deltas: 100% (75/75), done.\r\nChecking connectivity... done.\r\nTapped 0 formulae (308 files, 393.4K)\r\niMac-TMP:~ joe$ brew search lsof\r\nhomebrew/dupes/lsof                                Caskroom/cask/enolsoft-chm-view                  \r\niMac-TMP:~ joe$ brew search lsof\r\nhomebrew/dupes/lsof                                Caskroom/cask/enolsoft-chm-view                  \r\niMac-TMP:~ joe$ brew search lsof\r\nhomebrew/emacs/lsof                                Caskroom/cask/enolsoft-chm-view                  \r\niMac-TMP:~ joe$\r\n```\r\nhomebrew/emacs/lsof is certainly creative.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 415
	},
	{
		"id" : 238821159,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:59:43Z",
		"body" : "> This might be related to the fact that the search across multiple taps is happening in parallel (using Thread) but the search results are cached in a Hash (not a thread-safe data structure in Ruby). This is just a wild guess, to be honest. I haven't investigated this further ‚Ä¶\r\n\r\nAt a guess: can you reproduce this with Ruby 2.0 and/or on >=OS X 10.10",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 415
	},
	{
		"id" : 238833396,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-10T10:55:53Z",
		"body" : "that's a 10.11.5 skylake imac",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 415
	},
	{
		"id" : 229401762,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-29T15:55:55Z",
		"body" : "Google says this interface has been around since at least 2009 so it seems like a good assumption that this will be available!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 416
	},
	{
		"id" : 229451968,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-29T18:49:58Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 416
	},
	{
		"id" : 229389316,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-29T15:17:15Z",
		"body" : "I tried to reproduce this on another Mavericks box, and couldn't. After doing a `brew install -s` for each of those formulae, I did `brew gist-logs` for each of them. All succeeded. That was both before and after a `brew update` that picked up [this gist-logs change](https://github.com/Homebrew/brew/commit/8e0e1642ad9cf87cd71521aabd03f03b8e7ddc8d). Might be something particular to my one machine.\r\n\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 417
	},
	{
		"id" : 229394518,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-29T15:33:15Z",
		"body" : "Looks like it might be this part of `Github#open`, where it writes to a temp file but doesn't close it before passing the file name to the external `curl` process. This could cause intermittent errors that depend on whatever I/O buffering happens on a particular machine. If I pull the `close` up to where the writing is done, all the `gist-logs` start succeeding for me.\r\n\r\n```\r\n      if data\r\n        data_tmpfile.write data\r\n        args += [\"--data\", \"@#{data_tmpfile.path}\"]\r\n      end\r\n\r\n      args += [\"--dump-header\", \"#{headers_tmpfile.path}\"]\r\n\r\n      output, _, http_code = curl_output(url.to_s, *args).rpartition(\"\\n\")\r\n      output, _, http_code = output.rpartition(\"\\n\") if http_code == \"000\"\r\n      headers = headers_tmpfile.read\r\n    ensure\r\n      if data_tmpfile\r\n        data_tmpfile.close\r\n        data_tmpfile.unlink\r\n```\r\n\r\nPR incoming...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 417
	},
	{
		"id" : 229405062,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-29T16:06:49Z",
		"body" : "Nice find! This could be causing all kinds of issues when accessing the GitHub API and it's good to get this fixed (though I believe only `gist-logs` actually posts data, so might be the only one affected).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 418
	},
	{
		"id" : 229412740,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-06-29T16:32:51Z",
		"body" : "Thanks!\r\n\r\nBTW, I was able to reproduce it on my other Mavericks machine, too, using a different formula.\r\n\r\n```\r\n$ brew-gist-logs gdk-pixbuf\r\nError: Your HOMEBREW_GITHUB_API_TOKEN does not have sufficient scope!\r\nScopes it has: [\"gist\", \"notifications\", \"useremail\"]\r\nCreate a new personal access token: https://github.com/settings/tokens\r\nand then set the new HOMEBREW_GITHUB_API_TOKEN as the authentication method instead.\r\nError: Problems parsing JSON\r\n```\r\n\r\nAnything with a total log size of < 4K seems to trigger it for me. Which makes some sense, as that's the size of a page, so staying under that could affect buffering behavior.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 418
	},
	{
		"id" : 229428127,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-29T17:27:37Z",
		"body" : "> Anything with a total log size of < 4K seems to trigger it for me. Which makes some sense, as that's the size of a page, so staying under that could affect buffering behavior.\r\n\r\nThis sounds quite plausible. It would also explain why this is usually not an issue for Gists posted due to build errors, as then the logs will usually be much larger. (At least I'm not aware of any problems users might have experienced with using `brew gist-logs` in recent times.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 418
	},
	{
		"id" : 229555616,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-30T04:17:41Z",
		"body" : "Thanks Martin!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 419
	},
	{
		"id" : 229464489,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-29T19:36:52Z",
		"body" : "I'm sorry, but you provided so little information that it's hard to impossible to provide any advice. What is the output of the following commands?\r\n\r\n```\r\nbrew config\r\nbrew doctor\r\nbrew tap\r\nls -AlF \"$(brew --repository)\"/Library/Taps/*\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 420
	},
	{
		"id" : 229483896,
		"user" : {
			"login" : "kevmoo"
		},
		"created_at" : "2016-06-29T20:48:40Z",
		"body" : "```console\r\n~/> brew config\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: db76a0f4cc3838658919570b3453edbcb9ed2fcd\r\nLast commit: 5 hours ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 14be211146d6c3bb0ab1aa278a9349f97c42ecb4\r\nCore tap last commit: 5 hours ago\r\nHOMEBREW_PREFIX: /Users/kevmoo/homebrew\r\nHOMEBREW_REPOSITORY: /Users/kevmoo/homebrew\r\nHOMEBREW_CELLAR: /Users/kevmoo/homebrew/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: octa-core 64-bit haswell\r\nClang: 7.3 build 703\r\nGit: 2.7.4 => /usr/local/git/current/bin/git\r\nPerl: /usr/bin/perl\r\nPython: /Users/kevmoo/homebrew/bin/python => /Users/kevmoo/homebrew/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/bin/python2.7\r\nRuby: /Users/kevmoo/homebrew/opt/ruby/bin/ruby => /Users/kevmoo/homebrew/Cellar/ruby/2.3.1/bin/ruby\r\nJava: 1.8.0_91, 1.8.0_72, 1.8.0_60\r\nSystem Ruby: 2.0.0-p648\r\nOS X: 10.11.5-x86_64\r\nXcode: 7.3.1\r\nCLT: 7.3.1.0.1.1461711523\r\nX11: N/A\r\n```\r\n\r\n```console\r\n~/> brew doctor\r\nPlease note that these warnings are just used to help the Homebrew maintainers\r\nwith debugging if you file an issue. If everything you use Homebrew for is\r\nworking fine: please don't worry and just ignore them. Thanks!\r\n\r\nWarning: Your Homebrew is not installed to /usr/local\r\nYou can install Homebrew anywhere you want, but some brews may only build\r\ncorrectly if you install in /usr/local. Sorry!\r\n```\r\n\r\n```console\r\n~/> brew tap\r\ncaskroom/cask\r\ndart-lang/dart\r\nhomebrew/core\r\nhomebrew/core\r\nhomebrew/versions\r\nmartido/brew-graph\r\n```\r\n\r\n```console\r\n~/> ls -AlF \"$(brew --repository)\"/Library/Taps/*\r\n/Users/kevmoo/homebrew/Library/Taps/caskroom:\r\ntotal 0\r\ndrwxr-xr-x  29 kevmoo  eng  986 Jun 27 10:29 homebrew-cask/\r\n\r\n/Users/kevmoo/homebrew/Library/Taps/dart-lang:\r\ntotal 0\r\ndrwxr-xr-x  6 kevmoo  eng  204 Jun 22 11:09 homebrew-dart/\r\n\r\n/Users/kevmoo/homebrew/Library/Taps/homebrew:\r\ntotal 0\r\ndrwxr-xr-x   11 kevmoo  eng   374 Jun 22 11:09 homebrew-core/\r\ndrwxr-xr-x    5 kevmoo  eng   170 Jun  1 09:19 homebrew-homebrew/\r\ndrwxr-xr-x  217 kevmoo  eng  7378 Jun 27 10:29 homebrew-versions/\r\n\r\n/Users/kevmoo/homebrew/Library/Taps/martido:\r\ntotal 0\r\ndrwxr-xr-x  5 kevmoo  eng  170 May 15 17:29 homebrew-brew-graph/\r\n```\r\n\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 420
	},
	{
		"id" : 229503233,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-29T22:04:21Z",
		"body" : "Thanks! I suspect the problematic duplicate entry is `/Users/kevmoo/homebrew/Library/Taps/homebrew/homebrew-homebrew`. Do you have any idea where it came from? That's a tap directory that should never exist (and there's no corresponding GitHub repository of the same name). It should be safe to remove this directory if you haven't made local modifications to any of the Homebrew formulae. (But you can also move that directory somewhere else, if you aren't entirely sure.) Before you do that, would you mind additionally providing the output of `brew tap-info --installed`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 420
	},
	{
		"id" : 229514879,
		"user" : {
			"login" : "kevmoo"
		},
		"created_at" : "2016-06-29T23:00:35Z",
		"body" : "That's a whole lota weird\r\n\r\n```console\r\n~/> brew tap-info --installed\r\ncaskroom/cask: unpinned, 1 formula, 1 command\r\n/Users/kevmoo/homebrew/Library/Taps/caskroom/homebrew-cask (8,198 files, 112.2M)\r\nFrom: https://github.com/caskroom/homebrew-cask\r\n\r\ndart-lang/dart: unpinned, 1 formula\r\n/Users/kevmoo/homebrew/Library/Taps/dart-lang/homebrew-dart (259 files, 224.4K)\r\nFrom: https://github.com/dart-lang/homebrew-dart\r\n\r\nhomebrew/core: unpinned, 3588 formulae\r\n/Users/kevmoo/homebrew/Library/Taps/homebrew/homebrew-core (3,970 files, 19M)\r\nFrom: https://github.com/Homebrew/homebrew-core\r\n\r\nhomebrew/core: unpinned, 3588 formulae\r\n/Users/kevmoo/homebrew/Library/Taps/homebrew/homebrew-core (3,970 files, 19M)\r\nFrom: https://github.com/Homebrew/homebrew-core\r\n\r\nhomebrew/versions: unpinned, 211 formulae\r\n/Users/kevmoo/homebrew/Library/Taps/homebrew/homebrew-versions (1,301 files, 4.5M)\r\nFrom: https://github.com/Homebrew/homebrew-versions\r\n\r\nmartido/brew-graph: unpinned, 1 formula\r\n/Users/kevmoo/homebrew/Library/Taps/martido/homebrew-brew-graph (35 files, 23.1K)\r\nFrom: https://github.com/martido/homebrew-brew-graph\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 420
	},
	{
		"id" : 229516666,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-29T23:10:54Z",
		"body" : "It's not entirely surprising because `homebrew/homebrew` (or `homebrew/homebrew-homebrew`) is automatically re-interpreted as `homebrew/core` for compatibility when Homebrew was still hosted in a single repository named `Homebrew/homebrew` (now [`Homebrew/legacy-homebrew`](https://github.com/Homebrew/legacy-homebrew)).\r\n\r\nJust remove `/Users/kevmoo/homebrew/Library/Taps/homebrew/homebrew-homebrew` and all the duplication should be gone, not to mention that updates should become faster, too.\r\n\r\n> I suspect the problematic duplicate entry is `/Users/kevmoo/homebrew/Library/Taps/homebrew/homebrew-homebrew`. Do you have any idea where it came from?\r\n\r\nI'd still be interested in an answer to this question.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 420
	},
	{
		"id" : 229759890,
		"user" : {
			"login" : "kevmoo"
		},
		"created_at" : "2016-06-30T19:14:47Z",
		"body" : "All good. Not sure if this would be an interesting candidate for a `brew doctor` check ‚Äì¬†maybe only if it's reported again?\r\n\r\nThanks much! üòÄ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 420
	},
	{
		"id" : 229766896,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-30T19:42:04Z",
		"body" : "It's a really weird problem and I'm still not sure how you ended up in this situation. So far this looks like a singular event, but if more users come forward and report the same, we'll certainly take a closer look and see if this can be prevented or at least properly diagnosed.\r\n\r\nYou're welcome! I'm glad everything is back to normal for you. üòÄ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 420
	},
	{
		"id" : 229463532,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-29T19:33:07Z",
		"body" : ":+1: Sadly, this won't protect the `bin/brew` process itself from being affected by `BASH_ENV`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 421
	},
	{
		"id" : 229802248,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-30T22:04:26Z",
		"body" : "Seems reasonable to me üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 421
	},
	{
		"id" : 230070713,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-02T00:01:11Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 421
	},
	{
		"id" : 230076198,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-07-02T01:24:19Z",
		"body" : "> Sadly, this won't protect the bin/brew process itself from being affected by BASH_ENV.\r\n\r\nHmm. If we wanted to be really hygienic about it, maybe we could change `bin/brew`'s shebang line to something like this.\r\n\r\n```\r\n#!/usr/bin/env BASH_ENV= /bin/bash\r\n```\r\n\r\nI don't know if that would cause portability problems for non-OSX systems where `env` might live elsewhere. I think that'd be the cleanest, though.\r\n\r\nBefore:\r\n\r\n```\r\n$ cat ~/my_bash_env.sh\r\necho bash_env run\r\n$ export BASH_ENV=~/my_bash_env.sh\r\n$ brew --repo\r\nbash_env run\r\n/usr/local\r\n```\r\n\r\nAfter:\r\n```\r\n$ brew --repo\r\n/usr/local\r\n```\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 421
	},
	{
		"id" : 238815049,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:33:51Z",
		"body" : "@apjanke Could you get the conflicts fixed and merge this in? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 421
	},
	{
		"id" : 239698543,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-14T21:21:00Z",
		"body" : "Rebased and fixed conflicts. Will merge if tests are green.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 421
	},
	{
		"id" : 229483550,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-06-29T20:47:31Z",
		"body" : "I'm sorry, but all problems concerning `brew cask <some-command>` should be reported to [Homebrew Cask](https://github.com/Caskroom/homebrew-cask), not this repository. Thanks for understanding!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 422
	},
	{
		"id" : 229493181,
		"user" : {
			"login" : "jommgoncalves"
		},
		"created_at" : "2016-06-29T21:23:12Z",
		"body" : "My bad :\\",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 422
	},
	{
		"id" : 229516075,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-29T23:07:16Z",
		"body" : "We don't depend on X11 because it's not provided by OS X. Please make a request to MPlayer to have subtitles not require X11.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 423
	},
	{
		"id" : 229519987,
		"user" : {
			"login" : "PacoH"
		},
		"created_at" : "2016-06-29T23:31:54Z",
		"body" : "Many of us have X11 installed and use it for many apps so why did you close the thread? This obviously works and asking Mplayer devs to change the core code is like asking for the sky‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 423
	},
	{
		"id" : 229520653,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-29T23:36:13Z",
		"body" : "> Many of us have X11 installed and use it for many apps so why did you close the thread? \r\n\r\nBecause Homebrew has made the decision to not make formulae depend on X11 that don't require it. You may have it installed but not everyone using MPlayer does. We will not change this back so I closed it.\r\n\r\n> asking Mplayer devs to change the core code is like asking for the sky‚Ä¶\r\n\r\nIf no-one asks it definitely won't get changed. Regardless, the issue here is MPlayer and not Homebrew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 423
	},
	{
		"id" : 229522008,
		"user" : {
			"login" : "PacoH"
		},
		"created_at" : "2016-06-29T23:45:06Z",
		"body" : "I think you are being unreasonable. Obviously mplayer DOES require X11 for OSD and subtitles. It is very easy to install. It obviously works NOW. You don't have to change anything. What do you have against X11? The issue here is you're not listening to me and you are not considering anyone wanting this feature, or for the work I put in to report on how to do it. It would take years and hard lobbying to get Mplayer to change.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 423
	},
	{
		"id" : 229524988,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-06-30T00:04:24Z",
		"body" : "@PacoH I'm locking this issue now. Please read our Code of Conduct before opening future issues: https://github.com/Homebrew/brew/blob/master/CODEOFCONDUCT.md",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 423
	},
	{
		"id" : 230014102,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-01T18:15:47Z",
		"body" : "I agree with the general idea, but I don't think `LinkageChecker` is already up to the task even though you just fixed the problem with requirements. I'm currently :-1: on using this as-is in our `test-bot` runs.\r\n\r\nThe reason is that the dependency check is way too naive. `LinkageChecker` simply looks at all dependencies, failing to exclude optional and build-time dependencies and thus is doing a really bad job at checking possibly undeclared dependencies. If you can fix that, I think we can consider using this. (It would be even better, though less relevant for the test bot runs, if the code would take into account options used when installing the formula.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 424
	},
	{
		"id" : 230014806,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-01T18:18:59Z",
		"body" : "We can definitely filter out build time deps. But I think we should keep optional ones, as I don't think `brew linkage` should complain simple because I have local install with local flags.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 424
	},
	{
		"id" : 230015109,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-01T18:20:12Z",
		"body" : "> It would be even better, though less relevant for the test bot runs, if the code would take into account options used when installing the formula\r\n\r\nUntil we can eliminate `if build.with?` in the deps declaration, I don't think we can.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 424
	},
	{
		"id" : 230017247,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-01T18:30:12Z",
		"body" : "> We can definitely filter out build time deps. But I think we should keep optional ones, as I don't think `brew linkage` should complain simple because I have local install with local flags.\r\n\r\nI think we definitely should. To provide an example, if I install `ffmpeg` without the `--with-xz` flag, but happen to have `xz` installed during the installation, `ffmpeg` might be picking up `liblzma` and end up linking to it. But it definitely shouldn't do that. If the result ends up in a bottle, the bottle is effectively broken because it links to libraries that won't necessarily be installed if the bottle gets installed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 424
	},
	{
		"id" : 230019108,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-01T18:38:24Z",
		"body" : "Sure that can happen, but more common cases are if I `brew install foo --with-bar`, `brew linkage` should not show `bar` as undeclared deps. And due to the use of `build`, we cannot fix it by resolving the flags we used.\r\n\r\nIn all, I think we should fix `optional` cases in the future as it only cause false positive instead of false negtiave. I also don't think it should block this PR as otherwise we don't check undeclared deps at all.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 424
	},
	{
		"id" : 230021799,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-01T18:50:44Z",
		"body" : "> Sure that can happen, but more common cases are if I `brew install foo --with-bar`, `brew linkage` should not show `bar` as undeclared deps. And due to the use of `build`, we cannot fix it by resolving the flags we used.\r\n\r\nIs that an actual problem on the test bot where we build almost all formulae with their default options?\r\n\r\n> In all, I think we should fix `optional` cases in the future as it only cause false positive instead of false negtiave. I also don't think it should block this PR as otherwise we don't check undeclared deps at all.\r\n\r\nI agree that this PR is a step in the right direction. Still it would be nice to properly handle optional dependencies as I think linking to libraries not explicitly requested is a significant enough issue, particularly with `/usr/local` as a prefix (like on our test bots) where `/usr/local/lib` and `/usr/local/include` are almost always automatically picked up by build systems and thus cause linking to libraries that shouldn't be used (though we've probably lived with this problem for quite a while now).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 424
	},
	{
		"id" : 230022625,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-01T18:54:28Z",
		"body" : ">Is that an actual problem on the test bot where we build almost all formulae with their default options?\r\n\r\nNo, but `linkage` is also a command can be used separately. I use it in a regular basis, so I definitely want to avoid false positive warning.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 424
	},
	{
		"id" : 230027965,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-01T19:20:42Z",
		"body" : "> No, but `linkage` is also a command can be used separately. I use it in a regular basis, so I definitely want to avoid false positive warning.\r\n\r\nI don't think that's an issue then. If you run this manually, the slightly inaccurate result and the nonzero exit code won't be problematic. After all the output is reading ‚Äú**Possible** undeclared dependencies‚Äù so it's already acknowledging the assessment might be inaccurate.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 424
	},
	{
		"id" : 230032459,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-01T19:44:36Z",
		"body" : "OK, I filter out optional as well. However, I want to point out it isn't only causing **slightly** inaccurate but a lot whenever there is `if build.with?(foo) depends_on ... `",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 424
	},
	{
		"id" : 230036446,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-01T20:06:21Z",
		"body" : "Can you provide an example that backs up this claim? I just ran the current code from this PR against all my installed formulae and then ran it again after disabling the optional filtering (see diff below). When comparing those outputs, and checking the dependencies that were additionally pointed out, I found that all of them were legitimate complaints. (But maybe the formulae I have installed aren't representative.)\r\n\r\n----\r\n\r\n```diff\r\ndiff --git i/Library/Homebrew/dev-cmd/linkage.rb w/Library/Homebrew/dev-cmd/linkage.rb\r\nindex c5bb2344..b547853c 100644\r\n--- i/Library/Homebrew/dev-cmd/linkage.rb\r\n+++ w/Library/Homebrew/dev-cmd/linkage.rb\r\n@@ -70,7 +70,7 @@ module Homebrew\r\n         f = Formulary.from_rack(keg.rack)\r\n         f.build = Tab.for_keg(keg)\r\n         filter_out = proc do |dep|\r\n-          dep.build? || (dep.optional? && !dep.option_names.any? { |n| f.build.with?(n) })\r\n+          dep.build? # || (dep.optional? && !dep.option_names.any? { |n| f.build.with?(n) })\r\n         end\r\n         declared_deps = f.deps.reject { |dep| filter_out.call(dep) }.map(&:name) +\r\n                         f.requirements.reject { |req| filter_out.call(req) }.map(&:default_formula).compact\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 424
	},
	{
		"id" : 230156581,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-03T14:38:08Z",
		"body" : "It would have been nice to update the comment at the top of the implementation file. Maybe in a follow-up commit/PR? Otherwise the modified behavior might be surprising to someone reading that.\r\n\r\n> You need to have custom install, i.e. installing options to see the difference.\r\n\r\nI have quite a few formulae with non-standard options installed. Regardless, I think we have arrived at a reasonable middle ground and the change is certainly an improvement, though it might be a bit annoying at first as more test bot build are probably going to (rightfully) fail because of this check. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 424
	},
	{
		"id" : 229729762,
		"user" : {
			"login" : "tiferrei"
		},
		"created_at" : "2016-06-30T17:27:08Z",
		"body" : "Sorry, moved to homebrew-core.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 425
	},
	{
		"id" : 229691805,
		"user" : {
			"login" : "peakerWu"
		},
		"created_at" : "2016-06-30T15:18:50Z",
		"body" : "brew install XXX or  brew doctor have  Permission denied - /tmp/github_api_headers20160630-2137-1vjetfs  why?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 426
	},
	{
		"id" : 230008043,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-01T17:47:47Z",
		"body" : "This usually means that there's some permission problem with your `/tmp` directory. Can you please provide the output of the following commands and tell us what version of OS X you're on?\r\n\r\n```\r\nl -delO@ /private/tmp /tmp\r\nbrew config\r\n```\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 426
	},
	{
		"id" : 236407953,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-31T03:57:47Z",
		"body" : "Closing as dead, but please shout if we can offer any assistance here still. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 426
	},
	{
		"id" : 229851811,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-01T04:33:50Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 427
	},
	{
		"id" : 230018576,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-01T18:36:09Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 428
	},
	{
		"id" : 229819930,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-06-30T23:49:31Z",
		"body" : "Yeah, let's dogfood it. `brew update --preinstall` takes several (~7) seconds to execute for me; should I expect that?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229844013,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-01T03:11:34Z",
		"body" : "I hit about 7 seconds as well, FWIW. I'm not completely enamoured with blending developer & auto-update, but agree it's probably the easiest way for it to be more widely tested.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229844963,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-01T03:20:38Z",
		"body" : "```\r\nJosephs-MacBook-Pro:~ joe$ time brew update --preinstall\r\n==> Auto-updated Homebrew!\r\nUpdated 1 tap (caskroom/cask).\r\nNo changes to formulae.\r\n\r\nreal\t0m15.983s\r\nuser\t0m11.024s\r\nsys\t0m4.427s\r\nJosephs-MacBook-Pro:~ joe$ time brew update --preinstall\r\n\r\nreal\t0m13.027s\r\nuser\t0m10.393s\r\nsys\t0m3.571s\r\n```\r\n\r\nNot thrilled with this idea to put it mildly, since the first thing that comes to mind is planning to defeat it effectively.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229850972,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-01T04:24:15Z",
		"body" : "(this is why I wanted to roll this out more widely)\r\n\r\nhttps://github.com/Homebrew/brew/blob/e3b6c96b5dbb3529832f19347781bc2cedd6ab5a/Library/Homebrew/cmd/update.sh#L389\r\n\r\nIt's perhaps worth changing that and seeing if it speeds things up (it almost certainly will). We could consider avoiding that case on the autoupdate (i.e. unless anything has changed rather than doing it unconditionally for developers). ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229858292,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-01T05:40:01Z",
		"body" : "```\r\nJosephs-MacBook-Pro:~ joe$ time brew update --preinstall\r\n\r\nreal\t0m13.248s\r\nuser\t0m9.632s\r\nsys\t0m3.553s\r\nJosephs-MacBook-Pro:~ joe$ time brew update --preinstall\r\n\r\nreal\t0m12.139s\r\nuser\t0m9.632s\r\nsys\t0m3.228s\r\nJosephs-MacBook-Pro:~ joe$ git -C /usr/local diff -- Library/Homebrew/cmd/update.sh\r\ndiff --git a/Library/Homebrew/cmd/update.sh b/Library/Homebrew/cmd/update.sh\r\nindex aafae72..b35d01b 100644\r\n--- a/Library/Homebrew/cmd/update.sh\r\n+++ b/Library/Homebrew/cmd/update.sh\r\n@@ -385,8 +385,7 @@ EOS\r\n   safe_cd \"$HOMEBREW_REPOSITORY\"\r\n \r\n   if [[ -n \"$HOMEBREW_UPDATED\" ||\r\n-        -n \"$HOMEBREW_UPDATE_FAILED\" ||\r\n-        -n \"$HOMEBREW_DEVELOPER\" ]]\r\n+        -n \"$HOMEBREW_UPDATE_FAILED\" ]]\r\n   then\r\n     brew update-report \"$@\"\r\n     return $?\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229967687,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-01T14:53:08Z",
		"body" : "How many taps do you have? Check out `/usr/bin/time`, too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229968886,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-01T14:57:39Z",
		"body" : "24 taps.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229969334,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-01T14:59:16Z",
		"body" : "All on GitHub or not? Mind playing around and see if you can figure out the slow bit? I assume it's the `curl` calls. I still think this feature would help us a lot for typical users (and it has an opt-out).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229970837,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-01T15:05:22Z",
		"body" : "```\r\nhttps://github.com/Homebrew/homebrew-apache\r\nhttps://github.com/Homebrew/homebrew-binary\r\nhttps://github.com/Homebrew/homebrew-bundle\r\nhttps://github.com/Homebrew/homebrew-command-not-found\r\nhttps://github.com/Homebrew/homebrew-completions\r\nhttps://github.com/Homebrew/homebrew-core\r\nhttps://github.com/Homebrew/homebrew-dev-tools\r\nhttps://github.com/Homebrew/homebrew-devel-only\r\nhttps://github.com/Homebrew/homebrew-dupes\r\nhttps://github.com/Homebrew/homebrew-emacs\r\nhttps://github.com/Homebrew/homebrew-fuse\r\nhttps://github.com/Homebrew/homebrew-games\r\nhttps://github.com/Homebrew/homebrew-gui\r\nhttps://github.com/Homebrew/homebrew-nginx\r\nhttps://github.com/Homebrew/homebrew-php\r\nhttps://github.com/Homebrew/homebrew-python\r\nhttps://github.com/Homebrew/homebrew-science\r\nhttps://github.com/Homebrew/homebrew-services\r\nhttps://github.com/Homebrew/homebrew-tex\r\nhttps://github.com/Homebrew/homebrew-versions\r\nhttps://github.com/Homebrew/homebrew-x11\r\nhttps://github.com/caskroom/homebrew-cask\r\nhttps://github.com/scribusproject/homebrew-scribus\r\nhttps://github.com/youtux/homebrew-livecheck\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229971833,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-01T15:09:23Z",
		"body" : "Here are my numbers for two different Homebrew installations on my system:\r\n\r\n```console\r\n/opt/brewery/tests $ /usr/bin/time brew update --preinstall\r\n       20.10 real        12.73 user         8.46 sys\r\n/opt/brewery/tests $ /usr/bin/time brew update --preinstall\r\n       19.74 real        12.75 user         8.26 sys\r\n/opt/brewery/tests $ brew tap | wc -l\r\n      28\r\n```\r\n\r\n```console\r\n/opt/brewery/dummy $ /usr/bin/time brew update --preinstall\r\n        2.17 real         1.21 user         0.91 sys\r\n/opt/brewery/dummy $ /usr/bin/time brew update --preinstall\r\n        1.83 real         1.16 user         0.70 sys\r\n/opt/brewery/dummy $ brew tap | wc -l\r\n       1\r\n```\r\n\r\nNotice that it's not even updating anything, probably because my remotes are a bit unconventional (none of them start with `https://` though all of them eventually resolve to `https://github.com/Homebrew/` after remapping via `url.\"https://github.com/\".insteadOf` in my `.gitconfig`).\r\n\r\nSo whatever takes that long is probably happening locally ‚Ä¶ 20 seconds delay on every `brew install` for a no-op doesn't sound exciting just yet. :wink:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229972501,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-01T15:12:11Z",
		"body" : "> So whatever takes that long is probably happening locally ‚Ä¶ 20 seconds delay on every brew install for a no-op doesn't sound exciting just yet. üòâ\r\n\r\nThat's a worst-case. The typical Homebrew user is not using any _non-core_ taps. Perhaps we could try to e.g. only updating the taps that are being requested for installation?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229974857,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-01T15:21:59Z",
		"body" : "It seems to be the git pull time plus about three seconds:\r\n```\r\nJosephs-MacBook-Pro:Taps joe$ time brew update --preinstall\r\n==> Auto-updated Homebrew!\r\nUpdated 1 tap (homebrew/core).\r\nNo changes to formulae.\r\n\r\nreal\t0m18.299s\r\nuser\t0m16.224s\r\nsys\t0m5.768s\r\nJosephs-MacBook-Pro:Taps joe$ (find -E . -type d -regex '^.*\\/.git$'|while read d; do (cd $d/.. ; pwd) ; done|while read t; do (cd $t ; pwd ; time git pull) ; done) 2>&1|grep real|sed -e 's/real.*0m//'|tr -d 's' |perl -lne '$x+=$_; END{print $x;}'\r\n15.009\r\nJosephs-MacBook-Pro:Taps joe$ time brew update --preinstall\r\n\r\nreal\t0m18.291s\r\nuser\t0m16.414s\r\nsys\t0m5.792s\r\nJosephs-MacBook-Pro:Taps joe$ (find -E . -type d -regex '^.*\\/.git$'|while read d; do (cd $d/.. ; pwd) ; done|while read t; do (cd $t ; pwd ; time git pull) ; done) 2>&1|grep real|sed -e 's/real.*0m//'|tr -d 's' |perl -lne '$x+=$_; END{print $x;}'\r\n16.02\r\nJosephs-MacBook-Pro:Taps joe$ time brew update --preinstall\r\n\r\nreal\t0m18.166s\r\nuser\t0m16.308s\r\nsys\t0m5.739s\r\nJosephs-MacBook-Pro:Taps joe$ (find -E . -type d -regex '^.*\\/.git$'|while read d; do (cd $d/.. ; pwd) ; done|while read t; do (cd $t ; pwd ; time git pull) ; done) 2>&1|grep real|sed -e 's/real.*0m//'|tr -d 's' |perl -lne '$x+=$_; END{print $x;}'\r\n21.297\r\nJosephs-MacBook-Pro:Taps joe$ time brew update --preinstall\r\n\r\nreal\t0m18.135s\r\nuser\t0m16.251s\r\nsys\t0m5.719s\r\nJosephs-MacBook-Pro:Taps joe$ (find -E . -type d -regex '^.*\\/.git$'|while read d; do (cd $d/.. ; pwd) ; done|while read t; do (cd $t ; pwd ; time git pull) ; done) 2>&1|grep real|sed -e 's/real.*0m//'|tr -d 's' |perl -lne '$x+=$_; END{print $x;}'\r\n15.421\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229975258,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-01T15:23:28Z",
		"body" : "> That's a worst-case. The typical Homebrew user is not using any _non-core_ taps.\r\n\r\nSure, that's true. But if we want to test this on ourselves, it's going to be annoying at times. And I definitely use that 28-tap repository regularly to try out things where I'd like to have the full picture of all formulae from all Homebrew-hosted taps.\r\n\r\n> Perhaps we could try to e.g. only updating the taps that are being requested for installation?\r\n\r\nMaybe before we start optimizing, we try to find out what is slowing down the process this much? Sadly, I'm not aware of a good solution for profiling shell/Bash code, but I sure would like to find one, as it might come in handy on other occasions, too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229975454,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-01T15:24:16Z",
		"body" : "I think it's just doing full git pulls. Those numbers don't look like a coincidence to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229975741,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-01T15:25:31Z",
		"body" : "@UniqMartin You could check your pull time with the same command to see if the finding holds up\r\n```\r\n(find -E . -type d -regex '^.*\\/.git$'|while read d; do (cd $d/.. ; pwd) ; done|while read t; do (cd $t ; pwd ; time git pull) ; done) 2>&1|grep real|sed -e 's/real.*0m//'|tr -d 's' |perl -lne '$x+=$_; END{print $x;}'\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229977307,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-01T15:31:49Z",
		"body" : "@ilovezfs I re-ran with `/usr/bin/time brew update --debug --verbose --preinstall` and I don't see any `git pull`s being executed and there's no indication of any network traffic either, as far as I can tell. (All my repositories are still not current due to my non-standard `origin` remote.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229977979,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-01T15:34:29Z",
		"body" : "Well then the script must be busy contemplating the universe, I suppose.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229979669,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-01T15:41:38Z",
		"body" : "Hehe yes, you're right. I killed the WiFi and...\r\n```\r\nJosephs-MacBook-Pro:Taps joe$ time brew update --preinstall\r\n\r\nreal\t0m17.797s\r\nuser\t0m17.629s\r\nsys\t0m6.264s\r\nJosephs-MacBook-Pro:Taps joe$ time brew update --preinstall\r\n\r\nreal\t0m18.070s\r\nuser\t0m17.717s\r\nsys\t0m6.335s\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229983897,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-01T15:59:25Z",
		"body" : "Looks like it's spending most of the time doing the git stash/git stash pop routine. Without that,\r\n```\r\nJosephs-MacBook-Pro:local joe$ time brew update --preinstall\r\n\r\nreal\t0m4.430s\r\nuser\t0m3.530s\r\nsys\t0m2.351s\r\nJosephs-MacBook-Pro:local joe$ time brew update --preinstall\r\n\r\nreal\t0m4.441s\r\nuser\t0m3.570s\r\nsys\t0m2.365s\r\n```\r\nSo testing with HOMEBREW_DEVELOPER set is especially unrealistic.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229988590,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-01T16:20:20Z",
		"body" : "So with `coreutils` and `moreutils` installed you can create a pretty accurate trace of the output and that might help to identify some bottlenecks (haven't looked into it more closely yet):\r\n\r\n```\r\ngstdbuf -oL -eL brew update --debug --verbose --preinstall 2>&1 | ts '%.s'\r\n```\r\n\r\nThe output will be something like:\r\n\r\n```console\r\n$ gstdbuf -oL -eL brew update --debug --verbose --preinstall 2>&1 | ts '%.s'\r\n1467389638.650671 ++ [[ /opt/brewery/tests = \\/\\u\\s\\r\\/\\l\\o\\c\\a\\l ]]\r\n1467389638.651005 ++ [[ ! -w /opt/brewery/tests ]]\r\n1467389638.651037 ++ git --version\r\n1467389638.721324 ++ export GIT_TERMINAL_PROMPT=0\r\n1467389638.721429 ++ GIT_TERMINAL_PROMPT=0\r\n1467389638.721489 ++ export 'GIT_SSH_COMMAND=ssh -oBatchMode=yes'\r\n1467389638.721531 ++ GIT_SSH_COMMAND='ssh -oBatchMode=yes'\r\n1467389638.721638 ++ [[ -z 1 ]]\r\n1467389638.721679 ++ QUIET_ARGS=()\r\n1467389638.721716 ++ unset GIT_CONFIG\r\n1467389638.721754 ++ lock update\r\n1467389638.721789 ++ local name=update\r\n1467389638.721824 ++ local lock_dir=/opt/brewery/tests/Library/Locks\r\n1467389638.721863 ++ local lock_file=/opt/brewery/tests/Library/Locks/update\r\n1467389638.721900 ++ [[ -d /opt/brewery/tests/Library/Locks ]]\r\n1467389638.721936 ++ exec\r\n1467389638.721970 ++ exec\r\n1467389638.722004 ++ _create_lock 200\r\n1467389638.722041 ++ local lock_fd=200\r\n1467389638.722076 ++ local ruby=/usr/bin/ruby\r\n1467389638.722109 ++ [[ -x /usr/bin/ruby ]]\r\n1467389638.722142 ++ [[ -n /usr/bin/ruby ]]\r\n1467389638.722264 ++ /usr/bin/ruby -e 'File.new(200).flock(File::LOCK_EX | File::LOCK_NB) || exit(1)'\r\n1467389638.763823 ++ safe_cd /opt/brewery/tests\r\n1467389638.763936 ++ cd /opt/brewery/tests\r\n[‚Ä¶]\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 230008107,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-01T17:48:05Z",
		"body" : "Even the 4 second delay for the installs to start, which would have started instantly before, is not ... fun.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 230061841,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-01T22:36:35Z",
		"body" : "> Even the 4 second delay for the installs to start, which would have started instantly before, is not ... fun.\r\n\r\nNeither are the regular issues we get which are fixed by a `brew update` üòâ. It would have \"started\" instantly before but for most software it's not a large % increase of the overall installation time. We can add a message saying that it's running a self-update, though?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 230158238,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-03T15:11:51Z",
		"body" : "> That's a pretty massive slowdown (and it makes me question using it even in e.g. superenv)\r\n\r\nI don't think those times are relevant in `superenv`, when we do more expensive operations that involve network access and actually checking out tags/branches. It just shows in the mostly no-op case in `brew update` because there we're mostly doing trivial (and fast) operations like querying the working copy status and the Git configuration (via `git config`).\r\n\r\n> what's actually the intent of the git shim?\r\n\r\n@xu-cheng might have a better answer, but: The main motivation is to have more flexibility (e.g. through `HOMEBREW_GIT` and `GIT` environment variables, picking a Homebrew-installed Git that isn't in PATH) and safety (skip `/usr/bin/git` if it is not working properly, i.e. without CLT/Xcode or a misconfigured `xcode-select`) when picking a `git` binary. I continue to see merit in that, but the repeated lookup of the correct binary obviously has some downsides and that the lookup is done in Ruby doesn't help with performance. This can be fixed with what I've shown in my diff. One would just need to make sure to also invalidate the cache (because that's what `$_git_executable` is) when necessary.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 230158430,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-03T15:15:40Z",
		"body" : "These sound like reasons motivated by a desire to support < 10.9, unless I'm missing something.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 230159066,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-03T15:28:54Z",
		"body" : "> These sound like reasons motivated by a desire to support < 10.9, unless I'm missing something.\r\n\r\nYou are (though I should probably have used ‚Äúrobustness‚Äù instead of ‚Äúsafety‚Äù):\r\n\r\n> [‚Ä¶] and safety (skip `/usr/bin/git` if it is not working properly, i.e. without CLT/Xcode or a misconfigured `xcode-select`) when picking a git binary.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 230159147,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-03T15:30:55Z",
		"body" : "It seems to me that if I have a broken /usr/bin/git or misconfigured xcode-select, then I have bigger problems than which git brew is picking.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 230538661,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-05T17:02:13Z",
		"body" : "With Martin's patch and HOMEBREW_DEVELOPER=1:\r\n```\r\n time brew update --preinstall\r\n==> Auto-updated Homebrew!\r\nUpdated 2 taps (caskroom/cask, homebrew/core).\r\nNo changes to formulae.\r\n\r\nreal\t0m11.082s\r\nuser\t0m4.244s\r\nsys\t0m3.661s\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 429
	},
	{
		"id" : 230809409,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-06T15:33:04Z",
		"body" : "> \"At most X\" is always going to be arbitrary.\r\n\r\nWe're making a lot of arbitrary choices for the user. At most a day seems like a reasonable middle ground where things are updated frequently enough without getting in the way on every single invocation. Some of the auto-updating GUI apps allow me to pick the frequency of those update checks, where the choice is usually daily, weekly, or even monthly.\r\n\r\n> The case we're trying to deal with is `brew install X` failing and it's already fixed if they had run `brew update`. Even if the update happened 30 seconds ago and we update at most every minute: that's not enough for this case.\r\n\r\nI think this is solving a manageable problem with a sledgehammer. And quite frankly, it's unrealistic that things will have changed this much in the last 30 seconds, or even 24 hours. I think we're mostly trying to address those cases that never (or almost never) update, they will be served well with a daily update, and I'm confident this is enough to solve about 90% of all issues that can actually be attributed to a stale Homebrew installation. Plus a failed installation already asks the user to `brew update` and try again.\r\n\r\nWith this argument that the issue might have been fixed in the past few seconds/minutes/hours, we could as well decide to auto-update after a failed installation and try again. Then repeat this cycle until the installation finally succeeds or the user aborts. (No, this is not a serious suggestion.)\r\n\r\n> We should optimise for the novice user case and then allow power users to customise this (i.e. the already existing opt-out).\r\n\r\nI'm fine with that. I'm probably going to disable the auto-update on my own machine for a bunch of reasons, all of which probably don't matter at all to a novice user, but matter to me:\r\n\r\n- I'm a power user and know what I want. I'm aware of my local repository state (including tap repositories) and want `brew install` to operate on that and not some (to me) unpredictable state after an automatic update. I also want to perform updates when that's convenient for me.\r\n\r\n- My repositories (both taps and the package manager) are frequently on a non-`master` branch. Auto-update doesn't help with these and updating them cannot be fully automated anyway.\r\n\r\n- My working copies are frequently in some intermediate state, including uncommitted files, pending Git operations and what not. I don't trust the automatism to always be able to fully stash away and restore this. I'm fine with cleaning up my working copy before I run `brew update`, but I don't want to have to do this while experimenting with other changes, many of which involve repeatedly running `brew install`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 429
	},
	{
		"id" : 231280827,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T05:52:21Z",
		"body" : "@MikeMcQuaid there seems to be a bug where preinstall sometimes fails to update my local homebrew/core master and my local origin/master.\r\n\r\nFull log here:\r\nhttps://gist.github.com/ilovezfs/6dbe53cd5ae2cc25098efd01df01c96a\r\n\r\nSo right now it ends up with the latest commit locally being\r\n19e6e3eaf3868f4f12ae1de2ccc13cc4ac436e94\r\npasspie: update 1.5.2 bottle.\r\n\r\nBut the actual latest commit on GitHub is\r\n489c62e156477b27ad49d774d6d01339eac6596f\r\ncmake: update 3.6.0 bottle.\r\n\r\nRunning it more than once doesn't trigger the update either.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 231282152,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-08T06:03:58Z",
		"body" : "@ilovezfs This looks correct (or more precisely, is by design). `brew update --preinstall` is only checking and auto-updating repositories that are fetched via HTTPS (where the `origin` remote URLs start with `https://github.com/` to be more precise). So in your case it's only ever attempting to update 12 out of all the repositories you have installed. [Here's the relevant code in `cmd/update.sh`.](https://github.com/Homebrew/brew/blob/bf40dd64dff1fc86b0ecbde33dc9e3be3ef3fccb/Library/Homebrew/cmd/update.sh#L357-L376)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 231287130,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T06:43:03Z",
		"body" : "@UniqMartin Most of the time it does do the auto update and lists items from core. Are you saying that's an accident because it noticed one of the https's was outdated and then proceeded to do everything, but if it's only one of ssh's that's outdated it does nothing?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 231288489,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T06:52:37Z",
		"body" : "Also, what in the world is all of the stashing and popping behavior when HOMEBREW_DEVELOPER is set intended to accomplish if what you're saying is true and this is supposed to do nothing with ssh repos?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 231290146,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-08T07:04:02Z",
		"body" : "Ah now I see what was going on. It was only ever working with my main tree, not the tree I use for pushes. I guess \"ideally\" it would substitute in the https url for the ssh one in order to do the API check and then use ssh for the actual transactions (I believe this is exactly what the `hub` command does, btw)?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 231311274,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-08T09:04:59Z",
		"body" : "> Ah now I see what was going on. It was only ever working with my main tree, not the tree I use for pushes. I guess \"ideally\" it would substitute in the https url for the ssh one in order to do the API check and then use ssh for the actual transactions (I believe this is exactly what the hub command does, btw)?\r\n\r\nWe tap using HTTP by default and GitHub uses HTTP by default so we double down on that. If you wanted to implement that approach, though, feel free üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 231451718,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-08T19:30:26Z",
		"body" : "Gonna ship this now; this doesn't mean we're any more likely to ship the autoupdate feature as-is but just that we want to get more üëÄ on this and hopefully more people tweaking bits that are annoying.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 429
	},
	{
		"id" : 231597870,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-10T16:33:59Z",
		"body" : "Well here's another annoying bit.\r\n\r\n```\r\nJosephs-MacBook-Pro:~ joe$ brew install -dvs wget\r\nChecking for Homebrew updates...\r\n==> Auto-updated Homebrew!\r\nUpdated 3 taps (caskroom/cask, homebrew/core, homebrew/science).\r\n==> Updated Formulae\r\nhomebrew/science/adol-c           homebrew/science/colpack          percona-server                  \r\n/usr/local/Library/brew.rb (Formulary::FormulaLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/wget.rb\r\nWarning: wget-1.18 already installed\r\n```\r\nIt might be good if it decided it was going to error out due to already installed before spinning its wheels.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 429
	},
	{
		"id" : 231655010,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-11T06:51:33Z",
		"body" : "> It might be good if it decided it was going to error out due to already installed before spinning its wheels.\r\n\r\nAgreed but unsure how to do that in a preinstall check. In this case: it did update stuff, though.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 429
	},
	{
		"id" : 231655443,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-11T06:54:48Z",
		"body" : "Right and then I get to sit through the update a second time after I resolve the it's-already-installed issue :)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 429
	},
	{
		"id" : 231658417,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-11T07:14:55Z",
		"body" : "@MikeMcQuaid So I've been thinking about whether there would be any way for auto-update both to run asynchronously and to run every time.\r\n\r\nIf I put aside the corner case where the brew update takes a longer time than the installation of the first item (whether explicit target or dependency) for a moment, it should be possible to have the install and the update run simultaneously in separate threads. If, following the completion of the update, brew determines that any of the items involved in the install have actually been updated, it could go back to the beginning, and start over with the newer version(s).\r\n\r\nSince most of the time there will be no overlap between what the user is installing and what formulae actually got updated, in most cases there would be no additional time added to the installation and brew install would not block waiting on a pre-install update to finish. The corner case where the update takes longer than the install of the first item could be addressed by not finalizing the install of the first item until the update completes, which would then be the only case where this added time to installs.\r\n\r\n(Of course, I still think it would be nicer to have this run entirely asynchronously (launchd) or only do it on some arbitrary minimum interval between updates.)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 429
	},
	{
		"id" : 231659069,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-11T07:18:48Z",
		"body" : "@ilovezfs That seems like it would be a bit of a nightmare for the code to handle. I've got various profiling tools bookmarked I want to investigate; I suspect this would be not annoying if the no-op case was e.g. 0.1 seconds.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 429
	},
	{
		"id" : 231659238,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-11T07:19:55Z",
		"body" : "Why a nightmare? As it is, Ctrl-C already triggers a canceling procedure, no?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 429
	},
	{
		"id" : 231660234,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-11T07:25:40Z",
		"body" : ">I suspect this would be not annoying if the no-op case was e.g. 0.1 seconds\r\n\r\nAlso if the no-op case included no-op when none of the items being upgraded/installed have updates. It's annoying in the non-no-op case when it does its thing solely because it's updating cask or some obscure formulae upgrades that nutty ilovezfs just pushed, and the non-no-op update had nothing to do with what I'm doing.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 429
	},
	{
		"id" : 231660562,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-11T07:27:40Z",
		"body" : "> I suspect this would be not annoying if the no-op case was e.g. 0.1 seconds.\r\n\r\nI suspect that might be somehow achievable locally, but would require some serious tuning. But even then this feels like a lot of work. I'm a bit doubtful this can be achieved at all if network access is involved.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 429
	},
	{
		"id" : 231661017,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-11T07:30:25Z",
		"body" : "@UniqMartin Sure; I was just throwing a number out there. I think sub a second is probably both doable and a reasonable compromise e.g. by only updating the tap of the things being installed.\r\n\r\n> Why a nightmare? As it is, Ctrl-C already triggers a canceling procedure, no?\r\n\r\nI'm more thinking of the \"starting compling `wget`, oh there's an update, cancel compiling `wget`, relaunch the new Homebrew\" etc.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 429
	},
	{
		"id" : 231662092,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-11T07:36:21Z",
		"body" : ">I'm more thinking of the \"starting compling wget, oh there's an update, cancel compiling wget, relaunch the new Homebrew\" etc.\r\n\r\nAs an initial version, it could probably treat the cancelable/waits-on-update-to-finish event as the *download* of the first item rather than the install of the first item.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 429
	},
	{
		"id" : 231662592,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-11T07:39:19Z",
		"body" : "Regardless we'll still need to have some sort of \"kill parent Ruby process from the build process and restart the Bash process\" dance that will be fairly involved and hard to debug if it goes wrong.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 429
	},
	{
		"id" : 231663202,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-11T07:42:57Z",
		"body" : ">Regardless we'll still need to have some sort of \"kill parent Ruby process from the build process and restart the Bash process\" dance that will be fairly involved and hard to debug if it goes wrong.\r\n\r\nPerhaps we'll need a ballet instructor.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 429
	},
	{
		"id" : 234311187,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-21T16:38:58Z",
		"body" : "@MikeMcQuaid So I noticed that brew upgrade is running the autoupdate before doing its thing. That seems like it has the potential to create undesirable behavior. If you run `brew update; brew outdated; brew upgrade` you can end up getting more than you expected from inspecting the outdated list unless you're paying careful attention after the upgrade has already started and you're quick on the control-c.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 234358313,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-21T19:29:23Z",
		"body" : "@ilovezfs Stuff like that people will just end up adapting their flows for, I think. Another option I'm coming around to is making the \"only update every X\" super short so it's e.g. 10 seconds which would avoid this situation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 234358517,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-21T19:30:07Z",
		"body" : "I'm also thinking for `brew install X Y Z` we check which taps these map to and only update them (and also perhaps homebrew-core but not e.g. Homebrew/brew)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 234399611,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-21T22:09:56Z",
		"body" : ">@ilovezfs Stuff like that people will just end up adapting their flows for,\r\n\r\nIs there a command line switch to prevent the auto update? Or are you suggesting people would need to adapt by doing `brew update; brew outdated; HOMEBREW_NO_AUTO_UPDATE=1 brew upgrade`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 234400825,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-21T22:15:37Z",
		"body" : "> I'm also thinking for brew install X Y Z we check which taps these map to and only update them (and also perhaps homebrew-core but not e.g. Homebrew/brew)\r\n\r\nIMO, _at least_ `homebrew/core` would have to be done every time, otherwise we're opening the door to seeing tap builds with core dependencies fall apart in all sorts of entirely preventable ways.\r\n\r\nPossibly makes sense to calculate the recursive dependencies & update those taps only, but that's not exactly a breezy quick process.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 429
	},
	{
		"id" : 229820821,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-06-30T23:56:07Z",
		"body" : ":+1: Thanks, Mike.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 430
	},
	{
		"id" : 229865499,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-01T06:32:56Z",
		"body" : "Thinking `--by-dylib` might be a better name? Sample output:\r\n\r\n```\r\ntim@rocketman:Library (linkage-reverse)$ brew linkage --reverse webp\r\nLinks to:\r\n/System/Library/Frameworks/GLUT.framework/Versions/A/GLUT\r\n  bin/vwebp\r\n\r\n/System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL\r\n  bin/vwebp\r\n\r\n/usr/local/Cellar/webp/0.5.0/lib/libwebp.6.dylib\r\n  bin/cwebp\r\n  bin/vwebp\r\n  bin/webpmux\r\n  lib/libwebpdemux.2.dylib\r\n  lib/libwebpmux.2.dylib\r\n...\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 431
	},
	{
		"id" : 230026176,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-01T19:11:25Z",
		"body" : "A lot of rather nit-picky comments, though there are also more substantial ones among them. üôà\r\n\r\nI think this feature is generally useful and I think the `--reverse` is a good choice for the flag name. Would you mind also briefly documenting the new flag in the top comment of this command?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 431
	},
	{
		"id" : 230076326,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-02T01:27:22Z",
		"body" : "If you don't mind, I'd like to add a feature request on top of all my nit picking. Can you add a second output mode, e.g. triggered by a flag like `--wide`, that generates an output as follows?\r\n\r\n```console\r\n$ brew linkage --reverse --wide webp\r\n/System/Library/Frameworks/GLUT.framework/Versions/A/GLUT:bin/vwebp\r\n/System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL:bin/vwebp\r\n/usr/local/Cellar/webp/0.5.0/lib/libwebp.6.dylib:bin/cwebp\r\n/usr/local/Cellar/webp/0.5.0/lib/libwebp.6.dylib:bin/vwebp\r\n/usr/local/Cellar/webp/0.5.0/lib/libwebp.6.dylib:bin/webpmux\r\n/usr/local/Cellar/webp/0.5.0/lib/libwebp.6.dylib:lib/libwebpdemux.2.dylib\r\n/usr/local/Cellar/webp/0.5.0/lib/libwebp.6.dylib:lib/libwebpmux.2.dylib\r\n...\r\n```\r\n\r\nThe motivation behind this is that while the output is more repetitive, it is also much easier to process with some `grep`ping and `cut`ting. The currently proposed output is tuned for consumption by humans (which is fine), but is not as well-suited for automation ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 431
	},
	{
		"id" : 230156289,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-03T14:32:35Z",
		"body" : "> Would you mind also briefly documenting the new flag in the top comment of this command?\r\n\r\nThis would have been nice nonetheless. Maybe you can add this in a follow-up commit/PR ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 431
	},
	{
		"id" : 230163642,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-03T17:05:03Z",
		"body" : "Oops, overlooked that; will do.\n\nOn Sun, Jul 3, 2016, 07:32 Martin Afanasjew <notifications@github.com>\nwrote:\n\n> Would you mind also briefly documenting the new flag in the top comment of\n> this command?\n>\n> This would have been nice nonetheless. Maybe you can add this in a\n> follow-up commit/PR ‚Ä¶\n>\n> ‚Äî\n> You are receiving this because you modified the open/close state.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/Homebrew/brew/pull/431#issuecomment-230156289>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe/AAKnQQEQEonMFxl5ErvaLzkP6QKCLkT9ks5qR8gDgaJpZM4JCxgA>\n> .\n>\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 431
	},
	{
		"id" : 229976127,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-01T15:27:06Z",
		"body" : "üëç other than a few tweaks\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 432
	},
	{
		"id" : 230029514,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-01T19:28:42Z",
		"body" : "Two minor comments regarding distribution of empty lines and terminology, but otherwise :+1:.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 432
	},
	{
		"id" : 230060570,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-01T22:26:45Z",
		"body" : "LGTM üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 432
	},
	{
		"id" : 230070119,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-01T23:54:40Z",
		"body" : "Noticed my Rubocop plugin in Atom was already nagging me about this, heh.\r\n\r\nI'd personally prefer to disable the new `NumericLiteralPrefix` check as I think the downside of a new cosmetic check impacting 100+ core formula alone is greater than the upside of being friendlier to non-Ruby newcomers, particularly given the first thing most newcomers seem to do is check other formulae for similar usage. Not a strong opinion, though.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 433
	},
	{
		"id" : 230140260,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-03T07:40:08Z",
		"body" : "The leading-zero-octal convention is evil but entrenched; let's switch the cop off.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 433
	},
	{
		"id" : 230158944,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-03T15:26:26Z",
		"body" : "Thanks for your feedback! Updated with this cop enforcing the ‚Äúevil‚Äù variant. üòà\r\n\r\nWe can always reconsider later and switch to the `0o` prefix, if we feel like that would be beneficial and thanks to this being auto-fixable, we could transition our existing code base and formulae all at once.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 433
	},
	{
		"id" : 230036408,
		"user" : {
			"login" : "fdizile"
		},
		"created_at" : "2016-07-01T20:06:06Z",
		"body" : "Formal Pull Request was not completed due to the nature of the pull",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 435
	},
	{
		"id" : 230045548,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-01T20:56:31Z",
		"body" : "Thanks for thinking about our documentation; it is much appreciated! I'll check back later once you had a chance to address my comments and I'm sure other maintainers also have an opinion on these changes.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 435
	},
	{
		"id" : 230046368,
		"user" : {
			"login" : "fdizile"
		},
		"created_at" : "2016-07-01T21:00:53Z",
		"body" : "@UniqMartin, my pleasure. Changes committed to patch.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 435
	},
	{
		"id" : 230176797,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-03T21:34:58Z",
		"body" : "Thanks again for thinking about the documentation! I'm not sure what motivated these changes, though; I don't think as-is they add any clarity but perhaps I'm missing the motivation? Cheers!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 435
	},
	{
		"id" : 230880423,
		"user" : {
			"login" : "fdizile"
		},
		"created_at" : "2016-07-06T19:27:12Z",
		"body" : "The main reason I made these changes was simply to re-word the current documentation. I felt that I could rewrite parts of the documentation to be more end-user friendly than it currently was.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 435
	},
	{
		"id" : 238814968,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:33:31Z",
		"body" : "Passing on this but thanks for the PR anyway, @fdizile.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 435
	},
	{
		"id" : 230139353,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-03T07:11:17Z",
		"body" : "Or, rather, what tap is `bempp` in? What does `brew info bempp` show? This is a problem with the formula.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 436
	},
	{
		"id" : 238813924,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:29:11Z",
		"body" : "This has been improved as much as it will be for now. If this is still broken for you: we'll accept PRs for this but we're not actively working on it at this time.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 436
	},
	{
		"id" : 230177075,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-03T21:40:50Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 439
	},
	{
		"id" : 230177097,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-03T21:41:22Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 440
	},
	{
		"id" : 230287182,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-04T13:10:59Z",
		"body" : "@MikeMcQuaid Since the problem in Homebrew/homebrew-core#2410 seems not to go away when the firewall is up, I wonder if there's a solution to recommend so that user isn't always looking at these error messages. For instance, do we know what port the GitHub API requires so the appropriate exception can be added to the firewall rules if desired?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 441
	},
	{
		"id" : 230287796,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-04T13:14:04Z",
		"body" : "We could also recommend setting HOMEBREW_NO_GITHUB_API=1 but that feels like a sledgehammer solution since the problem may only be transient (e.g., you're using a restaurant's WiFi, which has a firewall on the relevant port, but no such problem at home) but setting a profile variable is unlikely to be unwound spontaneously by the user at some later date.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 441
	},
	{
		"id" : 230289703,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-04T13:23:08Z",
		"body" : "The GitHub API uses HTTPS, so I guess we're talking about port 443. I don't think there's much we can do if this port happens to be blocked, but in this case the user typically will have quite a problematic web experience in general ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 441
	},
	{
		"id" : 230332111,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-04T17:34:04Z",
		"body" : "@ilovezfs yeh, if they cannot access the GitHub API they are going to have to just disable all usage.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 441
	},
	{
		"id" : 230332363,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-04T17:36:19Z",
		"body" : "Should the output say that explicitly as well as possible cause or just wait for them to file the issues and respond each time?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 441
	},
	{
		"id" : 230351608,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-04T20:37:46Z",
		"body" : "@ilovezfs Sorry, you've lost me: what output/what cause?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 441
	},
	{
		"id" : 230352176,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-04T20:43:48Z",
		"body" : "@MikeMcQuaid Oh, I'm only asking if you think the curl error messages will need any brew customization to make them more clear or if they're good enough all by themselves.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 441
	},
	{
		"id" : 230406693,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-05T07:33:13Z",
		"body" : "@ilovezfs Good point. I think the `curl` error messages would be an improvement on what we have now but may need further tweaks eventually, yeh.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 441
	},
	{
		"id" : 232004766,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-12T10:47:44Z",
		"body" : "Other than the bug I found (and you already acknowledged) it behaved as I expected in local testing (e.g. when switching off WiFi or using Ruby 1.8.7).\r\n\r\n:+1: as soon as the bug is squashed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 441
	},
	{
		"id" : 230183279,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-04T00:01:17Z",
		"body" : "What's the ownership of /usr/local/var? You may need to change that as well.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 445
	},
	{
		"id" : 230183402,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-04T00:03:38Z",
		"body" : "I take it back:\r\n`drwxr-xr-x   9 geuis  admin  306 Jul  3 16:26 .`\r\n\r\nWhat user owns `brew`? Homebrew shouldn't have way to run things as root.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 445
	},
	{
		"id" : 230183621,
		"user" : {
			"login" : "geuis"
		},
		"created_at" : "2016-07-04T00:09:32Z",
		"body" : "@tdsmith It appears my account is the owner.\r\n```\r\ngeuis-macbook-pro:makersteps geuis$ ls -la /usr/local/bin/brew \r\n-rwxr-xr-x  1 geuis  admin  776 Jul  1 23:53 /usr/local/bin/brew\r\n```\r\nhmm how would I check what user it runs under?\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 445
	},
	{
		"id" : 230183802,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-04T00:13:35Z",
		"body" : "On Sun, Jul 3, 2016 at 5:09 PM, Charles Lawrence\r\n<notifications@github.com> wrote:\r\n>\r\n> @tdsmith hmm how would I check what user it runs under?\r\n\r\n`ls -l $(which brew)` should tell you who owns `brew`.\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 445
	},
	{
		"id" : 230183914,
		"user" : {
			"login" : "geuis"
		},
		"created_at" : "2016-07-04T00:16:17Z",
		"body" : "@tdsmith yeah, that's it. Show's me as owner.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 445
	},
	{
		"id" : 238737970,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-10T01:02:36Z",
		"body" : "This is a persistent issue; see https://github.com/Homebrew/legacy-homebrew/issues/35240, https://github.com/Homebrew/legacy-homebrew/issues/48558, https://github.com/Homebrew/legacy-homebrew/issues/48766.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 445
	},
	{
		"id" : 244548083,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:00:11Z",
		"body" : "Figured this out finally and opened a PR in https://github.com/Homebrew/homebrew-core/pull/4478.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 445
	},
	{
		"id" : 244633297,
		"user" : {
			"login" : "geuis"
		},
		"created_at" : "2016-09-04T22:53:20Z",
		"body" : "@MikeMcQuaid that's great news! Thanks for fixing this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 445
	},
	{
		"id" : 244803511,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-05T19:39:07Z",
		"body" : "@geuis Thanks for the kind words. My pleasure.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 445
	},
	{
		"id" : 231950361,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-12T06:38:50Z",
		"body" : "Should be fine except for the test failure and the final style nit (that didn't really apply earlier).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 456
	},
	{
		"id" : 230432460,
		"user" : {
			"login" : "dufferzafar"
		},
		"created_at" : "2016-07-05T09:37:32Z",
		"body" : "I'm new to ruby. \r\n\r\n~~What line can I add to the formula so that the process just pauses there? This will help me debug the problem better.~~ I tried with `system read`. It worked!\r\n\r\nCouldn't really understand what the problem is :confused: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 461
	},
	{
		"id" : 230447430,
		"user" : {
			"login" : "dufferzafar"
		},
		"created_at" : "2016-07-05T10:52:06Z",
		"body" : "Just for completeness. \r\n\r\nI ended up installing Python 3 via [pyenv](https://github.com/yyuu/pyenv).\r\n\r\n```\r\nbrew install pyenv\r\npyenv install 3.5.2\r\n```\r\n\r\nThings worked! :smile: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 461
	},
	{
		"id" : 230531006,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-05T16:32:59Z",
		"body" : "Sorry, but you have not followed the requested steps in our [Troubleshooting Guide](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting). Please follow (all of) these steps, particularly the one that asks you to post the output of `brew gist-logs python 3`, and post the information here so we can try to help you with your problem. Thanks!\r\n\r\n> I ended up installing Python 3 via pyenv.\r\n\r\nThat's probably not what you originally wanted, but feel free to close the issue if you're happy with that and not interested in debugging this further.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 461
	},
	{
		"id" : 231520400,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-09T07:17:30Z",
		"body" : "Heh; oops. The `python3` formula does string matching against `.app`, which is tripping on `~/.apps`. This is our bug.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 461
	},
	{
		"id" : 231524270,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-09T08:59:52Z",
		"body" : "@dufferzafar Should be fixed by the change in Homebrew/homebrew-core@d14d435bdeb56d9f9f3bf8d59198d58447395a98, if you want to give it another try. (Make sure to run `brew update` first.)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 461
	},
	{
		"id" : 231525393,
		"user" : {
			"login" : "dufferzafar"
		},
		"created_at" : "2016-07-09T09:28:07Z",
		"body" : "@UniqMartin Thanks for this. I'll test it out!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 461
	},
	{
		"id" : 233336900,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-18T14:01:07Z",
		"body" : "@UniqMartin Isn't this just another unwelcome incarnation of this gem: https://github.com/Homebrew/brew/issues/415",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 467
	},
	{
		"id" : 233357973,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-18T15:11:01Z",
		"body" : "@ilovezfs I can't rule it out completely, but it seems to be unlikely. The weird metamorphosis of the input (on the second `brew install` invocation) already happens before the search is kicked off. And `gzip` indeed lives in the `homebrew/dupes` tap. But if you can reproduce this or you have more clues, I'm happy to take a closer look.\r\n\r\nClosing this as we haven't heard back from the original issue author in quite a while, but I'm happy to reopen once there's new information and the issue remains unsolved.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 467
	},
	{
		"id" : 231473376,
		"user" : {
			"login" : "deepak"
		},
		"created_at" : "2016-07-08T21:09:22Z",
		"body" : "ok. thanks @dunn for answering\r\n\r\none more question, \r\nwhere does the `zeromq` formula create an alias for `zmq` ?\r\ndo not see anything for alias in the `zeromq` formula",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 469
	},
	{
		"id" : 231486080,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-07-08T22:17:49Z",
		"body" : "It doesn't.  We create aliases manually.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 469
	},
	{
		"id" : 231252211,
		"user" : {
			"login" : "grant-olson"
		},
		"created_at" : "2016-07-08T01:18:06Z",
		"body" : "I had a pretty clean system, so I might have blamed the wrong software.\r\n\r\n1. Got a laptop from an old co worker. It had full disk encryption and I didn't have the password, so I was forced to repartition and start with a clean install of El Capitan from the recovery console.\r\n\r\n2. Installed the following programs, using current versions available directly from the website:\r\n\r\n    * Firefox\r\n    * Thunderbird\r\n    * KeepassX\r\n    * LibreOffice\r\n    * GpgSuite\r\n\r\n3. After that tried to install brew via the curl command, and it blew up with an error I unfortunately don't have.\r\n\r\nIts possible brew didn't work because I was in the same terminal tab and didn't get a new shell with a new environment. I can't rule that out.\r\n\r\nAn attempt to reinstall complained that it wouldn't proceed because I already had brew installed, and instructed me to perform a curl command with uninstall option.\r\n\r\nRunning that command and then the install command succeeded. I'm also unsure at this point if I was in the same bash shell with the same environment or if I was in a new terminal when I ran `brew install git`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 472
	},
	{
		"id" : 231252821,
		"user" : {
			"login" : "grant-olson"
		},
		"created_at" : "2016-07-08T01:22:40Z",
		"body" : "Actually one more thing.\r\n\r\n4. I ran `sudo chown 'whoami`' /usr/local` with backticks instead of quotes around whoami to set permissions on the directory based on some stackoverflow link I found.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 472
	},
	{
		"id" : 231577935,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-10T08:47:06Z",
		"body" : "I'm afraid we don't have enough here to do anything with. If you can let us know exactly what commands you ran we can try and make fixes. Sorry and thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 472
	},
	{
		"id" : 231584966,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-10T11:48:57Z",
		"body" : "I'm pretty much 100% sure this was some local issue rather than specific to MacGPG2, but please do poke if you stumble into this again so we can look again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 472
	},
	{
		"id" : 231290734,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-07-08T07:08:03Z",
		"body" : "I don't think `linkapps` *ever* worked with Spotlight.  This issue has been raised numerous times here, e.g:\r\nhttps://github.com/Homebrew/legacy-homebrew/issues/28798\r\nhttps://github.com/Homebrew/legacy-homebrew/issues/49033\r\nhttps://github.com/Homebrew/legacy-homebrew/issues/45429\r\nhttps://github.com/Homebrew/legacy-homebrew/issues/8970\r\nhttps://github.com/Homebrew/legacy-homebrew/pull/35050\r\nhttps://github.com/Homebrew/legacy-homebrew/issues/41238\r\n\r\nEach time, as far as I can remember, HB decides not to do anything about it, because the maintainers decide that nothing reasonable can be done about it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 473
	},
	{
		"id" : 231567249,
		"user" : {
			"login" : "metakirby5"
		},
		"created_at" : "2016-07-10T02:36:08Z",
		"body" : "If you [alias apps](https://github.com/Homebrew/legacy-homebrew/issues/16639#issuecomment-42813448) instead of symlinking, it works.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 473
	},
	{
		"id" : 231577598,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-10T08:38:43Z",
		"body" : "Please read the various issues before this; aliasing has its own issues.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 473
	},
	{
		"id" : 231553292,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-09T20:07:50Z",
		"body" : "Seems like your Homebrew is out-of-date if `libpng` isn't already that version. We adopted that on Jun 11 2016. I'd try a `brew update`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 474
	},
	{
		"id" : 231559530,
		"user" : {
			"login" : "ruffiem"
		},
		"created_at" : "2016-07-09T22:33:55Z",
		"body" : "Thanks for your answer Dom but I did, I also removed libpng, php56, cleaned up everything and reinstalled it but it didn't solve the problem.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 474
	},
	{
		"id" : 231578146,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-10T08:52:16Z",
		"body" : "Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 474
	},
	{
		"id" : 231578156,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-10T08:52:31Z",
		"body" : "Also post `which php`, thanks.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 474
	},
	{
		"id" : 234682159,
		"user" : {
			"login" : "BlakeBeus"
		},
		"created_at" : "2016-07-22T23:39:19Z",
		"body" : "I had this same issue.  I fixed it by running:\r\n\r\n`brew update`\r\n`brew update`\r\n`brew upgrade`\r\n`brew doctor`\r\n\r\nAnd fixing everything the doctor told me to fix.  I think the main thing that fixed it was the `brew upgrade` but might as well fix up everything else.  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 474
	},
	{
		"id" : 234709127,
		"user" : {
			"login" : "ruffiem"
		},
		"created_at" : "2016-07-23T09:27:43Z",
		"body" : "I guess we can close the issue then ^^",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 474
	},
	{
		"id" : 242896064,
		"user" : {
			"login" : "halleytl"
		},
		"created_at" : "2016-08-27T04:52:42Z",
		"body" : "I fixed it by running\r\n`brew update\r\nbrew upgrade libpng\r\n`\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 474
	},
	{
		"id" : 231487162,
		"user" : {
			"login" : "gentlecat"
		},
		"created_at" : "2016-07-08T22:24:23Z",
		"body" : "Also see #385.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 476
	},
	{
		"id" : 231514047,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-09T04:16:38Z",
		"body" : "We should probably consider either nudging people towards `brew doctor` or reprinting the chown instruction from `brew doctor`. It's fair that in itself simply saying we can't write to the directory isn't particularly helpful.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 476
	},
	{
		"id" : 232766302,
		"user" : {
			"login" : "pookah-net"
		},
		"created_at" : "2016-07-14T19:23:55Z",
		"body" : "@gentlecat Thanks! I did look, but completely missed that one.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 476
	},
	{
		"id" : 231513702,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-09T04:06:47Z",
		"body" : "Yikes, I haven't seen this crop up for a while.\r\n\r\n`brew doctor` contains fix instructions, but if you can't execute `brew doctor` for some reason the answer is `sudo chmod +t /tmp` unless you've manually set a different `HOMEBREW_TEMP`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 477
	},
	{
		"id" : 231527683,
		"user" : {
			"login" : "zelsonia"
		},
		"created_at" : "2016-07-09T10:29:30Z",
		"body" : "Thank you very much for helping me resolve this issue. After use brew doctor,l also find other problem, `/usr/bin occurs before /usr/local/bin` and l found how to resolve it in http://stackoverflow.com/,but l can't find the page now,it say rewrite etc/paths,and list how to rewrite, l just copy it and didn't see if l have the directory. so when l `source ~/.bash_profile`, many commands l can't use , l found the problem is in the file etc/paths have one path is wrong.l modified this file,and restart computer or restart apache,or source etc/paths,source ~/.bash_profile, it isn't work. The wrong path also in the terminal.\r\n```\r\n-bash: /usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin: No such file or directory\r\n-bash: /usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin: No such file or directory\r\n-bash: /usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin: No such file or directory\r\n```\r\n\r\n`/usr/local/sbin ` this one\r\nIn etc/paths already not exists,l don't understand why still load it when open terminal.\r\nl'm sorry for my poor english, could you give me some suggestions?\r\n@DomT4 ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 477
	},
	{
		"id" : 231528319,
		"user" : {
			"login" : "zelsonia"
		},
		"created_at" : "2016-07-09T10:48:12Z",
		"body" : "```\r\necho $PATH\r\n/usr/local/bin:/usr/local/mysql/bin:.\r\n```\r\n\r\nthe first is set by  etc/profile\r\nthe second  is  set by ~/.bash_profile\r\nso all  in the etc/paths isn't work \r\n\r\netc/paths\r\n```\r\n/usr/local/bin\r\n/usr/bin\r\n/bin\r\n/usr/sbin\r\n/sbin\r\n\r\n```\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 477
	},
	{
		"id" : 231529367,
		"user" : {
			"login" : "zelsonia"
		},
		"created_at" : "2016-07-09T11:18:34Z",
		"body" : "l know how to resolve it! my bash_profile is wrong too,open it in terminal is different from open in the l don't know how to call it ,the txt editor,maybe.\r\nthank you again.~ ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 477
	},
	{
		"id" : 231578136,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-10T08:51:59Z",
		"body" : "Could you also create a homebrew-core PR using this (if any formula changes are needed) so we can see what that looks like? Thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 478
	},
	{
		"id" : 231581003,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-10T10:08:25Z",
		"body" : "> Could you also create a homebrew-core PR using this (if any formula changes are needed) so we can see what that looks like? \r\n\r\nI'm not sure what you mean. To see what this looks like all you need is to install formula which `head.downloader` is `VCSDownloadStrategy` with `--HEAD` flag.\r\nExamples:\r\n`ack` for `git`\r\n`disktype` for `cvs`\r\n`sdl_rtf` for `mercurial`\r\n\r\n\r\n`HEAD`-version upgrades are not touched in this PR in case this is what you mean. But I'm working on them and I hope PR with `HEAD`-upgrades will follow soon. You can see the progress in the original PR (#274)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 478
	},
	{
		"id" : 231606435,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-10T19:32:16Z",
		"body" : "I have left quite a few code comments, though nothing that looks like a major issue to me.\r\n\r\nWhile looking at the diff, I noticed that `Version.new` is sometimes used where it probably shouldn't be. Now that we have two different version classes and `Version.create` to hide this implementation detail, I wonder whether we should substitute **all** instances of `Version.new` in the Homebrew code base with `Version.create` (except for the implementation of `Version.create` itself).\r\n\r\nI personally think we should. How do others feel about this? My gut feeling is that if we leave things in a mixed state where we sometimes use `Version.new`, sometimes `HeadVersion.new`, and sometimes `Version.create`, we're bound to make mistakes and will be running into hard to debug issues soon.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 478
	},
	{
		"id" : 231733622,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-11T13:27:23Z",
		"body" : "@UniqMartin I was able to substitute everything as you suggested this way (I'm sure there is a way to do it easier):\r\n\r\n```bash\r\nfind . -type d \\( -path ./test/vendor -o -path ./os \\) -prune -o -name '*.rb' -exec  sed -i '' 's/HeadVersion.new/Version.create/g' {} ';'\r\nfind . -type d \\( -path ./test/vendor -o -path ./os \\) -prune -o -name '*.rb' -exec  sed -i '' 's/Version.new/Version.create/g' {} ';'\r\nfind . -type d \\( -path ./test/vendor -o -path ./os \\) -prune -o -name '*.rb' -exec  sed -i '' 's/PkgVersion.create/PkgVersion.new/g' {} ';'\r\nfind . -type d \\( -path ./test/vendor -o -path ./os \\) -prune -o -name '*.rb' -exec  sed -i '' 's/MacOS::Version.create/MacOS::Version.new/g' {} ';'\r\nfind . -type d \\( -path ./test/vendor -o -path ./os \\) -prune -o -name '*.rb' -exec  sed -i '' 's/OS::Mac::Version.create/OS::Mac::Version.new/g' {} ';'\r\n```\r\n\r\nBasically I substituted `Version.new` and `HeadVersion.new` with `Version.create` excluding `OS::Mac::Version.new`, stuff related to `os` and `Version.create` itself.\r\n\r\nRunning `brew tests` gave me only one failure, which was really my fault, because I called `start_with?` method on `val` but not on `val.to_str` inside `Version` constructor. The thing is that we don't need val to be a string, we only need it to respond to `to_str`.\r\n\r\n```\r\n  1) Failure:\r\nVersionTests#test_accepts_objects_responding_to_to_str [/usr/local/Library/Homebrew/version.rb:187]:\r\nunexpected invocation: #<Mock:0x7f96f42dfa18>.start_with?('HEAD')\r\nsatisfied expectations:\r\n- allowed any number of times, not yet invoked: #<Mock:0x7f96f42dfa18>.to_str(any_parameters)\r\n\r\n\r\n892 runs, 2210 assertions, 1 failures, 0 errors, 3 skips\r\n```\r\n\r\n[This is how `grep -R \"Version.new\" --exclude-dir=./test/vendor` looks like now](https://gist.github.com/vladshablinsky/2b51f8355204345f20d40a9a251f64d4) ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 478
	},
	{
		"id" : 232208503,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-12T23:06:16Z",
		"body" : "> I was able to substitute everything as you suggested this way (I'm sure there is a way to do it easier):\r\n\r\nI was thinking about some Perl-style regular expressions and some negative lookbehind to exclude unwanted prefixes, but didn't get very far, to be honest. I think your approach is fine and as long as you checked every changed line before adding them to your commit, things should be just fine. (I reviewed the relevant commit and haven't noticed any wrong substitutions.)\r\n\r\nI'm fairly happy with this PR as-is. How do other maintainers feel about this?\r\n\r\n(You could maybe squash the ‚Äúversion: call start_with? on String object‚Äù commit into the commit that added the modified line, but otherwise I'm happy with the commit structure, too.)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 478
	},
	{
		"id" : 233058213,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-15T20:12:37Z",
		"body" : "@vladshablinsky One last thing before we ship this, we need to update the cleanup logic to clean up old HEAD installation. I'm thinking:\r\n```diff\r\ndiff --git a/Library/Homebrew/formula.rb b/Library/Homebrew/formula.rb\r\nindex fa67ce9..d922384 100644\r\n--- a/Library/Homebrew/formula.rb\r\n+++ b/Library/Homebrew/formula.rb\r\n@@ -1517,7 +1517,11 @@ class Formula\r\n   def eligible_kegs_for_cleanup\r\n     eligible_for_cleanup = []\r\n     if installed?\r\n-      eligible_kegs = installed_kegs.select { |k| pkg_version > k.version }\r\n+      eligible_kegs = if head? && (head_prefix = latest_head_prefix)\r\n+        installed_kegs - [Keg.new(head_prefix)]\r\n+      else\r\n+        installed_kegs.select { |k| pkg_version > k.version }\r\n+      end\r\n       if eligible_kegs.any?\r\n         eligible_kegs.each do |keg|\r\n           if keg.linked?\r\n```\r\n\r\nWith `latest_head_prefix` from #274.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 478
	},
	{
		"id" : 233120617,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-16T08:45:37Z",
		"body" : "@vladshablinsky What do you think of cleanup I mentioned above? We need address that as well before shipping this PR.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 478
	},
	{
		"id" : 233120730,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-16T08:49:37Z",
		"body" : "> What do you think of cleanup I mentioned above? We need address that as well before shipping this PR.\r\n\r\nWorking on it.\r\n\r\nAlso, we need to make `PkgVersion#revision` public to add\r\n```ruby\r\n pn_pkgversion = PkgVersion.parse(pn.basename)\r\n pn_pkgversion.head? && pn_pkgversion.revision == revision\r\n```\r\nis it OK?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 478
	},
	{
		"id" : 233120811,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-16T08:52:13Z",
		"body" : "> we need to make PkgVersion#revision public\r\n\r\n:+1:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 478
	},
	{
		"id" : 233128439,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-16T12:37:44Z",
		"body" : "It seems everything is fixed according to the comments now. I also added/changed tests where necessary.\r\n\r\nWhile making last changes I thought that it probably would be handy to have `setup_tab_for_prefix` in `testing_env`, I can submit a PR with this change later if someone finds it useful.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 478
	},
	{
		"id" : 233128872,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-16T12:49:41Z",
		"body" : "Good work @vladshablinsky Thanks everyone.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 478
	},
	{
		"id" : 231546364,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-09T17:42:41Z",
		"body" : "> CC @UniqMartin @eirinikos\r\n\r\nInteresting that adding this line afterwards doesn't move the PR into the list of notifications one is participating in (in the GitHub web UI).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 479
	},
	{
		"id" : 231561289,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-09T23:23:35Z",
		"body" : "Thanks for taking a look and for this PR! I commented on a corner case, but otherwise it's looking good.\r\n\r\nUnfortunately, other parts of Homebrew also assume that `Tap#formula_dir` never changes during the lifetime of a tap and thus break if formulae are relocated within a tap. See issue #87 for details. Do you maybe see yourself tackling these as well? (Would be awesome, but I certainly don't expect you to.)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 480
	},
	{
		"id" : 233109075,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T05:20:32Z",
		"body" : "Merged in 4abdeb7b5eb06acb633a9ac12d7c681d736a5286. Thank you for this contribution to Homebrew, @jawshooah! :tada:\r\n\r\nSorry for the long delay! I'd be still interested in your answer to the following question:\r\n\r\n> Unfortunately, other parts of Homebrew also assume that `Tap#formula_dir` never changes during the lifetime of a tap and thus break if formulae are relocated within a tap. See issue #87 for details. Do you maybe see yourself tackling these as well?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 480
	},
	{
		"id" : 233213238,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-07-18T00:32:30Z",
		"body" : "@UniqMartin No worries! Sorry for the delay in getting back to you. I haven't looked too deeply into `FormulaVersions` but it seems like a proper fix might require a deep dive into Git plumbing commands. I'll see about giving it a shot later this evening, but I can't make any promises.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 480
	},
	{
		"id" : 231564349,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-10T00:57:33Z",
		"body" : ":+1:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 481
	},
	{
		"id" : 231578189,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-10T08:53:12Z",
		"body" : "One nit otherwise üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 481
	},
	{
		"id" : 233143789,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T18:19:17Z",
		"body" : "One advantage of the otherwise pretty useless previous output in `cmd/update.sh` was that it was shell-agnostic (as issue 528 just made me realize). :wink:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 481
	},
	{
		"id" : 233145513,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-16T18:58:31Z",
		"body" : "It's perhaps worth noting perhaps that we've historically said IRT to things like `fish` & other Bourne-incompatible shells that users are assumed to be familiar enough to translate bash/etc instructions to the necessary syntax.\r\n\r\nI very much like _(and occasionally use)_ `fish`, but I don't think it captures a level of popularity to merit us sprinkling alternative `fish`-compatible syntax everywhere.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 481
	},
	{
		"id" : 233146459,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T19:20:15Z",
		"body" : ":+1: The Gist of my comment in that other issue was basically saying (or trying to say) the same.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 481
	},
	{
		"id" : 231578199,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-10T08:53:33Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 482
	},
	{
		"id" : 231578225,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-10T08:54:27Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 483
	},
	{
		"id" : 231577631,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-10T08:39:43Z",
		"body" : "> READ THIS: https://git.io/brew-troubleshooting\r\n> If reporting this issue please do so at (not Homebrew/brew):\r\n> https://github.com/Homebrew/homebrew-core/issues\r\n> \r\n> Warning: You are using OS X 10.12.\r\n> We do not provide support for this pre-release version.\r\n> You may encounter build failures or other breakages.\r\n> Please create pull-requests instead of filing issues.\r\n\r\nClosing as you didn't seem to read any of that.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 484
	},
	{
		"id" : 231591197,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-10T14:15:03Z",
		"body" : "The file extension is already a strong hint and many tools assume Bash anyway when confronted with the ‚ÄúShell Script‚Äù file type. And it's easy enough to pass `--shell=bash` to `shellcheck`.\r\n\r\nI'm not a big fan of this because this creates the impression that this is a standalone script (it isn't) and next thing someone will propose to add executable permissions. See also 27b606d92871428cb08ad796ed97fba3384755ae and 6106ac903550ee323eb08a8abac02ce7c74c4a4d.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 485
	},
	{
		"id" : 231592104,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-10T14:34:29Z",
		"body" : "Ok, fair enough. Need to work out how to coax my editor into doing that.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 485
	},
	{
		"id" : 231593483,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-10T15:02:37Z",
		"body" : "Thanks! :heart:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 485
	},
	{
		"id" : 231592758,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-10T14:48:27Z",
		"body" : "While I'm generally in favor of this PR, I think in its current state it might contribute to the confusion when output related to `<repo2>` will appear under a heading that suggests it's still operating on `<repo1>`. It would be really nice if all verbose Git output related to a given directory/repository was grouped under a common heading that indicates this directory/repository.\r\n\r\nTo address this, I'd suggest to either move the added verbose output to the very top of the `pull` function or to add additional verbose output there. (Something like `Updating $DIR ...` will probably do.)\r\n\r\n(I once proposed something similar in Homebrew/legacy-homebrew#49905 but I guess it had a bad start as it was originally disabling parallelization‚Äîfor the sake of clearer debug output‚Äîand then was blocked by discussion about the structure of the output and implementation details of `ohai` et al. in Bash, that I also made part of the PR. Just wanted to mention this for some context and prior discussion.)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 486
	},
	{
		"id" : 231969405,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-12T08:14:06Z",
		"body" : "@UniqMartin Take a look now; have changed the approach somewhat.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 486
	},
	{
		"id" : 231996208,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-12T10:08:15Z",
		"body" : "Thanks for making this change; I'm a lot happier with the output! In fact I'm :+1: on the change as-is. (There's one suggestion in a code comment you might want to integrate beforehand.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 486
	},
	{
		"id" : 231596752,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-10T16:10:17Z",
		"body" : "Two minor remarks, but otherwise :+1:.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 487
	},
	{
		"id" : 231604881,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-10T18:58:47Z",
		"body" : "Agree with @UniqMartin's points. I think it's safe to completely remove `NonBinaryOsxfuseRequirement` and presumably the related Dependency => Requirement logic from `compat/requirements`? Otherwise, üëç.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 487
	},
	{
		"id" : 231654177,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-11T06:45:05Z",
		"body" : "> Agree with @UniqMartin's points. I think it's safe to completely remove NonBinaryOsxfuseRequirement and presumably the related Dependency => Requirement logic from compat/requirements? Otherwise, üëç.\r\n\r\nCan't yet as the formula relies on it and we'll need to merge this before the formula change (and can remove afters)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 487
	},
	{
		"id" : 231783278,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-11T16:12:46Z",
		"body" : "> Can't yet as the formula relies on it and we'll need to merge this before the formula change (and can remove afters)\r\n\r\nBleh. Yeah, forgot this. üëç.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 487
	},
	{
		"id" : 231589946,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-10T13:49:08Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 488
	},
	{
		"id" : 231598265,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-10T16:41:35Z",
		"body" : "Definitely a desirable change, though I have some comments about the implementation (some ignorable nit picking, but also more substantial comments that I'd like to see addressed).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 488
	},
	{
		"id" : 231604184,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-10T18:44:30Z",
		"body" : "Changes pushed.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 488
	},
	{
		"id" : 231606808,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-10T19:39:55Z",
		"body" : ":+1:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 488
	},
	{
		"id" : 231654944,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-11T06:51:01Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 489
	},
	{
		"id" : 231790459,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-11T16:37:48Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 489
	},
	{
		"id" : 231639925,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-11T04:30:11Z",
		"body" : "The canonical URL is http://brew.sh not https://brew.sh",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231640134,
		"user" : {
			"login" : "sammcj"
		},
		"created_at" : "2016-07-11T04:32:49Z",
		"body" : "@ilovezfs that's not fantastic, especially for a website that tells users to curl a command straight into bash...",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231640857,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-11T04:41:37Z",
		"body" : "We're aware that we do not have SSL certificates for the brew.sh domain.\r\n\r\nThe fact that you manually typed in https:// and then had your browser note that the content is in fact on GitHub and the GitHub site uses a GitHub certificate is not the same thing as brew.sh having an invalid certificate, sorry.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231640992,
		"user" : {
			"login" : "sammcj"
		},
		"created_at" : "2016-07-11T04:43:07Z",
		"body" : "I did not manually type it, that is your assumption.\r\n\r\nI was taken there as the top search result when using a search engine, also although not in this case browsers are starting to ship with the option to use SSL first.\r\n\r\nSecurity is especially important when dealing with a package manager, please take this seriously.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231641133,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-11T04:44:47Z",
		"body" : "What search engine has \"https://brew.sh\" as the top result? That sounds like a bug in that search engine.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231641389,
		"user" : {
			"login" : "sammcj"
		},
		"created_at" : "2016-07-11T04:47:59Z",
		"body" : "It doesn't sound like a bug, it sounds like good search engine behavior!\r\n\r\nDuckDuckGo\r\nChrome 52.0.2793.0\r\nOSX 10.11.5\r\n\r\nRegardless, as I said, this is a package manager, please consider security, especially when you're suggesting that it's a good idea that users curl straight to shell from the internet, if they don't use SSL anyone could MITM that link of yours and people could be infected with malware etc...",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231641554,
		"user" : {
			"login" : "sammcj"
		},
		"created_at" : "2016-07-11T04:49:49Z",
		"body" : "@MikeMcQuaid @UniqMartin - your thoughts on users curling straight from an unencrypted website to their shell?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231641606,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-11T04:50:27Z",
		"body" : "DuckDuckGo's top result is \"http://brew.sh/\" so it's your browser configuration.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231642437,
		"user" : {
			"login" : "sammcj"
		},
		"created_at" : "2016-07-11T04:59:23Z",
		"body" : "... so why not fix the broken SSL cert?\r\n\r\nAlso, why are you ignoring my comments about telling users to curl to shell straight from an unencrypted website?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231643460,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-11T05:10:57Z",
		"body" : "Yes, it would be nice if we had an SSL certificate for brew.sh. I understand that you'd like that to be the case. Feature request noted.\r\n\r\nThe fact remains, however, that the SSL certificate is not \"broken\" because there is no SSL certificate for brew.sh. The only reason you're seeing that is because *something* is coercing the URL to \"https://brew.sh\" which will then end up triggering GitHub to cough up a (valid) GitHub SSL certificate. The GitHub SSL certificate is not for the brew.sh domain, it's for the GitHub domain, and your browser then notes that the SSL certificate is not in fact for brew.sh, which is indeed true.\r\n\r\nSo again, the issue here is why is your browser ending up directing you to https://brew.sh",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231645625,
		"user" : {
			"login" : "sammcj"
		},
		"created_at" : "2016-07-11T05:32:24Z",
		"body" : "May I suggest that a warning is added to the website about curling blinding from websites to shell and perhaps providing users with the MD5/SHA sums of the downloaded file as some assurance that they haven't been compromised?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231646436,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-11T05:39:41Z",
		"body" : "We're using GitHub Pages for our website. This is a known limitation of GitHub Pages when used with a custom domain. See [this help article](https://help.github.com/articles/securing-your-github-pages-site-with-https/) for details. SSL certificates cost money and/or require paid hosting with SSL support. We don't have a steady income that would currently allow us to pay for that.\r\n\r\nThere's ongoing discussion in Homebrew/homebrew.github.io#98 and that issue also links to previous discussions for context. Please read (all of) this and then see whether you can help us improve the situation. Practical suggestions and pull requests are welcome, but ‚Äúspamming‚Äù this issue doesn't help resolve the problem‚Äîand yes, I agree that it is suboptimal that our website isn't served via HTTPS.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231647125,
		"user" : {
			"login" : "sammcj"
		},
		"created_at" : "2016-07-11T05:46:27Z",
		"body" : "Giving up, message regarding curling to shell clearly not taken on board.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231647201,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-11T05:47:22Z",
		"body" : "@sammcj posting a checksum for the install file doesn't sound unreasonable, though it would have to be updated every time there's a commit to https://github.com/Homebrew/install/\r\n\r\nNote that the URL being curl'd actually is indeed using https\r\n```\r\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\r\n```\r\n\r\nhttps://raw.githubusercontent.com/Homebrew/install/master/install is the GitHub raw content link for this file https://github.com/Homebrew/install/blob/master/install",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231647892,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-11T05:54:17Z",
		"body" : "If you don't trust <http://brew.sh/>, you can always get the instructions for the installer directly [from its repository](https://github.com/Homebrew/install) (see the README) or clone our GitHub repository (see [Alternative Installs](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Installation.md) for details).\r\n\r\nIf a website or some third party asks you to paste stuff into your terminal, you *always* have to be careful and understand what you are doing, no matter where you get that information from.\r\n\r\n> Giving up, message regarding curling to shell clearly not taken on board.\r\n\r\nWe didn't ignore this part of your issue and we're aware of the problem, as stated above. But we don't have a satisfying solution yet. If you can contribute to a solution, please do! But only complaining doesn't help get this resolved and unfortunately there's no such thing like ‚Äúsimply enabling HTTPS‚Äù ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231648404,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-11T05:58:37Z",
		"body" : "@UniqMartin I'm still curious how in the world it's ending up at https://brew.sh if he's not manually entering that and DuckDuckGo is correctly pointing to http://brew.sh. I can't reproduce the issue with Chrome or DuckDuckGo locally, though.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231648889,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-11T06:03:02Z",
		"body" : "@ilovezfs I suspect some browser plugin that alters the links locally. Maybe it's just checking whether the web server is responding at all to HTTPS requests and then gets fooled by GitHub Pages which in (my understanding) serve from the same web servers no matter if it's `*.github.io` or some custom domain.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231649093,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-11T06:05:00Z",
		"body" : "Yup, a browser plugin is my guess, too. It would be nice to know which one in case this comes up again (and so it can be reported to the plugin developer!), since that's pretty broken behavior.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231650931,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-11T06:20:13Z",
		"body" : "I agree. This information would be helpful to have.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231654512,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-11T06:47:42Z",
		"body" : "@sammcj Life tip: messages provided with a patronising tone will generally not be taken on board.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 490
	},
	{
		"id" : 231722149,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-11T12:38:13Z",
		"body" : "> Permission denied - /usr/local/bin/git (Errno::EACCES)\r\n\r\nThis is your issue.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 491
	},
	{
		"id" : 231722235,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-11T12:38:32Z",
		"body" : "You probably need to remove that file or fix permissions on it (and all of `/usr/local`)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 491
	},
	{
		"id" : 231725505,
		"user" : {
			"login" : "JBVeenstra"
		},
		"created_at" : "2016-07-11T12:53:06Z",
		"body" : "/usr/local/bin/git is a directory.\r\nand what are the right permissions for it? (and /usr/local)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 491
	},
	{
		"id" : 231731558,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-11T13:19:35Z",
		"body" : "If it's a directory you may want/need to remove it. CC @xu-cheng for thoughts on better handling this.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 491
	},
	{
		"id" : 231736071,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-11T13:37:12Z",
		"body" : "#493",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 491
	},
	{
		"id" : 231742236,
		"user" : {
			"login" : "JBVeenstra"
		},
		"created_at" : "2016-07-11T13:58:52Z",
		"body" : "I removed the directory /usr/local/bin/git \r\nthen ran the command \"brew update\"\r\nthat worked\r\ncommand \"brew doctor\"\r\nAll seems to be fine.\r\n\"brew install gnumeric\" is running now flawlessly\r\n\r\nThanks guys, you save my life (well, sort of)\r\n\r\nCheers,\r\nJB",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 491
	},
	{
		"id" : 231957128,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-12T07:15:27Z",
		"body" : "üëç really clear messaging\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 495
	},
	{
		"id" : 231958125,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-12T07:20:33Z",
		"body" : ":+1: Much better message and actually reflects the reality of our Ruby handling.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 495
	},
	{
		"id" : 231973185,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-12T08:31:17Z",
		"body" : "> I will add some explanation in later time.\r\n\r\nOk, üÜí. In the mean time: I definitely think we want/need to vendor Ruby but I'm much less convinced for Git (or Curl). I think we should lean on `brew install git` instead for a few reasons:\r\n- Git updates quite often and has had a few major security issues that require a quick turnaround. As a result I think we should have a single Git formula and binary package\r\n- Git (and particularly not a new Git) are not needed to install Git itself\r\n- We support installing from URLs e.g. `brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/master/Formula/git.rb`. If we want to improve this flow we could parse the tap name (e.g. org/repo) from this URL so the from-source Tab is correct.\r\n- Git is required to install Homebrew so by the stage someone would receive this: they already have Git installed. While we could tweak our install process to not require Git it feels like that's not necessarily advantageous given how much still relies on having Xcode and/or the CLT installed on our supported versions of OS X.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 497
	},
	{
		"id" : 232303325,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-13T09:23:14Z",
		"body" : "First of all, I think we should first acknowledge that in long term we want to make the core code, i.e. `Homebrew/brew`, to become cross-platform. Therefore, for git and curl, we should consider old systems like Tigerbrew and Linuxbrew. In fact, those systems are more likely to use vendor git and curl due to the fact git and curl are missing or serious outdated in those systems.\r\n\r\n> Git updates quite often and has had a few major security issues that require a quick turnaround. As a result I think we should have a single Git formula and binary package\r\n\r\nThis can also be applied to ruby because it's bundled with openssl. Since we have to vendor ruby anyway, the differential maintaining cost is less than the gain. Even more, vendor git and curl will never be used outside Homebrew.\r\n\r\n> We support installing from URLs e.g. brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/master/Formula/git.rb. If we want to improve this flow we could parse the tap name (e.g. org/repo) from this URL so the from-source Tab is correct.\r\n\r\nThis won't work for following reasons:\r\n* For old system like Tigerbrew and Linuxbrew, both git and curl have several hard dependencies. This renders `brew install url` unscalable. In comparison, vendor them as a single bundle is relative easier to handle.\r\n* On old systems, we have no choose but to use `curl --insecure` to download curl at least, due to  outdated curl and/or CA certs in those systems. If we use `vendor-install`, we can at least to guarantee the security by SHA256 checksum. While for `brew install URL`, there is no way to do it as the content of formula is changing all the time.\r\n\r\n> Git is required to install Homebrew so by the stage someone would receive this: they already have Git installed. While we could tweak our install process to not require Git it feels like that's not necessarily advantageous given how much still relies on having Xcode and/or the CLT installed on our supported versions of OS X.\r\n\r\nThis is not entirely true. [We still support to install Homebrew using curl instead of git](https://github.com/Homebrew/install/blob/master/install#L246-L251)\r\n\r\nBesides the reasons mentioned above, there is a more important issue. For approach like `brew install URL`, it will mean that Homebrew will depend on some files which can be unlinked during brew install/reinstall/upgrade. And in those cases, Homebrew will be likely broken. This issue becomes more severe, when git and curl actually depend on other formulae which can also be unlinked. For example, in Linuxbrew land, if you are using git and curl from Homebrew, `brew upgrade` will break horribly if any of git/curl/openssl get update. The only solution is to do manually `brew fetch` as well as careful sort the installation order. Deep down, it is a very bad idea to mix Homebrew's dependencies with tools depend on Homebrew to install. In comparison, vendor system offer a nice and clean boundary to avoid such loop dependencies. \r\n\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 497
	},
	{
		"id" : 232307607,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T09:42:33Z",
		"body" : "> First of all, I think we should first acknowledge that in long term we want to make the core code, i.e. Homebrew/brew, to become cross-platform. Therefore, for git and curl, we should consider old systems like Tigerbrew and Linuxbrew. In fact, those systems are more likely to use vendor git and curl due to the fact git and curl are missing or serious outdated in those systems.\r\n\r\nI don't think the core code being cross platform necessitates that we must provide portable, binary, vendored dependencies for each of these tools on each of these platforms. I think Ruby is a special case because it's required to run _any_ Homebrew/brew code and we've wanted to use Ruby 2 for a long time and it's the only way we can do so.\r\n\r\n> This can also be applied to ruby because it's bundled with openssl. Since we have to vendor ruby anyway, the differential maintaining cost is less than the gain. Even more, vendor git and curl will never be used outside Homebrew.\r\n\r\nRuby's OpenSSL is not used for downloads so it's not the same. Our vendored Ruby will not need to be updated on every (possibly any) OpenSSL update as a result.\r\n\r\n> This is not entirely true. We still support to install Homebrew using curl instead of git\r\n\r\nIn that case: why not install the Homebrew/homebrew-core tap in the same way? Then we can `brew install curl git` using checksums.\r\n\r\n> Deep down, it is a very bad idea to mix Homebrew's dependencies with tools depend on Homebrew to install. In comparison, vendor system offer a nice and clean boundary to avoid such loop dependencies.\r\n\r\nI don't agree. The vendor system (even once it's been documented/rolled out to users) adds a lot of maintenance overhead and process changes.\r\n\r\nRegardless: stepping aside for a minute: Homebrew/brew is not cross-platform yet and it's not being used by Tigerbrew. Linuxbrew requires you to `sudo apt-get install build-essential curl git python-setuptools ruby` to use Homebrew so there's other system-level dependencies there we're never going to provide. Linuxbrew is pretty far from using an unmodified Homebrew/brew. I think vendoring these just for versions of OS X we don't support is a mistake when they've been using the previous system fine. I'd like to see a clear user need for this  before we add the maintenance overhead and I'm really not seeing one yet.  Can you point to previously user-submitted issues in the past which have arisen from using e.g. `brew install git/curl` on older systems? Unless there's a sizeable number (or any) I'm not convinced this is solving a problem that exists.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 497
	},
	{
		"id" : 232329803,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-13T11:35:17Z",
		"body" : "> In that case: why not install the Homebrew/homebrew-core tap in the same way? Then we can brew install curl git using checksums.\r\n\r\nI explored this in https://github.com/Homebrew/brew/pull/36, which is way better than `brew fetch URL`. But it still fails to address other deps issue.\r\n\r\n> The vendor system (even once it's been documented/rolled out to users) adds a lot of maintenance overhead and process changes.\r\n\r\nI acknowledge it introduces some overhead. But comparing with existed overhead for vendor ruby,\r\nvendor git and curl won't add too much instead it will only solve more problems. \r\n\r\n> Linuxbrew requires you to sudo apt-get install build-essential curl git python-setuptools ruby\r\n\r\nAs far as from my daily usage, this has not been the case since Linuxbrew starts to do bottle. For now, Homeberw's hard deps are curl and git, in addition of Xcode/CLT if you cannot use bottle. Linuxbrew's hard deps are just curl, git, which makes it less deps than Homebrew. \r\n\r\n> Can you point to previously user-submitted issues in the past which have arisen from using e.g. brew install git/curl on older systems? \r\n\r\nWe can see plenty on Linuxbrew: \r\nhttps://github.com/Linuxbrew/linuxbrew/issues/883\r\nhttps://github.com/Linuxbrew/linuxbrew/issues/912\r\nhttps://github.com/Linuxbrew/linuxbrew/issues/832\r\nhttps://github.com/Linuxbrew/linuxbrew/issues/797\r\nhttps://github.com/Linuxbrew/brew/issues/47\r\n\r\ncc @sjackman and @mistydemeo Who should have more experience than me why Homebrew depends on curl and git formula is a bad idea.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 497
	},
	{
		"id" : 232339310,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T12:24:53Z",
		"body" : "> I explored this in #36, which is way better than brew fetch URL. But it still fails to address other deps issue.\r\n\r\nI'm OK with tapping the core tap using `curl` if we use that for this system.\r\n\r\n> I acknowledge it introduces some overhead. But comparing with existed overhead for vendor ruby,\r\n> vendor git and curl won't add too much instead it will only solve more problems.\r\n\r\nAs mentioned: vendored Git and Curl will need updated far more frequently.\r\n\r\n> We can see plenty on Linuxbrew:\r\n\r\nBut none on Homebrew, which is my point and it's unclear whether we would see the same given the linking differences on both platforms. I don't mind if Linuxbrew uses this vendor system to install their `curl` and `git` and even if their code is installed in Homebrew/brew once they are using an unpatched Homebrew/brew but I think we're a long way off that point now and I don't want to add the overhead to Homebrew when it's fixing a problem our users are currently having.\r\n\r\nIf you want to get us to that stage the best thing we can do is:\r\n- write documentation and tooling for the existing vendoring system for Ruby so we can ship it to users\r\n- fix `brew tests --generic`\r\n- work with Linuxbrew to get their patches into Homebrew/brew\r\n- work with Linuxbrew to see if this vendoring system makes sense for their Git/Curl usage and, if so, get this code into core just for Linuxbrew\r\n- once all the above is done and users have been using it for a while and the maintenance overhead is understood (e.g. there's been at least one Git or Curl security update): consider including this functionality into Homebrew",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 497
	},
	{
		"id" : 232348660,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-13T13:06:21Z",
		"body" : "> I'm OK with tapping the core tap using curl if we use that for this system.\r\n\r\nHowever, I have changed my mind on that. Using curl to tap core tap during Homebrew installation may make sense. But it's definitely a bad idea to do it automatically inside Homebrew. The reason is the same as `brew install URL`. We don't have any checksum to verify download file, especially we have to use `--insecure` on old systems.  It's a giant security hole.\r\n\r\n> As mentioned: vendored Git and Curl will need updated far more frequently.\r\n\r\nIf it's a just git and curl version update, in long term, we can in fact to make it to be done fully automatically. e.g. auto update `Homebrew/portable` based on formulae in `Homebrew/core`. So I still don't think the overhead is as large as you thought would be.\r\n\r\n> But none on Homebrew, which is my point\r\n\r\nThat's because even we ship vendor git now, it will still be mostly used in old systems like Tigerbrew and Linuxbrew. There is a survival basis here. The majority of normal Homebrew users will always use git and curl from Apple. Make no mistake. Vendor system is never intended to be used by everyone.\r\n\r\n>  it's unclear whether we would see the same given the linking differences on both platforms.\r\n\r\nEven without linking issue and assume git formula and curl formula are self contained(which are not true in reality), it would still be a bad idea. For example, users can always run `brew update` to fix any unexpected bug with vendor git, but won't do much so if it is required to install git formula at first place. The major differences between vendor system and formula are:\r\n* Vendor git and curl are always linked(even during update), while git and curl formula may be unlinked.\r\n* Bash is the only dependency to install vendor tools, while installing formula depends on whole Homebrew codebase and even compilers if bottle cannot be used.\r\n\r\n> If you want to get us to that stage the best thing we can do is:\r\n\r\nWe can of course do this, as from the starting point vendor git and curl is meant to be mostly used by Linuxbrew and old systems like Tigerbrew.  And they are not near urgent like Ruby does. But may I ask not to judge vendor as a bad idea for git and curl too soon?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 497
	},
	{
		"id" : 232354034,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T13:26:31Z",
		"body" : "> However, I have changed my mind on that. Using curl to tap core tap during Homebrew installation may make sense. But it's definitely a bad idea to do it automatically inside Homebrew. The reason is the same as brew install URL. We don't have any checksum to verify download file, especially we have to use --insecure on old systems. It's a giant security hole.\r\n\r\nI don't see a big difference between install and runtime but üëç to having less code in Homebrew itself.\r\n\r\n> If it's a just git and curl version update, in long term, we can in fact to make it to be done fully automatically. e.g. auto update Homebrew/portable based on formulae in Homebrew/core. So I still don't think the overhead is as large as you thought would be.\r\n\r\nIf you get everything setup and written so it's automatic I'll be a lot more üëç on this PR. I do think it needs done before this PR is merged, though. I still don't think the documentation or tooling is where is should be for the vendored Ruby and I think it's a shame we're focusing on this before that is done.\r\n\r\n> That's because even we ship vendor git now, it will still be mostly used in old systems like Tigerbrew and Linuxbrew. There is a survival basis here. The majority of normal Homebrew users will always use git and curl from Apple. Make no mistake. Vendor system is never intended to be used by everyone.\r\n\r\nIf it's not intended to be used on any Homebrew supported platforms: I'm not sure I understand why Homebrew maintainers are responsible for building and maintaining these formulae. Again, this is more arguments for it being at the bottom of the list I mentioned.\r\n\r\n> For example, users can always run brew update to fix any unexpected bug with vendor git, but won't do much so if it is required to install git formula at first place. The major differences between vendor system and formula are:\r\n> \r\n> Vendor git and curl are always linked(even during update), while git and curl formula may be unlinked.\r\n> Bash is the only dependency to install vendor tools, while installing formula depends on whole Homebrew codebase and even compilers if bottle cannot be used.\r\n\r\nSure, I understand the differences, I'm just (still) not convinced the trade-offs are worth it for the moment. Ruby was/is different because we can't have `brew update` just break Homebrew for anyone on <10.9 whereas those on older versions have a `curl` and `git` situation which, although not ideal, is working for them now. \r\n\r\n> We can of course do this, as from the starting point vendor git and curl is meant to be mostly used by Linuxbrew and old systems like Tigerbrew. And they are not near urgent like Ruby does. But may I ask not to judge vendor as a bad idea for git and curl too soon?\r\n\r\nIf it's not used by the vast majority of Homebrew users and Tigerbrew and Linuxbrew aren't using an unmodified Homebrew/brew: it's far too soon to be including this. \r\n\r\nAs an aside, Tigerbrew is currently not using Homebrew/brew at all and we don't have access to a 10.4 VM for testing. If you want us to better support Tigerbrew getting those things fixed first is another requirement before we can sensibly include these.\r\n\r\n-- \r\n\r\nIt's obviously up to you what you work on and when you work on it but I'll be a very strong üëé on merging this for Git or Curl for a long time and I've suggested in this issue a lot of things that are far higher priority (and actually blocking) this PR from being included. I don't want to monopolise conversation here but it does seem a bit premature to have this PR opened and definitely merged before more of those other things are addressed. ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 497
	},
	{
		"id" : 232361059,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-13T13:51:35Z",
		"body" : "> If it's not intended to be used on any Homebrew supported platforms:\r\n\r\nIt is not intended widely used by average Homebrew users rather than not be used at all. There is a difference here. For example, no Xcode/CLT configuration is the same that not intended to be widely used yet. \r\n\r\n>  Ruby was/is different because we can't have brew update just break Homebrew for anyone on <10.9 whereas those on older versions have a curl and git situation which, although not ideal, is working for them now.\r\n\r\nI have stated enough reasons. So I don't want to repeat again that in long term vendor is the best solution from stability and robustness respect. Why we want to force certain users to use unideal solution when there is a much better one. One of biggest reasons that I'm üëé on using formula to solve this problem is the fact it works terribly on Linuxbrew.\r\n\r\n> It's obviously up to you what you work on and when you work on it but I'll be a very strong üëé on merging this for Git or Curl for a long time and I've suggested in this issue a lot of things that are far higher priority (and actually blocking) this PR from being included. I don't want to monopolise conversation here but it does seem a bit premature to have this PR opened and definitely merged before more of those other things are addressed.\r\n\r\nI'm not suggesting to merge this immediately as it's labeled as WIP. And how a PR can be opened premature? I acknowledge there are much to do, which are what I'm actually working on, i.e, to make it perfection. But you are basically tell me not working on this and vendor is a bad idea without much consideration on its actual use context, which is very frustrated. ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 497
	},
	{
		"id" : 232366740,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T14:10:10Z",
		"body" : "> And how a PR can be opened premature?\r\n\r\nIf you're asking for review and discussion when there's other, blocking dependencies that do not have PRs.\r\n\r\n> But you are basically tell me not working on this\r\n\r\nI said I'm not and can't tell you what to work on but: yes, I think working on this right now is not sensible when there's other work that needs done before this can be included in any form.\r\n\r\n> and vendor is a bad idea without much consideration on its actual use context, which is very frustrated.\r\n\r\nI have considered it: you've just not convinced me that it's necessary for Homebrew users, particularly right now.\r\n\r\nIt's also frustrating to have things that are worked on, almost done and then neglected. Some examples: \r\n- HOMEBREW_SANDBOX is still opt-in, almost working for homebrew/core but hasn't been finished off\r\n- The [New dependency implementation milestone](https://github.com/Homebrew/legacy-homebrew/milestone/1) had https://github.com/Homebrew/legacy-homebrew/issues/42312 added to it but has no activity in a year\r\n- The vendored Ruby is still opt-in and lacking discussed documentation, a testing/roll-out plan and tooling. Arguably these should have all been done before it was merged but I wanted to try and compromise there (which may have been a mistake).\r\n\r\nI can't really understand why we're spending time discussing the pros and cons of the vendor system when it's still not been tested by our users in production.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 497
	},
	{
		"id" : 232370418,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-13T14:22:12Z",
		"body" : ">HOMEBREW_SANDBOX is still opt-in\r\n\r\nI think we're at the point where it should just be turned on now.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 497
	},
	{
		"id" : 232370938,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T14:23:53Z",
		"body" : "> I think we're at the point where it should just be turned on now.\r\n\r\nNeed to fix or boneyard at least these formulae https://github.com/Homebrew/homebrew-core/issues/342 and then enable it just for homebrew/core to start with.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 497
	},
	{
		"id" : 232371415,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-13T14:25:24Z",
		"body" : "> then enable it just for homebrew/core to start with.\r\n\r\nThere's something other than homebrew/core? :see_no_evil: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 497
	},
	{
		"id" : 238814876,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:33:11Z",
		"body" : "Closing this; it's marked \"do not merge\", \"in progress\" and has conflicts. I'd recommend an issue first to reach some consensus on how we want to implement this (if at all).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 497
	},
	{
		"id" : 232185170,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-07-12T21:20:40Z",
		"body" : "Yeah that's not good.\r\n\r\nIs it common practice for config scripts to dump the user's environment to a log file, or is this just ffmpeg being weird?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 499
	},
	{
		"id" : 232186442,
		"user" : {
			"login" : "mischnic"
		},
		"created_at" : "2016-07-12T21:25:25Z",
		"body" : "> Is it common practice for config scripts to dump the user's environment to a log file, or is this just ffmpeg being weird?\r\n\r\nconfigure just dumped all env-variables.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 499
	},
	{
		"id" : 232221351,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-13T00:27:19Z",
		"body" : "FWIW, although this is less than ideal & we should look at doing something about it the actual risk to end users _should be_ minimal here. We recommend creating a token with extremely minimal permissions for `HOMEBREW_GITHUB_API_TOKEN`.\r\n\r\nTheoretically the worst case scenario to it being dumped is someone using your API token to spam GitHub & you being blocked from making API calls for an hour, or if you've bumped the permissions to create gists they'd be able to programmatically create gists. Both could be annoying, but the actual risk should be minimal.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 499
	},
	{
		"id" : 232277117,
		"user" : {
			"login" : "mischnic"
		},
		"created_at" : "2016-07-13T07:25:45Z",
		"body" : "The worst case scenario is that you have to create a new API token each time the old one got into a gist.\r\n\r\nLike I **already said in my first post**, Github automatically revokes the old one. \r\n![bildschirmfoto 2016-07-13 um 09 22 53](https://cloud.githubusercontent.com/assets/4586894/16795043/811446fe-48db-11e6-943f-2320d0028164.png)\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 499
	},
	{
		"id" : 233175442,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-17T10:32:23Z",
		"body" : "We could try to delete `HOMEBREW_GITHUB_API_TOKEN` for build/postinstall/test.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 499
	},
	{
		"id" : 233187641,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-07-17T15:30:45Z",
		"body" : "What do folks think about introducing a `file:...` format for `*_API_TOKEN` and `*_KEY` environment variable values, which would allow you to specify a file that `brew` reads the token from as needed? This would keep actual token values out of the environment.\r\n\r\n```\r\nexport HOMEBREW_GITHUB_API_TOKEN=\"file:$HOME/.ssh/my_github_api_token.txt\"\r\nexport BINTRAY_KEY=\"file:$HOME/.ssh/my_bintray_key.txt\"\r\n```\r\n\r\nI've had this on my mind, since I like to keep plaintext passwords out of my environment.\r\n\r\nValid GitHub and Bintray tokens can't contain `:`, so this could be introduced without breaking any current uses, I think.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 499
	},
	{
		"id" : 233196797,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-17T18:39:15Z",
		"body" : "@apjanke üëé on that personally; I think having sensitive values in your environment is relatively common so we should feel the pain for now until we have a more general solution (i.e. remove all environment we don't need).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 499
	},
	{
		"id" : 233335726,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-18T13:57:14Z",
		"body" : ">I think having sensitive values in your environment is relatively common\r\n\r\nI think that's probably true, and so I'd consider this an upstream bug for ffmpeg that they're dumping the entire environment to a log without someone specifically asking the software to do that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 499
	},
	{
		"id" : 238814064,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:29:44Z",
		"body" : "Closing this as I consider it an `ffmpeg` issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 499
	},
	{
		"id" : 232296162,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T08:51:25Z",
		"body" : "Great work. I'm happy as-is but @UniqMartin may have other review.\r\n\r\n> These lines remain untested, though. Is it feasible to test a formula within the test suite? It looks like using Minitest assertions is not an option, because when doing so, I receive this error:\r\n> \r\n> undefined method `assertions' for #<Formulary::FormulaNamespace[...]::TestballCopy:[...]>\r\n\r\nI also saw this before. Any thoughts on that @uniqmartin?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 500
	},
	{
		"id" : 233083020,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-15T22:19:32Z",
		"body" : "Sorry, will provide a review as soon as possible (probably later tonight). Meanwhile, this PR could be rebased on top of an up-to-date `master` branch as the `/^testball/`-related changes already went in when #398 was merged and there's presently a merge conflict.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 500
	},
	{
		"id" : 237879927,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-05T15:22:43Z",
		"body" : "@BrewTestBot test this please",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 500
	},
	{
		"id" : 237886252,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-05T15:45:40Z",
		"body" : "Looks like one of the tests is failing (but I'm not sure why): https://bot.brew.sh/job/Brew%20Pull%20Requests/1190/version=yosemite/testReport/junit/brew-test-bot/yosemite/tests___no_compat/\r\n\r\nAll passing for you locally, I assume?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 500
	},
	{
		"id" : 237900703,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-05T16:43:08Z",
		"body" : "This failure is related to some of the work to make HEAD installations upgradable, thus @vladshablinsky might have some input. I suspect that the method that is trying to access `HeadVersion#commit` should properly check whether it is actually dealing with a HEAD version, particularly in cases where the installed formula version doesn't really match what is claimed in the argument list (`--HEAD` in this case).\r\n\r\nIndependently of this, there's also a problem in the test code added here in that it first installs a stable version of a formula and then tries to run `brew test --HEAD` which only really makes sense if the HEAD version was installed previously.\r\n\r\nThe failure can be observed with a simple `brew tests --only=integration_cmds/test_formula` if this branch is rebased/merged on top of an up-to-date `master`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 500
	},
	{
		"id" : 237952734,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-08-05T20:19:45Z",
		"body" : "Thanks for finding a bug @eirinikos, @UniqMartin and @MikeMcQuaid! Seems to be fixed in (https://github.com/Homebrew/brew/issues/644).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 500
	},
	{
		"id" : 238165105,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T07:50:44Z",
		"body" : "Thanks again @eirinikos! Tests were still failing but just for `brew cask list`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 500
	},
	{
		"id" : 232219656,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-13T00:15:44Z",
		"body" : "> Several lines remain untested, though. I haven't yet figured out a way to quit the IRB shell from within the test...\r\n\r\nShould be doable if you invoke `brew irb` (which with very minor modifications behaves just like plain `irb`‚Äîcheck out the man page of the latter) and provide a Ruby script file as an argument, e.g. this works for me locally:\r\n\r\n```console\r\n$ cat irb-test.rb\r\nputs \"Hello World!\"\r\nexit\r\n$ brew irb irb-test.rb\r\n==> Interactive Homebrew Shell\r\nExample commands available with: brew irb --examples\r\nirb-test.rb(main):001:0> puts \"Hello World!\"\r\nHello World!\r\n=> nil\r\nirb-test.rb(main):002:0> exit\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 501
	},
	{
		"id" : 232457992,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-07-13T19:16:03Z",
		"body" : "Wow! Thanks @UniqMartin, I didn't know that `irb` takes Ruby script files as arguments.\r\n\r\nI've written `irb-test.rb` to `HOMEBREW_CACHE` to take advantage of the existing `teardown` method. Does that make sense? Or would it be better to have the file live elsewhere (whether or not it's a path that's included in `teardown`)?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 501
	},
	{
		"id" : 232730956,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-14T17:15:38Z",
		"body" : "> Wow! Thanks @UniqMartin, I didn't know that `irb` takes Ruby script files as arguments.\r\n\r\nFunny thing is, I didn't know either. The only thing I knew was that it is possible to send commands to `irb` via a pipe or standard input, e.g. `echo exit | irb` or `irb < irb-test.rb`. Fortunately, `irb` has proper documentation and `brew irb` is just a very shallow wrapper for it.\r\n\r\n> I've written `irb-test.rb` to `HOMEBREW_CACHE` to take advantage of the existing `teardown` method. Does that make sense? Or would it be better to have the file live elsewhere (whether or not it's a path that's included in `teardown`)?\r\n\r\nIt's okay-ish to use `HOMEBREW_CACHE` for that, but this case makes me want to have a dedicated scratch space that will also be cleaned up on teardown and can be used for stuff, that doesn't really belong in any of the predefined `HOMEBREW_*` directories.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 501
	},
	{
		"id" : 232806286,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-07-14T22:04:31Z",
		"body" : "> It's okay-ish to use `HOMEBREW_CACHE` for that, but this case makes me want to have a dedicated scratch space that will also be cleaned up on teardown and can be used for stuff, that doesn't really belong in any of the predefined `HOMEBREW_*` directories.\r\n\r\nMakes sense. I've been meaning to follow-up with you about an [idea](https://github.com/Homebrew/brew/pull/439#issue-163567527) you'd mentioned in the last week or two -- nesting `HOMEBREW_TEMP` within `TEST_TMPDIR`. I mentioned this to @MikeMcQuaid and he said that nesting `HOMEBREW_TEMP` sounded like a good idea.\r\n\r\nMaybe this `irb-test.rb` file could go in there (once we have changed `test/lib/config.rb` to reflect the nesting)?\r\n\r\nI'm guessing that the definition for `HOMEBREW_TEMP` would become something like  `HOMEBREW_PREFIX.parent + \"temp\"`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 501
	},
	{
		"id" : 232880559,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-15T07:15:32Z",
		"body" : "> Makes sense. I've been meaning to follow-up with you about an idea you'd mentioned in the last week or two -- nesting HOMEBREW_TEMP within TEST_TMPDIR. I mentioned this to @MikeMcQuaid and he said that nesting HOMEBREW_TEMP sounded like a good idea.\r\n> \r\n> Maybe this irb-test.rb file could go in there (once we have changed test/lib/config.rb to reflect the nesting)?\r\n> \r\n> I'm guessing that the definition for HOMEBREW_TEMP would become something like HOMEBREW_PREFIX.parent + \"temp\".\r\n\r\nWas thinking the same thing. All sounds good to me üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 501
	},
	{
		"id" : 233070429,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-07-15T21:08:15Z",
		"body" : "Looks like it's not just a simple matter of:\r\n- removing [this line](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/test/lib/config.rb#L5) in `test/lib/config.rb`\r\n- adding `HOMEBREW_TEMP = HOMEBREW_PREFIX.parent+\"temp\"` to the end of the list of similar paths\r\n- making a simple modification to [this line](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/test/lib/config.rb#L8) in the definition for `TEST_TMPDIR` üòû \r\n\r\nIt seems like the redefinition of `TEST_TMPDIR` is what eludes me.\r\nMy attempts to modify `dir` to forgo `HOMEBREW_TEMP` and then running `brew tests` have led to a multitude of errors saying `No such file or directory` -- a total of 113 errors and 13 failures for the test suite. Looks like it has to do with how `mktmpdir` is defined, but I haven't found a way forward.\r\n\r\nAnother question -- I've tried leaving `HOMEBREW_TEMP` and `TEST_TMPDIR` intact and simply adding and using an arbitrary path like `HOMEBREW_SCRATCH = HOMEBREW_PREFIX.parent+\"scratch\"`.\r\n\r\nAdding `HOMEBREW_SCRATCH.children` to `paths_to_delete` in the `teardown` method does not prevent a file leak (`HOMEBREW_SCRATCH` itself needs to be added). What explains the fact that a directory like `HOMEBREW_CACHE` or `HOMEBREW_LOGS` can persist through the test suite (while `HOMEBREW_SCRATCH` cannot)?\r\n\r\nThanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 501
	},
	{
		"id" : 233079377,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-15T21:56:12Z",
		"body" : "> Looks like it's not just a simple matter of:\r\n> - removing [this line](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/test/lib/config.rb#L5) in `test/lib/config.rb`\r\n> - adding `HOMEBREW_TEMP = HOMEBREW_PREFIX.parent+\"temp\"` to the end of the list of similar paths\r\n> - making a simple modification to [this line](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/test/lib/config.rb#L8) in the definition for `TEST_TMPDIR` üòû \r\n>\r\n> It seems like the redefinition of `TEST_TMPDIR` is what eludes me.\r\nMy attempts to modify `dir` to forgo `HOMEBREW_TEMP` and then running `brew tests` have led to a multitude of errors saying `No such file or directory` -- a total of 113 errors and 13 failures for the test suite. Looks like it has to do with how `mktmpdir` is defined, but I haven't found a way forward.\r\n\r\nAll of the steps you've taken sound right to me, though of course I'm not 100% sure about the exact modifications you've made. Can you post the exact changes you've made when trying this? You could for example make those changes in a new separate branch, push it to your GitHub clone, and then link to the branch from here.\r\n\r\n> Another question -- I've tried leaving `HOMEBREW_TEMP` and `TEST_TMPDIR` intact and simply adding and using an arbitrary path like `HOMEBREW_SCRATCH = HOMEBREW_PREFIX.parent+\"scratch\"`.\r\n>\r\n> Adding `HOMEBREW_SCRATCH.children` to `paths_to_delete` in the `teardown` method does not prevent a file leak (`HOMEBREW_SCRATCH` itself needs to be added). What explains the fact that a directory like `HOMEBREW_CACHE` or `HOMEBREW_LOGS` can persist through the test suite (while `HOMEBREW_SCRATCH` cannot)?\r\n\r\nIt might be not immediately clear, but those directories are not mentioned in the leak report because they are created even before the ‚Äúbefore snapshot‚Äù that is used for comparison when checking for file leaks is created. To make `HOMEBREW_SCRATCH` work the same way, aside from what you already did, it would need to be created [in these lines in `testing_env.rb`](https://github.com/Homebrew/brew/blob/91d32e77adf743510f0873e9195b3fe0dc065efd/Library/Homebrew/test/testing_env.rb#L9-L10).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 501
	},
	{
		"id" : 233100810,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-07-16T01:23:25Z",
		"body" : "> Can you post the exact changes you've made when trying this? You could for example make those changes in a new separate branch, push it to your GitHub clone, and then link to the branch from here.\r\n\r\nYes! Thanks for the suggestion; that's exactly what I've done [here](https://github.com/eirinikos/brew/commit/a54f226b405115572655e63fd3870e06faea3b65). This commit replaces `HOMEBREW_TEMP` in the definition of `TEST_TMPDIR`, but I've had the same results when removing the second argument entirely -- i.e., `Dir.mktmpdir(\"homebrew_tests\")`. It's clear that neither method is the correct solution, which made me dread pushing \"bad code\" to this branch (something that seemed unavoidable earlier). üò¨ \r\n\r\n> \r\nIt might be not immediately clear, but those directories are not mentioned in the leak report because they are created even before the ‚Äúbefore snapshot‚Äù that is used for comparison when checking for file leaks is created. To make `HOMEBREW_SCRATCH` work the same way, aside from what you already did, it would need to be created [in these lines in `testing_env.rb`](https://github.com/Homebrew/brew/blob/91d32e77adf743510f0873e9195b3fe0dc065efd/Library/Homebrew/test/testing_env.rb#L9-L10).\r\n\r\nOh, right! I should have thought to inspect `testing_env.rb` for clues. Thanks again.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 501
	},
	{
		"id" : 233106231,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T03:49:36Z",
		"body" : "> Yes! Thanks for the suggestion; that's exactly what I've done [here](https://github.com/eirinikos/brew/commit/a54f226b405115572655e63fd3870e06faea3b65). This commit replaces `HOMEBREW_TEMP` in the definition of `TEST_TMPDIR`, but I've had the same results when removing the second argument entirely -- i.e., `Dir.mktmpdir(\"homebrew_tests\")`. It's clear that neither method is the correct solution, which made me dread pushing \"bad code\" to this branch (something that seemed unavoidable earlier). üò¨ \r\n\r\nThe problem here is twofold:\r\n\r\n1. One problem comes from the fact that the directory you're specifying for `HOMEBREW_TEMP` doesn't exist yet which confuses `Dir.mktmpdir` and friends and causes this alarming number of failures. The solution for this part is the same like for the scratch directory, i.e. create it in `testing_env.rb`. (This implies only deleting its children in `teardown`.)\r\n\r\n2. The other issue once the 1st part is addressed, is a bit more involved and is caused by historic limitations. Homebrew is using [UNIX domain sockets](https://en.wikipedia.org/wiki/Unix_domain_socket) internally and because `Dir.tmpdir` defaults to the contents of the `TMPDIR` environment variable (inspect it yourself by executing `echo \"$TMPDIR\"` in a terminal) and that paths happens to be quite long already, affixing the additional path components crosses this historic limit and causes error messages like ‚Äútoo long unix socket path‚Äù. The only real solution is to make the path shorter and this is achieved by using, e.g.,  `/tmp` as is done by Homebrew [during a regular (non-test) run](https://github.com/Homebrew/brew/blob/91d32e77adf743510f0873e9195b3fe0dc065efd/Library/Homebrew/config.rb#L35-L36).\r\n\r\nThis is basically your commit, but with my modifications on top (in case any of the above prose isn't sufficiently accurate/clear) and without the test added by you:\r\n\r\n```diff\r\ndiff --git i/Library/Homebrew/test/lib/config.rb w/Library/Homebrew/test/lib/config.rb\r\nindex 062bed33..5818aec4 100644\r\n--- i/Library/Homebrew/test/lib/config.rb\r\n+++ w/Library/Homebrew/test/lib/config.rb\r\n@@ -2,10 +2,9 @@ require \"tmpdir\"\r\n require \"pathname\"\r\n \r\n HOMEBREW_BREW_FILE = Pathname.new(ENV[\"HOMEBREW_BREW_FILE\"])\r\n-HOMEBREW_TEMP = Pathname.new(ENV[\"HOMEBREW_TEMP\"] || Dir.tmpdir)\r\n \r\n TEST_TMPDIR = ENV.fetch(\"HOMEBREW_TEST_TMPDIR\") { |k|\r\n-  dir = Dir.mktmpdir(\"homebrew_tests\", HOMEBREW_TEMP)\r\n+  dir = Dir.mktmpdir(\"homebrew-tests-\", ENV[\"HOMEBREW_TEMP\"] || \"/tmp\")\r\n   at_exit { FileUtils.remove_entry(dir) }\r\n   ENV[k] = dir\r\n }\r\n@@ -24,6 +23,7 @@ HOMEBREW_CACHE_FORMULA = HOMEBREW_PREFIX.parent+\"formula_cache\"\r\n HOMEBREW_LOCK_DIR      = HOMEBREW_PREFIX.parent+\"locks\"\r\n HOMEBREW_CELLAR        = HOMEBREW_PREFIX.parent+\"cellar\"\r\n HOMEBREW_LOGS          = HOMEBREW_PREFIX.parent+\"logs\"\r\n+HOMEBREW_TEMP          = HOMEBREW_PREFIX.parent+\"temp\"\r\n \r\n TESTBALL_SHA1 = \"be478fd8a80fe7f29196d6400326ac91dad68c37\"\r\n TESTBALL_SHA256 = \"91e3f7930c98d7ccfb288e115ed52d06b0e5bc16fec7dce8bdda86530027067b\"\r\ndiff --git i/Library/Homebrew/test/test_integration_cmds.rb w/Library/Homebrew/test/test_integration_cmds.rb\r\nindex c020deaf..07068019 100644\r\n--- i/Library/Homebrew/test/test_integration_cmds.rb\r\n+++ w/Library/Homebrew/test/test_integration_cmds.rb\r\n@@ -18,6 +18,7 @@ class IntegrationCommandTests < Homebrew::TestCase\r\n       HOMEBREW_CACHE.children,\r\n       HOMEBREW_LOCK_DIR.children,\r\n       HOMEBREW_LOGS.children,\r\n+      HOMEBREW_TEMP.children,\r\n       HOMEBREW_PREFIX/\"bin\",\r\n       HOMEBREW_PREFIX/\"share\",\r\n       HOMEBREW_PREFIX/\"opt\",\r\ndiff --git i/Library/Homebrew/test/testing_env.rb w/Library/Homebrew/test/testing_env.rb\r\nindex 214aa978..e55f3f14 100644\r\n--- i/Library/Homebrew/test/testing_env.rb\r\n+++ w/Library/Homebrew/test/testing_env.rb\r\n@@ -7,7 +7,7 @@ require \"formulary\"\r\n \r\n # Test environment setup\r\n (HOMEBREW_LIBRARY/\"Taps/homebrew/homebrew-core/Formula\").mkpath\r\n-%w[cache formula_cache locks cellar logs].each { |d| HOMEBREW_PREFIX.parent.join(d).mkpath }\r\n+%w[cache formula_cache locks cellar logs temp].each { |d| HOMEBREW_PREFIX.parent.join(d).mkpath }\r\n \r\n # Test fixtures and files can be found relative to this path\r\n TEST_DIRECTORY = File.dirname(File.expand_path(__FILE__))\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 501
	},
	{
		"id" : 233412924,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-07-18T18:18:28Z",
		"body" : "> One problem comes from the fact that the directory you're specifying for `HOMEBREW_TEMP` doesn't exist yet which confuses `Dir.mktmpdir` and friends and causes this alarming number of failures. The solution for this part is the same like for the scratch directory, i.e. create it in `testing_env.rb`. (This implies only deleting its children in `teardown`.)\r\n> \r\n> The other issue once the 1st part is addressed, is a bit more involved and is caused by historic limitations. Homebrew is using [UNIX domain sockets](https://en.wikipedia.org/wiki/Unix_domain_socket) internally and because `Dir.tmpdir` defaults to the contents of the `TMPDIR` environment variable (inspect it yourself by executing `echo \"$TMPDIR\"` in a terminal) and that paths happens to be quite long already, affixing the additional path components crosses this historic limit and causes error messages like ‚Äútoo long unix socket path‚Äù. The only real solution is to make the path shorter and this is achieved by using, e.g., `/tmp` as is done by Homebrew [during a regular (non-test) run](https://github.com/Homebrew/brew/blob/91d32e77adf743510f0873e9195b3fe0dc065efd/Library/Homebrew/config.rb#L35-L36).\r\n\r\nThanks @UniqMartin. üëç  Everything makes sense. I haven't worked with `Dir.tmpdir`, `Dir.mktmpdir`, or `$TMPDIR` very often, so this has been a good lesson. At some point I should also do some more reading on Unix domain sockets and the like (beyond what was in the Wikipedia article you linked).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 501
	},
	{
		"id" : 233482265,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-18T22:48:23Z",
		"body" : "I'm happy with the code as-is and I think it is ready to be merged. I have one thing I'd like you to ask, in the hopes of not asking too much. The thing is, we currently have two rather orthogonal changes in this PR and in a single commit:\r\n\r\n- Change how the temporary directory is setup and handled during the tests.\r\n- Addition of a test for `brew irb`.\r\n\r\nIt would be nice to have this reflected in two separate commits. If I'm asking too much, I'm happy to lend a helping hand in the chat or to do the split for you when merging the changes.\r\n\r\nTo give a practical example to motivate this: Let's assume we have overlooked some subtlety in how the redefinition of the temporary directory affects the test code and it's starting to act up. (Of course I'm always hoping for the best.) The easiest way to deal with such a situation, particularly if it becomes a pressing issue, is to revert the commit with the problematic changes (to bring them back later in revised form). If the `brew irb` changes were part of the same commit, they would also be reverted despite being perfectly fine and not the source of the problem.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 501
	},
	{
		"id" : 233672641,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-19T15:36:50Z",
		"body" : "Thanks one more time @eirinikos. Great work! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 501
	},
	{
		"id" : 232250352,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-13T03:57:33Z",
		"body" : "Are you sure your Homebrew is up-to-date? This smells very much like the problem fixed by https://github.com/Homebrew/brew/commit/bd4e24ae8f6db6ad6f0020352b0b8a15cb1c21e2. If it is up-to-date, can you provide a `brew config` & `brew doctor`? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 502
	},
	{
		"id" : 232251450,
		"user" : {
			"login" : "indianajohn"
		},
		"created_at" : "2016-07-13T04:07:04Z",
		"body" : "Homebrew was not up-to-date; that was probably the cause of my problems. I'll install Xcode tomorrow and report whether the problem persists.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 502
	},
	{
		"id" : 232296775,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T08:54:01Z",
		"body" : "Almost 100% sure this was fixed in https://github.com/Homebrew/brew/commit/bd4e24ae8f6db6ad6f0020352b0b8a15cb1c21e2. Sorry for the pain!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 502
	},
	{
		"id" : 232416611,
		"user" : {
			"login" : "indianajohn"
		},
		"created_at" : "2016-07-13T16:51:11Z",
		"body" : "Nope, thanks for the prompt fix.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 502
	},
	{
		"id" : 232297748,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T08:58:16Z",
		"body" : "Nice work. üëç if you've tested locally and when üíö ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 503
	},
	{
		"id" : 232328842,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T11:29:46Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 504
	},
	{
		"id" : 232340945,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T12:32:22Z",
		"body" : "CC @sjackman who may be interested in seeing how the generic layer is getting along.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 505
	},
	{
		"id" : 232341170,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-13T12:33:27Z",
		"body" : "@sjackman in case you missed before: all these are running without `MacOS` defined (which I realise Linuxbrew may want to keep defined for now to aid formulae porting but shows that this code is properly generic).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 505
	},
	{
		"id" : 232605769,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-14T08:53:07Z",
		"body" : "@BrewTestBot test this please",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 505
	},
	{
		"id" : 232622045,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-14T10:02:42Z",
		"body" : "As of this PR I've also fixed the bot so that it'll actually test the `test-bot` changes in a PR ‚ú® e.g. http://bot.brew.sh/job/Brew%20Pull%20Requests/983/version=el_capitan/testReport/brew-test-bot/el_capitan/tests___generic___only_integration_cmds___official_cmd_taps/",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 505
	},
	{
		"id" : 233494567,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-07-19T00:01:26Z",
		"body" : "Great. Thanks, Mike!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 505
	},
	{
		"id" : 242955810,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-08-28T04:36:33Z",
		"body" : "> So I guess wrt dirs: \"acceptable minimum\" = [Cellar, Library, opt, .git], and ideally if possible [Cellar, Library, opt], and in-my-dreams-but-unrealistically just [hb] or [hbrew] or [homebrew].\r\n\r\nCome to think of it, maybe we should tuck `HOMEBREW_PREFIX/opt`'s HB-related symlinks away in `HOMEBREW_REPOSITORY/opt`.  (That currently only affects people like me for whom REPOSITORY isn't /usr/local.)  I've never seen any non-HB stuff in it on my machine, and it's kind of weird to have it sitting out in HOMEBREW_PREFIX, especially since its name gives no indication of what it's for.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 506
	},
	{
		"id" : 232469141,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-13T19:59:42Z",
		"body" : "Try:\r\n```bash\r\ncd /usr/local/Library/Taps/homebrew/homebrew-core && git fetch && git reset --hard origin/master\r\n```\r\nNote: Will remove any custom changes you've made to formulae in `homebrew/core`, if you've made any.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 508
	},
	{
		"id" : 232477200,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-13T20:30:26Z",
		"body" : "@DomT4 The problem is the user isn't even able to tap that repository, so the path probably doesn't exist. All of the formulae pointed out in the error messages have in common that they have an `url` with `:using => :cvs`. Not really sure what is going on, but this smeels like a bug in some recent `brew` changes to me. Unfortunately, I cannot reproduce the problem locally.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 508
	},
	{
		"id" : 232482633,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-13T20:51:07Z",
		"body" : "> The problem is the user isn't even able to tap that repository, so the path probably doesn't exist.\r\n\r\nOops, I completely forgot Mike's changes around tap `readall` execution went in the other day. Stupid moment, sorry.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 508
	},
	{
		"id" : 232552342,
		"user" : {
			"login" : "vnagavarun"
		},
		"created_at" : "2016-07-14T04:14:01Z",
		"body" : "this is the error i am getting now\r\n\r\nAnushas-MacBook-Pro:bin varun$ cd /usr/local/Library/Taps/homebrew/homebrew-core && git fetch && git reset --hard origin/master\r\n-bash: cd: /usr/local/Library/Taps/homebrew/homebrew-core: No such file or directory\r\nAnushas-MacBook-Pro:bin varun$ ls -ltr /usr/local/Library/Taps/homebrew\r\nls: /usr/local/Library/Taps/homebrew: No such file or directory\r\nAnushas-MacBook-Pro:bin varun$ ls -ltr /usr/local/Library/Taps\r\nAnushas-MacBook-Pro:bin varun$\r\n\r\nso there is no directory called homebrew in taps",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 508
	},
	{
		"id" : 232576420,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-14T06:56:54Z",
		"body" : "Please paste your `brew config` output, thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 508
	},
	{
		"id" : 233145422,
		"user" : {
			"login" : "vnagavarun"
		},
		"created_at" : "2016-07-16T18:56:23Z",
		"body" : "Anushas-MacBook-Pro:bin varun$ brew config\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew\r\nHEAD: ed9bb449d1bfc837d46b2572e9ffc2a70b32f9de\r\nLast commit: 3 days ago\r\nCore tap: N/A\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: quad-core 64-bit ivybridge\r\nHomebrew Ruby: 1.8.7-p358\r\nClang: N/A\r\nGit: 1.8.4.2 => /usr/local/git/bin/git\r\nPerl: /usr/bin/perl\r\nPython: /usr/bin/python\r\nRuby: /usr/bin/ruby => /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby\r\nJava: 1.6.0_65-b14-462\r\nOS X: 10.7.5-x86_64\r\nXcode: N/A\r\nCLT: N/A\r\nX11: 2.6.5 => /usr/X11\r\nAnushas-MacBook-Pro:bin varun$ ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 508
	},
	{
		"id" : 233147776,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T19:49:18Z",
		"body" : "@vnagavarun Thanks, that contained crucial information! I think the bug should be fixed now. Can you `brew update`, try again installing `git`, and report back whether this worked?\r\n\r\nFor those interested: The bug was only affecting macOS prior to 10.9 and only if neither Xcode nor CLT was installed. More details in the commit message of ccb11935f612847145ffe95b3b70f23e621fd4aa. Crucial to understanding was [this line in `dependency_collector.rb`](https://github.com/Homebrew/brew/blob/ccb11935f612847145ffe95b3b70f23e621fd4aa/Library/Homebrew/dependency_collector.rb#L160) and the fact that CVS-using formulae were affected.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 508
	},
	{
		"id" : 233517765,
		"user" : {
			"login" : "vnagavarun"
		},
		"created_at" : "2016-07-19T03:01:27Z",
		"body" : "thanks a lot. it works now",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 508
	},
	{
		"id" : 232549636,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-14T03:46:42Z",
		"body" : "Does this reproduce for you consistently? I can't repro locally, so potentially a configuration or firewalling issue on your side if it does.\r\n\r\n```\r\n==> Downloading http://downloads.webmproject.org/releases/webp/libwebp-0.5.1.tar.gz\r\n/usr/bin/curl --fail --remote-time --location --user-agent Homebrew/0.9.9 (Macintosh; Intel Mac OS X 10.11.6) curl/7.43.0 http://downloads.webmproject.org/releases/webp/libwebp-0.5.1.tar.gz -C 0 -o /usr/local/var/homebrew/cache/webp-0.5.1.tar.gz.incomplete\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100 1183k  100 1183k    0     0   279k      0  0:00:04  0:00:04 --:--:--  279k\r\nDownloaded to: /usr/local/var/homebrew/cache/webp-0.5.1.tar.gz\r\nSHA256: 6ad66c6fcd60a023de20b6856b03da8c7d347269d76b1fd9c3287e8b5e8813df\r\n==> Verifying webp-0.5.1.tar.gz checksum\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 509
	},
	{
		"id" : 232596526,
		"user" : {
			"login" : "zhou9197"
		},
		"created_at" : "2016-07-14T08:18:58Z",
		"body" : "thanks",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 509
	},
	{
		"id" : 232845021,
		"user" : {
			"login" : "zhou9197"
		},
		"created_at" : "2016-07-15T02:29:21Z",
		"body" : "hi bro\r\nSorry to bother again, but I can not work it out.\r\nWith socks5 proxy, I CAN **download it through Safari**, but **failed via curl** which brew uses.\r\n\r\n10:07:47  [~]  curl www.google.com   \r\ncurl: (56) Recv failure: Connection reset by peer\r\n\r\n10:07:47  [~]  curl -I -s --socks5 127.0.0.1 www.google.com\r\nHTTP/1.1 200 OK\r\n...\r\n\r\n10:07:47  [~]  curl -I -s --socks5 127.0.0.1 http://downloads.webmproject.org/releases/webp/libwebp-0.5.1.tar.gz\r\nHTTP/1.1 404 Not Found\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Length: 1595\r\nDate: Fri, 15 Jul 2016 02:03:50 GMT\r\n\r\n10:07:47  [~]  curl -I www.google.com\r\ncurl: (56) Recv failure: Connection reset by peer\r\n\r\n10:07:47  [~]  export http_proxy=socks5://127.0.0.1:1080\r\n10:07:47  [~]  curl -I www.google.com\r\nHTTP/1.1 200 OK\r\n...\r\n\r\n10:07:47  [~]  curl -I http://downloads.webmproject.org/releases/webp/libwebp-0.5.1.tar.gz\r\nHTTP/1.1 404 Not Found\r\nContent-Type: text/html; charset=UTF-8\r\nContent-Length: 1595\r\nDate: Fri, 15 Jul 2016 02:06:09 GMT\r\n\r\nSo I downloaded the package with my browser and put it into [~/Library/Caches/Homebrew]. However, brew did not consider it as \"Already downloaded\" and started to download , which is not expected. Is there any methods to mark it as \"downloaded\"?\r\n\r\n10:07:47  [~/Library/Caches/Homebrew]  ls\r\nCasks                                        libwebp-0.5.1.tar.gz \r\n\r\nI will be very grateful if you could tell me what else can I do. Thanks a lot.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 509
	},
	{
		"id" : 232845458,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-15T02:33:04Z",
		"body" : "Are you located in China by any chance?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 509
	},
	{
		"id" : 232847539,
		"user" : {
			"login" : "zhou9197"
		},
		"created_at" : "2016-07-15T02:51:48Z",
		"body" : "yes",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 509
	},
	{
		"id" : 232951342,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-15T13:31:41Z",
		"body" : "Can you `brew update` & try `brew install webp` again? I've added a non-Google-hosted mirror.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 509
	},
	{
		"id" : 233214794,
		"user" : {
			"login" : "zhou9197"
		},
		"created_at" : "2016-07-18T01:07:06Z",
		"body" : "@DomT4  Thanks, it works. BTW, if there is any method that  USERS download the package and put it into the Cache folder and let brew do the INSTALLING JOB in case of DOWNLOADING FAILURE?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 509
	},
	{
		"id" : 233214955,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-18T01:10:22Z",
		"body" : "You can see how Homebrew expects a downloaded package to be named by doing:\r\n```bash\r\nbrew --cache webp -s\r\n```\r\nFor example, presuming you're building from source. If you're using a bottle instead of building from source you can drop the `-s` from that argument list. If you rename the fetched file to that expected name `brew` should find it okay.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 509
	},
	{
		"id" : 232586587,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-14T07:35:00Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 510
	},
	{
		"id" : 232654610,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-14T12:43:25Z",
		"body" : "This is currently intentional. What made you think `update --cleanup` would do this, out of interest?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 511
	},
	{
		"id" : 232663908,
		"user" : {
			"login" : "j0sh3rs"
		},
		"created_at" : "2016-07-14T13:23:50Z",
		"body" : "The similarity between `brew cleanup` and `update --cleanup` wording, mostly.  To me, those two suggest similar functions that can be paired together as a single command, should the user wish, to enable allow for one command that performs both functions.\r\n\r\nIf this is intentional, cool. I was making a false assumption that this was unexpected behavior.  Still, it'd be nice to be able to one line it :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 511
	},
	{
		"id" : 232665668,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-14T13:30:47Z",
		"body" : "`alias brew update-cleanup=\"brew update; brew cleanup\"` in your shell will do the trick for now. Longer-term we'll consider this but mostly I personally want to figure out a way to do this automatically.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 511
	},
	{
		"id" : 232719138,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-07-14T16:32:43Z",
		"body" : "I'm a little confused by this thread because the console snippet had invocations of `brew update` and `brew upgrade --all --cleanup` (note `upgrade`, not `update`), but all other references say `brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 511
	},
	{
		"id" : 234301331,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-21T16:04:29Z",
		"body" : "@xu-cheng Thoughts?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 513
	},
	{
		"id" : 234472116,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-22T07:17:40Z",
		"body" : ":+1: I will work on document and tools for vendor system, when I find some free time.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 513
	},
	{
		"id" : 236314685,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-29T23:02:08Z",
		"body" : "@xu-cheng Any ETA on this?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 513
	},
	{
		"id" : 236358961,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-30T10:54:49Z",
		"body" : "Sorry, but I may not be able to find much free time recently. ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 513
	},
	{
		"id" : 236855495,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-02T09:42:05Z",
		"body" : "I'm periodically seeing:\r\n```\r\n/usr/local/Library/Homebrew/brew.sh: line 259: /usr/local/Library/Homebrew/vendor/portable-ruby/current/bin/ruby: No such file or directory\r\n/usr/local/Library/Homebrew/brew.sh: line 259: exec: /usr/local/Library/Homebrew/vendor/portable-ruby/current/bin/ruby: cannot execute: No such file or directory\r\n```\r\non running e.g. `brew upgrade` when it tries to autoupdate. I haven't managed to pin down why this is happening yet but figured I'd note it as it'll be a blocker for this.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 513
	},
	{
		"id" : 237250376,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-03T14:20:04Z",
		"body" : "Would you mind to give some more detail info, such as what commands are you invoking? possible output with `--debug` flag.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 513
	},
	{
		"id" : 238173066,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T08:29:32Z",
		"body" : "> Would you mind to give some more detail info, such as what commands are you invoking? possible output with --debug flag.\r\n\r\nAs mentioned in Slack: I don't have any more detailed reproduction instructions. I've usually seen this with `brew upgrade` and I think it relates to auto-update in which case it should be safe to ship this before auto-update.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 513
	},
	{
		"id" : 238176015,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T08:43:48Z",
		"body" : "Reproduced: \r\n\r\n```\r\n$ brew install ack --debug\r\nChecking for Homebrew updates...\r\n/usr/local/Library/Homebrew/brew.sh: line 259: /usr/local/Library/Homebrew/vendor/portable-ruby/current/bin/ruby: No such file or directory\r\n/usr/local/Library/Homebrew/brew.sh: line 259: exec: /usr/local/Library/Homebrew/vendor/portable-ruby/current/bin/ruby: cannot execute: No such file or directory\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 513
	},
	{
		"id" : 238176139,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T08:44:28Z",
		"body" : "Works if I `export HOMEBREW_NO_AUTO_UPDATE=1`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 513
	},
	{
		"id" : 238326329,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-08T18:11:13Z",
		"body" : "I have located the bug but don't know how to fix it. This can happens whenever there is an uncommitted change in your local repo. When this happens, running `brew update` will invoke `git stash` ([codes](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cmd/update.sh#L219-L221)). Then it appears to be a git bug, you will see the vendor-ruby files will be wiped out.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 513
	},
	{
		"id" : 238352671,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-08T19:42:51Z",
		"body" : "I can confirm the observation. The problem is [this line in our `.gitignore`](https://github.com/Homebrew/brew/blob/c016aedaab3a5b10207eb05d6b53199e6fcdb761/.gitignore#L24). If it is changed to either of the following, the problem will disappear (tested with Git 2.7.4 for Xcode 7.3.1):\r\n\r\n```\r\n/Library/Homebrew/vendor/portable-ruby\r\n/Library/Homebrew/vendor/portable-ruby/\r\n```\r\n\r\nThe problem seems to be that the contents of the `portable-ruby` directory are ignored, but not the directory itself. That's fine as far as `git status` is concerned, but `git stash` seems to play by some different rules and cleans up this untracked but not ignored directory (and its contents).\r\n\r\nI also found this: http://blog.icefusion.co.uk/git-stash-can-delete-ignored-files-git-stash-u/",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 513
	},
	{
		"id" : 238370288,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T20:42:08Z",
		"body" : "> The problem is this line in our .gitignore. If it is changed to either of the following, the problem will disappear (tested with Git 2.7.4 for Xcode 7.3.1\r\n\r\nDone in c7ba1c6.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 513
	},
	{
		"id" : 238531826,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T11:59:51Z",
		"body" : "@xu-cheng I would be grateful if you could prioritise this PR over other open or WIP PRs as it is blocking other work (e.g. Ruby MachO being enabled). Additionally, can you provide an estimate of when this work will be done and this PR ready to ship or, alternatively, if you're too busy for the foreseeable future, let me know and I will see if I can find time to finish off your work for you.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 513
	},
	{
		"id" : 238970736,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T19:06:43Z",
		"body" : "> I will see if I can find time to finish off your work for you.\r\n\r\nI did this.\r\n\r\nI've added documentation here and am working on improving the homebrew/portable tap.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 513
	},
	{
		"id" : 238974781,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T19:20:11Z",
		"body" : "Have opened homebrew/portable PR in here: https://github.com/Homebrew/homebrew-portable/issues/4",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 513
	},
	{
		"id" : 240051256,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T09:25:32Z",
		"body" : "I've also disabled Ruby 1.8 on the Jenkins Mavericks bot.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 513
	},
	{
		"id" : 240143839,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-16T15:44:49Z",
		"body" : "Thanks for pushing this through @MikeMcQuaid. Going to significantly improve Homebrew's code hygiene over time.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 513
	},
	{
		"id" : 240416490,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-17T13:48:32Z",
		"body" : "Thanks for pushing this. I'm sorry to be absent as I was extreme busy last two weeks for other personal matters.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 513
	},
	{
		"id" : 240421705,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T14:06:21Z",
		"body" : "Thanks for working on it!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 513
	},
	{
		"id" : 233168309,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-17T06:53:04Z",
		"body" : "Yeah this is still pretty broken:\r\n```\r\niMac-TMP:Homebrew joe$ brew audit --strict vifm\r\nvifm:\r\n  * Formulae are required to declare all linked dependencies.\r\n    Please add all linked dependencies to the formula with:\r\n      depends_on \"atk\" => :linked\r\n      depends_on \"cairo\" => :linked\r\n      depends_on \"gdk-pixbuf\" => :linked\r\n      depends_on \"gettext\" => :linked\r\n      depends_on \"glib\" => :linked\r\n      depends_on \"pango\" => :linked\r\nError: 1 problem in 1 formula\r\n```\r\ntriggered by\r\n```\r\n  depends_on \"gtk+\" => :optional\r\n\r\n  if build.with? \"gtk+\"\r\n    depends_on \"pkg-config\" => :build\r\n    depends_on \"atk\" => :linked\r\n    depends_on \"cairo\" => :linked\r\n    depends_on \"gdk-pixbuf\" => :linked\r\n    depends_on \"gettext\" => :linked\r\n    depends_on \"glib\" => :linked\r\n    depends_on \"pango\" => :linked\r\n  end\r\n```\r\n\r\n>@DomT4 that would be a known issue due to the usage of if for deps declaration \r\n\r\n\"Known\" or not, it would be nice to at least have a plan of some kind for fixing it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 514
	},
	{
		"id" : 233175501,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-17T10:33:46Z",
		"body" : "@ilovezfs The only solution is to work on `option \"with-foo\" do ... end` DSL. As far as I'm aware no one is working on that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 514
	},
	{
		"id" : 233175608,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-17T10:36:11Z",
		"body" : "Although, it's possible to workaround it by rewriting `ARGV` during formula loading. However, that would be a short-term hack and won't solve everything.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 514
	},
	{
		"id" : 233175730,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-17T10:39:41Z",
		"body" : "The fact that you can explicitly follow the audit directions and still not be able to get the audit error to go away is going to be ... confusing I suspect, or people will just add the linked outside of the `if build.with?` which would be even worse. :see_no_evil: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 514
	},
	{
		"id" : 233175824,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-17T10:42:40Z",
		"body" : "Perhaps this particular audit check should be skipped if the local install receipt indicates something other than a default build.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 514
	},
	{
		"id" : 233175827,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-17T10:42:45Z",
		"body" : "@ilovezfs Well, FYI, this long term bug has caused much worse issues than just `audit` result. For example, it affects the some basic function of `FormulaInstaller`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 514
	},
	{
		"id" : 233175850,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-17T10:43:27Z",
		"body" : "Since CI will spit out the correct answer, I'm not sure why we'd tell people to run audit locally in the PR template if the output is known to be wrong.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 514
	},
	{
		"id" : 233231436,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-18T05:35:55Z",
		"body" : "@MikeMcQuaid This was @UniqMartin's response when I suggested something similar in another scenario https://github.com/Homebrew/homebrew-core/pull/2253#issuecomment-227665702\r\n\r\nNot sure if the same objections apply here or not.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 514
	},
	{
		"id" : 233488532,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-18T23:23:40Z",
		"body" : "@ilovezfs We already have audits that do that and as long as the overhead isn't too high I'm cool with it, personally.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 514
	},
	{
		"id" : 233123619,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-16T10:14:42Z",
		"body" : "An example where the formula version is detected correctly (from the `:tag` at the top) and the resource version is detected incorrectly from its URL and not corrected with an explicit version corresponding to the tag:\r\nhttps://github.com/Homebrew/homebrew-core/blob/8ab838a376610dffb1b4c86ab34a88dd54f7cb08/Formula/gitlab-ci-multi-runner.rb#L27-L31\r\n\r\nwhich means every version bump of the formula will result in a collision for `Library/Caches/Homebrew/gitlab-ci-multi-runner-86.64.tar.gz`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 517
	},
	{
		"id" : 233121580,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-16T09:14:46Z",
		"body" : "Updated.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 518
	},
	{
		"id" : 233139214,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T16:44:15Z",
		"body" : ":+1: with two minor comments that may or may not be addressed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 518
	},
	{
		"id" : 233182435,
		"user" : {
			"login" : "yatesco"
		},
		"created_at" : "2016-07-17T13:38:13Z",
		"body" : "This works for me. Might be worth pointing out that this needs to be run in `/usr/local/Library/Homebrew'",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 520
	},
	{
		"id" : 233182489,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-17T13:39:39Z",
		"body" : "It will work there, but the root of the repository is actually just `/usr/local`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 520
	},
	{
		"id" : 233122925,
		"user" : {
			"login" : "bjorke"
		},
		"created_at" : "2016-07-16T09:54:17Z",
		"body" : "Removing git is probably a bad idea, even if it's only Homebrew links.\r\n`git pull origin master` from the Homebrew directory seams like the best solution.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 522
	},
	{
		"id" : 233133585,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-16T14:44:34Z",
		"body" : "There's almost always a `git` on the system, at the very least in stub form, in `/usr/bin`. The one Homebrew installed for @alex was our's, which whilst being newer & with a greater optional feature set than the system's installation is generally safe to remove if you didn't intend to install or use it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 522
	},
	{
		"id" : 233212267,
		"user" : {
			"login" : "phaistos"
		},
		"created_at" : "2016-07-18T00:10:20Z",
		"body" : "Same behavior here, pulling in the homebrew directory worked for me as well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 522
	},
	{
		"id" : 234668345,
		"user" : {
			"login" : "clivethescott"
		},
		"created_at" : "2016-07-22T22:04:26Z",
		"body" : "Same issue here, a git pull solved the problem.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 522
	},
	{
		"id" : 234703540,
		"user" : {
			"login" : "jialongl"
		},
		"created_at" : "2016-07-23T06:57:47Z",
		"body" : "Thanks @alex , for saving me from cursing at the nonsense of enforcing installation of Homebrew's git.\r\nThank god this is a bug.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 522
	},
	{
		"id" : 234714393,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-23T11:54:48Z",
		"body" : "> Thank god this is a bug.\r\n\r\nYou can probably safely bet that Homebrew flat-out refusing to update ever again is never going to be a feature üòâ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 522
	},
	{
		"id" : 233065058,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-15T20:43:56Z",
		"body" : "You're not missing something but one of our GSoC students @vladshablinsky is working on fixing this this summer üòÄ ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 523
	},
	{
		"id" : 235019901,
		"user" : {
			"login" : "cmdcolin"
		},
		"created_at" : "2016-07-25T17:17:53Z",
		"body" : "Just ran into this. Would be a nice update!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 523
	},
	{
		"id" : 238814145,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:30:06Z",
		"body" : "@vladshablinsky has addressed this.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 523
	},
	{
		"id" : 233674746,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-19T15:43:18Z",
		"body" : "Looks good to me, but needs to be rebased, presumably because there's now a minor conflict with the changes introduced by #501 that I just merged.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 525
	},
	{
		"id" : 233717458,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-07-19T18:08:11Z",
		"body" : "Sure thing! Thanks.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 525
	},
	{
		"id" : 235298553,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-26T15:09:32Z",
		"body" : "Sorry for the long wait and thanks for your patience! Merged in 0be204aab5878284d8466b141a82d56a166abe7b since all comments have been addressed as far as I could tell. Many thanks @eirinikos!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 525
	},
	{
		"id" : 236337830,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-30T03:24:00Z",
		"body" : "Thanks again @eirinikos ‚ù§Ô∏è ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 525
	},
	{
		"id" : 233140336,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T17:07:05Z",
		"body" : "Thanks @retokromer for the help here!\r\n\r\n> Any idea what caused this?\r\n\r\nWe made a mistake during a refactoring that caused `brew update` to no longer find a valid Git installation. It was quickly fixed, but people who updated during that short period were stuck and needed to do the manual `git fetch` and `git reset` dance to get past this point.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 527
	},
	{
		"id" : 233143597,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T18:14:42Z",
		"body" : "We have a lot of similar output in many different places across all of Homebrew and all of it is written from the perspective of a `sh` (or compatible shell) user, which probably represents the majority of our users due to Bash being the default on macOS. I'm not sure how feasible it is for us to make all of this output context-sensitive and I'm not even sure if we have a reliable way to detect the user's shell. But let's leave this open and see how other maintainers feel about this ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 528
	},
	{
		"id" : 233145530,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-16T18:58:50Z",
		"body" : "Crossposting myself: https://github.com/Homebrew/brew/pull/481#issuecomment-233145513",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 528
	},
	{
		"id" : 233145585,
		"user" : {
			"login" : "MindTooth"
		},
		"created_at" : "2016-07-16T19:00:07Z",
		"body" : "@DomT4: Valid üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 528
	},
	{
		"id" : 233148351,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-07-16T20:02:30Z",
		"body" : "I agree with Martin and Dom's concerns here. I think we should probably stick with Bourne style shell snippets, and let non-`sh`-compatible users translate. It'd be a good amount of work, and we'd only be gaining a convenience, and for probably a small proportion of Homebrew users.\r\n\r\nWe could do the detection: that's already done when picking what shell configuration file (e.g. `~/.profile` or `~/.zshrc`) to tell users to edit in the caveats. (Though I don't think it's 100% reliable, and probably can't be, due to the variety of scenarios `brew` might be invoked under.)\r\n\r\nBut it'd be work, and would make the caveats less readable for developers and `sh` users. (If we did `fish`, we should probably include `tcsh`, `ksh`, and `zsh` as well, which might differ. And I don't think we have experts in `fish` or other shells besides `bash` and `zsh`.) And if we didn't get it 100% (for both shell detection reliability, and coverage of code snippets to be translated), then you still might have the odd case where the user gets presented with a snippet of shell code, and they have to wonder whether it's been correctly \"localized\" for their shell, or if it's defaulted back to `bash` and needs to be translated. So they'd have to examine the code for syntax clues anyway.\r\n\r\nSince most of the shell code examples out in the wild seem to be `sh`/`bash`, users of \"alternative\" shells like `fish` and `csh` are probably used to having to translate anyway; it's part of the price of admission. Seems like it would keep things simpler to do things that way in `brew`, too.\r\n\r\nAutomating the translation would make it easier and maintain readability. We could just do all the code snippets in bash and mark them up as shell code, and use a translation library to mechanically convert them to other shells. But that would require taking another vendored dependency, which we've pretty much tried to avoid.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 528
	},
	{
		"id" : 233144062,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-16T18:25:19Z",
		"body" : "I merged this as it's needed since I ship the HeadVersion change. (i.e. if opt link and LinkedKeg are broken, we need `installed_prefix` instead of `prefix` to locate the latest Head installation.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 529
	},
	{
		"id" : 233145224,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T18:51:44Z",
		"body" : "Sorry I hadn't taken the time to provide feedback on this earlier ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 529
	},
	{
		"id" : 233130875,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-16T13:40:32Z",
		"body" : "@MikeMcQuaid this fixes a regression introduced by a02be9eea204264ce48827ac365c8b53b986d66a\r\n\r\nBy the way, this is at least the second time this same thing has happened probably because the variable name is \"backwards.\"",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 530
	},
	{
		"id" : 233132587,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-16T14:21:34Z",
		"body" : "We probably should avoid to use `HOMEBREW_LIBRARY_PATH` at all, which is intended to refer to the ruby load path. \r\n\r\nAs it would be help for readability and avoid misunderstanding, if we only keep `HOMEBREW_LIBRARY` and remove `HOMEBREW_LIBRARY_PATH`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 530
	},
	{
		"id" : 233133291,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-16T14:37:22Z",
		"body" : "üëç to Xu's comment. Let's try to get this shipped out fairly quickly, leaving things like this broken for longer than discovered is extra pain for us & users.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 530
	},
	{
		"id" : 233133612,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-16T14:45:04Z",
		"body" : "PR refreshed.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 530
	},
	{
		"id" : 233134008,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-16T14:53:47Z",
		"body" : "LGTM. I personally wouldn't bother to wait for CI on this one, but up to you.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 530
	},
	{
		"id" : 233134812,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-16T15:10:46Z",
		"body" : "Ran test-bot locally, and it's fine of course",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 530
	},
	{
		"id" : 233141965,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T17:40:24Z",
		"body" : "Thanks for the fix! I agree that the similarity between `HOMEBREW_LIBRARY_PATH` and `HOMEBREW_LIBRARY` can cause confusion and thus lead to subtle bugs like these. I'm not sure we can eliminate the former completely, as `HOMEBREW_LIBRARY_PATH` and `HOMEBREW_LIBRARY/\"Homebrew\"` are very different things during `brew tests`. But we can at least try to find a better name.\r\n\r\nUnfortunately, `HOMEBREW_LOAD_PATH` is already taken and is a list of paths during testing, so cannot be used as a substitute for `HOMEBREW_LIBRARY_PATH`. Does `HOMEBREW_CODE_PATH` sound reasonable?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 530
	},
	{
		"id" : 233144985,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-16T18:46:51Z",
		"body" : "üò•I'm on it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 531
	},
	{
		"id" : 233146623,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-16T19:24:04Z",
		"body" : "The problem is in `update_commit`. When we install `pond` we go to `stage_deps` which triggers fetches in resources' downloaders and on each of these fetches we rewrite `last_commit` of the formula with the last commit of resource.\r\n\r\nWill fix ASAP.\r\n\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 531
	},
	{
		"id" : 233143208,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T18:05:35Z",
		"body" : "According to the documentation, `$?.exitstatus` should only be `nil` if `$?.exited?` is `false` (i.e. the child process is still running) which would be rather surprising at this point. To me this seems to be a more involved bug and I'd like to find out the root cause, if possible.\r\n\r\nDoes the failure reproducibly happen on every single invocation of `brew audit` or only sporadically? Can you tell me a bit more about your setup so that I can try to reproduce the problem? (I've never encountered this problem before.)\r\n\r\n> I'm betting my money on ruby version clash, I have several rubies managed with chruby\r\n\r\nHomebrew normally uses the system Ruby for running itself, even if there are other Rubies in PATH, thus this seems unlikely. Can you please provide your `brew config` output? Thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 532
	},
	{
		"id" : 233144088,
		"user" : {
			"login" : "shulima"
		},
		"created_at" : "2016-07-16T18:25:51Z",
		"body" : "Happy to cooperate!\r\n\r\nThe issue happens with every invocation. I'm positive it's something to do with the fact that I use chruby to switch between homebrew-installed ruby versions [1], because after switching to system ruby (`chruby system`) brew audit works fine. \r\n\r\nI believe `$?.exitstatus` can also be nil if the child was signaled (https://www.ruby-forum.com/topic/4402802), and I've seen segfaults before due to mismatched gems with native extensions (e.g. json).\r\n\r\nHere's brew config with my usual 2.2.5:\r\n\r\n```\r\n$ brew config\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: 008e8b7a1063a1160029d601cffdb57f7156dd1d\r\nLast commit: 60 minutes ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: d352c79b8213c1e8ebbf722c430a258f1e23f641\r\nCore tap last commit: 3 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: quad-core 64-bit haswell\r\nHomebrew Ruby: 2.0.0-p648\r\nClang: 7.3 build 703\r\nGit: 2.9.1 => /usr/local/bin/git\r\nPerl: /usr/bin/perl\r\nPython: /usr/local/bin/python => /usr/local/Cellar/python/2.7.12/Frameworks/Python.framework/Versions/2.7/bin/python2.7\r\nRuby: /usr/local/Cellar/ruby22/2.2.5/bin/ruby\r\nJava: 1.8.0_31, 1.6.0_65-b14-468\r\nOS X: 10.11.5-x86_64\r\nXcode: 7.3.1\r\nCLT: 7.3.1.0.1.1461711523\r\nX11: 2.7.9 => /opt/X11\r\n```\r\n\r\nAnd here's `brew config` after `chruby system`:\r\n```\r\n$ brew config\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: 008e8b7a1063a1160029d601cffdb57f7156dd1d\r\nLast commit: 63 minutes ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: d352c79b8213c1e8ebbf722c430a258f1e23f641\r\nCore tap last commit: 3 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: quad-core 64-bit haswell\r\nHomebrew Ruby: 2.0.0-p648\r\nClang: 7.3 build 703\r\nGit: 2.9.1 => /usr/local/bin/git\r\nPerl: /usr/bin/perl\r\nPython: /usr/local/bin/python => /usr/local/Cellar/python/2.7.12/Frameworks/Python.framework/Versions/2.7/bin/python2.7\r\nRuby: /usr/local/bin/ruby => /usr/local/Cellar/ruby/2.3.1/bin/ruby\r\nJava: 1.8.0_31, 1.6.0_65-b14-468\r\nOS X: 10.11.5-x86_64\r\nXcode: 7.3.1\r\nCLT: 7.3.1.0.1.1461711523\r\nX11: 2.7.9 => /opt/X11\r\n```\r\n\r\n[1] I've known for a while it wasn't a good idea, but I was too lazy to compile rubies with ruby-install. Until now.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 532
	},
	{
		"id" : 233146052,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T19:10:49Z",
		"body" : "Thanks, I'll take a closer look and see if I can reproduce this. If you're happy to experiment, would you mind starting a `brew irb` session and then running the following commands?\r\n\r\n```ruby\r\nHomebrew.install_gem_setup_path! \"rubocop\", \"0.41.2\"\r\nsafe_system \"rubocop\", \"ack\".f.path\r\nputs $?.inspect\r\nsafe_system \"rubocop\", \"zpython\".f.path\r\nputs $?.inspect\r\n```\r\n\r\nI'd be interested whether this causes any errors or whether this successfully runs RuboCop.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 532
	},
	{
		"id" : 233147143,
		"user" : {
			"login" : "shulima"
		},
		"created_at" : "2016-07-16T19:35:24Z",
		"body" : "Looks like I was on the right track with the segfault:\r\n\r\nhttps://gist.github.com/shulima/8e26ffcad90ba19cca0654be3c225902\r\n\r\nI switched to 2.0.0-p648 and gem-pristine'd rubocop -- that removed the crash and the problem.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 532
	},
	{
		"id" : 233148455,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T20:04:55Z",
		"body" : "> Looks like I was on the right track with the segfault:\r\n\r\nThanks! I'm more confident merging your fix (once you address my code comment) now that we have understood the underlying issue. You've got good instincts! `Utils.open_read_text`, that is used internally to invoke RuboCop and collect the results, unfortunately discards all output to `$stderr`, hence the cause was not immediately obvious.\r\n\r\n> I switched to 2.0.0-p648 and gem-pristine'd rubocop -- that removed the crash and the problem.\r\n\r\n:+1:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 532
	},
	{
		"id" : 233148953,
		"user" : {
			"login" : "shulima"
		},
		"created_at" : "2016-07-16T20:16:16Z",
		"body" : "Amended as requested.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 532
	},
	{
		"id" : 233150761,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T20:59:20Z",
		"body" : "Merged in b51283424321cb996d0a587e9a62a070d21f3342. Thank you for this contribution to Homebrew, @shulima! :tada: You rock!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 532
	},
	{
		"id" : 233143368,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T18:09:16Z",
		"body" : ":+1: Thanks for the quick fix and thanks for the explanation in Homebrew/homebrew-core#2987!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 533
	},
	{
		"id" : 233148724,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-16T20:11:12Z",
		"body" : "This is a quick fix for the bug.\r\n\r\ncc @xu-cheng @DomT4 \r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 534
	},
	{
		"id" : 233148786,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-16T20:12:28Z",
		"body" : "I think, this is a better way to fix it.\r\n\r\n```diff\r\ndiff --git a/Library/Homebrew/build.rb b/Library/Homebrew/build.rb\r\nindex 8915e94..f7a4543 100644\r\n--- a/Library/Homebrew/build.rb\r\n+++ b/Library/Homebrew/build.rb\r\n@@ -127,6 +127,7 @@ class Build\r\n         interactive_shell(formula)\r\n       else\r\n         formula.prefix.mkpath\r\n+        formula.head.lock_version! if formula.head\r\n \r\n         formula.install\r\n \r\ndiff --git a/Library/Homebrew/software_spec.rb b/Library/Homebrew/software_spec.rb\r\nindex b16a33c..0a6c848 100644\r\n--- a/Library/Homebrew/software_spec.rb\r\n+++ b/Library/Homebrew/software_spec.rb\r\n@@ -53,7 +53,7 @@ class SoftwareSpec\r\n     @resource.owner = self\r\n     resources.each_value do |r|\r\n       r.owner     = self\r\n-      r.version ||= version.dup\r\n+      r.version ||= version\r\n     end\r\n     patches.each { |p| p.owner = self }\r\n   end\r\n@@ -207,6 +207,10 @@ class HeadSoftwareSpec < SoftwareSpec\r\n     @resource.version = Version.create(\"HEAD\")\r\n   end\r\n \r\n+  def lock_version!\r\n+    version.lock!\r\n+  end\r\n+\r\n   def verify_download_integrity(_fn)\r\n     nil\r\n   end\r\ndiff --git a/Library/Homebrew/version.rb b/Library/Homebrew/version.rb\r\nindex 002bd53..cadd2c2 100644\r\n--- a/Library/Homebrew/version.rb\r\n+++ b/Library/Homebrew/version.rb\r\n@@ -401,7 +401,12 @@ class HeadVersion < Version\r\n     @commit = @version[/^HEAD-(.+)$/, 1]\r\n   end\r\n \r\n+  def lock!\r\n+    @locked = true\r\n+  end\r\n+\r\n   def update_commit(commit)\r\n+    return if @locked\r\n     @commit = commit\r\n     @version = if commit\r\n       \"HEAD-#{commit}\"\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 534
	},
	{
		"id" : 233149392,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T20:26:37Z",
		"body" : "I think the current fix in this PR makes more sense (in my opinion), as I believe every resource should have an independent `Version` instance and they shouldn't be influencing each other.\r\n\r\nIf this already fixes the issue (and doesn't introduce any new issues we're aware of), let's merge this now and discuss a possible refinement of the fix in a separate PR (where we have more time).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 534
	},
	{
		"id" : 233150437,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-16T20:51:43Z",
		"body" : "Thanks @xu-cheng @UniqMartin and @DomT4 ! And sorry for the bug. üòï",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 534
	},
	{
		"id" : 233150475,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-16T20:52:42Z",
		"body" : "Thanks for fixing this so quickly, @vladshablinsky!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 534
	},
	{
		"id" : 233151557,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-16T21:18:26Z",
		"body" : "This was an impressively quick PR; there's not that many in Homebrew I don't at least see before they get merged üòÑ. Looks good locally. Thank you @vladshablinsky! Appreciate the quick fix.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 534
	},
	{
		"id" : 233166723,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-17T05:52:44Z",
		"body" : "CC @vladshablinsky @xu-cheng ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 535
	},
	{
		"id" : 233169063,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-17T07:17:01Z",
		"body" : "Happens because we initialize `HeadSodtwareSpec`'s version with `Version.create(\"HEAD\")`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 535
	},
	{
		"id" : 233169736,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-17T07:39:20Z",
		"body" : "also affects brew audit's linkage test.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 535
	},
	{
		"id" : 233170893,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-17T08:17:19Z",
		"body" : "cc @xu-cheng @ilovezfs .",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 536
	},
	{
		"id" : 233171151,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-17T08:25:44Z",
		"body" : "As I explained in the above comment, this is an incorrect fix. \r\n\r\nWhat you really need to do is to update commit inside `ARGV.resolved_formulae` and `Formulary.from_keg`, that's the place the resolution logic lies in. Therefore, here is my thought of solution:\r\n```diff\r\ndiff --git a/Library/Homebrew/extend/ARGV.rb b/Library/Homebrew/extend/ARGV.rb\r\nindex beee470..2da6141 100644\r\n--- a/Library/Homebrew/extend/ARGV.rb\r\n+++ b/Library/Homebrew/extend/ARGV.rb\r\n@@ -32,6 +32,10 @@ module HomebrewArgvExtension\r\n           resolved_spec = spec(nil) || tab.spec\r\n           f.set_active_spec(resolved_spec) if f.send(resolved_spec)\r\n           f.build = tab\r\n+          if f.head? && tab.tabfile\r\n+            k = Keg.new(tab.tabfile.parent)\r\n+            f.version.update_commit(k.version.version.commit)\r\n+          end\r\n         end\r\n         f\r\n       else\r\ndiff --git a/Library/Homebrew/formulary.rb b/Library/Homebrew/formulary.rb\r\nindex 4254437..20f115f 100644\r\n--- a/Library/Homebrew/formulary.rb\r\n+++ b/Library/Homebrew/formulary.rb\r\n@@ -246,6 +246,7 @@ class Formulary\r\n       end\r\n     end\r\n     f.build = tab\r\n+    f.version.update_commit(keg.version.version.commit) if f.head?\r\n     f\r\n   end\r\n \r\ndiff --git a/Library/Homebrew/postinstall.rb b/Library/Homebrew/postinstall.rb\r\nindex 14e5781..0b6d8f6 100644\r\n--- a/Library/Homebrew/postinstall.rb\r\n+++ b/Library/Homebrew/postinstall.rb\r\n@@ -11,7 +11,7 @@ begin\r\n \r\n   trap(\"INT\", old_trap)\r\n \r\n-  formula = ARGV.formulae.first\r\n+  formula = ARGV.resolved_formulae.first\r\n   formula.extend(Debrew::Formula) if ARGV.debug?\r\n   formula.run_post_install\r\n rescue Exception => e\r\ndiff --git a/Library/Homebrew/test.rb b/Library/Homebrew/test.rb\r\nindex 796ce09..ffffa18 100644\r\n--- a/Library/Homebrew/test.rb\r\n+++ b/Library/Homebrew/test.rb\r\n@@ -19,7 +19,7 @@ begin\r\n \r\n   trap(\"INT\", old_trap)\r\n \r\n-  formula = ARGV.formulae.first\r\n+  formula = ARGV.resolved_formulae.first\r\n   formula.extend(Homebrew::Assertions)\r\n   formula.extend(Debrew::Formula) if ARGV.debug?\r\n \r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 536
	},
	{
		"id" : 233171330,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-17T08:30:50Z",
		"body" : "Agreed.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 536
	},
	{
		"id" : 238011834,
		"user" : {
			"login" : "mariusk"
		},
		"created_at" : "2016-08-06T08:01:19Z",
		"body" : "When I try to build emacs with --HEAD, the build fails with:\r\n````\r\nError: undefined method `commit' for #<Version:0x007fb931c24a10 @version=\"25.1-rc1\">\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/usr/local/Library/Homebrew/formulary.rb:249:in `from_keg'\r\n/usr/local/Library/Homebrew/formulary.rb:225:in `from_rack'\r\n/usr/local/Library/Homebrew/extend/ARGV.rb:43:in `block in resolved_formulae'\r\n/usr/local/Library/Homebrew/extend/ARGV.rb:27:in `map'\r\n/usr/local/Library/Homebrew/extend/ARGV.rb:27:in `resolved_formulae'\r\n/usr/local/Library/Homebrew/cmd/reinstall.rb:11:in `reinstall'\r\n/usr/local/Library/Homebrew/brew.rb:87:in `<main>'\r\n````\r\nI do not know much about homebrew internals, but by looking at this commit it seems ARGV.rb does a bit more before calling `update_commit` than formulary.rb, leading me to speculate that maybe some additional checks and updates are needed for formulary.rb as well (if I just comment out the line calling update_commit the build seems build fine)?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 536
	},
	{
		"id" : 238012261,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-06T08:14:40Z",
		"body" : "@mariusk I think you need to `brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 536
	},
	{
		"id" : 238012397,
		"user" : {
			"login" : "mariusk"
		},
		"created_at" : "2016-08-06T08:18:56Z",
		"body" : "I could have sworn I did it already, but now that I tested and rebuilt emacs it seems to work. Thanks, my bad!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 536
	},
	{
		"id" : 238012398,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T08:18:57Z",
		"body" : "> I think you need to `brew update`.\r\n\r\nHowever, if updating doesn't resolve this build failure, I suspect this is another manifestation of the bug that is about to be fixed in PR #644.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 536
	},
	{
		"id" : 238012825,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T08:32:34Z",
		"body" : "Yes, indeed. Now that #644 is merged, this should be fixed after a `brew update`. But prior to that, this sequence of commands would have triggered the failure:\r\n\r\n```console\r\n$ brew install emacs --without-librsvg --devel\r\n[‚Ä¶]\r\nüçµ   /opt/brewery/dummy/Cellar/emacs/25.1-rc1: 4,038 files, 97.6M, built in 3 minutes 6 seconds\r\n$ brew reinstall emacs --HEAD\r\nError: undefined method `commit' for #<Version:0x007fd3e32c5538 @version=\"25.1-rc1\">\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/opt/brewery/dummy/Library/Homebrew/formulary.rb:249:in `from_keg'\r\n/opt/brewery/dummy/Library/Homebrew/formulary.rb:225:in `from_rack'\r\n/opt/brewery/dummy/Library/Homebrew/extend/ARGV.rb:43:in `block in resolved_formulae'\r\n/opt/brewery/dummy/Library/Homebrew/extend/ARGV.rb:27:in `map'\r\n/opt/brewery/dummy/Library/Homebrew/extend/ARGV.rb:27:in `resolved_formulae'\r\n/opt/brewery/dummy/Library/Homebrew/cmd/reinstall.rb:11:in `reinstall'\r\n/opt/brewery/dummy/Library/Homebrew/brew.rb:87:in `<main>'\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 536
	},
	{
		"id" : 233197182,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-17T18:46:27Z",
		"body" : "Nice üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 537
	},
	{
		"id" : 233212601,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-18T00:17:44Z",
		"body" : ":+1: Great simplification here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 537
	},
	{
		"id" : 233196939,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-17T18:41:31Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 538
	},
	{
		"id" : 233212407,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-18T00:13:40Z",
		"body" : ":+1: apart from one minor suggestion.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 538
	},
	{
		"id" : 233212517,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-18T00:15:46Z",
		"body" : "*Note regarding the commit message/PR title:* It should be ‚ÄúLinkageChecker: simplify logic‚Äù (i.e. without a plural-s since ‚Äúlogic‚Äù doesn't have a plural).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 538
	},
	{
		"id" : 233182391,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-17T13:37:19Z",
		"body" : "You need to brew update. This was fixed.\r\nhttps://github.com/Homebrew/brew/commit/356018501b83364ac4f41aad26ca795c3b2fb8cb",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 539
	},
	{
		"id" : 233183570,
		"user" : {
			"login" : "andyli"
		},
		"created_at" : "2016-07-17T14:03:40Z",
		"body" : "But my build log shows that brew was upgraded to 092d471, which was the most recent commit as of writing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 539
	},
	{
		"id" : 233184241,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-17T14:20:26Z",
		"body" : "@andyli It looks like your problem may be here:\r\nhttps://github.com/andyli/neko/blob/master/.travis.yml#L44-L49\r\n\r\nIt doesn't upgrade anything but cmake, and the path is hard coded in the pkg-config binary, so you need to at least upgrade pkg-config too, but I'd suggest just making it `brew upgrade` and see what else is outdated in that image.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 539
	},
	{
		"id" : 233185675,
		"user" : {
			"login" : "andyli"
		},
		"created_at" : "2016-07-17T14:51:17Z",
		"body" : "Doing `brew upgrade pkg-config` after `brew update` fixed it. Thanks!\r\nFYI, I tried `brew upgrade` too, which worked, but it takes too long in TravisCI.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 539
	},
	{
		"id" : 233185730,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-17T14:52:38Z",
		"body" : "@andyli that's great! Glad you got it working.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 539
	},
	{
		"id" : 233187226,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-17T15:21:54Z",
		"body" : "we could probably do this:\r\n```diff\r\ndiff --git a/Library/Homebrew/extend/os/mac/formula_cellar_checks.rb b/Library/Homebrew/extend/os/mac/formula_cellar_checks.rb\r\nindex dd21559..de61fb5 100644\r\n--- a/Library/Homebrew/extend/os/mac/formula_cellar_checks.rb\r\n+++ b/Library/Homebrew/extend/os/mac/formula_cellar_checks.rb\r\n@@ -72,10 +72,11 @@ module FormulaCellarChecks\r\n     end\r\n \r\n     if checker.undeclared_deps?\r\n+      undeclared_deps = checker.undeclared_deps.map { |d| d.strip_prefix(\"#{formula.tap}/\") }\r\n       audit_check_output <<-EOS.undent\r\n         Formulae are required to declare all linked dependencies.\r\n         Please add all linked dependencies to the formula with:\r\n-          #{checker.undeclared_deps.map { |d| \"depends_on \\\"#{d}\\\" => :linked\"} * \"\\n          \"}\r\n+          #{undeclared_deps.map { |d| \"depends_on \\\"#{d}\\\" => :linked\"} * \"\\n          \"}\r\n       EOS\r\n     end\r\n   end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 540
	},
	{
		"id" : 233187632,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-17T15:30:36Z",
		"body" : "Should work but seems a tad indirect :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 540
	},
	{
		"id" : 233196819,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-17T18:39:35Z",
		"body" : "I think it's fine as-is but don't feel strongly either way.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 540
	},
	{
		"id" : 233230947,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-18T05:29:39Z",
		"body" : "@xu-cheng I'd ship it with the change you suggested. Contributors are already spontaneously manually intervening and editing out the tap prefixes, which is less than ideal CX (contributor experience).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 540
	},
	{
		"id" : 233333068,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-18T13:47:30Z",
		"body" : "As a reference point, in homebrew science, there's currently exactly one:\r\n```\r\nJosephs-MacBook-Pro:homebrew-science joe$ ag 'homebrew/science'|grep dep\r\ngmtk.rb:13:  depends_on \"homebrew/science/hdf5\" => :optional\r\n```\r\n\r\nI don't think it makes sense to foist a new convention on them unless it's actually a new policy we're applying everywhere for all dependencies not in core.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 540
	},
	{
		"id" : 234461018,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-22T05:57:55Z",
		"body" : "This is already causing confusion:\r\nhttps://github.com/Homebrew/homebrew-science/pull/3836#discussion_r71804255\r\nhttps://github.com/Homebrew/homebrew-science/pull/3836#discussion_r71829316",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 540
	},
	{
		"id" : 234462398,
		"user" : {
			"login" : "schoeps"
		},
		"created_at" : "2016-07-22T06:09:08Z",
		"body" : "I one of the confused contributors :) I would have preferred if brew audit would not have suggested full paths. It looked odd to me but since I did not know all the consequences, I choose to just follow the advice of audit.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 540
	},
	{
		"id" : 234472549,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-22T07:20:24Z",
		"body" : "@ilovezfs Would do you mind to send a PR? I may not have too much free time recently to work on this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 540
	},
	{
		"id" : 234472710,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-22T07:21:19Z",
		"body" : "@xu-cheng Sure. Are you still happy with your proposal above?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 540
	},
	{
		"id" : 234472812,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-22T07:21:56Z",
		"body" : "> Are you still happy with your proposal above?\r\n\r\n:+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 540
	},
	{
		"id" : 234724004,
		"user" : {
			"login" : "dpo"
		},
		"created_at" : "2016-07-23T15:27:08Z",
		"body" : "I should fix `gmtk`. I personally feel that dependencies that are either in core or in the same tap shouldn't have to be fully qualified but I may be missing something. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 540
	},
	{
		"id" : 238814218,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:30:24Z",
		"body" : "We dropped `:linked`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 540
	},
	{
		"id" : 233459615,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-07-18T21:09:02Z",
		"body" : "This is great. Auditing formulae is a nice entry point for new developers. Do you want to mention branching off into any of the official taps (such as `homebrew/science`) to audit formulae, as there may be more low-hanging fruit there for new developers to fix?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 541
	},
	{
		"id" : 235461057,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T02:07:53Z",
		"body" : "@scpeters I think I'd rather stick with `homebrew/core` for now as I figure some folks may not be aware or other taps and it'll get too complicated trying to explain it here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 541
	},
	{
		"id" : 235461079,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T02:08:01Z",
		"body" : "Addressed all feedback. Let's merge and iterate!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 541
	},
	{
		"id" : 235462127,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T02:15:28Z",
		"body" : "Yay! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 541
	},
	{
		"id" : 233187611,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-17T15:30:09Z",
		"body" : "Can we use `opoo <<-EOS` to print multiline warnings instead of `puts`? Or at least, use `$stderr.puts`? Otherwise, you could break output like `--json=v1`.\r\n\r\nIn general speaking, I'm not sure we should show these warning messages. Because from user's respect, they will be come from nowhere for some random commands.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 542
	},
	{
		"id" : 233187891,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-17T15:36:19Z",
		"body" : "> In general speaking, I'm not sure we should show these warning messages. Because from user's respect, they will be come from nowhere for some random commands.\r\n\r\nMore specifically, most of these are formula DSL which will be executed during formula load time instead of runtime like `brew install`. As result, these warnings will be shown randomly with no clue which formula is causing this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 542
	},
	{
		"id" : 233194991,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-17T18:02:37Z",
		"body" : "> Can we use opoo <<-EOS to print multiline warnings instead of puts? Or at least, use $stderr.puts? Otherwise, you could break output like --json=v1.\r\n\r\n:ok:\r\n\r\n> In general speaking, I'm not sure we should show these warning messages. Because from user's respect, they will be come from nowhere for some random commands.\r\n\r\nWe already display them so I definitely think we should be at least making them consistent. I do think we should be showing these to normal end-users so they can report issues to upstreams rather than just guarding to `HOMEBREW_DEVELOPER` which even tap developers don't often use.\r\n\r\n> More specifically, most of these are formula DSL which will be executed during formula load time instead of runtime like brew install. As result, these warnings will be shown randomly with no clue which formula is causing this.\r\n\r\nI think we should still display them but definitely open to input on how to better display the messages.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 542
	},
	{
		"id" : 233212062,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-18T00:04:16Z",
		"body" : "All those `opoo`-`puts` pairs make me want to have a more specialized method for outputting these warnings in a more consistent way and with more information that helps to resolve the problem (and possibly, but not necessarily, an option to silence this advice).\r\n\r\n> Can we use `opoo <<-EOS` to print multiline warnings instead of `puts`? Or at least, use `$stderr.puts`? Otherwise, you could break output like `--json=v1`.\r\n>\r\n> More specifically, most of these are formula DSL which will be executed during formula load time instead of runtime like `brew install`. As result, these warnings will be shown randomly with no clue which formula is causing this.\r\n\r\nI somewhat agree. It would be nice if these warnings provided a back-trace (maybe guarded behind a check for `--debug`) and in cases where the origin is a formula, also printed the name/path of the offending formula (should be doable by walking the stack).\r\n\r\nIf there was a specialized method for these deprecation warnings instead of plain `opoo`-`puts` pairs, it could contain the necessary logic. (This would also be a lot more user-friendly.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 542
	},
	{
		"id" : 235462534,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T02:18:11Z",
		"body" : "> All those opoo-puts pairs make me want to have a more specialized method for outputting these warnings in a more consistent way\r\n\r\nI agree but: given this is already the existing style can we leave it as-is for now?\r\n\r\n> (and possibly, but not necessarily, an option to silence this advice).\r\n\r\nDefinitely üëé to silencing these; they should be annoying so they get fixed üòÄ.\r\n\r\n> It would be nice if these warnings provided a back-trace (maybe guarded behind a check for --debug) and in cases where the origin is a formula, also printed the name/path of the offending formula (should be doable by walking the stack).\r\n\r\nThis would be a good idea but I think it's probably out of the scope of this PR?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 542
	},
	{
		"id" : 235466671,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T02:46:15Z",
		"body" : ">> All those opoo-puts pairs make me want to have a more specialized method for outputting these warnings in a more consistent way\r\n>\r\n> I agree but: given this is already the existing style can we leave it as-is for now?\r\n\r\nIf you agree, who do you expect to tackle these, given there will be a lot more after this PR is merged if it is merged as-is? If something stinks, adding more of the same to the pile is consistent, but IMO far from great.\r\n\r\n>> It would be nice if these warnings provided a back-trace (maybe guarded behind a check for --debug) and in cases where the origin is a formula, also printed the name/path of the offending formula (should be doable by walking the stack).\r\n>\r\n> This would be a good idea but I think it's probably out of the scope of this PR?\r\n\r\nIf I could convince you of the first point (the deprecation warning helper), this would be a fairly simple addition and definitely not out of scope. But if I can't convince you (and I often fail to), then I agree that the existing style doesn't facilitate this kind of enhancement.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 542
	},
	{
		"id" : 235468173,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T02:57:27Z",
		"body" : "> If you agree, who do you expect to tackle these, given there will be a lot more after this PR is merged if it is merged as-is? If something stinks, adding more of the same to the pile is consistent, but IMO far from great.\r\n\r\nWhoever cares enough to do so (perhaps me, perhaps someone else).\r\n\r\n> the deprecation warning helper\r\n\r\nI'll take a look at this. I think stderr + backtrace is probably sufficient if I can figure out a way to do so without abusing exceptions.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 542
	},
	{
		"id" : 235473385,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T03:21:07Z",
		"body" : "> I'll take a look at this. I think stderr + backtrace is probably sufficient if I can figure out a way to do so without abusing exceptions.\r\n\r\nSomething like this will probably already do what you want (or what I suggested):\r\n\r\n```ruby\r\ndef opoo_deprecated(warning, replacement = nil)\r\n  replacement ||= \"There is no replacement.\"\r\n  opoo warning\r\n  $stderr.puts replacement\r\n  $stderr.puts \"Backtrace:\", caller if ARGV.debug?\r\nend\r\n```\r\n\r\nThus instead of\r\n\r\n```ruby\r\nopoo \"Calling Formula#fails_with_llvm in install is deprecated!\"\r\nputs \"Use Formula#fails_with instead.\"\r\n```\r\n\r\nyou would be doing\r\n\r\n```ruby\r\nopoo_deprecated \"Calling Formula#fails_with_llvm in install is deprecated!\",\r\n                \"Use Formula#fails_with instead.\"\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 542
	},
	{
		"id" : 235573830,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-27T12:45:33Z",
		"body" : "Also, if we want to use `puts`. Let's at least print to stderr to not break things like json output. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 542
	},
	{
		"id" : 235735087,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T22:01:03Z",
		"body" : "Have added a method to do this and used it for `fails_with_llvm` and `md5` so you can see the two different usage types and the output is pretty nice to me. Will hold off doing the others until at least one other person üëçs the approach.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 542
	},
	{
		"id" : 235758113,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-28T00:00:27Z",
		"body" : "> Have added a method to do this and used it for `fails_with_llvm` and `md5` so you can see the two different usage types and the output is pretty nice to me. Will hold off doing the others until at least one other person üëçs the approach.\r\n\r\n`odeprecated` feels a bit over-engineered to me (if I compare it with my original sketch), but that's something I can deal with. It gets the job done and has a reasonable interface. Everything else can be tweaked afterwards, if necessary. Thus count that as a :+1: for the approach.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 542
	},
	{
		"id" : 236314566,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-29T23:01:25Z",
		"body" : "Have updated to use an exception and updates all the call sites.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 542
	},
	{
		"id" : 233194867,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-17T18:00:03Z",
		"body" : "Something odd going on with CI here but would welcome üëÄ for review anyway.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 543
	},
	{
		"id" : 235473097,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T03:19:36Z",
		"body" : "üíö now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 543
	},
	{
		"id" : 235477863,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T03:56:55Z",
		"body" : "(the test issues were fixed by https://github.com/Homebrew/brew/commit/4174bf147c50dc09b46820562a77ce2522020504)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 543
	},
	{
		"id" : 234320540,
		"user" : {
			"login" : "jwhite007"
		},
		"created_at" : "2016-07-21T17:13:25Z",
		"body" : "Mike,\r\n\r\nThanks for your response. I figured that it was probably intentional. It appears that maintainer of the tap fixed the issue.\r\n\r\nCheers,\r\nJames",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 544
	},
	{
		"id" : 233209989,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-17T23:16:21Z",
		"body" : "Can you try:\r\n```\r\ncurl -L -v https://raw.githubusercontent.com/Homebrew/install/master/install\r\n```\r\nAnd see if it's more obvious there where the breakage is?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 545
	},
	{
		"id" : 233210536,
		"user" : {
			"login" : "anndroid9000"
		},
		"created_at" : "2016-07-17T23:28:56Z",
		"body" : "Sure thing, \r\n\r\n> $ curl -L -v https://raw.githubusercontent.com/Homebrew/install/master/install\r\n> *   Trying ::1...\r\n> * connect to ::1 port 3128 failed: Connection refused\r\n> *   Trying 127.0.0.1...\r\n> * connect to 127.0.0.1 port 3128 failed: Connection refused\r\n> * Failed to connect to localhost port 3128: Connection refused\r\n> * Closing connection 0\r\n\r\n> curl: (7) Failed to connect to localhost port 3128: Connection refused\r\n\r\nUnfortunately, I'm not sure what to make of this...",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 545
	},
	{
		"id" : 233210629,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-17T23:31:09Z",
		"body" : "Looks like you're rerouting GitHub to localhost, either to block it or because you're running a proxy. The latter seems likely given the output. Is the machine part of a corporate network/are you running a proxy locally?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 545
	},
	{
		"id" : 233930592,
		"user" : {
			"login" : "anndroid9000"
		},
		"created_at" : "2016-07-20T12:07:13Z",
		"body" : "I was running a local proxy without realizing. The issue has been resolved. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 545
	},
	{
		"id" : 233485898,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-18T23:08:24Z",
		"body" : "One comment otherwise üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 546
	},
	{
		"id" : 233485915,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-18T23:08:29Z",
		"body" : "And thanks for the fix üôá ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 546
	},
	{
		"id" : 233492545,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-18T23:48:32Z",
		"body" : "Updated to address your comment. Is this better now? (The diff is certainly smaller.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 546
	},
	{
		"id" : 233493952,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-18T23:57:14Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 546
	},
	{
		"id" : 233218181,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-18T02:10:36Z",
		"body" : "```bash\r\ncd $(brew --prefix) && git fetch && git reset --hard origin/master\r\n```\r\n\r\nWill only need to execute that once & you'll be okay afterwards. You can also `brew rm git` if you're happy with the system `git`; was never intentionally made mandatory.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 547
	},
	{
		"id" : 233218277,
		"user" : {
			"login" : "c256"
		},
		"created_at" : "2016-07-18T02:12:32Z",
		"body" : "Worked like a charm; thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 547
	},
	{
		"id" : 233492334,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-18T23:47:12Z",
		"body" : "> Therefore, is it possible to tweak Jenkins' settings so that login is optional, and permissions are asked for only when the logged-in user actively requests admin access?\r\n\r\nYes and mostly just because you asked very politely and explained it very well. Done!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 548
	},
	{
		"id" : 233493241,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-07-18T23:52:59Z",
		"body" : "Cool, thanks.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 548
	},
	{
		"id" : 233493275,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-18T23:53:10Z",
		"body" : "Cool, thanks for asking @zmwangx and thanks for making the change @MikeMcQuaid! :tada:\r\n\r\nEven for me this might come in handy at some point in time when I want to see what a regular contributor would be seeing instead of always having the unlimited view of an admin user.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 548
	},
	{
		"id" : 233245229,
		"user" : {
			"login" : "adamrothman"
		},
		"created_at" : "2016-07-18T06:42:26Z",
		"body" : "Me too. After `brew uninstall git`, `brew update` re-installs `git` and fails again with this error.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 549
	},
	{
		"id" : 233284713,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-18T09:34:40Z",
		"body" : "```bash\r\ncd $(brew --prefix) && git fetch && git reset --hard origin/master\r\n```\r\n\r\nWill only need to execute that once & you'll be okay afterwards. You can also `brew rm git` if you're happy with the system `git`; was never intentionally made mandatory.\r\n\r\nSorry about that!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 549
	},
	{
		"id" : 233302435,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-18T11:16:13Z",
		"body" : "It does seem to, to be fair. Can reproduce the hang on any formula I _know_ doesn't exist in an official Homebrew tap. For example, `brew install dogs`:\r\n\r\n```\r\nError: No available formula with the name \"dogs\"\r\n==> Searching for similarly named formulae...\r\nError: No similarly named formulae found.\r\n==> Searching taps...\r\n```\r\nHas currently been there for... 3 minutes & counting. Interesting.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 550
	},
	{
		"id" : 233302943,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-18T11:19:28Z",
		"body" : "Finally timed out in a little over 5 minutes:\r\n```\r\nError: No formulae found in taps.\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 550
	},
	{
		"id" : 233305346,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-18T11:34:34Z",
		"body" : "Can you try a few times? Wondering if the GitHub API is having a blip this morning rather than a more fundamental bug:\r\n```\r\nbrew install dogs  2.66s user 0.30s system 71% cpu 4.132 total\r\nbrew install dogs  2.51s user 0.29s system 71% cpu 3.941 total\r\nbrew install dogs  2.69s user 0.29s system 76% cpu 3.878 total\r\nbrew install dogs  2.68s user 0.31s system 6% cpu 48.102 total\r\nbrew install dogs  2.66s user 0.31s system 75% cpu 3.957 total\r\n```\r\n\r\nSeems like it could be:\r\n```\r\nError: No available formula with the name \"dogs\"\r\n==> Searching for similarly named formulae...\r\nError: No similarly named formulae found.\r\n==> Searching taps...\r\nError: undefined method `[]' for nil:NilClass\r\nbrew install dogs  2.62s user 0.33s system 0% cpu 5:46.61 total\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 550
	},
	{
		"id" : 233318751,
		"user" : {
			"login" : "sbocconi"
		},
		"created_at" : "2016-07-18T12:48:46Z",
		"body" : "solfege once existed, that might be the reason of the problem.\r\nI do not get any time-out, I need to Ctrl-C the program which I did after 66 min this time, but previously without timing even after a longer period.\r\n\r\ntime brew install solfege\r\nError: No available formula with the name \"solfege\" \r\n==> Searching for similarly named formulae...\r\nError: No similarly named formulae found.\r\n==> Searching taps...\r\n^C\r\n\r\nreal\t66m53.730s\r\nuser\t0m1.281s\r\nsys\t0m0.485s\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 550
	},
	{
		"id" : 233330588,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-18T13:38:19Z",
		"body" : "I think it's just a GitHub blip.\r\n```\r\nJosephs-MacBook-Pro:~ joe$ time brew install solfege\r\nError: No available formula with the name \"solfege\" \r\n==> Searching for similarly named formulae...\r\nError: No similarly named formulae found.\r\n==> Searching taps...\r\nError: No formulae found in taps.\r\n\r\nreal\t0m5.188s\r\nuser\t0m3.145s\r\nsys\t0m0.244s\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 550
	},
	{
		"id" : 233376098,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-18T16:09:00Z",
		"body" : "I'm also considering this a GitHub issue. The performance has been very inconsistent for me during the past 24 hours, mostly for the GitHub website, but wouldn't be surprised about related GitHub API woes.\r\n\r\nWe might want to time out the requests ourselves after some reasonable time frame to avoid the impression that `brew` is stuck. But might be not worth the effort given that most conditions will be handled just fine by `curl` and GitHub API issues aren't that frequent.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 550
	},
	{
		"id" : 233629937,
		"user" : {
			"login" : "sbocconi"
		},
		"created_at" : "2016-07-19T13:20:57Z",
		"body" : "Hi, the behaviour here is consistent, it always hangs, it must be something in my installation.\r\n\r\ntime brew install solfege\r\nError: No available formula with the name \"solfege\" \r\n==> Searching for similarly named formulae...\r\nError: No similarly named formulae found.\r\n==> Searching taps...\r\n^C\r\n\r\nreal\t1362m40.725s\r\nuser\t0m2.208s\r\nsys\t0m0.880s\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 550
	},
	{
		"id" : 233667744,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-19T15:22:05Z",
		"body" : "Does a completely vanilla:\r\n```bash\r\ncurl https://api.github.com/repos/Homebrew/homebrew-versions/git/trees/HEAD\\?recursive\\=1\r\n```\r\nWork for you, or does that hang as well?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 550
	},
	{
		"id" : 234096232,
		"user" : {
			"login" : "sbocconi"
		},
		"created_at" : "2016-07-20T21:56:34Z",
		"body" : "This works very fast:\r\nreal\t0m1.361s\r\nuser\t0m0.025s\r\nsys\t0m0.018s",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 550
	},
	{
		"id" : 238814292,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:30:44Z",
		"body" : "Is this still broken for you @sbocconi?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 550
	},
	{
		"id" : 238818172,
		"user" : {
			"login" : "sbocconi"
		},
		"created_at" : "2016-08-10T09:47:03Z",
		"body" : "Yes, but this happens also for other non-existing packages, I tried `time brew install dogs` and it is the same, maybe is my installation then?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 550
	},
	{
		"id" : 238821558,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T10:01:26Z",
		"body" : "Do you have a proxy server or difficulties connecting to GitHub itself?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 550
	},
	{
		"id" : 238840929,
		"user" : {
			"login" : "sbocconi"
		},
		"created_at" : "2016-08-10T11:35:02Z",
		"body" : "No I have a direct connection and in general no problem with github",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 550
	},
	{
		"id" : 238865993,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T13:27:33Z",
		"body" : "Hmm, no idea what's going on here then, sorry. Will close this out as there's not much more we can do. If you can dig into the code you may be able to figure it out and we'd accept PRs (and will help turn imperfect ones into shippable ones). Sorry!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 550
	},
	{
		"id" : 238866089,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T13:27:56Z",
		"body" : "Setting `HOMEBREW_NO_GITHUB_API` may also be a workaround for you.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 550
	},
	{
		"id" : 238875099,
		"user" : {
			"login" : "sbocconi"
		},
		"created_at" : "2016-08-10T13:59:21Z",
		"body" : "This works indeed:\r\n``export HOMEBREW_NO_GITHUB_API=true; time brew install dogs``\r\n\r\nError: No available formula with the name \"dogs\" \r\n==> Searching for similarly named formulae...\r\nError: No similarly named formulae found.\r\n==> Searching taps...\r\nError: No formulae found in taps.\r\n==> You haven't updated Homebrew in a while.\r\nA formula for dogs might have been added recently.\r\nRun `brew update` to get the latest Homebrew updates!\r\n\r\nreal\t0m0.500s\r\nuser\t0m0.362s\r\nsys\t0m0.152s",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 550
	},
	{
		"id" : 238880197,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-10T14:16:11Z",
		"body" : "```\r\nbrew update\r\nbrew config\r\nbrew doctor\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 550
	},
	{
		"id" : 233364838,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-18T15:32:53Z",
		"body" : "```sh\r\ncd \"$(brew --repository)\" && git fetch && git reset --hard origin/master\r\n```\r\n\r\nYou will only need to execute this once and you'll be okay afterwards. You can also `brew rm git` if you're happy with the system Git; it was never intentionally made mandatory.\r\n\r\nSorry about that! We've made a mistake during a refactoring and some people (who updated in the brief period before we realized our mistake) were stuck just like you are right now ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 551
	},
	{
		"id" : 233381040,
		"user" : {
			"login" : "chasingtheflow"
		},
		"created_at" : "2016-07-18T16:26:11Z",
		"body" : "That fixed it! Thanks for the help :-)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 551
	},
	{
		"id" : 233377082,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-18T16:12:18Z",
		"body" : "CC @UniqMartin RE: https://github.com/Homebrew/homebrew-core/pull/2940#issuecomment-233355225",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 552
	},
	{
		"id" : 233378568,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-18T16:17:33Z",
		"body" : ":+1: Haven't tested this personally, but I'd be very surprised if this breaks anything.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 552
	},
	{
		"id" : 233379334,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-18T16:20:18Z",
		"body" : "@UniqMartin Yup, tested it a bit:\r\n```\r\niMac-TMP:local joe$ brew irb\r\n==> Interactive Homebrew Shell\r\nExample commands available with: brew irb --examples\r\nirb(main):001:0> Utils::Inreplace.inreplace \"dog.txt\", \"hello\", \"world\"\r\n=> nil\r\nirb(main):002:0> File.read \"dog.txt\"\r\n=> \"world\\nyellau\\n\"\r\nirb(main):003:0> FileUtils.cp \"dog.txt.orig\", \"dog.txt\"\r\n=> nil\r\nirb(main):004:0> Utils::Inreplace.inreplace \"dog.txt\", \"hello\", \"world\", true\r\n=> nil\r\nirb(main):005:0> File.read \"dog.txt\"\r\n=> \"world\\nyellau\\n\"\r\nirb(main):006:0> FileUtils.cp \"dog.txt.orig\", \"dog.txt\"\r\n=> nil\r\nirb(main):007:0> Utils::Inreplace.inreplace \"dog.txt\", \"yellow\", \"world\"\r\nUtils::InreplaceError: inreplace failed\r\ndog.txt:\r\n  expected replacement of \"yellow\" with \"world\"\r\n\r\n\tfrom /usr/local/Library/Homebrew/utils/inreplace.rb:36:in `inreplace'\r\n\tfrom (irb):7\r\n\tfrom /usr/local/Library/Homebrew/brew.rb:87:in `<main>'\r\nirb(main):008:0> Utils::Inreplace.inreplace \"dog.txt\", \"yellow\", \"world\", true\r\nUtils::InreplaceError: inreplace failed\r\ndog.txt:\r\n  expected replacement of \"yellow\" with \"world\"\r\n\r\n\tfrom /usr/local/Library/Homebrew/utils/inreplace.rb:36:in `inreplace'\r\n\tfrom (irb):8\r\n\tfrom /usr/local/Library/Homebrew/brew.rb:87:in `<main>'\r\nirb(main):009:0> Utils::Inreplace.inreplace \"dog.txt\", \"yellow\", \"world\", false\r\n=> nil\r\nirb(main):010:0> File.read \"dog.txt\"\r\n=> \"hello\\nyellau\\n\"\r\nirb(main):011:0> Utils::Inreplace.inreplace \"dog.txt\", \"yellau\", \"yellow\", false\r\n=> nil\r\nirb(main):012:0> File.read \"dog.txt\"\r\n=> \"hello\\nyellow\\n\"\r\nirb(main):013:0> Utils::Inreplace.inreplace \"dog.txt\", \"yellow\", \"world\", true\r\n=> nil\r\nirb(main):014:0> Utils::Inreplace.inreplace \"dog.txt\", \"yellow\", \"world\"\r\nUtils::InreplaceError: inreplace failed\r\ndog.txt:\r\n  expected replacement of \"yellow\" with \"world\"\r\n\r\n\tfrom /usr/local/Library/Homebrew/utils/inreplace.rb:36:in `inreplace'\r\n\tfrom (irb):14\r\n\tfrom /usr/local/Library/Homebrew/brew.rb:87:in `<main>'\r\nirb(main):015:0> File.read \"dog.txt\"\r\n=> \"hello\\nworld\\n\"\r\nirb(main):016:0> Utils::Inreplace.inreplace \"dog.txt\", \"yellow\", \"world\", false\r\n=> nil\r\nirb(main):017:0> ^D\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 552
	},
	{
		"id" : 233442033,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-07-18T20:04:52Z",
		"body" : "See also #544",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 553
	},
	{
		"id" : 233449453,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-18T20:32:12Z",
		"body" : "This issue was moved to Homebrew/homebrew-science#3839",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 553
	},
	{
		"id" : 233671038,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-19T15:32:08Z",
		"body" : "Thanks again @eirinikos! It may seem like a minor change to you, but many small steps also accumulate with time and have quite an impact. üò∏",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 554
	},
	{
		"id" : 234104063,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-20T22:30:52Z",
		"body" : "Great work @eirinikos!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 554
	},
	{
		"id" : 234111789,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-20T23:11:06Z",
		"body" : "Vaguely concerned we may break assumptions of other scripts/tools but given 1.0 is approaching it makes sense to formalise our API so üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 234823559,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T02:34:00Z",
		"body" : "Cheers! I'll wait a bit to see if there's input from other maintainers and until a time when I will be able to monitor the issue queue a bit better to be able to react to unexpected grief this might cause despite my general optimism regarding this change.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 234829321,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-25T03:35:23Z",
		"body" : "I somewhat fear we've broken a fair bit already lately, albeit for good intentions & this may end up doing the same for a small element of people. We've got to pull the trigger at some point though, so I don't have an objection to getting it over with.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 234837201,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-25T04:47:45Z",
		"body" : "> I somewhat fear we've broken a fair bit already lately, albeit for good intentions & this may end up doing the same for a small element of people. We've got to pull the trigger at some point though, so I don't have an objection to getting it over with.\r\n\r\nMy view is that we're getting towards a 1.0.0 and at that point we'll just stop doing stuff like this. I'd like all @Homebrew/maintainers to think about what backwards incompatible changes we want to make for that point (as it'll be a very long time before we'll do so again)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 234837722,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-25T04:50:14Z",
		"body" : "I actually still find the Library/Formula symlink useful as a shortcut. I'm sure I can find an alternative solution, but I've been finding it a valuable \"feature\" in its own right.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 234841603,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T05:05:14Z",
		"body" : "> I actually still find the Library/Formula symlink useful as a shortcut. I'm sure I can find an alternative solution, but I've been finding it a valuable \"feature\" in its own right.\r\n\r\nWould you mind sharing how you use it? Maybe I can suggest some alternative that works without the symlink or compensate for the removal by tweaking some other part of Homebrew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 234842474,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-25T05:14:58Z",
		"body" : "I use it in two ways:\r\n1. with `rcd` which I define as follows:\r\n```\r\nrcd(){\r\n        target=\"$(mdutil -t \"$1\")\"\r\n        if [ $? -eq 0 ]\r\n        then\r\n                pushd \"$target\"\r\n        else\r\n                pushd \"$1\"\r\n        fi\r\n}\r\n```\r\n`realpath` from coreutils could be used instead of `mdutil -t` if you don't have Spotlight enabled.\r\nUsage:\r\n```\r\nbash-3.2$ rcd /usr/local/Library/Formula\r\nbash-3.2$ pwd\r\n/usr/local/Library/Taps/homebrew/homebrew-core/Formula\r\nbash-3.2$ \r\n```\r\n2. When doing `scp` from `10.0.1.15:/usr/local/Library/Formula` to /Users/joe/Developer/homebrew-core/Formula`:\r\nUsage:\r\n```\r\nbash-3.2$ pwd\r\n/Users/joe\r\nbash-3.2$ h\r\nrefs/heads/master\r\n/Users/joe/Developer/homebrew-core\r\nbash-3.2$ pwd\r\n/Users/joe/Developer/homebrew-core\r\nbash-3.2$ scp 10.0.1.15:/usr/local/Library/Formula/gitlab-ci-multi-runner.rb Formula\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 234852629,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T06:42:46Z",
		"body" : "> 1) with `rcd` which I define as follows:\r\n\r\nAssuming your primary goal is to end up in the Git repository and not necessarily in the `Formula` directory, incorporating `brew --repository homebrew/core` could help. E.g. `tcd` (tap cd):\r\n\r\n```sh\r\ntcd() {\r\n  local tap=\"$1\"\r\n  [[ \"$tap\" = */* ]] || tap=\"homebrew/$tap\"\r\n  pushd \"$(brew --repository \"$tap\")\"\r\n}\r\n\r\n# Usage:\r\ntcd core\r\ntcd uniqmartin/tools\r\n```\r\n\r\n> 2) When doing `scp` from `10.0.1.15:/usr/local/Library/Formula` to `/Users/joe/Developer/homebrew-core/Formula`:\r\n\r\n`brew ruby -e 'ARGV[0].f.path'` (requires homebrew/dev-tools) could prove useful as a building block, though having `brew formula FORMULA` similarly to the existing `brew command COMMAND` would probably be useful, too. E.g. `bfp` (brew formula path):\r\n\r\n```sh\r\nalias bfp='brew ruby -e \"puts ARGV[0].f.path\"'\r\n\r\n# Usage:\r\nbfp qt5\r\nbfp homebrew/science/octave\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 234854577,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-25T06:52:08Z",
		"body" : "Yeah, those look like good workarounds. The only quibble I have is that they require definition in the environment whereas the symlink is currently guaranteed to be there regardless of environment.\r\n\r\nFor the latter, I assume you're recommending doing this?\r\n```\r\nscp 10.0.1.15:`bfp qt5` Formula\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 234870167,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T07:43:41Z",
		"body" : "> For the latter, I assume you're recommending doing this?\r\n>\r\n> ```\r\n> scp 10.0.1.15:`bfp qt5` Formula\r\n> ```\r\n\r\n`bfp` was mainly meant as a demonstration of how this could be done, but yes, if Homebrew is installed into the same prefix on both machines, this should work. If not, this needs some more work. If I had a similar workflow to you, I would probably go one step further and wrap the `scp` invocation in a separate shell function or helper script that accepts a formula name.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 234871985,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-25T07:49:20Z",
		"body" : "What is the benefit of killing the symlink? Lengthening the path to the core formulae has always felt like a regression to me, and the symlink has been a semi-adequate redress, but I'm sure your workarounds will suffice if this change is actually necessary.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 234890102,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T08:43:40Z",
		"body" : "The longer path is the price of the core/formula split and handling homebrew/core like any other tap (with a few exceptions). Killing the symlinks isn't strictly necessary, but as I mentioned in my top comment it removes legacy cruft (otherwise some people/scripts will continue to make wrong assumptions about where formulae actually reside) and avoids symlinks that point outside of the repository and thus appear broken if this repository is checked out in isolation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 234914061,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-25T10:09:19Z",
		"body" : "We should brace ourselves for the amount of breakage this is going to cause for third parties, and the possibly resultant anger and frustration, as well as temporary support burden, but I think it's fine to :ship:.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 239743211,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-15T07:21:32Z",
		"body" : "1.0.0 is approaching us and we're pushing a few other similarly implicit API-breaking things. I think we should merge this before then and I'll write up the various big changes we've made.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 240360007,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T09:24:33Z",
		"body" : "This has been waiting for long enough without additional thoughts and I'd rather we break this a while before 1.0.0 rather than after so: üö¢ing.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 555
	},
	{
		"id" : 240584103,
		"user" : {
			"login" : "tkelman"
		},
		"created_at" : "2016-08-17T23:50:38Z",
		"body" : "> 1.0.0 is approaching us and we're pushing a few other similarly implicit API-breaking things. I think we should merge this before then and I'll write up the various big changes we've made.\r\n\r\nIs there a place third-parties can click subscribe or otherwise be informed of these before they happen?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 240597545,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-18T01:19:41Z",
		"body" : "This repo, essentially. Some stuff goes on the mailing list, some stuff goes on Twitter, but ultimately if you need to know day-in-day-out what Homebrew is doing with core code this repo is the one to watch.\r\n\r\nIt's relatively low traffic as far as large projects ever are low traffic ever since the formulae element was split out.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 240624540,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T05:02:13Z",
		"body" : "Thanks for shipping this, @MikeMcQuaid! :bow: I was hesitant to merge this in the past few weeks because we've seen a fair amount of breaking changes and/or severe bugs in the recent past and I didn't want to contribute with another breaking change without being able to watch bot and repository activity adequately and react to potential problems quickly ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 240655249,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T08:18:11Z",
		"body" : "> Is there a place third-parties can click subscribe or otherwise be informed of these before they happen?\r\n\r\nThe mailing list or our Twitter for huge changes but generally: no. I plan on fixing our release and release announcement process for 1.0.0.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 555
	},
	{
		"id" : 233621637,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-19T12:49:09Z",
		"body" : "I'm afraid this is outside of the scope of Homebrew. Our build process isn't affected by this because we properly set up library search paths for all declared dependencies, no matter if Homebrew is installed in `/usr/local` or somewhere else and no matter if the user has only the Command Line Tools (that get installed by `xcode-select --install`) or Xcode or both.\r\n\r\nThe reason your users (that presumably only have Xcode installed) are running into that `/usr/local/lib` is indeed always in the library search path, but if they are building with an Xcode-provided compiler, all search paths are prefixed with the path to the macOS SDK they are building with, e.g. `/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk` (as a first approximation; there are of course flags and environment variables that influence this). Since your library isn't installed to that directory tree, it isn't found.\r\n\r\nThe reason why `xcode-select --install` fixes it for them is that it installs a toolchain independent of Xcode and switches the compiler etc. wrappers in `/usr/bin` to use that instead. This effectively changes the SDK root to `/` and thus libraries in `/usr/local/lib` are automatically picked up.\r\n\r\nI'd suggest to modify the instructions for your users to ask them to explicitly include `-I` and `-L` flags for your library's include/library paths, making your instructions work independently of the user's exact setup and where Homebrew happens to be installed.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 556
	},
	{
		"id" : 233710397,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-19T17:43:16Z",
		"body" : "```sh\r\ncd \"$(brew --repository)\" && git fetch && git reset --hard origin/master\r\n```\r\n\r\nYou will only need to execute this once and you'll be okay afterwards. Sorry about that! We've made a mistake during a refactoring and some people (who updated in the brief period before we realized our mistake) are now affected by this. Your report is a bit different from most of the other reports we've seen, but I think the cause is the same and the above fix should help. Please let us know about the outcome. (I'm happy to reopen the issue if the problem persists.)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 557
	},
	{
		"id" : 233710934,
		"user" : {
			"login" : "greentornado"
		},
		"created_at" : "2016-07-19T17:45:12Z",
		"body" : "Thanks @UniqMartin , it worked !",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 557
	},
	{
		"id" : 235557012,
		"user" : {
			"login" : "DarkStar1"
		},
		"created_at" : "2016-07-27T11:17:56Z",
		"body" : "Thanks. This seems to have done the job",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 557
	},
	{
		"id" : 235796884,
		"user" : {
			"login" : "shawila"
		},
		"created_at" : "2016-07-28T04:17:35Z",
		"body" : "Also works for me. Thanks.\r\nMy error was ```/usr/local/Library/brew.sh: line 32: /usr/local/Library/ENV/scm/git: No such file or directory```.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 557
	},
	{
		"id" : 236451179,
		"user" : {
			"login" : "robbiet480"
		},
		"created_at" : "2016-07-31T19:21:47Z",
		"body" : "Also works for me. Thanks.\r\nMy error was `/usr/local/Library/Homebrew/cmd/update.sh: line 13: /usr/local/Library/ENV/scm/git: No such file or directory`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 557
	},
	{
		"id" : 237793885,
		"user" : {
			"login" : "enderahmetyurt"
		},
		"created_at" : "2016-08-05T08:51:20Z",
		"body" : "Thanks @UniqMartin it works for me! üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 557
	},
	{
		"id" : 238020836,
		"user" : {
			"login" : "WangBeyond"
		},
		"created_at" : "2016-08-06T12:22:00Z",
		"body" : "Also works for me! Awesome!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 557
	},
	{
		"id" : 238119018,
		"user" : {
			"login" : "v6"
		},
		"created_at" : "2016-08-08T00:27:59Z",
		"body" : "  // , Thanks for the quick service. \r\n\r\nI've largely made my decision to use Home Brew in stead of MacPorts on the basis of the quick support from the users and devs of Home Brew",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 557
	},
	{
		"id" : 238221347,
		"user" : {
			"login" : "lbornov2"
		},
		"created_at" : "2016-08-08T12:30:47Z",
		"body" : "Thanks for the fix.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 557
	},
	{
		"id" : 238263761,
		"user" : {
			"login" : "nicobrenner"
		},
		"created_at" : "2016-08-08T14:56:43Z",
		"body" : "Thank you @UniqMartin, worked like a charm üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 557
	},
	{
		"id" : 245315119,
		"user" : {
			"login" : "Ritvik1512"
		},
		"created_at" : "2016-09-07T15:19:41Z",
		"body" : "Works! Thanks for the fix!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 557
	},
	{
		"id" : 248950520,
		"user" : {
			"login" : "ddavidebor"
		},
		"created_at" : "2016-09-22T16:12:06Z",
		"body" : "Fixed it for me on a MacOS beta",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 557
	},
	{
		"id" : 249123402,
		"user" : {
			"login" : "tao12345666333"
		},
		"created_at" : "2016-09-23T07:37:12Z",
		"body" : "Works! Thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 557
	},
	{
		"id" : 234107115,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-20T22:45:03Z",
		"body" : "Nice work üëç. Will let @UniqMartin do his usual üòâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 558
	},
	{
		"id" : 235291722,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-26T14:49:04Z",
		"body" : "Didn't find anything to complain about (I know, I'm getting a bit out of my character :joy:), but I left a question as a code comment nonetheless.\r\n\r\n:+1: Looks good to me!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 558
	},
	{
		"id" : 235383070,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-07-26T19:47:10Z",
		"body" : "Thank you! I went ahead and moved the Git repository initialization to the beginning of the test (since there wasn't a compelling reason to keep it in the middle). And I rebased my branch to resolve the previously existing merge conflicts.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 558
	},
	{
		"id" : 235458888,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T01:52:55Z",
		"body" : "Good work! Thanks again @eirinikos! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 558
	},
	{
		"id" : 235459489,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T01:56:48Z",
		"body" : "Thanks @eirinikos!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 558
	},
	{
		"id" : 234107325,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-20T22:46:10Z",
		"body" : "> Since these lines return exit codes that fall outside the purview of cmd_fail, would it be OK to add another helper method to address them?\r\n\r\nI think it'd be worth just handling all non-zero codes the same.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 559
	},
	{
		"id" : 234107368,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-20T22:46:22Z",
		"body" : "Good work. Again, waiting for @UniqMartin üòÄ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 559
	},
	{
		"id" : 235297096,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-26T15:04:55Z",
		"body" : "> > Since these lines return exit codes that fall outside the purview of `cmd_fail`, would it be OK to add another helper method to address them?\r\n>\r\n> I think it'd be worth just handling all non-zero codes the same.\r\n\r\nAgreed. I guess we're not yet covering those cases with a non-zero exit status just yet, so they still need to be added to the test, right? Otherwise I'm basically happy with the code as-is.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 559
	},
	{
		"id" : 235420790,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-07-26T22:06:38Z",
		"body" : "> > > Since these lines return exit codes that fall outside the purview of `cmd_fail`, would it be OK to add another helper method to address them?\r\n> > \r\n> > I think it'd be worth just handling all non-zero codes the same.\r\n> \r\n> Agreed. I guess we're not yet covering those cases with a non-zero exit status just yet, so they still need to be added to the test, right? Otherwise I'm basically happy with the code as-is.\r\n\r\nThanks. Yes, that's right. I've pushed a new commit in which `cmd_fail` is modified in a way that seems clunky to me, but maybe it's acceptable? Looking forward to hearing your thoughts. And I've added a couple of `cmd_fail`s to address the lines in `brew switch` that return exit codes 2 and 3. I'm guessing that we'd want to split the `cmd_fail` changes from the `test_switch` changes, but first I'll wait for feedback. üò∫ \r\n\r\nI finally realized that `cmd` and `cmd_fail` make their own assertions (even though I'd seen them, I never really registered their existence). And I've seen that simply using `cmd` and `cmd_fail` often seems to render a separate `assert_match` (or other assertion) as unnecessary. Would it still be better (i.e., more informative or helpful) to use these assertions even when they're not strictly necessary?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 559
	},
	{
		"id" : 235461554,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T02:11:12Z",
		"body" : "Since most of your PRs end up modifying the end of the `test_integration_cmds.rb` file, every merged PR is going to cause another to have merge conflicts. I guess that's a nice way to have more practice with `git rebase`. üò∏ In the future, those kinds of conflicts could be minimized if the test methods were roughly added in alphabetical order instead of appending them to the existing ones. (But there's nothing fundamentally wrong with how you've done things thus far.)\r\n\r\n> I've pushed a new commit in which `cmd_fail` is modified in a way that seems clunky to me, but maybe it's acceptable? Looking forward to hearing your thoughts.\r\n\r\nI've tried to address this in a separate code comment.\r\n\r\n> And I've added a couple of `cmd_fail`s to address the lines in `brew switch` that return exit codes 2 and 3.\r\n\r\nThose look basically fine to me.\r\n\r\n> I'm guessing that we'd want to split the `cmd_fail` changes from the `test_switch` changes, but first I'll wait for feedback.\r\n\r\nYes, that would be perfect!\r\n\r\n> And I've seen that simply using `cmd` and `cmd_fail` often seems to render a separate `assert_match` (or other assertion) as unnecessary. Would it still be beneficial (i.e., more informative or helpful) to use these assertions even when they're not strictly necessary?\r\n\r\nThis always depends a bit on the context. In some cases the command output itself isn't very useful and checking it additionally doesn't provide any added value. But more often than not the expected failure cannot be trivially inferred from the invocation alone, thus an assert on the error message provides an additional clue as to what the test is checking. (And the additional assert is basically free, as it is significantly less expensive than the `cmd[_fail]` call.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 559
	},
	{
		"id" : 235689055,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-07-27T19:11:33Z",
		"body" : "> Since most of your PRs end up modifying the end of the `test_integration_cmds.rb` file, every merged PR is going to cause another to have merge conflicts. I guess that's a nice way to have more practice with `git rebase`. üò∏ In the future, those kinds of conflicts could be minimized if the test methods were roughly added in alphabetical order instead of appending them to the existing ones. (But there's nothing fundamentally wrong with how you've done things thus far.)\r\n\r\nGood idea, thanks! I'll keep this in mind for future reference. In the meantime, yes, it has been good to have more practice with `git rebase` (which is exactly what I've just done for this branch). üòÑ \r\n\r\n> In some cases the command output itself isn't very useful and checking it additionally doesn't provide any added value. But more often than not the expected failure cannot be trivially inferred from the invocation alone, thus an assert on the error message provides an additional clue as to what the test is checking. (And the additional assert is basically free, as it is significantly less expensive than the `cmd[_fail]` call.)\r\n\r\nThanks for the explanation!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 559
	},
	{
		"id" : 235750999,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T23:20:28Z",
		"body" : "@MikeMcQuaid Any final comments? I'm happy with this PR as-is and think it's ready to merge.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 559
	},
	{
		"id" : 235751646,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T23:24:22Z",
		"body" : "Thanks again @eirinikos üéâ ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 559
	},
	{
		"id" : 234067173,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-07-20T20:11:05Z",
		"body" : "Do you mind copying the body of the post over, so we have the full report here instead of having to go to an external site?\r\n\r\nI can't reproduce locally on my 10.11 box. But the fact that `brew upgrade | cat` fixes it means it's highly likely something to do with ANSI escape sequences emitted by `brew` or a program it calls. But none of the color/styling sequences used by `brew` seem like they'd have that effect where *nothing* appears in response to your typing, not even a new line.\r\n\r\nWhat happens if you run `brew upgrade` twice in a row?\r\n\r\nCould you use `script` to capture the results of you running `brew upgrade` and attach it (preferably in a zip file) to this issue? That should capture any terminal control sequences, while `brew upgrade | cat` will prevent them from being emitted in the first place.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234112964,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-20T23:18:11Z",
		"body" : "> Do you mind copying the body of the post over, so we have the full report here instead of having to go to an external site?\r\n\r\nAgreed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234163646,
		"user" : {
			"login" : "spl"
		},
		"created_at" : "2016-07-21T05:56:07Z",
		"body" : "> Do you mind copying the body of the post over, so we have the full report here instead of having to go to an external site?\r\n\r\nDone.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234163891,
		"user" : {
			"login" : "spl"
		},
		"created_at" : "2016-07-21T05:57:55Z",
		"body" : "> What happens if you run brew upgrade twice in a row?\r\n\r\nThis is me typing `brew upgrade\\n` twice:\r\n\r\n```\r\n$ brew upgrade\r\n$\r\n$\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234165285,
		"user" : {
			"login" : "spl"
		},
		"created_at" : "2016-07-21T06:08:31Z",
		"body" : "> Could you use `script` to capture the results of you running `brew upgrade` and attach it (preferably in a zip file) to this issue?\r\n\r\nDoes this help?\r\n\r\n```\r\nhome:~ spl$ mkdir tmp-script\r\nhome:~ spl$ cd tmp-script/\r\nhome:tmp-script spl$ script\r\nScript started, output file is typescript\r\nbash-3.2$ brew upgrade\r\nbash-3.2$ ls\r\ntypescript\r\nbash-3.2$ exit\r\n\r\nScript done, output file is typescript\r\nhome:tmp-script spl$ hexdump -C typescript\r\n00000000  53 63 72 69 70 74 20 73  74 61 72 74 65 64 20 6f  |Script started o|\r\n00000010  6e 20 54 68 75 20 4a 75  6c 20 32 31 20 30 38 3a  |n Thu Jul 21 08:|\r\n00000020  30 32 3a 31 37 20 32 30  31 36 0a 1b 5b 3f 31 30  |02:17 2016..[?10|\r\n00000030  33 34 68 62 61 73 68 2d  33 2e 32 24 20 62 72 65  |34hbash-3.2$ bre|\r\n00000040  77 20 75 70 67 72 61 64  65 0d 0a 62 61 73 68 2d  |w upgrade..bash-|\r\n00000050  33 2e 32 24 20 6c 73 0d  0a 74 79 70 65 73 63 72  |3.2$ ls..typescr|\r\n00000060  69 70 74 0d 0a 62 61 73  68 2d 33 2e 32 24 20 65  |ipt..bash-3.2$ e|\r\n00000070  78 69 74 0d 0a 0a 53 63  72 69 70 74 20 64 6f 6e  |xit...Script don|\r\n00000080  65 20 6f 6e 20 54 68 75  20 4a 75 6c 20 32 31 20  |e on Thu Jul 21 |\r\n00000090  30 38 3a 30 32 3a 32 37  20 32 30 31 36 0a        |08:02:27 2016.|\r\n0000009e\r\nhome:tmp-script spl$\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234166426,
		"user" : {
			"login" : "spl"
		},
		"created_at" : "2016-07-21T06:17:11Z",
		"body" : "Hmm, that's interesting. As seen above, it didn't happen after the first `brew upgrade` in a new shell. But I tried it again, and it happened after the second. Here, I'm typing `brew upgrade\\nls\\nbrew upgrade\\nls`:\r\n\r\n```bash\r\nhome:~ spl$ mkdir tmp-script\r\nhome:~ spl$ cd tmp-script/\r\nhome:tmp-script spl$ script\r\nScript started, output file is typescript\r\nbash-3.2$ brew upgrade\r\nbash-3.2$ ls\r\ntypescript\r\nbash-3.2$ brew upgrade\r\nbash-3.2$ typescript\r\nbash-3.2$ exit\r\n\r\nScript done, output file is typescript\r\nhome:tmp-script spl$ hexdump -C typescript\r\n00000000  53 63 72 69 70 74 20 73  74 61 72 74 65 64 20 6f  |Script started o|\r\n00000010  6e 20 54 68 75 20 4a 75  6c 20 32 31 20 30 38 3a  |n Thu Jul 21 08:|\r\n00000020  31 32 3a 34 37 20 32 30  31 36 0a 1b 5b 3f 31 30  |12:47 2016..[?10|\r\n00000030  33 34 68 62 61 73 68 2d  33 2e 32 24 20 62 72 65  |34hbash-3.2$ bre|\r\n00000040  77 20 75 70 67 61 72 08  1b 5b 4b 08 1b 5b 4b 72  |w upgar..[K..[Kr|\r\n00000050  61 64 65 0d 0a 62 61 73  68 2d 33 2e 32 24 20 6c  |ade..bash-3.2$ l|\r\n00000060  73 0d 0a 74 79 70 65 73  63 72 69 70 74 0d 0a 62  |s..typescript..b|\r\n00000070  61 73 68 2d 33 2e 32 24  20 62 72 65 77 20 75 70  |ash-3.2$ brew up|\r\n00000080  67 72 61 64 65 0d 0a 62  61 73 68 2d 33 2e 32 24  |grade..bash-3.2$|\r\n00000090  20 74 79 70 65 73 63 72  69 70 74 0d 0a 62 61 73  | typescript..bas|\r\n000000a0  68 2d 33 2e 32 24 20 65  78 69 74 0d 0a 0a 53 63  |h-3.2$ exit...Sc|\r\n000000b0  72 69 70 74 20 64 6f 6e  65 20 6f 6e 20 54 68 75  |ript done on Thu|\r\n000000c0  20 4a 75 6c 20 32 31 20  30 38 3a 31 33 3a 30 30  | Jul 21 08:13:00|\r\n000000d0  20 32 30 31 36 0a                                 | 2016.|\r\n000000d6\r\nhome:tmp-script spl$\r\n```\r\n\r\nStill, nothing unusual showing up in the `script` output.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234167530,
		"user" : {
			"login" : "spl"
		},
		"created_at" : "2016-07-21T06:24:50Z",
		"body" : "I actually had a few deletes in the above typed sequence. I did it again with `brew upgrade\\nls\\nbrew upgrade\\nls` (no deletes), and the result was different.\r\n\r\n```\r\nhome:~ spl$ mkdir tmp-script\r\nhome:~ spl$ cd tmp-script\r\nhome:tmp-script spl$ script\r\nScript started, output file is typescript\r\nbash-3.2$ brew upgrade\r\nbash-3.2$ typescript\r\nbash-3.2$ bash-3.2$ typescript\r\nbash-3.2$ exit\r\n\r\nScript done, output file is typescript\r\nhome:tmp-script spl$ hexdump -C typescript\r\n00000000  53 63 72 69 70 74 20 73  74 61 72 74 65 64 20 6f  |Script started o|\r\n00000010  6e 20 54 68 75 20 4a 75  6c 20 32 31 20 30 38 3a  |n Thu Jul 21 08:|\r\n00000020  31 39 3a 30 31 20 32 30  31 36 0a 1b 5b 3f 31 30  |19:01 2016..[?10|\r\n00000030  33 34 68 62 61 73 68 2d  33 2e 32 24 20 62 72 65  |34hbash-3.2$ bre|\r\n00000040  77 20 75 70 67 72 61 64  65 0d 0a 62 61 73 68 2d  |w upgrade..bash-|\r\n00000050  33 2e 32 24 20 74 79 70  65 73 63 72 69 70 74 0d  |3.2$ typescript.|\r\n00000060  0a 62 61 73 68 2d 33 2e  32 24 20 62 61 73 68 2d  |.bash-3.2$ bash-|\r\n00000070  33 2e 32 24 20 74 79 70  65 73 63 72 69 70 74 0d  |3.2$ typescript.|\r\n00000080  0a 62 61 73 68 2d 33 2e  32 24 20 65 78 69 74 0d  |.bash-3.2$ exit.|\r\n00000090  0a 0a 53 63 72 69 70 74  20 64 6f 6e 65 20 6f 6e  |..Script done on|\r\n000000a0  20 54 68 75 20 4a 75 6c  20 32 31 20 30 38 3a 31  | Thu Jul 21 08:1|\r\n000000b0  39 3a 32 33 20 32 30 31  36 0a                    |9:23 2016.|\r\n000000ba\r\nhome:tmp-script spl$\r\n```\r\n\r\nSo, the result is nondeterministic. I suspected that might be the case, but now I've reproduced it a bit more rigorously.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234168938,
		"user" : {
			"login" : "spl"
		},
		"created_at" : "2016-07-21T06:34:16Z",
		"body" : "By the way, each of the above was from a new shell opened in iTerm2 with no `.bashrc`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234335012,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-07-21T18:04:50Z",
		"body" : "Thanks for the additional diagnostics.\r\n\r\nI'm a little befuddled here. I don't see any clues in that script output either. That `\\e[?1034h` sequence just [enables the meta key setting the eighth bit](http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Functions-using-CSI-_-ordered-by-the-final-character_s_). And I see no other escape characters in there.\r\n\r\nI see a similar sequence in my normally-behaving `brew upgrade` in bash.\r\n\r\n```\r\neilonwy:upgrade-terminal-breakage janke$ script typescript-02 bash\r\nScript started, output file is typescript-02\r\nbash-3.2$ brew upgrade\r\nbash-3.2$ ls\r\ntypescript-01\ttypescript-02\r\nbash-3.2$ exit\r\nexit\r\n\r\nScript done, output file is typescript-02\r\neilonwy:upgrade-terminal-breakage janke$ hexdump -C typescript-02\r\n00000000  53 63 72 69 70 74 20 73  74 61 72 74 65 64 20 6f  |Script started o|\r\n00000010  6e 20 54 68 75 20 4a 75  6c 20 32 31 20 31 33 3a  |n Thu Jul 21 13:|\r\n00000020  35 30 3a 33 36 20 32 30  31 36 0a 1b 5b 3f 31 30  |50:36 2016..[?10|\r\n00000030  33 34 68 62 61 73 68 2d  33 2e 32 24 20 62 72 65  |34hbash-3.2$ bre|\r\n00000040  77 20 75 70 67 72 61 64  65 0d 0a 62 61 73 68 2d  |w upgrade..bash-|\r\n00000050  33 2e 32 24 20 6c 73 0d  0a 74 79 70 65 73 63 72  |3.2$ ls..typescr|\r\n00000060  69 70 74 2d 30 31 09 74  79 70 65 73 63 72 69 70  |ipt-01.typescrip|\r\n00000070  74 2d 30 32 0d 0a 62 61  73 68 2d 33 2e 32 24 20  |t-02..bash-3.2$ |\r\n00000080  65 78 69 74 0d 0a 65 78  69 74 0d 0a 0a 53 63 72  |exit..exit...Scr|\r\n00000090  69 70 74 20 64 6f 6e 65  20 6f 6e 20 54 68 75 20  |ipt done on Thu |\r\n000000a0  4a 75 6c 20 32 31 20 31  33 3a 35 30 3a 35 30 20  |Jul 21 13:50:50 |\r\n000000b0  32 30 31 36 0a                                    |2016.|\r\n000000b5\r\neilonwy:upgrade-terminal-breakage janke$\r\n```\r\n\r\nThat makes me think something in there may be emitting a control sequence directly to `/dev/tty` instead of to `stdout` for you. But I don't know what would be doing it.\r\n\r\nThe fact that it happens under `bash` but not under `zsh` makes me think maybe it's some other `bash`-specific configuration. `brew` doesn't alter its behavior based on what shell it's running under (except to change the profile file path in some caveats it emits).\r\n\r\nAny chance you have `$BASH_ENV` set? What's your `$TERM` set to?\r\n\r\nDid you also disable `.bash_profile` and `.profile`?\r\n\r\nWhat does `which brew` give you? Any chance you have a wrapper or extension set up?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234335822,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-07-21T18:07:59Z",
		"body" : "> When I [check the output for ANSI color codes](http://unix.stackexchange.com/q/4527/137060), I don't see any.\r\n\r\nOh, BTW, that technique generally won't work, unless you capture the output using `script` first instead of piping it directly to the filter that checks for escape sequences. Many programs, including `brew`, will check `stdout` to see if it is attached to a tty, and only emit terminal control escape sequences in that case. If you pipe or redirect `stdout`, it's no longer attached to a tty, and the program will change its behavior to not emit terminal control sequences, and you could get get a false negative. Same reason doing `brew upgrade | cat` could change its behavior.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234356033,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-21T19:20:29Z",
		"body" : "Can you reproduce the same issue in Terminal.app? If not, I'm not sure how this is a Homebrew rather than iTerm bug.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234507121,
		"user" : {
			"login" : "spl"
		},
		"created_at" : "2016-07-22T10:10:11Z",
		"body" : "@apjanke: Thanks for your help and questions.\r\n\r\nI moved `.bashrc` to `.bashrc.tmp` before all of the following.\r\n\r\n> Any chance you have `$BASH_ENV` set? What's your `$TERM` set to?\r\n\r\n```\r\nhome:~ spl$ echo $BASH_ENV\r\n\r\nhome:~ spl$ echo $TERM\r\nxterm-256color\r\n```\r\n\r\n> Did you also disable `.bash_profile` and `.profile`?\r\n\r\n```\r\nhome:~ spl$ cat .bash_profile \r\n# ~/.bash_profile\r\n\r\n# This file is sourced by bash for login shells.  The following line\r\n# runs your .bashrc and is recommended by the bash info pages.\r\n[[ -f ~/.bashrc ]] && . ~/.bashrc\r\nhome:~ spl$ ls .profile\r\nls: .profile: No such file or directory\r\n```\r\n\r\n> What does `which brew` give you?\r\n\r\n```\r\nhome:~ spl$ which brew\r\n/usr/local/bin/brew\r\n```\r\n\r\n> Any chance you have a wrapper or extension set up?\r\n\r\nI don't think so.\r\n\r\n> Oh, BTW, that technique generally won't work [...]\r\n\r\nThank. That's good to know.\r\n\r\n@MikeMcQuaid:\r\n\r\n> Can you reproduce the same issue in Terminal.app?\r\n\r\nYes, the same thing happens in `Terminal.app`. I just tried it again and saw the same `script` output as the previous comment I had using `script`.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234508931,
		"user" : {
			"login" : "spl"
		},
		"created_at" : "2016-07-22T10:19:26Z",
		"body" : "I tried running `brew upgrade` within the following shell but still had the same problem.\r\n\r\n```\r\nhome:~ spl$ /bin/bash --debug --norc --noprofile --restricted --noediting\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234510826,
		"user" : {
			"login" : "spl"
		},
		"created_at" : "2016-07-22T10:30:08Z",
		"body" : "Hmm. I think I might have found the culprit. Once I do the following, `brew upgrade` doesn't break the terminal:\r\n\r\n```\r\nhome:~ spl$ mv .editrc .editrc.tmp\r\n```\r\n\r\nThis is what's in `.editrc`:\r\n\r\n```\r\nedit on\r\nbind ^R em-inc-search-prev\r\n```\r\n\r\nIs `brew` using `editline` or conflicting with it somehow?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234511077,
		"user" : {
			"login" : "spl"
		},
		"created_at" : "2016-07-22T10:31:33Z",
		"body" : "If I `mv .editrc.tmp .editrc`, the problem comes back.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234625206,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-07-22T18:48:50Z",
		"body" : "That is a new one to me.\r\n\r\nSure sounds like you've identified the culprit. But I don't know what in `brew` would be using `.editrc`. I don't think we're intentionally using it. I used `otool -L` on `ruby`, `bash`, and a couple other commands, and didn't see any of them linking `libedit`, which is the library that `editrc` uses, according to `man editrc`.\r\n\r\nIf someone's familiar with `dtruss`, maybe it could be used to see what is opening `.editrc`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234839978,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T04:57:47Z",
		"body" : "I was able to reproduce the issue after creating `~/.editrc` (the single line `edit on` was sufficient). Notice how this not only affects `brew upgrade`, but also `brew install` and a few other Homebrew commands (but not all).\r\n\r\nThe way `libedit` is pulled into the Homebrew session is via the `readline` extension in Ruby, that is most prominently used by IRB, which in turn is used to power some of Homebrew's interactive debug features during formula build. The IRB code is loaded even if those features aren't used.\r\n\r\nI don't understand yet why this is causing the observed behavior and I'm also unclear on what the intended effect of `edit on` is (the documentation I found wasn't exactly enlightening). Anyway, maybe this additional information helps others to investigate this further.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234851778,
		"user" : {
			"login" : "spl"
		},
		"created_at" : "2016-07-25T06:37:05Z",
		"body" : "@UniqMartin: Great! I'm glad somebody could reproduce this. I also saw the problem with other `brew` commands, though I didn't do an exhaustive check to determine which ones.\r\n\r\nCan someone reproduce it on Mac OS X 10.10 Yosemite? My fuzzy memory tells me that I didn't have the problem there, and I've had the `.editrc` longer than I've had El Capitan.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234852553,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-07-25T06:42:16Z",
		"body" : "I can reproduce it on yosemite 10.10.5 after `echo edit on > ~/.editrc`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 235110122,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-07-25T22:49:17Z",
		"body" : "And I can reproduce on 10.9.5 with `echo \"edit on\" > ~/.editrc`. Looks like we've found the \"what\", but I don't know the \"why\".\r\n\r\nI think Martin's right about it being related to IRB. I spent some time bisecting for a cause by sticking `puts \"foo.rb - before XXX\"; exit(1)` calls near the beginning of `cmd/upgrade.rb` and its dependencies, and chased it through a bunch of requires. I ended up at `require \"debrew/irb\"` in `debrew.rb`, which is included indirectly by `cmd/upgrade.rb` (through `require \"install\"`, another command which is affected). Commenting this out consistently made the problem disappear for me.\r\n\r\nThis makes some sense. IRB and readline show up in searches for \"ruby editrc\". IRB is an interactive tool that does line editing.\r\n\r\n@spl, can you try reproducing this? Edit `Library/Homebrew/debrew.rb` and comment out line 2 where it does `require \"debrew/irb\"`.\r\n\r\n```\r\nrequire \"mutex_m\"\r\n#require \"debrew/irb\"\r\n```\r\n\r\nWhen I do that, the disappearing text never happens.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 235169963,
		"user" : {
			"login" : "spl"
		},
		"created_at" : "2016-07-26T05:54:32Z",
		"body" : "@apjanke:\r\n\r\n> can you try reproducing this?\r\n\r\nYep, I can confirm that removing `require \"debrew/irb\"` from `/usr/local/Library/Homebrew/debrew.rb` fixes the issue and restoring it re-introduces the issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 235258131,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-26T12:54:04Z",
		"body" : "On the other hand, a Ruby 2.0.0-p648 built against GNU Readline (e.g. `ruby20` from the homebrew/versions tap) doesn't have that issue, though it obviously also reads from `~/.inputrc` instead of `~/.editrc` and doesn't have an equivalent to the `edit on` command as far as I can tell.\r\n\r\nI think this is simply a subtle incompatibility between `readline` and `libedit` as the system Ruby is built against the latter. `libedit` is supposed to be a drop-in replacement, but a Google search reveals quite a few instances where `libedit` failed to deliver on this promise.\r\n\r\nI think there's nothing we can do on the Homebrew side to address this bug. My suggestion is to remove the `edit on` command from your `~/.editrc` file. If that's unacceptable, you can scope that line to programs where it's actually needed (cf. `editrc(5)` man page for details). That way it won't disturb `ruby` instances where it's not needed. And I'm still interested in an answer to my earlier question: What is the purpose of `edit on` command and what changes if it is omitted?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 235301863,
		"user" : {
			"login" : "spl"
		},
		"created_at" : "2016-07-26T15:19:41Z",
		"body" : "@UniqMartin:\r\n\r\n> What is the purpose of `edit on` command and what changes if it is omitted?\r\n\r\nFrom my reading ([`el.c` rev 1.10](http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libedit/el.c?rev=1.10&content-type=text/x-cvsweb-markup&only_with_tag=MAIN) [diff](http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libedit/el.c.diff?r1=1.9&r2=1.10&only_with_tag=MAIN&f=h), [`parse.c` rev 1.8](http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libedit/parse.c?rev=1.8&content-type=text/x-cvsweb-markup&only_with_tag=MAIN) [diff](http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libedit/parse.c.diff?r1=1.7&r2=1.8&only_with_tag=MAIN&f=h)), which have the comment:\r\n\r\n```\r\n* add \"edit  on | off\" editrc command, which modifies EL_EDITMODE.\r\n  users can now add '*:edit off' in ~/.editrc as an advisory to\r\n  disable editing.\r\n```\r\n\r\n`edit on` sets `EL_EDITMODE`. According to `editline(3)`:\r\n\r\n\r\n> EL_EDITMODE, int flag\r\n> If flag is non-zero, editing is enabled (the default).  Note that this is only an indication, and does not affect the operation of editline.  At this time, it is the caller's responsibility to check this (using el_get()) to determine if editing should be enabled or not.\r\n\r\nand\r\n\r\n> BUGS\r\n>     At this time, it is the responsibility of the caller to check the result of the EL_EDITMODE operation of el_get() (after an el_source() or el_parse()) to determine if editline should be used for further input.  I.e., EL_EDITMODE is purely an indication of the result of the most recent editrc(5) edit command.\r\n\r\nI wrote my `.editrc` several years ago, and I don't remember what tool uses it. It may be that `edit on` is not strictly necessary.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 560
	},
	{
		"id" : 234112009,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-20T23:12:32Z",
		"body" : "Was it `pin`d or `switch`d? ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 561
	},
	{
		"id" : 234744865,
		"user" : {
			"login" : "blimmer"
		},
		"created_at" : "2016-07-23T22:40:23Z",
		"body" : "I'm not sure - would I have to manually do this?\r\n\r\nProbably difficult to tell now since I've already force uninstalled.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 561
	},
	{
		"id" : 234806140,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-24T22:16:13Z",
		"body" : "Will keep an eye out for this but not possible to do any further debugging now that it's uninstalled. Thanks for the report.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 561
	},
	{
		"id" : 236892555,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-02T12:44:24Z",
		"body" : "Thanks again @AnastasiaSulyagina! üéâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 562
	},
	{
		"id" : 234077554,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-07-20T20:47:38Z",
		"body" : "This sounds like #539 and https://github.com/Homebrew/homebrew-core/issues/3051\r\n\r\nSorry I don't have a specific suggestion, but you might find clues in those other issues.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 563
	},
	{
		"id" : 234111631,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-20T23:10:13Z",
		"body" : "See also: https://github.com/travis-ci/travis-ci/issues/6329\r\n\r\nWe recommend people add something like:\r\n```\r\nbrew outdated \"pkg-config\" || brew upgrade \"pkg-config\"\r\n```\r\nTo their Travis scripts. We're attempting to make Homebrew more cross-platform, which has involved moving some elements around. Sadly Travis doesn't routinely update the dependencies shipped on their boxes automatically, which is problematic in multiple ways for us but I understand the logic behind it.\r\n\r\nApologies on our side that us moving things around can be annoying. The end product will be useful to more people & help various projects (Linuxbrew, Homebrew, Tigerbrew, Caskroom) share the same core (_non-formula_) code rather than maintaining unique forks, but it's not entirely painless getting there.\r\n\r\n> We don't install the zlib package from homebrew. We use the system one.\r\n\r\nOS X doesn't bother providing a pkg-config file for `zlib` or various other things, despite plenty of projects expecting to find it that way. Consequently, things that use `pkg-config` to find system dependencies on OS X can end up relying on Homebrew's vendored `.pc` files to do so. That will be the case here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 563
	},
	{
		"id" : 234112581,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-20T23:15:52Z",
		"body" : "Once we hit Homebrew 1.0 (coming soon!) this will hopefully stabilise a bit and we can request some of these images get recreated.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 563
	},
	{
		"id" : 234230873,
		"user" : {
			"login" : "sledgehammer999"
		},
		"created_at" : "2016-07-21T11:46:41Z",
		"body" : ">`brew outdated \"pkg-config\" || brew upgrade \"pkg-config\"`\r\n\r\n:+1: Yup this works. I hadn't realized that homebrew preinstalls pkg-config and that we need to upgrade it manually.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 563
	},
	{
		"id" : 234254687,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-21T13:35:48Z",
		"body" : "We don't, but Travis preinstalls a bunch of formulae for user convenience.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 563
	},
	{
		"id" : 234622335,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-22T18:36:46Z",
		"body" : "I'm unsure about this. There's an ocean of information in `man brew` and I'm not sure that isn't overwhelming to suddenly encounter. To me `brew --help` is largely there to explain the basic commands & nudge towards more detailed help where necessary, which is more or less what we already do.\r\n\r\nWould like to see some more user feedback before changing this, but it's not something I'm going to die on a hill over if others are particularly passionate about the proposed change.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 565
	},
	{
		"id" : 234622946,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-22T18:39:28Z",
		"body" : "Arguably we could put the `brew --help` output at the top of `man brew`. `git --help` is an example that outputs the manpage.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 565
	},
	{
		"id" : 234639566,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-22T19:50:46Z",
		"body" : "Looking at the output between `man git` and `git --help` I see the similarities, but the latter seems quite a bit more summarised/compressed than the full `man` output?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 565
	},
	{
		"id" : 234685807,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-23T00:13:37Z",
		"body" : "I'm wrong and was thinking of `git` subcommands where it's the same, ignore me. Perhaps we could just fill out our `--help` to provide a description of what each command does?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 565
	},
	{
		"id" : 234820195,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T01:58:03Z",
		"body" : "I'm not sure how helpful `brew --help` is for new users, but I always liked that it is brief. While it doesn't formally explain the `brew` invocation it does so by example and doesn't fail to point out that there's a man page and command-specific help via `brew help COMMAND`. The latter is identical to the command-specific information in the man page. Only the more general usage instructions also contained in the man page are missing.\r\n\r\n> I'm wrong and was thinking of `git` subcommands where it's the same, ignore me.\r\n\r\nWe could consider moving to a per-command model like Git uses, but I'm not sure whether the comparatively low complexity of most of our commands (or sometimes just the brevity of our documentation) would make this look silly. One advantage of individual man pages is that this results in more seamless integration of help provided by external commands, `brew cask` and the accompanying `brew-cask(1)` man page probably being the most prominent example.\r\n\r\n> Perhaps we could just fill out our `--help` to provide a description of what each command does?\r\n\r\nDo you have certain entries in mind where you feel they are non-obvious? I just checked the printed list and all of the terminology (in the name of the command) from ‚ÄúExample usage‚Äù felt natural, particularly if one is already familiar with a different package manager. Someone less familiar might have trouble telling apart `update` and `upgrade` (and maybe `search` and `list`).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 565
	},
	{
		"id" : 235489694,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-27T05:20:19Z",
		"body" : "> The output of man brew is much more complete and helpful at this point than brew --help.\r\n\r\nI'd always thought this was by design. I've gotten used to `brew --help` being a hit-the-ground-running primer as opposed to complete documentation and I think that's still a fine decision. I don't have very strong feelings.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 565
	},
	{
		"id" : 236073948,
		"user" : {
			"login" : "Eitot"
		},
		"created_at" : "2016-07-29T01:45:48Z",
		"body" : "(From a user‚Äôs perspective:) I believe that it is unconventional to blend `--help` and `man`, because both have distinct and expected purposes which were already touched upon by others. ``--help`` is supposed to be a quick-start guide or cheat sheet, whereas `man` is a more extensive manual. I do not recall any CLI program, on Mac or Linux, that does this and I would find it undesirable to not have the advantage of `--help`. I personally do not see a compelling reason to go against the grain here, given that `--help` mentions `man brew` and `brew help [command]` explicitly anyway. I have no opinion on a more fleshed-out `brew help`, as long as `--help` and `man` stay true to what they are generally used for. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 565
	},
	{
		"id" : 238533780,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T12:09:46Z",
		"body" : "Passing on this.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 565
	},
	{
		"id" : 234356366,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-21T19:21:53Z",
		"body" : "One nit otherwise üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 566
	},
	{
		"id" : 234472407,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-22T07:19:27Z",
		"body" : "Actually, rethink a bit, I find this solution of this PR is a little dirty and may cause some problem during option merging. I will explore if there is a better way.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 566
	},
	{
		"id" : 235524722,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-27T08:46:21Z",
		"body" : "SO I have rewritten this PR. More tests will be added.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 566
	},
	{
		"id" : 244548332,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:04:51Z",
		"body" : "@xu-cheng Gentle ping on this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 566
	},
	{
		"id" : 234380712,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-07-21T20:53:31Z",
		"body" : "Sounds good to me.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 567
	},
	{
		"id" : 243894836,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-31T20:43:10Z",
		"body" : "@penman Yep, that's the plan! Please feel free to beat me to a PR though üòÄ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 244573886,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-03T22:37:20Z",
		"body" : "If somebody had run `brew install boost` and got `boost+1.2.3`, then boost 1.2.4 was released they ran `brew upgrade boost`, they'd get `boost+1.2.4` installed.\r\n\r\nBut what if they run `brew upgrade boost+1.2.3`? Seems to me that that should ignore that it was originally installed with just `boost` and install the latest version of the `boost+1.2.3` formula, even if `boost` has been re-aliased to `boost+1.2.4`. If that's the case, should that re-write the INSTALL_RECEIPT so that future `brew upgrade`s also stick to `boost+1.2.3`, or leave it alone?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 244618523,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-04T17:54:04Z",
		"body" : "> If somebody had run brew install boost and got boost+1.2.3, then boost 1.2.4 was released they ran brew upgrade boost, they'd get boost+1.2.4 installed.\r\n\r\nYep üëç \r\n\r\n> But what if they run brew upgrade boost+1.2.3? Seems to me that that should ignore that it was originally installed with just boost and install the latest version of the boost+1.2.3 formula, even if boost has been re-aliased to boost+1.2.4. If that's the case, should that re-write the INSTALL_RECEIPT so that future brew upgrades also stick to boost+1.2.3, or leave it alone?\r\n\r\nI think `brew upgrade boost+1.2.3` (although we're actually using `boost@1.2.3` now) should probably be a no-op unless there's been a `revision` upgrade and we just treat it like a separate formula. I think this behaviour will occur as-is, though üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 244716063,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-05T10:38:02Z",
		"body" : "> although we're actually using `boost@1.2.3` now\r\n\r\nüëçüéâüëçüéâüëçüéâ\r\n\r\n(This was my preference but I didn't want to get into bikeshedding :P)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 244718065,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-05T10:49:27Z",
		"body" : "So it seems to me them at there are three different ways an aliased formula could be updated:\r\n\r\n- [ ] `brew upgrade boost` ‚Äî should follow `boost` alias and install the new version\r\n- [ ] `brew upgrade boost@1.2.3` ‚Äî should not follow `boost` alias (even if it was installed with `brew install boost`), just check for changes in the `boost@1.2.3` formula.\r\n- [ ] `brew upgrade` ‚Äî should follow the alias iff the alias was originally used to install the formula\r\n\r\nI'll check these off as I test them and get them working correctly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 244761619,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-05T14:38:15Z",
		"body" : "Something that's come up as I've been trying to implement this is that there's no good way to find formula installed with a previous value for an alias after it's changed.\r\n\r\nThe only way I've found to check is to loop through `Formula.installed` and check the `alias_path` for all of them. I have a lot of formula installed and can't say I've noticed a performance hit when trying it this way, but it seems like a lot more work than necessary.\r\n\r\nAny ideas?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 244803197,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-05T19:35:35Z",
		"body" : "Looks good to me, @penman. Using `Formula.installed` seems fine for now; it doesn't matter too much if `brew upgrade` is a little sluggish as we scan all the installed formulae for their e.g. versions anyway.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 246610017,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-13T08:21:20Z",
		"body" : "@penman How's this looking?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 247033189,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-14T14:34:37Z",
		"body" : "@MikeMcQuaid My computer and I haven't been getting on well this week, but I've made some good progress today.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 247065292,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-14T16:08:01Z",
		"body" : "If `boost@1.2.3` was installed with `brew install boost`, then `boost` is changed to point to `boost@1.2.4`, what should another `brew install boost` do? Install `boost@1.2.4` or error saying boost is already installed?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 247083885,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T17:06:09Z",
		"body" : "I think either option is probably fine but saying `boost` is already installed and pointing them to `brew upgrade` feels nicer.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 247134823,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-14T19:58:36Z",
		"body" : "And in that situation, would `brew outdated boost@1.2.3` report outdatedness or not?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 247135986,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T20:02:49Z",
		"body" : "I think `brew outdated boost` would but not `boost@1.2.3`. I think basically if you specify something by its full version it should never \"jump\" to a newer version but if you specify just the alias (e.g. `boost`) then it should act like it does currently.\r\n\r\nWorth nothing is that it won't actually be `boost@1.2.3` but `boost@1.2` and `boost@1.3` which can both have upgrades e.g. from 1.2.1 to 1.2.2 and 1.3.1 to 1.3.2. Make sense?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 247147345,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-14T20:44:38Z",
		"body" : "Yeah, makes sense. Thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 247314609,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-15T12:29:51Z",
		"body" : "Just about ready to put up a PR. One more question: how should `brew outdated`'s JSON output be changed to handle alias changes? Here's what it's currently showing without me touching it when `hello@2` is installed with `brew install hello`, and `hello` is then changed to target `hello@3`:\r\n\r\n```json\r\n[\r\n  {\r\n    \"name\": \"hello@2\",\r\n    \"installed_versions\": [\r\n      \"2.10\"\r\n    ],\r\n    \"current_version\": \"2.10\"\r\n  }\r\n]\r\n```\r\n\r\nI guess we'll need a new JSON version, like `brew outdated --json=v2`, but should there be any changes to the v1 version as well? With this new logic for what's outdated, its current output doesn't really make sense.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 247318928,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-15T12:50:33Z",
		"body" : "I think that makes sense for `brew outdated hello@2`'s output but for `brew outdated hello` would ideally output:\r\n\r\n```json\r\n[\r\n  {\r\n    \"name\": \"hello\",\r\n    \"installed_versions\": [\r\n      \"2.10\"\r\n    ],\r\n    \"current_version\": \"2.10\"\r\n  }\r\n]\r\n```\r\n\r\nor something, I think?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 247319860,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-15T12:54:51Z",
		"body" : "I was just worried that doing that could break a JSON consumer that didn't know how to handle Homebrew aliases. Is that something we need to worry about?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 247319865,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-15T12:54:53Z",
		"body" : "The ideal JSON (that would require a version bump), would look like this, I think:\r\n\r\n```json\r\n[\r\n  {\r\n    \"name\": \"hello\",\r\n    \"installed\": [\r\n      {\r\n        \"formula\": \"hello@2\",\r\n        \"version\": \"2.10\"\r\n      }\r\n    ],\r\n    \"current\": {\r\n      \"formula\": \"hello@3\",\r\n      \"version\": \"3.0\"\r\n    }\r\n  }\r\n]\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 247322718,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-15T13:07:07Z",
		"body" : "Or alternatively we could just leave the JSON output as-is for now and consider iteration on it if the previous version causes problems. I think my format would be fine if we assume it's being used to decide whether to run e.g. `brew upgrade` on a given formula. Thoughts?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 247343950,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-15T14:27:06Z",
		"body" : "Okay, I'll just leave it for now and get a PR up, then we can take it from there.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 567
	},
	{
		"id" : 234374085,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-07-21T20:29:20Z",
		"body" : "Is there a reason why the source tarball go in a subdir named \"source\", rather than sitting loose in \"version\"?  I'm not keen on subdirs that only hold one item, which seems to be what the \"source\" dir would be.  (I've never seen multiple sourceballs for one version of a formula, AFAICR.)\r\n\r\n\"Resources\" and \"patches\" are fine because there will frequently be multiple children of each if someone brews enough formulas.\r\n\r\n\"Bottles\" will only ever have one child except for bottle revisions, which it seems to me is akin to \"resources\" and \"patches\".\r\n\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 568
	},
	{
		"id" : 234619128,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-22T18:24:28Z",
		"body" : "No real reason, no. I'm not that bothered on the exact approach and you've made good points.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 568
	},
	{
		"id" : 234630261,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-07-22T19:10:01Z",
		"body" : "> `resources/resource-$SHA256.tar.gz`\r\n\r\nAs I understand this, we would get for example:\r\n```\r\nresources/git--html-SOMESHA256.tar.gz\r\n```\r\nBut then we lose track of what the version is (if `resources` here doesn't live under `formula/version`).  I think we'd need:\r\n```\r\nresources/git--html-2.9.1-SOMESHA256.tar.gz\r\n```\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 568
	},
	{
		"id" : 234685679,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-23T00:12:30Z",
		"body" : "> But then we lose track of what the version is (if resources here doesn't live under formula/version). I think we'd need:\r\n\r\nWe specifically don't need/want the version. Alternatively, we could just always use the original filename instead.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 568
	},
	{
		"id" : 234900142,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T09:13:31Z",
		"body" : "If we keep prefixing resources with specific formula names and continue to associate them with specific formulae (though not specific versions of that formula), then it would make sense to save them in `<formula>/resources/[<resource-name>-]<resource-sha256>.tar.gz`.\r\n\r\nIf we would like to move to a model where we share resources across all formulae, e.g. based on their origin or SHA256, we could put them in a top-level `resources` directory. The upside is that this will avoid duplicating some resources that are used in multiple formulae. The downside I see here is that it would become more difficult to tell which resource belongs to which formula (e.g. for the sake of cleaning the cache). There are also subtle issues this can cause, e.g. what happens if two formulae are installed in parallel and both require the same resource. Do we need more sophisticated locking? Do we prevent parallel build/fetch entirely?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 568
	},
	{
		"id" : 235091241,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-25T21:28:36Z",
		"body" : "@UniqMartin Another option is a combined approach where we use hardlinks to reduce space.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 568
	},
	{
		"id" : 235267953,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-26T13:31:49Z",
		"body" : "I'm personally not a big fan of hard links, as they make things quite intransparent and I'm a bit scared of the consequences that we (or someone else) might end up modifying a file in place.\r\n\r\nWould it maybe make sense to adopt ideas from Git LFS for our cache structure, i.e. all files are stored in a shared directory and the name is derived from the used hash function and the hash? Everything else would be stored in formula-specific directories, but is just a symlink into this shared directory, e.g.\r\n\r\n```\r\n-- CACHE\r\n    |-- .blob\r\n    |   \\-- sha256\r\n    |       |-- 61\r\n    |       |   \\-- d1a4e3bdc1846267c984b478e3a5a822a8a14a1169153670a9a61402ab1d40\r\n    |       \\-- dd\r\n    |           \\-- 9c3e37c266e4fefba68e444e2a00538b3c902dd31bf4912d90dca6d830a2a1\r\n    \\-- binutils # <- Formula#name\r\n         \\-- 2.26.1 # <- Formula#pkg_version\r\n             |-- bottle-el_capitan.tar.gz -> ../../.blob/sha256/61/d1a4e3bdc1846267c984b478e3a5a822a8a14a1169153670a9a61402ab1d40\r\n             |-- patch-NAME.EXT -> ../../.blob/sha256/‚Ä¶\r\n             |-- resource-NAME.EXT -> ../../.blob/sha256/‚Ä¶\r\n             \\-- source.tar.gz -> ../../.blob/sha256/dd/9c3e37c266e4fefba68e444e2a00538b3c902dd31bf4912d90dca6d830a2a1\r\n```\r\n\r\nPopulating the cache would be a matter of checking whether a blob with the given hash exists and setting up a symbolic link if it does. If it does not, create a lock on the hash (to avoid parallel download of the same blob) and download it. Cleaning up the cache would become a two-step process: First identify all symbolic links that can be removed and do so, then remove all blobs not referenced by any symbolic link in the cache repository. (The second step should be really cheap because it's just a file system traversal not involving any formula loading.)\r\n\r\nBecause duplicate blobs are now really cheap, we could force *all* things for a specific formula version into a `<formula>/<pkg_version>` directory (as hinted at in the tree above). This would make it extremely easy to figure out the corresponding formula or formula version and cleaning the cache for a given formula would be as simple as recursively wiping a certain directory.\r\n\r\nNot sure if this is indeed a sane idea. Just brainstorming here ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 568
	},
	{
		"id" : 235309793,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-07-26T15:43:13Z",
		"body" : "Regarding the directory structure, I think that source tarballs and patches should be easy to find in the cache, and not obscured by links or excessively-nested dirs or opaquely-named dirs.  Sometimes manual deletion from the cache is necessary, and sometimes manual insertion is convenient.  This will become very difficult if we have an overly complex structure or obscure file names.\r\n\r\nExample case: suppose I want to call `brew cleanup` to do some housekeeping, but I also want to be certain that I don't accidentally delete the source for `foo` because I know the server hosting `foo` has been flakey.  I thus want to go to the cache and make a copy of the source tarball and put it outside the cache for safekeeping.  It shouldn't be a grand project to find the source tarball in the cache.  That tarball can be a few levels deep, but it should be clear how to get there.  E.g.,  `foo/1.0/source/stable/`.  The user should definitely not have to open the formula for foo, copy the checksum, and go hunting in the cache for files matching that checksum.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 568
	},
	{
		"id" : 235313745,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-26T15:54:39Z",
		"body" : "> Example case: suppose I want to call brew cleanup to do some housekeeping, but I also want to be certain that I don't accidentally delete the source for foo because I know the server hosting foo has been flakey. I thus want to go to the cache and make a copy of the source tarball and put it outside the cache for safekeeping. It shouldn't be a grand project to find the source tarball in the cache.\r\n\r\nAssuming we went with my suggestion, this case is covered and it would be trivial to do this, e.g. `cd \"$(brew --cache)/foo/1.0\" && cp * /path/to/safe/location/`. Symbolic links are resolved to the file they are pointing to by `cp` (unless you explicitly tell it to behave differently), thus you'd get a copy of everything needed by version 1.0 of `foo` as regular files, including patches/resources that might be on the same flakey server.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 568
	},
	{
		"id" : 235314970,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-07-26T15:58:08Z",
		"body" : "But that forces the user to the terminal, and to *know* that fact about `cp`.  For users who don't know all that stuff, I think they should still be able to easily navigate to the source tarball, even if it's entirely within the Finder.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 568
	},
	{
		"id" : 235320744,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-26T16:16:22Z",
		"body" : "The user you're describing doesn't sound like a user targeted by Homebrew. But even if that was the case, the use case you're describing is definitely not that of a novice user and thus it's fair to assume they are comfortable with some level of command line usage. I suspect most users (for better or worse) aren't even aware of the cache and don't think about manipulating it directly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 568
	},
	{
		"id" : 235332854,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-07-26T16:56:31Z",
		"body" : "Don't get hung up on the example :) The point is that manual extraction from and insertion into the cache should be as easy as possible, for all users, including the kind of newbs to the commandline that HB bends over backwards to accommodate.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 568
	},
	{
		"id" : 235399072,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-26T20:43:32Z",
		"body" : "@UniqMartin I like the idea but it feels very complicated to me; the goal of this change would be to make things less rather than more complicated. I'm happy for resource deduplication to be done in a second pass; I'm not convinced it's nearly as important.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 568
	},
	{
		"id" : 235399114,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-26T20:43:40Z",
		"body" : "> The point is that manual extraction from and insertion into the cache should be as easy as possible, for all users, including the kind of newbs to the commandline that HB bends over backwards to accommodate.\r\n\r\nAgreed üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 568
	},
	{
		"id" : 235416274,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-26T21:48:32Z",
		"body" : "> The point is that manual extraction from and insertion into the cache should be as easy as possible, for all users, [‚Ä¶]\r\n\r\nI disagree. To me this sounds like an implementation detail that we should be free to change at any time and not like something average users should be messing with.\r\n\r\n> [‚Ä¶], including the kind of newbs to the commandline that HB bends over backwards to accommodate.\r\n\r\nWe accommodate those users on the surface, by hopefully making our interface as easy to understand and explore as possible. If easy messing with implementation details was ever an objective, why am I not aware of any web browser where I can just go into the cache directory (if I even manage to find it) and then can easily cherry pick some files from there?\r\n\r\nMaybe I'm just missing the point of accommodating a very slim minority while potentially all users could benefit from a redesign of the cache that is geared towards being more machine readable. (And I'm not claiming that my idea will achieve this goal. It's just an idea after all.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 568
	},
	{
		"id" : 235420004,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-26T22:03:07Z",
		"body" : "@UniqMartin I don't think the filesystem should be designed to be machine readable rather than human readable. Homebrew has stated that the filesystem (and command stdout) are our interface and I think favouring simplicity is wise as it makes it easier to interoperate with other e.g. Unix tools. In this case a simple solution will be easier to implement and maintain. As mentioned, we can investigate more complicated deduplication later (for which I still favour hard links) but this issue is relatively tightly scoped to a new cache subdirectory format.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 568
	},
	{
		"id" : 234450901,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-22T04:17:02Z",
		"body" : "Sorry, stupid mistake on my part when I fixed things for the `devel` version of Go the other day. Should be alright after a `brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 570
	},
	{
		"id" : 234450289,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-22T04:10:32Z",
		"body" : "> READ THIS: https://git.io/brew-troubleshooting\r\nIf reporting this issue please do so at (not Homebrew/brew):\r\nhttps://github.com/Homebrew/homebrew-nginx/issues\r\n\r\nüòâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 571
	},
	{
		"id" : 234480492,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-22T08:06:02Z",
		"body" : "CC @xu-cheng ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 572
	},
	{
		"id" : 234480606,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-22T08:06:37Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 572
	},
	{
		"id" : 234828965,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T03:31:47Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 572
	},
	{
		"id" : 235144790,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-26T02:25:53Z",
		"body" : "Since I think the underlying changes that this tweaks should be fully reverted, I'm closing this PR, which would be one more commit to have to revert.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 572
	},
	{
		"id" : 234726689,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-23T16:20:11Z",
		"body" : "Are you behind a firewall/proxy/vpn/whatever?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 573
	},
	{
		"id" : 234744489,
		"user" : {
			"login" : "victorhooi"
		},
		"created_at" : "2016-07-23T22:32:51Z",
		"body" : "Yes, I am.\n\nIs that possibly related? Can you get detailed logs/output somewhere to\ncheck?\n\nOn 24 Jul 2016 02:20, \"ilovezfs\" <notifications@github.com> wrote:\n\nAre you behind a firewall/proxy/whatever?\n\n‚Äî\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\n<https://github.com/Homebrew/brew/issues/573#issuecomment-234726689>, or mute\nthe thread\n<https://github.com/notifications/unsubscribe-auth/AAO3K_AYMqQvVICcBD7mYEW9Wx0-zQylks5qYj8_gaJpZM4JSqF6>\n.\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 573
	},
	{
		"id" : 234754603,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-24T03:17:07Z",
		"body" : "@ilovezfs We've been trying to narrow this down for ages. Happened in https://github.com/Homebrew/homebrew-core/pull/2372 seemingly just because there _was_ `brew doctor` output. Doesn't seem to have a single fixed trigger, which is making it irritatingly elusive.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 573
	},
	{
		"id" : 234806123,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-24T22:15:43Z",
		"body" : "@victorhooi Can you try to run `brew update` and then `brew search csvkit --verbose --debug` and paste the output here? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 573
	},
	{
		"id" : 234812389,
		"user" : {
			"login" : "victorhooi"
		},
		"created_at" : "2016-07-25T00:14:39Z",
		"body" : "Sure, here is the output:\r\n\r\n```\r\nbash-3.2$ brew update\r\nUpdated Homebrew from 2b9a283 to 1455aa3.\r\nUpdated 4 taps (caskroom/cask, caskroom/versions, homebrew/core, neovim/neovim).\r\n==> New Formulae\r\ntbox\r\n==> Updated Formulae\r\nafl-fuzz            caddy               cfitsio             eigen               git-annex           gource              heroku              libphonenumber      libxmp-lite         logstalgia          monetdb             notmuch             opencsg             parallel            pup                 rbenv-gemset        tile38              youtube-dl ‚úî\r\nantigen             casperjs            cmake ‚úî             fio                 glew                groovyserv          imagemagick ‚úî       libtiff ‚úî           little-cms2 ‚úî       mal4s               nghttp2             offlineimap         opus                poco                racket              sphinx-doc          xplanetfx\r\nbash-3.2$ brew search csvkit --debug --verbose\r\nError: Broken pipe\r\n/usr/local/Library/Homebrew/utils/github.rb:56:in `write'\r\n/usr/local/Library/Homebrew/utils/github.rb:56:in `puts'\r\n/usr/local/Library/Homebrew/utils/github.rb:56:in `block in api_credentials'\r\n/usr/local/Library/Homebrew/utils/popen.rb:18:in `block in popen'\r\n/usr/local/Library/Homebrew/utils/popen.rb:15:in `popen'\r\n/usr/local/Library/Homebrew/utils/popen.rb:15:in `popen'\r\n/usr/local/Library/Homebrew/utils/github.rb:55:in `api_credentials'\r\n/usr/local/Library/Homebrew/utils/github.rb:121:in `open'\r\n/usr/local/Library/Homebrew/cmd/search.rb:133:in `block in search_tap'\r\n/usr/local/Library/Homebrew/cmd/search.rb:150:in `yield'\r\n/usr/local/Library/Homebrew/cmd/search.rb:150:in `search_tap'\r\n/usr/local/Library/Homebrew/cmd/search.rb:117:in `block (2 levels) in search_taps'\r\nbash-3.2$\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 573
	},
	{
		"id" : 234844614,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T05:35:23Z",
		"body" : "That's valuable information in the backtrace; thanks! What do you get if you run the following?\r\n\r\n```sh\r\ngit credential-osxkeychain get <<<$'protocol=https\\nhost=github.com\\n'\r\n```\r\n\r\n(If it succeeds and you have saved your credentials in the macOS Keychain, don't post the output as it will contain your GitHub password.)\r\n\r\nAnd with the following?\r\n\r\n```sh\r\ngit credential-osxkeychain\r\n```\r\n\r\nMy guess would be that for whatever reason, the Git you're using with Homebrew (see `Git:` line in `brew config` output) lacks the `git-credential-osxkeychain` helper and we simply fail to properly handle this case in our search for credentials we can use with the GitHub API.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 573
	},
	{
		"id" : 234847829,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T06:06:07Z",
		"body" : "Et voil√†: PR #581 should hopefully fix the broken pipe error.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 573
	},
	{
		"id" : 234861417,
		"user" : {
			"login" : "victorhooi"
		},
		"created_at" : "2016-07-25T07:16:09Z",
		"body" : "Hmm, interesting - the `git credential-osxkeychain` commaand definitely doesn't work here:\r\n```\r\nbash-3.2$ git credential-osxkeychain get <<<$'protocol=https\\nhost=github.com\\n'\r\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\r\nbash-3.2$ git credential-osxkeychain\r\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\r\nbash-3.2$\r\n```\r\n\r\nHere is the output of `brew config`:\r\n```\r\nbash-3.2$ brew config\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: 1455aa3da6335b1eeb284e61171cff524c620fa3\r\nLast commit: 7 hours ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 6b78abf4b09e39cb8b81880c6394a7bf02e55229\r\nCore tap last commit: 9 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: octa-core 64-bit haswell\r\nHomebrew Ruby: 2.0.0-p648\r\nClang: 7.3 build 703\r\nGit: 2.8.0 => /usr/local/git/current/bin/git\r\nPerl: /usr/bin/perl\r\nPython: /usr/local/bin/python => /usr/local/Cellar/python/2.7.12/Frameworks/Python.framework/Versions/2.7/bin/python2.7\r\nRuby: /usr/bin/ruby => /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby\r\nJava: 1.8.0_91, 1.8.0_72\r\nOS X: 10.11.6-x86_64\r\nXcode: N/A\r\nCLT: 7.3.1.0.1.1461711523\r\nX11: N/A\r\n```\r\n\r\nNot sure if this tells you much - is there other stuff you'd want to know about this `git` binary?\r\n```\r\nbash-3.2$ /usr/local/git/current/bin/git --version\r\ngit version 2.8.0.rc2\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 573
	},
	{
		"id" : 234863248,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-25T07:22:06Z",
		"body" : "You could try switching to Homebrew's git and see if the problem does indeed go away.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 573
	},
	{
		"id" : 234548416,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-07-22T13:48:16Z",
		"body" : "I can reproduce:\r\n\r\n```\r\n$ curl -sL 'http://lcamtuf.coredump.cx/afl/releases/afl-2.20b.tgz' | shasum -a 256\r\nb7e2d422aa9bc104ddd2bf49f932d55c73627722cc38736124a8febdd64e9431  -\r\n```\r\n\r\n> I'm not sure if the error message below refers to the afl-fuzz archive or to Homebrew in general\r\n\r\nIt refers to the checksum of the archive that‚Äôs recorded in the formula. When a formula get upgraded we write the new archive‚Äôs checksum down so that we can then verify we download the correct one. Getting a SHA256 mismatch usually means either you have a proxy or something that changes what you download (but that‚Äôs not the case here since I can reproduce) or upstream got hacked and someone replaced their archives, or upstream updated the archive without bumping the version.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 574
	},
	{
		"id" : 234560595,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-22T14:34:39Z",
		"body" : "@alex Any chance upstream retagged this since your merged PR yesterday? It did pass CI at the time, so it might have been correct then.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 574
	},
	{
		"id" : 234561576,
		"user" : {
			"login" : "alex"
		},
		"created_at" : "2016-07-22T14:38:27Z",
		"body" : "Yes, upstream did: https://groups.google.com/forum/#!topic/afl-users/tTR5KcoecGs",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 574
	},
	{
		"id" : 234564037,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-22T14:47:25Z",
		"body" : "Thanks for the confirmation! I see someone has already pointed out upstream retags are more problematic than bumping the version a little, so I won't ask us to do that again üòÑ.\r\n\r\nAnyone who wants to file a PR to bump the formula revision & update the SHA256 is welcome to do so, otherwise I'll get to it in half an hour or so.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 574
	},
	{
		"id" : 234569999,
		"user" : {
			"login" : "chmaynard"
		},
		"created_at" : "2016-07-22T15:09:19Z",
		"body" : "@bfontaine Thanks for the clarification.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 574
	},
	{
		"id" : 234591804,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-22T16:32:51Z",
		"body" : "Should be fixed after a `brew update`. Thanks for the report @chmaynard!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 574
	},
	{
		"id" : 234659026,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-22T21:17:06Z",
		"body" : "That's an interesting one. Any idea where the `uuidgen` in `/usr/local/bin` came from?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 575
	},
	{
		"id" : 234725051,
		"user" : {
			"login" : "slackmage"
		},
		"created_at" : "2016-07-23T15:48:23Z",
		"body" : "Not sure exactly. I had uninstalled and reinstalled brew after noticing brew packages weren't on my path since installing zsh. That's when the error appeared.\r\n\r\nAfter removing the uuidgen binary from /usr/local/bin and installing oss-uuid things appear to be working.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 575
	},
	{
		"id" : 234725636,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-23T15:59:17Z",
		"body" : "Did you have MacPorts on this machine?\r\nDid you ever install e2fsprogs?\r\nWhat's `brew doctor` output?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 575
	},
	{
		"id" : 234728464,
		"user" : {
			"login" : "slackmage"
		},
		"created_at" : "2016-07-23T16:56:34Z",
		"body" : "I managed to fix all brew doctor issues before ticketing.\r\n\r\nMacports - yes ages ago before brew :)\r\ne2fsprogs - not match on the fs currently, but I do have macfuse\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 575
	},
	{
		"id" : 234739651,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-23T20:52:02Z",
		"body" : "@xu-cheng @MikeMcQuaid Any reason we're not specifically using `$(/usr/bin/uuidgen)` [here](https://github.com/Homebrew/brew/blob/b1811f2ef3255dab74a0ee42447a5a747b37753d/Library/Homebrew/utils/analytics.sh#L42)? Feels like might be a bit more robust.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 575
	},
	{
		"id" : 234741181,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-23T21:22:10Z",
		"body" : "@DomT4 To provide a fall-back for non-OS X but we could definitely hard-code it for OS X.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 575
	},
	{
		"id" : 234807298,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-24T22:39:57Z",
		"body" : "Thanks Mike! Was on my radar for tonight but I've been out all evening till about... 20 minutes ago.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 575
	},
	{
		"id" : 234739568,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-23T20:50:47Z",
		"body" : "This does cut out a lot of the false positives, which is a üëç for reducing user confusion & me spending less time repeatedly explaining this particular edge case. I remain unconvinced this particular `:linked` check is really a net gain for us at this point, but this at least eases off one edge case.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 576
	},
	{
		"id" : 234774313,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-24T12:20:47Z",
		"body" : "> I remain unconvinced this particular :linked check is really a net gain for us at this point\r\n\r\nIt is important to have it so we can avoid missing formulae whenever there is a version bump.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 576
	},
	{
		"id" : 235739368,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T22:19:50Z",
		"body" : "> It is important to have it so we can avoid missing formulae whenever there is a version bump.\r\n\r\n@xu-cheng In which case: you should be helping explain this to contributors who are struggling with this in homebrew/core.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 576
	},
	{
		"id" : 234754355,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-24T03:09:57Z",
		"body" : "It'll be getting confused because it's not in `Library/Taps`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 578
	},
	{
		"id" : 235450165,
		"user" : {
			"login" : "CamJN"
		},
		"created_at" : "2016-07-27T00:50:41Z",
		"body" : "Ok so I published my tap with the intention of using `brew tap` and now homebrew is prompting for my github username & password, which won't work b/c of 2FA.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 578
	},
	{
		"id" : 235455933,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T01:32:00Z",
		"body" : "> Ok so I published my tap with the intention of using brew tap and now homebrew is prompting for my github username & password\r\n\r\nIt'll only do that if it's a private repo or a 404 (i.e. you typod the name).\r\n\r\n> github username & password, which won't work b/c of 2FA.\r\n\r\nhttps://help.github.com/articles/providing-your-2fa-authentication-code/#through-the-command-line\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 578
	},
	{
		"id" : 235455964,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T01:32:12Z",
		"body" : "> Renaming my repo to have a `homebrew-` prefix fixed that, but it's annoying.\r\n\r\nThat's how tap repositories are supposed to be named and I don't think we're going to change that. One reason is that it would make accidentally cloning arbitrary repositories that are definitely not taps with `brew tap` much more likely. However, `brew help tap` would have revealed that you can arbitrarily diverge from this naming convention and even host your tap repository anywhere. This should have worked before the rename:\r\n\r\n```console\r\n$ brew tap CamJN/passenger-enterprise https://github.com/CamJN/passenger-enterprise\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 578
	},
	{
		"id" : 235486858,
		"user" : {
			"login" : "CamJN"
		},
		"created_at" : "2016-07-27T05:06:27Z",
		"body" : "Thanks",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 578
	},
	{
		"id" : 234755458,
		"user" : {
			"login" : "patrickhousley"
		},
		"created_at" : "2016-07-24T03:41:03Z",
		"body" : "I was able to get wine installed by installing winetricks. Not sure if thats a good thing :).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 579
	},
	{
		"id" : 234772927,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-24T11:48:32Z",
		"body" : "Fixed via https://github.com/Homebrew/homebrew-core/commit/d58f19cfe052ee357ad6885d62ee7fca8c264cf3 & https://github.com/Homebrew/homebrew-core/commit/c8f9c5681adb4f18e415adeb59b3841e501b8861. Thanks for the report!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 579
	},
	{
		"id" : 234857075,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-25T06:59:53Z",
		"body" : "Can we do:\r\n```ruby\r\nbegin\r\n github_credentials = Utils.popen ...\r\nrescue\r\nend\r\n```\r\n\r\nOr\r\n```ruby\r\n github_credentials = Utils.popen (...) rescue \"\"\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 234864431,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-25T07:26:13Z",
		"body" : "Would this be solved by the proposal to vendor git?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 234876938,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T08:05:09Z",
		"body" : "> Can we do:\r\n\r\nYes, if that seems preferable. The current version is optimized for a minimal diff (no need for a dedicated `begin` block and adjustment of the indentation) and since no other part of the code is doing I/O it's essentially the same. (But I can definitely see the benefit of bringing the `rescue` closer to the source of the exception.)\r\n\r\n> Or\r\n\r\nNo. RuboCop objects to `rescue` as a modifier and I agree. It's too important to be stuffed away at the end of the line where it's easier to overlook and the modifier doesn't allow to specify the exceptions that should be handled, making it more likely to unintentionally handle other unrelated exceptions that shouldn't be silently swallowed.\r\n\r\n> Would this be solved by the proposal to vendor git?\r\n\r\nI think vendoring Git would reduce the likelihood of this happening, but I'm pretty sure there can be other error conditions that lead to an early exit without accepting any input even if the helper is present. (And I think the vendored Git was only meant to be used if the host Git is deemed too old, so it wouldn't actually help in many cases‚Äîunless I'm misremembering this part.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 234879755,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-25T08:13:34Z",
		"body" : "It seems odd that we're getting a broken pipe instead of an explicit error? Is this caused by some fragility in Utils.popen?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 234894157,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T08:56:31Z",
		"body" : "Our version of `popen` redirects standard error to `/dev/null`, thus any error messages will be discarded, but the result of the invocation (the exit code) will still be reflected in `$?` after the block given to `popen` terminates.\r\n\r\nThe process we're talking to is free to terminate or stop accepting input at any time, thus the broken pipe error can literally happen in the middle of a `puts`/`write` operation and (to my knowledge) there isn't a more elegant/correct way of handling this than rescuing `Errno::EPIPE`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 234895251,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-25T08:59:28Z",
		"body" : "Would this happen if `git credential-osxkeychain get` was executed in a shell instead?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 234911606,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T09:57:50Z",
		"body" : "This entirely depends on the program that is feeding input to the `git credential-osxkeychain get` process and how it decided to handle or not handle this case. The default signal handler for `SIGPIPE` is to simply kill the program as soon as a `write` fails due to a broken pipe. The other option is to have a custom handler for `SIGPIPE` or to mask this signal. The latter causes `write` to return `EPIPE` which is translated to the exception handled here.\r\n\r\nSo yes, in some sense this is also happening if executed in a shell, but we don't usually see the broken pipe error as it isn't considered a true error in most circumstances. E.g. in `cat file.txt | head -n 1` it is actually desirable that `head` dies after it has output the first line, so that the pipe is broken and `cat` can learn its pointless to continue reading the input file. (Whether `cat` internally relies on the default `SIGPIPE` behavior or checks for the `EPIPE` return value I don't know.)\r\n\r\nBecause the Homebrew process is doing a lot more than just feeding input to that helper (unlike in the `cat` example above), it makes sense to actually handle the broken pipe and then move on instead of being killed by the OS.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 234915788,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-25T10:18:00Z",
		"body" : "Why it preferable to return `[]` rather than give an explicit, custom error to the users? Won't the empty search output be confusing when they know what they're searching for does indeed exist?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 234922643,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T10:54:29Z",
		"body" : "> Won't the empty search output be confusing when they know what they're searching for does indeed exist?\r\n\r\nIt's not the search result that is empty, but the API credentials. Consequently, the code will continue to make unauthenticated GitHub API requests and either return the desired search results or report back with an error that the rate limit has been exceeded. That error also suggests to create and set a token, thus a possibly incomplete search result shouldn't be causing much confusion‚Äîcertainly less than the broken pipe error. (See my top comment for an example output for the rate limit case.)\r\n\r\n> Why it preferable to return `[]` rather than give an explicit, custom error to the users?\r\n\r\nBecause it is just one of several options and not having the credentials available this way isn't a fatal condition. We can still try and often succeed with an unauthenticated request. Maybe it's an unusual configuration on macOS, but it's still perfectly legal to have a Git installation without this credentials helper and making its absence stop the rest of the processing in its tracks didn't feel appropriate. If we wanted to make the user aware of this issue, I think the best thing we can do is output a warning. (I'm happy to make adjustments to the error reporting if my assessment of the situation isn't as accurate as I believe it to be.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 234923108,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-25T10:57:04Z",
		"body" : "That makes sense. However, at least on macOS, I'm not sure why we'd want to support a git lacking this feature. We could simply require the use of an appropriate git, no?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 234924076,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-25T11:02:21Z",
		"body" : "In any case, I think we should consider requiring a git that has this feature, but it seems fine to :ship: this since you were saying you believe this can occur in some other scenario besides lacking the helper too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 234932442,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T11:50:56Z",
		"body" : "Updated!\r\n\r\n1. Refactored the fix to address feedback on code style/organization and moved some work to a helper method to avoid excessively deep nesting due to another `begin` block.\r\n\r\n2. Did some minor refactoring to simplify the extraction code.\r\n\r\n3. Fixed wrong element order when using `HOMEBREW_GITHUB_API_{USERNAME,PASSWORD}`. (Currently undocumented and probably not very widely used, if nobody noticed that the password and the user name were swapped.)\r\n\r\nI'm happy to move the 2nd and/or 3rd commit to a separate PR, but I think this PR still makes sense with these additional changes on top if reviewed commit by commit.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 234933851,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-25T11:58:36Z",
		"body" : "Should this go in a separate method, too?\r\n\r\n```\r\n+    credentials = Hash[credentials.scan(/^(username|password)=(.*)$/)]\r\n+    if credentials.key?(\"username\") && credentials.key?(\"password\")\r\n+      credentials.values_at(\"password\", \"username\")\r\n+    else\r\n+      []\r\n+    end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 234938872,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T12:25:55Z",
		"body" : "How would further splitting this up benefit the code?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 234939318,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-25T12:28:07Z",
		"body" : "The rescue still seems to be a bit separated from where @xu-cheng was actually saying he'd prefer it be, no?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 235092915,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-25T21:34:57Z",
		"body" : "A few comments otherwise üëç from me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 235426936,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-26T22:34:03Z",
		"body" : "Updated to address all comments and to drop the refactoring due to questionable benefit.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 235432278,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-26T23:01:48Z",
		"body" : "LGTM üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 235435114,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-26T23:16:50Z",
		"body" : "> The rescue still seems to be a bit separated from where @xu-cheng was actually saying he'd prefer it be, no?\r\n\r\n@ilovezfs Thanks for reminding me of that! Are you happy with the current simplified diff?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 235481244,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-27T04:30:08Z",
		"body" : "@UniqMartin this looks great.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 235694227,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T19:30:57Z",
		"body" : "Thanks everyone for your feedback and your patience while I iterated through some revisions of this PR that were less than ideal! I'm now much more happy with the outcome.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 581
	},
	{
		"id" : 234904658,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-25T09:27:02Z",
		"body" : "I'm afraid we here on the macOS side of things can't help you as you seem to be using Linuxbrew on Linux. The folks over at [Linuxbrew](https://github.com/Linuxbrew) are more likely to be able to help you and since this seems to be a formula-specific issue the most appropriate place for a report should be their copy of the core formula repository: [Linuxbrew/homebrew-core](https://github.com/Linuxbrew/homebrew-core). Thanks for understanding and good luck!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 582
	},
	{
		"id" : 235095498,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-25T21:44:51Z",
		"body" : "You can't do Homebrew Time Machine restores from one Mac to another as Homebrew builds binaries for your specific machine. Instead use `brew bundle dump` and `brew bundle` to migrate.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 583
	},
	{
		"id" : 235199027,
		"user" : {
			"login" : "deepj"
		},
		"created_at" : "2016-07-26T08:38:34Z",
		"body" : "@MikeMcQuaid Ah, I see. You are correct. Is it possible to add some detection in `brew doctor` for these cases? I think it would help a lot.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 583
	},
	{
		"id" : 235399257,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-26T20:44:08Z",
		"body" : "We can't really detect this, unfortunately.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 583
	},
	{
		"id" : 235399480,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-26T20:44:56Z",
		"body" : "@deepj The errors you're likely seeing are with your `git` failing; have you tried running that command manually and seeing what the failures are? ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 583
	},
	{
		"id" : 235004342,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-25T16:22:37Z",
		"body" : "# Problem\r\n\r\nThe question raised in this PR is using long git commit hashes and short git commit hashes.\r\nThe format of the HEAD-versions we use is the following: `HEAD-<version>_<revision>`, where version is a commit hash. There are plenty of download strategies, but I refer only to `GitDownloadStrategy` here, because others have either other 'commit' structure or no short-hashes support.\r\n\r\nTo compare two HEAD version we need to compare commit hashes. And this is what this PR is about. Suppose we only store long hashes. So, to detect if installed HEAD-version is outdated we need to compare upstream hash of the project with hash used in installed HEAD-version prefix. If they are the same, then installed HEAD is up-to-date, otherwise we have outdated HEAD.\r\n\r\nLet's now suppose we use short hashes. What we do to detect outdated versions is a) calling `VCSDownloadStrategy#last_commit` which goes to cached location and gets the hash and b) compare returned `last_commit` with HEAD-prefix. If it any time `last_commit` increases its length, then installed HEAD-prefix cannot be equal to it anymore, thus, it's outdated.\r\n\r\nMore precisely:\r\n\r\n```bash\r\n$ ls /usr/local/Cellar/ack\r\nHEAD-a0a0a0a\r\n\r\n==> Interactive Homebrew Shell\r\nExample commands available with: brew irb --examples\r\n2.0.0-p481 :001 > Formulary.factory(\"ack\").head.downloader.last_commit\r\n => \"a0a0a0a0\"\r\n2.0.0-p481 :002 > ^D\r\n```\r\nThat means that `a0a0a0a` is no longer unique within the repo, but it was when we installed `HEAD-a0a0a0a`, therefore HEAD is outdated.\r\n\r\nThe problem arises when we introduce `GitGitHubDownloadStrategy` to be able to detect outdated versions without fetching a repository. `GitGitHubDownloadStrategy#last_commit` returns full-length hash. The problem is that we can't check installed hash and fetched hash for equality anymore. What we can is to perform `start_with?` check, but it still can't guarantee the version is up-to-date.\r\n\r\nExample:\r\n\r\n```\r\n$ ls $(brew --cellar)/ack\r\nHEAD-b090608c\r\n```\r\n\r\nLet's now suppose we want to check if `HEAD-b09060c` is outdated\r\nusing GitHub API, which return full-length prefix and let's\r\nsuppose it returns the following hash:\r\n\r\n```\r\nb090608c49643099a47247d79ac9ca80d05c2ee0\r\n```\r\n\r\nHow do we treat it? Is the HEAD version outdated or not? Suppose\r\nit's not since prefixes are the same. After a while we check it\r\nagain and GitHub API returns the following hash:\r\n\r\n```\r\nb090608c00000000000000000000000000000000\r\n```\r\n\r\nSo, we still think our installed HEAD is up-to-date, however\r\nthat's not true.\r\n\r\n# Workaround\r\n\r\n* Store long hashes in Tab. Cons: complicate.\r\n* Use short commits and use `==` for `VCSDownloadStrategy` and `start_with?` for `GitHubDownloadStrategy`. Cons: there is a possibility we get outdated version (see the example).\r\n* Store long hashes everywhere. Cons: long hashes in `outdated` outputs and long prefixes.\r\n\r\nFor now long hashes used everywhere in the code and even if we use short hashes for git we cannot escape from long hashes for other VCSs.\r\n\r\n@xu-cheng ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 584
	},
	{
		"id" : 235479763,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T04:15:32Z",
		"body" : "> - Store long hashes in Tab. Cons: complicate.\r\n\r\nI think this would be the cleanest solution. I haven't spent much time thinking about how much this complicates the whole design, so take this with a grain of salt.\r\n\r\n> - Use short commits and use `==` for VCSDownloadStrategy and `start_with?` for `GitHubDownloadStrategy`. Cons: there is a possibility we get outdated version (see the example).\r\n\r\nI don't think this is an unreasonable strategy. While this won't be perfect, the likelihood of this failing would be close to 0% if the shortened hash isn't overly short, e.g. 16 characters. Even if this wasn't sufficient to uniquely identify all commits, it would only affect a few commits and in extremely big Git repositories with millions if not billions of commits and objects.\r\n\r\n> - Store long hashes everywhere. Cons: long hashes in `outdated` outputs and long prefixes.\r\n\r\nThis could be partially addressed by using a more efficient encoding that uses fewer characters at the expense of no longer having hex digits and thus adding an additional layer of abstraction that might complicate matters. E.g. by re-encoding the full commit hash in Base32, its length could be shortened from 40 to 32 characters. (Just wanted to mention this theoretical possibility. I don't think this is a practical solution due to its complexity.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 584
	},
	{
		"id" : 235575895,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-27T12:54:27Z",
		"body" : "@vladshablinsky can you give a list of exemple prefix for different VCS strategy? I think there is no much advantage to short git commit if we cannot short commit for other VCS installation. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 584
	},
	{
		"id" : 235577124,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-27T12:59:24Z",
		"body" : "Also, @vladshablinsky shouldn't be this PR ready to be merged(after review)? If so, let's remove WIP tag in the title. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 584
	},
	{
		"id" : 235579248,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-27T13:08:18Z",
		"body" : "@Homebrew/maintainers This PR should be the final one for @vladshablinsky's GSoC project. The only remaining problem is how we should store VCS commit in the prefix, as mentioned in the above.\r\n\r\nAll of implementations for better supporting HEAD have been done. Please give your valuable comments. Thanks. \r\n\r\nFinally thanks for @vladshablinsky to finish his project way before schedule. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 584
	},
	{
		"id" : 235627966,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-27T15:45:15Z",
		"body" : "> shouldn't this PR be ready to be merged(after review)? If so, let's remove WIP tag in the title.\r\n\r\nI had three questions left regarding the project:\r\n\r\n* 1. Seems like [`curl_output`](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/utils/curl.rb#L22-L34) never fails, so we probably need something like this:\r\n```ruby\r\n  def fetch_last_commit\r\n    return unless head?\r\n    commit = github_last_commit || super\r\n    version.update_commit(commit)\r\n    commit\r\n  end\r\n```\r\n\r\n* 2. Do we need to check that last fetched commit not `nil`, maybe raise an Error or something?\r\n* 3. How do I change `print_outdated_json` behaviour if `--fetch-HEAD` flag passed.\r\n\r\nAlso, what if we changhe `--fetch-HEAD` to `--fetch-head`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 584
	},
	{
		"id" : 235636315,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T16:11:44Z",
		"body" : "> * 1. Seems like [`curl_output`](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/utils/curl.rb#L22-L34) never fails, [‚Ä¶]\r\n\r\nIt does, but you have to check the status yourself after invoking it, e.g.:\r\n\r\n```ruby\r\noutput, errors, status = curl_output(‚Ä¶)\r\nhandle_failure unless status.success?\r\n```\r\n\r\n(See [`GitHub.open`](https://github.com/Homebrew/brew/blob/9f6cb8ed040d37d9706ee2b26e2c0a414f9a4660/Library/Homebrew/utils/github.rb#L149-L163) for a practical example where this is used to handle the error case.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 584
	},
	{
		"id" : 236161862,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-07-29T11:54:36Z",
		"body" : "<strike>Still can't understand why it [fails on Maverics](http://bot.brew.sh/job/Brew%20Pull%20Requests/1117/version=mavericks/testReport/junit/brew-test-bot/mavericks/tests/). I thought maybe the problem was in parentheses, so I installed ruby 1.8.7 and tried some silly stuff like this:\r\n\r\n```ruby\r\ndummy_f = \"f\"\r\n\r\ndef dummy_f.outdated_versions(options = {})\r\n  [self, options.keys]\r\nend\r\n\r\ndef dummy_refute_predicate o1, op, msg = nil\r\n  raise \"Raised with msg: #{msg}\" if o1.__send__(op)\r\nend\r\n\r\ndummy_refute_predicate dummy_f.outdated_versions(:fetch_head => true), :empty?\r\n```\r\n\r\nBut it all works good, so, I don't know what is the reason of the fail. </strike>",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 584
	},
	{
		"id" : 236862842,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-02T10:14:56Z",
		"body" : "Great work here @vladshablinsky; made a few comments about nits but nothing major here. Once they are fixed I'm üëç on @xu-cheng üö¢ing this when he's happy.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 584
	},
	{
		"id" : 237582329,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-08-04T15:06:56Z",
		"body" : "@xu-cheng there is some code uncovered in `cmd/outdated`, so maybe some new integration tests should be added, shouldn't they? Other things seems to be covered where it's possible. `GitHubDownloadStrategy` is not covered and it's probably expected, but most of the other code is covered.\r\n\r\nNote about CVS:\r\n\r\nI spent some time trying to get last revision (commit hash) in the CVS repository, it seems there is no way to do that just running one command and not scanning through all the data CVS outputs for each file. So, I think it'll be better to just have timestamps as a unique identifier for CSV.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 584
	},
	{
		"id" : 237838228,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-05T12:31:03Z",
		"body" : "> there is some code uncovered in cmd/outdated, so maybe some new integration tests should be added, shouldn't they? Other things seems to be covered where it's possible. GitHubDownloadStrategy is not covered and it's probably expected, but most of the other code is covered.\r\n\r\nIt is preferable to have the test as well. But it can be done in follow up PR.\r\n\r\n---\r\nI have tested this PR. Once you fix the problem I mentioned in `cmd/outdated` I think we can merge PR and improve other matters in follow up PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 584
	},
	{
		"id" : 238023349,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-06T13:29:24Z",
		"body" : "Thanks @vladshablinsky. Congratulation on finishing the GSoC project.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 584
	},
	{
		"id" : 238048960,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T21:12:35Z",
		"body" : "Great work! :tada:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 584
	},
	{
		"id" : 238184476,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T09:21:43Z",
		"body" : "Great work on this project @vladshablinsky!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 584
	},
	{
		"id" : 235098958,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-25T21:58:42Z",
		"body" : "You seem to have two `homebrew/core`s, which is unusual. Can you provide the output of:\r\n\r\n```bash\r\nls $(brew --prefix)/Library/Taps/homebrew\r\n```\r\n\r\nYour `brew config` could be useful as well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235099529,
		"user" : {
			"login" : "lewisinc"
		},
		"created_at" : "2016-07-25T22:00:56Z",
		"body" : "`ls $(brew --prefix)/Library/Taps/homebrew` yields\r\n`homebrew-completions/ homebrew-core/        homebrew-homebrew/`\r\n`brew config` yields\r\n```HOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew\r\nHEAD: 1455aa3da6335b1eeb284e61171cff524c620fa3\r\nLast commit: 22 hours ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 14eaa685169edf4283e1dadd5818646f67d09f30\r\nCore tap last commit: 5 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: quad-core 64-bit haswell\r\nHomebrew Ruby: 2.0.0-p648\r\nClang: 7.3 build 703\r\nGit: 2.9.2 => /usr/local/bin/git\r\nPerl: /usr/local/bin/perl => /usr/local/Cellar/perl/5.24.0_1/bin/perl\r\nPython: /Volumes/Datacron/anaconda/bin/python => /Volumes/Datacron/anaconda/bin/python3.5\r\nRuby: /usr/local/bin/ruby => /usr/local/Cellar/ruby/2.3.1/bin/ruby\r\nJava: N/A\r\nOS X: 10.11.6-x86_64\r\nXcode: 7.3.1\r\nCLT: 7.3.1.0.1.1461711523\r\nX11: 2.7.9 => /opt/X11```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235100149,
		"user" : {
			"login" : "lewisinc"
		},
		"created_at" : "2016-07-25T22:03:29Z",
		"body" : "I think it's worth noting that the `homebrew-homebrew/` folder is empty.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235104225,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-07-25T22:21:05Z",
		"body" : "@lewisinc FYI I edited your comment to fix the code block; you have to make a newline after and before the triple-backquotes otherwise it shows as inline code:\r\n\r\n    ```this doesn't\r\n    work.```\r\n    \r\n    ```\r\n    this does.\r\n    ```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235183205,
		"user" : {
			"login" : "lewisinc"
		},
		"created_at" : "2016-07-26T07:21:09Z",
		"body" : "Well, thanks for the tip - I'll try to format things properly in the future. This double listing thing is pretty annoying, though. Any tips on whether this is a bug or just a faulty installation / how does I fix?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235270605,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-26T13:40:55Z",
		"body" : "> I think it's worth noting that the `homebrew-homebrew/` folder is empty.\r\n\r\nI think in this case it's perfectly safe and also the correct solution to just delete this directory. This should resolve the issue. Normally, this directory should have never been created.\r\n\r\n> Any tips on whether this is a bug or just a faulty installation / how does I fix?\r\n\r\nI suspect it is a subtle bug in our code that allows this directory to be created. Do you have any idea where it came from? Maybe have a look at the creation and/or modification date of that directory to see when it came into existence and think about whether you can draw a connection to something you did with Homebrew. (You're not the first one to report this issue, but we currently don't have any clues what is causing this, so every bit of information helps.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235361995,
		"user" : {
			"login" : "lewisinc"
		},
		"created_at" : "2016-07-26T18:31:59Z",
		"body" : "It looks like the creation date of the file is the same day and time that I tapped into `homebrew-completions`. I'm attaching relevant command I ran in my bash console around that time.\r\n```\r\nbrew search bash-completion\r\nbrew info bash-completion\r\nbash --verison\r\nbash --version\r\nbrew info bash\r\nbrew search bash-completion\r\nbrew info bash-completion\r\nbrew search bash-completion\r\nbrew info bash-completion\r\nbrew info bash\r\nbrew install bash\r\nwhich bash\r\nbash --version\r\nchsh\r\nchpass -s /usr/local/Cellar/bash/4.3.46/bin/bash\r\nchsh\r\nchsh\r\nbrew install bash-completiob\r\nbrew install bash-completion\r\ncd /usr/local/etc/bash_completion.d/\r\nls -n /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion\r\nls -n /Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion\r\nls -n /Applications/Docker.app/Contents/Resources/etc/docker-machine.bash-completion\r\nls /Applications/Docker.app/Contents/Resources/etc/\r\nln -s /Applications/Docker.app/Contents/Resources/etc/docker-machine.bash-completion\r\nln -s /Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion\r\nln -s /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion\r\nbrew search git\r\nbrew info git-integration\r\nbrew search completion\r\nbrew info homebrew/completions/apm-bash-completion\r\nbrew tap homebrew completions\r\nbrew tap homebrew/homebrew/completions/apm-bash-completion\r\nbrew tap homebrew/completions\r\nbrew info homebrew/completions/apm-bash-completion\r\nbrew install homebrew/completions/apm-bash-completion\r\nls /usr/local/etc/bash_completion.d/\r\nls /usr/local/etc/bash_completion.d/ | atpm\r\nls /usr/local/etc/bash_completion.d/ | rep apm\r\nls /usr/local/etc/bash_completion.d/ | grep apm\r\nsource /usr/local/etc/bash_completion.d/apm\r\n```\r\n\r\nI don't know how much of this is actually helpful, but it's what I can think of. Maybe a malformed `tap` command created a directory it shouldn't have or something. Let me know if you'd like any more info.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235363663,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-07-26T18:37:07Z",
		"body" : "~~~\r\nbrew tap homebrew/homebrew/completions/apm-bash-completion\r\n~~~\r\nlooks suspicious to me",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235387895,
		"user" : {
			"login" : "lewisinc"
		},
		"created_at" : "2016-07-26T20:04:54Z",
		"body" : "Okay, so I deleted the folder `homebrew-homebrew` and I'm no longer experiencing the issue I was before. Maybe it would be a good idea for `brew doctor` to look for empty folders such as the one I just deleted and remove them?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235421172,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-26T22:08:31Z",
		"body" : "> Maybe it would be a good idea for brew doctor to look for empty folders such as the one I just deleted and remove them?\r\n\r\n@lewisinc Yes, this would be a good idea üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235424312,
		"user" : {
			"login" : "lewisinc"
		},
		"created_at" : "2016-07-26T22:21:59Z",
		"body" : "I think I'm gonna try and implement that and make a pull request, if that's cool.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235427070,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-26T22:34:38Z",
		"body" : "@lewisinc Please do! [This document](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md#how-to-open-a-homebrew-pull-request-and-get-it-merged) should help and I'm happy to walk you through anything else.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235427305,
		"user" : {
			"login" : "lewisinc"
		},
		"created_at" : "2016-07-26T22:35:48Z",
		"body" : "Cool! Is there an IRC/Gitter channel I can join as well?\n\n> On Jul 26, 2016, at 3:08 PM, Mike McQuaid <notifications@github.com> wrote:\n> \n> Maybe it would be a good idea for brew doctor to look for empty folders such as the one I just deleted and remove them?\n> \n> @lewisinc <https://github.com/lewisinc> Yes, this would be a good idea üëç\n> \n> ‚Äî\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub <https://github.com/Homebrew/brew/issues/585#issuecomment-235421172>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AGcShlX6b2i-pUFzDgofFZpAyKmH_n6pks5qZoVkgaJpZM4JUWGe>.\n> \n\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235431964,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-26T23:00:17Z",
		"body" : "#machomebrew on Freenode but not everyone (i.e. me) is there.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235448581,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T00:39:31Z",
		"body" : "> It looks like the creation date of the file is the same day and time that I tapped into `homebrew-completions`. I'm attaching relevant command I ran in my bash console around that time.\r\n\r\nThanks! This was super helpful! The problematic command is:\r\n\r\n```console\r\n$ brew tap homebrew/homebrew/completions/apm-bash-completion\r\n==> Tapping homebrew/homebrew/completions/apm-bash-completion\r\nCloning into '/opt/brewery/dummy/Library/Taps/homebrew/homebrew-homebrew/completions/apm-bash-completion'...\r\nfatal: repository 'https://github.com/Homebrew/homebrew-homebrew/completions/apm-bash-completion/' not found\r\nError: Failure while executing: git clone https://github.com/Homebrew/homebrew-homebrew/completions/apm-bash-completion /opt/brewery/dummy/Library/Taps/homebrew/homebrew-homebrew/completions/apm-bash-completion\r\n```\r\n\r\nThis creates the empty directory that ended up in your installation. I guess we should be a tad more careful with validating tap names (a name with three slashes is certainly not valid).\r\n\r\nThe other reason why this is causing the duplicated output is that `homebrew/homebrew` is somewhat special due to legacy reasons. Just try `brew tap-info homebrew/homebrew` in a Homebrew installation without that bogus empty directory. It will show you the information for `homebrew/core` instead.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235454587,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T01:21:56Z",
		"body" : "I created a PR that prevents this from happening in the future: #591.\r\n\r\nHowever, adding a check to `brew doctor` might still be useful for those who have already ended up with the empty directory that causes the duplicate `brew update` output. (And other empty directories as many invalid tap names will cause an empty directory to be created.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 585
	},
	{
		"id" : 235097858,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-25T21:53:56Z",
		"body" : "Homebrew's tap mechanism is based around `git`, and if you attempt to `git clone` something on GitHub that GitHub can't \"see\" as public the assumption is made that you're attempting to clone a private repository:\r\n```\r\n~> git clone https://github.com/example/pigeon.git\r\nCloning into 'pigeon'...\r\nUsername for 'https://github.com':\r\n```\r\n\r\nThat's what you're seeing. Why you're seeing it is because there's a typo in your command, you actually want:\r\n```\r\nbrew install homebrew/php/php56-imagick --without-homebrew-php\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 586
	},
	{
		"id" : 235481883,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T04:36:41Z",
		"body" : "> This change fixes many of the existing bugs reported by `brew style` for `Homebrew/test`.\r\n\r\nSorry if I'm being a bit pedantic here, but ‚Äúbugs‚Äù feels like to strong of a word. There's nothing inherently wrong or broken about the code, it's just that it doesn't fully conform to certain code style guidelines.\r\n\r\nAside from this there's also a minor issue with the commit subject (and PR title). The way I tend to read them is `<area of changed code>: <what was changed>` and in this spirit a more fitting subject would be `tests: fix code style issues` or something similar.\r\n\r\n> - `Method definitions must not be nested. Use lambda instead.`\r\n>   - these method definitions all (or mostly) seem to be enclosed within `formula do` blocks; does it make sense to convert these to lambdas? (I haven't yet figured out a way to do so that passes `brew tests`.)\r\n\r\nThis is one of those cases where refactoring is unlikely to make sense and RuboCop suggests a solution that doesn't apply because it fails to understand the full context of the surrounding code. Depending on whether this affects individual lines or short blocks of code, the best solution is to suppress those complaints by temporarily disabling one or more cops, as [detailed in the RuboCop documentation](http://rubocop.readthedocs.io/en/latest/configuration/#disabling-cops-within-source-code).\r\n\r\n> - `Use snake_case for method names.`\r\n>   - examples of these methods include `test_check_DYLD_vars` and `test_create_DATA`; it seems like these acronyms are best kept as-is.\r\n\r\nTrue. Silencing the relevant cop is the best way to address this and to drop the violation count.\r\n\r\n> - `Prefer to_s over string interpolation.`\r\n>   - these bugs are easy to fix, but many instances of string interpolation seem to be tolerated by `brew style` (e.g., in `test_integration_cmds`; why is that?\r\n\r\nThis mostly sounds like a misunderstanding to me, i.e. in which contexts this suggestion applies. `\"#{something}\"` is an unnecessary use of string interpolation because there's only the variable `something` and no surrounding text or other variables, thus `something` (if it is a string) or `something.to_s` (if it can be converted to a string) is more appropriate. \"#{something}\\n\" instead is a perfectly fine use of string interpolation.\r\n\r\n> I'm sensing that Rubocop's opinions are meant to be guidelines (rather than gospel), but maybe I'm wrong!\r\n\r\nIndeed, they are guidelines and where possible, we have tweaked the settings because our preferred style doesn't fully align with what RuboCop considers to be the best default. It can sometimes make sense to tweak a rule instead of ‚Äúfixing‚Äù our code, though most suggestions and defaults are good (and just show how old and diverse some of our code base is).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 587
	},
	{
		"id" : 235704292,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-07-27T20:07:26Z",
		"body" : "Sorry -- I accidentally closed this PR when I decided to rename my local and remote branches (without realizing the effect this would have on the PR). üò≥  Working on addressing the feedback...",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 587
	},
	{
		"id" : 236000257,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-07-28T19:30:56Z",
		"body" : "> Sorry if I'm being a bit pedantic here, but ‚Äúbugs‚Äù feels like to strong of a word. There's nothing inherently wrong or broken about the code, it's just that it doesn't fully conform to certain code style guidelines.\r\n> \r\n> Aside from this there's also a minor issue with the commit subject (and PR title). The way I tend to read them is `<area of changed code>: <what was changed>` and in this spirit a more fitting subject would be `tests: fix code style issues` or something similar.\r\n> \r\n\r\nNo worries, that makes sense to me. I thought I remembered hearing these issues referred to as \"bugs\" some time ago, but I see that that isn't the most accurate way to refer to them. I've updated the commit and PR title, though the branch still carries the old name. üò¨ \r\n\r\nThanks for pointing me to the Rubocop documentation on temporarily disabling cops. I've done this for the **`Method definitions must not be nested`** and **`Use snake_case for method names`** warnings. I followed the example of some [existing calls to `rubocop:disable`](https://github.com/Homebrew/brew/blob/9e7b8c61a99c4d4c69da36f95759e375b7a4e116/Library/Homebrew/compat/hardware.rb#L3-L4) and included a code comment explaining the purpose of disabling Rubocop (one comment per type of cop, per file).\r\n\r\nI also removed the string interpolation in [`test_formulary`](https://github.com/Homebrew/brew/pull/587/files#diff-37389a0e65da3f23aad3b3b96636d8e0L134) and [`test_tap`](https://github.com/Homebrew/brew/pull/587/files#diff-3676702e08834bbec8ee89f8f9869981L184) since it was unnecessary in both instances (I hadn't actually examined these offenses before).\r\n\r\nIt's probably obvious that I approached this task with haste and impatience, so I've learned my lesson. Thank you @UniqMartin and @DomT4 for taking a closer look here! üòÅ \r\n\r\n9 Rubocop offenses remain in `Homebrew/test`; I hope it's OK for these to stay on the back-burner for now:\r\n```\r\n== test_dependency_collector.rb ==\r\nC: 10: 40: Avoid the use of the case equality operator ===.\r\n== test_ENV.rb ==\r\nW: 31:  5: Do not suppress exceptions.\r\nW: 31:  5: Avoid rescuing the Exception class. Perhaps you meant to rescue StandardError?\r\n== test_formula.rb ==\r\nW:511: 23: Comparison of something with itself detected.\r\nC:523: 29: Do not use semicolons to terminate expressions.\r\n== test_patching.rb ==\r\nC:126:  9: Avoid multi-line chains of blocks.\r\nC:140:  9: Avoid multi-line chains of blocks.\r\nC:239:  9: Avoid multi-line chains of blocks.\r\n== testing_env.rb ==\r\nC: 45:  7: Replace class var @@log with a class instance var.\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 587
	},
	{
		"id" : 236860988,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-02T10:06:13Z",
		"body" : "@eirinikos Nice work! Added a few comments and then we can üö¢ this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 587
	},
	{
		"id" : 236996135,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-08-02T18:25:19Z",
		"body" : "@MikeMcQuaid Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 587
	},
	{
		"id" : 238006260,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T05:06:13Z",
		"body" : "Merged in 8ec59253df47b9e597bc6a5ad488c42e035c0351. Thank you for another great contribution to Homebrew, @eirinikos! :tada:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 587
	},
	{
		"id" : 238184287,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T09:20:49Z",
		"body" : "Nice work @eirinikos üëè ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 587
	},
	{
		"id" : 235676018,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-07-27T18:27:30Z",
		"body" : "I thought it should work well with just `new_tap_name/name` instead of `\"#{new_tap_name}/#{name}\"` but it did not. If it should though could somebody please explain what i'm doing wrong?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 588
	},
	{
		"id" : 235677940,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T18:33:42Z",
		"body" : "> I thought it should work well with just `new_tap_name/name` instead of `\"#{new_tap_name}/#{name}\"` but it did not. If it should though could somebody please explain what i'm doing wrong?\r\n\r\nYou're not doing anything wrong. `\"#{new_tap_name}/#{name}\"` is the correct way to do this.\r\n\r\nI think you got confused by the `path/\"suffix\"` pattern, but this only works because `path` is often a `Pathname` instance and thus `Pathname#/` is used to construct a new `Pathname` instance with the given suffix. In this case we're dealing with simple strings and `/` simply doesn't make sense.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 588
	},
	{
		"id" : 235679670,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-07-27T18:39:47Z",
		"body" : "Thanks, yeh, I didn't understand how it works and thought if strings can be merged in one place, why not in another :D",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 588
	},
	{
		"id" : 236870215,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-02T10:50:15Z",
		"body" : "@AnastasiaSulyagina Nice work! Made some tweaks in 2bd5e0e and ebe8b8d you may be interested in and changed the commit message in be5484d. Read http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html for your future commit messages and try to squash your commits into one. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 588
	},
	{
		"id" : 235425893,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-07-26T22:29:05Z",
		"body" : "This might be a bad idea, but I wonder if some of this could be embedded in the `INSTALL_RECEIPT.json`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 589
	},
	{
		"id" : 235427324,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-07-26T22:35:54Z",
		"body" : "It would be nice to store the versions of the dependencies that were used to build a keg in its `INSTALL_RECEIPT.json`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 589
	},
	{
		"id" : 235427537,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-26T22:36:55Z",
		"body" : "As in the issue template:\r\n\r\nInstead of creating an issue here, please create a pull request with your change proposal in the [Homebrew Evolution](https://github.com/Homebrew/brew-evolution) repository using the [proposal template](https://github.com/Homebrew/brew-evolution/blob/master/proposal_template.md).\r\n\r\n---\r\n\r\nTo aid your creating of this: I'm broadly in favour of this as have thought in the past it might be useful to have the formula stored inside the bottle but we'd need a proposal and, probably, a pull request. \r\n\r\nI don't think version dependencies is something that we'd be handling here as our solution for this is to have resources or separate versions a la homebrew/versions.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 589
	},
	{
		"id" : 235434219,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-26T23:12:04Z",
		"body" : "I think if the goal is to recreate an environment from a previous installation as accurately as possible you'd need to do the following:\r\n\r\n- On initial installation:\r\n  - Start with an empty Homebrew installation.\r\n  - Save the HEAD commit of the Homebrew repository and all taps.\r\n  - Install your formulae.\r\n  - Dump the list of installed formulae to a `Brewfile`.\r\n  - Backup the contents of the Homebrew cache (optional, but highly recommended).\r\n\r\n- When replaying this installation:\r\n  - Restore cache contents as some downloads may have disappeared from servers.\r\n  - Rewind all repositories to the recorded commits.\r\n  - Install formulae from the `Brewfile`.\r\n\r\n---\r\n\r\nIf the goal is to make the circumstances under which a bottle was built easier to reproduce (which sounds like a somewhat different goal), here's the information that I think would be useful to retain (while keeping the amount of information as limited as possible):\r\n\r\n- The hash of the most recent commit in the Homebrew repository and all taps that is already in `origin/master`. (That is the state reconstructible from publicly available information.)\r\n- The diff between the aforementioned commit and `master` after pulling the PR. (Essentially the PR diff at the time of the build.)\r\n- Other formulae installed at the time of the build. (The dependencies alone won't be sufficient as some/many formulae also tend to opportunistically pick up stuff from installed formulae not formally declared as a dependency.)\r\n- Some environmental information like macOS release, Xcode release, CLT version, installed Java versions, etc. Basically everything that has a reasonable chance to impact the outcome of the build and that is not captured in the hash/diff of involved repositories.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 589
	},
	{
		"id" : 235438453,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-07-26T23:35:35Z",
		"body" : "A virtual machine image could capture the full environment, though it's a heavy approach.\r\n\r\nI've found the python [vcstool](https://github.com/dirk-thomas/vcstool) to be convenient for quickly extracting the head revision of taps:\r\n\r\n~~~\r\n$ vcs export --exact /usr/local/Library/Taps/\r\n  homebrew/homebrew-core:\r\n    type: git\r\n    url: https://github.com/Homebrew/homebrew-core\r\n    version: ee927da44ade67ea04236558b08906d2ce2fe5bd\r\n  homebrew/homebrew-dev-tools:\r\n    type: git\r\n    url: https://github.com/Homebrew/homebrew-dev-tools\r\n    version: 6cc02b0322991775d82e5483b782aa6211664091\r\n  homebrew/homebrew-dupes:\r\n    type: git\r\n    url: https://github.com/Homebrew/homebrew-dupes\r\n    version: 36b6b7cd76a482319611eeb71e51f3134018a21c\r\n...\r\n~~~",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 589
	},
	{
		"id" : 235438846,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-26T23:37:57Z",
		"body" : "I think there's two things here:\r\n\r\n1. allowing installation bottles of arbitrary versions\r\n2. be able to rebuild bottles reproducibly\r\n\r\nI think it's worth treating them separately as neither has a hard requirement on the other. We could have a minimal version that embeds the formula to at least allow them to be installed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 589
	},
	{
		"id" : 235444030,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-07-27T00:09:17Z",
		"body" : "I've opened an evolution PR: https://github.com/Homebrew/brew-evolution/pull/6",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 589
	},
	{
		"id" : 235456385,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T01:35:10Z",
		"body" : "My proposed solution would be to demand `HOMEBREW_DEVELOPER` fix the merge conflict before allowing another `brew update` and reset `master` to `origin/master` and refuse to run `brew update` on non-`master` branches for other folks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 590
	},
	{
		"id" : 235456471,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T01:35:52Z",
		"body" : "Alternatively: make the `master` assumption for everyone and basically refuse to let people `brew update` with a non-`origin/master` `master` branch (which is probably good `git` practise anyway).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 590
	},
	{
		"id" : 235457926,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T01:46:03Z",
		"body" : "Yep, something along those lines. Making sure `master` hasn't diverged from `origin/master` is a good practice and something we should enforce.\r\n\r\nIf we wanted to be extra nice, we can check if the local `master` has diverged ([we already do that here](https://github.com/Homebrew/brew/blob/0be204aab5878284d8466b141a82d56a166abe7b/Library/Homebrew/cmd/update.sh#L230)) and auto-create a branch for the user if that's the case before doing `git checkout -B master origin/master`. This shouldn't be too hard to do and would be equally nice like stashing away local modifications. (I'm also sympathetic to completely refusing to update, but this might be a support burden. I'm definitely in favor of bailing if the ‚Äúoffender‚Äù has `HOMEBREW_DEVELOPER` set.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 590
	},
	{
		"id" : 235458211,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T01:47:48Z",
		"body" : "Creating a separate branch feels sensible; `preupdate` or something and refusing for `HOMEBREW_DEVELOPER` folks. This could also simplify (and perhaps speed up) our update a fair bit by making it do a lot less.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 590
	},
	{
		"id" : 236377210,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-30T17:14:38Z",
		"body" : "@UniqMartin this is why I set HOMEBREW_MERGE=1, which basically makes these problems go away naturally.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 590
	},
	{
		"id" : 236425686,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-31T11:47:41Z",
		"body" : "@ilovezfs If it's definitely better: I'm open to setting the default back to how it was.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 590
	},
	{
		"id" : 236426407,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-31T12:07:28Z",
		"body" : "@MikeMcQuaid I don't think it can be fairly characterized as \"definitely better.\"\r\n\r\nIt's a trade-off between more automation and potentially annoying silent merge commits, or less automation and all conflicts deliberately blocking. To achieve more automation with rebase, and put them on an even playing field, I believe we'd have to do a `rebase -Xtheirs` strategy, which I'm afraid would do more harm than good.\r\n\r\nPersonally, I prefer the silent merge commits and more automation because it means I can usually delay dealing with the conflict until it's convenient.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 590
	},
	{
		"id" : 249858400,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T13:04:24Z",
		"body" : "Given we've got most users on tags now and we force-checkout of the exact tag commit I think it's worth closing this out.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 590
	},
	{
		"id" : 235456030,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T01:32:44Z",
		"body" : "üëç nice work.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 591
	},
	{
		"id" : 235483982,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-27T04:52:32Z",
		"body" : "Without this change:\r\n```\r\n==> Detecting if jrnl-1.9.7.el_capitan.bottle.2.tar.gz is relocatable...\r\nWarning: Absolute symlink:\r\n  /usr/local/Cellar/jrnl/1.9.7/libexec/.Python -> /System/Library/Frameworks/Python.framework/Versions/2.7/Python\r\n  /usr/local/Cellar/jrnl/1.9.7/libexec/include/python2.7 -> /System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7\r\n  /usr/local/Cellar/jrnl/1.9.7/libexec/lib/python2.7/UserDict.py -> /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/UserDict.py\r\n  /usr/local/Cellar/jrnl/1.9.7/libexec/lib/python2.7/_abcoll.py -> /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/_abcoll.py\r\n  /usr/local/Cellar/jrnl/1.9.7/libexec/lib/python2.7/_weakrefset.py -> /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/_weakrefset.py\r\n  /usr/local/Cellar/jrnl/1.9.7/libexec/lib/python2.7/abc.py -> /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/abc.py\r\n```\r\n\r\nI think this should always be safe?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 592
	},
	{
		"id" : 235485546,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-27T05:00:00Z",
		"body" : "let's block PRs like Homebrew/homebrew-core#3351 and Homebrew/homebrew-core#3352 on this for a second",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 592
	},
	{
		"id" : 235492666,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T05:44:50Z",
		"body" : "Minor comment, but this looks a lot like the obvious and right thing to do.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 592
	},
	{
		"id" : 235494431,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-27T05:59:26Z",
		"body" : "@ilovezfs and I were chatting and agree that everything SIPpy is probably also safe though we'd want to scope the exemption to only OS X in that case. I kinda think the minimal change is fine for now unless we discover another use case.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 592
	},
	{
		"id" : 235570988,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T12:32:35Z",
		"body" : "Great to hear you've also thought about this! I briefly wondered about other system locations, but keeping this minimal until a broader need arises makes a lot of sense.\r\n\r\n:+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 592
	},
	{
		"id" : 235619698,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T15:20:12Z",
		"body" : "We could go further here I think and exclude anything outside `HOMEBREW_PREFIX` and `HOMEBREW_REPOSITORY`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 592
	},
	{
		"id" : 235620017,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T15:21:05Z",
		"body" : "As a bottle that symlinks to e.g. `/usr/X11` or something may or may not be usable on another system but it's still definitely relocatable. This check was added to avoid absolute symlinks to Homebrew paths and not system ones.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 592
	},
	{
		"id" : 235636906,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-27T16:13:35Z",
		"body" : "Added some commits that:\r\n- allow bottles to be relocated if they have arbitrary absolute symlinks\r\n- add a new check to disallow absolute symlinks within HOMEBREW_PREFIX (in addition to HOMEBREW_PREFIX/opt and HOMEBREW_CELLAR, which the existing checks cover)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 592
	},
	{
		"id" : 235639002,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T16:20:09Z",
		"body" : "Looking good. A few final nits from me then üö¢",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 592
	},
	{
		"id" : 235717651,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-27T20:54:33Z",
		"body" : "Sorry @tdsmith, feel free to push back on any of these changes that aren't really your code.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 592
	},
	{
		"id" : 235766285,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-28T00:50:19Z",
		"body" : "Thanks for everyone's comments!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 592
	},
	{
		"id" : 235796041,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-28T04:09:55Z",
		"body" : "I'm not sure which set of changes is potentially problematic here, both Tim & Mike pushed bottle logic tweaks today, but we're seeing some CI rebellion on bottling.\r\n\r\nYosemite, [alot](http://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/5467/version=yosemite/console):\r\n```\r\n==> brew bottle --verbose --json alot\r\n==> FAILED\r\n==> Determining alot bottle revision...\r\n==> Bottling alot-0.3.7.yosemite.bottle.tar.gz...\r\nError: No such dylib name: /usr/local/opt/gpgme/lib/libgpgme.11.dylib\r\n```\r\nSame thing with [El Cap here](http://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/5459/version=el_capitan/testReport/junit/brew-test-bot/el_capitan/bottle_alot/). Repeated on Yosemite [here](http://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/5468/version=yosemite/console). PR causing the failures is [here](https://github.com/Homebrew/homebrew-core/pull/1663).\r\n\r\nWill poke at it later today if nobody beats me to it, but need to grab some sleep at this point.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 592
	},
	{
		"id" : 235796888,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-28T04:17:36Z",
		"body" : "@DomT4 Couldn't reproduce locally üò• ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 592
	},
	{
		"id" : 235802263,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-28T05:08:40Z",
		"body" : "Same; I don't think this is failing in a part that I touched. :/ If anything I think @woodruffw's pickier mach-o code might be having a bad interaction with something?\r\n\r\nFWIW on `alot` I see:\r\n\r\n```\r\ntim@rocketman:~$ brew bottle -vd --json alot\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/alot.rb\r\n==> Determining alot bottle revision...\r\n==> Bottling alot-0.3.7.el_capitan.bottle.tar.gz...\r\nChanging install name in /usr/local/Cellar/alot/0.3.7/libexec/lib/python2.7/site-packages/gpgme/_gpgme.so\r\n  from /usr/local/opt/gpgme/lib/libgpgme.11.dylib\r\n    to @@HOMEBREW_PREFIX@@/opt/gpgme/lib/libgpgme.11.dylib\r\n...\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 592
	},
	{
		"id" : 235845143,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-28T09:26:24Z",
		"body" : "@MikeMcQuaid @tdsmith Did any of you do `export HOMEBREW_RUBY_MACHO=1` before trying locally? If it's indeed an unfortunate interaction with `ruby-macho` (as it seems to be given the nature of the failure and the fact that the Mavericks bot is unaffected), that would be necessary to be able to reproduce. I'm looking into it, but the dependencies haven't finished building just yet ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 592
	},
	{
		"id" : 235851147,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-28T09:53:31Z",
		"body" : "> I'm not sure which set of changes is potentially problematic here, both Tim & Mike pushed bottle logic tweaks today, but we're seeing some CI rebellion on bottling.\r\n\r\nBefore anyone wastes any time hunting down the cause: I was able to reproduce and I'll open an issue with all relevant details shortly. Just let me say that the problem is entirely unrelated to the changes here. The problem is very specific to `alot` and how one of its resources is built.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 592
	},
	{
		"id" : 235853242,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-28T10:02:38Z",
		"body" : "If any of the recent changes can be identified as the trigger for this problem: It would have to be the introduction of the Python `virtualenv` stuff. I suppose the build environment in such a `virtualenv` is sufficiently different from what it was before, that native extensions (or however this is called in Python land) end up being built differently ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 592
	},
	{
		"id" : 235892894,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-28T13:23:37Z",
		"body" : "To be honest, I forgot `HOMEBREW_RUBY_MACHO` was running on CI, and since it _had_ passed CI before now it seemed likely to be either:\r\n* The move to `virtualenv` in the formula.\r\n* Mike's bottle changes.\r\n* Tim's bottle changes.\r\n\r\nSince the failure output was on the bottle, and Tim & Mike had both contributed to this thread & would see the message I thought I'd drop it in here üòÖ.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 592
	},
	{
		"id" : 235896267,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-07-28T13:36:37Z",
		"body" : "Makes sense for me to drop in as well, since it's almost certainly exposing a flaw in ruby-macho :smile: \r\n\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 592
	},
	{
		"id" : 236075131,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-29T01:55:05Z",
		"body" : "The problem has been documented in Homebrew/ruby-macho#50. Addressing it will probably require some minor architectural changes, thus a fix won't be available instantly. Any input on how `ruby-macho` should be reacting to similar conditions in the future is very welcome.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 592
	},
	{
		"id" : 235569749,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T12:26:28Z",
		"body" : "> ```console\r\n> $ HOMEBREW_TEMP=\"~/.homebrew/tmp/\" brew reinstall git\r\n> ```\r\n\r\nUnlike the other variants, this cannot work because there's no chance for the shell to expand the `~` to your home directory. (And Homebrew like many other command line tools, doesn't do it for you and thus assumes you meant a literal `~`.) You simply have to omit the quotation marks (because there are no special characters in your path) and it will work:\r\n\r\n```console\r\n$ HOMEBREW_TEMP=~/.homebrew/tmp brew reinstall git\r\n```\r\n\r\n(Note that in general the trailing slash doesn't cause any issues, but it should usually be omitted.)\r\n\r\n---\r\n\r\nHere's a demonstration how the quoting makes a difference:\r\n\r\n```console\r\n$ echo \"~/.homebrew/tmp\"\r\n~/.homebrew/tmp\r\n$ echo ~/.homebrew/tmp\r\n/Users/martin/.homebrew/tmp\r\n$ echo ~/\".homebrew/tmp\"\r\n/Users/martin/.homebrew/tmp\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 593
	},
	{
		"id" : 235672261,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-07-27T18:14:38Z",
		"body" : "I generally use `$HOME` instead of `~` in scripts since I'm never sure how the quoting will work.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 593
	},
	{
		"id" : 235676160,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T18:27:56Z",
		"body" : "> I generally use `$HOME` instead of `~` in scripts since I'm never sure how the quoting will work.\r\n\r\nI tend to use `~/\"whatever\"` or `~/whatever` if it's obvious that there's nothing that needs to be escaped. Using `$HOME` is equally fine. I don't think any of those variants is clearly  superior when compared to the alternatives.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 593
	},
	{
		"id" : 235653852,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-27T17:11:46Z",
		"body" : "The most interesting difference is that Homebrew builds with `-march=core2` when bottling, but that doesn't seem super relevant. I have a 2015 i7 MBP and can't reproduce. I don't know what could be causing this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 594
	},
	{
		"id" : 235657107,
		"user" : {
			"login" : "n8henrie"
		},
		"created_at" : "2016-07-27T17:23:12Z",
		"body" : "Yeah, I tried `brew install --bottle-arch=broadwell python3` and it didn't seem to change anything.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 594
	},
	{
		"id" : 237458124,
		"user" : {
			"login" : "n8henrie"
		},
		"created_at" : "2016-08-04T05:44:22Z",
		"body" : "84897ff215081998c8bc17cc663320ae50f7ccf4 seems to have fixed the issue -- so I wonder if this was related to the \"pyport.h macro issue\"?\r\n\r\n```bash\r\n$ brew uninstall python3\r\n$ git checkout 84897ff215081998c8bc17cc663320ae50f7ccf4\r\n$ brew install --build-bottle Formula/python3.rb\r\n$ /usr/local/bin/python3 keychain_ctypes.py \r\npassword: bar\r\nstatus: 0\r\n```\r\n\r\nAlso working with the new bottles (c64ac6c0be2d5957a9a6d3872b94b4a4118b430a)\r\n\r\n```bash\r\n$ brew uninstall python3\r\n$ git checkout master\r\n$ brew install Formula/python3.rb\r\n$ /usr/local/bin/python3 keychain_ctypes.py \r\npassword: bar\r\nstatus: 0\r\n```\r\n\r\nWeird. Closing.\r\n\r\nEDIT: Why didn't my commits auto-link?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 594
	},
	{
		"id" : 235689729,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-27T19:14:04Z",
		"body" : "That was an obvious enough fix/improvement that I didn't bother waiting for anyone else to :+1: this. Thanks once again, @eirinikos! It's nice to see your work uncover bugs in our code or (like in this case) just silly assumptions once the code gets exercised more thoroughly. :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 595
	},
	{
		"id" : 235764976,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-28T00:40:46Z",
		"body" : "(I reformatted your message a bit to make it more readable. I hope that's okay with you.)\r\n\r\nI suspect the problem in your case is that you haven't exactly followed our instructions. Could it be that you have issued the `chown` command without prefixing them with `sudo`?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 596
	},
	{
		"id" : 236365900,
		"user" : {
			"login" : "stefdelec"
		},
		"created_at" : "2016-07-30T13:42:27Z",
		"body" : "Thanks! that's it!!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 596
	},
	{
		"id" : 236366170,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-30T13:47:46Z",
		"body" : "I'm glad this worked. Thanks for the feedback! I guess this means we can close the issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 596
	},
	{
		"id" : 235766327,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-28T00:50:41Z",
		"body" : ":+1: and one minor nit.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 597
	},
	{
		"id" : 235766703,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-28T00:53:19Z",
		"body" : "Should we add something like \"Consider running `export CPPFLAGS=-I$(brew --prefix openssl)/include; export LDFLAGS=-L$(brew --prefix openssl)/include` before running build scripts for projects which depend on openssl\" to help folks along?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 597
	},
	{
		"id" : 235766851,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-28T00:54:20Z",
		"body" : "I think it should be allowed when prefix isn't exactly `/usr/local` too.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 597
	},
	{
		"id" : 235947707,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-28T16:24:01Z",
		"body" : "Blog post explaining this phenomenon: https://langui.sh/2015/07/24/osx-clang-include-lib-search-paths/",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 597
	},
	{
		"id" : 236048394,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-28T22:50:25Z",
		"body" : "Have tweaked message, added compiled path guidelines based on projects that do this properly and made this only apply to `/usr/local` Homebrew installations.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 597
	},
	{
		"id" : 236049116,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-28T22:54:20Z",
		"body" : "Oh, and added that blog post to the commit message.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 597
	},
	{
		"id" : 236347330,
		"user" : {
			"login" : "bartonjs"
		},
		"created_at" : "2016-07-30T06:25:52Z",
		"body" : "@MikeMcQuaid https://github.com/dotnet/core\r\n\r\nWe'll happily accept different instructions to provide.  We change the dylib reference to use rpath for the specific version; so what we care about the most is that libcrypto.1.0.0.dylib and libssl.1.0.0.dylib end up on the default probing path.  We don't care about the unversioned library forwarder, or particularly care about the header file path (since the unlinked location is good enough to be found by cmake).  So something like `brew linkversionedfilesonly openssl` would be fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236355494,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-30T09:27:01Z",
		"body" : "> We change the dylib reference to use rpath for the specific version; [‚Ä¶]\r\n\r\nCan you explain in a bit more detail what this means? I don't understand.\r\n\r\n> [‚Ä¶]; so what we care about the most is that libcrypto.1.0.0.dylib and libssl.1.0.0.dylib end up on the default probing path.\r\n\r\nWhy is this necessary? Why can't you look into an arbitrary user-provided path? Not everyone installs Homebrew to `/usr/local` and as you've learned from this PR and the linked resources, linking `openssl` files to `/usr/local/{include,lib}` is a bad idea. (And yes, I realize there's a difference between `libcrypto.1.0.0.dylib` and `libcrypto.dylib`.)\r\n\r\n> So something like `brew linkversionedfilesonly openssl` would be fine.\r\n\r\nThis looks like a very narrow use case for a single consumer, so I doubt we're going to provide something like this. (But as stated in the previous paragraph, I think you're limiting yourself unnecessarily by relying on the default lookup paths and it would be good to understand where this limitation comes from before we can discuss possible alternatives for you and your users.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236356546,
		"user" : {
			"login" : "bartonjs"
		},
		"created_at" : "2016-07-30T09:53:09Z",
		"body" : "@UniqMartin We want to support a) homebrew users, b) macports users, and c) people who want to distribute a standalone copy of the library with their application.  rpath seemed to be the best way to do this.\r\n\r\nIn particular, since we distribute precompiled assets (vs building on the end user machines) it would be the path it had on our build machines that was encoded for the library load, so we need to be flexible on the install destinations.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236358027,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-30T10:31:27Z",
		"body" : "@bartonjs Have you considered using `install_name_tool -change` to adjust the dylib references inside your precompiled binaries once you learn where the libraries live you want to use? Or since you're referencing the libraries as `@rpath/libcrypto.1.0.0.dylib` and `@rpath/libssl.1.0.0.dylib` from `System.Security.Cryptography.Native.dylib` you could use `install_name_tool -add_rpath` to add an appropriate `LC_RPATH` load command to the latter.\r\n\r\nOn macOS you're expected to link to libraries with their full path (either by directly using an absolute path or by using paths relative to the executable or loading dylib). What you currently seem to rely on for production use is what is described as `DYLD_FALLBACK_LIBRARY_PATH` in `dyld(1)` which‚Äîas the name implies‚Äîis really just a fallback.\r\n\r\nA more macOS-like experience would be of course to bundle all necessary libraries with your package. And if your crypto component relies on OpenSSL as a backend and cannot use the libraries natively provided by the OS, the most user-friendly solution would be to bundle those external dependencies to make your package fully self-contained.\r\n\r\n> In particular, since we distribute precompiled assets (vs building on the end user machines) it would be the path it had on our build machines that was encoded for the library load, so we need to be flexible on the install destinations.\r\n\r\nThe paths you've used during compilation are not set in stone. On macOS, it is fairly common for build systems to adjust those (usually absolute) paths after binaries have been built by using `install_name_tool -change` and `install_name_tool -id` (as necessary).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236366457,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-30T13:53:50Z",
		"body" : "> This looks like a very narrow use case for a single consumer, so I doubt we're going to provide something like this. (But as stated in the previous paragraph, I think you're limiting yourself unnecessarily by relying on the default lookup paths and it would be good to understand where this limitation comes from before we can discuss possible alternatives for you and your users.)\r\n\r\nAs @UniqMartin says: unfortunately we're not going to provide this.\r\n\r\n> A more macOS-like experience would be of course to bundle all necessary libraries with your package. And if your crypto component relies on OpenSSL as a backend and cannot use the libraries natively provided by the OS, the most user-friendly solution would be to bundle those external dependencies to make your package fully self-contained.\r\n\r\nAgreed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236381029,
		"user" : {
			"login" : "bartonjs"
		},
		"created_at" : "2016-07-30T18:22:10Z",
		"body" : "> Have you considered using install_name_tool -change to adjust the dylib references inside your precompiled binaries once you learn where the libraries live you want to use? \r\n\r\nI'm not sure I follow.  We certainly know where the libraries are on our build machines, but we have no idea where the user's machine would have put them.  We already use `install_name_tool -change` to rewrite it to be an rpath reference.\r\n\r\n> On macOS you're expected to link to libraries with their full path (either by directly using an absolute path or by using paths relative to the executable or loading dylib).\r\n\r\nIf I recall correctly, the rpath/probing support is 'relatively' recent on MacOS, meaning that Apple saw a need for more flexibility (and to acting like all the other OSes).  And CMake certainly seems to think that rpath-flexibility is better: https://cmake.org/cmake/help/v3.0/prop_tgt/MACOSX_RPATH.html.\r\n\r\n> A more macOS-like experience would be of course to bundle all necessary libraries with your package. And if your crypto component relies on OpenSSL as a backend and cannot use the libraries natively provided by the OS, the most user-friendly solution would be to bundle those external dependencies to make your package fully self-contained.\r\n\r\nYeah, but then we're in the boat of needing to release an updated Mac release every time there's an OpenSSL security fix, which (I'm sure you're aware) is a fairly regular occurrence.\r\n\r\nSo, since we've already shipped, and this change now makes our getting started instructions not function, do you have any particular recommendations? Is there an ABI-version-only path under a default `brew install` that we can use as the target of a symlink (I can't easily check since I don't have my Mac with me; and last time we found 'a working solution' it got taken away :smile:)?  That is, `/usr/local/Cellar/openssl/1.0.2h/lib/libcrypto.1.0.0.dylib` is a path using the patch version, which changes frequently.  `/usr/local/Cellar/openssl/1.0.2/lib/libcrypto.1.0.0.dylib` (if guaranteed) is better, `/usr/local/Cellar/openssl/lib/libcrypto.1.0.0.dylib` is great, assuming that 1.1.0 (incompatible ABI) would be side-by-side in that location.  `/usr/local/Cellar/openssl/1.0.0/lib/libcrypto.1.0.0.dylib` would also be good, using the library ABI version in the path (instead of the library release version).\r\n\r\nOur goals:\r\n* MacOS users can use .NET Core\r\n* Security updates to OpenSSL can be delivered to users independent of our release schedule\r\n* While documentation may assume a single dependency source (e.g. homebrew), have no hard dependence on that dependency source\r\n* Have as simple of getting started instructions as possible given preceding goals\r\n\r\nHeck, now that I've written this I feel like I have to ask: Why can't `brew install openssl` symlink in the (versioned) library assets already?  Since they're versioned they don't compete with the old 0.9.8 library, and with no unversioned name it doesn't change default linker behaviors.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236400042,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-31T00:54:17Z",
		"body" : "> Yeah, but then we're in the boat of needing to release an updated Mac release every time there's an OpenSSL security fix, which (I'm sure you're aware) is a fairly regular occurrence.\r\n\r\nI don't think delegating the responsibility of that to Homebrew is particularly responsible to your users. I'm afraid regardless of need: your use-case is not something we're willing to support. Sorry.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236408555,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-31T04:11:09Z",
		"body" : "> That is, /usr/local/Cellar/openssl/1.0.2h/lib/libcrypto.1.0.0.dylib is a path using the patch version, which changes frequently. /usr/local/Cellar/openssl/1.0.2/lib/libcrypto.1.0.0.dylib (if guaranteed) is better, /usr/local/Cellar/openssl/lib/libcrypto.1.0.0.dylib is great, assuming that 1.1.0 (incompatible ABI) would be side-by-side in that location. /usr/local/Cellar/openssl/1.0.0/lib/libcrypto.1.0.0.dylib would also be good, using the library ABI version in the path (instead of the library release version).\r\n\r\nYou're basically talking about `/usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib` here, but again, a warning you can't always assume `/usr/local`.\r\n\r\nWe also don't promise API/ABI compatibility IRT to external projects; it won't happen immediately but OpenSSL 1.1.0 is due to land at some point & _eventually_ will take the `openssl` name in all likelihood, and in the mean time SSLv3 may well end up being removed from the existing formula, which could cause issues outside `brew` usage.\r\n\r\nIf you want stability, bundling the libraries into your project is a reasonable step & the \"done\" thing on OS X/macOS. I understand it can be a frustration around having to issue updates purely for OpenSSL security issues, but that is part of the OS X/macOS ecosystem really & is what Apple themselves try to prod people towards.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236424565,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-31T11:18:23Z",
		"body" : "> If I recall correctly, the rpath/probing support is 'relatively' recent on MacOS, meaning that Apple saw a need for more flexibility (and to acting like all the other OSes).\r\n\r\nStill they expect you to link to a library using it's absolute path, and relying on the default search path of the dynamic linker is mostly a developer feature (in my understanding). That you can use `@rpath/` as a prefix in the linking information in Mach-O binaries doesn't change the fact you are expected to use an absolute path. It's just that you've got more flexibility with what `@rpath/` will be substituted eventually: A list of paths that is populated with the contents of `LC_RPATH` load commands of binaries involved in the dynamic linking process.\r\n\r\n> And CMake certainly seems to think that rpath-flexibility is better: https://cmake.org/cmake/help/v3.0/prop_tgt/MACOSX_RPATH.html.\r\n\r\nIt's just stating that the system is more flexible (which is true). It's not saying that it's better.\r\n\r\n> Heck, now that I've written this I feel like I have to ask: Why can't `brew install openssl` symlink in the (versioned) library assets already?  Since they're versioned they don't compete with the old 0.9.8 library, and with no unversioned name it doesn't change default linker behaviors.\r\n\r\nBecause that's not in the design of Homebrew. We either link everything outside of `libexec` (most formulae) or we don't link at all (keg-only formulae, of which `openssl` is one example). I'm not saying this will never change, but that's something to discuss and there needs to be a clear benefit for our user base that outweighs the added complexity.\r\n\r\nIronically, if Apple had just removed the `/usr/lib/libcrypto.dylib` and `/usr/lib/libssl.dylib` symlinks (they are not needed by binaries previously linked to the system OpenSSL) at the same time they stopped distributing the OpenSSL headers, everything would have been easier and we might not even have this discussion.\r\n\r\nTo be a bit frank, you've been relying on discouraged behavior from the start. That you had to use the `--force` option should have made you think. It's a power-user option to accommodate certain use cases, but it's not something I would suggest lightly to users that don't understand the consequences (and apparently nobody writing those instructions did). That's all okay and understandable, but I don't think it's fair to shift responsibility of fixing your use case to us because we noticed the abuse and made it harder to perform an unsafe and security-relevant operation (without an advance warning because there was no contact information).\r\n\r\nIt's obviously up to your project how you operate and where your priorities are, but I think on that matter you should really consider bundling OpenSSL as a short-term solution and then port your SSL/TLS layer to use Secure Transport on macOS as long-term solution (because that's what Apple expects you to use and where you are covered by the vendor's security updates).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236433965,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-31T14:46:45Z",
		"body" : "> Ironically, if Apple had just removed the /usr/lib/libcrypto.dylib and /usr/lib/libssl.dylib symlinks (they are not needed by binaries previously linked to the system OpenSSL) at the same time they stopped distributing the OpenSSL headers, everything would have been easier and we might not even have this discussion.\r\n\r\nI'm hoping they'll eventually move the remaining OpenSSL libraries to a private prefix inside `lib`, as they did initially for LibreSSL when that was introduced, or cut out the unversioned symlinks as they already do with LibreSSL's libraries & we can stop hiding away our OpenSSL, but good luck to anyone trying to get progress on that front üòï.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236445665,
		"user" : {
			"login" : "bartonjs"
		},
		"created_at" : "2016-07-31T17:53:43Z",
		"body" : "Alright, we seem to have come up with our immediate workaround. Sorry for the derailment.\r\n\r\n> OpenSSL 1.1.0 is due to land at some point & eventually will take the openssl name in all likelihood\r\n\r\nYeah, we're watching for that.  I don't suppose that any of the package management-style systems are looking too fondly at the non-backwards-compatible release.\r\n\r\n> ... if Apple had just removed the /usr/lib/libcrypto.dylib and /usr/lib/libssl.dylib symlinks ...\r\n\r\nWouldn't that've been grand?\r\n\r\n> That you had to use the --force option should have made you think.\r\n\r\nIt had a clear point of confusion/contention in 10.10, but on 10.11 it seemed to not (however, that seems to have been an incorrect conclusion). Since 10.11 was our minimum MacOS we followed the prevailing \"how do I make this work?\" advice from the internet. Though, clearly, \"prevailing\" isn't guaranteed \"right\".\r\n\r\n> because there was no contact information\r\n\r\nIt's (sort of) there, but I can see how it would get missed/not-understood.  There's a Community link in the header which then lists all of the Github projects which feed into the effort; but it doesn't have an obvious \"if you're trying to give us advanced warning\" focus, which I'll pass on.\r\n\r\n> you should really consider bundling OpenSSL as a short-term solution and then port your SSL/TLS layer to use Secure Transport on macOS as long-term solution\r\n\r\nFWIW, that is the long-term plan. Situations like this one certainly remind us of the importance of that effort.\r\n\r\n\r\nBTW: If you hadn't noticed yet, some of your users are pretty clever at finding workarounds, and they found that `homebrew/versions/openssl101` doesn't have the same restrictions.  If you were aware of that vector, no worries.  If you weren't, then I guess this paragraph is a weakly-filed issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236446792,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-31T18:10:33Z",
		"body" : "Thanks for the detailed reply, for taking some action (e.g. more obvious contact information), and for understanding our point of view. This is much appreciated! :heart:\r\n\r\n> BTW: If you hadn't noticed yet, some of your users are pretty clever at finding workarounds, and they found that `homebrew/versions/openssl101` doesn't have the same restrictions. If you were aware of that vector, no worries. If you weren't, then I guess this paragraph is a weakly-filed issue.\r\n\r\nWe noticed: #612.\r\n\r\nI'm looking forward to the creative workarounds they will find next. Sadly, quite a few users (and I think they might be mostly your users and have installed Homebrew due to your instructions) will ignore all warnings and do the unsafe thing nonetheless, because they just want their toy to work and then move on. Spreading this bad advice, as has happened in a few of your GitHub issues and on StackOverflow, is unfortunate, but I guess there's nothing we can do about this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236447176,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-31T18:16:17Z",
		"body" : "> Since 10.11 was our minimum MacOS we followed the prevailing \"how do I make this work?\" advice from the internet. Though, clearly, \"prevailing\" isn't guaranteed \"right\".\r\n\r\nI think this is mostly on us; Homebrew should (and, in this case, now does) actively stop people from doing things we know to be harmful rather than allowing them. Code is much easier to change than documentation here even if the impact isn't quite as pleasant, unfortunately.\r\n\r\n> It's (sort of) there, but I can see how it would get missed/not-understood. There's a Community link in the header which then lists all of the Github projects which feed into the effort; but it doesn't have an obvious \"if you're trying to give us advanced warning\" focus, which I'll pass on.\r\n\r\nFWIW I was the one who looked at https://www.microsoft.com/net/core#macos, looked for a GitHub link, looked at https://github.com/dotnet/core/issues/new and didn't think any of those repos looked suitable to report to.\r\n\r\n> BTW: If you hadn't noticed yet, some of your users are pretty clever at finding workarounds, and they found that homebrew/versions/openssl101 doesn't have the same restrictions. If you were aware of that vector, no worries. If you weren't, then I guess this paragraph is a weakly-filed issue.\r\n\r\nThat's just been fixed as-of https://github.com/Homebrew/brew/pull/612 being merged üòÜ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236448057,
		"user" : {
			"login" : "bartonjs"
		},
		"created_at" : "2016-07-31T18:28:19Z",
		"body" : "@MikeMcQuaid No worries.  Either the prepopulated message there is new, or many people just erase it and post a new issue (possibly when they hit \"uh.. which one?\").  Honestly I can't even tell you which one I'd have thought the right answer is.  dotnet/corefx is where the dependency comes from, but that's not the same as saying \"the docs are bad\".\r\n\r\nBut, in the end, we got it sorted out.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236448358,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-31T18:32:50Z",
		"body" : "Glad you got it sorted. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236462478,
		"user" : {
			"login" : "talkingscott"
		},
		"created_at" : "2016-07-31T23:08:32Z",
		"body" : "**@bartonjs**\r\n\r\n> Alright, we seem to have come up with our immediate workaround. Sorry for the derailment.\r\n\r\nAs someone who came to this discussion while trying to determine what to do when the instructions at https://www.microsoft.com/net/core#macos failed, I am wondering how and when I will learn of your immediate workaround.  I'd rather wait for that than do something insecure with openssl.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236473198,
		"user" : {
			"login" : "chenbojian"
		},
		"created_at" : "2016-08-01T01:57:51Z",
		"body" : "So will the issue fixed by microsoft dotnet project?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236495170,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-08-01T05:52:55Z",
		"body" : "@chenbojian @talkingscott you might want to follow https://github.com/dotnet/cli/issues/3964 rather than messing  more with this on the Homebrew PR.\r\n\r\nAs an aside, a great way to keep developers happy and productive is to hit the subscribe button instead of asking when something will be fixed or commenting with a +1.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 238002880,
		"user" : {
			"login" : "bartonjs"
		},
		"created_at" : "2016-08-06T03:16:38Z",
		"body" : ".NET Core for macOS users: In light of the Homebrew changes (and resultant/associated commentary) here we've increased the priority of the move off of OpenSSL on macOS. https://github.com/dotnet/corefx/issues/9394 is the main issue that will be tracking the incremental progress (which already has one linked PR), and any discussion should be there (rather than over here on the Homebrew side of things).\r\n\r\n(Sorry for the somewhat-of-a-cross-post, but wanted to leave breadcrumbs for any latecomers)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 597
	},
	{
		"id" : 236048352,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-28T22:50:13Z",
		"body" : "If I recall, before the changes started with linked, we used to run `brew linkage --test` on all of the `brew uses` reverse dependencies during CI, and that was specifically *only* a test for broken dylibs. I think at the time paradoxically (and probably just an oversight) the check for broken dylib was *not* run on the main formula.\r\n\r\nAm I mistaken, or is it all reversed now such that we're only going to be running the broken dylib test on the main formula test-bot is testing, and not running the broken dylib test on the `brew uses` reverse dependencies?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 598
	},
	{
		"id" : 236051245,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-28T23:06:12Z",
		"body" : "> Am I mistaken, or is it all reversed now such that we're only going to be running the broken dylib test on the main formula test-bot is testing, and not running the broken dylib test on the `brew uses` reverse dependencies?\r\n\r\nWe still do this. Nothing has changed in this regard, see [this line in `dev-cmd/test-bot.rb`](https://github.com/Homebrew/brew/blob/3469f177f043b163e0c362b0fa10f9f99c31114b/Library/Homebrew/dev-cmd/test-bot.rb#L630).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 598
	},
	{
		"id" : 236051800,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-28T23:09:38Z",
		"body" : "@UniqMartin phew.\r\n\r\nI wonder if we should just have test-bot invoke `brew linkage --test` on the main formula as well then, rather than having it \"redundantly\" built-in to audit as a separate thing.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 598
	},
	{
		"id" : 236052526,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-28T23:14:13Z",
		"body" : "> I wonder if we should just have test-bot invoke `brew linkage --test` on the main formula as well then, rather than having it \"redundantly\" built-in to audit as a separate thing.\r\n\r\nThe goal of incorporating it in the regular audit was to expose it to our contributors without asking them to run yet another `brew` command before they can submit a PR, I think.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 598
	},
	{
		"id" : 236054522,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-28T23:26:12Z",
		"body" : "I see. Most likely, contributors are are going to be stuck when they see this audit failure for the main formula.\r\n\r\nI've noticed two failures in the last 24 hours for broken dylib on the main formula. At first, this sounds paradoxical, since how could the dylib be broken if you just built it from source against libraries on your own machine?\r\n\r\nIn both cases the problem seems to have been \"examples\" built during the install method before the libraries were installed, so that the install name paths still pointed into the temporary buildpath.\r\n\r\nhttps://github.com/Homebrew/homebrew-core/pull/3268\r\nhttps://github.com/Homebrew/homebrew-core/pull/3387\r\n\r\nI'm wondering if we need some more specific check (or error) for broken dylibs containing a buildpath temporary directory as opposed to broken dylib that were caused by something not getting a revision bump when it needed one.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 598
	},
	{
		"id" : 236069144,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-29T01:09:16Z",
		"body" : "Indeed, while the underlying check is the same, the meaning of the broken linkage is usually quite different between the just built formula and its reverse dependencies. In the former case they will most often point into the temporary directory because the build system at some point fails to set/update the dylib ID or install name (as you correctly concluded) and in the latter case they will most often point into an `opt` path (and most likely the one of the updated formula).\r\n\r\nIt's definitely a useful diagnostic also on the main formula, but I'm not sure if we can provide an actionable error message for this case beyond ‚ÄúThe build system of the formula seems to be broken or unaware of macOS specifics. Please fix this or pester upstream to do so.‚Äù Maybe we need to start a documentation page that lists cases of broken or undesired opportunistic linkage (with an example for each case), what it usually means, and how it can be typically resolved. It feels like this would be too much to compress into a necessarily brief audit error message.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 598
	},
	{
		"id" : 236072609,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-29T01:35:33Z",
		"body" : "> and most likely the one of the just updated formula\r\n\r\nIn a significant (not majority but still substantial) portion of cases that's not the case, which is when the broken dylib check can also be problematic for CI for pull requests because we end up requiring  contributors to revision bump the reverse dependency due to an unrelated broken dylib but that's arguably somewhat justifiable since it's plausible that the reverse dependency might fail to work with the main formula once that other issue has been fixed, and there'd be no way of knowing that for sure without fixing the unrelated problem first. However, I think the vast majority of the time we're just \"involuntarily\" conscripting people into fixing our totally unrelated linkage problem in that random reverse dependency's bottle.\r\n\r\n> It's definitely a useful diagnostic also on the main formula\r\n\r\nYeah it's desirable not to have dylib pointing at the no longer existing buildpath, but as @MikeMcQuaid pointed out regarding the idea of always by default running brew audit --strict as part of bump-formula-pr, I'm slightly concerned this check may discourage some PRs that we really do want to be opened despite the issue since the contributor may not know how to fix it. Perhaps the PR template should be more clear that audit failure is not in itself a sufficient reason to abandon opening a pull request you want to submit. I do wonder how many contributors just ignore what's written there regardless of what it says as we know in general people do with the caveats.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 598
	},
	{
		"id" : 236077255,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-29T02:11:43Z",
		"body" : "> In a significant (not majority but still substantial) portion of cases that's not the case, which is when the broken dylib check can also be problematic for CI for pull requests because we end up requiring contributors to revision bump the reverse dependency due to an unrelated broken dylib [‚Ä¶]\r\n\r\nI'm hopeful those instances will become fewer and fewer while we converge to a state where most of our bottles have went through that linkage check. It's probably never going to be perfect, but I think we're still catching up with the undetected bottle breakage we have accumulated in the time when we didn't have that check. (And of course we're still missing out on a few items because we don't currently check recursive reverse dependencies.)\r\n\r\n> However, I think the vast majority of the time we're just \"involuntarily\" conscripting people into fixing our totally unrelated linkage problem in that random reverse dependency's bottle.\r\n\r\nAt least for this check the PR will have been already submitted, as we don't ask them to check all reverse dependencies. I don't currently have an idea for how to improve in this area, but maybe someone else has ideas ‚Ä¶\r\n\r\n> I'm slightly concerned this check may discourage some PRs that we really do want to be opened despite the issue since the contributor may not know how to fix it.\r\n\r\nI think we can address this by making it clear that PRs aren't automatically closed because not all check boxes have been ticked (as we don't do the same if they are all ticked, but obviously without actually doing what we had asked for). For tricky problems like this one, I think we can further address this by including something like ‚ÄúThis can be a tricky issue to solve. If in doubt, post a PR and we'll work together to resolve it.‚Äù as part of the audit message.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 598
	},
	{
		"id" : 236079368,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-29T02:29:41Z",
		"body" : ">those instances will become fewer and fewer\r\n\r\nSubjectively, it does feel like they're becoming less common and I think the \"unrelated\" cases are doing a pretty good job of detecting the recursive/undeclared/full-moon-and-stars-aligned ones, even if it's not precisely at the moment the breakage occurred.\r\n\r\n>I don't currently have an idea for how to improve in this area, but maybe someone else has ideas\r\n\r\nPerhaps some procedures for recording and accumulating issues at test-bot time that are not expected to be fixed prior to or as part of the PR. For instance, if we introduce a new audit check xyz, but it's not easily scriptable to immediately determine which formulae suffer from xyz syndrome (or it's a syndrome that any formula might spontaneously develop at any time), test-bot could add an entry to some database (by whatever mechanism is convenient) of formulae-known-to-have-xyz-syndrome, and at some later date a maintainer can fix those one at a time or en masse where possible.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 598
	},
	{
		"id" : 236078011,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-29T02:18:06Z",
		"body" : "cc @UniqMartin ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 600
	},
	{
		"id" : 236186467,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-29T13:54:49Z",
		"body" : ":+1: Thanks for the quick fix!\r\n\r\nI tested it with the previously problematic [`alot` formula](https://github.com/Homebrew/homebrew-core/pull/1663) and now everything works like a charm and all binaries are `x86_64`-only (except for the `python` shim in `libexec/bin/`).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 600
	},
	{
		"id" : 236313776,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-29T22:56:04Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 600
	},
	{
		"id" : 236861247,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-02T10:07:26Z",
		"body" : "One comment otherwise üëç. Nice work on this tricky test!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 601
	},
	{
		"id" : 237001212,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-08-02T18:41:24Z",
		"body" : "Thanks @MikeMcQuaid!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 601
	},
	{
		"id" : 237518640,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T10:44:44Z",
		"body" : "Thanks again @eirinikos!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 601
	},
	{
		"id" : 236149473,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-29T10:38:49Z",
		"body" : "There's an easy solution for that: Use `refute_match` instead! The counterparts to the `assert_*` methods from `MiniTest::Assertions` are all named `refute_*` (if a negation makes sense) and that's what we tend to use. (The `assert_no_match` method is from `Test::Unit::Assertions` instead.)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 602
	},
	{
		"id" : 236150091,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-29T10:42:18Z",
		"body" : "@UniqMartin thanks.\r\n\r\n>that's what we tend to use.\r\n\r\nI don't see that used in core at all. Only assert_no_match, with all but one of them just substrings.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 602
	},
	{
		"id" : 236152815,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-29T10:58:55Z",
		"body" : "@UniqMartin Yep, refute_match worked beautifully http://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/5542/version=el_capitan/console proving that indeed the preexisting luyten test was totally bogus since it didn't redirect stderr to stdout :)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 602
	},
	{
		"id" : 236154181,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-29T11:07:12Z",
		"body" : "> I don't see that used in core at all.\r\n\r\nI think my view is a bit skewed by looking at our test suite in this repository (something I see more frequently than test code in formulae, if I'm being honest). There you see a pretty clear dominance of the `\\brefute_` style assertions vs. the `\\bassert_non?_` style assertions.\r\n\r\nThinking a bit more about it, and given what I see in [`formula_assertions.rb`](https://github.com/Homebrew/brew/blob/3469f177f043b163e0c362b0fa10f9f99c31114b/Library/Homebrew/formula_assertions.rb), my suggestion might be not as useful as I thought. In formula tests, we only seem to use `MiniTest` if it is available and I'm not sure for what versions of Ruby it is guaranteed to be there. Otherwise we fall back to `Unit::Test` only (in which case we cannot use the `refute_*` family of assertions). I guess it's a bit hard to correctly code against a common subset, if what gets exposed is usually more. üòï",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 602
	},
	{
		"id" : 236154368,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-29T11:08:25Z",
		"body" : "I'm sorry for the hasty and possibly bad advice ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 602
	},
	{
		"id" : 236154645,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-29T11:10:11Z",
		"body" : "Yup, you're right. Mavericks CI:\r\n```\r\nundefined method `refute_match' for #<Formulary::FormulaNamespacea21d6e504776a132376876c79d2d610f::Luyten:0x104e5cd88>\r\n```\r\nWhat a shame.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 602
	},
	{
		"id" : 236337080,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-30T03:11:11Z",
		"body" : "Note: The [formula causing the problem](https://gist.github.com/DomT4/a1eceaa098bd713abcdf594fcf8e36e2) here is proving problematic elsewhere, in terms of anything already being installed by `pip` globally being skipped over during the `venv.pip_install resource(r)` step, so I may need to check this with another formula in case it's an isolated thing.\r\n\r\nThe skipping over problem is:\r\n<details>\r\n<summary>Click me</summary>\r\n```\r\n==> /usr/local/Cellar/deluge/1.3.13/libexec/bin/pip install -v --no-deps --no-binary :all: /private/tmp/deluge--pyOpenSSL-20160730-52206-1afp4zf/pyOpenSSL-16.0.0\r\nProcessing /private/tmp/deluge--pyOpenSSL-20160730-52206-1afp4zf/pyOpenSSL-16.0.0\r\n  Running setup.py (path:/var/folders/qs/rg1v7kz56wv3v9z4qwgtv3g80000gn/T/pip-dFAohc-build/setup.py) egg_info for package from file:///private/tmp/deluge--pyOpenSSL-20160730-52206-1afp4zf/pyOpenSSL-16.0.0\r\n    Running command python setup.py egg_info\r\n    running egg_info\r\n    creating pip-egg-info/pyOpenSSL.egg-info\r\n    writing requirements to pip-egg-info/pyOpenSSL.egg-info/requires.txt\r\n    writing pip-egg-info/pyOpenSSL.egg-info/PKG-INFO\r\n    writing top-level names to pip-egg-info/pyOpenSSL.egg-info/top_level.txt\r\n    writing dependency_links to pip-egg-info/pyOpenSSL.egg-info/dependency_links.txt\r\n    writing manifest file 'pip-egg-info/pyOpenSSL.egg-info/SOURCES.txt'\r\n    warning: manifest_maker: standard file '-c' not found\r\n\r\n    reading manifest file 'pip-egg-info/pyOpenSSL.egg-info/SOURCES.txt'\r\n    reading manifest template 'MANIFEST.in'\r\n    warning: no previously-included files found matching 'leakcheck'\r\n    warning: no previously-included files matching '*.py' found under directory 'leakcheck'\r\n    warning: no previously-included files matching '*.pem' found under directory 'leakcheck'\r\n    no previously-included directories found matching 'doc/_build'\r\n    no previously-included directories found matching '.travis'\r\n    writing manifest file 'pip-egg-info/pyOpenSSL.egg-info/SOURCES.txt'\r\n  Source in /var/folders/qs/rg1v7kz56wv3v9z4qwgtv3g80000gn/T/pip-dFAohc-build has version 16.0.0, which satisfies requirement pyOpenSSL==16.0.0 from file:///private/tmp/deluge--pyOpenSSL-20160730-52206-1afp4zf/pyOpenSSL-16.0.0\r\n  Requirement already satisfied (use --upgrade to upgrade): pyOpenSSL==16.0.0 from file:///private/tmp/deluge--pyOpenSSL-20160730-52206-1afp4zf/pyOpenSSL-16.0.0 in /usr/local/lib/python2.7/site-packages\r\nSkipping bdist_wheel for pyOpenSSL, due to binaries being disabled for it.\r\nCleaning up...\r\n  Removing source in /var/folders/qs/rg1v7kz56wv3v9z4qwgtv3g80000gn/T/pip-dFAohc-build\r\n\r\nTesting domt4/crypto/deluge\r\n==> Using the sandbox\r\n/usr/bin/sandbox-exec -f /tmp/homebrew20160730-51762-c3gvzs.sb /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby -W0 -I /usr/local/Library/Homebrew -- /usr/local/Library/Homebrew/test.rb /usr/local/Library/Taps/domt4/homebrew-crypto/Formula/deluge.rb -v\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/deluge/1.3.13/bin/deluge-web\", line 9, in <module>\r\n    load_entry_point('deluge==1.3.13', 'console_scripts', 'deluge-web')()\r\n  File \"/usr/local/Cellar/deluge/1.3.13/libexec/lib/python2.7/site-packages/deluge/ui/web/web.py\", line 138, in start\r\n    web.start()\r\n  File \"/usr/local/Cellar/deluge/1.3.13/libexec/lib/python2.7/site-packages/deluge/ui/web/web.py\", line 107, in start\r\n    import server\r\n  File \"/usr/local/Cellar/deluge/1.3.13/libexec/lib/python2.7/site-packages/deluge/ui/web/server.py\", line 50, in <module>\r\n    from OpenSSL.crypto import FILETYPE_PEM\r\nImportError: No module named OpenSSL.crypto\r\n==> curl localhost:8081\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0curl: (7) Failed to connect to localhost port 8081: Connection refused\r\nError: domt4/crypto/deluge: failed\r\n<0> expected but was\r\n<7>.\r\n``` \r\n</details>\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 603
	},
	{
		"id" : 236367040,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-30T14:04:27Z",
		"body" : "I think in the formula you need to write out an environment script around the executable to pull in the other stuff so it's in the PYTHONPATH, no?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 603
	},
	{
		"id" : 236367168,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-30T14:07:23Z",
		"body" : "@DomT4 Unless I've misunderstood the scenario, see https://github.com/Homebrew/brew/pull/344#issuecomment-234242676 and Tim's response.\r\n\r\nCC @tdsmith",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 603
	},
	{
		"id" : 236367552,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-30T14:15:56Z",
		"body" : "> Unless I've misunderstood the scenario, see #344 (comment) and Tim's response.\r\n\r\nAh, I didn't see that. I kind of let you & Tim hash things out in that thread before I got involved üòÑ. I checked the new documentation but didn't find anything about needing to find the Python elements of other formulae, which left me a little confused on how to handle it best.\r\n\r\nSo instead of:\r\n```ruby\r\nvenv = virtualenv_create(libexec)\r\n%w[\r\n  setuptools attrs cffi chardet cryptography enum34 idna ipaddress\r\n  pyasn1 pyasn1-modules pycparser Pillow pyOpenSSL pyxdg six\r\n  service_identity Twisted zope.interface MarkupSafe Mako\r\n].each do |r|\r\n  venv.pip_install resource(r)\r\nend\r\nvenv.link_scripts(bin) { venv.pip_install buildpath }\r\n```\r\nYou'd do something like:\r\n```ruby\r\nvenv = virtualenv_create(libexec)\r\n%w[\r\n  setuptools attrs cffi chardet cryptography enum34 idna ipaddress\r\n  pyasn1 pyasn1-modules pycparser Pillow pyOpenSSL pyxdg six\r\n  service_identity Twisted zope.interface MarkupSafe Mako\r\n].each do |r|\r\n  venv.pip_install resource(r)\r\nend\r\n\r\nENV.prepend_create_path \"PYTHONPATH\", Formula[\"pygobject\"].opt_lib/\"python2.7/site-packages\"\r\n(bin/\"deluge\").write_env_script libexec/\"bin/deluge\", :PYTHONPATH => ENV[\"PYTHONPATH\"]\r\n```\r\n‚ùì ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 603
	},
	{
		"id" : 236368210,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-30T14:30:14Z",
		"body" : ">I kind of let you & Tim hash things out in that thread before I got involved :smile:\r\n\r\nYes, I realize I'm probably lucky I didn't get :facepunch:'ed.\r\n\r\n>You'd do something like \\<snippet\\>\r\n\r\nYou'd also have to do\r\n```\r\nvenv.pip_install buildpath\r\n```\r\n\r\nI think that should work, assuming there aren't any other executables that would have been linked by `venv.link_scripts`.\r\n\r\n\r\nIn general, it might be better to do the canonical\r\n```\r\nvenv.link_scripts(bin) { venv.pip_install buildpath }\r\n```\r\nand then fixup what was placed in bin with `bin.env_script_all_files(libexec/\"bin\", env)`, since there's magical logic in venv.link_scripts(bin) that determines what the difference is between what executables are there before yielding to the block with `venv.pip_install buildpath`, and what executables are there after the block returns, and then it only links the \"new\" ones.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 603
	},
	{
		"id" : 236377790,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-30T17:25:08Z",
		"body" : "Probably don't do any of that. :D\r\n\r\nThe simplest thing to do is, in the depending formula:\r\n`(libexec/\"lib/python2.7/site-packages/deps.pth\").write \"import site; site.addsitedir('#{Formula[\"foo\"].lib/\"python2.7/site-packages\"}')\\n\"`\r\n\r\nI think `virtualenv_create` can/should do this automatically.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 603
	},
	{
		"id" : 236377833,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-30T17:25:51Z",
		"body" : "> anything already being installed by pip globally being skipped over during the venv.pip_install resource(r) step\r\n\r\nThis is some hot garbage which should not be happening >:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 603
	},
	{
		"id" : 236377891,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-30T17:27:00Z",
		"body" : ">I think virtualenv_create can/should do this automatically.\r\n\r\nEven if it's from another formula? Should this be handled by superenv?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 603
	},
	{
		"id" : 236377916,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-30T17:27:36Z",
		"body" : "> This is some hot garbage which should not be happening >:\r\n\r\nI worked around it by locally adding `--ignore-installed` to our `pip` instructions, but I'm not sure how legit a fix that is so I didn't want to swing by with a completely wrong PR, heh.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 603
	},
	{
		"id" : 236378188,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-30T17:32:35Z",
		"body" : "> Even if it's from another formula? Should this be handled by superenv?\r\n\r\nWhat do you mean by from another formula? Superenv is irrelevant since the Python modules need to be found at runtime.\r\n\r\n> I worked around it by adding --ignore-installed to our pip instructions\r\n\r\nIt's probably the necessary fix and we'll want to add that anyway if we're auto-adding dependencies to the virtualenv.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 603
	},
	{
		"id" : 236378377,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-30T17:36:22Z",
		"body" : ">What do you mean by from another formula? Superenv is irrelevant since the Python modules need to be found at runtime.\r\n\r\nI mean for determining the PYTHONPATH so that modules from `depends_on`s get included in env scripts.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 603
	},
	{
		"id" : 236378919,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-30T17:45:22Z",
		"body" : "Oh, nah. Using PYTHONPATH at all ever is an antipattern in this brave new world.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 603
	},
	{
		"id" : 236379022,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-30T17:46:33Z",
		"body" : "Got it. PYTHONPATH, bad. Aldous Huxley, good.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 603
	},
	{
		"id" : 236385119,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-30T19:27:02Z",
		"body" : "see #608",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 603
	},
	{
		"id" : 236343743,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-30T05:16:25Z",
		"body" : "Also broke `brew cat` and `brew livecheck` when HOMEBREW_DEVELOPER is set\r\n```\r\nJosephs-MacBook-Pro:~ joe$ brew cat octave\r\nError: Calling MacOS.clang_version is deprecated!\r\nUse DevelopmentTools.clang_version instead.\r\n/usr/local/Library/Taps/homebrew/homebrew-science/octave.rb:23:in `<class:Octave>'\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/usr/local/Library/Homebrew/utils.rb:139:in `odeprecated'\r\n/usr/local/Library/Homebrew/compat/macos.rb:126:in `clang_version'\r\n/usr/local/Library/Taps/homebrew/homebrew-science/octave.rb:23:in `<class:Octave>'\r\n/usr/local/Library/Taps/homebrew/homebrew-science/octave.rb:1:in `load_formula'\r\n/usr/local/Library/Homebrew/formulary.rb:25:in `module_eval'\r\n/usr/local/Library/Homebrew/formulary.rb:25:in `load_formula'\r\n/usr/local/Library/Homebrew/formulary.rb:42:in `load_formula_from_path'\r\n/usr/local/Library/Homebrew/formulary.rb:91:in `load_file'\r\n/usr/local/Library/Homebrew/formulary.rb:82:in `klass'\r\n/usr/local/Library/Homebrew/formulary.rb:78:in `get_formula'\r\n/usr/local/Library/Homebrew/formulary.rb:215:in `factory'\r\n/usr/local/Library/Homebrew/formulary.rb:371:in `find_with_priority'\r\n/usr/local/Library/Homebrew/extend/ARGV.rb:20:in `block in formulae'\r\n/usr/local/Library/Homebrew/extend/ARGV.rb:16:in `map'\r\n/usr/local/Library/Homebrew/extend/ARGV.rb:16:in `formulae'\r\n/usr/local/Library/Homebrew/cmd/cat.rb:9:in `cat'\r\n/usr/local/Library/Homebrew/brew.rb:87:in `<main>'\r\n```\r\n\r\n```\r\nJosephs-MacBook-Pro:~ joe$ brew livecheck octave\r\nError: Calling MacOS.clang_version is deprecated!\r\nUse DevelopmentTools.clang_version instead.\r\n/usr/local/Library/Taps/homebrew/homebrew-science/octave.rb:23:in `<class:Octave>'\r\n/usr/local/Library/Homebrew/utils.rb:139:in `odeprecated'\r\n/usr/local/Library/Homebrew/compat/macos.rb:126:in `clang_version'\r\n/usr/local/Library/Taps/homebrew/homebrew-science/octave.rb:23:in `<class:Octave>'\r\n/usr/local/Library/Taps/homebrew/homebrew-science/octave.rb:1:in `load_formula'\r\n/usr/local/Library/Taps/youtux/homebrew-livecheck/livecheck/extend/formulary.rb:9:in `module_eval'\r\n/usr/local/Library/Taps/youtux/homebrew-livecheck/livecheck/extend/formulary.rb:9:in `load_formula'\r\n/usr/local/Library/Homebrew/formulary.rb:42:in `load_formula_from_path'\r\n/usr/local/Library/Homebrew/formulary.rb:91:in `load_file'\r\n/usr/local/Library/Homebrew/formulary.rb:82:in `klass'\r\n/usr/local/Library/Homebrew/formulary.rb:78:in `get_formula'\r\n/usr/local/Library/Homebrew/formulary.rb:215:in `factory'\r\n/usr/local/Library/Homebrew/formulary.rb:371:in `find_with_priority'\r\n/usr/local/Library/Homebrew/extend/ARGV.rb:20:in `block in formulae'\r\n/usr/local/Library/Homebrew/extend/ARGV.rb:16:in `map'\r\n/usr/local/Library/Homebrew/extend/ARGV.rb:16:in `formulae'\r\n/usr/local/Library/Taps/youtux/homebrew-livecheck/cmd/brew-livecheck.rb:107:in `<top (required)>'\r\n/usr/local/Cellar/ruby/2.3.1/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n/usr/local/Cellar/ruby/2.3.1/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n/usr/local/Library/Homebrew/brew.rb:22:in `require?'\r\n/usr/local/Library/Homebrew/brew.rb:93:in `<main>'\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 604
	},
	{
		"id" : 236344807,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-30T05:35:24Z",
		"body" : "And CI is toast: http://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/5573/version=el_capitan/console",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 604
	},
	{
		"id" : 236346428,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-30T06:07:00Z",
		"body" : "And brew tap\r\n```\r\n/usr/local/Library/Taps/homebrew/homebrew-science/octave.rb:23:in `<class:Octave>'\r\nError: Cannot tap homebrew/science: invalid syntax in tap!\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 604
	},
	{
		"id" : 236347723,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-30T06:33:36Z",
		"body" : "Closed via https://github.com/Homebrew/brew/commit/19a77c816ebb66301b7a74fea513245043ba5aae and https://github.com/Homebrew/homebrew-science/pull/3905",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 604
	},
	{
		"id" : 236366373,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-30T13:52:16Z",
		"body" : "Thanks for the quick fix. FWIW: everything will break with `HOMEBREW_DEVELOPER` set as a way to get these things fixed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 604
	},
	{
		"id" : 236366518,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-30T13:55:14Z",
		"body" : "@MikeMcQuaid You're welcome. That makes sense. Only qualm I have about that is unsetting HOMEBREW_DEVELOPER has consequences for how `brew update` behaves that can potentially be even more disruptive, so it may be useful to have a more surgical override than just un-setting HOMEBREW_DEVELOPER.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 604
	},
	{
		"id" : 236345766,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-30T05:52:30Z",
		"body" : "CC @MikeMcQuaid ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 605
	},
	{
		"id" : 236358913,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-07-30T10:53:34Z",
		"body" : "Actually, this may indicate a more severe problem that we may get revision number wrong. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 605
	},
	{
		"id" : 236366049,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-30T13:45:40Z",
		"body" : "Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 605
	},
	{
		"id" : 236366122,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-30T13:46:49Z",
		"body" : "No problem :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 605
	},
	{
		"id" : 236362210,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-30T12:16:42Z",
		"body" : "> This is causing hiccups with some of our local developers. Any particular reason its started happening this evening\r\n\r\nPeople executing `brew install` or `brew fetch` on SHA1 formulae have been seeing a warning for a while. It was turned into a more severe fail yesterday as the deprecation timetable edges ahead, without the formulae actually needing to be executed by a user. We may need to see how that goes.\r\n\r\nEssentially carrying around so much old code is problematic on a number of levels & makes looking after Homebrew considerably harder, which degrades UX over time. Consequently, we try & gently nudge external taps to follow our lead and update the syntax/checksum every now and again with tools like `brew audit` but sometimes that's not noisy enough for people to take notice of üòï.\r\n\r\nIn the very short term I'd recommend reporting it to the upstream taps that they need to move their formulae over to SHA256. I've done that for every tap you've listed in your post & https://github.com/killercup/homebrew-openresty have already fixed their issue at least.\r\n\r\nDespite the noise things _should_ actually be updating & upgrading fine.\r\n\r\nCC @MikeMcQuaid.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 606
	},
	{
		"id" : 236366135,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-30T13:47:01Z",
		"body" : "Sorry for the noise but, as @DomT4 points out, they are issues that need reported and fixed. Thanks for the report!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 606
	},
	{
		"id" : 236390150,
		"user" : {
			"login" : "seclorum"
		},
		"created_at" : "2016-07-30T21:10:46Z",
		"body" : "Thanks @DomT4 and @MikeMcQuaid for the info .. I will chase it up as I encounter the errors and report it to the appropriate places upstream ..",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 606
	},
	{
		"id" : 236427387,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-31T12:30:51Z",
		"body" : "> I will chase it up as I encounter the errors and report it to the appropriate places upstream ..\r\n\r\nThanks! :heart: You might have noticed that after some tweaking it should now be always printing the path of the offending formula file (which was not yet the case when you opened this issue). This should make reporting those warnings to the right tap a lot easier.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 606
	},
	{
		"id" : 236462630,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-07-31T23:11:46Z",
		"body" : "How should this interact with boneyarded formulae? #615 `brew tap` is now balking at tapping `homebrew/boneyard`, and `brew uses` gets lots of warnings when the boneyard is tapped.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 606
	},
	{
		"id" : 236359928,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-30T11:22:24Z",
		"body" : "We tweaked some things to make our deprecations less silent, because most of them were getting ignored & it makes making Homebrew work more difficult. We may need to tweak the messaging depending on how much this proves very noisy.\r\n\r\n`brew update` should be identifying the problematic file along with that message. Is that not the case?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 607
	},
	{
		"id" : 236360317,
		"user" : {
			"login" : "raguay"
		},
		"created_at" : "2016-07-30T11:33:38Z",
		"body" : "No, it just gives that message. Nothing else. It really messes up my BitBar\nscript.\n\nOn Sat, Jul 30, 2016 at 6:22 PM, Dominyk Tiller <notifications@github.com>\nwrote:\n\n> We tweaked some things to make our deprecations less silent, because most\n> of them were getting ignored & it makes making Homebrew work more\n> difficult. We may need to tweak the messaging depending on how much this\n> proves very noisy.\n>\n> brew update should be identifying the problematic file along with that\n> message. Is that not the case?\n>\n> ‚Äî\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/Homebrew/brew/issues/607#issuecomment-236359928>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ACX0xw5KjB4Z6i8lhzzI8LTkTMUhZc6xks5qazP2gaJpZM4JYx76>\n> .\n>\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 607
	},
	{
		"id" : 236360517,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-30T11:38:22Z",
		"body" : "Can you run `brew update -v` & see if we hit a more obvious failure point? Thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 607
	},
	{
		"id" : 236360653,
		"user" : {
			"login" : "raguay"
		},
		"created_at" : "2016-07-30T11:42:01Z",
		"body" : "Weird. brew update now shows nothing but everything is up to date. But,\nbrew upgrade still shows the errors. I ran the command:\n\nbrew upgrade -v                                                     ÓÇ≤ Ôà∫\nWarning: Calling 'depends_on :autoconf' is deprecated!\nUse 'depends_on \"autoconf\" => :build' instead.\n/usr/local/Library/Homebrew/compat/dependency_collector.rb:11:in\n`parse_symbol_spec'\n\nWarning: Calling 'depends_on :automake' is deprecated!\nUse 'depends_on \"automake\" => :build' instead.\n/usr/local/Library/Homebrew/compat/dependency_collector.rb:11:in\n`parse_symbol_spec'\n\nIt's doesn't give anymore information than that.\n\nOn Sat, Jul 30, 2016 at 6:38 PM, Dominyk Tiller <notifications@github.com>\nwrote:\n\n> Can you run brew update -v & see if we hit a more obvious failure point?\n> Thanks.\n>\n> ‚Äî\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/Homebrew/brew/issues/607#issuecomment-236360517>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ACX0x9EZobSRI6tT3zHu0l97MSMkXDVCks5qazeygaJpZM4JYx76>\n> .\n>\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 607
	},
	{
		"id" : 236363838,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-30T12:56:53Z",
		"body" : "In 0a33cc591d258e07f2279bc0440d62e38983fd67 I improved the logic that determines which code location to point out in the message a bit, so that it will hopefully always point out the formula where the warning originated from. Can you please `brew update` and see if it now shows the offending formulae in the message?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 607
	},
	{
		"id" : 236363952,
		"user" : {
			"login" : "raguay"
		},
		"created_at" : "2016-07-30T12:59:46Z",
		"body" : "Okay. It looks like the last emacs is the cause:\n\nWarning: Calling 'depends_on :autoconf' is deprecated!\nUse 'depends_on \"autoconf\" => :build' instead.\n/usr/local/Library/Taps/railwaycat/homebrew-emacsmacport/Formula/emacs-mac.rb:10:in\n`<class:EmacsMac>'\n\nWarning: Calling 'depends_on :automake' is deprecated!\nUse 'depends_on \"automake\" => :build' instead.\n/usr/local/Library/Taps/railwaycat/homebrew-emacsmacport/Formula/emacs-mac.rb:11:in\n`<class:EmacsMac>'\n\nI believe Emacs had just updated before this started showing up as well.\n\nOn Sat, Jul 30, 2016 at 7:56 PM, Martin Afanasjew <notifications@github.com>\nwrote:\n\n> In 0a33cc5\n> <https://github.com/Homebrew/brew/commit/0a33cc591d258e07f2279bc0440d62e38983fd67>\n> I improved the logic that determines which code location to point out in\n> the message a bit, so that it will hopefully always point out the formula\n> where the warning originated from. Can you please brew update and see if\n> it now shows the offending formulae in the message?\n>\n> ‚Äî\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/Homebrew/brew/issues/607#issuecomment-236363838>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ACX0x_YJaf7xpKNTAxDECnNGv736h-hbks5qa0oZgaJpZM4JYx76>\n> .\n>\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 607
	},
	{
		"id" : 236364148,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-30T13:03:59Z",
		"body" : "Thanks and sorry for the trouble! Could you report this to the railwaycat/emacsmacport tap?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 607
	},
	{
		"id" : 236364458,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-30T13:10:33Z",
		"body" : "https://github.com/railwaycat/homebrew-emacsmacport/issues/70",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 607
	},
	{
		"id" : 236364663,
		"user" : {
			"login" : "raguay"
		},
		"created_at" : "2016-07-30T13:15:42Z",
		"body" : "Just added the issue. Thanks for the help.\n\nOn Sat, Jul 30, 2016 at 8:10 PM, Dominyk Tiller <notifications@github.com>\nwrote:\n\n> railwaycat/homebrew-emacsmacport#70\n> <https://github.com/railwaycat/homebrew-emacsmacport/issues/70>\n>\n> ‚Äî\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/Homebrew/brew/issues/607#issuecomment-236364458>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ACX0x5GN3NDtxNdghEi2tHN1vOYFpGYQks5qa01NgaJpZM4JYx76>\n> .\n>\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 607
	},
	{
		"id" : 236376227,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-30T16:56:15Z",
		"body" : "The cause of the problem here has been kindly fixed upstream. Should be alright now, at least for that tap.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 607
	},
	{
		"id" : 236400289,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-31T00:59:41Z",
		"body" : "If it fixes it: seems fine to me üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 608
	},
	{
		"id" : 236401239,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-31T01:23:05Z",
		"body" : "Are you going to throw me in the sea if I tell you this doesn't _quite_ work on my example in the Issue because of the way a formula is packaged? üôà.\r\n\r\n```python\r\n[ERROR   ] 02:19:21 ui:171 No module named gtk\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/deluge2/1.3.13/libexec/lib/python2.7/site-packages/deluge/ui/ui.py\", line 152, in __init__\r\n    from deluge.ui.gtkui.gtkui import GtkUI\r\n  File \"/usr/local/Cellar/deluge2/1.3.13/libexec/lib/python2.7/site-packages/deluge/ui/gtkui/__init__.py\", line 1, in <module>\r\n    from gtkui import start\r\n  File \"/usr/local/Cellar/deluge2/1.3.13/libexec/lib/python2.7/site-packages/deluge/ui/gtkui/gtkui.py\", line 50, in <module>\r\n    reactor = gtk2reactor.install()\r\n  File \"/usr/local/Cellar/deluge2/1.3.13/libexec/lib/python2.7/site-packages/twisted/internet/gtk2reactor.py\", line 99, in install\r\n    reactor = Gtk2Reactor(useGtk)\r\n  File \"/usr/local/Cellar/deluge2/1.3.13/libexec/lib/python2.7/site-packages/twisted/internet/gtk2reactor.py\", line 71, in __init__\r\n    import gtk as _gtk\r\nImportError: No module named gtk\r\n```\r\nThe problem here being that our `pygtk` formula's `gtk` module is packaged in:\r\n\r\n```\r\n/usr/local/opt/pygtk/lib/python2.7/site-packages/gtk-2.0\r\n```\r\nRather than:\r\n```\r\n/usr/local/opt/pygtk/lib/python2.7/site-packages\r\n```\r\n\r\nNot sure if that's an upstream issue or something problematic to this PR, but thought I'd mention it. Everything else about this is üíØ on solving the other issues encountered.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 608
	},
	{
		"id" : 236401482,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-31T01:28:07Z",
		"body" : "> Are you going to throw me in the sea\r\n\r\nthe North Atlantic, post-haste!\r\n\r\nThe version that operates on recursive dependencies *should* work here since the relevant file is provided by `pygobject` and pygtk depends_on pygobject; is that not happening?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 608
	},
	{
		"id" : 236401534,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-31T01:29:14Z",
		"body" : "Oh: no, it's not happening, because the .pth file pygobject installs is assuming that it's read from the same tree as pygtk, when they're actually in separate cellars. pygobject's .pth file should be rewritten.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 608
	},
	{
		"id" : 236401542,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-31T01:29:27Z",
		"body" : "> the North Atlantic, post-haste!\r\n\r\nAny chance we can go for a warmer sea?\r\n\r\n> is that not happening?\r\n\r\nI ran `brew pull` on this PR & then `brew install ~/Downloads/deluge2.rb`, and then executing a simple `deluge`, so I guess not?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 608
	},
	{
		"id" : 236450497,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-31T19:09:38Z",
		"body" : "Thanks Tim ‚ù§Ô∏è ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 608
	},
	{
		"id" : 236404820,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-31T02:43:57Z",
		"body" : "Going to ninja merge this because I've an incoming PR in `core` that needs it, but raise any objections as desired & I'll fix 'em later today.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 609
	},
	{
		"id" : 236427118,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-31T12:24:23Z",
		"body" : "Nice amended PR title. :wink: And no worries; happens to most of us every once in a while.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 610
	},
	{
		"id" : 236433446,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-31T14:38:46Z",
		"body" : "I enjoyed reading the amended `README.md` as well. Thanks for the chuckle! üòÉ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 610
	},
	{
		"id" : 236426504,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-31T12:09:48Z",
		"body" : "This is a nice improvement of the warning (making it actionable), thus :+1: (after addressing a few nits) even if the support load from these reports feels quite manageable right now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 611
	},
	{
		"id" : 236433707,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-07-31T14:42:39Z",
		"body" : "üëç on the overall idea. Will let you & Martin debate the finer points of how to write it.\r\n\r\nFrom the PRs & Issues I filed yesterday on this problem apparently not many tap developers are aware of `brew audit` & consequently didn't have a lot of warning these deprecations were coming in harder at some point. That's a bit of a pain.\r\n\r\nThe upside is that hopefully noisier deprecations means eventually we can cut some of that code completely, one day.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 611
	},
	{
		"id" : 236444476,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-31T17:37:14Z",
		"body" : "> From the PRs & Issues I filed yesterday on this problem apparently not many tap developers are aware of brew audit & consequently didn't have a lot of warning these deprecations were coming in harder at some point. That's a bit of a pain.\r\n\r\nIt is but I feel like now we at least have a way of communicating these things without relying on `brew audit` being run.\r\n\r\n> The upside is that hopefully noisier deprecations means eventually we can cut some of that code completely, one day.\r\n\r\nAgreed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 611
	},
	{
		"id" : 236444497,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-31T17:37:24Z",
		"body" : "Have addressed feedback, thanks @UniqMartin.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 611
	},
	{
		"id" : 236446904,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-31T18:12:12Z",
		"body" : "@UniqMartin Updated with feedback.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 611
	},
	{
		"id" : 236447008,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-31T18:13:46Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 611
	},
	{
		"id" : 236444940,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-31T17:43:46Z",
		"body" : "Addressed feedback.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 612
	},
	{
		"id" : 236446134,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-31T18:00:42Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 612
	},
	{
		"id" : 236439077,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-31T16:15:24Z",
		"body" : "Makes sense to me; can you supply a sample formula diff?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 613
	},
	{
		"id" : 236439105,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-07-31T16:15:46Z",
		"body" : "any thoughts on having install & install_and_link, and exposing even less of this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 613
	},
	{
		"id" : 236440011,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-31T16:32:27Z",
		"body" : "This was the first way I implemented it. I came to feel that using an options hash was not as nice as composing methods, based on a prejudice against arguments that switch behavior on or off; you can find some comments in that PR where I vacillate between the two options.\r\n\r\n> install & install_and_link\r\n\r\nThis was the second way I implemented it! I think this is probably nicer than an options hash.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 613
	},
	{
		"id" : 236440474,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-31T16:41:00Z",
		"body" : "Pushed a few updates to make the code changes more complete.\r\n\r\n> Makes sense to me; can you supply a sample formula diff?\r\n\r\nMost formulae will use the single-shot wrapper `virtualenv_install_with_resources` that already exists. The more complicated cases will use `virtualenv_create` and operate on the returned `Virtualenv` instance. For these, the only difference will be to replace:\r\n\r\n```\r\nvenv.link_scripts(bin) { venv.pip_install buildpath }\r\n```\r\n\r\nWith:\r\n\r\n```ruby\r\nvenv.pip_install buildpath, :link_scripts => bin\r\n```\r\n\r\n> any thoughts on having install & install_and_link, and exposing even less of this?\r\n\r\nI'm fine with that and it would be a trivial change. Basically, I think either of the following read nicer than the block form (though I'm personally most fond of the option hash form):\r\n\r\n```ruby\r\nvenv.pip_install_and_link buildpath\r\nvenv.pip_install buildpath, :link_scripts => true\r\nvenv.pip_install buildpath, :link_scripts => bin\r\n```\r\n\r\n`Virtualenv#pip_install_and_link` would be basically the current `Virtualenv#link_scripts` but instead of `yield`ing, it would forward its arguments to `Virtualenv#pip_install`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 613
	},
	{
		"id" : 236445349,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-31T17:49:21Z",
		"body" : "Replaced the functionality of `:link_scripts => bin` with a `#pip_install_and_link` method that uses composition instead and delegates to `#pip_install` for installing the targets.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 613
	},
	{
		"id" : 236460861,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-07-31T22:30:42Z",
		"body" : "I have addressed all comments. I'm not sure how reasonable the stuff is, that I'm doing in the test, but at least I'm not sticking things with side effects into places where they don't belong.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 613
	},
	{
		"id" : 236462844,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-07-31T23:16:08Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 613
	},
	{
		"id" : 237548485,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-04T13:13:04Z",
		"body" : "Apologies that I was hardly around the past few days!\r\n\r\nI have to admit that I'm not entirely happy that this was merged without completing the checklist in the top comment (e.g. update documentation in `share/doc/homebrew/`) and with all the noise of the incremental changes preserved in the commit message ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 613
	},
	{
		"id" : 236453164,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-07-31T20:00:40Z",
		"body" : "Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 614
	},
	{
		"id" : 236461813,
		"user" : {
			"login" : "rgormley"
		},
		"created_at" : "2016-07-31T22:52:44Z",
		"body" : "Gist here for brew config and brew doctor:\r\n\r\nhttps://gist.github.com/rgormley/61e298cc6705e8d16b901c9c0b915089\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 614
	},
	{
		"id" : 236523575,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-01T08:47:28Z",
		"body" : "@rgormley We no longer provide a formula for `sshpass` so you should probably `brew uninstall --force sshpass`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 614
	},
	{
		"id" : 236526266,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-01T08:59:23Z",
		"body" : "Great core PR üëç\r\n\r\n:shipit: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 616
	},
	{
		"id" : 236554462,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-01T11:19:20Z",
		"body" : "Thanks! Will let this sit until this evening to give other maintainers a chance to comment if they wish to, but otherwise I'll merge it then.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 616
	},
	{
		"id" : 236612611,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-01T15:21:02Z",
		"body" : ":+1:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 616
	},
	{
		"id" : 236639248,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-01T16:53:10Z",
		"body" : "Have added two code comment of the ‚Äúnice to have‚Äù kind, but generally already :+1: as-is.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 616
	},
	{
		"id" : 244548354,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:05:15Z",
		"body" : "@lewisinc Have you had a chance to look at updating this PR based on the comments? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 618
	},
	{
		"id" : 238009115,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T06:40:21Z",
		"body" : "One very minor nit but seems to be totally reasonable. :+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 619
	},
	{
		"id" : 236860287,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-02T10:03:17Z",
		"body" : "I keep trying to get the ball rolling here without much success. Tried to talk people into doing an `llvm38` core formula before giving up & waiting for the core `llvm` formula to be ready to update. Probably my fault for not drawing up a proper timetable outside of my head, but there we go.\r\n\r\n> Do not accept new versions in homebrew/versions for any versions above those in core and consider moving old versions back into core.\r\n\r\nWould like to get the problem with `brew install/info homebrew/versions/ducks150` resolved on moving formulae before we start reverse migration, but yeah, some stuff will have to come out of Versions in the medium term.\r\n\r\n> At some point in the future if we're on e.g. boost30 or something (having had boost21 etc.) we remove any formulae from core that still depend on boost15 and remove the boost15 formula itself.\r\n\r\nFor the sake of keeping the core actually maintainable I'd like us to follow the same rules we've applied to new Versions submissions, i.e. +/-2 from current release, formulae should be pegged to a specific release branch & not for example `autoconf213`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 236861515,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-02T10:08:41Z",
		"body" : "> For the sake of keeping the core actually maintainable I'd like us to follow the same rules we've applied to new Versions submissions, i.e. +/-2 from current release, formulae should be pegged to a specific release branch & not for example autoconf213.\r\n\r\nAgreed. Should add another point once we decide about naming. I'm increasing tempted by @UniqMartin's suggestion of e.g. `autoconf+2.1` format.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 236863855,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-02T10:19:19Z",
		"body" : "One big question we'll need to resolve is how to balance formulae against each other. It doesn't make sense for say `boost+160` to be `keg_only` if `boost` is currently installed & `boost` points to `boost+159` or such, but if both are installed there will be a conflict and we need to work out how best to handle that without trashing UX.\r\n\r\n@UniqMartin's suggestion of `boost+160` or similar makes enough sense. I don't have a strong preference between `boost160` and `boost+160`. We've used the former but I don't think anyone is particularly attached to it & perhaps changing the format will more strongly indicate change on how we handle Versions.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 236864712,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-02T10:23:10Z",
		"body" : "> One big question we'll need to resolve is how to balance formulae against each other. It doesn't make sense for say boost+160 to be keg_only if boost is currently installed & boost points to boost+159 or such, but if both are installed there will be a conflict and we need to work out how best to handle that without trashing UX.\r\n\r\nI don't think that's a blocker on this but we could infer `keg_only` status based on the alias.\r\n\r\n> @UniqMartin's suggestion of boost+160 or similar makes enough sense. I don't have a strong preference between boost160 and boost+160.\r\n\r\nI have a strong preference for something with a `.` in it; it's not obvious from a glance whether `boost160` is `boost1.6.0` or `boost16.0` or `boost1.60` or what üòÜ \r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 236865923,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-02T10:29:00Z",
		"body" : "> I don't think that's a blocker on this but we could infer keg_only status based on the alias.\r\n\r\nThat seems reasonable. I'm hesitant to introduce a bunch more `keg_only` formulae given they're not massively user friendly but I can't think of an obviously better workaround. Maybe an extension to the `conflicts_with` mechanism to account for run rather than build or something.\r\n```ruby\r\nconflicts_with \"boost\" => :run, :because => \"Boost alias currently points to boost+159\"\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 236867345,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-02T10:36:09Z",
		"body" : "@DomT4 Yeh but I'm thinking that it should be inferred rather than specified in the formula.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 236868428,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-02T10:41:27Z",
		"body" : "Aye. It shouldn't be difficult to check the current alias & assume anything matching a regex of that name can't be linked on top of that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 236868623,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-02T10:42:18Z",
		"body" : "Another reason for using `boost+1.2.3` or something similar; it allows us to use `boost+` in the regex rather than the problematic `boost`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 236952185,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-08-02T16:02:00Z",
		"body" : "Debian separates the name and version with a hyphen, e.g. `libstdc++-4.8` and `libusb-1.0`\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 237008047,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-08-02T19:01:31Z",
		"body" : "I'm just a lurking Homebrew beginner watching this issue, but I just came up with the thought that another option would be to separate the formula name and version with '`-v`' or '`_v`'&thinsp;‚Äî&thinsp;i. e.:  `boost-v1.61.0` or `boost_v1.61.0` for Boost v1.61.0&thinsp;‚Äî&thinsp;since it might be a good idea to explicitly specify that the number suffixed to a formula name is a version number using the letter 'v' as an abbreviation.  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 237021011,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-08-02T19:46:29Z",
		"body" : "Please don't stick punctuation in the formula names.  That makes things really annoying to type.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 237022168,
		"user" : {
			"login" : "CamJN"
		},
		"created_at" : "2016-08-02T19:49:43Z",
		"body" : "Maybe if it was a ‚ù£ but ascii punctuation should be fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 237160873,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-03T07:13:28Z",
		"body" : "We're going to have to stick some sort of character we don't currently use in formula names to delimit them. You shouldn't need to type the non-aliased version, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 239687028,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-14T17:56:54Z",
		"body" : "Should this be in the -evolution process?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 239693732,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-14T20:04:57Z",
		"body" : "Maybe. It predates it and we've/(I've) got a fairly clear bunch of stuff to implement so I don't think so. We could perhaps reword it but the way I see it the evolution process is there to submit detailed designs for others to implement and a tracking issue like this is the way for maintainers to signal to each other \"this is work I currently have in progress\".",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 239695279,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-08-14T20:36:36Z",
		"body" : "> We're going to have to stick some sort of character we don't currently use in formula names to delimit them. You shouldn't need to type the non-aliased version, though.\r\n\r\nThere's a few unfortunately named packages that include `+` in the name:\r\n```\r\nbonnie++.rb            kimwitu++.rb           mysql-connector-c++.rb\r\ncrf++.rb               libsigc++.rb           pcre++.rb\r\ndvd+rw-tools.rb        libxml++.rb            png++.rb\r\ngtk+.rb                libxml++3.rb           vera++.rb\r\ngtk+3.rb               mysql++.rb\r\n```\r\n\r\nMy preference is `-` for its similarity to Debian. Definitely bike shedding. Both `+` and `-` are used in formula names, though granted there's only 14 that use `+` and 587 that use `-`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 239695650,
		"user" : {
			"login" : "CamJN"
		},
		"created_at" : "2016-08-14T20:44:13Z",
		"body" : "No formula names use '@'  or üê¢ for that matter. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 239748697,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-15T08:02:11Z",
		"body" : "@CamJN `@` is the forerunner in my mind.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 239896515,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-08-15T19:04:50Z",
		"body" : "@MikeMcQuaid:  Forerunner to _what?_  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 239899996,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-15T19:15:55Z",
		"body" : "I think Mike meant \"frontrunner,\" i.e. his favorite of the proposed options?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 239902012,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-08-15T19:24:04Z",
		"body" : "@tdsmith:  Ah, _that_ makes sense!  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 240031727,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T08:06:08Z",
		"body" : "> I think Mike meant \"frontrunner,\" i.e. his favorite of the proposed options?\r\n\r\nYes üòÄ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 240654923,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T08:16:27Z",
		"body" : "Even though I'm still fond of `+` as a delimiter, that's going to create some ambiguity with existing formula names and will complicate any automatic detection of related formulae.\r\n\r\nI'm very much in favor of using `@` as it reads very nicely (`<formula>@<series>`, e.g. `boost` at the 1.59 release series), is an unproblematic character in file names (it's easy to type, too), and not something we're currently using or accepting in our formula names.\r\n\r\nOn a related note, I think we should be stripping `@<series>` from the formula name before constructing a Ruby class name, e.g. `boost@1.59.rb` would still contain a `Boost` class derived from `Formula`, just like any other `boost@<series>.rb` formula file.\r\n\r\nOne major issue I'm not entirely sure how to handle is how we're going to upgrade stuff that depends on a versioned formula to use the next major release, e.g. to stick with the Boost example, do we use `boost@1.61` in every `depends_on \"boost\"` line and then bump this in every using formula, assuming it is already compatible with Boost 1.62.x, to `boost@1.62` after the `boost@1.62` formula has been merged?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 240658671,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T08:33:23Z",
		"body" : "> I'm very much in favor of using @ as it reads very nicely (<formula>@<series>, e.g. boost at the 1.59 release series), is an unproblematic character in file names (it's easy to type, too), and not something we're currently using or accepting in our formula names.\r\n\r\nYes, sounds like that's the best option.\r\n\r\n> On a related note, I think we should be stripping @<series> from the formula name before constructing a Ruby class name, e.g. boost@1.59.rb would still contain a Boost class derived from Formula, just like any other boost@<series>.rb formula file.\r\n\r\nI don't agree, this will add code complexity and deviation from the current patterns for no real benefit.\r\n\r\n> to stick with the Boost example, do we use boost@1.61 in every depends_on \"boost\" line and then bump this in every using formula, assuming it is already compatible with Boost 1.62.x, to boost@1.62 after the boost@1.62 formula has been merged?\r\n\r\nBasically, we do the current revisioning process after the merge which means we can merge new versions quickly. The two ways of doing that are to either:\r\n\r\n1. use `boost@` in `depends_on` as you mentioned\r\n2. only change the `boost` alias to point to `boost@1.6.2` when everything has been revisioned/updated to support the new version and then move the stuff that's blocking the upgrade to be depending on `boost@1.6.1` instead.\r\n\r\nI don't think we need to mandate which way to go as I think 2. will be better for core and 1. for e.g. science.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 240663562,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T08:54:46Z",
		"body" : "> > On a related note, I think we should be stripping `@<series>` from the formula name before constructing a Ruby class name, e.g. `boost@1.59.rb` would still contain a `Boost` class derived from `Formula`, just like any other `boost@<series>.rb` formula file.\r\n>\r\n> I don't agree, this will add code complexity and deviation from the current patterns for no real benefit.\r\n\r\nIt's a new pattern that hasn't been used before, thus we should be free to adjust the rules as necessary. And there's no real benefit in encoding the release series in the class name. It just unnecessarily duplicates this information, forces us to invent a new rule for translating `@` to a valid formula class name component, and overall increases the number of places that need to be changed when creating, e.g., `boost@1.62.rb` from `boost@1.61.rb`.\r\n\r\nIn contrast, stripping off `@<series>` is a simple change in [`Formulary.class_s`](https://github.com/Homebrew/brew/blob/af3ad3cb86faf73b3c9f089fa496a0e01f43b9f0/Library/Homebrew/formulary.rb#L56-L61) that implements this mapping for all of Homebrew in a single location (unless I'm overlooking something).\r\n\r\n> Basically, we do the current revisioning process after the merge which means we can merge new versions quickly. The two ways of doing that are to either:\r\n>\r\n> 1. use `boost@` in `depends_on` as you mentioned\r\n> 2. only change the `boost` alias to point to `boost@1.6.2` when everything has been revisioned/updated to support the new version and then move the stuff that's blocking the upgrade to be depending on `boost@1.6.1` instead.\r\n>\r\n> I don't think we need to mandate which way to go as I think 2. will be better for core and 1. for e.g. science.\r\n\r\nSounds good!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 240666200,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T09:06:34Z",
		"body" : "> It's a new pattern that hasn't been used before, thus we should be free to adjust the rules as necessary. \r\n\r\nThis pattern has been used in homebrew/versions and other taps for a long time.\r\n\r\n> And there's no real benefit in encoding the release series in the class name. \r\n\r\n- It stops having multiple classes with the same name in the same tap which, even if it doesn't break current code assumptions or introduce strange bugs, makes it harder to search for a single classname\r\n- It's what we've done with no complaints in homebrew/versions and taps for a long time.\r\n\r\n> It just unnecessarily duplicates this information, forces us to invent a new rule for translating @ to a valid formula class name component, and overall increases the number of places that need to be changed when creating, e.g., boost@1.62.rb from boost@1.61.rb.\r\n>\r\n> In contrast, stripping off @<series> is a simple change in Formulary.class_s that implements this mapping for all of Homebrew in a single location (unless I'm overlooking something).\r\n\r\nBoth versions require code changes so I don't think that's a strong argument either way.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 240671292,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T09:28:19Z",
		"body" : "> > It's a new pattern that hasn't been used before, thus we should be free to adjust the rules as necessary.\r\n>\r\n> This pattern has been used in homebrew/versions and other taps for a long time.\r\n\r\nI disagree: `\"fooXY\" != \"foo@X.Y\"`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 240671810,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T09:30:29Z",
		"body" : "> I disagree: \"fooXY\" != \"foo@X.Y\".\r\n\r\nI was referring to having the class name and filename both containing the version.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 242776892,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-26T16:02:45Z",
		"body" : "Ref: https://github.com/Homebrew/brew/pull/812",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 242777636,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-26T16:05:39Z",
		"body" : "> > On a related note, I think we should be stripping @ from the formula name before constructing a Ruby class name, e.g. boost@1.59.rb would still contain a Boost class derived from Formula, just like any other boost@.rb formula file.\r\n\r\n> I don't agree, this will add code complexity and deviation from the current patterns for no real benefit.\r\n\r\nThere is actual one important benefit. It will make the formula `foo@1.0` and `foo@2.0` share the same prefix. Which in turns can solve many potential problems:\r\n\r\n* It handles conflicts among different version automatically  without the need of manually declaring `conflicts_with`(which it's not scalable)\r\n* It supports `brew switch`. And allow users to manage which version is active one(i.e. exposed to the PATH).\r\n* In long term, we can even replace `--devel`, `--HEAD` with aliases like `foo@devel` and `foo@HEAD`. So I can run `brew install foo@devel bar@HEAD baz` (which it's impossible for now).\r\n* For `brew bundle`, it means that we can finally support version check.  \r\n\r\nThe main point is to let homebrew understand `foo.rb` and `foo@1.0.rb` as well their installation kegs are indeed the same formula with different version. And handle conflict in the process using existing codes.\r\n\r\nHowever, this does require us to store `@1.0` suffix in the tab file.\r\n\r\nThis is just my thought to be shared.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 242815870,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-26T18:34:17Z",
		"body" : "@xu-cheng How would you depend on a given major/minor but not patch version? The patch version will be stored in the `Cellar` PATH but only the latest/`switch`d will be linked to by `opt`. The implementation complexity will be much higher even if both those problems are solved. I'd prefer to use the version that's already been working for us in homebrew-versions.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 242881849,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-27T00:13:53Z",
		"body" : "@xu-cheng: that's a compelling list of features but do we always need the class name to be \"foo\" to achieve that?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 248007669,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T14:23:41Z",
		"body" : "@penman has done great work pushing this forward üëè. The code for Homebrew/brew should all be there for now, it's just a matter of adding the aliases and trying this approach out. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 620
	},
	{
		"id" : 236879053,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-02T11:38:42Z",
		"body" : "Seems wholly reasonable to me üëç. Definitely think this is a good way to get proactive contributors to resolve `--strict` issues without being confused on seeing notability problems for preexisting formulae.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 621
	},
	{
		"id" : 237054524,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-02T21:42:17Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 621
	},
	{
		"id" : 236949084,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-02T15:52:41Z",
		"body" : "Is it worth downgrading the `raise` to a warning that the tap is problematic rather than squashing it entirely?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 622
	},
	{
		"id" : 237055686,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-02T21:47:01Z",
		"body" : "I like this approach better than #615. Doing a warning sounds up, too; it'll give the developer a heads up that normal users will encounter problems.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 622
	},
	{
		"id" : 237251793,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-03T14:25:09Z",
		"body" : "Just want to add we do tap migration for all users. Therefore, `brew update` could install boneyard tap to normal users.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 622
	},
	{
		"id" : 237644914,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T18:41:21Z",
		"body" : "> Just want to add we do tap migration for all users. Therefore, brew update could install boneyard tap to normal users.\r\n\r\nThat's fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 622
	},
	{
		"id" : 238190405,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-08T09:48:20Z",
		"body" : "This looks nice! :+1:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 622
	},
	{
		"id" : 237053596,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-02T21:39:06Z",
		"body" : "I kinda prefer the formatting in the old comment block: it's more concise, and options show up in only one place, in a table with options at the beginning of the line so it's easier to scan for them.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 623
	},
	{
		"id" : 237054316,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-02T21:41:30Z",
		"body" : "Oh, nevermind: I forgot that the formula help text is included in the man page, so uses this more verbose formatting.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 623
	},
	{
		"id" : 237517621,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T10:39:30Z",
		"body" : "Looks good to me. @ilovezfs: thoughts?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 623
	},
	{
		"id" : 237531626,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-04T11:54:03Z",
		"body" : "It looks accurate to me. I think we can have multiple synopsis lines without repeating, and formula arguments are usually last. Maybe something like\r\n\r\n```\r\nbrew bump-formula-pr --help\r\nbrew bump-formula-pr [--devel] [--dry-run] --url=URL --sha256=SHA-256 formula\r\nbrew bump-formula-pr [--devel] [--dry-run] --tag=TAG --revision=REVISION formula\r\n\r\nCreates a pull request to update the formula with a new url or a new tag.\r\n\r\n    If a URL is specified, the SHA-256 checksum of the new download must also be specified.\r\n\r\n    If a TAG is specified, the git commit REVISION corresponding to that tag must also be specified.\r\n\r\n    If --devel is passed, bump the development rather than stable version. The development spec must already exist.\r\n\r\n    If --dry-run is passed, print what would be done rather than doing it.\r\n\r\nNote that brew bump-formula-pr cannot be used to transition a formula from a\r\nurl-and-sha256 style specification into a tag-and-revision style specification, nor vice versa.\r\nIt must use whichever style specification the preexisting formula already uses. \r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 623
	},
	{
		"id" : 237597973,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-08-04T15:56:23Z",
		"body" : "@ilovezfs: that sounds fine to me. I'll make the change if others concur.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 623
	},
	{
		"id" : 237603948,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T16:16:39Z",
		"body" : "I concur.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 623
	},
	{
		"id" : 237636843,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-08-04T18:13:36Z",
		"body" : "Updated:\r\n\r\n<img width=\"705\" alt=\"screen shot 2016-08-04 at 2 12 20 pm\" src=\"https://cloud.githubusercontent.com/assets/3650755/17413002/9192e6e2-5a4d-11e6-9f32-ddaf245c191f.png\">\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 623
	},
	{
		"id" : 238006172,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T05:03:03Z",
		"body" : "I think the capitalized placeholders `URL`, `SHA-256`, `TAG`, and `REVISION` look a bit out of place. All existing help texts exclusively use lower-case placeholders. Could you also make sure to hard wrap all non-summary lines so that they stay within an 80-character boundary?\r\n\r\nOther than that this is a very welcome documentation improvement. :+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 623
	},
	{
		"id" : 238163510,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T07:42:44Z",
		"body" : "Thanks again @scpeters!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 623
	},
	{
		"id" : 237517233,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T10:37:44Z",
		"body" : "Thanks again @AnastasiaSulyagina! üòç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 624
	},
	{
		"id" : 237047184,
		"user" : {
			"login" : "dr-impossible"
		},
		"created_at" : "2016-08-02T21:18:07Z",
		"body" : "Currently, it's not possible for a formula to specify the `--devel` option on a dependency. This patch allows that. \r\n\r\nIf you define a package with a `devel` block and override the dependencies to also use the `--devel` option, the dependencies fail to build.\r\n\r\nCase in point: `gstreamer`. 1.9.1 is the current \"devel\" version of gstreamer, and all related devel packages in gstreamer require their dependencies to have the same version. For example:\r\n\r\nIf I add the following to `gst-plugins-base.rb`:\r\n```ruby\r\n  devel do\r\n    url \"https://gstreamer.freedesktop.org/src/gst-plugins-base/gst-plugins-base-1.9.1.tar.xz\"\r\n    sha256 \"8309d1660406274a94bd056f8d805fb35b902208fbb76ff8ca705b37d950fdc9\"\r\n\r\n    depends_on \"gstreamer\" => \"devel\"\r\n  end\r\n```\r\n\r\nand the following to `gstreamer.rb`:\r\n```ruby\r\n  devel do\r\n    url \"https://gstreamer.freedesktop.org/src/gstreamer/gstreamer-1.9.1.tar.xz\"\r\n    sha256 \"55304a9e1e8fb5ef82b5b246fef2d9a164eeb0466976a3ad19cfae05b8a94159\"\r\n  end\r\n```\r\n\r\nand then run the following command:\r\n```bash\r\nbrew install gst-plugins-base --devel\r\n```\r\n\r\nHomebrew appears to build gstreamer-1.9.1 as a dependency, and is able to run `make` and `make install`, however at some point it selects version 1.8.2 and responds with the error message `Error: empty installation`\r\nAdding the `--debug` option yields the message \"Error: You must `brew link gstreamer` before gst-plugins-base can be installed\"",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 237124602,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-03T03:23:07Z",
		"body" : "Broadly speaking, I think this isn't a good idea, at least until we get `devel` bottles sorted  & shipped. Bottles reduce our maintenance burden significantly, largely because they eliminate the most common breaking factor _(user configuration)_.\r\n\r\nA relatively simple change of syntax here somewhat understates how large a change this would be & the impact it would have on maintainers, users & contributors.\r\n\r\nThere are deeper questions about how to gently degrade if something demands a `:devel` dependency but the formula required doesn't include `devel`. There's also the question of whether it's good UX to allow stable formula to require `:devel` dependencies without user intervention, or whether that's something we'd want to block off or frown upon.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 237128554,
		"user" : {
			"login" : "dr-impossible"
		},
		"created_at" : "2016-08-03T03:47:45Z",
		"body" : "I must admit I wasn't aware of the plan to have devel bottles. I'd assumed that using `--devel` came with the similar caveats and pitfalls of using `--head`\r\n\r\nI think it's a bit weird to allow a `stable` formula to require a `:devel` dependency. That case would suggest that either the formula isn't really stable, or that the formula for the dependency is outdated.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 237130614,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-03T04:00:28Z",
		"body" : ">  I'd assumed that using --devel came with the similar caveats and pitfalls of using --head\r\n\r\nNot as much. We CI test `--devel`, so we know it builds, we know it can be fetched, we know the checksum was correct at time of merge, we know it passes `brew test`, etc. There's no testing on `--HEAD` at all, and likely never will be due to the transient nature of that.\r\n\r\n> I think it's a bit weird to allow a stable formula to require a :devel dependency. That case would suggest that either the formula isn't really stable, or that the formula for the dependency is outdated.\r\n\r\nIt has been requested a few times. The use case is largely where one formula is updated with new releases at a much more rapid cadence than the formula it `depends_on`. I'd lean towards agreeing with you that to me that implies their formula isn't really stable, but that's something that has been requested & we may want to draw a hard line in the sand one way or another if this goes forwards.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 237252434,
		"user" : {
			"login" : "dr-impossible"
		},
		"created_at" : "2016-08-03T14:27:16Z",
		"body" : "If you currently override a dependency by adding the `:devel` option within the `devel` block of a formula, `brew audit` will complain but the formula will still build. When you install the formula with `brew install --devel` it appears to download and build the devel version of the dependency, but after the build step, Homebrew checks the prefix path for the stable version of the dependency, which won't be there unless that version was installed as well.\r\n\r\nThis current behaviour seems a bit broken to me, so I think it would be better for Homebrew to either ignore the `:devel` option on `depends_on` or actually follow it through.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 237252581,
		"user" : {
			"login" : "dr-impossible"
		},
		"created_at" : "2016-08-03T14:27:52Z",
		"body" : "For reference, linking to a PR containing an example of the `:devel` option: https://github.com/Homebrew/homebrew-core/pull/3562",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 237298099,
		"user" : {
			"login" : "dr-impossible"
		},
		"created_at" : "2016-08-03T16:58:26Z",
		"body" : "> There are deeper questions about how to gently degrade if something demands a :devel dependency but the formula required doesn't include devel. \r\n\r\nBased on [this test](https://github.com/Homebrew/brew/blob/028d155e97014076adf4e4dbc7c888fd871de321/Library/Homebrew/test/test_formula_spec_selection.rb#L91), I think if a formula specifies a dependency on `devel` and it's not there, it silently falls back to `stable`:\r\n```ruby\r\n  def test_does_not_raise_for_missing_spec\r\n    f = formula(\"test\", Pathname.new(__FILE__).expand_path, :devel) {\r\n      url \"foo-1.0\"\r\n      head \"foo\"\r\n    }\r\n\r\n    assert_predicate f, :stable?\r\n  end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 237516818,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T10:35:38Z",
		"body" : "> Based on this test, I think if a formula specifies a dependency on devel and it's not there, it silently falls back to stable:\r\n\r\nYes, it feels like this should üí• instead.\r\n\r\n> I think it's a bit weird to allow a stable formula to require a :devel dependency. That case would suggest that either the formula isn't really stable, or that the formula for the dependency is outdated.\r\n\r\nAgreed.\r\n\r\n> This current behaviour seems a bit broken to me, so I think it would be better for Homebrew to either ignore the :devel option on depends_on or actually follow it through.\r\n\r\nSeems a good enough justification to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 237517106,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T10:37:07Z",
		"body" : "Tests failing on 10.9: http://bot.brew.sh/job/Brew%20Pull%20Requests/1169/version=mavericks/testReport/junit/brew-test-bot/mavericks/tests/",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 238012513,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-06T08:22:57Z",
		"body" : "How is this going to handle the case where the dependency's development version becomes the stable version (or the stable version becomes newer than the old devel version), the devel spec in the dependency is also upgraded to a new development version, and the dependent formula still needs the original version not the new development version? This idea seems like a can of worms.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 238012878,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-06T08:33:56Z",
		"body" : "I believe the answer to my question is that any kind of `=> :devel` thing should have to hard-code a specific version and that version should have to appear in the dependency's devel spec.\r\n\r\nAlso, I think stable specs should probably never be permitted to depend on `=> :devel` and that should cause both install and audit failures.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 238014288,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-06T09:15:02Z",
		"body" : "The situation this PR seeks to address is pretty rare, and I think vendoring or upstream submodules are usually a better answer for Homebrew. Creating inter-formulae dependencies on `devel` specs would mean `test-bot` would need to understand the scenario and test for breakage in the same way that it tests reverse dependencies for broken `brew test` tests and broken dylibs.\r\n\r\nIt also complicates the version/upgrade logic as well, beyond just the immediate formula's predicament when the devel spec of the dependency changes. For example, does this PR mean I can end up needing multiple versions of the same dependency installed simultaneously? If other software I have installed depends on the stable version, does a devel dependency mean that the software just refuses to install and forces me to choose between mutually exclusive formulae versions, or does it proceed to break silently the other package that needs the stable version of the dependency? What happens at brew upgrade time if a devel version of an installed formula goes from needing a stable version of a dependency to needing a devel version of the dependency, but other packages already installed still need the stable version?\r\n\r\nWhat happens if one of the other dependencies of the formula depending on a devel version depends on a stable version of the same software? Does it have to have its own devel spec added that depends on that devel version? What if its use of that software is only optional? Does brew reinstall of that dependency with that option get blocked since it will break the reverse dependency's need for the devel version? Or does the supposedly stable version I'm reinstalling with that option silently start depending on the devel version of the dependency even though stable specs are supposed to only use stable versions of their dependencies?\r\n\r\nAnd how will all of this play nicely with the idea in https://github.com/Homebrew/brew/issues/620?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 238023221,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-06T13:26:05Z",
		"body" : ">This current behaviour seems a bit broken to me, so I think it would be better for Homebrew to either ignore the :devel option on depends_on or actually follow it through.\r\n\r\nThis is actually because we basically don't do any option verification. This works without a hitch:\r\n```\r\ndiff --git a/Formula/godep.rb b/Formula/godep.rb\r\nindex b117cf7..637186a 100644\r\n--- a/Formula/godep.rb\r\n+++ b/Formula/godep.rb\r\n@@ -14,7 +14,7 @@ class Godep < Formula\r\n     sha256 \"cdbf4b630a90d8cc4d36076a963916fc979311b2acc413865512b78a41c3aed4\" => :mavericks\r\n   end\r\n \r\n-  depends_on \"go\"\r\n+  depends_on \"go\" => [:sparkles, \"pokemon\", :devel, \"newest\", \"with-lots-of-widgets\"]\r\n \r\n   def install\r\n     ENV[\"GOPATH\"] = buildpath\r\n```\r\nSo if that behavior concerns you, option verification seems a bit more relevant that fixating on the string `\"devel\"` or symbol `:devel` as being special or justifying any particular change to anything.\r\n\r\nRegarding this PR, see https://github.com/Homebrew/homebrew-core/issues/3665 for some issues that arise. For instance, if `godep`'s devel spec depended on `go`'s devel spec, none of the formulae that use `go` and/or `godep` would work on 10.12 since they'd `depend on \"go\"`, not `depend_on \"go\" => :devel` and `go`'s stable spec doesn't satisfy the maximum OS requirement.\r\n\r\nSo would we end up having to add `depends_on \"go\" => :devel` to all of the formulae that use `go` in a devel spec for each one?\r\n\r\nBut then how would you build a preexisting devel spec of one of those formulae with the stable version of `go` if you were on 10.11 and didn't want to use new devel `go` but *did* want to use the devel version of that particular formula as you had the day before this change was made?\r\n\r\n(No we don't support 10.12 yet, but that's irrelevant; this is just to illustrate what happens when you have a max OS requirement in stable but not in devel.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 238164225,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T07:46:30Z",
		"body" : "> I believe the answer to my question is that any kind of => :devel thing should have to hard-code a specific version and that version should have to appear in the dependency's devel spec.\r\n\r\nüëé on having specific versions; this wants \"version or greater\" which we don't really support or want.\r\n\r\nThere's lots of other questions here that need thought through though.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 238165190,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-08T07:51:10Z",
		"body" : "@MikeMcQuaid I think it's relevant here to address the issue raised in https://github.com/Homebrew/homebrew-core/issues/3665#issuecomment-238024925\r\n\r\nIs that indeed a bug? Is an up-to-date development version (and also presumably HEAD version) supposed to be able to stand-in for the stable version when fulfilling dependencies and requirements? That seems important to understand in order to be able to assess the meaning of the present PR and how it would impact the ecosystem.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 238185178,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T09:24:43Z",
		"body" : "@ilovezfs It's not a bug. It used to be `--devel` was applied to everything you were installing at the time but that approach has obvious problems when comparing a dependency that's installed now vs. previously installed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 238186232,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-08T09:29:40Z",
		"body" : "@MikeMcQuaid that's what I suspected. In that case, is it possible to do if MacOS.version == :sierra, stable = Go 1.7rc5 else stable =  1.6.3? I think that will fix Homebrew/homebrew-core#3665 without breaking the new approach.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 238186805,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T09:32:06Z",
		"body" : "@ilovezfs Yeh, could do that. Probably not a bad idea for now at least.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 238187073,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-08T09:33:22Z",
		"body" : "I'll simulate it on El Cap using a max OS Yosemite requirement and see if it works.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 244548401,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:06:13Z",
		"body" : "@dr-impossible Any thoughts on addressing these comments (and resolving the conflicts)?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 245176673,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-07T05:09:27Z",
		"body" : "@dr-impossible any update here?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 247082599,
		"user" : {
			"login" : "jeffheifetz"
		},
		"created_at" : "2016-09-14T17:01:59Z",
		"body" : "I'll comment for @dr-impossible.\r\n\r\n> It also complicates the version/upgrade logic as well, beyond just the immediate formula's predicament when the devel spec of the dependency changes. For example, does this PR mean I can end up needing multiple versions of the same dependency installed simultaneously? If other software I have installed depends on the stable version, does a devel dependency mean that the software just refuses to install and forces me to choose between mutually exclusive formulae versions, or does it proceed to break silently the other package that needs the stable version of the dependency? What happens at brew upgrade time if a devel version of an installed formula goes from needing a stable version of a dependency to needing a devel version of the dependency, but other packages already installed still need the stable version?\r\n\r\nI believe the project has already taken the approach to never have more than one version of anything linked be it stable, devel or HEAD. But this situation where you have one installed and need another can arise today already and you are forced to choose between mutually exclusive formulae. At least with better dependency listing we can offer better reasoning to the user on which formulae are forcing this situation.\r\n\r\nIn the example this was drawn from, the installer chooses the wrong version and simply fails.\r\n\r\n> What happens if one of the other dependencies of the formula depending on a devel version depends on a stable version of the same software? Does it have to have its own devel spec added that depends on that devel version? What if its use of that software is only optional? Does brew reinstall of that dependency with that option get blocked since it will break the reverse dependency's need for the devel version? Or does the supposedly stable version I'm reinstalling with that option silently start depending on the devel version of the dependency even though stable specs are supposed to only use stable versions of their dependencies?\r\n\r\nAgain I'd argue that once a user has installed a devel or HEAD formula they can run into issues installing optional formulae. I agree that specifically allowing a devel spec will exacerbate these issues, but it's not as though they don't exist today.\r\n\r\n\r\nOverall, I think there are a slew of issues that can arise considering the near infinite combinations of packages and dependency trees that can come up. But these issues already can come up today, its simply a question of whether we want to continue to relegate them to the sidelines or not. The problem is exacerbated once we explicitly allow devel dependencies, but hopefully with this better information we can guide users as to how to fix them better.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 247132392,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T19:49:45Z",
		"body" : "I agree we need to fix this but this PR as-is isn't mergeable, unfortunately and it's been a while since we saw any updates here. Feel free to reopen a new one with conflicts and comments addressed and we can continue discussion there.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 247621931,
		"user" : {
			"login" : "jeffheifetz"
		},
		"created_at" : "2016-09-16T14:55:07Z",
		"body" : "I can't seem to find the failing tests anymore, are they secretly cached anywhere?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 247622255,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-16T14:56:21Z",
		"body" : "No, brew PR builds are kept for 7 days.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 247802874,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T19:46:39Z",
		"body" : "You should be able to reproduce with `brew tests` locally.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 625
	},
	{
		"id" : 237517439,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T10:38:38Z",
		"body" : "> would be OK to refactor them into their own method?\r\n\r\nSounds like a good idea!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 626
	},
	{
		"id" : 237686474,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-08-04T21:18:09Z",
		"body" : "> > would be OK to refactor them into their own method?\r\n> \r\n> Sounds like a good idea!\r\n\r\nCool! I've taken a stab at this. üî™  I'll split it out into its own PR when everyone has given feedback and is happy with the change.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 626
	},
	{
		"id" : 238013813,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T09:01:56Z",
		"body" : "> Cool! I've taken a stab at this. üî™  I'll split it out into its own PR when everyone has given feedback and is happy with the change.\r\n\r\nThis looks mostly good, aside from one code comment. I think it's sufficient to split this refactoring off into a separate commit and then extend the `install` test in a second commit. There's no need to create an entirely new PR for this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 626
	},
	{
		"id" : 238163823,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T07:44:27Z",
		"body" : "> I think it's sufficient to split this refactoring off into a separate commit and then extend the install test in a second commit. There's no need to create an entirely new PR for this.\r\n\r\nAgreed üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 626
	},
	{
		"id" : 238330381,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-08-08T18:24:33Z",
		"body" : "> This looks mostly good, aside from one code comment. I think it's sufficient to split this refactoring off into a separate commit and then extend the `install` test in a second commit. There's no need to create an entirely new PR for this.\r\n\r\nCool, makes sense. üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 626
	},
	{
		"id" : 238372322,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-08T20:49:10Z",
		"body" : "This looks great! Merged in c8b0a55c097f13556a27223b15196a3e23e36483 and 8c0b72ac0da44be8cc4655996a336caa46f21694; thanks again @eirinikos! :tada:\r\n\r\n> Coverage increased (+0.2%) to 57.559%\r\n\r\nAnd finally we're getting some useful numbers on your progress and the [coverage graph](https://coveralls.io/github/Homebrew/brew) over at Coveralls is useful again.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 626
	},
	{
		"id" : 238472791,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T07:15:02Z",
		"body" : "Nice work @eirinikos üòª ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 626
	},
	{
		"id" : 237234103,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-03T13:17:07Z",
		"body" : "See discussion in https://github.com/Homebrew/homebrew-core/pull/3556.\r\nCC @MikeMcQuaid ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 627
	},
	{
		"id" : 239668022,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-14T11:11:08Z",
		"body" : "I don't think this is the right solution. Probably a better idea would be to restore the bottle after a reverse-dependency test forces a non-default build, or to not test those reverse-dependencies with test-bot since they're nearly the same as formulae without bottles since they're forcing full rebuilds.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 627
	},
	{
		"id" : 237258529,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-03T14:47:53Z",
		"body" : "What version of OS X are you on?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 628
	},
	{
		"id" : 237462995,
		"user" : {
			"login" : "kingkarki"
		},
		"created_at" : "2016-08-04T06:21:16Z",
		"body" : "I m on 10.11.4 @MikeMcQuaid El mac el capitan",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 628
	},
	{
		"id" : 237506000,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T09:46:51Z",
		"body" : "Can you still reproduce it? It could be GitHub was having an intermittent issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 628
	},
	{
		"id" : 237507649,
		"user" : {
			"login" : "kingkarki"
		},
		"created_at" : "2016-08-04T09:53:52Z",
		"body" : "Yes i m still having issue. Please check the screenshot. Can i download source and install manually?\r\n<img width=\"609\" alt=\"screen shot 2016-08-04 at 3 38 14 pm\" src=\"https://cloud.githubusercontent.com/assets/756162/17397809/7e150044-5a59-11e6-9166-31b811f9fa3c.png\">\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 628
	},
	{
		"id" : 237510816,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T10:07:14Z",
		"body" : "What happens if you view that URL in a browse on the same machine? Are you SSHd into that machine or using a local console?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 628
	},
	{
		"id" : 237515688,
		"user" : {
			"login" : "kingkarki"
		},
		"created_at" : "2016-08-04T10:29:53Z",
		"body" : "it opens on browser. It is my local computer not in VM. \r\n<img width=\"1280\" alt=\"screen shot 2016-08-04 at 4 12 26 pm\" src=\"https://cloud.githubusercontent.com/assets/756162/17398807/6504d994-5a5e-11e6-9387-8f893175155f.png\">\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 628
	},
	{
		"id" : 237516045,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T10:31:41Z",
		"body" : "What does `which curl` show? What does `curl https://github.com` show?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 628
	},
	{
		"id" : 237517571,
		"user" : {
			"login" : "kingkarki"
		},
		"created_at" : "2016-08-04T10:39:14Z",
		"body" : "which curl returns \r\n/Applications/XAMPP/xamppfiles/bin/curl\r\n\r\ncurl github.com shows same issue \r\n\r\n```\r\n$ curl https://github.com\r\ncurl: (60) SSL certificate problem: unable to get local issuer certificate\r\nMore details here: http://curl.haxx.se/docs/sslcerts.html\r\n\r\ncurl performs SSL certificate verification by default, using a \"bundle\"\r\n of Certificate Authority (CA) public keys (CA certs). If the default\r\n bundle file isn't adequate, you can specify an alternate file\r\n using the --cacert option.\r\nIf this HTTPS server uses a certificate signed by a CA represented in\r\n the bundle, the certificate verification probably failed due to a\r\n problem with the certificate (it might be expired, or the name might\r\n not match the domain name in the URL).\r\nIf you'd like to turn off curl's verification of the certificate, use\r\n the -k (or --insecure) option.\r\n \r\n```\r\nCan i use git clone instead of curl? \r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 628
	},
	{
		"id" : 237572368,
		"user" : {
			"login" : "javian"
		},
		"created_at" : "2016-08-04T14:35:53Z",
		"body" : "Can you try using /usr/bin/curl instead of the XAMPP curl ?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 628
	},
	{
		"id" : 237620930,
		"user" : {
			"login" : "kingkarki"
		},
		"created_at" : "2016-08-04T17:18:10Z",
		"body" : "how to do that @javian . Actually i m new to commands lines. Some examples would be awesome. ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 628
	},
	{
		"id" : 237624243,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T17:29:35Z",
		"body" : "`/usr/bin/curl https://github.com`",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 628
	},
	{
		"id" : 237625181,
		"user" : {
			"login" : "kingkarki"
		},
		"created_at" : "2016-08-04T17:32:56Z",
		"body" : "it works when i do /`usr/bin/curl https://github.com`\r\nbut this issue when i do \r\n`\r\n/usr/bin/ruby -e \"$(/usr/bin/curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`\r\noutput on screen shot \r\n<img width=\"584\" alt=\"screen shot 2016-08-04 at 11 17 23 pm\" src=\"https://cloud.githubusercontent.com/assets/756162/17411854/a74ed512-5a99-11e6-8ecb-fbc389e2cb5f.png\">\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 628
	},
	{
		"id" : 237642179,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T18:31:51Z",
		"body" : "@kingkarki Follow the instructions to `intent to reinstall`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 628
	},
	{
		"id" : 237781195,
		"user" : {
			"login" : "kingkarki"
		},
		"created_at" : "2016-08-05T07:55:06Z",
		"body" : "Finally it worked with this\r\n`/usr/bin/ruby -e \"$(/usr/bin/curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`\r\n\r\nFirst i had to uninstall  with this \r\n\r\n`/usr/bin/ruby -e \"$(/usr/bin/curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\"`\r\n\r\nThank you @MikeMcQuaid and @javian you guys are awesome. ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 628
	},
	{
		"id" : 237790498,
		"user" : {
			"login" : "javian"
		},
		"created_at" : "2016-08-05T08:42:41Z",
		"body" : "@kingkarki You probably should also have a look at your PATH setting since XAMPP seems to have a higher priority which might cause issues similar to this one in other places.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 628
	},
	{
		"id" : 237791427,
		"user" : {
			"login" : "kingkarki"
		},
		"created_at" : "2016-08-05T08:45:27Z",
		"body" : "Yes you are right. Where can i find path variables on mac?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 628
	},
	{
		"id" : 237797691,
		"user" : {
			"login" : "chocolatewheelchair"
		},
		"created_at" : "2016-08-05T09:00:43Z",
		"body" : "@MikeMcQuaid As requested on #630:\r\n\r\n\"What happens if you view that URL in a browse on the same machine?\"\r\nIt opens in the browser, as shown in the screenshot attached by kingkarki above.\r\n\r\n\"Are you SSHd into that machine or using a local console?\"\r\nThe issue happens when trying to build a VM via packer, which communicates with it via SSH, however all the checks following instructions in this thread were done by manually typing in the local command line of a VM (also built with packer, using the same script as the one which displays the issue mentioned in #630 only paused before getting to the point where it tries to install homebrew and causes the issue).\r\n\r\n\"What does which curl show?\"\r\n/usr/bin/curl\r\n\r\n\"What does curl https://github.com show?\"\r\nIt displays the html from the page in the terminal\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 628
	},
	{
		"id" : 238184175,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T09:20:18Z",
		"body" : "@chocolatewheelchair Not sure what your issue is; it sounds like it could be an issue with the VM or the version. Sorry!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 628
	},
	{
		"id" : 237264303,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-03T15:05:25Z",
		"body" : "See https://github.com/Homebrew/brew/issues/391. It's something we've discussed before & it remains under consideration. Something may well happen, but need to decide the best way to achieve that whilst keeping some of the most prominent documentation accessible.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 629
	},
	{
		"id" : 237300744,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-03T17:07:03Z",
		"body" : "We need/want to keep these in the repository root but may figure out a way that that doesn't need to be in the `/usr/local` root.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 629
	},
	{
		"id" : 237300518,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-03T17:06:16Z",
		"body" : "What country are you in? What OS X version is the VM?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 630
	},
	{
		"id" : 237323834,
		"user" : {
			"login" : "chocolatewheelchair"
		},
		"created_at" : "2016-08-03T18:20:51Z",
		"body" : "Located in Germany. The OSX version seems to be irrelevant, as I have had the issue with both OSX 10.10 and 10.11 (haven't tried with other versions though)?\r\n\r\nNot sure why you ask about the country, but FWIW we thought it could be a time sync issue and tried to force sync with ntp, as well as changing the timezone the VM's were on to the actual timezone (they were on US pacific by default) \r\n\r\nAlso I stumbled on this  SO question (http://stackoverflow.com/questions/30385939/git-clone-fails-with-sslread-error-on-os-x-yosemite/30441332) which describes an issue that looks very similar to the one I encounter, however the suggested fix is to install curl with openssl... via homebrew. \r\n\r\nLastly, this could be completely coincidental, but the packer builds were run as a daily job in jenkins (setup around the end of April 2016), and were mostly succeeding in May/June and then started failing much more often at the end of June / beginning of July. At which point the jenkins job was set to run every two hours so we could understand what was going on.\r\nThere doesn't seem to be a pattern with regard to the time the build is ran and whether or not it fails.\r\n\r\nMind, we had already encountered this same error before the builds started failing so often but shrugged it off as a random network error, so I don't think the issue comes from a change in the curl script (and also tried to run jenkins builds that \"manually\" try to install homebrew in a way that mimicks what the curl script does, to the best of my ability, but this one succeeded 100% of the time).\r\n\r\nProbably should have included all that info in my initial post... My bad...\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 630
	},
	{
		"id" : 237507226,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T09:52:08Z",
		"body" : "Can you still reproduce this? It could be an intermittent GitHub issue. Regardless it looks like an issue connecting to GitHub rather than Homebrew specifically which is something we can't do anything about, sorry üò¢ ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 630
	},
	{
		"id" : 237510920,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T10:07:42Z",
		"body" : "Folding into #628 as it looks related.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 630
	},
	{
		"id" : 237517766,
		"user" : {
			"login" : "chocolatewheelchair"
		},
		"created_at" : "2016-08-04T10:40:15Z",
		"body" : "I definitely can still reproduce it, although what I'm missing is precisely what causes the issue to happen as some builds succeed. \r\n\r\nAs I said, I definitely don't think the issue comes from Homebrew itself, but was hoping someone more familiar with how the Homebrew install script works under the hood could help shedding light on the issue. Will keep an eye on that other possibly related issue, thanks.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 630
	},
	{
		"id" : 237518016,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T10:41:43Z",
		"body" : "It's basically: you can't connect to GitHub üò≠ ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 630
	},
	{
		"id" : 237520713,
		"user" : {
			"login" : "chocolatewheelchair"
		},
		"created_at" : "2016-08-04T10:55:05Z",
		"body" : "But the homebrew install does succeed sometimes and running a Jenkins build that just git clones the homebrew repo again and again succeeds 100% of the time.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 630
	},
	{
		"id" : 237524426,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T11:14:02Z",
		"body" : "Cloning is done through Git, not Curl. Please answer the questions in #628, thanks.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 630
	},
	{
		"id" : 237505768,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T09:45:46Z",
		"body" : "Ask `npm`, we don't support it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 632
	},
	{
		"id" : 237744401,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-05T03:07:27Z",
		"body" : "I'm 99% sure this isn't `brew` related looking at those errors, so yeah, probably best to check in with `npm` or their documentation. If they say otherwise, let us know!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 632
	},
	{
		"id" : 237749406,
		"user" : {
			"login" : "eno812"
		},
		"created_at" : "2016-08-05T03:56:47Z",
		"body" : "Ok, thanks.\n\nOn Fri, Aug 5, 2016 at 1:07 PM, Dominyk Tiller <notifications@github.com>\nwrote:\n\n> I'm 99% sure this isn't brew related looking at those errors, so yeah,\n> probably best to check in with npm or their documentation. If they say\n> otherwise, let us know!\n>\n> ‚Äî\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/Homebrew/brew/issues/632#issuecomment-237744401>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AL5sdqJNIdFEo5uyrD3zhhVxH4dQJNZTks5qcqj0gaJpZM4JcKrZ>\n> .\n>\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 632
	},
	{
		"id" : 237420881,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-04T01:01:11Z",
		"body" : "> If reporting this issue please do so at (not Homebrew/brew):\r\n  https://github.com/Homebrew/homebrew-science/issues\r\n\r\nYou'll need to do this I'm afraid. We don't handle Science issues here.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 633
	},
	{
		"id" : 237421140,
		"user" : {
			"login" : "rafaeltiveron"
		},
		"created_at" : "2016-08-04T01:02:54Z",
		"body" : "Oh, sorry, thanks",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 633
	},
	{
		"id" : 237524505,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T11:14:28Z",
		"body" : "Thanks for recreating here.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 634
	},
	{
		"id" : 237524554,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T11:14:44Z",
		"body" : "Reposting my comment:\r\n\r\n---\r\n\r\nA good question. We don't keep track of dependencies explicitly yet (but will when we implement https://github.com/Homebrew/brew-evolution/blob/master/003-install-bottles-of-arbitrary-versions.md CC @sjackman) so for now this would be tricky. `brew missing`/`brew doctor` do the opposite to what you've said and will shout if you've removed something you shouldn't have.\r\n\r\nAs this is a feature request: would you mind refiling it on either Homebrew/brew or, ideally, write a proposal for Homebrew/brew-evolution?\r\n\r\nThanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 634
	},
	{
		"id" : 237615983,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-08-04T17:00:00Z",
		"body" : "I don't think those build-time dependencies should be removed automatically, as there's a reasonably good chance that they'll be needed again in the near future. I do however think that `brew cleanup` could remove unused `:build` dependencies that were not explicitly installed by the user (and are not a `:run` dependency of an installed package). For that, Brew would need to keep track of which packages the user asked to be installed at the command line, and which were installed as the dependency of another package. The latter is a feature of the Debian `apt-get autoremove` command, which removes the requested package as well as all its unused dependencies that were not explicitly requested by the user. That would actually be a nice feature for Brew as well.\r\n\r\nTwo features here, both which require tracking why a package was installed, explicit request by user vs as a dependency of another package.\r\n\r\n1. `brew autoremove` removes the requested package and any of its unneeded dependencies not explicitly requested by the user.\r\n2. `brew cleanup` removes any unneeded dependencies not explicitly requested by the user.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 634
	},
	{
		"id" : 237624473,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T17:30:19Z",
		"body" : "> I do however think that brew cleanup could remove unused :build dependencies that were not explicitly installed by the user (and are not a :run dependency of an installed package).\r\n\r\nThat's what I'm thinking.\r\n\r\n> brew autoremove removes the requested package and any of its unneeded dependencies not explicitly requested by the user.\r\n\r\nI don't think we need this as a separate command if `cleanup` handles it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 634
	},
	{
		"id" : 237628170,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-08-04T17:43:41Z",
		"body" : "How about making this the default behaviour of `brew remove`? It's what I usually want to do, remove a package and its dependencies that I didn't ask for explicitly. `brew remove --only foo` could remove only the requested packages.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 634
	},
	{
		"id" : 237642391,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-04T18:32:31Z",
		"body" : "We probably can't change that interface at this time without causing alarm. `brew cleanup` will be fine for a first step; we can consider iterating on that in future.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 634
	},
	{
		"id" : 237651767,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-08-04T19:04:59Z",
		"body" : "Sounds good.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 634
	},
	{
		"id" : 238009624,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T06:56:53Z",
		"body" : "`brew cleanup` already covers a very wide range of cleanup activities. I'm not entirely sure it's wise to expand its scope even further. It's already hard to impossible to clean up the cache without also cleaning up formulae and logs or any other combination of these activities.\r\n\r\nFor the sake of compatibility, I think we could make the auto-remove behavior in `brew uninstall` an opt-in. E.g. `brew uninstall --unused [--dry-run]` could remove all no longer needed previously automatically installed formulae and `brew uninstall --unused foo` could be a shortcut for:\r\n\r\n```\r\nbrew uninstall foo\r\nbrew uninstall --unused\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 634
	},
	{
		"id" : 238012365,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-06T08:17:42Z",
		"body" : "Let's punt on further discussion here before we have a PR that's implementing it üòâ ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 634
	},
	{
		"id" : 238016652,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-06T10:19:07Z",
		"body" : "Should this be closed then? I don't see much *actual* user benefit here other than possibly basically irrelevant disk space savings. The costs of inevitable reinstalls of the same build-time only deps over and over outweighs that ten-fold unless we're adding some overwrought DSL for marking *some* build-time deps sufficiently \"common\" to merit \"protection\" from aggressive, needless cleaning behaviors, while others are relegated to a lesser, dispensable category. Given how broken `build.with?` can be, I'm also pretty sure any implementation of this is just going to break user installations unless we have the fabled declarative option system.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 634
	},
	{
		"id" : 238184446,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T09:21:33Z",
		"body" : "@ilovezfs All good points but let's leave this open for now. If nothing has changed in 6-12 months on this: feel free to close in anger.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 634
	},
	{
		"id" : 238184635,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-08T09:22:22Z",
		"body" : "LOL, I'm not angry :)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 634
	},
	{
		"id" : 238185385,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T09:25:46Z",
		"body" : "@ilovezfs not now but you may be in 6-12 months üòÜ ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 634
	},
	{
		"id" : 238185585,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-08T09:26:42Z",
		"body" : "Hmm I'll need to consult my :crystal_ball:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 634
	},
	{
		"id" : 238814493,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:31:33Z",
		"body" : "We'll accept PRs for this but we're not actively working on it at this time.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 634
	},
	{
		"id" : 238831150,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-10T10:44:54Z",
		"body" : "My :crystal_ball: now shows that I will definitely not be angry about this particular issue in 6-12 months.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 634
	},
	{
		"id" : 237769621,
		"user" : {
			"login" : "MindTooth"
		},
		"created_at" : "2016-08-05T06:46:19Z",
		"body" : "https://github.com/qutheory/homebrew-tap/\r\n\r\n404.  So I guess it's down.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 635
	},
	{
		"id" : 237853975,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-05T13:44:53Z",
		"body" : "PR refreshed.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 636
	},
	{
		"id" : 237855926,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-05T13:52:28Z",
		"body" : "This looks correct to me.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 636
	},
	{
		"id" : 244548413,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:06:25Z",
		"body" : "@ilovezfs Gentle ping on this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 636
	},
	{
		"id" : 249841063,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T11:41:30Z",
		"body" : "@ilovezfs What's the state of this; wasn't clear to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 636
	},
	{
		"id" : 250143145,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-28T11:39:47Z",
		"body" : "@MikeMcQuaid I'll give it some attention so that it at least has a real exception in there :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 636
	},
	{
		"id" : 250159726,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T13:01:45Z",
		"body" : "@ilovezfs Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 636
	},
	{
		"id" : 250975595,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-02T15:00:47Z",
		"body" : "@MikeMcQuaid PR refreshed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 636
	},
	{
		"id" : 250979520,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-02T16:18:31Z",
		"body" : "Seems fine to me but I'd like @tdsmith to take a look when possible.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 636
	},
	{
		"id" : 250979520,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-02T16:18:31Z",
		"body" : "Seems fine to me but I'd like @tdsmith to take a look when possible.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 636
	},
	{
		"id" : 251008975,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-03T01:07:26Z",
		"body" : "Cool. I squash it down to one commit then.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 636
	},
	{
		"id" : 251011460,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-03T01:43:23Z",
		"body" : "Squashed, and commit message updated.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 636
	},
	{
		"id" : 251011460,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-03T01:43:23Z",
		"body" : "Squashed, and commit message updated.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 636
	},
	{
		"id" : 251040696,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T07:10:17Z",
		"body" : "Thanks @ilovezfs!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 636
	},
	{
		"id" : 237804000,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-05T09:21:35Z",
		"body" : "The Travis image is not up to date and the php tap is trying to `brew tap homebrew/dupes`   and `brew tap homebrew/versions` before running `brew update`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 637
	},
	{
		"id" : 237805416,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-05T09:28:21Z",
		"body" : "@javian it should be fixed now.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 637
	},
	{
		"id" : 237848407,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-05T13:21:04Z",
		"body" : ":+1: except for a minor nit, but that's unsurprising given I once raised the issue that `any?` might not be a good choice (despite its convenience and brevity) and that `empty?` is to be preferred.\r\n\r\n> [‚Ä¶], `any?`(O(n)) has much worse performance than `empty?`(O(1)).\r\n\r\nIn practice that's of course only an issue in pathological cases with long arrays containing mostly `nil`s. Otherwise `any?` will short-circuit the check as soon as it encounters a non-`nil` value.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 638
	},
	{
		"id" : 237848755,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-05T13:22:42Z",
		"body" : "> Otherwise any? will short-circuit the check as soon as it encounters a non-nil value.\r\n\r\nüòâ just want to add that even with short-circuit the complexity is still the same as O(n).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 638
	},
	{
		"id" : 237863988,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-05T14:23:43Z",
		"body" : "We'll accept a PR to fix this but given this applies to lots of Unix commands: don't do that üòâ ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 639
	},
	{
		"id" : 237865578,
		"user" : {
			"login" : "revolter"
		},
		"created_at" : "2016-08-05T14:29:28Z",
		"body" : "The thing is that it was already installed, so it's odd to get an error for accessing a non-existent folder for just a `Warning: sqlcipher-3.4.0 already installed` message.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 639
	},
	{
		"id" : 238012337,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-06T08:16:51Z",
		"body" : "Analytics aside, devel bottles sound generally like a :-1: idea since they lower the barriers to entry for potentially unstable/insecure software.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 640
	},
	{
		"id" : 238025651,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-06T14:24:11Z",
		"body" : "Devel bottles have been planned & promised for a _long_ time now. Unlike `--HEAD` we have actually supported `--devel`, we accept patches for it, we test it builds with every CI run, we execute `brew test` on it, we have an upgrade process for it. The only switch left to flip is the bottle one.\r\n\r\nFrankly, package management as a whole lowers the barriers to potentially unsafe/insecure software. `brew install vim`, did anyone bother reading the `vim` source code in the most recent release to check nothing nasty had slipped in there? Doubt it.\r\n\r\nI don't consider `devel` any more heinous than anything else we do around here. Nonetheless, let's try to keep this discussion relevant to the actual analytics issue, since that's why it was opened.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 640
	},
	{
		"id" : 238025823,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-06T14:27:47Z",
		"body" : ":see_no_evil: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 640
	},
	{
		"id" : 238757626,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-10T03:37:57Z",
		"body" : "Fixed via https://github.com/Homebrew/brew/commit/19920e18a129a21890d9d8bd6443cd1afd32208b.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 640
	},
	{
		"id" : 237876201,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-05T15:09:19Z",
		"body" : "@DomT4 went looking for where you reported this before but couldn't find it?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 641
	},
	{
		"id" : 237876759,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-05T15:11:30Z",
		"body" : "I mentioned it privately on the Slack in case Anastasia was already aware. Copy/paste from there is:\r\n```\r\n~> brew update\r\nError: undefined method `cask' for Formulary::FormulaNamespacedae00260771e84c45bf3b54d3c3e425b:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace226a4fa98a15974bc149b9b90173f96d:Module\r\nUpdated 2 taps (caskroom/cask, homebrew/command-not-found).\r\n==> New Formulae\r\ncaskroom/cask/dynamite\r\n==> Updated Formulae\r\ncaskroom/cask/telegram                                       caskroom/cask/zoc\r\n==> Deleted Formulae\r\ncaskroom/cask/cups-pdf                  caskroom/cask/docker-compose            caskroom/cask/go ‚úî\r\n```\r\n\r\n> I‚Äôd guess I‚Äôm only seeing the namespace warnings because `HOMEBREW_DEVELOPER` is set, so that should be invisible to standard users. I didn‚Äôt have the Cask `go` installed, but I did have the formula `go` installed, so I‚Äôm being told something I didn‚Äôt have installed was deleted and I did have it installed because of the migration there, essentially.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 641
	},
	{
		"id" : 237878241,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-05T15:16:55Z",
		"body" : "You're a developer, you get extra warnings üòâ. See https://github.com/Homebrew/brew/pull/641.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 642
	},
	{
		"id" : 237878436,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-05T15:17:34Z",
		"body" : "annoying as can be.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 642
	},
	{
		"id" : 237884917,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-05T15:40:48Z",
		"body" : "Fixed in https://github.com/Homebrew/brew/pull/641.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 642
	},
	{
		"id" : 237885169,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-05T15:41:39Z",
		"body" : "@MikeMcQuaid thank you.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 642
	},
	{
		"id" : 238005019,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-06T04:23:35Z",
		"body" : "I'm not sure this is actually fixed.\r\n\r\n```\r\n(screen) Josephs-MacBook-Pro:~ joe$ brew update --preinstall && brew livecheck                                                                                                                   [5037/5037]Checking for Homebrew updates...\r\nError: undefined method `cask' for Formulary::FormulaNamespace024f5e1d32977d8f6c1613e64a2f9446:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacedc210138a70f1f4059add2b972db7c4f:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace8db4a68ac9aa247006c5e7ea136236ec:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespaceac894319506650802676214fa110aef5:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace7d4fbe6337b7ad3081924004376981cf:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace70d6ecb3d9806e9adf9f45078a377b45:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacef6aecdab115fd5b09cc4d0ac4668e975:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace645b04bce572463b5b57334c8ebd8c42:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace16f1db80906ed90f3706ac11951f5687:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace22e903dc2e01de930e7fcc4b5b21a9d8:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace825ad6ed17fb14d289e3bc1257657c15:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace41d8eb0911106d120009fcb176db4f77:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespaced9cdc751be0444b5755246d7a895574a:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace4ac6b1b39520721bbc6666edafdfb044:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacee7a31e7683585945211a24ad838b3947:Module\r\n==> Auto-updated Homebrew!\r\nUpdated 5 taps (caskroom/cask, homebrew/core, homebrew/games, homebrew/php, homebrew/science).\r\n==> New Formulae\r\nhomebrew/games/hexgui\r\n==> Updated Formulae\r\ncaskroom/cask/angry-ip-scanner           caskroom/cask/postico                  \r\ncaskroom/cask/atom                       caskroom/cask/subler                   \r\ncaskroom/cask/bilibili                   caskroom/cask/switchresx               \r\ncaskroom/cask/brave                      caskroom/cask/texturepacker            \r\ncaskroom/cask/caret                      caskroom/cask/webstorm                 \r\ncaskroom/cask/electron                   git-town                               \r\ncaskroom/cask/framer                     homebrew/games/mame                    \r\ncaskroom/cask/mysimbl                    homebrew/games/openmsx                 \r\ncaskroom/cask/otomatic                   homebrew/php/php53-http                \r\ncaskroom/cask/porting-kit                homebrew/science/igv                   \r\n==> Deleted Formulae\r\ncaskroom/cask/hub ‚úî        caskroom/cask/python       caskroom/cask/rust       \r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 642
	},
	{
		"id" : 238005056,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-06T04:24:43Z",
		"body" : "@MikeMcQuaid did the fix maybe not make it into `--preinstall`?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 642
	},
	{
		"id" : 238010638,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-06T07:27:25Z",
		"body" : "And again,\r\n```\r\nLast login: Sat Aug  6 00:25:57 on ttys003\r\nJosephs-MacBook-Pro:~ joe$ brew update --preinstall && brew livecheck\r\nChecking for Homebrew updates...\r\nError: undefined method `cask' for Formulary::FormulaNamespacee5a930d066fc1bdc33545eaad1134453:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacebc06759b051e6659712e9e2e45ca0d9d:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespaceae10731906674e5956c970bd18e5ac99:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace30f8924586ceec8a6d1f7e05fb8383a0:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace6fd090f62299035c40a1c4bb2f0af6fa:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacecb29a084b24a7fa811a552f8ba51fbe7:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace6ab8e5dea2fb316ebb78568e8b340627:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace26b01892afe83f4e6c539340969a8368:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacef57ab3e08d497586c431a65c2d96c059:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace5ff22163080ee458e988fde051b53ee4:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace761309fd73410ae3c6ae4fe50d15efef:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace606cfbd9651081ab6a261f05d02355dd:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespaceedf69ab28e30e494d6aaf4f2e0af4045:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace31c4b965fcaf6024e510e58f50cb0ab0:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace60b945669aa4c8629d797e5509887ff0:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacef6aecdab115fd5b09cc4d0ac4668e975:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace5afd83b81d50f75f7ad9113a433cd61b:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespaceb2b337e6f71b760cea60e50b060726f6:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespaced883b8f5f05561dbaab487f21dba91c1:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacee6a31b6b6214ec0e121d102515e47a79:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace769132adefd66e3393a678d4d4108b19:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacee08552a5cb6b8cb80f72cd68e9e42062:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace7010b44c99964faddd78367c00c116c8:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacee099bee70fb5d8def75337bb5432c17f:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace54f78b3f2d8ce02660eec6c14cae2092:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespaceab8ec7ee4c257057cffc269cde58e771:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacea47ea77820cf0b207f65ea755f755cf8:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace406b0eb2ebfb7375ad37dc5921945e4b:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace15dbcda4303244b15c28b4979ffa2523:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacea9bdc1f3c68fee546cf63c6b59cca06f:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace4e5468646b51e77e05f97482a96bd8b8:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacee47d532a6cc36063f40e0477bdbfff91:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace0673f4310303afae2327a6c91c494293:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace79e7a4ccdf57f79ad220d9cbafaf01f2:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace47dac136b6088d5a3e311b22dafa9a77:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace548e497935bbee645b090161fc808c7e:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace32b07bbb9145e7297b46dfe5f9cbf795:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacef29321ab64501be21f205ee0788404b0:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace84d27b440023a3c387129856ec561e7d:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace9b302517bb6dc44478067395c878a038:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespaceb4c7ab8fbb3b1e61931913f18d3acdd9:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace6bbbe0352bbfec720de5bb77a28c5a58:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespaced0232678da1d9e736f9e9d84cc08937a:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace357fa7a66a0402718f8e95b552a9c8c5:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacef5b0d2f793113c6b53e928dda2141e7e:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace4b3f087e4af186264345835373199427:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacefbaf27f9b51fad9e0762d44cd935d408:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacee7a76024d3ecdc29026aff3ebd659570:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacecaad04636fefdc2b0ecba8ee4c086548:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace03f2e447f0a2e2e59c6de8b14f846579:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespaceffb92002cb4c4459229111772a340af3:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace14829bf66fb4fa4b64264fabee562f3b:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacee9c12fd984254c6fb91c3ae7d2304894:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace5535c02d9c23f3a83032f32937194736:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacea123407015416b4efa790afca29b4f35:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespaceb7ec7d132885a5b28e15643d902eed8d:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace821000c680d7cfbeef888a5b96949820:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacef7a8a6cf2089f37ea7d87f4eb69f79ed:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace1b399c2afa2296d77bcbe02d71f1a4a6:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacea921ad9ee8076d2c47b4c3391b23b3ea:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacef95c02b9f00d3eafd5843e4d792f4be7:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace2752dfad5e5fea58e1a27c4e4168f810:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace3f5f4948ed16d3681c220a173ea931b7:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacec8fea0cb2a91b1ae76676cb647986426:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacef4bd260f6e7717899d5caf518d5c4777:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace8dccde47179da297639d54a16e239319:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace2164606ad47bc3586cb7aef080df53ac:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespacea19e605d1f33eeadcf3d539891a2b310:Module\r\nError: undefined method `cask' for Formulary::FormulaNamespace36cd5afae78a3903c90ea22738908038:Module\r\n==> Auto-updated Homebrew!\r\nUpdated 1 tap (caskroom/cask).\r\n==> Updated Formulae\r\ncaskroom/cask/aliworkbench\r\ncaskroom/cask/apogee-duet\r\ncaskroom/cask/battle-net\r\ncaskroom/cask/bbc-iplayer-downloads\r\ncaskroom/cask/bee\r\ncaskroom/cask/beyerdynamicvs\r\ncaskroom/cask/bzflag\r\ncaskroom/cask/cocktail\r\ncaskroom/cask/crashplan\r\ncaskroom/cask/dingtalk\r\ncaskroom/cask/disk-drill\r\ncaskroom/cask/doitim\r\ncaskroom/cask/duet\r\ncaskroom/cask/espresso\r\ncaskroom/cask/fmod-studio\r\ncaskroom/cask/framer\r\ncaskroom/cask/gotiengviet\r\ncaskroom/cask/hapu\r\ncaskroom/cask/identify\r\ncaskroom/cask/idisplay\r\ncaskroom/cask/itsycal\r\ncaskroom/cask/license-control-center\r\ncaskroom/cask/loadmytracks\r\ncaskroom/cask/manico\r\ncaskroom/cask/mauve\r\ncaskroom/cask/mi\r\ncaskroom/cask/microsoft-lync-plugin\r\ncaskroom/cask/midi-monitor\r\ncaskroom/cask/mono-mdk\r\ncaskroom/cask/mps\r\ncaskroom/cask/node-profiler\r\ncaskroom/cask/nook\r\ncaskroom/cask/nwjs\r\ncaskroom/cask/ocrkit\r\ncaskroom/cask/papers\r\ncaskroom/cask/parallels-desktop\r\ncaskroom/cask/parallels-virtualization-sdk\r\ncaskroom/cask/password-gorilla\r\ncaskroom/cask/patchblocks\r\ncaskroom/cask/phocus\r\ncaskroom/cask/plug\r\ncaskroom/cask/plycounter\r\ncaskroom/cask/prizmo\r\ncaskroom/cask/reflector\r\ncaskroom/cask/rightfont\r\ncaskroom/cask/sleepyhead\r\ncaskroom/cask/sleipnir\r\ncaskroom/cask/slicy\r\ncaskroom/cask/slingshot\r\ncaskroom/cask/soundtoys\r\ncaskroom/cask/steam\r\ncaskroom/cask/synergy\r\ncaskroom/cask/sysex-librarian\r\ncaskroom/cask/textsoap\r\ncaskroom/cask/thington\r\ncaskroom/cask/tower\r\ncaskroom/cask/tuneinstructor\r\ncaskroom/cask/uber-network-fuser\r\ncaskroom/cask/vectoraster\r\ncaskroom/cask/vox-preferences-pane\r\ncaskroom/cask/vuescan\r\ncaskroom/cask/waves-central\r\ncaskroom/cask/whatroute\r\ncaskroom/cask/witch\r\ncaskroom/cask/x-lite\r\ncaskroom/cask/xamarin-android-player\r\ncaskroom/cask/xiami\r\ncaskroom/cask/xscope\r\ncaskroom/cask/zulu\r\n==> Deleted Formulae\r\ncaskroom/cask/exiftool\r\n\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 642
	},
	{
		"id" : 238011254,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T07:44:36Z",
		"body" : "> I'm not sure this is actually fixed.\r\n\r\nWhat's the output of `brew config` for this Homebrew installation? Is the main repository still stuck in the past because you haven't used a regular `brew update` in a while? `brew update --preinstall` won't bother to update it, if I'm not misreading the code ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 642
	},
	{
		"id" : 238011370,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-06T07:48:32Z",
		"body" : "Yup, you were right.\r\n\r\nBefore\r\n```\r\nJosephs-MacBook-Pro:~ joe$ brew config\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew\r\nHEAD: 38209aadbfe4fd0c6772467c4bc5c63325d53f6c\r\nLast commit: 2 days ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: cbd91b3bfb4366a6d97cf0d8ef917435571fd9d5\r\nCore tap last commit: 5 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: octa-core 64-bit ivybridge\r\nHomebrew Ruby: 2.3.1 => /usr/local/Cellar/ruby/2.3.1/bin/ruby\r\nClang: 5.1 build 503\r\nGit: 2.9.2 => /usr/local/bin/git\r\nPerl: /usr/bin/perl\r\nPython: /usr/bin/python\r\nRuby: /usr/local/bin/ruby => /usr/local/Cellar/ruby/2.3.1/bin/ruby\r\nJava: 1.6.0_65-b14-462\r\nOS X: 10.8.5-x86_64\r\nXcode: 5.1.1\r\nCLT: 5.1.0.0.1.1396320587\r\nX11: 2.7.8 => /opt/X11\r\n```\r\n\r\nAfter\r\n```\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew\r\nHEAD: 8ec59253df47b9e597bc6a5ad488c42e035c0351\r\nLast commit: 3 hours ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: cbd91b3bfb4366a6d97cf0d8ef917435571fd9d5\r\nCore tap last commit: 5 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: octa-core 64-bit ivybridge\r\nHomebrew Ruby: 2.3.1 => /usr/local/Cellar/ruby/2.3.1/bin/ruby\r\nClang: 5.1 build 503\r\nGit: 2.9.2 => /usr/local/bin/git\r\nPerl: /usr/bin/perl\r\nPython: /usr/bin/python\r\nRuby: /usr/local/bin/ruby => /usr/local/Cellar/ruby/2.3.1/bin/ruby\r\nJava: 1.6.0_65-b14-462\r\nOS X: 10.8.5-x86_64\r\nXcode: 5.1.1\r\nCLT: 5.1.0.0.1.1396320587\r\nX11: 2.7.8 => /opt/X11\r\n```\r\n\r\nThat sounds like an autoupdate bug since if I understand its purpose it's intended to prevent issue reports like the present one.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 642
	},
	{
		"id" : 238011762,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T07:59:33Z",
		"body" : "> That sounds like an autoupdate bug since if I understand its purpose it's intended to prevent issue reports like the present one.\r\n\r\nAgreed. [This code in `cmd/update.sh`](https://github.com/Homebrew/brew/blob/8ec59253df47b9e597bc6a5ad488c42e035c0351/Library/Homebrew/cmd/update.sh#L387-L392) skips taps without formulae, e.g. `homebrew/bundle`, but also ends up skipping the main repository. The only reason why it updates `caskroom/cask` is because that one contains a legacy formula in `Formula/`. But all other Cask taps are ignored.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 642
	},
	{
		"id" : 237892698,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-05T16:09:44Z",
		"body" : "We'll accept a pull request for this but it's not something we're planning currently.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 643
	},
	{
		"id" : 237973025,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-05T21:41:53Z",
		"body" : "Thanks for the quick fix! However, I think we've just discovered a more fundamental issue, namely that some code in Homebrew allows the spec to be overridden by a command-line argument like `--HEAD` even if the formula is initialized from an installed keg and the corresponding tab file clearly indicates a different spec for the installed formula. I think we have basically two options to resolve this, both of which diverge from the current behavior:\r\n\r\n- Use the spec from the tab file (if it exists) and ignore the spec given via command-line arguments.\r\n- Raise an error if the spec in the tab file (if it exists) and the spec given via command-line arguments don't match.\r\n\r\nHowever, I'm not entirely sure of the full ramifications of this change in behavior, thus any feedback on this (and whether this suggestion even makes sense) is greatly appreciated.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 644
	},
	{
		"id" : 237977316,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-08-05T22:07:01Z",
		"body" : "@UniqMartin while I was fixing it I was thinking about something similar (not about the solutions, but about the issue itself). But then I thought what `Formulary` was used for. `Formulary` has different methods to generate `Formula` instance, so I thought that `from_keg` is needed to get the formula instance of that keg and `spec` just sets the spec we want that formula to have. After I realised that it didn't seem that strange to me, because it was better than get formula instance and then set the spec manually. That said, maybe I'm missing something.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 644
	},
	{
		"id" : 238010764,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-06T07:31:13Z",
		"body" : "@UniqMartin actually I think it's prefectly fine to allow overwrite spec in command line. For example, one would anticipate `brew reinstall foo --devel` will just reinstall formulae at new spec with all options preserved. ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 644
	},
	{
		"id" : 238012286,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T08:15:32Z",
		"body" : "I see. I didn't consider this use case (or other possibly similar use cases). The constellation that revealed the bug addressed in this PR was:\r\n\r\n```\r\nbrew install foo\r\nbrew test foo --devel\r\nbrew test foo --HEAD\r\n```\r\n\r\nHere, only the stable spec is installed, so it feels weird that the spec can be overridden for `brew test` and, e.g., `brew test --devel` ends up succeeding despite the spec mismatch. Thoughts?\r\n\r\nI guess no matter what the ‚Äúcorrect‚Äù handling of the above scenario is, this PR is probably a sufficient fix for the observed bug and dealing with spec mismatch is a bit out of scope.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 644
	},
	{
		"id" : 238012685,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T08:28:19Z",
		"body" : "Thanks again @vladshablinsky for the quick fix! :bow:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 644
	},
	{
		"id" : 238002095,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-06T02:53:31Z",
		"body" : "Mind filing this over at https://github.com/Homebrew/homebrew-core? That's where core formulae reside. Thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 645
	},
	{
		"id" : 238399327,
		"user" : {
			"login" : "jacobcvt12"
		},
		"created_at" : "2016-08-08T22:37:42Z",
		"body" : "Yep will do! Thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 645
	},
	{
		"id" : 237955736,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-05T20:30:45Z",
		"body" : "I'd prefer Passenger renamed their manager tool, since `<application>-config` is conventionally used for build-time scripts like we're scanning for.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 646
	},
	{
		"id" : 237957339,
		"user" : {
			"login" : "cmckni3"
		},
		"created_at" : "2016-08-05T20:35:50Z",
		"body" : "That was my other thought as well. I don't think they will change the name of it though.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 646
	},
	{
		"id" : 237958601,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-05T20:39:22Z",
		"body" : "Can't hurt to ask! Would you mind opening an issue with them?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 646
	},
	{
		"id" : 237960574,
		"user" : {
			"login" : "cmckni3"
		},
		"created_at" : "2016-08-05T20:44:40Z",
		"body" : "@dunn Done and referenced this issue",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 646
	},
	{
		"id" : 237961552,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-05T20:46:58Z",
		"body" : "<3",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 646
	},
	{
		"id" : 237997050,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T01:02:32Z",
		"body" : "We were also, most certainly unintentionally, reporting coverage results for both macOS and Linux builds on Travis CI, causing those results to be merged/averaged. This yielded a test coverage that was even worse than the macOS-only result. I fixed this directly in 65203bbd1ea4513b4db3b7ed151626e1338ae70a.\r\n\r\nAfter this fix and the changes in this PR, we're finally back in business:\r\n\r\n> ‚úÖ **coverage/coveralls** ‚Äî Coverage increased (+8.6%) to 56.454%",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 647
	},
	{
		"id" : 238012447,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-06T08:20:49Z",
		"body" : "Nice work on this and https://github.com/Homebrew/brew/commit/65203bbd1ea4513b4db3b7ed151626e1338ae70a.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 647
	},
	{
		"id" : 238005522,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T04:40:02Z",
		"body" : ":+1: aside from some terminology nitpicking.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 648
	},
	{
		"id" : 238026801,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-06T14:46:31Z",
		"body" : "Shouldn't this also force the blank line following?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 648
	},
	{
		"id" : 238048912,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T21:11:40Z",
		"body" : "> ```\r\n> audit: enforce include method placement\r\n> audit: tweak include wording\r\n> ```\r\n\r\nSorry if I'm being obnoxious here, but you are going to squash these two commits to a single commit ‚Äúaudit: enforce include directive placement‚Äù before pulling, aren't you?\r\n\r\n> Shouldn't this also force the blank line following?\r\n\r\nI'm pretty sure we don't have any infrastructure in place to enforce inclusion/omission of blank lines, but I'm sure @DomT4 is happy to make that part of this PR. :trollface: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 648
	},
	{
		"id" : 238049342,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-06T21:21:21Z",
		"body" : "> Sorry if I'm being obnoxious here, but you are going to squash these two commits to a single commit ‚Äúaudit: enforce include directive placement‚Äù before pulling, aren't you?\r\n\r\nThought I already did, to be honest. Apparently not.\r\n\r\n> I'm pretty sure we don't have any infrastructure in place to enforce inclusion/omission of blank lines\r\n\r\nI can think of no obviously sane way to communicate placement of empty lines to people. We'd be using it already if I could think of a clever way to both implement & communicate it üòÖ.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 648
	},
	{
		"id" : 238049971,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-06T21:34:26Z",
		"body" : "> I can think of no obviously sane way to communicate placement of empty lines to people.\r\n\r\nHow about ‚Äúplease add an empty line between include directive (line 2) and desc (line 3)‚Äù and ‚Äúplease remove the empty line(s) between desc (line 3) and homepage (line 5)‚Äù? Seems entirely doable to me on the communication level. As for the implementation side ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 648
	},
	{
		"id" : 238059050,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-07T02:12:24Z",
		"body" : "I think some apparatus of blank-line virtue would be nice to have but it needn't block this PR despite how much I know @DomT4 is champing at the bit to code it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 648
	},
	{
		"id" : 238023720,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-06T13:38:22Z",
		"body" : "One suggestion, otherwise :+1:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 649
	},
	{
		"id" : 238171539,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T08:22:13Z",
		"body" : "Nice work, LGTM, :shipit: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 649
	},
	{
		"id" : 238171584,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T08:22:25Z",
		"body" : "(after my one nit is addressed)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 649
	},
	{
		"id" : 244548420,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:06:34Z",
		"body" : "@UniqMartin Gentle ping on this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 649
	},
	{
		"id" : 252194444,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-10-07T09:29:27Z",
		"body" : "Apologies for the lack of activity here! I'll reopen or resubmit once I find the time.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 649
	},
	{
		"id" : 252293268,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-07T16:07:17Z",
		"body" : "Thanks @UniqMartin!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 649
	},
	{
		"id" : 238037629,
		"user" : {
			"login" : "sje30"
		},
		"created_at" : "2016-08-06T18:18:43Z",
		"body" : "p.s. current config:\r\n\r\n```\r\nbrew config\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: cc0ca73183f1e92579169eb038b10a98bd7c455a\r\nLast commit: 7 weeks ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: e7fd17b4b8fa3ff467e33d39bd0358b1af647d45\r\nCore tap last commit: 7 weeks ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: octa-core 64-bit haswell\r\nClang: 7.3 build 703\r\nPerl: /usr/bin/perl\r\nPython: /usr/local/bin/python => /usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/bin/python2.7\r\nRuby: /Users/stephen/.rbenv/shims/ruby => /Users/stephen/.rbenv/versions/2.3.0/bin/ruby\r\nJava: 1.7.0_45\r\nSystem Ruby: 2.0.0-p648\r\nOS X: 10.11.6-x86_64\r\nXcode: 7.3.1\r\nCLT: N/A\r\nX11: 2.7.9 => /opt/X11\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 651
	},
	{
		"id" : 238062176,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-07T04:02:39Z",
		"body" : "This sounds kind of like #560, but \"in the other direction\".\r\n\r\nI don't think `brew` intentionally changes the terminal settings. But it pulls in code, particularly IRB support, which may do so in certain circumstances. If it's turning off `-echo`, or otherwise leaving your terminal settings changed after a `brew` run, that's probably a bug.\r\n\r\nDo you have an `~/.editrc` file, and if so, what does it contain?\r\n\r\nDoes it happen with all `brew` commands? For example, do `brew ls` and `brew tap` also cause double echoing?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 651
	},
	{
		"id" : 238064427,
		"user" : {
			"login" : "sje30"
		},
		"created_at" : "2016-08-07T05:22:52Z",
		"body" : "> This sounds kind of like #560, but \"in the other direction\".\n\nyes, it sounds similar, thanks.\n\n\n> I don't think `brew` intentionally changes the terminal settings. But\n> it pulls in code, particularly IRB support, which may do so in certain\n> circumstances. If it's turning off `-echo`, or otherwise leaving your\n> terminal settings changed after a `brew` run, that's probably a bug.\n\nthanks for checking.  that's why I seem  to see happen.\n\n> Do you have an `~/.editrc` file, and if so, what does it contain?\n\nNo.\n\n> Does it happen with all `brew` commands? For example, do `brew ls` and\n> `brew tap` also cause double echoing?\n\nNo.  e.g. when `brew ls` is run, -echo is preserved.\n\nIs it likely to be caused by the bit of code that shows progress bars\nwhen files are downloaded?\n\nStephen\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 651
	},
	{
		"id" : 238814549,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T09:31:46Z",
		"body" : "We'll accept PRs for this but we're not actively working on it at this time.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 651
	},
	{
		"id" : 238062371,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-07T04:10:02Z",
		"body" : "Using a group is the usual way of handling permissions for multiple users, especially a set that may change over time, instead of granting per-user permissions to multiple individual users. It tends to make system administration easier.\r\n\r\nCould you use `sudo chmod -R +a ...` to use ACL-based permissions to grant write access to an additional group, or the individual user accounts you want to have access?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 652
	},
	{
		"id" : 248604097,
		"user" : {
			"login" : "Yann-R"
		},
		"created_at" : "2016-09-21T12:57:35Z",
		"body" : "Yes.\r\nEven if, most of the time, the admin is also the user and the user is single-user ;-)\r\nIt's true that macOS (unix-based) is intrinsically for multiples users.\r\nAnd since among the motivations of brew there is:\r\n- directly make the additional software available for all users in a standard directory (that's why `/usr/local` is targeted)\r\n- avoid switching to root account to install additional software\r\n\r\nThen: why not make brew configure and prepare this privileged unix-group for authorized users to write and install in the brew repository?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 652
	},
	{
		"id" : 248834277,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T07:44:50Z",
		"body" : "@Yann-R I'm not really sure what you're asking but Homebrew allows you to set group permissions and will respect them, it just doesn't set them by default.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 652
	},
	{
		"id" : 238077961,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-07T11:46:02Z",
		"body" : "@javian The error was too many unreachable objects in the homebrew/core tap. Removing that file and manually running git prune fixed it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 653
	},
	{
		"id" : 238086153,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-07T14:39:16Z",
		"body" : "üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 654
	},
	{
		"id" : 238171828,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T08:23:30Z",
		"body" : "üëç but if this fixes all syntax failures in our bash code: please consider adding a check for this to `brew test-bot` or `brew tests` or similar so they don't just break again.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 654
	},
	{
		"id" : 238233852,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-08T13:23:39Z",
		"body" : "> but if this fixes all syntax failures in our bash code: please consider adding a check for this to `brew test-bot` or `brew tests` or similar so they don't just break again.\r\n\r\nNo, all the changes in this PR are purely about style. If there were any syntax errors, we would have been in more trouble (unless it's in a rarely used `superenv` shim).\r\n\r\nHowever, your comment made me remember `test/test_bash.rb` and I pushed another commit to make sure it checks **all** our Bash code for syntax errors, including `superenv` shims and newly added or relocated code. (I think this test was added when `bin/brew` was still a huge monolithic piece of code and neither `brew.sh` nor `utils{,/*}.sh` existed yet.) Thanks for this! ‚ù§Ô∏è",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 654
	},
	{
		"id" : 238235472,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T13:28:25Z",
		"body" : "Sorry, to clarify: I mean if you've fixed all style warnings it'd be great to push an automated `shellcheck` check somewhere. Thanks for that üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 654
	},
	{
		"id" : 238242595,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-08T13:46:23Z",
		"body" : "I see. No, we're not quite there yet and most stuff I changed in this PR isn't the kind that would be pointed out by `shellcheck`, though I made sure not to introduce any new warnings. I'll make sure to put this on my TO DO list, but IMO that's definitely something for a follow-up PR.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 654
	},
	{
		"id" : 238244698,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T13:52:43Z",
		"body" : "I'd love to see Homebrew/brew \"clean\" enough at some point that we can have Shellcheck and RuboCop run by CI to check for regressions. I guess we could do some of that automatically if we have CI use a different set of rules and try to fix one set at a time?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 654
	},
	{
		"id" : 238250125,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-08T14:12:21Z",
		"body" : "I fully agree and the idea how to do this is shaping up nicely in my head, thanks also to your input! The only thing that's holding me back from spending more time with this is that I'm currently trying to focus more on GSoC/Outreachy-related stuff and more pressing issues (and yes, this PR doesn't exactly prove my point). All those style-related tasks are definitely quite high on my agenda, if nobody beats me to it, and it would be nice to have some of that before 1.0.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 654
	},
	{
		"id" : 238252205,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T14:19:42Z",
		"body" : "@UniqMartin same here.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 654
	},
	{
		"id" : 238084147,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-07T14:02:49Z",
		"body" : "Your output actually does show casks in the results:\r\n```\r\nCaskroom/versions/ssh-tunnel-manager-beta\r\n```\r\n\r\nI think this is a duplicate of https://github.com/Homebrew/brew/issues/415.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 655
	},
	{
		"id" : 238084841,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-07T14:15:22Z",
		"body" : "Actually, no, you're right that the results are different. It's just that they're two entirely separate commands:\r\n\r\nhttps://github.com/Homebrew/brew/blob/master/Library/Homebrew/cmd/search.rb\r\n\r\nhttps://github.com/caskroom/homebrew-cask/blob/master/lib/hbc/cli/search.rb",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 655
	},
	{
		"id" : 238085677,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-07T14:30:35Z",
		"body" : "@rprimus yeah this looks like a bug. Do you mind trying this diff\r\n```\r\nJosephs-MacBook-Pro:local joe$ git diff\r\ndiff --git a/Library/Homebrew/cmd/search.rb b/Library/Homebrew/cmd/search.rb\r\nindex 9574ba7..cfcf38a 100644\r\n--- a/Library/Homebrew/cmd/search.rb\r\n+++ b/Library/Homebrew/cmd/search.rb\r\n@@ -143,7 +143,11 @@ module Homebrew\r\n         end\r\n       end\r\n \r\n-      paths = tree[\"Formula\"] || tree[\"HomebrewFormula\"] || tree[\"Casks\"] || tree[\".\"] || []\r\n+      paths = []\r\n+      paths += tree[\"Formula\"] if tree[\"Formula\"]\r\n+      paths += tree[\"HomebrewFormula\"] if tree[\"HomebrewFormula\"]\r\n+      paths += tree[\"Casks\"] if tree[\"Casks\"]\r\n+      paths += tree[\".\"] if tree[\".\"]\r\n       cache[key] = paths.map { |path| File.basename(path, \".rb\") }\r\n     end\r\n```\r\nIt seems to reveal the problem :)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 655
	},
	{
		"id" : 238086176,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-07T14:39:33Z",
		"body" : "Indeed, the problem is relatively new as it's not too long ago that the legacy `brew-cask` formula in caskroom/cask has been moved to the `Formula/` directory. I guess a simpler fix would be the following (and it stays true to our assumption that there's always only one formula directory in a tap), though I'm not sure the code that uses this is prepared to deal with multiple trees.\r\n\r\n```ruby\r\npaths = tree[\"Formula\"] || tree[\"HomebrewFormula\"] || tree[\".\"] || []\r\npaths += tree[\"Casks\"] || []\r\n```\r\n\r\ncaskroom/cask is a bit of a special case here as it contains both a formula and casks.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 655
	},
	{
		"id" : 238086208,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-07T14:40:11Z",
		"body" : "@ilovezfs Nice and spot-on diagnosis by the way! :+1:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 655
	},
	{
		"id" : 238086240,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-07T14:40:51Z",
		"body" : "@UniqMartin I think we want\r\n```\r\n      paths = [\r\n        tree[\"Formula\"],\r\n        tree[\"HomebrewFormula\"],\r\n        tree[\"Casks\"],\r\n        tree[\".\"],\r\n      ].compact.reduce([], :|)\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 655
	},
	{
		"id" : 238086415,
		"user" : {
			"login" : "rprimus"
		},
		"created_at" : "2016-08-07T14:43:53Z",
		"body" : "Sun Aug  7 15:42:54 BST 2016\r\n\r\n@ilovezfs your initial code returned the original behaviour:\r\n\r\n```\r\n:!brew search sshfs\r\nhomebrew/fuse/sshfs ‚úî\r\nCaskroom/cask/sshfs\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 655
	},
	{
		"id" : 238086488,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-07T14:45:12Z",
		"body" : "@rprimus cool. second version also gets same results\r\n```\r\nJosephs-MacBook-Pro:local joe$ brew search sshfs\r\nhomebrew/fuse/sshfs\r\nCaskroom/cask/sshfs\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 655
	},
	{
		"id" : 238086893,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-07T14:52:59Z",
		"body" : "@UniqMartin yup\r\n```\r\npaths = tree[\"Formula\"] || tree[\"HomebrewFormula\"] || tree[\".\"] || []\r\npaths += tree[\"Casks\"] || []\r\n```\r\nworks too, of course.\r\n\r\n>homebrew/cask is a bit of a special case here as it contains both a formula and casks.\r\n\r\nThat sounds like a \"bug\" to me. Perhaps they can separate them \"appropriately.\"",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 655
	},
	{
		"id" : 238087468,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-07T15:03:37Z",
		"body" : "@UniqMartin I think your code might have trouble in the case of casks at the root + a Formula directory, whereas it would not have trouble with formulae at the root plus a Cask directory, which seems like a slightly odd asymmetry. Neither is probably a configuration we'd want to support, so it seems possibly undesirable to \"accidentally\" support one.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 655
	},
	{
		"id" : 238087722,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-07T15:08:08Z",
		"body" : "> I think we want [‚Ä¶]\r\n\r\nNope, see [`Tap#formula_dir`](https://github.com/Homebrew/brew/blob/b8ce1fe1b2abfc6b38a6c6451ef8074f2a83a8eb/Library/Homebrew/tap.rb#L304-L306) where we pick exactly one directory where we look for formulae. This search code needs to be consistent with that.\r\n\r\n> I think your code might have trouble in the case of casks at the root + a Formula directory, whereas it would not have trouble with formulae at the root plus a Cask directory, which seems like a slightly odd asymmetry.\r\n\r\nThis asymmetry can be easily explained. As far as I'm aware, casks were always stored in `Casks/` directory and never anywhere else, so that's the only location inspect for casks. The other three locations are (partially for historical reasons) all valid candidates for then picking the one true formula directory ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 655
	},
	{
		"id" : 238087910,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-07T15:12:14Z",
		"body" : ">Nope, see Tap#formula_dir where we pick exactly one directory where we look for formulae. This search code needs to be consistent with that.\r\n\r\nAh OK, so throwing the Cask tree in as well doesn't break that assumption since the casks are not True Formulae?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 655
	},
	{
		"id" : 238088517,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-07T15:22:59Z",
		"body" : "> Ah OK, so throwing the Cask tree in as well doesn't break that assumption since the casks are not True Formulae?\r\n\r\nCorrect. Though if anyone asked me, the Cask support in `brew search` (that only includes caskroom/cask and caskroom/versions and always searches the GitHub repository, no matter what is installed locally or not) feels a bit tucked on. It just never bothered me enough as I'm not a Cask user and maybe we can get this fixed with the progressing integration ‚Ä¶\r\n\r\n(Just noticed: I wrote homebrew/cask before but I obviously meant to write caskroom/cask.)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 655
	},
	{
		"id" : 238089792,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-07T15:46:36Z",
		"body" : "@UniqMartin yeah I agree. It feels very intrusive to return cask results when caskroom/cask isn't even tapped, especially with no way to suppress it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 655
	},
	{
		"id" : 238097550,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-07T17:57:52Z",
		"body" : "Like last time, I've temporarily tagged the PR with ‚Äúdo not merge‚Äù as I want to test drive it a bit more thoroughly on my local machine before merging. (You can expect some more feedback from me tomorrow or the day after. I'm signing off for today.)",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 656
	},
	{
		"id" : 238172695,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T08:27:47Z",
		"body" : "Nice work! Any thoughts on when this will be ready to replace the current implementation? It's been pretty rock solid so far.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 656
	},
	{
		"id" : 238271150,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-08-08T15:20:32Z",
		"body" : "I think we're getting close to making this the user-facing implementation. In particular, this version contains a completely new implementation of load command modification, one that's a **lot** nicer (and more correct/generic) than the one that I originally wrote.\r\n\r\nWe're probably going to find small bugs here and there, but I'm much more comfortable exposing this to users than I would have been a few months ago :smile: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 656
	},
	{
		"id" : 238276018,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-08T15:36:04Z",
		"body" : "> Any thoughts on when this will be ready to replace the current implementation?\r\n\r\nI'd like it to see some more testing in some corner cases, but that's probably just me being overly cautious. Overall I'm pretty pleased with how this has shaped up.\r\n\r\nAt this point, the main thing that stops us from delivering this to all users is a hard dependency on Ruby 2.0+. We've worked with this assumption as this simplified some of our work, giving us more time to focus on things that really matter. If we wanted to enable this for everyone, we would need to add a check for a sufficiently new Ruby and otherwise fall back to the `cctools` implementation. The other option would be to ship vendored Ruby 2.0 (if it's ready) and stop worrying about Ruby versions that are more than obsolete nowadays ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 656
	},
	{
		"id" : 238327470,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-08-08T18:15:02Z",
		"body" : "> I'd like it to see some more testing in some corner cases, but that's probably just me being overly cautious.\r\n\r\nAs would I, I'm working on some new tests for the PRs we've merged in the last few days :wink: \r\n\r\n> The other option would be to ship vendored Ruby 2.0 (if it's ready) and stop worrying about Ruby versions that are more than obsolete nowadays ‚Ä¶\r\n\r\nI am strongly in favor of this option, but falling back to `cctools` seems like reasonable edge behavior for older systems if the vendored ruby 2.x won't be ready in the foreseeable future.\r\n\r\nIt's also worth noting that users on older systems may be susceptible to the bad `install_name_tool` [behavior we (re)discovered](https://github.com/Homebrew/ruby-macho/issues/41#issuecomment-235475634). Whether or not they get `ruby-macho` immediately, it definitely makes sense to get them away from their system copies of `cctools`.\r\n\r\n\r\n\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 656
	},
	{
		"id" : 238354254,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-08T19:48:52Z",
		"body" : "Just a minor thing, but the [`Library/Homebrew/vendor/README.md` file](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/vendor/README.md) also needs an update.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 656
	},
	{
		"id" : 238370027,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T20:41:10Z",
		"body" : "Agreed with shipping this to users and waiting on Ruby 2.0. We can probably ship it by default to `HOMEBREW_DEVELOPER`-setting folks first, though.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 656
	},
	{
		"id" : 238383733,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-08-08T21:29:42Z",
		"body" : "> Just a minor thing, but the Library/Homebrew/vendor/README.md file also needs an update.\r\n\r\nI knew I forgot something...",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 656
	},
	{
		"id" : 238553413,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-09T13:31:32Z",
		"body" : "*Quick status update:* Things are looking pretty good in local testing and the currently running test should finish in 3-4 hours. The only bugs I found so far (two of them) are in the now almost ‚Äúlegacy‚Äù `cctools`-based code Mach-O handling. :joy: (Though to be honest, both are relatively minor things and are unlikely to impact users.)\r\n\r\nI'm increasingly confident about rolling this out to all users. :tada: Expect a few PRs very soon that will address the discovered bugs and will add a new mode of testing this more thoroughly on the bot that I briefly discussed with Mike (sorry for the tease, more details to follow soon).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 656
	},
	{
		"id" : 238924610,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-10T16:34:30Z",
		"body" : "All my local testing finished successfully, thus I'm inclined to merge this as soon as possible.\r\n\r\nHowever, the stricter behavior we've been previously enforcing (by accident) and that we're now about to loosen to the standards of `install_name_tool` et al. is helping to uncover real problems, like in Homebrew/homebrew-core#3704 for a very recent example (somehow all of them are related to Python üôà), thus I'm wondering whether we should actually stick with the stricter behavior. An upside is that we bottle less broken stuff, a downside that this is creating (very infrequently) more friction for our contributors. Thoughts?\r\n\r\nAlso, because I've improved the error reporting to simplify debugging cases like the above in the future, there's a merge conflict that needs to be addressed (but should be trivial).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 656
	},
	{
		"id" : 238962682,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-08-10T18:40:13Z",
		"body" : "> thus I'm wondering whether we should actually stick with the stricter behavior\r\n\r\nThis is fine by me; now that we actually have the ability to switch between the two programatically, reverting to the more lenient behavior is trivial if the maintenance load becomes untenable. That being said, I'm also 100% fine with having `:strict => false` in this PR - it's your call :smile: \r\n\r\n> An upside is that we bottle less broken stuff, a downside that this is creating (very infrequently) more friction for our contributors.\r\n\r\nShipping bottles that are more correct/less likely to explode is a big :+1: for me. I don't like creating extra trouble for contributors, but it definitely makes sense to encourage the double-checking of build/linkage flags that make build products (needlessly) inconsistent.\r\n\r\n> there's a merge conflict that needs to be addressed (but should be trivial).\r\n\r\nGot it, I'll resolve it when I'm home.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 656
	},
	{
		"id" : 239284582,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-11T20:38:09Z",
		"body" : "Thanks, @woodruffw! :tada: Let's see how that fares (I'm pretty confident it will do quite well) and unless something comes up over the weekend consider switching `ruby-macho` on for everyone by default (unless they're the minority not using Ruby 2.0 yet). How does that sound?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 656
	},
	{
		"id" : 239285044,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-11T20:39:39Z",
		"body" : "Is there a plan to turn on strict mode later?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 656
	},
	{
		"id" : 239287601,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-11T20:48:31Z",
		"body" : "> Is there a plan to turn on strict mode later?\r\n\r\nI don't think we have a firm idea about whether we want to do that or not. Currently, the stricter behavior was blocking a PR from progressing (Homebrew/homebrew-core#3704), so we might need to figure out what to do with such cases to unblock them, as they previously finished just fine and in this sense it would be a bit of a regression.\r\n\r\nAny ideas or opinions surrounding this are more than welcome! I definitely would like to revisit this at a later time (but in the not too distant future).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 656
	},
	{
		"id" : 239540866,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-12T19:38:01Z",
		"body" : "> Do we know of any formula/builds that intentionally include inconsistent fat binaries?\r\n\r\nI don't but @DomT4 might.\r\n\r\n\r\n\r\n> If the chance of an inconsistent binary being intentional turns out to be vanishingly small, we should probably retain default to strict mode.\r\n\r\nI'd probably prefer to default to the functionality that matches the previous behaviour for end-users. We could adjust it for the bots.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 656
	},
	{
		"id" : 239543086,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-08-12T19:48:18Z",
		"body" : "> I'd probably prefer to default to the functionality that matches the previous behaviour for end-users.\r\n\r\nSounds good to me! Adjusting it for the bots sounds good, although we'll need a way to exempt formulae that are intentionally inconsistent. I'll look into that :smile: \r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 656
	},
	{
		"id" : 240639981,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T06:57:52Z",
		"body" : "> Do we know of any formula/builds that *intentionally* include inconsistent fat binaries?\r\n\r\nGiven our experience with `ruby-macho` on the bot during the past few weeks/months, all of the cases we've come across so far where fat binaries have been inconsistent has been some build system failure or some other failure.\r\n\r\n> If the chance of an inconsistent binary being intentional turns out to be vanishingly small, we should probably retain default to strict mode.\r\n\r\nI somewhat agree, but I think this is impractical unless we have a plan for how to deal with the diverging cases (allow opt-out, be able to fix issues if the diverging case turns out to be actually broken). Given that there's no strict requirement for fat binary to be consistent with respect to their linkage and RPATHs, inconsistent fat binaries are perfectly valid, and some (though very few) system fat binaries on macOS are inconsistent, I think we best stick to the previous behavior (compatible with `install_name_tool`) as far as Homebrew is concerned.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 656
	},
	{
		"id" : 240660482,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T08:41:23Z",
		"body" : "> I somewhat agree, but I think this is impractical unless we have a plan for how to deal with the diverging cases (allow opt-out, be able to fix issues if the diverging case turns out to be actually broken). Given that there's no strict requirement for fat binary to be consistent with respect to their linkage and RPATHs, inconsistent fat binaries are perfectly valid, and some (though very few) system fat binaries on macOS are inconsistent, I think we best stick to the previous behavior (compatible with install_name_tool) as far as Homebrew is concerned.\r\n\r\nAgreed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 656
	},
	{
		"id" : 238098268,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-07T18:10:18Z",
		"body" : "cf https://github.com/Homebrew/homebrew-core/pull/3685; an alternative is to patch this on a formula-by-formula basis.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 657
	},
	{
		"id" : 238099403,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-07T18:29:18Z",
		"body" : "Closing for now; let's see how often this pops up.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 657
	},
	{
		"id" : 238206705,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-08T11:11:31Z",
		"body" : "Interestingly this PR doesn't actually seem to work:\r\n```\r\n==> /usr/local/Cellar/dxpy/0.191.0/bin/dx env\r\nWarning: incompatible readline module detected (libedit), tab completion disabled\r\niMac-TMP:homebrew-core joe$ find /usr/local/Cellar|grep homebrew-gnureadline-hack.pth\r\n/usr/local/Cellar/dxpy/0.191.0/libexec/lib/python2.7/site-packages/homebrew-gnureadline-hack.pth\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 657
	},
	{
		"id" : 238286217,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-08T16:08:46Z",
		"body" : "Oops :( Must have worked accidentally in testing; I don't see it working now.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 657
	},
	{
		"id" : 238288069,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-08T16:15:27Z",
		"body" : "It looks like placing `import sys; import gnureadline; sys.modules[\"readline\"] = gnureadline` in the .pth file works.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 657
	},
	{
		"id" : 238293916,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-08T16:36:18Z",
		"body" : "@tdsmith yes that works although I have to write out the file after pipneedful. If it's before,\r\n```\r\n==> python -s /tmp/dxpy--homebrew-virtualenv-20160808-24099-eeksqq/target/bin/virtualenv -p python /usr/local/Cellar/dxpy/0.191.0/libexec\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/dxpy/0.191.0/libexec/lib/python2.7/site.py\", line 703, in <module>\r\n    main()\r\n  File \"/usr/local/Cellar/dxpy/0.191.0/libexec/lib/python2.7/site.py\", line 683, in main\r\n    paths_in_sys = addsitepackages(paths_in_sys)\r\n  File \"/usr/local/Cellar/dxpy/0.191.0/libexec/lib/python2.7/site.py\", line 282, in addsitepackages\r\n    addsitedir(sitedir, known_paths)\r\n  File \"/usr/local/Cellar/dxpy/0.191.0/libexec/lib/python2.7/site.py\", line 204, in addsitedir\r\n    addpackage(sitedir, name, known_paths)\r\n  File \"/usr/local/Cellar/dxpy/0.191.0/libexec/lib/python2.7/site.py\", line 173, in addpackage\r\n    exec(line)\r\n  File \"<string>\", line 1, in <module>\r\nImportError: No module named gnureadline\r\nAlready using interpreter /usr/bin/python\r\nNew python executable in /usr/local/Cellar/dxpy/0.191.0/libexec/bin/python\r\nERROR: The executable /usr/local/Cellar/dxpy/0.191.0/libexec/bin/python is not functioning\r\nERROR: It thinks sys.prefix is u'/private/tmp/dxpy--homebrew-virtualenv-20160808-24099-eeksqq/virtualenv-15.0.2' (should be u'/usr/local/Cellar/dxpy/0.191.0/libexec')\r\nERROR: virtualenv is not compatible with this system or executable\r\n/usr/local/Library/Homebrew/debrew.rb:11:in `raise'\r\nBuildError: Failed executing: python -s /tmp/dxpy--homebrew-virtualenv-20160808-24099-eeksqq/target/bin/virtualenv -p python /usr/local/Cellar/dxpy/0.191.0/libexec\r\n```\r\n\r\nAny tweak that would make it not care where we put this in the formula? Not that it matters really...",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 657
	},
	{
		"id" : 238300618,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-08T16:59:07Z",
		"body" : "Oh, of course, hadn't considered that. I'll have to think about it; you can't do exception handling in .pth files, unfortunately...",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 657
	},
	{
		"id" : 238308505,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-08T17:25:52Z",
		"body" : "probably fine if it has to go at the end, but just a gotcha to be aware of when we're reviewing these",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 657
	},
	{
		"id" : 238196016,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-08T10:14:33Z",
		"body" : "Thanks! üôá I still have to learn to convert more of the easy fixes into PRs and/or direct commits instead of letting them get lost in issue comments. üò≥",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 658
	},
	{
		"id" : 238197317,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T10:21:10Z",
		"body" : "@tdsmith Any thoughts on whether this is the right approach and/or how to test it?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 659
	},
	{
		"id" : 238213528,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-08T11:50:16Z",
		"body" : "> Any thoughts on whether this is the right approach and/or how to test it?\r\n\r\nNot sure how to best test this, but I think the general approach is fine and I'm happy that we can delegate most of the work to cURL (by using its `--data-urlencode` option).\r\n\r\nFrom the `curl(1)` man page for `--data-urlencode`:\r\n\r\n> (Added in 7.18.0)\r\n\r\nDo you have an overview what cURL version are in use and available on the systems we support, i.e. whether we can be sure all of them are sufficiently new to support this option?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 659
	},
	{
		"id" : 238236904,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T13:32:23Z",
		"body" : "> Do you have an overview what cURL version are in use and available on the systems we support, i.e. whether we can be sure all of them are sufficiently new to support this option?\r\n\r\nWe do somewhere but I'm pretty sure this is too new for all versions we want to track üò≠. May be better to use a Ruby method for this instead; the problem is only with Ruby inputs anyway.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 659
	},
	{
		"id" : 238254015,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-08T14:25:36Z",
		"body" : "> May be better to use a Ruby method for this instead; the problem is only with Ruby inputs anyway.\r\n\r\nIn this case it might be time to pull the [`GitHub.uri_escape`](https://github.com/Homebrew/brew/blob/c016aedaab3a5b10207eb05d6b53199e6fcdb761/Library/Homebrew/utils/github.rb#L241-L248) method into a more general context and use it. Though I kinda liked this uniform approach of properly encoding all strings, even when they are sent from Bash code and the strings we use there are typically not problematic.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 659
	},
	{
		"id" : 238369783,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-08T20:40:20Z",
		"body" : "üëç as long as it's working for you.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 660
	},
	{
		"id" : 238354660,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-08T19:50:17Z",
		"body" : "Second time in 24 hours, hurrah. Should be fixed now, have rescheduled the builds that hit the issue.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 661
	},
	{
		"id" : 238357818,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-08T19:58:44Z",
		"body" : "I think we might be hitting a variation of #590 here, though I'm not entirely sure why things might have ended up in a conflicting state, as `isync` was pulled exactly like in the PR.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 661
	},
	{
		"id" : 238385670,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-08T21:37:23Z",
		"body" : "@UniqMartin I haven't looked into it much but my suspicion partly lies with our autoupdate feature, because `HOMEBREW_DEVELOPER` is of course set on CI which means the autoupdate feature will be as well, which triggers on `install`.\r\n\r\nSo potentially, `brew test-bot xyz` is stashing & popping changes not in `origin/master` repeatedly throughout a CI run, which I could imagine has the potential for issues. Haven't checked though, so this could be a stupid comment üòÑ.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 661
	},
	{
		"id" : 238388543,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-08T21:49:11Z",
		"body" : "This sounds entirely plausible and like a strong indicator that we probably should disable the auto-update feature in `brew test-bot`. I cannot quite imagine why we would want to have it enabled during a `brew test-bot` run. Since `brew test-bot` is pulling changes from PRs, thus temporarily creates a divergent `master`, this sounds like a recipe for trouble ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 661
	},
	{
		"id" : 238448521,
		"user" : {
			"login" : "javian"
		},
		"created_at" : "2016-08-09T04:10:58Z",
		"body" : "Thanks for looking into it. It seems that the problem is back again - https://bot.brew.sh/job/Homebrew%20PHP%20Pull%20Requests/2081/version=el_capitan/console .",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 661
	},
	{
		"id" : 238481953,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T08:02:18Z",
		"body" : "> I cannot quite imagine why we would want to have it enabled during a brew test-bot run. Since brew test-bot is pulling changes from PRs, thus temporarily creates a divergent master, this sounds like a recipe for trouble ‚Ä¶\r\n\r\nDisabled in 3f7adf2. We'll see if that sorts it out.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 661
	},
	{
		"id" : 241633999,
		"user" : {
			"login" : "javian"
		},
		"created_at" : "2016-08-23T05:54:19Z",
		"body" : "the pr was already rebased against homebrew-php master so that didn't help.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 661
	},
	{
		"id" : 238431621,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-09T01:55:07Z",
		"body" : ":shipit: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238495422,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T09:02:50Z",
		"body" : "Pushed and made it more general in cc752e9. I checked and this approach is safe: if a requirement is for a dependent that's already installed and that dependency is not using a `default_formula` (which would have already been converted from a `Requirement` to `Dependency` at this stage) and there's no reason for the `Requirement` to take effect.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238513396,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-09T10:22:21Z",
		"body" : "> If you have a better idea, please file a competing PR. I'm sick to death of discussion.\r\n\r\nI'm not sure what exactly triggered this, but this certainly doesn't read like an invitation for constructive criticism (or any criticism at all). üò¢",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238515345,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T10:32:08Z",
		"body" : "> I'm not sure what exactly triggered this, but this certainly doesn't read like an invitation for constructive criticism (or any criticism at all). üò¢\r\n\r\nI think @DomT4's point (which I broadly agree with) is that an under-discussed bad solution that fixes a widespread user problem is much better than a perfect but unimplemented solution. There's a lot of stuff where honestly it's as quick to create a PR as write a comment.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238525330,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-09T11:25:20Z",
		"body" : "In my opinion this PR along with the additional commit basically starts to treat all requirements as build only. This is definitely incorrect as can be shown in following example.\r\n\r\n```\r\n$ brew cat foo\r\nclass Foo < Formula\r\n  url \"file:///usr/local/bin/brew\"\r\n  version \"1.0\"\r\n\r\n  depends_on \"baz\"\r\n\r\n  def install\r\n    system Formula[\"baz\"].opt_bin/\"baz\"\r\n  end\r\nend\r\n$ brew cat baz\r\nclass Baz < Formula\r\n  url \"file:///usr/local/bin/brew\"\r\n  version \"1.0\"\r\n\r\n  depends_on :python3\r\n\r\n  def install\r\n    (bin/\"baz\").write <<-EOS.undent\r\n      #!/usr/bin/env python3\r\n      print(\"hello world\")\r\n    EOS\r\n  end\r\nend\r\n$ brew install baz\r\n==> Using the sandbox\r\n==> Downloading file:///usr/local/bin/brew\r\n######################################################################## 100.0%\r\nWarning: Cannot verify integrity of baz-1.0\r\nA checksum was not provided for this resource\r\nFor your reference the SHA256 is: 0b16b7f7e219329a82a3d5d1f485d3ee0944995c9686f686505ca1dce304dd10\r\nüç∫  /usr/local/Cellar/baz/1.0: 2 files, 680B, built in 2 seconds\r\n$ brew uninstall python3\r\nUninstalling /usr/local/Cellar/python3/3.5.2_1... (3,574 files, 54.3M)\r\n$ brew install foo\r\n==> Using the sandbox\r\n==> Downloading file:///usr/local/bin/brew\r\nAlready downloaded: /Users/xucheng/Library/Caches/Homebrew/foo-1.0\r\nWarning: Cannot verify integrity of foo-1.0\r\nA checksum was not provided for this resource\r\nFor your reference the SHA256 is: 0b16b7f7e219329a82a3d5d1f485d3ee0944995c9686f686505ca1dce304dd10\r\n==> /usr/local/opt/baz/bin/baz\r\nLast 15 lines from /Users/xucheng/Library/Logs/Homebrew/foo/01.baz:\r\n2016-08-09 19:24:27 +0800\r\n\r\n/usr/local/opt/baz/bin/baz\r\n\r\nenv: python3: No such file or directory\r\nREAD THIS: https://git.io/brew-troubleshooting\r\nIf reporting this issue please do so at (not Homebrew/brew):\r\n  https://github.com/Homebrew/homebrew-core/issues\r\n\r\n```\r\n\r\nFor the problem in Homebrew/homebrew-core#3703,  shouldn't it be solved by `depends_on MaximumMacOSRequirement => [:el_capitan, :build]`",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238529855,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-09T11:49:46Z",
		"body" : "> depends_on MaximumMacOSRequirement => [:el_capitan, :build]\r\n\r\nYes, this worked.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238532235,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T12:01:56Z",
		"body" : "@xu-cheng: I quote:\r\n\r\n> If you have a better idea, please file a competing PR. I'm sick to death of discussion.\r\n\r\n> For the problem in Homebrew/homebrew-core#3703, shouldn't it be solved by depends_on MaximumMacOSRequirement => [:el_capitan, :build]\r\n\r\nNo, it should not. The \"correct\" solution would be to ensure that if a `devel` formula is installed it does not check for requirements or dependencies inside the `stable` spec. Another possible solution just for this case would be to make `MaximumMacOSRequirement` so it always has a `:build` tag.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238532817,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-09T12:05:05Z",
		"body" : ">The \"correct\" solution would be to ensure that if a devel formula is installed it does not check for requirements or dependencies inside the stable spec.\r\n\r\nSee https://github.com/Homebrew/homebrew-core/issues/3665#issuecomment-238020399.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238534286,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T12:12:24Z",
		"body" : "@ilovezfs Your PR looks weird, it's like it's embedded in a comment :trollface: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238534960,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-09T12:15:49Z",
		"body" : "@MikeMcQuaid that's because that code is actually wrong as mentioned lower down in the same issue, and no I do not intend to fix it or open a PR.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238536016,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T12:20:46Z",
		"body" : "> I do not intend to fix it or open a PR.\r\n\r\nIt seems this is the default position of Homebrew maintainers now `¬Ø\\_(„ÉÑ)_/¬Ø`",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238536280,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-09T12:21:54Z",
		"body" : ">It seems this is the default position of Homebrew maintainers now ¬Ø\\_(„ÉÑ)_/¬Ø\r\n\r\nThere's probably more than a few overlapping reasons for that.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238536987,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T12:25:21Z",
		"body" : "> There's probably more than a few overlapping reasons for that.\r\n\r\nNot here but I'd genuinely like to listen what they are from your perspective. Can you send me an email or Slack message?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238537643,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-09T12:28:25Z",
		"body" : "> I'm not sure what exactly triggered this, but this certainly doesn't read like an invitation for constructive criticism (or any criticism at all).\r\n\r\nMy wording was blunt because I was tired, amongst other less shiny things Homebrew has made me feel all too often over the last 6 months, of which I share a chunk of the blame & that blame being the biggest reason I told Mike last night I'll happily walk away from the project if it brings other maintainers back into the fold.\r\n\r\nMore gently worded, which is how I should have written it, I was just saying if people felt like this was an awful idea & they had a better one, could they please implement it rather than spending their time telling me why I was doing something awful they could never accept.\r\n\r\nI always welcome constructive criticism on anything I submit _(as hopefully I've showed by having accepted quite a bit of that advice over time)_, it helps me be less awful at all of this, but I think over the last 6 months we've become prone, as a team, to ramping up criticism to a level where the OP is made to feel exhausted when a PR finally ships because we chased some dream of perfection.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238543854,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-09T12:55:59Z",
		"body" : "@xu-cheng actually my test was wrong, `depends_on MaximumMacOSRequirement => [:el_capitan, :build]` doesn't seem to work.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238545736,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-09T13:03:39Z",
		"body" : "@DomT4 Thanks for the reply! :heart: I now have a much better understanding of the circumstances than when I wrote my comment. I agree that there's room for improvement in the team and how we approach things and wrangle PRs, though I'm not sure how to best approach this ‚Ä¶",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 662
	},
	{
		"id" : 238437509,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-09T02:40:28Z",
		"body" : "We'll change it when Sierra is released.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 663
	},
	{
		"id" : 238486225,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T08:22:45Z",
		"body" : "I'm not wanting to ship autoupdate until I personally no longer find it annoying which probably means a no-op case of <1 second.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 664
	},
	{
		"id" : 238491036,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-09T08:44:06Z",
		"body" : "@MikeMcQuaid Did you have a chance to look into this bug? https://github.com/Homebrew/brew/issues/642#issuecomment-238011762",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 664
	},
	{
		"id" : 238491481,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T08:45:59Z",
		"body" : "@ilovezfs I don't personally consider that a bug although Homebrew/brew could perhaps be special cased. At some future point I'll tweak the updater so it only updates the taps it \"needs\" (using a stupid metric to determine that based purely on formula name).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 664
	},
	{
		"id" : 238491775,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-09T08:47:22Z",
		"body" : "I'm confused. It hadn't updated the main brew repo for days.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 664
	},
	{
		"id" : 238494585,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-09T08:59:17Z",
		"body" : "Are you saying keeping `https://github.com/Homebrew/brew` (and homebrew/core) isn't the primary purpose of autoupdate? I thought above all else this whole feature was about keeping the `brew` repo fully updated in case a major regression that would otherwise trigger bazillion user reports occurred, and yet it seems to deliberately always skip the `brew` repository.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 664
	},
	{
		"id" : 238500239,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T09:23:51Z",
		"body" : "> Are you saying keeping https://github.com/Homebrew/brew (and homebrew/core) isn't the primary purpose of autoupdate? I thought above all else this whole feature was about keeping the brew repo fully updated in case a major regression that would otherwise trigger bazillion user reports occurred, and yet it seems to deliberately always skip the brew repository.\r\n\r\nThe primary purpose was keeping the relevant formula repository updated (hence why it's only triggered on e.g. `install` etc.) I can see a good argument for saying it always keeps Homebrew/brew, Homebrew/homebrew-core and, optionally, whatever tap you're currently installing from up-to-date. How's that sound?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 664
	},
	{
		"id" : 238501318,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-09T09:28:37Z",
		"body" : "That sounds more \"correct\" to me. I think it might be safer to define tap sets for each tap, since some freely use cross-tap deps. For instance science = {science, python, x11, versions}.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 664
	},
	{
		"id" : 238502465,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T09:33:07Z",
		"body" : "I think I'll opt for the simplest (and quickest) solution for now and iterate on it after it's shipped to users.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 664
	},
	{
		"id" : 238502698,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-09T09:34:18Z",
		"body" : "Yup, fair enough. I think the cross-tap deps are an area for gotchas, but definitely no blocker.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 664
	},
	{
		"id" : 238512504,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-09T10:18:04Z",
		"body" : ":+1: on this PR.\r\n\r\n> I can see a good argument for saying it always keeps Homebrew/brew, Homebrew/homebrew-core and, optionally, whatever tap you're currently installing from up-to-date. How's that sound?\r\n\r\nI think that's important. It's not uncommon we ship fixes or changes in Homebrew/brew that affect how formulae are built or add new API that is used from formulae. For that reason we often rely on the package manager itself to be at least as up-to-date as the tap (the reverse situation is usually less problematic if the formula is fine). That may become less important once the package manager stabilizes and reaches 1.0.0, but even then we'll have to keep tweaking it in a timely manner to adapt to OS and build system changes.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 664
	},
	{
		"id" : 238503109,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T09:36:00Z",
		"body" : "Can you paste the output you get from `brew config`, `brew install memcached` and `brew services list`? Thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 665
	},
	{
		"id" : 238504134,
		"user" : {
			"login" : "deborah-ufw"
		},
		"created_at" : "2016-08-09T09:40:37Z",
		"body" : "oh you were too fast. With appalled shock, I noticed I had accidentally emptied my etc/hosts file while pasting documentation in notepad. After restoring localhost, it works as expected. \r\n\r\nStill do not know why the brew install of postgres did not work, though!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 665
	},
	{
		"id" : 238509203,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T10:02:01Z",
		"body" : "> oh you were too fast. With appalled shock, I noticed I had accidentally emptied my etc/hosts file while pasting documentation in notepad. After restoring localhost, it works as expected.\r\n\r\nNo worries!\r\n\r\n\r\n> Still do not know why the brew install of postgres did not work, though!\r\n\r\nWe can try to fix that with you if you want to uninstall the package you used. Otherwise: I think we're done here, right?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 665
	},
	{
		"id" : 238531207,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T11:56:38Z",
		"body" : "Assuming this is fixed for now, shout if not!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 665
	},
	{
		"id" : 238508983,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T10:01:08Z",
		"body" : "Could you try and open a pull request? [This document](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md#how-to-open-a-homebrew-pull-request-and-get-it-merged) should help and I'm happy to walk you through anything else.\r\n\r\nThanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 666
	},
	{
		"id" : 238513415,
		"user" : {
			"login" : "pablolarrimbe"
		},
		"created_at" : "2016-08-09T10:22:26Z",
		"body" : "Hey Mike, thanks for the quick response.\r\n\r\nI'm not sure I follow.  I'm not intending to upload the new version myself, I'm just requesting someone to do it.  I honestly wouldn't know how to deploy a new homebrew packet.\r\n\r\nRegards,\r\nPablo.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 666
	},
	{
		"id" : 238515395,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T10:32:29Z",
		"body" : "That documentation describes how to do it. If you'd like it: you should try and do it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 666
	},
	{
		"id" : 238517220,
		"user" : {
			"login" : "pablolarrimbe"
		},
		"created_at" : "2016-08-09T10:41:55Z",
		"body" : "Hey Mike, no worries thanks for your help.  I found the version I needed in ports. \r\nRegards,\r\nPablo.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 666
	},
	{
		"id" : 239663120,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-14T08:56:24Z",
		"body" : "Actually the use of the \"old\" version is intentional right now because the \"new\" version does not support Mavericks. But since we're dropping Mavericks support soon, this will take care of itself shortly unless we choose to jump the gun and drop Mavericks support for this one early in which case it can happen immediately.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 666
	},
	{
		"id" : 239683217,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-14T16:39:37Z",
		"body" : "> this will take care of itself shortly unless we choose to jump the gun and drop Mavericks support for this one early in which case it can happen immediately.\r\n\r\nSince nothing in Homebrew seems to be using `dar` & apparently nobody on Mavericks has attempted to install `dar` in the last ~3 months, this seems reasonable enough.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 666
	},
	{
		"id" : 239683752,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-14T16:49:32Z",
		"body" : "> Since nothing in Homebrew seems to be using dar & apparently nobody on Mavericks has attempted to install dar in the last ~3 months, this seems reasonable enough.\r\n\r\nüëç from me too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 666
	},
	{
		"id" : 239688988,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-14T18:37:10Z",
		"body" : "OK, so strong crypto is available in the 2.4* series as well. OP just needs to build `--with-libgcrypt`, which we could consider making the default.\r\n\r\nAs for 2.5 series, I opened this: https://github.com/Homebrew/homebrew-core/pull/3888\r\n\r\nI've only tested it with gcc5 and gcc6, but the `thread_local` feature is apparently also available with both Xcode 8's clang and llvm clang.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 666
	},
	{
		"id" : 238584688,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T15:11:08Z",
		"body" : "What was the state after installation of the command-line tools? Were they not installed or installed?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 667
	},
	{
		"id" : 238590671,
		"user" : {
			"login" : "robertoea"
		},
		"created_at" : "2016-08-09T15:29:22Z",
		"body" : "I believe they were (still) installed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 667
	},
	{
		"id" : 239543404,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-12T19:49:43Z",
		"body" : "`upgrade --devel` upgrades this, right?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 668
	},
	{
		"id" : 238706824,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-09T22:04:36Z",
		"body" : "I think this change is basically sound, but it is also pretty invasive. Can you elaborate a little bit on what part of it is responsible for the massive speedup and why?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 669
	},
	{
		"id" : 238802223,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T08:39:49Z",
		"body" : "I've addressed your commits and made it faster still for the `--preinstall` case as a result.\r\n\r\n> Can you elaborate a little bit on what part of it is responsible for the massive speedup and why?\r\n\r\nMost of it üòÄ. In short like most dramatic speed-up: do less where possible. Partially avoid recalculating the same values in multiple places but the big speedup: don't try to `status`/`stash`/`merge`/`rebase` when we know nothing has changed (i.e. calling the `merge_or_rebase` method [formerly `pull`]). These are all (relatively) expensive no-ops as they operate on the filesystem data rather than just with variables and filesystem metadata. We've already removed the unnecessary expensive `git fetch` and now `curl` operations too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 669
	},
	{
		"id" : 238802365,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T08:40:27Z",
		"body" : "CC @ilovezfs who will probably be happy with this speedup and was encouraging me to üö¢ this even before it was this fast.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 669
	},
	{
		"id" : 238865137,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-10T13:24:19Z",
		"body" : ":shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 669
	},
	{
		"id" : 238865311,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T13:24:58Z",
		"body" : "Will get final üëç from @UniqMartin and then üö¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 669
	},
	{
		"id" : 238871169,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-10T13:46:13Z",
		"body" : "> I've addressed your commits and made it faster still for the `--preinstall` case as a result.\r\n\r\nNice work! I left a few relatively minor comments, but I really like how this has evolved.\r\n\r\n(I have a few ideas for how some things could be implemented more neatly, but that's stuff for a follow-up PR rather than a reason to block this. Hopefully I'll find the time to work on this.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 669
	},
	{
		"id" : 238882685,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-10T14:24:12Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 669
	},
	{
		"id" : 238700164,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-09T21:38:50Z",
		"body" : ":+1:\r\n\r\nIf you're feeling generous, I think this could benefit from a test that checks this behavior.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 670
	},
	{
		"id" : 238802402,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T08:40:35Z",
		"body" : "> If you're feeling generous, I think this could benefit from a test that checks this behavior.\r\n\r\nDone.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 670
	},
	{
		"id" : 238854143,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-10T12:40:22Z",
		"body" : ">  Coverage increased (+0.003%) to 57.533%\r\n\r\nThanks! ‚ù§Ô∏è",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 670
	},
	{
		"id" : 238685195,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-09T20:44:35Z",
		"body" : "Cheers @UniqMartin.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 671
	},
	{
		"id" : 238735935,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-10T00:47:37Z",
		"body" : "If you want to open a PR for this, that'd be great! ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 672
	},
	{
		"id" : 239674178,
		"user" : {
			"login" : "mattdipasquale"
		},
		"created_at" : "2016-08-14T13:41:29Z",
		"body" : "Thank you, @dunn & @MikeMcQuaid! :-)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 672
	},
	{
		"id" : 238746351,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-10T02:05:35Z",
		"body" : "It's mentioned in the readme that bottles are hosted by Bintray: https://github.com/Homebrew/brew#sponsors\r\n\r\nWe build the bottles on our Jenkins CI server; they're created for each formula version and `revision`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 673
	},
	{
		"id" : 238785084,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T07:16:13Z",
		"body" : "Nice work @DomT4!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 674
	},
	{
		"id" : 238785171,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T07:16:40Z",
		"body" : "LGTM üëç üö¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 675
	},
	{
		"id" : 238996110,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-10T20:37:54Z",
		"body" : "Now depends on https://github.com/Homebrew/brew/pull/676 to test against properly, but works locally. Rewrote the requirement to use the class logic & added a small requirement test to ensure it finds accurately.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 675
	},
	{
		"id" : 239537662,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-12T19:23:23Z",
		"body" : "One nit then üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 675
	},
	{
		"id" : 239591340,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-13T00:48:45Z",
		"body" : "Pushed the requested change, and tweaked the `test_gpg` test from the prior PR to fix a pesky `rmtree` warning.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 675
	},
	{
		"id" : 238785954,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T07:20:54Z",
		"body" : "A few comments but generally üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 676
	},
	{
		"id" : 238928399,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-10T16:47:17Z",
		"body" : "Pushed changes. Obviously it just gets skipped on CI, but the test does pass:\r\n\r\n```\r\nGpgTest#test_create_test_key = 0.31 s = .\r\n\r\nFinished in 81.197964s, 11.3919 runs/s, 30.0008 assertions/s.\r\n\r\n  1) Skipped:\r\nIntegrationCommandTests#test_bundle [/usr/local/Library/Homebrew/test/test_integration_cmds.rb:42]:\r\nHOMEBREW_TEST_OFFICIAL_CMD_TAPS is not set\r\n\r\n\r\n  2) Skipped:\r\nIntegrationCommandTests#test_services [/usr/local/Library/Homebrew/test/test_integration_cmds.rb:42]:\r\nHOMEBREW_TEST_OFFICIAL_CMD_TAPS is not set\r\n\r\n\r\n  3) Skipped:\r\nIntegrationCommandTests#test_pull [/usr/local/Library/Homebrew/test/test_integration_cmds.rb:765]:\r\nRequires network connection\r\n\r\n\r\n  4) Skipped:\r\nIntegrationCommandTests#test_cask [/usr/local/Library/Homebrew/test/test_integration_cmds.rb:42]:\r\nHOMEBREW_TEST_OFFICIAL_CMD_TAPS is not set\r\n\r\n925 runs, 2436 assertions, 0 failures, 0 errors, 4 skips\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 676
	},
	{
		"id" : 239537374,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-12T19:22:07Z",
		"body" : ":shipit: üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 676
	},
	{
		"id" : 238868288,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-08-10T13:36:09Z",
		"body" : "See @UniqMartin's comment for the reasoning behind this PR: https://github.com/Homebrew/legacy-homebrew/issues/48449#issuecomment-178638401",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 677
	},
	{
		"id" : 238972568,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-08-10T19:12:44Z",
		"body" : "I've updated this PR to add a `:truncate` option to `oh1`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 677
	},
	{
		"id" : 238995757,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T20:36:34Z",
		"body" : "One nit otherwise üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 677
	},
	{
		"id" : 239013116,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-08-10T21:39:31Z",
		"body" : "Fixed the style.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 677
	},
	{
		"id" : 239662672,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-14T08:44:11Z",
		"body" : "Thanks @sjackman!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 677
	},
	{
		"id" : 239681507,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-08-14T16:05:27Z",
		"body" : "Thanks for everyone's feedback, and for merging, Mike. I think this patch is a big improvement to usability when the number of packages that will be installed is very large. It gives the user warning about what's coming up, and that they can probably go for :coffee:.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 677
	},
	{
		"id" : 238884741,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T14:30:24Z",
		"body" : "Please report this to https://github.com/ska-sa/homebrew-tap/issues, thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 678
	},
	{
		"id" : 238899912,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-10T15:16:41Z",
		"body" : ":+1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 679
	},
	{
		"id" : 239663569,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-14T09:08:32Z",
		"body" : ":fireworks: :tada: :confetti_ball: :balloon: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 679
	},
	{
		"id" : 238927390,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-10T16:43:44Z",
		"body" : "@tdsmith Are you currently actively working on this? Can you reference the previous issue in the body and, ideally, summarise some of the existing conversation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 680
	},
	{
		"id" : 239124369,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-11T10:25:27Z",
		"body" : "It could be that you hit a `brew update` bug. Can you try `cd /usr/local; git reset --hard origin/master`, run `brew update` and see if you can reproduce? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 681
	},
	{
		"id" : 239142780,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-11T12:07:35Z",
		"body" : "The warnings are not your fault. That's a side effect of us tightening up the deprecation handling and the way `brew audit` works. It walks the Git recent history of the given formula (to check that a `revision` line has been removed after a version bump) and by doing so also loads older version of the formula (that hadn't been updated to avoid the deprecated functionality yet). This is what is most likely causing you to see these warnings.\r\n\r\nThe warnings should disappear if you run `brew audit` in developer mode, i.e.:\r\n\r\n```console\r\n$ HOMEBREW_DEVELOPER=1 brew audit ros/deps/urdfom\r\n```\r\n\r\nWe haven't figured out yet how to suppress these spurious warnings for users that don't set `HOMEBREW_DEVELOPER=1` (while keeping them enabled when they indeed should be shown).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 681
	},
	{
		"id" : 239144510,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-11T12:16:59Z",
		"body" : "For what it's worth, I think we should probably disable the deprecation of sha1 until it's working better since it seems to be the outlier in terms of causing problems.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 681
	},
	{
		"id" : 239145759,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-11T12:23:31Z",
		"body" : "https://github.com/Homebrew/brew/pull/691.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 681
	},
	{
		"id" : 239148308,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-11T12:36:24Z",
		"body" : "@ilovezfs @UniqMartin Do you have a way to reproduce this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 681
	},
	{
		"id" : 239148622,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-11T12:37:46Z",
		"body" : "brew audit without HOMEBREW_DEVELOPER=1 on anything that has old revisions containing sha1",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 681
	},
	{
		"id" : 239148722,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-11T12:38:11Z",
		"body" : "I can reproduce, will fix.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 681
	},
	{
		"id" : 239209676,
		"user" : {
			"login" : "spaghetti-"
		},
		"created_at" : "2016-08-11T16:10:51Z",
		"body" : "Cheers.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 681
	},
	{
		"id" : 239213886,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-11T16:26:02Z",
		"body" : "Sorry, had to revert that fix as it caused other issues. Will work on a better one, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 681
	},
	{
		"id" : 239512367,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-12T17:42:21Z",
		"body" : "A few nits but generally looking good!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 682
	},
	{
		"id" : 239574007,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-08-12T22:22:44Z",
		"body" : "Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 682
	},
	{
		"id" : 239662696,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-14T08:44:58Z",
		"body" : "Thanks again @eirinikos!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 682
	},
	{
		"id" : 239063741,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-11T03:22:24Z",
		"body" : "_From @MikeMcQuaid on January 3, 2016 18:57_\n\n:+1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 683
	},
	{
		"id" : 239063742,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-11T03:22:24Z",
		"body" : "_From @DomT4 on January 3, 2016 19:1_\n\nNo objections.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 683
	},
	{
		"id" : 239063743,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-11T03:22:24Z",
		"body" : "_From @bfontaine on January 3, 2016 19:59_\n\nWe could maybe set `ENV[\"PYTHONDONTWRITEBYTECODE\"] = \"1\"` to avoid that?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 683
	},
	{
		"id" : 239063744,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-11T03:22:24Z",
		"body" : "Either way; filtering has a small risk of filtering out messages we actually care about and setting `PYTHONDONTWRITEBYTECODE` doesn't. Morally, filtering feels a little better because it doesn't change the behavior of the interpreter for the test, but that seems like an unlikely source of bugs.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 683
	},
	{
		"id" : 239063745,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-11T03:22:25Z",
		"body" : "_From @MikeMcQuaid on January 3, 2016 21:21_\n\n> We could maybe set ENV[\"PYTHONDONTWRITEBYTECODE\"] = \"1\" to avoid that?\r\n\r\n:+1: ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 683
	},
	{
		"id" : 239063746,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-11T03:22:25Z",
		"body" : "_From @MikeMcQuaid on August 10, 2016 9:18_\n\nIf this is still broken: we'll accept PRs for this but we're not actively working on it at this time.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 683
	},
	{
		"id" : 239088711,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-11T07:13:28Z",
		"body" : "Repeating myself from https://github.com/Homebrew/brew/issues/680:\r\n\r\n@tdsmith Are you currently actively working on this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 683
	},
	{
		"id" : 239091510,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-11T07:31:39Z",
		"body" : "Looks good üëç. A few tiny questions/nits but should be good to go soon. Nice work.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 684
	},
	{
		"id" : 239185070,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-11T14:51:27Z",
		"body" : "LGTM üëç, thanks for the changes.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 684
	},
	{
		"id" : 239092698,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-11T07:39:07Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 685
	},
	{
		"id" : 239093380,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-08-11T07:43:17Z",
		"body" : "@xu-cheng I've added the completions for bash and zsh. Bash completions work just fine, however zsh-completions for flags for `upgrade` works strange locally. Even `brew upgrade` cannot complete `--cleanup`. I guess it's something wrong with my zsh because it's really messy, so, if you don't see anything strange in implementation could we merge it then?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 686
	},
	{
		"id" : 239537985,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-12T19:24:53Z",
		"body" : "ZSH completion looks good to me.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 686
	},
	{
		"id" : 239538526,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-12T19:27:12Z",
		"body" : "Looks to me like they are already set? Do you have a reproducible test-case for this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 687
	},
	{
		"id" : 239562063,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-08-12T21:17:45Z",
		"body" : "@MikeMcQuaid for example something like this:\r\n\r\n```\r\n‚ûú vlad:Homebrew$ brew uninstall ack --force                                                                                                                                   master\r\n‚ûú vlad:Homebrew$ brew irb                                                                                                                                                     master\r\n==> Interactive Homebrew Shell\r\nExample commands available with: brew irb --examples\r\n2.0.0-p481 :001 > Tab.for_name(\"ack\").versions\r\n => nil\r\n2.0.0-p481 :002 > Tab.for_name(\"ack\").head_version\r\nNoMethodError: undefined method `[]' for nil:NilClass\r\n        from /usr/local/Library/Homebrew/tab.rb:266:in `head_version'\r\n        from (irb):2\r\n        from /usr/local/Library/Homebrew/brew.rb:87:in `<main>'\r\n2.0.0-p481 :003 > ^D\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 687
	},
	{
		"id" : 239620841,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-13T13:26:35Z",
		"body" : "Thanks @vladshablinsky. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 687
	},
	{
		"id" : 239119714,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-11T10:00:27Z",
		"body" : "@okket Pushed a fix in 985c672bac4dc20d369b451c484eb6553762dbcf. Can you see if that running `brew update` (without any manual `git` commands) correctly updates the taps now? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 688
	},
	{
		"id" : 239121592,
		"user" : {
			"login" : "okket"
		},
		"created_at" : "2016-08-11T10:10:17Z",
		"body" : "I imported the commit into a fresh branch\r\n\r\n```\r\n‚Üí git merge 985c672bac4dc20d369b451c484eb6553762dbcf\r\nUpdating 06fe347..985c672\r\nFast-forward\r\n Library/Homebrew/cmd/outdated.rb |  7 ++++---\r\n Library/Homebrew/cmd/update.sh   | 15 +++++++++------\r\n Library/Homebrew/cmd/upgrade.rb  |  7 ++++---\r\n share/doc/homebrew/brew.1.html   | 14 ++++++++------\r\n share/man/man1/brew.1            |  4 ++--\r\n 5 files changed, 27 insertions(+), 20 deletions(-)\r\n```\r\nand it seems to work:\r\n\r\n```\r\n‚Üí brew update\r\nUpdated 2 taps (caskroom/cask, homebrew/core).\r\n==> Updated Formulae\r\ngor        libphonenumber        micropython        offlineimap\r\n```\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 688
	},
	{
		"id" : 239121697,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-11T10:10:54Z",
		"body" : "Great, thanks. That fixes the problem but now anyone who updated in between will be stuck in a limbo I need to figure out how to get them out of üò≠ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 688
	},
	{
		"id" : 239125396,
		"user" : {
			"login" : "okket"
		},
		"created_at" : "2016-08-11T10:30:56Z",
		"body" : "Great, thanks for the quick fix!\r\n\r\nI guess the problem is that a `brew update` won't even update brew itself without this? I had to `git pull` in `/usr/local/` manually to get homebrew working again on another machine. Or is this unrelated?\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 688
	},
	{
		"id" : 239125584,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-11T10:31:59Z",
		"body" : "> I guess the problem is that a brew update won't even update brew itself without this? I had to git pull in /usr/local/ manually to get homebrew working again on another machine. Or is this unrelated?\r\n\r\nYes, this is the (big) problem. There's no code fix that can address that, it'll need to be just communicated that anyone who updated in that 20 hour period will have to manually intervene as you have :sob:.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 688
	},
	{
		"id" : 242113122,
		"user" : {
			"login" : "proski"
		},
		"created_at" : "2016-08-24T15:45:39Z",
		"body" : "I just thought somebody went on vacation :)\r\n\r\nWould it be possible to put the instructions to get unstuck on brew.sh? I tried the installer. It suggested that I uninstall Homebrew first. I ran the uninstaller as suggested, then the installer, and it looks like I need to reinstall all packages now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 688
	},
	{
		"id" : 242331106,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-25T09:36:19Z",
		"body" : "@proski That's something we'll consider if this keeps cropping up, thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 688
	},
	{
		"id" : 242675405,
		"user" : {
			"login" : "fuzzy76"
		},
		"created_at" : "2016-08-26T09:13:03Z",
		"body" : "I think you need to do something, this one bit me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 688
	},
	{
		"id" : 242675825,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-26T09:14:58Z",
		"body" : "@fuzzy76 I think you need to read this thread and understand that we've done all we can do.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 688
	},
	{
		"id" : 242683487,
		"user" : {
			"login" : "fuzzy76"
		},
		"created_at" : "2016-08-26T09:46:28Z",
		"body" : "I found #706 which explained that you had done all you could do. So yes. :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 688
	},
	{
		"id" : 239141415,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-11T12:00:42Z",
		"body" : "> Is it possible to export which packages are installed on a machine via brew?\r\n\r\n`brew bundle dump` handles this! üéâ ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 690
	},
	{
		"id" : 239141889,
		"user" : {
			"login" : "voxsim"
		},
		"created_at" : "2016-08-11T12:03:01Z",
		"body" : "thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 690
	},
	{
		"id" : 239144920,
		"user" : {
			"login" : "voxsim"
		},
		"created_at" : "2016-08-11T12:19:09Z",
		"body" : "@MikeMcQuaid I generated the file but it misses every version, is it possible to specify one in some way?\r\n\r\nI understand this note:\r\n```\r\nHomebrew does not support installing specific versions of a library, only the most recent one, so there is no good mechanism for storing installed versions in a .lock file.\r\n\r\nIf your software needs specific versions then perhaps you'll want to look at using Vagrant to better match your development and production environments.\r\n```\r\n\r\nBut the problem arises just from vagrant that has an issue in the last version and I am running the last version of homebrew.\r\n\r\nMaybe I should open an issue in https://github.com/Homebrew/homebrew-bundle, sorry to bother you.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 690
	},
	{
		"id" : 239147191,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-11T12:30:42Z",
		"body" : "> But the problem arises just from vagrant that has an issue in the last version and I am running the last version of homebrew which supports the versions if I understand correctly.\r\n\r\nYour best bet in that case is to consider [creating your own tap](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/How-to-Create-and-Maintain-a-Tap.md#how-to-create-and-maintain-a-tap) with an old version of `vagrant`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 690
	},
	{
		"id" : 239153931,
		"user" : {
			"login" : "voxsim"
		},
		"created_at" : "2016-08-11T13:01:39Z",
		"body" : "ok thanks for the help",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 690
	},
	{
		"id" : 239159846,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-11T13:25:51Z",
		"body" : "@MikeMcQuaid yup still errors appropriately if current formula file has sha1, but otherwise shuts up. :shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 692
	},
	{
		"id" : 239162644,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-11T13:36:56Z",
		"body" : ":+1: This was way too simple of a fix ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 692
	},
	{
		"id" : 239163245,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-11T13:39:18Z",
		"body" : "Probably not the best for performance to be raise raise raise raise raise raising but it'll do for now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 692
	},
	{
		"id" : 239189310,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-11T15:04:47Z",
		"body" : "What does `brew config`, `which git` and `git --version` say? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 694
	},
	{
		"id" : 239190166,
		"user" : {
			"login" : "samdmarshall"
		},
		"created_at" : "2016-08-11T15:07:37Z",
		"body" : "```\r\n $ brew config\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew\r\nHEAD: 44a80e693a0dc0b28b4814b2897a9cc1cdd544c2\r\nLast commit: never\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: b163b0d8271500557664422d6fdc3054d0ff7d31\r\nCore tap last commit: 14 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: quad-core 64-bit skylake\r\nHomebrew Ruby: 2.0.0-p648\r\nClang: 7.3 build 703\r\nGit: 2.9.2 => /usr/local/bin/git\r\nPerl: /usr/bin/perl\r\nPython: /usr/bin/python\r\nRuby: /usr/bin/ruby => /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby\r\nJava: N/A\r\nOS X: 10.11.6-x86_64\r\nXcode: 7.3.1\r\nCLT: N/A\r\nX11: N/A\r\n```\r\n\r\n```\r\n$ which git\r\n/usr/local/bin/git\r\n```\r\n\r\n```\r\n$ git --version\r\ngit version 2.9.2\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 694
	},
	{
		"id" : 239540473,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-12T19:36:10Z",
		"body" : "Can you see what `brew doctor --debug` prints?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 694
	},
	{
		"id" : 239680361,
		"user" : {
			"login" : "samdmarshall"
		},
		"created_at" : "2016-08-14T15:43:08Z",
		"body" : "I included that in my initial post.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 694
	},
	{
		"id" : 239680439,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-14T15:44:45Z",
		"body" : "My apologies, I can't read üòÄ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 694
	},
	{
		"id" : 240062896,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T10:17:32Z",
		"body" : "@samdmarshall I've pushed something to improve `brew doctor --debug` output in 984ed83 so can I see your new `brew doctor --debug`? Also, can I see the output of `brew tap` and `find /usr/local -name HEAD`? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 694
	},
	{
		"id" : 240094153,
		"user" : {
			"login" : "samdmarshall"
		},
		"created_at" : "2016-08-16T13:00:57Z",
		"body" : "<details>\r\n<summary>`brew doctor --debug`</summary>\r\n$ brew doctor --debug\r\nChecking check_DYLD_vars\r\nChecking check_access_Frameworks\r\nChecking check_access_bin\r\nChecking check_access_cache\r\nChecking check_access_cellar\r\nChecking check_access_etc\r\nChecking check_access_homebrew_repository\r\nChecking check_access_include\r\nChecking check_access_lib\r\nChecking check_access_lib_pkgconfig\r\nChecking check_access_logs\r\nChecking check_access_prefix_opt\r\nChecking check_access_sbin\r\nChecking check_access_share\r\nChecking check_access_share_locale\r\nChecking check_access_share_man\r\nChecking check_access_site_packages\r\nChecking check_access_usr_local\r\nChecking check_access_var\r\nChecking check_clt_up_to_date\r\nChecking check_filesystem_case_sensitive\r\nChecking check_for_anaconda\r\nChecking check_for_bad_curl\r\nChecking check_for_bad_install_name_tool\r\nChecking check_for_bad_python_symlink\r\nChecking check_for_beta_xquartz\r\nChecking check_for_config_scripts\r\nChecking check_for_enthought_python\r\nChecking check_for_external_cmd_name_conflict\r\nChecking check_for_gettext\r\nChecking check_for_git\r\nChecking check_for_iconv\r\nChecking check_for_installed_developer_tools\r\nChecking check_for_latest_xquartz\r\nChecking check_for_library_python\r\nChecking check_for_multiple_volumes\r\nChecking check_for_non_prefixed_coreutils\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::FormulaLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/coreutils.rb\r\nChecking check_for_non_prefixed_findutils\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::FormulaLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/findutils.rb\r\nChecking check_for_old_env_vars\r\nChecking check_for_old_homebrew_share_python_in_path\r\nChecking check_for_osx_gcc_installer\r\nChecking check_for_other_frameworks\r\nChecking check_for_other_package_managers\r\nChecking check_for_prerelease_xcode\r\nChecking check_for_pth_support\r\nChecking check_for_pydistutils_cfg_in_home\r\nChecking check_for_stray_developer_directory\r\nChecking check_for_stray_dylibs\r\nPlease note that these warnings are just used to help the Homebrew maintainers\r\nwith debugging if you file an issue. If everything you use Homebrew for is\r\nworking fine: please don't worry and just ignore them. Thanks!\r\n\r\nWarning: Unbrewed dylibs were found in /usr/local/lib.\r\nIf you didn't put them there on purpose they could cause problems when\r\nbuilding Homebrew formulae, and may need to be deleted.\r\n\r\nUnexpected dylibs:\r\n    /usr/local/lib/libusb-1.0.0.dylib\r\nChecking check_for_stray_headers\r\nChecking check_for_stray_las\r\nChecking check_for_stray_pcs\r\nChecking check_for_stray_static_libs\r\nChecking check_for_symlinked_cellar\r\nChecking check_for_unlinked_but_not_keg_only\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/gettext.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/libffi.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/openssl.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/readline.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/sqlite.rb\r\nChecking check_for_unsupported_curl_vars\r\nChecking check_for_unsupported_osx\r\nChecking check_git_newline_settings\r\nChecking check_git_origin\r\nChecking check_git_status\r\nChecking check_git_version\r\nChecking check_homebrew_prefix\r\nChecking check_path_for_trailing_slashes\r\nChecking check_ruby_version\r\nChecking check_tmpdir\r\nChecking check_tmpdir_sticky_bit\r\nChecking check_user_curlrc\r\nChecking check_user_path_1\r\nChecking check_user_path_2\r\nChecking check_user_path_3\r\nChecking check_which_pkg_config\r\nChecking check_xcode_license_approved\r\nChecking check_xcode_prefix\r\nChecking check_xcode_prefix_exists\r\nChecking check_xcode_select_path\r\nChecking check_xcode_up_to_date\r\nChecking check_for_broken_symlinks\r\nChecking check_missing_deps\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/samdmarshall/homebrew-formulae/aosd.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/autoconf.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/automake.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/clang-format.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/cloc.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/cmake.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/colordiff.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/cppcheck.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/diff-so-fancy.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/ffmpeg.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/fish.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/fzf.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/gdbm.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/geoip.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/git.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/glib.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/goaccess.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/samdmarshall/homebrew-formulae/hotkeyd.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/httpie.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/samdmarshall/homebrew-formulae/iosconsole.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/jasonmp85/homebrew-iwyu/iwyu.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/keybase.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/lame.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/lynx.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/mercurial.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/ngrep.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/ninja.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/nmap.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/pandoc.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/pcre.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/pcre2.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/pkg-config.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/samdmarshall/homebrew-formulae/pyconfig.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/pyenv.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/python3.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/thefuck.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/wget.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/x264.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/samdmarshall/homebrew-formulae/xcrunner.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/xvid.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/xz.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::TapLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/youtube-dl.rb\r\n/usr/local/Library/Homebrew/brew.rb (Formulary::FormulaLoader): loading /usr/local/Library/Taps/homebrew/homebrew-core/Formula/python.rb\r\n\r\nWarning: Some installed formula are missing dependencies.\r\nYou should `brew install` the missing dependencies:\r\n  brew install python\r\n\r\nRun `brew missing` for more details.\r\nChecking check_for_outdated_homebrew\r\nfatal: ambiguous argument 'HEAD': both revision and filename\r\nUse '--' to separate paths from revisions, like this:\r\n'git <command> [<revision>...] -- [<file>...]'\r\nChecking check_for_linked_keg_only_brews\r\n</details>\r\n\r\n<details>\r\n<summary>`brew tap`</summary>\r\n$ brew tap\r\ncaskroom/cask\r\nhomebrew/core\r\njasonmp85/iwyu\r\nmistydemeo/formulae\r\nsamdmarshall/formulae\r\n</details>\r\n\r\n<details>\r\n<summary>`find /usr/local -name HEAD`</summary>\r\n$ find /usr/local/ -name HEAD\r\n/usr/local//.git/HEAD\r\n/usr/local//.git/logs/HEAD\r\n/usr/local//HEAD\r\n/usr/local//Library/Taps/caskroom/homebrew-cask/.git/HEAD\r\n/usr/local//Library/Taps/caskroom/homebrew-cask/.git/logs/HEAD\r\n/usr/local//Library/Taps/caskroom/homebrew-cask/.git/logs/refs/remotes/origin/HEAD\r\n/usr/local//Library/Taps/caskroom/homebrew-cask/.git/refs/remotes/origin/HEAD\r\n/usr/local//Library/Taps/homebrew/homebrew-core/.git/HEAD\r\n/usr/local//Library/Taps/homebrew/homebrew-core/.git/logs/HEAD\r\n/usr/local//Library/Taps/homebrew/homebrew-core/.git/logs/refs/remotes/origin/HEAD\r\n/usr/local//Library/Taps/homebrew/homebrew-core/.git/refs/remotes/origin/HEAD\r\n/usr/local//Library/Taps/jasonmp85/homebrew-iwyu/.git/HEAD\r\n/usr/local//Library/Taps/jasonmp85/homebrew-iwyu/.git/logs/HEAD\r\n/usr/local//Library/Taps/jasonmp85/homebrew-iwyu/.git/logs/refs/remotes/origin/HEAD\r\n/usr/local//Library/Taps/jasonmp85/homebrew-iwyu/.git/refs/remotes/origin/HEAD\r\n/usr/local//Library/Taps/mistydemeo/homebrew-formulae/.git/HEAD\r\n/usr/local//Library/Taps/mistydemeo/homebrew-formulae/.git/logs/HEAD\r\n/usr/local//Library/Taps/mistydemeo/homebrew-formulae/.git/logs/refs/remotes/origin/HEAD\r\n/usr/local//Library/Taps/mistydemeo/homebrew-formulae/.git/refs/remotes/origin/HEAD\r\n/usr/local//Library/Taps/samdmarshall/homebrew-formulae/.git/HEAD\r\n/usr/local//Library/Taps/samdmarshall/homebrew-formulae/.git/logs/HEAD\r\n/usr/local//Library/Taps/samdmarshall/homebrew-formulae/.git/logs/refs/remotes/origin/HEAD\r\n/usr/local//Library/Taps/samdmarshall/homebrew-formulae/.git/refs/remotes/origin/HEAD\r\n</details>",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 694
	},
	{
		"id" : 240096653,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T13:11:36Z",
		"body" : "> /usr/local//HEAD\r\n\r\nI'll still make a proper fix for this but I'm pretty sure deleting that file will provide a workaround for this for now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 694
	},
	{
		"id" : 240097021,
		"user" : {
			"login" : "samdmarshall"
		},
		"created_at" : "2016-08-16T13:13:05Z",
		"body" : "Yup, that seems to have worked!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 694
	},
	{
		"id" : 239542720,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-12T19:46:37Z",
		"body" : "> brew tap homebrew/versions --full\r\n> cd /usr/local/Library/Taps/homebrew/homebrew-versions\r\n> git checkout b74a9a0088cdabf900d01e024a797b4134835347\r\n> brew update\r\n\r\nThat doesn't reproduce for me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 695
	},
	{
		"id" : 239553753,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-12T20:37:48Z",
		"body" : "Interesting, I can't reproduce it either now. I tried both separately on my box & a VM, so it definitely seemed to be a real thing before, but I don't spot anything in the core that seems relevant to the behaviour reverting to expected nature.\r\n\r\nGuess I'll close & see if it pops back up in future.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 695
	},
	{
		"id" : 239203333,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-11T15:50:22Z",
		"body" : "The broken aspect that causes the later two incorrect empty outputs is `revision_map = fv.revision_map(\"origin/master\")`.\r\n\r\nThat should be returning:\r\n```\r\n=> {#<Version::FromURL:0x007fa1b8891028 @version=\"2.0.4\">=>[2, 2, 2, 1, 1, 1, 0, 0, 0, 0], #<Version::FromURL:0x007fa1b8890a38 @version=\"2.1.0-beta2\">=>[2, 2, 2, 1], #<Version:0x007fa1b88de058 @version=\"2.1\">=>[1, 1, 0, 0, 0, 0]}\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 696
	},
	{
		"id" : 239205220,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-11T15:56:13Z",
		"body" : "I think you're looking for https://github.com/caskroom/homebrew-cask. We don't ship a `macfusion` formula as far as I can see, but the Cask does ship a `macfusion` [cask](https://github.com/caskroom/homebrew-cask/blob/1bfdb2a07c39c02b0a81e5a45b60e1c649ed04e0/Casks/macfusion.rb), which is the 2.0.4 version.\r\n\r\nPlease report this to them. Thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 697
	},
	{
		"id" : 239209192,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-11T16:09:14Z",
		"body" : "Thanks. I wasn't sure if it made sense to completely revert it or if doing so would cause more unwelcome problems, hence the ping.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 698
	},
	{
		"id" : 239213952,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-11T16:26:15Z",
		"body" : "@DomT4 no worries, thanks for ping.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 698
	},
	{
		"id" : 248556395,
		"user" : {
			"login" : "michaeljpeake"
		},
		"created_at" : "2016-09-21T09:17:09Z",
		"body" : "Yay!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 700
	},
	{
		"id" : 249419803,
		"user" : {
			"login" : "kiding"
		},
		"created_at" : "2016-09-25T12:42:41Z",
		"body" : "This solution solved my problem where `$ brew update` kept saying `Already up-to-date.` when it‚Äôs clearly not after upgrading to macOS Sierra.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 700
	},
	{
		"id" : 239541280,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-12T19:39:48Z",
		"body" : "This is something we're going to improve in future as we bring Homebrew and Homebrew Cask closer together but at the moment it's intentional, sorry!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 701
	},
	{
		"id" : 239683326,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-14T16:41:43Z",
		"body" : "Sorry for the delay. A belated üëç, can't reproduce the original problem we fell into the other day.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 702
	},
	{
		"id" : 239664158,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-14T09:25:22Z",
		"body" : "@MikeMcQuaid yes it looks fixed. I'll let you know if I see it happen again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 703
	},
	{
		"id" : 240054942,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T09:40:43Z",
		"body" : "Thanks again @eirinikos!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 704
	},
	{
		"id" : 239602869,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-13T05:10:20Z",
		"body" : "You got caught in a nasty update bug; the only fix is to manually update the git repository: `cd $(brew --repo); git fetch; git reset --hard origin/master`.\r\n\r\nSorry about that!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 705
	},
	{
		"id" : 239602941,
		"user" : {
			"login" : "ajlowndes"
		},
		"created_at" : "2016-08-13T05:13:02Z",
		"body" : "that worked - thank you!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 705
	},
	{
		"id" : 240448114,
		"user" : {
			"login" : "philcook"
		},
		"created_at" : "2016-08-17T15:25:41Z",
		"body" : "I also got caught out by this, I believe when I upgraded to OSX 10.11.6. This is the only thing I can think.\r\n\r\nBut it appears that @dunn suggestion fixed this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 705
	},
	{
		"id" : 246532795,
		"user" : {
			"login" : "leesmith"
		},
		"created_at" : "2016-09-13T00:00:01Z",
		"body" : "Got bit by this too. Thanks for the solution!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 705
	},
	{
		"id" : 239608137,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-13T07:42:08Z",
		"body" : "You hit a bug unfortunately. The fix is `cd $(brew --repo); git fetch; git reset --hard origin/master; brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 706
	},
	{
		"id" : 239609026,
		"user" : {
			"login" : "elpres"
		},
		"created_at" : "2016-08-13T08:07:26Z",
		"body" : "Great, thank you very much!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 706
	},
	{
		"id" : 239976646,
		"user" : {
			"login" : "eccstartup"
		},
		"created_at" : "2016-08-16T01:21:09Z",
		"body" : "Great!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 706
	},
	{
		"id" : 240168391,
		"user" : {
			"login" : "ska80"
		},
		"created_at" : "2016-08-16T17:04:21Z",
		"body" : "Thanks! I had the same problem.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 706
	},
	{
		"id" : 240329164,
		"user" : {
			"login" : "davidfokkema"
		},
		"created_at" : "2016-08-17T06:57:16Z",
		"body" : "I had it too. How  many people have this problem and are unaware of the fix? I had to scroll down the list of open issues, and then the list of closed issues. Maybe there is a better place?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 706
	},
	{
		"id" : 240332256,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T07:15:04Z",
		"body" : "It's in the README (https://github.com/Homebrew/brew#update-bug), ISSUE_TEMPLATE (https://github.com/Homebrew/brew/blob/master/.github/ISSUE_TEMPLATE.md) and was posted on Twitter.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 706
	},
	{
		"id" : 240335425,
		"user" : {
			"login" : "davidfokkema"
		},
		"created_at" : "2016-08-17T07:31:45Z",
		"body" : "How did I miss all that? I'll shut up now. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 706
	},
	{
		"id" : 242613951,
		"user" : {
			"login" : "aren55555"
		},
		"created_at" : "2016-08-26T02:56:44Z",
		"body" : "@MikeMcQuaid perhaps adding a `brew reset` command that executed `cd $(brew --repo); git fetch; git reset --hard origin/master; brew update` would help folks have a recourse path if an issue like this ever happened again",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 706
	},
	{
		"id" : 242670343,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-26T08:50:07Z",
		"body" : "@aren55555 We have that now pretty much in `brew update --force` which I added almost immediately afterwards.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 706
	},
	{
		"id" : 242683672,
		"user" : {
			"login" : "fuzzy76"
		},
		"created_at" : "2016-08-26T09:47:05Z",
		"body" : "I guess this is really a duplicate of #688 ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 706
	},
	{
		"id" : 242715386,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-26T11:57:47Z",
		"body" : "Yes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 706
	},
	{
		"id" : 239612904,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-13T09:52:33Z",
		"body" : "Example usage:\r\n```\r\nbrew pull --bottle --tap=homebrew/versions https://bot.brew.sh/job/Homebrew%20Testing/1035/\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 707
	},
	{
		"id" : 239625115,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-13T15:02:16Z",
		"body" : "> It appears to have installed a binary gpg1 instead.\r\n\r\nYeah, this is intentional. Debian is moving to this system very soon as well, and likely other Linux distros will follow as a consequence. Almost nothing cannot use at least 2.0.x of GnuPG now & it's significantly better supported, so people are trying to gently nudge `gpg1` out of general usage.\r\n\r\n> However, this does not execute:\r\n\r\nThis looks specific to your local setup rather than a global issue. I'd try `brew reinstall libusb-compat`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239625192,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-13T15:04:01Z",
		"body" : "Oh, interesting. I see what may have happened here, bear with me a few minutes. I suspect because it was part of a wider PR it had access to a dependency it didn't have access to before & has decided to sniff it out of the environment.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239625807,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-13T15:17:30Z",
		"body" : "Will be fixed by https://github.com/Homebrew/homebrew-core/pull/3856. Thanks for reporting this!\r\n\r\nI can only presume our `gnupg` formula has never gone through the same build as our `libusb-compat` formula before now, which is impressive.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239626416,
		"user" : {
			"login" : "cleishm"
		},
		"created_at" : "2016-08-13T15:30:51Z",
		"body" : "Hi @DomT4,\r\n\r\nIs there any way to warn users of this breaking change, or keep the `gpg` alias if gpg2 isn't installed?\r\n\r\nThis broke my whole dev tool chain, with no warning, so it's likely going to be a common issue.\r\n\r\nCheers,\r\nChris",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239627010,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-13T15:42:14Z",
		"body" : "There's notice of the change in the `gnupg` caveats, which will be printed on upgrade:\r\n```\r\n==> Caveats\r\nAll commands have been installed with the suffix '1'.\r\n\r\nIf you really need to use these commands with their normal names, you\r\ncan add a \"gpgbin\" directory to your PATH from your ~/.zshrc like:\r\n\r\n    PATH=\"/usr/local/opt/gnupg/libexec/gpgbin:$PATH\"\r\n\r\nNote that doing so may interfere with GPG-using formulae installed via\r\nHomebrew.\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239627743,
		"user" : {
			"login" : "cleishm"
		},
		"created_at" : "2016-08-13T15:56:22Z",
		"body" : "If that message was displayed during upgrade, I missed it!\r\n\r\nHave you considered perhaps making the `gnupg` package install `gnupg2`? And then having a legacy `gnupg1` package for those who really do care. For my purposes, everything works ok now that I've installed `gnupg2`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239628607,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-13T16:13:09Z",
		"body" : "> If that message was displayed during upgrade, I missed it!\r\n\r\nQuite easy to do, sadly. We've come to learn most users either involuntarily or deliberately skip over the `caveats`, but there's not really a better way to inform people of next steps or changes on a case-by-case basis üòï.\r\n\r\nWe're trying to cut down on the amount of less important caveats in the hope people come to see it less as noise & more as something worth glancing over.\r\n\r\n> Have you considered perhaps making the gnupg package install gnupg2? And then having a legacy gnupg1 package for those who really do care.\r\n\r\nThis is very likely where things are going, but at the moment when we rename things we can't repurpose the old name.\r\n\r\nCurrently, when we rename `gnupg` to `gnupg1` for example, on the next `brew update` people are nudged `brew migrate <formula>`, which for compatibility's sake leaves a symlink of the old name pointing to the new name:\r\n\r\n```\r\n/usr/local/opt/polarssl -> ../Cellar/mbedtls/2.1.0\r\n```\r\nThis means things don't suddenly break for external taps or upstream projects that have come to rely on being able to check `$(brew --prefix)/opt/polarssl`, etc, but does mean we can't immediately steal the old name for another formula.\r\n\r\nIt's a fun balance between optimising for our preferred outcome & optimising for not wildly breaking external taps or external projects that use or lean on `brew` on OS X/macOS.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239675217,
		"user" : {
			"login" : "ahmedelgabri"
		},
		"created_at" : "2016-08-14T14:02:42Z",
		"body" : "> Quite easy to do, sadly. We've come to learn most users either involuntarily or deliberately skip over the caveats, but there's not really a better way to inform people of next steps or changes on a case-by-case basis üòï.\r\n\r\nI missed it too & that's why I'm here üôÇ, I agree that it's very easy to miss it especially if you upgrading/installing a couple of packages. So why not color it, or add characters around it like for example doing this\r\n\r\n```\r\n====================================================================\r\n==> Caveats\r\n==> All commands have been installed with the suffix '1'.\r\n==>\r\n==> If you really need to use these commands with their normal names, you\r\n==> can add a \"gpgbin\" directory to your PATH from your ~/.zshrc like:\r\n==>\r\n==>    PATH=\"/usr/local/opt/gnupg/libexec/gpgbin:$PATH\"\r\n==>\r\n==> Note that doing so may interfere with GPG-using formulae installed via\r\n==> Homebrew.\r\n====================================================================\r\n```\r\nor even both. Color & characters, this way it can pop up a bit?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239675914,
		"user" : {
			"login" : "cleishm"
		},
		"created_at" : "2016-08-14T14:17:10Z",
		"body" : "You might also want to state more clearly that \"this is a *breaking upgrade to gnupg*, which renames the gpg command line tool as gpg1\". Also suggest users consider installing gnupg2 to resolve the issue.\r\n\r\nThere's still the problem of new users installing `gnupg`, which is the obvious package to install if you want to use gpg, and then being confused by the lack of a gpg command line tool.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239680460,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-14T15:45:11Z",
		"body" : "@DomT4 Is it maybe worth using `keg_only` here?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239681046,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-14T15:56:59Z",
		"body" : "> So why not color it\r\n\r\nColour doesn't work well universally. We use bold in various places, for example, but because of the theme in my terminal (classic bright green on black) bolding barely shows up. Same sort of problem with colour. Also issues around colour-blindness making certain colours look different or less distinguishable, etc.\r\n\r\n> & characters\r\n\r\nI have less of an issue with drawing a band around a caveat output, but I'm unsure how much of a difference it would make.\r\n\r\n> Also suggest users consider installing gnupg2 to resolve the issue.\r\n\r\nThis will have been done already for anyone who installed anything else in `homebrew/core` that had a `:gpg` dependency. We forced a pretty broad reinstallation that will have carried `gnupg2` with it.\r\n\r\n> You might also want to state more clearly\r\n\r\nI agree the caveats could be clearer, I'll commit something shortly.\r\n\r\n> Is it maybe worth using keg_only here?\r\n\r\nI don't think so in this case.\r\n\r\nThis change [is coming](https://debian-administration.org/users/dkg/weblog/116) in Debian _(actually, Debian's change is even less sympathetic to end users than we are, they've outright said they won't offer a semi-supported way to keep `gpg` pointing to 1.x at all)_, and likely others will follow, but being the first to do something inevitably leads to some reaction. Whilst this may seem hostile to some at this point it's going to become the norm.\r\n\r\nIf we want to really shove this change onto people hard we could bump the `gnupg` formula revision & add a `depends_on :gpg` line, which is of course an outright lie, but means every existing `gnupg` user who isn't using anything else in `homebrew/core` that `depends_on :gpg` would have their `gpg` symlink replaced now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239681912,
		"user" : {
			"login" : "cleishm"
		},
		"created_at" : "2016-08-14T16:13:34Z",
		"body" : "After reading that Debian announcement, it seems they are going with the strategy of making the `gnupg` binary package install 2.0 (stable) version. That's pretty sympathetic, as it means the only people who'll notice are those who explicitly depended on the version 1 (classic) semantics - which is probably few.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239682057,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-14T16:16:01Z",
		"body" : "Install 2.1, actually, I believe, with `gnupg` moving to the `gnupg1` name. As I stated above, we can't steal old names currently, otherwise we'd be doing something similar.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239683357,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-14T16:42:10Z",
		"body" : "> As I stated above, we can't steal old names currently, otherwise we'd be doing something similar.\r\n\r\nGiven that I think our strategy should perhaps be different. `keg_only` feels to us like a more typical solution for soft-deprecations like this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239684406,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-14T17:03:46Z",
		"body" : "`keg_only` also means anything with a `gnupg` dependency needs to be env scripted forevermore, as well as making anyone who ever needs to call it on a command line use `/usr/local/opt/gnupg/bin/gpg`. I'm not sure that's any less hostile than simply shunting over the executable name.\r\n\r\nWe're at least following a Debian-esque path on this, rather than charting our own unique course, which long-term is a less heavy burden on both maintainers & end users. Either way we approach this is going to be in some ways user-hostile, breaking changes are.\r\n\r\nI'll file a PR with some tweaks to the existing mechanism, but I think we've cushioned this pretty significantly already & the problem is less the change and more Homebrew's long-term problem around caveats being widely ignored/passed over & our relatively limited ways to communicate _any_ changes to end users who don't want to flick through the commit log.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239787658,
		"user" : {
			"login" : "SimenB"
		},
		"created_at" : "2016-08-15T12:10:53Z",
		"body" : "Git commit signing broke for me after this, but a quick `git config --global gpg.program gpg1` fixed it. ATM I only use Mac, but might mess up if I go back to Linux in the future.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239896713,
		"user" : {
			"login" : "diclophis"
		},
		"created_at" : "2016-08-15T19:05:24Z",
		"body" : "Thanks for letting everyone know in the mailing list about this breaking change...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239899894,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-15T19:15:31Z",
		"body" : "@SimenB Unless you specifically need GnuPG 1.x for the older crypto, we (and upstream) pretty strongly recommend using `gnupg2`, which contains the plain executables.\r\n\r\n> Thanks for letting everyone know in the mailing list about this breaking change...\r\n\r\n@diclophis Thanks for understanding that Homebrew is extremely time consuming & a tiny, tiny, tiny amount of active users bother to check the mailing list or Twitter from our prior experiences & therefore may not be the highest priority.\r\n\r\nAppreciate your constructive & carefully considered feedback.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239904675,
		"user" : {
			"login" : "cleishm"
		},
		"created_at" : "2016-08-15T19:34:59Z",
		"body" : "I do have a question about your comment \"Currently, when we rename gnupg to gnupg1 for example, on the next brew update people are nudged brew migrate <formula>, which for compatibility's sake leaves a symlink of the old name pointing to the new name\".\r\n\r\nWhy do you need to rename `gnupg` to `gnupg1`? What would happen if you updated the formula in `gnupg` to install gnupg version 2, and added a new formula for `gnupg1`? Although I don't know what you'd do with the existing `gnupg2` formula, as you'd want to make that an alias.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 243799474,
		"user" : {
			"login" : "thewoolleyman"
		},
		"created_at" : "2016-08-31T15:21:36Z",
		"body" : "OK, thanks, I'll try to dig into it more here to reproduce it on some different machines than our image.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 708
	},
	{
		"id" : 239635429,
		"user" : {
			"login" : "jramnani"
		},
		"created_at" : "2016-08-13T18:41:37Z",
		"body" : "Looks like this issue has been reported in homebrew-cask as [#23757](https://github.com/caskroom/homebrew-cask/issues/23757).\r\n\r\nI'll close this ticket at a dupe, then.  My apologies.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 709
	},
	{
		"id" : 239701273,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-14T22:18:17Z",
		"body" : "If we document it, it's part of our \"public API\"; I'm not 100% convinced this is a feature :P",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 710
	},
	{
		"id" : 239741056,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-15T07:03:07Z",
		"body" : "It's not necessarily part of our public API, I don't think everything in the manpage is. Our API is the command-line `stdin`, `stdout` and the Formula API. Given how long this has been done and there's no outstanding bugs based on the current implementation and it has been the source of confusion for at least one person: it's worth documenting.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 710
	},
	{
		"id" : 239680983,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-14T15:55:45Z",
		"body" : "Can you elaborate on why this is a problem and what formulae (if any) it's currently negatively affecting? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 712
	},
	{
		"id" : 239686771,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-14T17:51:20Z",
		"body" : "The way I discovered this was I was trying to test macvim against a pyenv python3 with Homebrew python3 installed. Even though the pyenv python3 was first in PATH, `--with-python3` (which triggers a `Python3Requirement`) ended up building against the Homebrew python3.\r\n\r\nWe sometimes describe the behavior of the `PythonRequirement`s as \"building against the first python in PATH,\" which is not exactly the observed behavior.\r\n\r\nWe could wontfix as a documentation bug; I'd prefer that we finally fully-bake an API for adding paths to superenv environments as the result of a satisfy operation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 712
	},
	{
		"id" : 239686794,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-14T17:51:53Z",
		"body" : "(Sorry, filed this on a plane, didn't want to forget about it)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 712
	},
	{
		"id" : 239693865,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-14T20:07:43Z",
		"body" : "> Even though the pyenv python3 was first in PATH, --with-python3 (which triggers a Python3Requirement) ended up building against the Homebrew python3.\r\n\r\nI see. Makes sense to tweak this (but obviously will need tested with a bunch of other things as this code is prone to üí•).\r\n\r\n> I'd prefer that we finally fully-bake an API for adding paths to superenv environments as the result of a satisfy operation.\r\n\r\nSomething beyond Requirements? Feels like that may be overkill.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 712
	},
	{
		"id" : 241218560,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-20T19:19:50Z",
		"body" : "@tdsmith I think this may work:\r\n```\r\ndiff --git a/Library/Homebrew/build.rb b/Library/Homebrew/build.rb\r\nindex 8915e94..22b1dd9 100644\r\n--- a/Library/Homebrew/build.rb\r\n+++ b/Library/Homebrew/build.rb\r\n@@ -49,7 +49,7 @@ class Build\r\n         Requirement.prune\r\n       elsif req.build? && dependent != formula\r\n         Requirement.prune\r\n-      elsif req.satisfied? && req.default_formula? && (dep = req.to_dependency).installed?\r\n+      elsif req.satisfied? && req.default_formula? && req.uses_default? && (dep = req.to_dependency).installed?\r\n         deps << dep\r\n         Requirement.prune\r\n       end\r\ndiff --git a/Library/Homebrew/requirement.rb b/Library/Homebrew/requirement.rb\r\nindex 7a40d41..f653b00 100644\r\n--- a/Library/Homebrew/requirement.rb\r\n+++ b/Library/Homebrew/requirement.rb\r\n@@ -56,9 +56,17 @@ class Requirement\r\n   def satisfied?\r\n     result = self.class.satisfy.yielder { |p| instance_eval(&p) }\r\n     @satisfied_result = result\r\n+    if default_formula? && Pathname === result\r\n+      installed_prefix = Formula[default_formula].installed_prefix\r\n+      @uses_default = result.realpath.to_s.include? installed_prefix\r\n+    end\r\n     !!result\r\n   end\r\n \r\n+  def uses_default?\r\n+    @uses_default\r\n+  end\r\n+\r\n   # Overriding #fatal? is deprecated.\r\n   # Pass a boolean to the fatal DSL method instead.\r\n   def fatal?\r\ndiff --git a/Library/Homebrew/requirements/python_requirement.rb b/Library/Homebrew/requirements/python_requirement.rb\r\nindex 2800f52..7948f4c 100644\r\n--- a/Library/Homebrew/requirements/python_requirement.rb\r\n+++ b/Library/Homebrew/requirements/python_requirement.rb\r\n@@ -11,7 +11,7 @@ class PythonRequirement < Requirement\r\n     version = python_short_version\r\n     next unless version\r\n     # Always use Python 2.7 for consistency on older versions of OSX.\r\n-    version == Version.create(\"2.7\")\r\n+    version == Version.create(\"2.7\") ? python : false\r\n   end\r\n \r\n   env do\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 712
	},
	{
		"id" : 239684621,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-14T17:07:50Z",
		"body" : "üëç x üíØ x üíØ once CI is a happy happy robot.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 713
	},
	{
		"id" : 239724469,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-08-15T03:51:27Z",
		"body" : "For those looking for further background reading on the Sandbox, I found https://github.com/Homebrew/legacy-homebrew/issues/37552 to be helpful.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 713
	},
	{
		"id" : 239745096,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-08-15T07:36:45Z",
		"body" : "üòª",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 713
	},
	{
		"id" : 239743342,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-15T07:22:30Z",
		"body" : "> My output is mostly the same as the mentioned issue and I imagine I can fix with the same solution. However it is clearly not a \"singular event\" as described in that issue. I will refrain from fixing it for a few days in case people want me to test things that might help them figure out the root cause. There was some interest and curiosity in finding out how it happened.\r\n\r\nhttps://github.com/Homebrew/brew/pull/591 should stop it recurring so I think it's worth just manually fixing for now and then filing another issue if it crops up again after https://github.com/Homebrew/brew/pull/591 being merged. How's that sound?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 714
	},
	{
		"id" : 239833740,
		"user" : {
			"login" : "nickeb96"
		},
		"created_at" : "2016-08-15T15:31:23Z",
		"body" : "I have fixed it and it is no longer showing duplicates and if it happens again I will open a new issue. Thanks",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 714
	},
	{
		"id" : 239732953,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-08-15T05:41:11Z",
		"body" : "Do you have `PYTHONPATH` set? Python 3 uses it too, so it would see your miniconda Python 2 site-packages if so.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 715
	},
	{
		"id" : 239733856,
		"user" : {
			"login" : "qingkaikong"
		},
		"created_at" : "2016-08-15T05:52:35Z",
		"body" : "Great, thanks for the quick response! It does seem the problem comes from the PYTHONPATH! After I modify it, everything works fine now. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 715
	},
	{
		"id" : 239977537,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-16T01:27:47Z",
		"body" : "You need to git stash pop if you don't have HOMEBREW_DEVELOPER set. It's running git stash, not blowing your work away.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240032399,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T08:09:16Z",
		"body" : "> You need to git stash pop if you don't have HOMEBREW_DEVELOPER set. It's running git stash, not blowing your work away.\r\n\r\n(which a printed message told you).\r\n\r\nI'm not convinced I want to get into the habit of documenting everything HOMEBREW_DEVELOPER does but we could tweak it to be a bit more encompassing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240049554,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-08-16T09:17:43Z",
		"body" : "Guys, if a printed message told me that, I would have seen it. üò¶ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240050178,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-08-16T09:20:39Z",
		"body" : "Thinking about it more, it's possible some message was printed out and lost in the `--verbose` output.\r\n\r\nBut I didn't run `--verbose` every time, and I really don't remember seeing a message. üò¶ \r\n\r\nAnyway, the point is more that this variable should be a bit more prominent in the man page, along with it's purpose and what it does. :smile:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240050712,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-16T09:23:13Z",
		"body" : "I don't think we want most users ever setting it, so making it prominent in the man page seems somewhat counterproductive since the effect will be more users setting it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240052135,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T09:28:50Z",
		"body" : "> I don't think we want most users ever setting it, so making it prominent in the man page seems somewhat counterproductive since the effect will be more users setting it.\r\n\r\nI agree.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240052214,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-08-16T09:29:05Z",
		"body" : "Heh Heh Heh\r\n\r\nI guess I'm misunderstanding the target audience for that variable then.\r\n\r\nSo far my understanding is that it's for people working on Homebrew or the various formulas.\r\n\r\nIs that wrong?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240062129,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-16T10:13:29Z",
		"body" : "For most contributors, setting `HOMEBREW_NO_AUTO_UPDATE` while editing files in-place is probably a less sledgehammery approach.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240063888,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-08-16T10:22:39Z",
		"body" : "Yep, reading the description of that in the man page, it sounds like the right kind of thing:\r\n\r\n```\r\nHOMEBREW_NO_AUTO_UPDATE\r\n              If set, Homebrew will not auto-update before running brew install and brew upgrade.\r\n```\r\n\r\nIs tweaking it to say something like this feasible?\r\n\r\n```\r\nHOMEBREW_NO_AUTO_UPDATE\r\n              If set, Homebrew will not auto-update before running brew install and brew upgrade.\r\n\r\n              If you are making manual changes in formulas, such as editing them prior to submission,\r\n              you'll want to set this.  Otherwise Homebrew will `git stash` your changes, and\r\n              they'll seem to disappear.  \r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240065212,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T10:29:21Z",
		"body" : "@justinclift I don't think so. `brew update` tells you when it's stashed your changes and this is unrelated to autoupdate as `brew update` itself has the same behaviour.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240065934,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-08-16T10:33:08Z",
		"body" : "k.  Is this a recent change, or is it just something I've managed to miss through luck?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240066304,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-16T10:34:56Z",
		"body" : "It's related in that someone working on a formula upgrade is likely to be running brew install multiple times while doing that work, and wouldn't want to have to keep popping the changes, so it'd be one or the other, HOMEBREW_DEVELOPER or HOMEBREW_NO_AUTO_UPDATE that they'd want to set for the duration of the work.\r\n\r\nBut I agree that these subtleties don't belong in the man page. More so, it would belong in the docs on how to contribute to Homebrew, etc.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240066730,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-16T10:37:18Z",
		"body" : "https://github.com/Homebrew/brew/pull/679#issuecomment-239663569\r\n\r\n2 days ago is an eternity, so no not recent ;)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240066962,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-08-16T10:38:43Z",
		"body" : "Ahhh got it.  Feel free to change the title of this issue to reflect \"in the docs\" (etc) rather than in the manpage.\r\n\r\nIt's just the man page was one of the first things I checked after the conversation on IRC.  For someone coming at this from a different direction (eg not hitting the problem at the time), yeah, the man page may not be the right place for them to learn about it before experiencing it. üòÅ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240067212,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-16T10:40:01Z",
		"body" : "The brew-update-stashes-but-doesn't-pop-unless-developer thing has been around for months though. It's only auto update that's new.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240068324,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-08-16T10:46:03Z",
		"body" : "Ok.  As a data point, for me it's extremely rare for me to run brew update.  I may have only run it 5 times (total) ever if that.\r\n\r\nThat's because I blow away all of my formulas very often:\r\n\r\n    $ brew remove `brew list` --force\r\n\r\n... generally prior to doing new formula development, Qt development, etc.  So... they don't last long enough to need an update.  Rarely more than 2-3 days.\r\n\r\n`brew install` though, I run all the time. :smile:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240069009,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T10:49:46Z",
		"body" : "Do you mean `update` or `upgrade`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240069133,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-08-16T10:50:32Z",
		"body" : "Ahhh, yeah, `upgrade`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240069296,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-08-16T10:51:20Z",
		"body" : "`brew update` I run often... but don't think I've ever done that with any manual changes in the tree.\r\n\r\nNot trusting git to not getting mixed up in that situation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240069707,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-16T10:53:24Z",
		"body" : ">Not trusting git to not getting mixed up in that situation.\r\n\r\nI suggest you set HOMEBREW_DEVELOPER=1 for a while and see how it goes. brew update is pretty smart about the whole stash/pop dance.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240069879,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-08-16T10:54:19Z",
		"body" : "k, will do. :smile:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 716
	},
	{
		"id" : 240056745,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T09:48:46Z",
		"body" : "Feels like we should also link what this was based on e.g. https://github.com/samueljohn/Homebrew-formula-syntax",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 717
	},
	{
		"id" : 240057648,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-08-16T09:52:35Z",
		"body" : "That's already there under the sublime heading. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 717
	},
	{
		"id" : 240057908,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T09:53:44Z",
		"body" : "@joshka Apologies, forgot about that!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 717
	},
	{
		"id" : 240058386,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-08-16T09:55:46Z",
		"body" : "No probs. will fix tomorrow",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 717
	},
	{
		"id" : 241058096,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-08-19T15:57:41Z",
		"body" : "Squashed the commit that fixes the typo.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 717
	},
	{
		"id" : 241250453,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-21T10:43:17Z",
		"body" : "Thanks for your contribution to Homebrew! Without people like you submitting PRs we couldn't run this project. You rock!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 717
	},
	{
		"id" : 239975561,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-16T01:12:42Z",
		"body" : "Yes; see the security section of the readme: https://github.com/Homebrew/brew#security",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 718
	},
	{
		"id" : 240061069,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T10:08:20Z",
		"body" : "Great work on this, @vladshablinsky. Could you make a PR to homebrew-core with an example that we could use to test (and merge after this is done) and some commands to run to test this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240061108,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T10:08:31Z",
		"body" : "CC @DomT4 too who will be interested in this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240142740,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-16T15:41:07Z",
		"body" : "Thanks for working on this @vladshablinsky ‚ù§Ô∏è. `osh` is a formula in `homebrew/core` that is known to need epochs to deal with a version change shift, so if you want to play with one that'd be a solid candidate possibly.\r\n\r\nWill play with this later tonight locally a bit; currently working on GPG stuff, which is being \"fun\".",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 719
	},
	{
		"id" : 240352169,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T08:50:27Z",
		"body" : "I tested this with https://github.com/Homebrew/homebrew-core/issues/3900 and it worked great. I installed the `20160726` version, applied https://github.com/Homebrew/homebrew-core/issues/3900 as a patch, removed the custom version stuff in there in favour of a `epoch 1`, verified that `brew outdated` and `brew upgrade` showed it as outdated and upgraded to `1.0.0`, uninstalled the `20160726` version manually, reverted https://github.com/Homebrew/homebrew-core/issues/3900, added `epoch 2`, verified that `brew outdated` and `brew upgrade` showed it as outdated and upgraded to `20160726`.\r\n\r\nAs far as I'm concerned this is good to üö¢. The only wording I might want to adjust is `epoch` to something more obvious like `version_scheme`, `version_scheme_revision`, `version_scheme_changed`, `version_scheme_version` etc. The overhead of making this more readable is very low and makes it much more obvious what it's doing, conceptually.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240352275,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T08:51:00Z",
		"body" : "Also: I want to get this merged sooner rather than later so if @DomT4 agrees on one of those names let's try and get this shipped this week.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240365914,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-08-17T09:50:13Z",
		"body" : "Will change it to `version_scheme` for now, I like this option the most.\r\nAlso, I'd like to say that this way of handling epochs was suggested by @xu-cheng, so thanks to him as well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240426567,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-17T14:20:16Z",
		"body" : "I like `epoch` because the concept should be immediately _slightly_ more familiar to anyone who has encountered Debian's packaging before, but if the cost of getting this done is losing `epoch` it's not the worst thing in the world.\r\n\r\nI can live with `version_scheme`. It feels a bit strange to write but I suspect that's down to my usage of `epoch` for the last year every time this discussion has come up.\r\n\r\nI think it's worth adding `audit` code similar to our revision check to ensure that `epochs` or whatever it comes to be called are never removed from formulae, because obviously once it's there if a contributor removes it that'll cause upgrade problems and that may not be immediately obvious to every contributor, especially since we _do_ remove `revision`s on version updates.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240426997,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T14:21:46Z",
		"body" : "> I like epoch because the concept should be immediately slightly more familiar to anyone who has encountered Debian's packaging before\r\n\r\nFWIW I'd done Debian packaging before and never heard epoch used this way so I think this is catering for a very small group of people.\r\n\r\n\r\n\r\n> I think it's worth adding audit code similar to our revision check to ensure that epochs or whatever it comes to be called are never removed from formulae, because obviously once it's there if a contributor removes it that'll cause upgrade problems and that may not be immediately obvious to every contributor, especially since we do remove revisions on version updates.\r\n\r\nAgreed (but in a follow-up PR).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240429618,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-17T14:29:02Z",
		"body" : "> Agreed (but in a follow-up PR).\r\n\r\nDoesn't need to be a blocker here but would like it chased up on before we start using this in `homebrew/core`. Documentation in the Cookbook would be a üëç as well, although obviously there's broader changes to come there if we're going to be finally renaming revisions et al.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240695982,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T11:25:07Z",
		"body" : "Tested this again locally and it worked great. Nice work @vladshablinsky üëè ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240701932,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T11:57:15Z",
		"body" : "> Doesn't need to be a blocker here but would like it chased up on before we start using this in homebrew/core. Documentation in the Cookbook would be a üëç as well, although obviously there's broader changes to come there if we're going to be finally renaming revisions et al.\r\n\r\nDone in https://github.com/Homebrew/brew/pull/743.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240757482,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-18T15:20:53Z",
		"body" : "I saw this too late, but IMO `version_schema` is a misleading name since it suggests a _schema_, whereas what we've got is something more like an iteration or, well, an epoch.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240759321,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T15:26:21Z",
		"body" : "@dunn It's a migration between versioning schemes e.g. `0` is one versioning scheme, `1` is another etc.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240760575,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-18T15:29:19Z",
		"body" : "Oh I know, but to me it suggests the DSL is for _specifying_ the scheme, rather than the versioning scheme ... version üò∏",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240821893,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T18:57:25Z",
		"body" : "Are updates to taps occurring before updates to the main brew code?\r\n```\r\nJosephs-MacBook-Pro:~ joe$ brew update\r\nUpdated Homebrew from db2e9b8 to 5c7c9de.\r\nError: undefined method `version_scheme' for #<Class:0x007fb2ab9d91e8>\r\n/usr/local/Library/Taps/homebrew/homebrew-core/Formula/pyenv.rb:6:in `<class:Pyenv>'\r\n/usr/local/Library/Taps/homebrew/homebrew-core/Formula/pyenv.rb:1:in `load_formula'\r\n/usr/local/Library/Homebrew/formulary.rb:25:in `module_eval'\r\n/usr/local/Library/Homebrew/formulary.rb:25:in `load_formula'\r\n/usr/local/Library/Homebrew/formulary.rb:42:in `load_formula_from_path'\r\n/usr/local/Library/Homebrew/formulary.rb:91:in `load_file'\r\n/usr/local/Library/Homebrew/formulary.rb:82:in `klass'\r\n/usr/local/Library/Homebrew/formulary.rb:78:in `get_formula'\r\n/usr/local/Library/Homebrew/formulary.rb:215:in `factory'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:212:in `block in report'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:190:in `each_line'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:190:in `report'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:370:in `add'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:62:in `block in update_report'\r\n/usr/local/Library/Homebrew/tap.rb:478:in `block (2 levels) in each'\r\n/usr/local/Library/Homebrew/tap.rb:477:in `each'\r\n/usr/local/Library/Homebrew/tap.rb:477:in `block in each'\r\n/usr/local/Library/Homebrew/tap.rb:476:in `each'\r\n/usr/local/Library/Homebrew/tap.rb:476:in `each'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:52:in `update_report'\r\n/usr/local/Library/Homebrew/brew.rb:87:in `<main>'\r\nUpdated 5 taps (caskroom/cask, homebrew/bundle, homebrew/core, homebrew/php, homebrew/versions).\r\n==> New Formulae\r\nhomebrew/php/php70-gearman        homebrew/php/php71-snmp           homebrew/php/php71-timecop      \r\nhomebrew/php/php71-oauth          homebrew/php/php71-stats          homebrew/php/php71-xxtea        \r\nhomebrew/php/php71-pcntl          homebrew/php/php71-swoole         homebrew/versions/go16          \r\nhomebrew/php/php71-pspell         homebrew/php/php71-tidy         \r\n==> Updated Formulae\r\nhomebrew/php/phpmyadmin                            pyenv                                            \r\nJosephs-MacBook-Pro:~ joe$ \r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240822441,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T18:59:14Z",
		"body" : "@ilovezfs They are not but did you have a non-master `Homebrew/brew` branch checked out?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240822444,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T18:59:14Z",
		"body" : "ah nevermind I think I know what happened.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240822984,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T19:01:04Z",
		"body" : "Also that exception is only printed for developers.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240823278,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T19:02:11Z",
		"body" : "@MikeMcQuaid yeah, that particular tree is on non-master since it has my version of bump-formula-pr.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240824113,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T19:05:24Z",
		"body" : "> my version of bump-formula-pr.\r\n\r\nPR requested üòâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 719
	},
	{
		"id" : 240313534,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-17T04:57:22Z",
		"body" : "diff looks funny; think you probably didn't mean to zero those files? :+1: on the wording.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 720
	},
	{
		"id" : 240313849,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-17T04:59:50Z",
		"body" : "Looks cromulent!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 721
	},
	{
		"id" : 240383834,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T11:22:23Z",
		"body" : "Built `xz` and confirmed that it was passing those LDFLAGS on my OS 10.12 VM with the 8.0.* CLT installed.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 721
	},
	{
		"id" : 241009905,
		"user" : {
			"login" : "TAKeanice"
		},
		"created_at" : "2016-08-19T12:51:29Z",
		"body" : "I think the check implemented is not sufficient, as the -no_weak_imports flag is only available from XCode 8 beta 4 onwards. This flag should not be added when using an earlier beta. Otherwise, there should be a warning from homebrew if using an earlier beta. Now, the build process fails with every single formula without any visible reason when using beta 3 for example.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 721
	},
	{
		"id" : 241048724,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T15:23:18Z",
		"body" : "> Otherwise, there should be a warning from homebrew if using an earlier beta.\r\n\r\nThere is as-of 6442cb303222a57c6d461f88b59a7b1b5e8027e3",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 721
	},
	{
		"id" : 240103619,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T13:36:44Z",
		"body" : "CC @vladshablinsky for thoughts on this but the short-term fix (which may also be the long-term fix) is to append `,  :branch => \"develop\"` to your `head` line in that formula.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 722
	},
	{
		"id" : 240103870,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T13:37:38Z",
		"body" : "That it worked previously may be a quirk/implementation detail of how GitHub supports default branches compared to other Git providers.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 722
	},
	{
		"id" : 240105351,
		"user" : {
			"login" : "samdmarshall"
		},
		"created_at" : "2016-08-16T13:43:02Z",
		"body" : "I am fairly confident this is a regression because I originally filed this: https://github.com/Homebrew/legacy-homebrew/issues/43865 about taps not updating if the primary branch was not \"master\" and didn't need to file a follow-up issue as all my taps with non-master primary branches worked before and after that fix went into brew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 722
	},
	{
		"id" : 240106463,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-16T13:46:55Z",
		"body" : "It may be a regression but one that we cannot restore without breaking new functionality as we now specify the branch when cloning and that defaults to `master` unless it's been specified as another branch.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 722
	},
	{
		"id" : 240108701,
		"user" : {
			"login" : "samdmarshall"
		},
		"created_at" : "2016-08-16T13:54:32Z",
		"body" : "Ok, if that is the case can some more helpful messaging be added to this instead then? I feel like if it fails to locate the default branch name on the remote, then it should display a message to the user that the formula may be broken and that the actual primary branch should be specified instead. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 722
	},
	{
		"id" : 240346424,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T08:25:38Z",
		"body" : "Also paging @xu-cheng who oversaw this feature.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 722
	},
	{
		"id" : 240359561,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-08-17T09:22:39Z",
		"body" : "Well, seems like it shouldn't have worked at the first place. Also, [Formula Cookbook](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md#head) says that if you want to specify branch, you should use `:branch` option, but it doesn't say the default branch is `master`. It probably should say that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 722
	},
	{
		"id" : 240830790,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T19:29:55Z",
		"body" : "> I am fairly confident this is a regression because I originally filed this: https://github.com/Homebrew/legacy-homebrew/issues/43865 about taps not updating if the primary branch was not \"master\" and didn't need to file a follow-up issue as all my taps with non-master primary branches worked before and after that fix went into brew.\r\n\r\nThis seems unrelated. The referenced issue and the subsequent fix was about updating taps (the Git repositories containing the formulae) while the issue you're having here is about cloning a Git repository as part of a formula installation, which is handled by completely different code. Maybe this comment helps a bit, in case this distinction wasn't entirely clear.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 722
	},
	{
		"id" : 240836060,
		"user" : {
			"login" : "samdmarshall"
		},
		"created_at" : "2016-08-18T19:50:22Z",
		"body" : "@UniqMartin you seem to have misunderstood my comment entirely. I was the one that opened the issue that was fixed by the referenced commit. That issue was because my taps repo was using a non-master branch as the primary branch. The repos that the formulae that are in my tap also use non-master branches as the primary branch. Thus, I was commenting that if I wasn't able to install from --HEAD on a non-master branch, then I would have opened an issue following that, but I didn't therefore I didn't run into this then, thus I am calling this a \"regression\" in behavior.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 722
	},
	{
		"id" : 240839948,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T20:04:55Z",
		"body" : "I afraid I don't understand. To me, handling of the tap repositories (as part of `brew update`) and handling of arbitrary Git repositories (as part of the formula installation process, e.g. `brew install --HEAD`) are two different and basically unrelated topics.\r\n\r\nAnyway, I have to agree with the others that you should specify `:branch => \"devel\"` to resolve this particular issue (and that it worked without previously is probably accidental and thus the change in behavior not exactly a regression). The only thing that remains is maybe a more friendly error message and certainly a small tweak to the documentation as suggested by @vladshablinsky. If you could address either or both in a PR, that would be awesome.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 722
	},
	{
		"id" : 240843746,
		"user" : {
			"login" : "samdmarshall"
		},
		"created_at" : "2016-08-18T20:18:42Z",
		"body" : "Yes, they are completely unrelated, but due to the way my tap, and repos of the formulae in said tap, are configured; I would have run into this problem immediately after the referenced issue was resolved. The two, otherwise unrelated subjects, are specifically related to my context of my formulae.\r\n\r\nSo based on the info in this thread, I do need to update my formulae to use the `:branch => \"develop\"` attribute to make the `--HEAD` installs work again. My additional suggestion was add more informative logging behavior when the build fails. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 722
	},
	{
		"id" : 241034323,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T14:31:11Z",
		"body" : "This is documented in https://github.com/Homebrew/brew/blob/105d7aa5346553408281ca8f7c4eeb02ea8a7c3f/Library/Homebrew/formula.rb#L1861 but I'm adding additional documentation in https://github.com/Homebrew/brew/pull/756 which will close this issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 722
	},
	{
		"id" : 240151417,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-16T16:08:37Z",
		"body" : "üíé",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 724
	},
	{
		"id" : 240245384,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-08-16T21:29:53Z",
		"body" : "Pinging @caskroom/maintainers for visibility.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 725
	},
	{
		"id" : 240343813,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T08:13:32Z",
		"body" : "CC @Homebrew/maintainers as this is a big one.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 725
	},
	{
		"id" : 240343918,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T08:13:58Z",
		"body" : "I've opened https://github.com/Homebrew/brew/issues/727 to fix the test failures here as they are in our code making assumptions about Cask code that we need to decide if they are valid.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 725
	},
	{
		"id" : 240363985,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T09:41:45Z",
		"body" : "Some of the cask-tests are failing: https://bot.brew.sh/job/Brew%20Pull%20Requests/1302/version=el_capitan/testReport/junit/brew-test-bot/el_capitan/cask_tests/",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 725
	},
	{
		"id" : 240364521,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T09:44:05Z",
		"body" : "You can probably remove all the \"under Ruby 2.1\" tests and may need some test fixtures to not assume Caskroom/homebrew-cask is tapped (although we could compromise that and just tap it before the test). It's probably worth doing these in a separate PR before merging this or the respective Cask PR.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 725
	},
	{
		"id" : 240364988,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-08-17T09:46:13Z",
		"body" : "Seems that cask tap's path for test-bot is not `HOMEBREW_LIBRARY.join(\"Taps\", \"caskroom\", \"homebrew-cask\")`. Will take a look",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 725
	},
	{
		"id" : 240366860,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T09:54:34Z",
		"body" : "> Seems that cask tap's path for test-bot is not HOMEBREW_LIBRARY.join(\"Taps\", \"caskroom\", \"homebrew-cask\"). Will take a look\r\n\r\n@AnastasiaSulyagina on the test-bot: it's not even tapped üòÄ. This is something we could address at a later point, though.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 725
	},
	{
		"id" : 240367288,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T09:56:25Z",
		"body" : "> This is something we could address at a later point, though.\r\n\r\nAlthough let me know which you'd rather do.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 725
	},
	{
		"id" : 240367742,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-08-17T09:58:26Z",
		"body" : "I'd rather tap it before tests. \r\nWhy to address it at later point and not now? ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 725
	},
	{
		"id" : 240370173,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T10:09:47Z",
		"body" : "> I'd rather tap it before tests. \r\n\r\n:cool: I can open a PR for that.\r\n\r\n> Why to address it at later point and not now?\r\n\r\nBasically because at some point we're going to need to remove that reliance on having the tap tapped in favour of making tests create the Casks they expect and I figure that doesn't need to necessarily block this PR being merged.\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 725
	},
	{
		"id" : 240370770,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-08-17T10:12:40Z",
		"body" : ">  I can open a PR for that.\r\n\r\nThat would be nice :)\r\n\r\n> Basically because at some point we're going to need to remove that reliance on having the tap tapped in favour of making tests create the Casks they expect and I figure that doesn't need to necessarily block this PR being merged.\r\n\r\nThanks, got it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 725
	},
	{
		"id" : 240418694,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-17T13:56:07Z",
		"body" : "Speaking of Taps, If possible, you might want to merge in the last two commits in https://github.com/caskroom/homebrew-cask/pull/23821. The only thing I'm missing is an elegant way to redefine `Tap::TAP_DIRECTORY` for our tests.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240429434,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T14:28:29Z",
		"body" : "@reitermarkus I think you could merge that in for now as there's already conflicts there until there's a üëç on holding off merging core PRs.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240432342,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-17T14:37:34Z",
		"body" : "Ok, merged the three remaining core PRs. Holding off now until this move is complete.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240441841,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-17T15:07:00Z",
		"body" : "Do we need stuff like the GitHub templates, CoC & other dotfiles from Cask here? Are they not remaining with the Cask tap?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240449950,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T15:31:17Z",
		"body" : "> Do we need stuff like the GitHub templates, CoC & other dotfiles from Cask here? Are they not remaining with the Cask tap?\r\n\r\n@DomT4 I'm in favour of moving basically everything for now and then removing them once they are over; it's too hard to review the diff for now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240452836,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-17T15:40:10Z",
		"body" : "Cool. That was exactly my thought, that removing the unnecessary text files might make the diff actually reviewable, heh, but whether that's done in pre or post doesn't matter much.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240462818,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-08-17T16:11:38Z",
		"body" : "@jawshooah, are these tests needed? If yes, why should directories be undeletable and should I edit the paths somehow to fix it?\r\n```\r\nrspec ./spec/cask/macos_spec.rb:43 # OS::Mac says the user library directory is undeletable\r\nrspec ./spec/cask/macos_spec.rb:31 # OS::Mac says the home directory is undeletable\r\n```\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240465760,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-08-17T16:21:18Z",
		"body" : "Undeletable directories include system and user directories that should never be included in `uninstall :delete` or `zap :delete`. Those tests ensure that, were a Cask author to mistakenly include, for example, `~/Library` in `uninstall :delete`, we would not actually delete that directory.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240494600,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-08-17T18:00:24Z",
		"body" : "As I understood `/Users/brew/Jenkins/pr-brew/version/el_capitan/home/` is `Dir.home` for test-bot. In `macos.rb` [there is](https://github.com/AnastasiaSulyagina/brew/blob/move-cask/Library/Homebrew/cask/lib/hbc/macos.rb#L239) `~` string which actually should equal `Dir.home`. Am I wrong?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240515878,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-17T19:11:02Z",
		"body" : "This would mean we have need to call `sub(%r{^~(?=(/|$))}, Dir.home)` everywhere we expect to receive a relative path instead of (or in addition to) `expand_path`.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240631830,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-08-18T06:03:41Z",
		"body" : "Hm. I thought that as it never appeared before and appeared now in tests only, I can just replace `~` with `Dir.home` in Undeletables list. If it's unacceptable I'll fix it ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240640192,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-08-18T06:59:12Z",
		"body" : "Why can build pass in travis-ci/pr and fail in default? ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240655653,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T08:20:09Z",
		"body" : "@AnastasiaSulyagina The filesystems may have different permissions.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240737266,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-18T14:19:21Z",
		"body" : "@AnastasiaSulyagina, could you rather cange https://github.com/AnastasiaSulyagina/brew/blob/move-cask/Library/Homebrew/cask/lib/hbc/macos.rb#L364 to                      `.map { |x| Pathname(x.sub(%r{^~(?=(/|$))}, Dir.home)).expand_path }` instead of changing the whole list, to keep it at little more readable?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240737817,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T14:21:10Z",
		"body" : "Mentioned to @AnastasiaSulyagina in Slack: https://github.com/Homebrew/brew/blob/b39eba6c5f0f6f1b19e663df52bc72b9d8518886/Library/Homebrew/dev-cmd/test-bot.rb#L942-L943 is the issue; the test-bot overrides the `$HOME` variable to stop things being dumped in `~` and I'm guessing it's not getting expanded consistently as a result.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240739039,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-18T14:24:33Z",
		"body" : "@MikeMcQuaid, might be worth knowing what `File.expand_path` is using internally then to see if we can also override it globally in tests.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240741789,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-18T14:33:00Z",
		"body" : "Ok, seem's like it is using `$HOME` internally as well: https://github.com/ruby/ruby/blob/7a4aea47e281402a178b69b5f90d6ed330122e67/file.c#L3209",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240835168,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-08-18T19:46:49Z",
		"body" : "Rebased both PRs, fixed `macos.rb`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240894641,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-19T00:14:45Z",
		"body" : "I might have found the reason why some of the  `undeletable?` tests are still failing.\r\n\r\n```\r\nirb> File.identical?('does-not-exist', './does-not-exist')\r\n=> false\r\nirb> File.identical?('exists', './exists')\r\n=> true\r\n```\r\n\r\nSeems like `File.identical?\b` doesn't work on nonexistent paths.\r\n\r\n@AnastasiaSulyagina, could you try changing https://github.com/AnastasiaSulyagina/brew/blob/move-cask/Library/Homebrew/cask/lib/hbc/macos.rb#L369-L375 to the following?\r\n\r\n```ruby\r\n  def system_dir?(dir)\r\n    SYSTEM_DIRS.include?(Pathname.new(dir).expand_path)\r\n  end\r\n\r\n  def undeletable?(dir)\r\n    UNDELETABLE_DIRS.include?(Pathname.new(dir).expand_path)\r\n  end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240942116,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-08-19T06:51:35Z",
		"body" : "```\r\n1) Hbc::SystemCommand with a very long STDERR output returns without deadlocking\r\n     Failure/Error: wait(10).for {\r\n       RSpec::Wait::TimeoutError\r\n     # ./spec/cask/system_command_spec.rb:136:in `block (3 levels) in <top (required)>'\r\n```\r\nIs it somehow related to the PR?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240942509,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-19T06:54:02Z",
		"body" : "@AnastasiaSulyagina, could you bump https://github.com/AnastasiaSulyagina/brew/blob/move-cask/Library/Homebrew/cask/spec/cask/system_command_spec.rb#L136 to 15 seconds? I don't think there's actually a deadlock, as this only happens occasionally.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240954981,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-19T08:06:12Z",
		"body" : "Finally! :tada: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 241006571,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T12:35:04Z",
		"body" : "Merging this and https://github.com/caskroom/homebrew-cask/pull/23852 should follow soon afterwards üéâ. Great work, @AnastasiaSulyagina!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 725
	},
	{
		"id" : 240349524,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T08:39:19Z",
		"body" : "> I looked for documentation on the arguments that rake test accepts; if I understand correctly, then rake test does accept options that are used in Test::Unit (as mentioned here).\r\n> \r\n> That led me to believe that rake test would indeed accept multiple test files or test methods as arguments (as detailed here).\r\n\r\nMy reading of http://rake.rubyforge.org/classes/Rake/TestTask.html is that you may only be able to specify a single test, unfortunately. That said, we could move away from using TestTask if it's limiting us in this way.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 726
	},
	{
		"id" : 240598785,
		"user" : {
			"login" : "eirinikos"
		},
		"created_at" : "2016-08-18T01:29:12Z",
		"body" : "> My reading of http://rake.rubyforge.org/classes/Rake/TestTask.html is that you may only be able to specify a single test, unfortunately. That said, we could move away from using TestTask if it's limiting us in this way.\r\n\r\nDo any alternatives come to mind? I'm guessing that we would move away not just from using TestTask, but from using Rake itself, too?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 726
	},
	{
		"id" : 240642959,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T07:15:18Z",
		"body" : "Can you elaborate a bit on the motivation for this PR? What is the benefit over running `brew tests` (with the desired options, e.g. different `--only=`) multiple times in a row?\r\n\r\n> This is one of my attempts to change `brew tests` so that it allows multiple `--only` args (i.e., multiple test files and/or test methods). It doesn't work, though! üòû\r\n\r\nI think from a user interface point of view it might be better (and also involve less changes) to teach `--only=` to accept multiple test files by supplying them in a single argument, delimited by a comma, e.g. `--only=file1,file2` instead of `--only=file1 --only=file2`.\r\n\r\n> Unfortunately, I haven't been able to test my changes with `rake test` (or `bundle exec rake test`) itself, since I receive this esoteric error when trying to do so:\r\n\r\nWe should probably provide a better error message in this case or flat out refuse to run the test suite if invoked from a vanilla `rake test`, but the gist of why you see this esoteric error is that the Homebrew initialization code assumes quite a few environment variables to be set up in advance (in `bin/brew` and `Library/Homebrew/brew.sh`), thus loading any of the Homebrew Ruby code without going through this shell code first hasn't been really supported for quite a while.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 726
	},
	{
		"id" : 240663677,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T08:55:08Z",
		"body" : "> Do any alternatives come to mind? I'm guessing that we would move away not just from using TestTask, but from using Rake itself, too?\r\n\r\nThinking about this: the only alternative I can think of is to run `rake` multiple times but then I also thought:\r\n\r\n> What is the benefit over running brew tests (with the desired options, e.g. different --only=) multiple times in a row?\r\n\r\nwhich I now think I agree with, unfortunately.\r\n\r\nThanks for the PR anyway @eirinikos and hope it was a useful learning experience but passing on this for now üò≠ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 726
	},
	{
		"id" : 240390758,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T12:00:09Z",
		"body" : "See https://github.com/homebrew/homebrew-aliases",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 728
	},
	{
		"id" : 240393239,
		"user" : {
			"login" : "garmoshka-mo"
		},
		"created_at" : "2016-08-17T12:13:14Z",
		"body" : "@MikeMcQuaid thank you for link üëç \r\n\r\nIssue is that common solution is not easily available for people (informational barrier - it is a problem)\r\nIf there is strong arguments agains not having aliases by default, \r\nthen error message `Error: Unknown command: i` should be extended with something like `Error: Unknown command: i. To assign alias run: brew tap homebrew/aliases; brew alias i=\"install\"`\r\n\r\nIt wouldn't be so important for other system tools, like `lsyncd` - which requires a lot of specific knowledges before let \"monkey to use grenades\" üôà \r\n\r\nThough `brew` - looks like was initially created for convenience and simplicity of usage, isn't it",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 728
	},
	{
		"id" : 240395704,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T12:26:13Z",
		"body" : "It's something we may consider in future but not at the present time, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 728
	},
	{
		"id" : 240395317,
		"user" : {
			"login" : "pftbest"
		},
		"created_at" : "2016-08-17T12:24:11Z",
		"body" : "I have got this error:\r\n```\r\n$ brew update && brew upgrade\r\nAlready up-to-date.\r\n==> Upgrading 8 outdated packages, with result:\r\nimagemagick 6.9.5-7, libftdi 1.3, libpng 1.6.24\r\n==> Upgrading imagemagick\r\n==> Installing dependencies for imagemagick: libpng\r\n==> Installing imagemagick dependency: libpng\r\n==> Using the sandbox\r\nError: undefined method `>=' for nil:NilClass\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/usr/local/Library/Homebrew/extend/os/mac/extend/ENV/shared.rb:4:in `no_weak_imports?'\r\n/usr/local/Library/Homebrew/extend/os/mac/extend/ENV/super.rb:87:in `determine_cccfg'\r\n/usr/local/Library/Homebrew/extend/ENV/super.rb:48:in `setup_build_environment'\r\n/usr/local/Library/Homebrew/extend/os/mac/extend/ENV/super.rb:93:in `setup_build_environment'\r\n/usr/local/Library/Homebrew/build.rb:86:in `install'\r\n/usr/local/Library/Homebrew/build.rb:179:in `<main>'\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 729
	},
	{
		"id" : 240395383,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T12:24:30Z",
		"body" : "Fixed in https://github.com/Homebrew/brew/commit/27fc2abacabd0990cce91eca42cc63ba05866e65.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 729
	},
	{
		"id" : 240428493,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-17T14:26:00Z",
		"body" : "This seems fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 731
	},
	{
		"id" : 240428869,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T14:26:55Z",
		"body" : "Note to self: this also needs a compat addition.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 731
	},
	{
		"id" : 240440927,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-17T15:04:10Z",
		"body" : "üëç",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 731
	},
	{
		"id" : 240628261,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T05:34:44Z",
		"body" : "I have strong feelings regarding this, that I have expressed in https://github.com/Homebrew/brew/issues/38#issuecomment-240627249. I posted there because the argument makes more sense when looking at the complete picture, but I'm also referencing it here for the sake of completeness.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 731
	},
	{
		"id" : 240741769,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T14:32:57Z",
		"body" : "@ilovezfs @UniqMartin how about now?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 731
	},
	{
		"id" : 240765743,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T15:45:20Z",
		"body" : "> how about now?\r\n\r\nThanks! I know that naming stuff is hard. I'm much happier with this revised PR. (Note that the commit message still uses the older `bottle_revision`.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 731
	},
	{
		"id" : 240419242,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-17T13:58:00Z",
		"body" : "seems overly git centric. maybe this one can be left alone as just revision.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 732
	},
	{
		"id" : 240422609,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-17T14:09:19Z",
		"body" : "From `man gitglossary`:\r\n```\r\nthe word \"commit\" is often used by Git in the same places other\r\nrevision control systems use the words \"revision\" or \"version\".\r\n```\r\n\r\nit's git jargon, not a generic term.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 732
	},
	{
		"id" : 240423353,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T14:11:50Z",
		"body" : "It's definitely not just Git jargon. Perhaps referring to a revision as a commit is something more commonly done in Git but when I was using Subversion and CVS we still would say things like \"what did you change in that commit?\".",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 732
	},
	{
		"id" : 240424123,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-17T14:13:56Z",
		"body" : "In svn, \"commit\" means push...\r\n\r\nI'd suggest a more neutral term that's more consistent with the other two proposals is `source_revision` or `scm_revision`, or as I said above, just leave this one alone and change the other two.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 732
	},
	{
		"id" : 240424519,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T14:14:55Z",
		"body" : "Note to self: this also needs a `compat` addition.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 732
	},
	{
		"id" : 240425359,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T14:16:50Z",
		"body" : "Examples of this not being Git specific:\r\n- http://stackoverflow.com/questions/11885677/svn-how-to-split-a-large-commit-into-several-small-commits\r\n- http://programmers.stackexchange.com/questions/10793/when-is-a-version-control-commit-too-large\r\n\r\n`source_revision` or `scm_revision` could both worth if others feel strongly, though.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 732
	},
	{
		"id" : 240440517,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-17T15:02:45Z",
		"body" : "I think of our all `revision` usages this one has the most legitimacy in terms of outside use. I could live with it remaining as `revision` since it'll be the only one left, but otherwise `scm_revision` seems fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 732
	},
	{
		"id" : 240448784,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-17T15:27:38Z",
		"body" : "@MikeMcQuaid To be clear, I don't personally mind `commit` being used as the generic if you're satisfied it's not too git-jargony.\r\n\r\nOne other thing to think about is that we often refer to \"commit\" or \"commits\" when speaking with contributors and we almost never mean an scm revision in the formula, and almost always mean the commit(s) in the PR. So this may open up a new ambiguity in communications, even if it's supposed to be reducing ambiguity elsewhere.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 732
	},
	{
		"id" : 240449013,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T15:28:23Z",
		"body" : "> One other thing to think about is that we often refer to \"commit\" or \"commits\" when speaking with contributors and we almost never mean an scm revision in the formula, and almost always mean the commit(s) in the PR. So this may open up a new ambiguity in communications, even if it's supposed to be reducing ambiguity elsewhere.\r\n\r\nA very good point üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 732
	},
	{
		"id" : 240696663,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T11:28:53Z",
		"body" : "Going to pass on changing this in favour of just changing the bottle revisions for now and see if that clears things up.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 732
	},
	{
		"id" : 240428366,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-17T14:25:43Z",
		"body" : "This seems fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 733
	},
	{
		"id" : 240437315,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-17T14:52:51Z",
		"body" : "üëç. We can do all of the taps inside the Homebrew org pretty quickly with `sed`, so might even get away with turning on `odeprecated` sooner rather than later once that's done.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 733
	},
	{
		"id" : 240518864,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-08-17T19:22:10Z",
		"body" : "Should we also change the `--revision` argument to [bump-formula-pr](https://github.com/MikeMcQuaid/brew/blob/336f00c9bb17a6aec3d993e1cb804bd828ed771c/Library/Homebrew/dev-cmd/bump-formula-pr.rb#L2)?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 733
	},
	{
		"id" : 240628357,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T05:35:25Z",
		"body" : "I have strong feelings regarding this, that I have expressed in https://github.com/Homebrew/brew/issues/38#issuecomment-240627249. I posted there because the argument makes more sense when looking at the complete picture, but I'm also referencing it here for the sake of completeness.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 733
	},
	{
		"id" : 240629842,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T05:48:45Z",
		"body" : "formula_revision I think is a bit of a misnomer here because I think when we have devel bottles, it's going to be important to separate this DSL element per software spec. And as we saw in\r\n\r\nhttps://github.com/Homebrew/homebrew-core/pull/3963#issuecomment-240466291\r\nhttps://travis-ci.org/Homebrew/homebrew-core/builds/153131433\r\n\r\ntreating formula_revision as a formula-wide value, not a software-spec specific value is already causing bugs even without the development bottles on the scene yet.\r\n\r\nIf anything, this value is almost exclusively currently used to mean the stable revision, and only accidentally appears at the formula global level because stable is usually not a separate block it can be embedded in, but that's an implementation detail, which shouldn't be confused with what the value actually means semantically in current use, which is stable revision, not formula revision.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 733
	},
	{
		"id" : 240696639,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T11:28:46Z",
		"body" : "Going to pass on changing this in favour of just changing the bottle revisions for now and see if that clears things up.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 733
	},
	{
		"id" : 240423789,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-17T14:13:11Z",
		"body" : ":+1:",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 734
	},
	{
		"id" : 240424449,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-17T14:14:42Z",
		"body" : "Are we doing any checking that 10.5 ends up with the correct `homebrew/core` depending on their OS X/macOS version? We might be & I've just forgotten.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 734
	},
	{
		"id" : 240426466,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T14:20:00Z",
		"body" : "Tigerbrew [does not yet use `homebrew/core`](https://github.com/mistydemeo/tigerbrew/tree/master/Library/Formula) so in this case: we do not. Honestly I'm tempted to say that we just support it the same way as 10.6: we'll accept but not create any patches. It may also be worth hooking up `llvm` so it can be used as a modern Clang in the same vein as GCC on older platforms. See also: doing this with `swift`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 734
	},
	{
		"id" : 240429888,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-17T14:29:49Z",
		"body" : "> Honestly I'm tempted to say that we just support it the same way as 10.6: we'll accept but not create any patches.\r\n\r\nMy experience with 10.6 makes me wish we didn't even support 10.6 for `homebrew/core` lol. Generally expanding the range of OS X/macOS versions none of us run & we can never practically test for seems to be asking for trouble, particularly since our troubleshooting for 10.7 & below to date has been exclusively _\"Submit a PR\"_ or _\"Misty, help please\"_.\r\n\r\nI'm pretty wary about accepting patches fixing 10.5 issues unless they'll be accepted upstream, and I fear a lot of upstreams will turn around and go _\"Why are you submitting patches for 10.5, what year is this?\"_ etc.\r\n\r\nAs long as we're explicit on not taking patches not accepted upstream for ancient releases, eh, but I do think we were heading in the right direction the times we talked about more formally culling supported OS X versions. ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 734
	},
	{
		"id" : 240430563,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-17T14:31:54Z",
		"body" : "FWIW, we will definitely need this to build portable ruby. So an alternative solution would be:\r\n```ruby\r\nif OS.mac? && MacOS.version < \"10.6\" && !ARGV.homebrew_developer?\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 734
	},
	{
		"id" : 240431770,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T14:35:45Z",
		"body" : "> My experience with 10.6 makes me wish we didn't even support 10.6 for homebrew/core lol. Generally expanding the range of OS X/macOS versions none of us run & we can never practically test for seems to be asking for trouble, particularly since our troubleshooting for 10.7 & below to date has been exclusively \"Submit a PR\" or \"Misty, help please\".\r\n\r\nWhen 10.12 is released that'll include all the versions below 10.10. \r\n\r\nI think the main problem in Homebrew is that people don't really care about the package manager being kept up to date but do care about installing up to date packages. I think people on very old OSs don't expect things to Just Work out of the box and, as long as Tigerbrew still exists, providing the option for people to use an old OS X version makes more sense to me than shutting them off. If someone's still on e.g. 10.5 there's nothing we can do that's going to make them upgrade to 10.10.\r\n\r\n> I'm pretty wary about accepting patches fixing 10.5 issues unless they'll be accepted upstream, and I fear a lot of upstreams will turn around and go \"Why are you submitting patches for 10.5, what year is this?\" etc.\r\n\r\nThat's fine with me; we can get people to submit patches to be merged upstream instead. That's broadly what we do elsewhere.\r\n\r\n> As long as we're explicit on not taking patches not accepted upstream for ancient releases, eh, but I do think we were heading in the right direction the times we talked about more formally culling supported OS X versions.\r\n\r\nBear in mind: this is the package manager and not the packages themselves in this repo. We could consider having minimum requirements for certain taps if this produces an overly high support burden but how many reports are we getting today for 10.6? I think our messaging is already strict enough to have those folks figure out that we can't really help them.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 734
	},
	{
		"id" : 240432040,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T14:36:36Z",
		"body" : "Diplomatically merging as-is as, as @xu-cheng points out, we currently need this to build portable Ruby and as I pointed out our installer guards against it and `doctor` whines about it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 734
	},
	{
		"id" : 240435675,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-17T14:47:49Z",
		"body" : "> When 10.12 is released that'll include all the versions below 10.10.\r\n\r\nIndeed, and I'm on the record as agreeing in the past this wouldn't be the worst thing in the world as far as maintainability goes. As I've noted in another thread recently, our % of users running `brew` on 10.9 & above is apparently 99.8%, meaning any maintaining of formulae for 10.8 and below is not insignificant effort for the 0.2% of users.\r\n\r\n> We could consider having minimum requirements for certain taps if this produces an overly high support burden but how many reports are we getting today for 10.6?\r\n\r\nMy point is less that we're getting reports & more that absolutely everything could be broken and we have no clue, no way to test fixes & no way to ensure those fixes didn't break open again in future.\r\n\r\nOpenSSL for example works sometimes on 10.6, other times completely breaks.\r\n\r\nOfficially, the version of Perl on 10.6 is not new enough to run the _current_ OpenSSL test-suite, let alone whenever we switch over to 1.1.0 over the next couple years. 1.1.0 will force our Perl onto 10.6 users to ensure OpenSSL does build and _run_ fine, but we've no proof Perl consistently builds for 10.6. The rabbit hole doesn't get any less deep.\r\n\r\nMore or less, my policy on issues at the 10.8 level of below is increasingly becoming stump up a PR, thanks, closing this issue, I can't do jack to help, sorry. I'm not convinced that's great UX but it's all I can practically do.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 734
	},
	{
		"id" : 240449219,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T15:28:59Z",
		"body" : "> More or less, my policy on issues at the 10.8 level of below is increasingly becoming stump up a PR, thanks, closing this issue, I can't do jack to help, sorry. I'm not convinced that's great UX but it's all I can practically do.\r\n\r\nThat's fine üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 734
	},
	{
		"id" : 240457154,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T15:53:27Z",
		"body" : "@DomT4 Feel free to merge when üíö, I'll be out most of the evening.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 736
	},
	{
		"id" : 240458353,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-17T15:57:10Z",
		"body" : "Argh, sorry! I went ahead & pushed directly after tweaking it locally & running `brew tests`. I'll try to remember to check my emails next time first üòì.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 736
	},
	{
		"id" : 240458770,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-17T15:58:28Z",
		"body" : "NP.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 736
	},
	{
		"id" : 240459212,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-17T15:59:52Z",
		"body" : "If it breaks on other CI tests now I'm going to look like a pillock üòÑ. It shouldn't do though, which is why I skipped the PR in this case.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 736
	},
	{
		"id" : 241206836,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-08-20T15:39:06Z",
		"body" : "One other thing, it would be nicer if it poped the changes/ignored dirty taps, since then you are most likely working on something. Or just warn that it is dirty/not on master.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 737
	},
	{
		"id" : 241207082,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-20T15:43:58Z",
		"body" : "It does this if you have `HOMEBREW_DEVELOPER` set. I'll provide a decent response to this beyond that workaround in future. The short version: the hard thing here is getting the balance for Homebrew developers vs. those who don't know what Git is or really understand how to use it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 737
	},
	{
		"id" : 244809339,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-05T20:42:30Z",
		"body" : "Have opened a PR for this in https://github.com/Homebrew/brew/pull/881.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 737
	},
	{
		"id" : 240626096,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-08-18T05:16:36Z",
		"body" : "To reproduce the error:\r\n\r\n~~~\r\nbrew test-bot --tap=osrf/simulation --ci-pr https://github.com/osrf/homebrew-simulation/pull/129\r\n~~~",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 738
	},
	{
		"id" : 240630487,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-08-18T05:53:44Z",
		"body" : "I've made a small modification to test-bot in https://github.com/scpeters/brew/commit/d62fd50f8c6422e1f0a3c55cca1fafd5870f44b0 but it's not perfect. Instead of building `[\"osrf/simulation/gazebo6\", \"osrf/simulation/sdformat3\"]` in alphabetical order, it builds `sdformat3` and then `[\"osrf/simulation/gazebo6\", \"osrf/simulation/sdformat3\"]` in alphabetical order. So it builds sdformat3 twice, but at least it doesn't fail this time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 738
	},
	{
		"id" : 240662712,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T08:50:56Z",
		"body" : "In short: no, this should not be necessary.\r\n\r\nThe best solution is probably to coax e.g. `brew deps` and friends to always output the full names and use them for comparisons. We'd accept a PR for this. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 738
	},
	{
		"id" : 240864077,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-08-18T21:33:18Z",
		"body" : "Thanks, that makes more sense than my first attempt. I'll start working on a pull request.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 738
	},
	{
		"id" : 241032868,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T14:25:54Z",
		"body" : "@scpeters Great, thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 738
	},
	{
		"id" : 240664003,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T08:56:35Z",
		"body" : "Thanks @scpeters!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 739
	},
	{
		"id" : 240634936,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T06:25:55Z",
		"body" : ":-1: this seems like something that would make more sense in an external command: https://github.com/Homebrew/brew/blob/028d155e97014076adf4e4dbc7c888fd871de321/share/doc/homebrew/External-Commands.md",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 740
	},
	{
		"id" : 240663125,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T08:52:47Z",
		"body" : "I don't mind this functionality being there as long as it's not an explicitly passed option e.g. an environment variable. It does make the code more complex so I'd like to see more than just yourself wanting this option first.\r\n\r\nIs there a reason you want to not open it on a fork beyond aesthetics?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 740
	},
	{
		"id" : 240708294,
		"user" : {
			"login" : "jasonkarns"
		},
		"created_at" : "2016-08-18T12:29:28Z",
		"body" : "@MikeMcQuaid \r\n\r\n> Is there a reason you want to not open it on a fork beyond aesthetics?\r\n\r\nClutter? The core team on the nodenv repos are the only people submitting formula updates (as it's an automated part of the release for the nodenv plugins themselves) and as owners we all work on origin. Just doesn't make sense to me to have forks of repos I own, I guess.\r\n\r\nI guess I'd like to turn the question around :) Is there a reason to use forks when the submission is from a repo owner? \r\n\r\nSide question: what is the criteria for adding predicate methods to ARGV? The conditional itself would be simpler if we could use the same style as `ARGV.dry_run?`\r\n\r\n\r\n> as long as it's not an explicitly passed option e.g. an environment variable.\r\n\r\nI don't understand this. Environment variables are intended as something that lives at a higher level than a command; something to configure across an entire, well, _environment_. The remote option does not meet that high bar. It is a highly localized option that only applies to a given invocation of the command (because it's specific to the tap being bumped). In other words, no one could set the environment variable and use this command regularly. They would need to repeatedly modify or overwrite the variable for individual invocations of the command.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 740
	},
	{
		"id" : 240708807,
		"user" : {
			"login" : "jasonkarns"
		},
		"created_at" : "2016-08-18T12:31:58Z",
		"body" : "@ilovezfs I'm not sure I follow your reasoning. I want to use the existing dev-cmd but just need control over the `git push` bit nestled deep within. Extracting this to an external command would duplicate 99% of the existing dev command only to modify 1%, no?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 740
	},
	{
		"id" : 240709905,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T12:36:58Z",
		"body" : ">I'm not sure I follow your reasoning.\r\n\r\nI cannot imagine myself ever using this option. Not sure I have much more reasoning for you than that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 740
	},
	{
		"id" : 240709926,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T12:37:03Z",
		"body" : "> I guess I'd like to turn the question around :) Is there a reason to use forks when the submission is from a repo owner?\r\n\r\nYep: the main reason is because `brew tap` is Git based so anyone else will get that branch in their local repo.\r\n\r\n\r\n\r\n> They would need to repeatedly modify or overwrite the variable for individual invocations of the command.\r\n\r\nMy feeling in your case (correct me if I'm wrong) was that you'd always want it to behave a certain way in which case it seems like it'd be a pain to have to manually remember to type the flag every time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 740
	},
	{
		"id" : 240721121,
		"user" : {
			"login" : "jasonkarns"
		},
		"created_at" : "2016-08-18T13:22:56Z",
		"body" : "> Yep: the main reason is because brew tap is Git based so anyone else will get that branch in their local repo.\r\n\r\nGood point. (I diligently delete the branches whenever they are merged, but that relies on discipline)\r\n\r\n\r\n> My feeling in your case (correct me if I'm wrong) was that you'd always want it to behave a certain way in which case it seems like it'd be a pain to have to manually remember to type the flag every time.\r\n\r\nWe already need to to behave 2 different ways: defaulting to forks when bumping nodenv/node-build (which are in homebrew-core) and using our repo when bumping formulas in our tap. But again, the option is still tap-specific. In our use case, nobody types it manually because the whole thing is scripted.\r\n\r\nIn theory, one _could_ need a different remote name per tap. (plus using fork for homebrew-core) However, in practice there are really only two cases: using fork and using `origin`. Maybe the option shouldn't bother accepting the remote name, but instead just be a flag that triggers using origin? That would simplify the code. Maybe `--push-to-origin` or something?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 740
	},
	{
		"id" : 240721761,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T13:25:30Z",
		"body" : "> Maybe the option shouldn't bother accepting the remote name, but instead just be a flag that triggers using origin? That would simplify the code. Maybe --push-to-origin or something?\r\n\r\nThis makes sense to me üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 740
	},
	{
		"id" : 240721839,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T13:25:47Z",
		"body" : "and I think you've convinced me that if we can get this code simple enough we should accept this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 740
	},
	{
		"id" : 240756849,
		"user" : {
			"login" : "jasonkarns"
		},
		"created_at" : "2016-08-18T15:19:02Z",
		"body" : "@MikeMcQuaid see now I'm hesitant because \r\n\r\n> anyone else will get that branch in their local repo.\r\n\r\nis now making me think we should just switch to using forks instead of pushing to origin. I may close this issue and use bump-formula-pr unmodified for a bit and see if I still want the origin flag.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 740
	},
	{
		"id" : 240775084,
		"user" : {
			"login" : "jasonkarns"
		},
		"created_at" : "2016-08-18T16:15:15Z",
		"body" : "@jawshooah since you're effectively the only other person that will be bumping nodenv formulae in our nodenv taps, do you have any opinion. (On the idea of moving the homebrew-nodenv taps to a fork model so that any bumps are on our personal forks and PRs opened against origin. This would allow us to use the bump-formula-pr dev-cmd unmodified.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 740
	},
	{
		"id" : 240777536,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-08-18T16:23:35Z",
		"body" : "@jasonkarns I'm pretty ambivalent on this, as I already create branches on my personal forks for all PRs, even to repos owned by organizations of which I am a part.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 740
	},
	{
		"id" : 240778209,
		"user" : {
			"login" : "jasonkarns"
		},
		"created_at" : "2016-08-18T16:25:50Z",
		"body" : "I think that settles it, then. I'll move to a fork model and use bump-formula-pr as-is.\r\n\r\nThanks everyone!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 740
	},
	{
		"id" : 240660265,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T08:40:19Z",
		"body" : "Reading https://github.com/golang/go/issues/16770#issuecomment-240581950 I'm not sure this is the right solution.\r\n\r\nI think we should strip `-mmacosx-version-min=10.6` from Go's CFLAGS because everything else we do is build around building bottles that only work on a specific version and it's that that's causing the conflict.\r\n\r\nAlternatively, we only apply `-no_weak_imports` on Xcode 8 on OS X 10.11 (or, in general, only when using the SDK that doesn't match the OS version). @ilovezfs remind me: we have other issues that only affect that case, right?\r\n\r\nCC @achivetta for thoughts on this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240667322,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T09:11:30Z",
		"body" : "@MikeMcQuaid Yeah, my SDKROOT bug currently affects\r\n```\r\nansible\r\nbaresip\r\nh2o\r\nmitmproxy\r\npassenger\r\nrrdtool\r\nuwsgi\r\nvim\r\nwolfssl\r\n```\r\n\r\nI'm not thrilled with this `-no_weak_imports` idea. It seems like we're anticipating a need to cater to build systems that may make bad assumptions about macOS. I'd rather see us actually hit those bugs and then report them upstream rather than trying to side-step a problem that may or may not exist, and is basically always going to be an upstream bug when it happens. The right place for formulae that would need this is most likely :skull: since it means their upstream is no longer actively supporting macOS.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240667712,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T09:13:12Z",
		"body" : "@ilovezfs to be more explicit: does that bug also only affect e.g. using the OS X 10.X+1 SDK on OS X 10.X? If so, it feels like we do want to start special-casing that situation (which we previously decided to not do).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240668247,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T09:15:31Z",
		"body" : ">to be more explicit: does that bug also only affect e.g. using the OS X 10.X+1 SDK on OS X 10.X\r\n\r\nYes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240675994,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T09:48:04Z",
		"body" : "Yeh, I think we may want various options that apply only to that case, then, rather than fixing it on a formula-by-formula basis.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240684435,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T10:24:37Z",
		"body" : "@MikeMcQuaid set `depends_on :macos => :el_capitan` for every formula, and when Sierra ships, change them to `depends_on :macos => :sierra`. Problem solved. :smiling_imp: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240771927,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-18T16:04:52Z",
		"body" : "I think the relevant comment in the Go discussion is:\r\n\r\n> If I'm understanding the Go code correctly, it makes sense that Go does this because (a) it is building content that it'll static link into the binaries it produces, which should deploy back to 10.6 and (b) it has a check before its use of SecCertificateCopyNormalizedIssuerContent to fallback to an older path on older OS, which is the correct way to use a weak link.\r\n\r\nWe don't care whether our go executable can run on 10.6 but we do care about whether the go we build can produce executables that run on 10.6; the suggestion is that go needs to use the minimum deployment target flag to achieve that.\r\n\r\nI might not have expected this was the case because go can cross-compile to darwin on systems without an Apple SDK available? but I also know nothing about go internals.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240779413,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T16:29:44Z",
		"body" : "@tdsmith In that case I think it makes sense to just set this flag for 10.11 using the 10.12 SDK (i.e. Xcode 8) and have a general block/method for handling the other various quirks that need set in this situation (although this can be punted to another PR).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240779650,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T16:30:37Z",
		"body" : "To be more explicit: I'm definitely üëé on disabling this on a formula-by-formula basis and we can consider just disabling this flag on OS X 10.12 entirely for now if what I've described is too much work to do in the near future.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240779932,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-18T16:31:35Z",
		"body" : "I think removing `mmacosx-version-min` would be a mistake in this case, presuming our reading of the upstream situation with Go is correct.\r\n\r\nWhilst we don't build our Go-using formulae to run as far back as 10.6, I think it'd be the wrong thing to do to make anyone who wants to develop backwards-compatible executables with `go` outside of Homebrew reinstall `go` from an alternative source. That feels pretty hostile & likely in the end would result in us having to introduce a special `:go` dependency.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240790626,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-18T17:09:15Z",
		"body" : "Just for expectation-setting, I don't have any immediate plans to work on a different approach; I just thought this sounded like a chance to play with ENV internals. :)\r\n\r\nI'm not really compelled by the idea that build failures against future SDKs are upstream bugs but I that's probably a separate discussion vs. this PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240795579,
		"user" : {
			"login" : "achivetta"
		},
		"created_at" : "2016-08-18T17:27:07Z",
		"body" : "I don't have a strong opinion on the right approach here; my goal was just to make sure you had the tools to solve the broken packages before macOS GM'ed.  But let me see if I can sort out the various cases.\r\n\r\nThere are three versions at play here:\r\n  - The SDK version, which is determined by which Xcode is installed.\r\n  - The OS version the user is running.\r\n  - The deployment target set by the code, or the OS version if none.\r\n\r\n`OS == SDK == deployment` is the common case of building random autoconf-based open source software on the latest macOS.  In this case, `-no_weak_imports` should be a noop.\r\n\r\n`OS == deployment < SDK` is the case where you are on OS X 10.11 with Xcode 8.  When building software that wasn't written with macOS-style weak linking and a specific deployment target in mind (likely including almost everything that uses autoconf), this is what `-no_weak_imports` will fix (or at least move from a runtime failure to a build time failure).\r\n\r\n`deployment < OS == SDK` and `deployment < OS < SDK` are situations where the developer almost certainly wanted the old weak-linking behavior.  Go falls into this bucket and we shouldn't add `-no_weak_imports` here.\r\n\r\nOkay, so a few thoughts on how to proceed:\r\n  - If there's a way to detect when the project is passing `-mmacos-version-min=` and avoid adding `-no_weak_imports`, that's almost certainly a good thing to do.  If not, you'll need an opt-out for such projects.\r\n  - Only applying the flag when `OS < SDK` will likely result in fewer broken builds for users, but also hides issues that only occur when in that situation.  e.g. if that was the current behavior, we wouldn't know that Go was broken in that situation.\r\n\r\nHope that helps!  (Also, CC @jeremyhu in case he has other thoughts.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240813420,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T18:29:52Z",
		"body" : "> If there's a way to detect when the project is passing -mmacos-version-min= and avoid adding -no_weak_imports, that's almost certainly a good thing to do. If not, you'll need an opt-out for such projects.\r\n\r\n@achivetta Thanks, that's really helpful. There is a way to do this but only on a single compiler invocation e.g. if you pass `clang -mmacos-version-min=10.6 -Wl,no_weak_imports` we can filter out the `-Wl,no_weak_imports` but if e.g. `clang -mmacos-version-min=10.6` was used by one call and `clang -Wl,no_weak_imports` by another we would not be able to filter that out as we don't track state between compiler invocations. Do you think it would be sufficient to filter just within a single invocation?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240815630,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-18T18:37:22Z",
		"body" : "aside: `-mmacos-version-min` can also be specified as the `MACOSX_DEPLOYMENT_TARGET` environment variable (see `man clang`) but I don't think that alone changes the feasibility of the superenv approach",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240831332,
		"user" : {
			"login" : "achivetta"
		},
		"created_at" : "2016-08-18T19:32:01Z",
		"body" : "@MikeMcQuaid The problem with a per-compiler-invocation approach is that you need the `-no_weak_imports` flag at link time, but the deployment target takes effect at compile time.  I'm not sure how it would work out for e.g. Go which I suspect does have different deployment targets per compilation unit.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240861184,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T21:22:38Z",
		"body" : "Ideally and if we could auto-detect if a formula properly supports compiling against a macOS SDK and can properly deal with the situation that OS/deployment version < SDK version, we could consider turning off some of the adjustments made by our `superenv`. But since this is unlikely to be possible in practice, I think this PR solves this nicely on a formula-by-formula basis for those (relatively rare) cases where some of our adjustments don't really make sense.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 241047797,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T15:19:52Z",
		"body" : "Thanks everyone. Think it's worth üö¢ing this as-is for now and we'll rethink later if we need to start whitelisting too many formulae.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 741
	},
	{
		"id" : 240663348,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T08:53:49Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 742
	},
	{
		"id" : 240731941,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-18T14:01:39Z",
		"body" : "One nit, but looks solid to me at least. Thanks for putting the work in üôá. Writing documentation isn't the most fun use of anyone's time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 743
	},
	{
		"id" : 240717533,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T13:08:43Z",
		"body" : "And here's another one: https://github.com/Homebrew/homebrew-core/blob/master/Formula/datomic.rb#L4-L5",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240718121,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T13:11:22Z",
		"body" : "üëç but add a test to `test_versions` for these cases.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240726570,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T13:43:01Z",
		"body" : "@MikeMcQuaid haha it was already in there!\r\n```\r\n    # URL with no extension\r\n    # e.g. https://waf.io/waf-1.8.12\r\n    # e.g. https://codeload.github.com/gsamokovarov/jump/tar.gz/v0.7.1\r\n    m = /[-v]((?:\\d+\\.)*\\d+)$/.match(spec_s)\r\n```\r\nLooks like the \"correct\" fix is\r\n```\r\nm = /[-v]?((?:\\d+\\.)*\\d+)$/.match(spec_s)\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240728000,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T13:48:06Z",
		"body" : "That will breaks others, so looks like this fix is better.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240729060,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T13:51:38Z",
		"body" : "@MikeMcQuaid PR refreshed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240745992,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T14:46:30Z",
		"body" : "üö¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240829246,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T19:24:34Z",
		"body" : "@MikeMcQuaid any idea what's going on here?\r\n```\r\n$ git push\r\nCounting objects: 7, done.\r\nDelta compression using up to 8 threads.\r\nCompressing objects: 100% (7/7), done.\r\nWriting objects: 100% (7/7), 951 bytes | 0 bytes/s, done.\r\nTotal 7 (delta 5), reused 0 (delta 0)\r\nremote: Resolving deltas: 100% (5/5), completed with 5 local objects.\r\nremote: error: GH006: Protected branch update failed for refs/heads/master.\r\nremote: error: Required status check \"default\" is expected\r\nTo https://github.com/Homebrew/brew\r\n ! [remote rejected] master -> master (protected branch hook declined)\r\nerror: failed to push some refs to 'https://github.com/Homebrew/brew'\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240830662,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-18T19:29:26Z",
		"body" : "Oh, Mike banned pushing. You'll need to literally merge it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240830860,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T19:30:10Z",
		"body" : "Huh? Why?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240831794,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T19:33:51Z",
		"body" : "Are you saying we have to interact with the brew repo via the web browser to merge anything? Or is there some way this can be done from CLI? Please tell me it's the latter, or I must be in Twilight zone.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240831850,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-18T19:34:02Z",
		"body" : "Mostly to make sure everything goes through a successful PR (and its various tests) first. There's no way to communicate to GitHub that a PR has passed & is safe to merge via the `brew pull` mechanism.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240832144,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-18T19:35:10Z",
		"body" : "Possibly my fault. I accidentally nicked his PR by pushing directly üòÑ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240833019,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T19:38:28Z",
		"body" : "@DomT4 sounds like a slight overreaction :scream: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240833623,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-18T19:40:50Z",
		"body" : "I loathe merge commits with a sort of unholy passion, and they're the only way to preserve GPG signing of commits from the GitHub interface, so I'm not in love with the block, but I understand the reasoning for it & theoretically it'll prevent breakage from creeping in more than the current system has.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240834725,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T19:45:12Z",
		"body" : "@DomT4 `hub merge` command works fine so I've stopped caring now. But I agree merge commits are pretty much awful.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240853982,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T20:56:24Z",
		"body" : "`hub merge` or I believe just doing a merge on the command-line. It needs to ensure that the SHA1 that was tested is the one that's merged.\r\n\r\nAs @DomT4 says: they preserve GPG and they provide a pointer to the PR the commit came from (which `brew pull` loses with multi-commit PRs which most are in Homebrew/brew nowadays).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240868634,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-18T21:51:53Z",
		"body" : "@MikeMcQuaid the biggest problem is timestamps don't get updated unless you manually bump them, so just about everything ends up with dates older than when they actually were committed and the history becomes unintelligible in terms of actual chronological order of commits let alone when they were actually merged but :see_no_evil: as long as it works from CLI.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 744
	},
	{
		"id" : 240755654,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-18T15:15:17Z",
		"body" : "Can you post the outputs of `brew config` and `brew doctor`, please?\r\n\r\n> Do you honestly think BREW is the only application running in that directory?\r\n\r\n`/usr/local/Library` does not exist by default and I'm not aware of any other applications that use it.  What else do you have in it?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 745
	},
	{
		"id" : 240757192,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-18T15:20:06Z",
		"body" : "> The Brew Uninstall is absolute madness. You want me to consent to removing /usr/local/Library/? That's insane. Do you honestly think BREW is the only application running in that directory?\r\n> \r\n> Further why is Brew dumping files like the README.md into the /usr/local/? This is totally amature.\r\n\r\nNot interested in spending our free time helping people who are going to call us names.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 745
	},
	{
		"id" : 244579442,
		"user" : {
			"login" : "ihoskins"
		},
		"created_at" : "2016-09-04T01:45:53Z",
		"body" : "I too am getting the exact same results as @spencerthayer. I am running OX X 10.10.5",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 745
	},
	{
		"id" : 244579776,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-04T01:59:17Z",
		"body" : "@ihoskins Better to open a new Issue in this sort of case, but try:\r\n```bash\r\ncd /usr/local && git fetch && git reset --hard origin/master\r\n```\r\nPresuming your Homebrew is in `/usr/local`, first.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 745
	},
	{
		"id" : 244582478,
		"user" : {
			"login" : "ihoskins"
		},
		"created_at" : "2016-09-04T03:37:51Z",
		"body" : "That worked. Thank you!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 745
	},
	{
		"id" : 240873240,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-18T22:12:26Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 746
	},
	{
		"id" : 240903801,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-19T01:26:00Z",
		"body" : "Heh. _This_ explains the typo someone made in a PR a while ago that made me wonder how they managed to mistype it when most people just copy/paste the URL bar.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 746
	},
	{
		"id" : 240996273,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T11:38:42Z",
		"body" : "> have to be installed before running brew cask-tests, otherwise some of the container tests will be skipped.\r\n\r\nLonger-term we need to figure out a way of testing these things that doesn't require additional dependencies being installed on our bots (like `brew tests` does). Eventually we'll want to merge `brew tests` and `brew cask-tests` too.\r\n\r\nUnfortunately the `brew install` does an implicit tap of homebrew/core which will be relatively slow. Where are the casks stored in this case? It's not testing a `/usr/local` Homebrew install.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 747
	},
	{
		"id" : 241055332,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-19T15:47:10Z",
		"body" : "> Longer-term we need to figure out a way of testing these things that doesn't require additional dependencies\r\n\r\nI completely agree, however, I don't see a way to test the correct detection and extraction of containers without having the tools to extract them installed. I think we can neglect at least `cabextract` and `xz` for now, as there aren't any Casks using them. Also only one using `unar` will be left after https://github.com/caskroom/homebrew-cask/pull/23918 is merge.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 747
	},
	{
		"id" : 241056521,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T15:51:43Z",
		"body" : "> I completely agree, however, I don't see a way to test the correct detection and extraction of containers without having the tools to extract them installed. I think we can neglect at least cabextract and xz for now, as there aren't any Casks using them.\r\n\r\nSounds like a good argument to üíÄ that code üòâ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 747
	},
	{
		"id" : 249402696,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-25T04:49:50Z",
		"body" : ":-1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 747
	},
	{
		"id" : 249800879,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:31:59Z",
		"body" : "Passing on this because I'd like to get `brew cask-tests` so it doesn't require `caskroom` to be tapped and this is going in the opposite direction.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 747
	},
	{
		"id" : 240907982,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-19T01:58:12Z",
		"body" : "That merge commit tho üò≠ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 748
	},
	{
		"id" : 241015580,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-19T13:17:22Z",
		"body" : "Thanks",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 749
	},
	{
		"id" : 241016461,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T13:21:23Z",
		"body" : "Nice work @vladshablinsky!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 749
	},
	{
		"id" : 240998454,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T11:51:37Z",
		"body" : "> Now i read on most posts i need to install and link it with brew but the link fails.\r\n\r\nThose posts are now wrong, unfortunately. I'm not sure what you need to do with phpbrew now. Better to ask them. Sorry!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 751
	},
	{
		"id" : 240999192,
		"user" : {
			"login" : "cdekok"
		},
		"created_at" : "2016-08-19T11:55:28Z",
		"body" : "Ok i found out already you can specify the path, i guess most posts are outdated i found on google.\r\nphpbrew --debug install 5.4 -- --with-openssl=/usr/local/opt/openssl",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 751
	},
	{
		"id" : 242308221,
		"user" : {
			"login" : "drem-darios"
		},
		"created_at" : "2016-08-25T07:53:43Z",
		"body" : "I'm seeing this issue just trying to install openssl. I run the command brew link --force openssl and I see the error above. I don't think it has anything to do with phpbrew. Is there a solution to this issue?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 751
	},
	{
		"id" : 242331635,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-25T09:38:31Z",
		"body" : "@drem-darios We don't support `brew link --force openssl` any more for the reasons described when you run the command.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 751
	},
	{
		"id" : 241030977,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T14:19:06Z",
		"body" : "Someone will need to open a pull request. Could you try and open a pull request? [This document](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md#how-to-open-a-homebrew-pull-request-and-get-it-merged) should help and I'm happy to walk you through anything else.\r\n\r\nThanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 753
	},
	{
		"id" : 241030747,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T14:18:14Z",
		"body" : "We don't currently support this but if you're interested then we'll review and may consider including a PR to add this. CC @tdsmith in case he disagrees!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 754
	},
	{
		"id" : 241042691,
		"user" : {
			"login" : "kirk86"
		},
		"created_at" : "2016-08-19T15:01:30Z",
		"body" : "@MikeMcQuaid certainly many would find that useful including myself. Thanks",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 754
	},
	{
		"id" : 241034821,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T14:33:09Z",
		"body" : "> I will shortly be opening a PR that addresses this by implementing option 1 above. Option 2 feels like treating the symptom rather than the cause.\r\n\r\nCool, thanks. Just FYI I'm going to close this great write-up out just because if you're going to open a PR then we can defer to that PR rather than keeping this issue open. Thanks again!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 755
	},
	{
		"id" : 241042976,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T15:02:33Z",
		"body" : "Makes sense to me üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 757
	},
	{
		"id" : 241132752,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-19T20:55:19Z",
		"body" : ":+1: Agreed, this tweak makes a lot of sense. I think we can merge as soon as the build turns green. (I rescheduled the CI build as it had previously failed for unrelated reasons.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 757
	},
	{
		"id" : 241189911,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-20T09:36:09Z",
		"body" : "Thanks for your contribution and this tweak to the `bump-formula-pr` command, @jasonkarns! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 757
	},
	{
		"id" : 241134137,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T21:01:28Z",
		"body" : "Thanks @reitermarkus!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 758
	},
	{
		"id" : 241082281,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-19T17:32:03Z",
		"body" : "We'll accept PRs to remove them.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 759
	},
	{
		"id" : 241087694,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-08-19T17:52:06Z",
		"body" : "I know nothing of cask, so I can't do it.  But I hope that someone who knows what they're doing can replace that huge dmg with something smaller.  And preferably the `caffeine` ones with smaller dummies, too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 759
	},
	{
		"id" : 241090658,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-08-19T18:02:51Z",
		"body" : "(As an aside: if `brew` is eventually going to be a cross-platform gem, why is cask infrastructure being pulled in at all?  Non-mac users will have no use for it, but it's tripled the size of HB and---if memory serves---sextupled the size of a shallow clone of the `brew` repo.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 759
	},
	{
		"id" : 241205316,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-20T15:10:19Z",
		"body" : "> (As an aside: if brew is eventually going to be a cross-platform gem, why is cask infrastructure being pulled in at all? Non-mac users will have no use for it, but it's tripled the size of HB and---if memory serves---sextupled the size of a shallow clone of the brew repo.)\r\n\r\nThe shallow clone will shrink as we are able to merge more core. It's been integrated because it still seems to have a larger userbase than e.g. Linuxbrew and that code being included is not harming anyone who does not run it.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 759
	},
	{
		"id" : 241130869,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-19T20:47:48Z",
		"body" : "This makes a lot of sense to me, but would prefer @ilovezfs as the most prominent user of this developer command to chime in and comment on this, too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 760
	},
	{
		"id" : 241176983,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-20T03:53:26Z",
		"body" : "```\r\ne9da9f0d (ilovezfs         2016-07-06 05:00:45 -0700 218)         safe_system \"git\", \"checkout\", \"-\"\r\n```\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 760
	},
	{
		"id" : 241189934,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-20T09:36:51Z",
		"body" : "Thanks for your contribution and this tweak to the `bump-formula-pr` command, @jasonkarns! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 760
	},
	{
		"id" : 241234482,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-21T02:02:11Z",
		"body" : "Fixed in https://github.com/Homebrew/brew/pull/768.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 761
	},
	{
		"id" : 241249864,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-21T10:28:41Z",
		"body" : "Thanks again @rwhogg!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 762
	},
	{
		"id" : 241185525,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-20T07:45:25Z",
		"body" : "Nice work üëè ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 763
	},
	{
		"id" : 241208764,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-20T16:15:03Z",
		"body" : "> Nice work :clap:\r\n\r\nWell, at least now I know how to build an Adobe AIR app, just because I needed to make a dummy one. :joy: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 763
	},
	{
		"id" : 241239771,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-08-21T05:24:33Z",
		"body" : "Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 763
	},
	{
		"id" : 241185582,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-20T07:47:16Z",
		"body" : "üòç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 764
	},
	{
		"id" : 241185577,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-20T07:47:01Z",
		"body" : "Loving your work already @reitermarkus!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 765
	},
	{
		"id" : 241204938,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-20T15:02:42Z",
		"body" : "> HOMEBREW_NO_RUBY_MACHO\r\n\r\nIn what situation(s) would one set that? I'm wondering if it's worth just deleting the existing code now?\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 767
	},
	{
		"id" : 241205349,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-08-20T15:10:53Z",
		"body" : "> In what situation(s) would one set that? I'm wondering if it's worth just deleting the existing code now?\r\n\r\nIn the unlikely event that we run into any bugs immediately after rolling this out, we could tell people to set `HOMEBREW_NO_RUBY_MACHO` as a quick fix. \r\n\r\nI discussed this with @UniqMartin in a PM on slack, and 2-3 weeks seems like a good rollout period to us. If nothing substantial happens after that, we can simply delete the `cctools`-based implementation and the environment checks associated with it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 767
	},
	{
		"id" : 241205438,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-20T15:12:23Z",
		"body" : "> I discussed this with @UniqMartin in a PM on slack, and 2-3 weeks seems like a good rollout period to us. If nothing substantial happens after that, we can simply delete the cctools-based implementation and the environment checks associated with it.\r\n\r\nüëç seems like a good plan to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 767
	},
	{
		"id" : 241205631,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-20T15:15:47Z",
		"body" : "> > HOMEBREW_NO_RUBY_MACHO\r\n>\r\n> In what situation(s) would one set that? I'm wondering if it's worth just deleting the existing code now?\r\n\r\nAs already mentioned by @woodruffw, that's a temporary measure suggested by me.\r\n\r\nThe other motivation is to ship this feature and thus formally finalize William's GSoC project (with the stated goal of enabling the code for all Homebrew users) with a minimal PR that can be shipped more quickly than a thorough cleanup. (But we definitely aim for a proper cleanup.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 767
	},
	{
		"id" : 241679919,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T09:41:00Z",
		"body" : "Hooray üëè ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 767
	},
	{
		"id" : 241680180,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-23T09:42:02Z",
		"body" : "Thanks @woodruffw; great work! :tada: And sorry for the delay ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 767
	},
	{
		"id" : 241737248,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-08-23T13:51:00Z",
		"body" : "No problem! Glad to :ship: this out!  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 767
	},
	{
		"id" : 241210200,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-20T16:42:27Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 769
	},
	{
		"id" : 241249698,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-21T10:24:43Z",
		"body" : "@ilovezfs Why the close?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 770
	},
	{
		"id" : 241249732,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-21T10:25:37Z",
		"body" : "lack of patience",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 770
	},
	{
		"id" : 247824389,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T04:16:42Z",
		"body" : "I have some patience lying around. Picking this up in #1004.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 770
	},
	{
		"id" : 247825555,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-18T04:56:23Z",
		"body" : "Thanks Andrew",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 770
	},
	{
		"id" : 241249973,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-21T10:31:13Z",
		"body" : "Great work. This is the type of refactoring I'm looking forward to.\r\n\r\nJust FYI: longer-term we should look at merging `brew tests` and `brew cask-tests` together into a single test run.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 772
	},
	{
		"id" : 241250074,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-21T10:33:26Z",
		"body" : "> Not actually sure if this is even possible with the current setup, so I might need some help with this.\r\n\r\nI think it's not; pretty sure Coveralls will only take a single test run's worth of coverage so to get this reporting again we'll need to make `brew cask-tests` part of `brew tests` and report a single coverage figure for everything.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 773
	},
	{
		"id" : 242716766,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-26T12:03:10Z",
		"body" : "Nice, it's working now!\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 773
	},
	{
		"id" : 242718597,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-26T12:10:20Z",
		"body" : "@reitermarkus Reporting both?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 773
	},
	{
		"id" : 242720193,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-26T12:18:04Z",
		"body" : "Yes, just rebased so this will take a while again to show up. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 773
	},
	{
		"id" : 242730845,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-26T13:10:05Z",
		"body" : "![bildschirmfoto 2016-08-26 um 15 09 24](https://cloud.githubusercontent.com/assets/1309829/18006282/27e2bfd4-6b9f-11e6-8326-dcfc41c64bee.png)\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 773
	},
	{
		"id" : 242735176,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-26T13:28:20Z",
		"body" : "Looks like it's covering a bunch of stuff it wasn't before too üéâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 773
	},
	{
		"id" : 242901797,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-27T07:23:11Z",
		"body" : "Looks good to me (particularly the numbers üòç) but will let @UniqMartin give this a once over as he's worked on this coverage stuff in the past for us.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 773
	},
	{
		"id" : 243914322,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-31T21:52:48Z",
		"body" : "@UniqMartin, feel free to merge this if you don't have any objections.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 773
	},
	{
		"id" : 241250084,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-21T10:33:48Z",
		"body" : "> did run sudo chown on the /usr/local and then run again brew reinstall mono - same result.\r\n\r\nWhat command exactly did you run? Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 774
	},
	{
		"id" : 241267566,
		"user" : {
			"login" : "MaurGi"
		},
		"created_at" : "2016-08-21T16:36:08Z",
		"body" : "Before I run this:\r\nsudo chown -R $(whoami) $(brew --prefix)\r\n\r\nNow it got fixed with the following:\r\n   44  brew update\r\n   45  brew update\r\n   46  brew doctor\r\n   47  sudo chown -R $(whoami) /usr/local\r\n   48  gcc\r\n   49  xcode-select --install\r\n   50  brew upgrade\r\n   54  brew reinstall mono\r\n\r\nclosing the issue, thx",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 774
	},
	{
		"id" : 247825220,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T04:44:22Z",
		"body" : "Have a look at #1004 and let me know what you think.\r\n\r\n```\r\n$ brew info mpv\r\nmpv: stable 0.20.0 (bottled), HEAD\r\n...\r\n==> Requirements\r\nRequired: python3 ‚úî, minimummacos = 10.8 ‚úî\r\nOptional: x11 ‚úî\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 775
	},
	{
		"id" : 247825246,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T04:45:29Z",
		"body" : "`minimummacos` isn't very recognizable, might need a better `display_s`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 775
	},
	{
		"id" : 247825596,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T04:57:20Z",
		"body" : "How about `MinMacOS = 10.8`? Or are you concerned about the numeric vs. names like `:yosemite`/`:el_cap`/etc?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 775
	},
	{
		"id" : 247825630,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T04:58:19Z",
		"body" : "Probably, `MinimumMacOS` and `MaximumMacOS` are better, because they align with the DSL and are readable.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 775
	},
	{
		"id" : 247825743,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T05:01:37Z",
		"body" : "I think `minimum/min macOS version` and `maximum/max macOS version` would be clearer and look nicer, but no objection to `MinimumMacOS`.\r\n\r\n> Or are you concerned about the numeric vs. names like :yosemite/:el_cap/etc?\r\n\r\nNot at all. One day some people will forget what Lion is, just like I don't know what Panther is right now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 775
	},
	{
		"id" : 247825787,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T05:03:21Z",
		"body" : "Cool. I think the numbers work better too.\r\n\r\nI lean toward the run-together `MinimumMacOS`/`MaximumMacOS` because they're closer to the DSL. Pushed an amended commit to the PR.\r\n\r\nShall we move this conversation over to the PR itself? https://github.com/Homebrew/brew/pull/1004",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 775
	},
	{
		"id" : 247825810,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T05:04:15Z",
		"body" : "Sure.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 775
	},
	{
		"id" : 241673865,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T09:16:28Z",
		"body" : "> Homebrew's approach has generally been \"don't include implementation code that isn't actually used by our functionality.\r\n\r\nYep üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 777
	},
	{
		"id" : 241670994,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T09:04:23Z",
		"body" : "Merged but please feel free to make retroactive comments and I'll address them in a follow-up PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 778
	},
	{
		"id" : 241719950,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-23T12:51:28Z",
		"body" : "> Otherwise it can end up as e.g. `bin/git` [‚Ä¶]\r\n\r\nWhat are the circumstances where this can happen? Our `git` shim should be always returning an absolute path and I believe it already does in most cases.\r\n\r\nI think it would be best to fix this in the shim (for the few cases that aren't guaranteed to return an absolute path yet) and then to revert this change. That way also other code that uses the shim (e.g. our Ruby code) would benefit from this fix.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 778
	},
	{
		"id" : 241721585,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T12:58:04Z",
		"body" : "> What are the circumstances where this can happen? Our git shim should be always returning an absolute path and I believe it already does in most cases.\r\n\r\nIt started happening since I moved my HOMEBREW_REPOSITORY to `/usr/local/homebrew/bin`. I wasn't aware until I just looked that the intentional was for that shim to always return a full path; I'll investigate why it did not.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 778
	},
	{
		"id" : 241728866,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-23T13:24:53Z",
		"body" : "> I'll investigate why it did not.\r\n\r\nThanks! My understanding is that the main aim of this shim is to be a more sophisticated `which git` if `--homebrew=print-path` is passed and to execute the located `git` binary otherwise. Do you happen to have relative paths in your `PATH` variable that could be triggering this behavior?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 778
	},
	{
		"id" : 241730404,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T13:29:35Z",
		"body" : "> Do you happen to have relative paths in your PATH variable that could be triggering this behavior?\r\n\r\nI do. That's the trigger.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 778
	},
	{
		"id" : 241653413,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T07:46:20Z",
		"body" : "@chdiza In your setup it means `/usr/local/homebrew/bin` is still functional rather than complaining about the lack of ` /usr/local/homebrew/Cellar/`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 779
	},
	{
		"id" : 241742820,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-23T14:09:08Z",
		"body" : "Apologies in advance if I'm sounding rather negative. There are things I don't particularly like about this PR at the moment:\r\n\r\n- I don't fully understand why a user would want to invoke a Homebrew that they have installed in `/usr/local/homebrew` (and where the prefix is `/usr/local`) by directly invoking `/usr/local/homebrew/bin/brew`. Shouldn't such a user rely on `/usr/local/bin` and make sure not to add `/usr/local/homebrew/bin` to PATH?\r\n  - I just realized this is motivated in the PR body by having `bin` in PATH which is IMO a really bad idea, as it makes pretty much every invocation on the command line context-sensitive (the context being the current working directory). A lot of code isn't prepared to deal with relative paths in PATH (including our own code as #778 has revealed).\r\n\r\n- We're special-casing `/usr/local` here. The same logic won't help if Homebrew is installed outside of `/usr/local` and `HOMEBREW_PREFIX != HOMEBREW_REPOSITORY`.\r\n\r\n- <sup>(#)</sup>The mere presence of a `/usr/local/bin/brew` symlink alters the behavior of `bin/brew`. It will reset `HOMEBREW_PREFIX` to `/usr/local` no matter what `/usr/local/bin/brew` resolves to and no matter where the currently executing `bin/brew` lives in (or whether it is related to `/usr/local/bin/brew` at all).\r\n\r\n<sup>(#)</sup>I'm pretty sure that's just a bug in the current implementation and not intended.\r\n\r\n----\r\n\r\nI wonder if all of this could be addressed more elegantly and without being limited to `/usr/local` if we kept a link (or simple text file) somewhere in `HOMEBREW_REPOSITORY` that points back to `HOMEBREW_PREFIX`. We only support a 1:1 relationship between the two, so that should be fine. That back link could be established on Homebrew install or on the first `bin/brew` invocation that finds this back link to be missing (in the hopes that the first invocation will run the correct `bin/brew`).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 779
	},
	{
		"id" : 241744785,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T14:15:12Z",
		"body" : "> I just realized this is motivated in the PR body by having bin in PATH which is IMO a really bad idea\r\n\r\nYou thinking it a bad idea does not mean we should not fixed bugs revealed by it. Most tools work fine with this PATH: we should too.\r\n\r\n> We're special-casing /usr/local here. The same logic won't help if Homebrew is installed outside of /usr/local and HOMEBREW_PREFIX != HOMEBREW_REPOSITORY.\r\n\r\nThis is because `/usr/local` is special: it's what you use if you want to use our bottles and is our default `HOMEBREW_PREFIX`. I'm not aiming to improve this case for every situation, just the `/usr/local` `HOMEBREW_PREFIX` and different `HOMEBREW_REPOSITORY`.\r\n\r\n> I wonder if all of this could be addressed more elegantly and without being limited to /usr/local if we kept a link (or simple text file) somewhere in HOMEBREW_REPOSITORY that points back to HOMEBREW_PREFIX.\r\n\r\nI think it's more elegant to not require a separate file be added and maintained when the symlink does this for you.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 779
	},
	{
		"id" : 241762493,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-23T15:06:34Z",
		"body" : "> You thinking it a bad idea does not mean we should not fixed bugs revealed by it.\r\n\r\nI agree that we should fix bugs, irrespective of whether I think some particular user setup is a good or bad idea. I don't agree that the observed behavior is a bug. Homebrew has been inferring its prefix and repository path solely from the path it has been invoked with since its conception. If this changes due to the presence or absence of a symbolic link at a hard-coded location, that's a change that will result in surprising and inconsistent behavior for users that have a setup similar to you and happen to have Homebrew installed outside of `/usr/local`.\r\n\r\n> I think it's more elegant to not require a separate file be added and maintained when the symlink does this for you.\r\n\r\nI agree that maintaining a separate file is usually a bad idea. However, I was presenting an idea for an alternative solution that hasn't been fully fleshed out and that would work consistently and independently of where Homebrew is installed. Your proposed solution only works for `/usr/local`. For the record, I'm not claiming my idea is superior, just that our solutions/ideas have different characteristics and thus your solution works without an auxiliary file precisely because it ignores the possibility of installing Homebrew outside of `/usr/local`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 779
	},
	{
		"id" : 241764423,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T15:12:18Z",
		"body" : "> I don't agree that the observed behavior is a bug.\r\n\r\nIt isn't but it is very annoying if you're a Homebrew developer and running `git` and `brew` command without changing directory.\r\n\r\n> Your proposed solution only works for /usr/local.\r\n\r\nI'm unconcerned by this; it could be extended by interested parties but I think the `/usr/local` situation is the most important one to optimise for as it gets us bottles. Beyond that, I'm seriously investigating changing our default prefix and this will annoy more people than just me if it changes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 779
	},
	{
		"id" : 241766582,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-23T15:18:27Z",
		"body" : "> It isn't but it is very annoying if you're a Homebrew developer and running git and brew command without changing directory.\r\n\r\nNot sure if this would work for you and whether you would consider this an option, but `alias brew=/usr/local/bin/brew` might be a viable workaround for your particular setup.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 779
	},
	{
		"id" : 241839896,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T18:57:39Z",
		"body" : "> Not sure if this would work for you and whether you would consider this an option, but alias brew=/usr/local/bin/brew might be a viable workaround for your particular setup.\r\n\r\nIt would not, unfortunately.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 779
	},
	{
		"id" : 242013693,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T09:57:23Z",
		"body" : "I've fixed the implementation bugs and made the implementation more readable.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 779
	},
	{
		"id" : 242013775,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T09:57:44Z",
		"body" : "(and added some comments to the rather opaque existing code)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 779
	},
	{
		"id" : 242021970,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-24T10:35:21Z",
		"body" : "Kudos for the cleanup and the documentation! I believe the code is now doing what it was originally supposed to do. From a purely technical point of view, I'm happy with this PR now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 779
	},
	{
		"id" : 241656456,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T08:00:39Z",
		"body" : "> As long as this doesn't prevent someone from making (say) /usr/local/homebrew be both PREFIX and REPOSITORY, it seems fine.\r\n\r\n@chdiza It would not.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 780
	},
	{
		"id" : 241673138,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T09:13:35Z",
		"body" : "> Note: this is probably something we may need a smarter migration to handle that this but thought I'd open the easy PR to get some thoughts.\r\n\r\nI've changed the approach here so this will only affect people who don't have `$HOMEBREW_REPOSITORY/Cellar` already existing so it's tweaking the defaults for new `Cellar`s in `/usr/local` and `/usr/local/bin/brew` rather than moving any existing Cellar.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 780
	},
	{
		"id" : 241751031,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-23T14:33:26Z",
		"body" : "How about instead of further complicating the logic, we simply change the default (if no `Cellar` directory exists yet) for all users to a `Cellar` in `HOMEBREW_PREFIX` instead of `HOMEBREW_REPOSITORY`? The following code would accomplish this:\r\n\r\n```shell\r\n# Where we store built products; a Cellar in HOMEBREW_PREFIX (often /usr/local)\r\n# unless there's already a Cellar in HOMEBREW_REPOSITORY.\r\nif [[ -d \"$HOMEBREW_REPOSITORY/Cellar\" ]]\r\nthen\r\n  HOMEBREW_CELLAR=\"$HOMEBREW_REPOSITORY/Cellar\"\r\nelse\r\n  HOMEBREW_CELLAR=\"$HOMEBREW_PREFIX/Cellar\"\r\nfi\r\n```\r\n\r\nThe only users for which this might cause trouble are users that have `HOMEBREW_PREFIX` different from `HOMEBREW_REPOSITORY` and that (unexpectedly) have a `Cellar` directory in both. (We could address this potential problem by checking for the existence of both in a `brew doctor` check if we think this is a likely enough scenario.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 780
	},
	{
		"id" : 241756294,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T14:48:46Z",
		"body" : "> The only users for which this might cause trouble are users that have HOMEBREW_PREFIX different from HOMEBREW_REPOSITORY and that (unexpectedly) have a Cellar directory in both. (We could address this potential problem by checking for the existence of both in a brew doctor check if we think this is a likely enough scenario.)\r\n\r\n@UniqMartin That makes sense to me and seems suitably non-disruptive üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 780
	},
	{
		"id" : 242151936,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-24T17:50:34Z",
		"body" : ":tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 780
	},
	{
		"id" : 241656643,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T08:01:35Z",
		"body" : "> The user doing my trick will still have to manually symlink bin/brew and share/doc/homebrew, so I'm not sure this is much of a gain. But I also don't see why it would be harmful.\r\n\r\n@chdiza Yep. I'm planning on moving around `share/doc/homebrew` eventually (to `doc`) and the `bin/brew` will always have to be somewhat manual (or done by the installer if that becomes default). There's also missing Bash completion linkage.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 783
	},
	{
		"id" : 241788199,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-23T16:15:47Z",
		"body" : "Could we refactor this instead of basically duplicating [`Tap#link_manpages`](https://github.com/Homebrew/brew/blob/cb700b67e2a935feb19464afb9d23b2fc4b11c4e/Library/Homebrew/tap.rb#L250-L271)? As far as I can see, the main difference is the source directory that contains the man pages to be linked.\r\n\r\nAnother thing that would be nice to have, though it could also be postponed until this becomes relevant, would be to clean up stale symlinks once man pages are removed.\r\n\r\nFinally, it would be great to either eliminate or adjust [the related code behind `brew man --link`](https://github.com/Homebrew/brew/blob/cb700b67e2a935feb19464afb9d23b2fc4b11c4e/Library/Homebrew/cmd/man.rb#L22-L32).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 783
	},
	{
		"id" : 241839316,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T18:55:41Z",
		"body" : "@UniqMartin I don't think they are duplicated in this place; I don't think it rewarrants the refactoring for two cases that are fairly similar but not identical in their logic. I think \"the rule of three\" is useful here; I think the deduplication for a single other non-identical use will make the code harder rather than easier to follow.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 783
	},
	{
		"id" : 241842749,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-23T19:06:55Z",
		"body" : "```diff\r\ndiff --git 1/link-man-brew.rb 2/link-man-tap.rb\r\nindex 29a03668..bd92a60e 100644\r\n--- 1/link-man-brew.rb\r\n+++ 2/link-man-tap.rb\r\n@@ -1,10 +1,9 @@\r\n def link_manpages\r\n-  return if HOMEBREW_PREFIX.to_s == HOMEBREW_REPOSITORY.to_s\r\n+  return unless (path/\"man\").exist?\r\n   conflicts = []\r\n-  Dir[\"#{HOMEBREW_REPOSITORY}/share/man/man1/*.1\"].each do |src|\r\n-    src = Pathname(src)\r\n+  (path/\"man\").find do |src|\r\n     next if src.directory?\r\n-    dst = HOMEBREW_PREFIX/\"share/man/man1/#{src.basename}\"\r\n+    dst = HOMEBREW_PREFIX/\"share\"/src.relative_path_from(path)\r\n     next if dst.symlink? && src == dst.resolved_path\r\n     if dst.exist?\r\n       conflicts << dst\r\n@@ -16,7 +15,7 @@ def link_manpages\r\n     onoe <<-EOS.undent\r\n       Could not link #{name} manpages to:\r\n         #{conflicts.join(\"\\n\")}\r\n-      Please delete these files and run `brew update` again.\r\n+      Please delete these files and run `brew tap --repair`.\r\n     EOS\r\n   end\r\n end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 783
	},
	{
		"id" : 241977397,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T07:15:41Z",
		"body" : "@UniqMartin That's almost half the function content differing, more than I though, so I think that supports my argument more than it contradicts it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 783
	},
	{
		"id" : 242002663,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T09:09:48Z",
		"body" : "> Finally, it would be great to either eliminate or adjust the related code behind brew man --link.\r\n\r\nDone.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 783
	},
	{
		"id" : 242014337,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-24T10:00:18Z",
		"body" : "One final minor suggestions, but otherwise :+1:.\r\n\r\n> That's almost half the function content differing, more than I though, so I think that supports my argument more than it contradicts it.\r\n\r\nThe difference would only be a single line (one line in the conflict message), if `path` was a method argument and `link_manpage` was invoked as follows:\r\n\r\n```ruby\r\nif HOMEBREW_PREFIX.to_s != HOMEBREW_REPOSITORY.to_s\r\n  link_manpage(HOMEBREW_REPOSITORY/\"share\")\r\nend\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 783
	},
	{
		"id" : 242016183,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T10:08:27Z",
		"body" : "@UniqMartin Hopefully to put a üíµ in the pedantry bank for spending elsewhere I've moved the logic to utils üòâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 783
	},
	{
		"id" : 242019751,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-24T10:24:40Z",
		"body" : "That's nice; thanks! To be honest, I'd already given up on convincing you and consequently :+1:ed the previous unrefactored version. I can only hope this new version was born out of a sufficiently convincing argument and not out of the desire to finally silence me. üôà\r\n\r\n> Hopefully to put a üíµ in the pedantry bank for spending elsewhere I've moved the logic to utils üòâ\r\n\r\nI suppose the procedure for cashing out is equally lengthy and painful. :wink:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 783
	},
	{
		"id" : 242024784,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T10:49:36Z",
		"body" : "> I can only hope this new version was born out of a sufficiently convincing argument and not out of the desire to finally silence me. üôà\r\n\r\nA bit of both üòâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 783
	},
	{
		"id" : 241674517,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T09:19:14Z",
		"body" : "> I'd submit a PR for this, but my Ruby knowledge is crap.\r\n\r\nJust FYI:\r\n- stuff like this should be in https://github.com/Homebrew/brew-evolution\r\n- the first Ruby I ever wrote was for Homebrew. I'm now writing Ruby full-time at GitHub\r\n\r\nThe best current solution to this is probably using https://github.com/Homebrew/homebrew-bundle to install/remove just the stuff you want. We'll need an implementation of https://github.com/Homebrew/brew-evolution/blob/master/003-install-bottles-of-arbitrary-versions.md#detailed-design first where installations record their dependencies.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 784
	},
	{
		"id" : 241686562,
		"user" : {
			"login" : "Alhadis"
		},
		"created_at" : "2016-08-23T10:09:11Z",
		"body" : "Ah right, sorry. My bad. :(\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 784
	},
	{
		"id" : 241687993,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T10:15:17Z",
		"body" : "No need to apologise! Mostly just closing this out because it's blocked on a few other things.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 784
	},
	{
		"id" : 241615587,
		"user" : {
			"login" : "LumpyChen"
		},
		"created_at" : "2016-08-23T03:17:21Z",
		"body" : "I got the same problem on my vim with lua install (with sudo): \r\n```\r\nbrew install vim --with-lua\r\n```\r\nthe output:\r\n```\r\n==> Using the sandbox\r\n==> Downloading https://github.com/vim/vim/archive/v7.4.2235.tar.\r\n\r\ncurl: (35) SSL certificate problem: Couldn't understand the server certificate format\r\nError: Failed to download resource \"vim\"\r\nDownload failed: https://github.com/vim/vim/archive/v7.4.2235.tar.gz\r\n```\r\nI've been through my  troubleshooting\r\nmy `brew config`:\r\n```\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: a70c60baeacf6ec6835fb0112fb5d1c9dd51012a\r\nLast commit: 4 hours ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 495d9d8eb874263647d318db31f69899f10ad97f\r\nCore tap last commit: 28 minutes ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: quad-core 64-bit broadwell\r\nHomebrew Ruby: 2.0.0-p648\r\nClang: 7.3 build 703\r\nGit: 2.9.3 => /usr/local/bin/git\r\nPerl: /usr/local/bin/perl => /usr/local/Cellar/perl/5.24.0_1/bin/perl\r\nPython: /usr/local/bin/python => /usr/local/Cellar/python/2.7.12/Frameworks/Python.framework/Versions/2.7/bin/python2.7\r\nRuby: /usr/local/bin/ruby => /usr/local/Cellar/ruby/2.3.1/bin/ruby\r\nJava: 1.8.0_102, 1.6.0_65-b14-468\r\nOS X: 10.11.6-x86_64\r\nXcode: 7.3.1\r\nCLT: 7.3.1.0.1.1461711523\r\nX11: N/A\r\n```\r\nAnd there aren't any errors or warnings with `brew doctor` in my mac\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 785
	},
	{
		"id" : 241678913,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T09:36:56Z",
		"body" : "I can't reproduce this. What country are you in @breiter and @LumpyChen and can you still reproduce this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 785
	},
	{
		"id" : 241683541,
		"user" : {
			"login" : "breiter"
		},
		"created_at" : "2016-08-23T09:56:02Z",
		"body" : "Zimbabwe. I have no trouble accessing GitHub through my normal workflow and I can download the relevant files with curl. \n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 785
	},
	{
		"id" : 241684884,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T10:01:53Z",
		"body" : "What does `which curl` show? Do you have `curl` installed through Homebrew?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 785
	},
	{
		"id" : 241690568,
		"user" : {
			"login" : "breiter"
		},
		"created_at" : "2016-08-23T10:27:42Z",
		"body" : "I do have homebrew curl installed but it is not in the `$PATH`. If you look at my original post, I provided output of running the curl command that `brew` builds and it worked. I don't know what else is going on in the execution environment. It didn't seem to be using my GitHub key -- at least the web UI said it had last been accessed by brew 4 days ago. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 785
	},
	{
		"id" : 241691519,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T10:32:18Z",
		"body" : "@breiter Can you still reproduce this if you e.g. use `brew fetch --force`? What happens if you use the Homebrew curl? ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 785
	},
	{
		"id" : 241697354,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T11:00:57Z",
		"body" : "Closing in favour of https://github.com/Homebrew/brew/issues/796 which describes the problem.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 785
	},
	{
		"id" : 241607720,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-23T02:16:06Z",
		"body" : "Changes pushed. Also added a block to the test & ensured the syntax tests are getting run on CI even if the GPG key creation test isn't.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 786
	},
	{
		"id" : 241674948,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T09:20:59Z",
		"body" : "> But I think that's fine, since our use of the sandbox is intended to enforce build hygiene, not to be a security measure against malicious actors, and the env variables are under user control.\r\n\r\nThis is not the case, it's primarily intended to stop buildsystems writing to random locations they shouldn't.\r\n\r\nDo either of you set HOMEBREW_TEMP? If so, would it work for you to have just that whitelisted?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 787
	},
	{
		"id" : 241675036,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T09:21:21Z",
		"body" : "Oh, it already is. May I ask why you don't set that, out of interest?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 787
	},
	{
		"id" : 241735609,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-08-23T13:45:36Z",
		"body" : "I don't have HOMEBREW_TEMP set because I've never needed to, because I have TMPDIR set and that has always worked until sometime *very* recently.  I want my TMPDIR to be for everything, not just Homebrew.\r\n\r\nBut I will see whether leaving my TMPDIR the way it is and setting HOMEBREW_TEMP to point to the same place will work.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 787
	},
	{
		"id" : 241736783,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T13:49:37Z",
		"body" : "My vague inkling is that Homebrew should set `TMPDIR`, `TEMP` and `TMP` to `HOMEBREW_TEMP`'s value.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 787
	},
	{
		"id" : 241745407,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-23T14:17:01Z",
		"body" : "> My vague inkling is that Homebrew should set TMPDIR, TEMP and TMP to HOMEBREW_TEMP's value.\r\n\r\nThat sounds right to me too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 787
	},
	{
		"id" : 241979474,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-08-24T07:26:08Z",
		"body" : "Sorry for replying late; I've been on vacation and didn't have Internet connection for the past day or two.\r\n\r\n@MikeMcQuaid \r\n\r\n> May I ask why you don't set that, out of interest?\r\n\r\nI used to have it set, but didn't bother anymore after repeatedly hitting `#{HOMEBREW_TEMP} is world-writable but does not have the sticky bit set.` (I know, I should be debugging my cron script which was responsible for setting the sticky bit after mounting, but the benefit offered by `HOMEBREW_TEMP` did not seem to be worth the trouble.)\r\n\r\n> My vague inkling is that Homebrew should set TMPDIR, TEMP and TMP to HOMEBREW_TEMP's value.\r\n\r\nThat's a reasonable idea, so I've opened #800. I'm not closing this just yet though, since as mentioned in #800, it's not a perfect solution. Moreover,\r\n\r\n1. `TMPDIR` and such need not be sticky, while `HOMEBREW_TEMP` has to, so people might not be able to point `HOMEBREW_TEMP` to their normal `TMPDIR`;\r\n2. `HOMEBREW_TEMP` kind of fulfills a different and more specific role:\r\n\r\n    ```\r\n       HOMEBREW_TEMP\r\n              If  set,  instructs  Homebrew  to  use HOMEBREW_TEMP as the temporary directory for building\r\n              packages. This may be needed if your system temp directory and Homebrew Prefix are  on  dif-\r\n              ferent  volumes, as OS X has trouble moving symlinks across volumes when the target does not\r\n              yet exist.\r\n\r\n              This issue typically occurs when using FileVault or custom SSD configurations.\r\n```\r\n\r\n@chdiza \r\n\r\n> In the meantime: is there a way to manually disable the sandbox?\r\n\r\n`brew install --no-sandbox`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 787
	},
	{
		"id" : 241980725,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T07:32:03Z",
		"body" : "> TMPDIR and such need not be sticky, while HOMEBREW_TEMP has to, so people might not be able to point HOMEBREW_TEMP to their normal TMPDIR;\r\n\r\nI forget why this is, can you remember?\r\n\r\n> HOMEBREW_TEMP kind of fulfills a different and more specific role\r\n\r\nI think that's the typical use-case but we could overload it as it sounds like this is the right outcome if a different reason.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 787
	},
	{
		"id" : 241983967,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-08-24T07:47:06Z",
		"body" : "> > TMPDIR and such need not be sticky, while HOMEBREW_TEMP has to, so people might not be able to point HOMEBREW_TEMP to their normal TMPDIR;\r\n>\r\n> I forget why this is, can you remember?\r\n\r\nIf `HOMEBREW_TEMP` is not set problems could arise when installing things to keg, but under what circumstances I can't remember. Maybe @DomT4 could shed some light as he authored e4db0adf547d47b71c3feeb98daeedf8acb67274? (The commit links to several issues but none of them seem to explain why the parent directory needs to be sticky.)\r\n\r\n> we could overload it\r\n\r\nNo problem with that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 787
	},
	{
		"id" : 242041565,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-24T12:15:11Z",
		"body" : "> Maybe @DomT4 could shed some light as he authored e4db0ad? \r\n\r\nPretty easy to test;\r\n```\r\nsudo chown -t /private/tmp\r\nbrew install v\r\n```\r\nFor example.\r\n```\r\n==> Verifying v-1.1.tar.gz checksum\r\ntar xvzf /usr/local/var/homebrew/cache/v-1.1.tar.gz\r\nx v-1.1/\r\nx v-1.1/README\r\nx v-1.1/v\r\nx v-1.1/v.1\r\nError: parent directory is world writable but not sticky\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/tmpdir.rb:92:in `mktmpdir'\r\n/usr/local/Library/Homebrew/utils/fork.rb:6:in `safe_fork'\r\n/usr/local/Library/Homebrew/formula_installer.rb:593:in `build'\r\n/usr/local/Library/Homebrew/formula_installer.rb:246:in `install'\r\n/usr/local/Library/Homebrew/cmd/install.rb:272:in `install_formula'\r\n/usr/local/Library/Homebrew/cmd/install.rb:150:in `block in install'\r\n/usr/local/Library/Homebrew/cmd/install.rb:150:in `each'\r\n/usr/local/Library/Homebrew/cmd/install.rb:150:in `install'\r\n/usr/local/Library/Homebrew/brew.rb:87:in `<main>'\r\n```\r\n\r\nThe block comes from [Ruby](http://ruby-doc.org/stdlib-2.3.1/libdoc/tmpdir/rdoc/Dir.html) rather than a Homebrew choice, as such.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 787
	},
	{
		"id" : 242044396,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-08-24T12:26:10Z",
		"body" : "> The block comes from Ruby rather than a Homebrew choice, as such.\r\n\r\nYeah, that's it. Pretty annoying.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 787
	},
	{
		"id" : 242165642,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-24T18:34:42Z",
		"body" : "*Just as a side note:* One reason why `HOMEBREW_TEMP` defaults to `/tmp` instead of the contents of `TMPDIR` is that it is used to create UNIX domain sockets for IPC and paths for UNIX domain sockets are severely length-restricted, something that can become a problem with the typically already quite long `TMPDIR` on macOS.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 787
	},
	{
		"id" : 242331423,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-25T09:37:37Z",
		"body" : "Passing on this in favour of https://github.com/Homebrew/brew/pull/800 for now but will reopen if we back out that approach.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 787
	},
	{
		"id" : 241651963,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T07:39:04Z",
		"body" : "@tdsmith Is this something you're personally planning on implementing in the short-to-medium term? If not, can you stick it in https://github.com/homebrew/brew-evolution? Generally I think it would be good if maintainers can create PRs rather than issues...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 788
	},
	{
		"id" : 241711815,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-23T12:14:38Z",
		"body" : "No plans. I'm not invested enough to draft a proposal but the current behavior seems weird to me. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 788
	},
	{
		"id" : 241718441,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-23T12:45:13Z",
		"body" : "Can you provide some feedback about whether this was a design decision, whether this facilitated implementation, and why you chose to close this issue? I'd like to collaborate to improve the analytics data but the evolution process is too heavy and I haven't invested enough time to understand the implementation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 788
	},
	{
		"id" : 241721014,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T12:55:52Z",
		"body" : "> Can you provide some feedback about whether this was a design decision\r\n\r\nThis was not a design decision. It seems like it would be a sensible change but it's very down my personal list of priorities. \r\n\r\n> whether this facilitated implementation\r\n\r\nThis issue does not facilitate implementation. It does not suggest any specifics and it does not use the process that we've created to discuss feature requests.\r\n\r\n> I'd like to collaborate to improve the analytics data\r\n\r\nCollaboration is best achieved through pull requests.\r\n\r\n> I haven't invested enough time to understand the implementation\r\n\r\nI would suggest that it's worth doing this before opening issues.\r\n\r\n--\r\n\r\nAs I've mentioned before: I think maintainers opening \"personal preference\" issues they don't plan to work on is a project smell. If you're the person who cares about this: you should be the person to work on it and unless that's happening in the short-term the best bet is to create a pull request when you are ready to work on it. Otherwise our open issue count keeps growing and growing and it becomes hard to keep track of what are actual outstanding problems that need addressed and what are just maintainer \"nice-to-haves\" that will not be worked on.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 788
	},
	{
		"id" : 242366462,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-25T12:21:26Z",
		"body" : "What are the names of the compiler frontend binaries when installing `--HEAD`, i.e. what does `ls -l \"$(brew --prefix)\"/bin/{g++,gcc,gfortran}*` list? I think our compiler selection logic currently only recognizes `gcc-X` where `X` is 4.5 to 4.9, 5, or 6 (and similarly for the other frontends), so that might be one clue why the `--HEAD` installation isn't recognized ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 789
	},
	{
		"id" : 242513529,
		"user" : {
			"login" : "aw1621107"
		},
		"created_at" : "2016-08-25T19:46:57Z",
		"body" : "I've seen both `g++-` and `g++-2`, along with the equivalents for the other binaries. The 2 on the end is inconsistent, and I'm not sure when a build would produce one or the other.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 789
	},
	{
		"id" : 242670451,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-26T08:50:35Z",
		"body" : "It's probably worth trying to fix up the formula so that it installs with a known suffix and then we can whitelist that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 789
	},
	{
		"id" : 242778619,
		"user" : {
			"login" : "aw1621107"
		},
		"created_at" : "2016-08-26T16:09:25Z",
		"body" : "Alright, from a fresh `--HEAD` install, the suffix appears to be `2` in nearly all cases. The only exceptions are that both `x86_64-apple-darwin16.0.0-gcc-2` and `x86_86-apple-darwin16.0.0-gcc-7.0.0` and `gfortran` and `gfortran-2` are present.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 789
	},
	{
		"id" : 243080849,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-29T09:45:26Z",
		"body" : "I think the [`version_suffix` method](https://github.com/Homebrew/homebrew-core/blob/7e26b69789c3b2fa373fdb974b5b347351fc931d/Formula/gcc.rb#L74-L76) in the `gcc` formula is a bit too naive and needs some additional logic to handle the HEAD case correctly. Would be great if you could look into this!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 789
	},
	{
		"id" : 244546674,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T13:31:08Z",
		"body" : "> I think the version_suffix method in the gcc formula is a bit too naive and needs some additional logic to handle the HEAD case correctly. Would be great if you could look into this!\r\n\r\nCould you try and open a pull request? [This document](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md#how-to-open-a-homebrew-pull-request-and-get-it-merged) should help and I'm happy to walk you through anything else.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 789
	},
	{
		"id" : 246804431,
		"user" : {
			"login" : "aw1621107"
		},
		"created_at" : "2016-09-13T19:58:03Z",
		"body" : "Alright, should be fixed with PR #955 here and PR #4783 in homebrew-core.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 789
	},
	{
		"id" : 246897833,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-14T03:42:25Z",
		"body" : ":+1: on the approach you're taking here.\r\n\r\nI think #955 needs a bit more work (see comment there); there's another version-parsing location that'll need updating too. https://github.com/Homebrew/homebrew-core/pull/4783 looks good to go.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 789
	},
	{
		"id" : 241656205,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T07:59:26Z",
		"body" : "Could you also add a description to the README: https://github.com/Homebrew/brew/blob/master/Library/Homebrew/vendor/README.md? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 790
	},
	{
		"id" : 241654357,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T07:50:46Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 791
	},
	{
		"id" : 241955130,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-24T04:36:14Z",
		"body" : "@jawshooah, feel free to merge this after you have taken a look.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 791
	},
	{
		"id" : 242099319,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-08-24T15:11:15Z",
		"body" : "LGTM üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 791
	},
	{
		"id" : 241675176,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T09:22:02Z",
		"body" : "Duplicate of https://github.com/Homebrew/brew/issues/737. In short: set `HOMEBREW_DEVELOPER` for now but I'm aware it's not the best behaviour so am going to improve it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 792
	},
	{
		"id" : 244662142,
		"user" : {
			"login" : "anthonygreen"
		},
		"created_at" : "2016-09-05T05:35:04Z",
		"body" : "Can we add this to the CONTRIBUTING.md please? I got caught out by it too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 792
	},
	{
		"id" : 244802754,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-05T19:31:01Z",
		"body" : "@anthonygreen We're going to improve the messaging (in a PR likely merged today) and I'm going to overhaul the behaviour so it assumes people are `HOMEBREW_DEVELOPER`s.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 792
	},
	{
		"id" : 241675856,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T09:24:53Z",
		"body" : "A few small comments but nice work. üíÄ to duplicated code! \r\n\r\nSomething like https://pmd.github.io may be useful in finding more copy-pasted code.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 793
	},
	{
		"id" : 241678551,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T09:35:35Z",
		"body" : "> Something like https://pmd.github.io may be useful in finding more copy-pasted code.\r\n\r\nSpecifically (CC @AnastasiaSulyagina):\r\n\r\n```bash\r\n$ brew install pmd\r\n$ cd /usr/local\r\n$ pmd cpd --minimum-tokens 20 --language ruby \\\r\n  --files Library/Homebrew --exclude Library/Homebrew/vendor\\\r\n   --exclude Library/Homebrew/cask/vendor --exclude Library/Homebrew/test \\\r\n   --exclude Library/Homebrew/cask/test --exclude Library/Homebrew/cask/spec\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 793
	},
	{
		"id" : 241980364,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T07:30:24Z",
		"body" : ":shipit: üö¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 793
	},
	{
		"id" : 241673769,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T09:15:59Z",
		"body" : "LGTM other than @reitermarkus's comments.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 794
	},
	{
		"id" : 241868431,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-23T20:31:56Z",
		"body" : "The only thing I don't understand is why it's called `Tty.white`, I'm pretty sure `39` is `default`, not `white`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 794
	},
	{
		"id" : 241868703,
		"user" : {
			"login" : "AnastasiaSulyagina"
		},
		"created_at" : "2016-08-23T20:32:44Z",
		"body" : "Confused me as well when I tried to replace `bold`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 794
	},
	{
		"id" : 241871246,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-23T20:40:19Z",
		"body" : "Probably the same reason why `Tty.em` isn't called `Tty.underline`: History and nobody going to the trouble of cleaning up this part of the code. `39` is indeed the default foreground color, which tends to be white (or some shade of it) when using a dark terminal background.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 794
	},
	{
		"id" : 241880499,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-23T21:13:00Z",
		"body" : "> that tends to be white (or some shade of it) when using a dark terminal background.\r\n\r\nWell, considering Terminal's default theme is black on white, this does make even less sense.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 794
	},
	{
		"id" : 241887928,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-23T21:36:58Z",
		"body" : "True, but I believe most maintainers and many seasoned command-line users prefer a dark background. I haven't been around long enough and haven't paid too much attention to defaults, but maybe the default Terminal theme also changed between Homebrew's creation and now?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 794
	},
	{
		"id" : 241954956,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-24T04:34:33Z",
		"body" : "Yes, I think the default changed from Mavericks to Yosemite.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 794
	},
	{
		"id" : 241978203,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T07:19:32Z",
		"body" : "I use a white background and have for a while and it looks fine here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 794
	},
	{
		"id" : 242665637,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-26T08:28:08Z",
		"body" : "I'm happy with this as-is. @reitermarkus any final comments/objections to merging?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 794
	},
	{
		"id" : 242673291,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-26T09:03:16Z",
		"body" : "No, but let's not forget renaming `Tty.white` to something more fitting afterwards.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 794
	},
	{
		"id" : 241661003,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T08:22:07Z",
		"body" : "Thanks! üö¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 795
	},
	{
		"id" : 241840313,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-23T18:58:57Z",
		"body" : "I guess that's just an oversight here, but try to create the branches for PRs in your fork instead of the repositories in the Homebrew organization. One way to enforce this in the future is to set the push URL of the `origin` remote (`git remote set-url --push origin <url>`) to an invalid URL or the shared fetch/push URL to a read-only location.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 795
	},
	{
		"id" : 241857487,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-23T19:59:40Z",
		"body" : "@UniqMartin, yes that was an oversight, I started this on my iPad with the ‚Äùedit‚Äú button on GitHub.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 795
	},
	{
		"id" : 241980522,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T07:31:07Z",
		"body" : "Nice work üëç üö¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 795
	},
	{
		"id" : 242018969,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-24T10:21:10Z",
		"body" : "Merging this, as only some unrelated tests failed on travis. Also making the push URL read-only now. üòÑ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 795
	},
	{
		"id" : 241697894,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T11:03:47Z",
		"body" : "Thanks for spotting the underlying issue: that this is a `root` problem.\r\n\r\nCC @xu-cheng for help with a fix here.\r\n\r\nIn the mean time: we/I strongly recommend not running Homebrew as root. We don't drop privileges so any random `Makefile` could `sudo rm -rf` any file on your machine. Arguably the sandbox is even more important for root-owned Homebrew so I don't think we should disable it there but I'm wondering whether we should support root-owned Homebrew at all until someone who cares about it implements dropping privileges.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 241698344,
		"user" : {
			"login" : "stouset"
		},
		"created_at" : "2016-08-23T11:05:58Z",
		"body" : "I'm trying to bisect to determine the exact location of the problem, but homebrew auto-updating is getting in my way :( It's at least more recent than ed5e2ea3003acc858e0886cb1c4a944f44ba598e",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 241698502,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T11:06:48Z",
		"body" : "It will be almost certainly https://github.com/Homebrew/brew/pull/713",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 241699541,
		"user" : {
			"login" : "stouset"
		},
		"created_at" : "2016-08-23T11:12:22Z",
		"body" : "Ah, of course. Shouldn't this be fixable by allowing the sandbox to read TLS CAs?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 241699687,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T11:13:16Z",
		"body" : "Probably. Feel free to beat me or @xu-cheng to a PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 241699902,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T11:14:28Z",
		"body" : "It looks from https://github.com/Homebrew/brew/issues/785 that the sandbox is trying and failing to write to `/private/var/db/mds/system/mds.lock`, if that helps.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 241700218,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T11:16:13Z",
		"body" : "It looks like the sandbox basically doesn't work as root.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 241700292,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T11:16:38Z",
		"body" : "Does the build continue once it's been fetched as a non-root user?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 241700413,
		"user" : {
			"login" : "stouset"
		},
		"created_at" : "2016-08-23T11:17:20Z",
		"body" : "Ah, excellent. Of course, as you said, that's the exact case where you'd want it most.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 241702072,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-23T11:25:59Z",
		"body" : "We'll need to think how we're going to address this as a team. As a workaround you can set `HOMEBREW_NO_SANDBOX` but I'm increasingly personally tempted to say we just refuse to let Homebrew be run as `root` until privilege dropping is implemented.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 241702127,
		"user" : {
			"login" : "stouset"
		},
		"created_at" : "2016-08-23T11:26:15Z",
		"body" : "Testing now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 241704896,
		"user" : {
			"login" : "stouset"
		},
		"created_at" : "2016-08-23T11:40:20Z",
		"body" : "It works as, e.g., the `daemon` user so this issue appears to be very specific to `root`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 241980239,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T07:29:49Z",
		"body" : "@Homebrew/maintainers thoughts on how to address this? The two ways I see:\r\n\r\n- Disable sandbox as root and print a big, fat warning that this is a bad idea\r\n- Stop allowing Homebrew to run as root (my preferred option) until someone implements privilege dropping (i.e. the build itself runs as a non-root low-privilege user e.g. `nobody`)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 241980568,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-24T07:31:22Z",
		"body" : ">Stop allowing Homebrew to run as root\r\n\r\nthis.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 241988419,
		"user" : {
			"login" : "breiter"
		},
		"created_at" : "2016-08-24T08:07:08Z",
		"body" : "I know the Homebrew collective opinion is that the best experience is running Homebrew in `/usr/local` and changing the permissions so that the brew user can write there without `sudo`, but I don't want to do that. I have 3rd party binary packages not managed by `brew` that install into `/usr/local. I also compile and install software not controlled by `brew` into `/usr/local.\r\n\r\nHomebrew should support a scenario where Homebrew is not in `/usr/local` because the `brew` package manager can't reasonably expect to have exclusive control over the contents of `/usr/local`. That is why sysV added the concept of `/opt` for the package manager. It's also decent security to not have the normal unprivileged user account to not have write permission to any directories that are in the `$PATH`. \r\n\r\n- Installed `/opt/brew`\r\n- `/opt/brew` is owned by root:wheel with 755.\r\n\r\nIt sounds like the ideal thing would be for `brew` to drop its privileges for downloading packages and tarballs and performing the build when run as root and only use the root privilege for the install step -- but failing that, please don't intentionally break this workflow. Print out a warning if you feel like that is necessary.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 241990313,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T08:15:42Z",
		"body" : "> I know the Homebrew collective opinion is that the best experience is running Homebrew in /usr/local and changing the permissions so that the brew user can write there without sudo, but I don't want to do that.\r\n> Homebrew should support a scenario where Homebrew is not in /usr/local because the brew package manager can't reasonably expect to have exclusive control over the contents of /usr/local.\r\n\r\nYou can install Homebrew in any location as any user, it's just not our default.\r\n\r\n> It's also decent security to not have the normal unprivileged user account to not have write permission to any directories that are in the $PATH.\r\n> It sounds like the ideal thing would be for brew to drop its privileges for downloading packages and tarballs and performing the build when run as root and only use the root privilege for the install step -- but failing that, please don't intentionally break this workflow. Print out a warning if you feel like that is necessary.\r\n\r\nIt's terrible, terrible security to have every build-from-source build system running as root. A mistake in (or malicious actor modifying upstream) a single `Makefile` can do whatever they want to any file on your system. We/I don't trust every upstream to maintain a bug-free and uncompromised build system code and neither should you (which is why we introduced the sandbox).\r\n\r\nPrivilege dropping will be a non-trivial amount of work that none of the current maintainers will want to implement (we're volunteers working mostly in our spare time and it's low on our list of priorities). If you were able to implement it before I get the change to disable building as root then that would work. I'm not really in favour of allowing a security hole like this to go unplugged with a warning that most people will ignore.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242016024,
		"user" : {
			"login" : "breiter"
		},
		"created_at" : "2016-08-24T10:07:42Z",
		"body" : "@MikeMcQuaid I agree, the build shouldn't run as root. I didn't realize that brew runs the entire process as root. Homebrew shouldn't do that when run with sudo. MacPorts runs build under the unprivileged macports user context.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242016315,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T10:09:11Z",
		"body" : "@breiter Assuming no code changes: will you personally do anything differently now?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242021667,
		"user" : {
			"login" : "breiter"
		},
		"created_at" : "2016-08-24T10:33:50Z",
		"body" : "@MikeMcQuaid Well... I recently evaluated Joyent's pkgsrc for OS X. I had some problems with library paths that were annoying but not insurmountable and also `libgcrypt-cofig` generated garbage that `/usr/bin/ld` couldn't understand which also was fixable, but the final straw was I couldn't get awscli to work when installed with pip from pkgsrc. So I would think long and hard about going back to MacPorts and just be sad that they aren't integrated with GitHub. (Their Trac system is unlovely.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242022151,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T10:36:13Z",
		"body" : "Ok so basically \"not use Homebrew\". FYI you could just use your identical workflow as any non-root user or your choice (say `brewuser`) and it'll work fine if that `brewuser` owns the Homebrew installation in `/opt` and you `sudo -u brewuser brew` instead of `sudo brew`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242023278,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-24T10:42:08Z",
		"body" : "> Stop allowing Homebrew to run as root\r\n\r\nVery much in favor of this option!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242038429,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-24T11:59:02Z",
		"body" : "I'd love Homebrew to have saner root handling in terms of being able to drop privileges as appropriate, although I wouldn't necessarily say MacPorts' mechanism is particularly elegant; I don't mean disrespect to them by that, I add.\r\n\r\nI have been meaning to do some thinking about this, but it's really not near the top of my priority list to say the least. Happy to help review any PR to improve our handling on this sort of thing for sure though.\r\n\r\n> It's also decent security to not have the normal unprivileged user account to not have write permission to any directories that are in the $PATH.\r\n\r\nI'm honestly not sure this argument particularly works today. I mean, in theory sure, but [npm recommend](https://docs.npmjs.com/getting-started/fixing-npm-permissions) making their directories user-owned if installing in `/usr/local`, which is the default for Node's `.pkg` installer, for example. You also have situations like `GOPATH` & Perl's `local::lib` which IIRC can both be set up pretty much anywhere and are both traditionally user-owned.\r\n\r\nPeople consistently favour usability over security, even when you try really _really_ hard to make them favour security. There's a whole bunch of people who would still be using MD5 in Homebrew today if we let them. We've recommended for a long time for people in `/usr/local` to not force link `openssl` but a ton of people still did so, because it solved their use case or made finding the desired OpenSSL easier on their project, so we ended up turning that into a hard block.\r\n\r\n> Disable sandbox as root and print a big, fat warning that this is a bad idea\r\n\r\nI'd probably, with some reluctance, go with this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242050168,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-24T12:47:35Z",
		"body" : ">I'd probably, with some reluctance, go with this.\r\n\r\nI don't see how the cost-benefit analysis for that could possibly pay off.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242066807,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T13:39:17Z",
		"body" : "I was reading some producty stuff earlier and I thought the correct answer is both:\r\n\r\n> Disable sandbox as root and print a big, fat warning that this is a bad idea\r\n\r\nWe do this for a short while (week/month/3 months) and say that it'll be turned off later.\r\n\r\n> Stop allowing Homebrew to run as root (my preferred option) until someone implements privilege dropping (i.e. the build itself runs as a non-root low-privilege user e.g. nobody)\r\n\r\nWe do this after the above warning period.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242066968,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-24T13:39:43Z",
		"body" : "> I don't see how the cost-benefit analysis for that could possibly pay off.\r\n\r\nWell, until last week, nobody who wasn't opted-in was using the sandbox. From Homebrew's inception, I believe, people have been able to run `brew` as root if it is owned by root. It's ultimately less surprising to selectively roll back a week or so for some users than it is several years. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242068785,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-24T13:44:52Z",
		"body" : "Security flaws we may or may not have had in the past don't justify bad security practices going forward. They are spilt milk.\r\n\r\nBeing less surprising to some doesn't outweigh possibly compromising others unless our priorities are upside down and backwards.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242069387,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-24T13:46:30Z",
		"body" : "Lol, the other night you were dead against reproducible bottles despite the obvious security issue around having everyone ultimately trust the CI üôà.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242071847,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-24T13:53:11Z",
		"body" : "Ad hominem and non sequitur. Double bonus points.\r\n\r\n>We do this for a short while (week/month/3 months) and say that it'll be turned off later.\r\n\r\n@MikeMcQuaid This seems like overkill, but meh",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242073996,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-24T13:59:02Z",
		"body" : "> Ad hominem and non sequitur\r\n\r\nFancy words, but not particularly true on either case. I'm afraid it isn't actually a personal attack if I point out something you said yesterday conflicts with something you said today, and you may have a reason for that that is perfectly valid, but it's reasonable to question why x applies to y but not z. \r\n\r\nAs for all `homebrew/brew` things, file a PR or go with whatever the consensus turns out to be.\r\n\r\n> We do this for a short while (week/month/3 months) and say that it'll be turned off later.\r\n\r\nThis seems fine, personally. We could include a message that we'll accept a PR within that timeframe to improve Homebrew's root support, perhaps.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242074790,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T14:00:59Z",
		"body" : "@DomT4 @ilovezfs don't make me bang your heads together...\r\n\r\n\r\n\r\n> We could include a message that we'll accept a PR within that timeframe to improve Homebrew's root support, perhaps.\r\n\r\nüëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242075099,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-24T14:01:52Z",
		"body" : "@MikeMcQuaid but he started it! :baby:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242075496,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T14:02:49Z",
		"body" : "@ilovezfs and I'll finish it :rage4: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242097915,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-24T15:07:07Z",
		"body" : "FYI after some digging, if `(allow file-write-data (path \"/private/var/db/mds/system/mds.lock\"))` is added in the rule, the bug described in this issue will be fixed. However, I don't know why curl is trying to write this file under root user.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242102406,
		"user" : {
			"login" : "breiter"
		},
		"created_at" : "2016-08-24T15:19:30Z",
		"body" : "@DomT4 \r\n\r\n> I'm honestly not sure this argument particularly works today. I mean, in theory sure, but npm recommend making their directories user-owned if installing in /usr/local, which is the default for Node's .pkg installer, for example. You also have situations like GOPATH & Perl's local::lib which IIRC can both be set up pretty much anywhere and are both traditionally user-owned.\r\n\r\nI think this is a worrying trend and attitude to take. Windows used to be ridiculed for having '.' implicitly in the %PATH% which opened it to all kinds of practical (and to this day) spoofing attacks for both binary hijacking and dll injection. \r\n\r\n$GOPATH is a developer workspace, that is a bit of a different thing. If Node is recommending making /usr/local user-owned that is unfortunate. Maybe someone at Joyent -- like Bryan Cantrill -- should look into whether that is really a best practice.\r\n\r\nI don't like the idea of a package manager (a) thinking it is OK to take over `/usr/local`  nor (b) making part of the search path writeable by an unprivileged user.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242103741,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-24T15:22:28Z",
		"body" : "A short term fix https://github.com/Homebrew/brew/pull/805",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242105777,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-24T15:27:00Z",
		"body" : ">I don't like the idea of a package manager (a) thinking it is OK to take over /usr/local nor (b) making part of the search path writeable by an unprivileged user.\r\n\r\nYou may want to use a different package manager.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242121620,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-24T16:10:07Z",
		"body" : "> (a) thinking it is OK to take over /usr/local\r\n\r\nJust to nudge this back further, we don't take it over; nothing about Homebrew actively blocks you from installing other software into `/usr/local` at the same time.\r\n\r\nYou can install Homebrew anywhere you like with the exception of `/` and `/usr` & we've been actively working on reducing the amount of files we leaves in `/usr/local` & the level of privilege we need over the whole directory.\r\n\r\n> However, I don't know why curl is trying to write this file under root user.\r\n\r\nIt's a sandbox profile, apparently. Unsure at the moment why it doesn't write there when `/usr/bin/curl` is called without `sudo`:\r\n<details>\r\n<summary>clicky</summary>\r\n```\r\n;;\r\n;; mds - sandbox profile\r\n;; Copyright (c) 2006-2010 Apple Inc.  All Rights reserved.\r\n;;\r\n;; WARNING: The sandbox rules in this file currently constitute \r\n;; Apple System Private Interface and are subject to change at any time and\r\n;; without notice. The contents of this file are also auto-generated and not\r\n;; user editable; it may be overwritten at any time.\r\n;;\r\n\r\n(version 1)\r\n(deny default)\r\n(debug deny)\r\n(disable-full-symbolication)\r\n(import \"system.sb\")\r\n\r\n;; Let us register our own name\r\n(allow mach-register\r\n       (global-name \"com.apple.metadata.mds\")\r\n       (global-name \"com.apple.metadata.mds.xpc\")\r\n       (global-name \"com.apple.metadata.mds.xpcs\"))\r\n\r\n(allow file-fsctl)\r\n\r\n(allow file-ioctl\r\n    (literal \"/dev/fsevents\")\r\n    (regex #\"^/dev/nsmb\")\r\n    (regex #\"^/private/var/folders/[^/]+/[^/]+/-Tmp-($|/)\"))\r\n\r\n(allow file-search)\r\n\r\n(allow file-read*)\r\n\r\n(allow file-write*\r\n    (literal \"/dev/console\")\r\n    (regex #\"^/dev/nsmb\")\r\n    (literal \"/private/var/db/mds/system/mds.lock\")\r\n    (literal \"/private/var/run/mds.pid\")\r\n    (literal \"/private/var/run/utmpx\")\r\n    (literal \"/private/var/db/InstallResults.plist\")\r\n    (subpath \"/private/var/folders/zz/zyxvpxvq6csfxvn_n0000000000000\")\r\n    (regex #\"^/private/var/run/mds($|/)\")\r\n    (regex #\"/Saved Spotlight Indexes($|/)\")\r\n    (regex #\"/Backups.backupdb/\\.spotlight_repair($|/)\"))\r\n\r\n(allow file-write* \r\n    (regex #\"^/private/var/db/Spotlight-V100($|/)\")\r\n    (regex #\"^/private/var/db/Spotlight($|/)\")\r\n    (regex #\"^/Library/Caches/com\\.apple\\.Spotlight($|/)\")\r\n    (regex #\"/\\.Spotlight-V100($|/)\")\r\n    )\r\n    \r\n    \r\n(allow file*\r\n    (literal \"/Library/Preferences/com.apple.SpotlightServer.plist\")\r\n    (literal \"/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Resources/com.apple.SpotlightServer.plist\"))\r\n    \r\n(allow file-read* file-write* (extension \"com.apple.spotlight.tempdirectory\"))\r\n(allow file-read* file-write* (extension \"com.apple.spotlight.cachedirectory\"))\r\n\r\n(allow file-write-xattr (xattr-regex #\"^com\\.apple\\.metadata:\"))\r\n\r\n(allow job-creation\r\n    (regex #\"^/System/Library/Frameworks/CoreServices\\.framework/Versions/A/Frameworks/Metadata\\.framework/Versions/A/Support/mdworker(32)?$\")\r\n    (regex #\"^/System/Library/Frameworks/CoreServices\\.framework/Versions/A/Frameworks/Metadata\\.framework/Versions/A/Support/mds_stores\"))\r\n\r\n(allow ipc-posix-shm)\r\n\r\n;; (allow mach-lookup (global-name-regex \"^com\\.apple\\.\"))\r\n\r\n(allow mach-lookup \r\n    (global-name \"com.apple.distributed_notifications@1v3\")\r\n    (global-name \"com.apple.ocspd\")\r\n    (global-name \"com.apple.SecurityServer\")\r\n    (global-name \"com.apple.SystemConfiguration.configd\")\r\n    (global-name \"com.apple.system.opendirectoryd.api\")\r\n    (global-name \"com.apple.CoreServices.coreservicesd\")\r\n    (global-name \"com.apple.coreservices.quarantine-resolver\")\r\n    (global-name \"com.apple.DiskArbitration.diskarbitrationd\")\r\n    (global-name \"com.apple.FSEvents\")\r\n    (global-name \"com.apple.PowerManagement.control\")\r\n    (global-name \"com.apple.tccd\")\r\n    (global-name \"com.apple.metadata.mdbulkimport\")\r\n    (global-name \"com.apple.metadata.mds.index\")\r\n    (global-name \"com.apple.metadata.mds.scan\")\r\n    (global-name \"com.apple.metadata.mdwrite\")\r\n    (global-name \"com.apple.mdworker.bundles\")\r\n    (global-name \"com.apple.mdworker.32bit\")\r\n    (global-name \"com.apple.mdworker.isolation\")\r\n    (global-name \"com.apple.mdworker.lsb\")\r\n    (global-name \"com.apple.mdworker.mail\")\r\n    (global-name \"com.apple.mdworker.shared\")\r\n    (global-name \"com.apple.mdworker.single\")\r\n    (global-name \"com.apple.mdworker.sizing\")\r\n    (global-name \"com.apple.metadata.mdflagwriter\")\r\n    (global-name \"com.apple.metadata.mds.spindump\")\r\n    (global-name \"com.apple.coreduetd\")\r\n    (global-name \"com.apple.bird\")\r\n    (global-name \"com.apple.lsd.mapdb\")\r\n    (global-name \"com.apple.lsd.modifydb\")\r\n    )\r\n    \r\n(allow mach-per-user-lookup)\r\n\r\n(allow network-outbound\r\n    (remote unix-socket (path-literal \"/private/var/run/asl_input\"))\r\n    (remote unix-socket (path-literal \"/private/var/run/syslog\")))\r\n\r\n(allow signal)\r\n\r\n(allow sysctl*)\r\n\r\n(allow distributed-notification-post)\r\n\r\n(allow file-issue-extension (require-all\r\n    (require-any\r\n\t \t    (regex #\"^/private/var/db/Spotlight-V100($|/)\")\r\n\t \t    (regex #\"^/private/var/db/Spotlight($|/)\")\r\n\t \t    (regex #\"^/Library/Caches/com\\.apple\\.Spotlight($|/)\")\r\n\t \t    (regex #\"/\\.Spotlight-V100($|/)\"))\r\n    (require-all (extension-class \"com.apple.spotlight.indexer.read-write\"))))\r\n\r\n(allow file-issue-extension (require-all (extension-class \"com.apple.spotlight.flagwriter.read-write\")))\r\n(allow file-issue-extension (require-all (extension-class \"com.apple.spotlight.importer.readonly\")))\r\n(allow generic-issue-extension (require-all (extension-class \"com.apple.mdworker.image_extension\")))\r\n(allow generic-issue-extension (require-all (extension-class \"com.apple.mdworker.addressbook_extension\")))\r\n(allow generic-issue-extension (require-all (extension-class \"com.apple.mdworker.calendar_extension\")))\r\n```\r\n</details>",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242144586,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-24T17:25:51Z",
		"body" : ":+1: for sunsetting ability to use Homebrew with root and working around this in the meantime.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242492309,
		"user" : {
			"login" : "stouset"
		},
		"created_at" : "2016-08-25T18:28:13Z",
		"body" : "@MikeMcQuaid Since homebrew works as any other nonprivileged user, it seems completely reasonable to deprecate and eventually remove support for `root`-owned homebrew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 796
	},
	{
		"id" : 242073413,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T13:57:30Z",
		"body" : "Closing this as we trouble-shooted it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 797
	},
	{
		"id" : 241861140,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-08-23T20:12:03Z",
		"body" : "You can `brew cask install sublime-text`. It was recently upgraded from 2 to 3, and `sublime-text2` is now available in the [caskroom/versions](https://github.com/caskroom/homebrew-versions) tap.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 798
	},
	{
		"id" : 241869841,
		"user" : {
			"login" : "ideasotw"
		},
		"created_at" : "2016-08-23T20:35:54Z",
		"body" : "Works! thank you",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 798
	},
	{
		"id" : 241976906,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T07:13:19Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 799
	},
	{
		"id" : 241979336,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T07:25:28Z",
		"body" : "Seems reasonable to me but would probably want another üëç here. Does this fix the sandbox issues for you?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 800
	},
	{
		"id" : 241980074,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-08-24T07:29:07Z",
		"body" : "Yes, it does. But it's not perfect, as outlined in the caveat above and https://github.com/Homebrew/brew/pull/787#issuecomment-241979474.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 800
	},
	{
		"id" : 242167554,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-24T18:41:10Z",
		"body" : "That caveat sounds like it could be a major issue (or at least an annoyance). Do we know of more software that tends to put their sockets there or is Emacs an isolated case? Is there an easy way to change the socket path? Other than that this looks like a reasonable change to make.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 800
	},
	{
		"id" : 242261854,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-08-25T02:04:30Z",
		"body" : "> Do we know of more software that tends to put their sockets there or is Emacs an isolated case?\r\n\r\nI personally don't have many pieces of software that open sockets, and even fewer put their sockets in the global tmpdir. On top of head I can think of tmux, but with a bit of testing, tmux doesn't seem to care about `TMPDIR`, `TEMP` or `TMP`, at least not by default.\r\n\r\nActually, even if there are more software that does this, how many are going to be started inside brew's environment? Emacs is relevant here because `emacsclient` can be used as `VISUAL` or `EDITOR` which is used by `brew edit`.\r\n\r\n> Is there an easy way to change the socket path?\r\n\r\nOne can set `server-socket-dir` to override the default inside one's init file, but I doubt many people know this; it's hardly documented in the GNU Emacs Manual.\r\n\r\nEven if `server-socket-dir` is not set, the problem is not as severe as it may sound. `emacsclient` with the `-a ''` option can start a Emacs daemon if one isn't present already, and presumably many people take advantage of this (for instance, my `VISUAL` is a wrapper around `emacsclient -nw -cqta= \"$@\"`). In that case, not being able to find the existing socket in `TMPDIR` would simply mean another daemon is started with socket inside `HOMEBREW_TEMP`. Having two Emacs daemon might be devastating in the olden \"Eight Megabytes And Constantly Swapping\" days, but today I doubt anyone will give a damn, except in certain cases, like trying to switch to another frame but can't find it on the server.\r\n\r\n---\r\n\r\nIn summary, I think Emacs is a rather isolated case, and we can document the workarounds somewhere if that's desirable.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 800
	},
	{
		"id" : 242331282,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-25T09:37:05Z",
		"body" : "Let's give this a try but be prepared to back it out if things go üí•.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 800
	},
	{
		"id" : 242332157,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-25T09:40:23Z",
		"body" : ">Caveat: Non-matching HOMEBREW_TEMP and TMPDIR could lead to undesirable side effects in certain cases, e.g., emacsclient not being able to find an existing server (whose socket lives in $TMPDIR/emacs$UID/) when launched through brew edit.\r\n\r\nWill it help, if we set these env when running `brew install/postinstall/test` (as in `Formula#run_install/run_postinstall/run_test`) instead of setting them iuncondiation for entire brew process.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 800
	},
	{
		"id" : 242337523,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-08-25T10:01:13Z",
		"body" : "> Will it help, if we set these env when running brew install/postinstall/test (as in Formula#run_install/run_postinstall/run_test) instead of setting them iuncondiation for entire brew process.\r\n\r\nThat's probably fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 800
	},
	{
		"id" : 242370206,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-25T12:35:02Z",
		"body" : "üëè and many thanks @zmwangx for the detailed response!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 800
	},
	{
		"id" : 242592802,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-26T01:11:51Z",
		"body" : "Yeah, this is biting me with `brew edit`.  Can we restrict it to install, postinstall, and test?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 800
	},
	{
		"id" : 242593907,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-26T01:20:29Z",
		"body" : "Agree with @xu-cheng's suggestion as well üëç.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 800
	},
	{
		"id" : 242594536,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-08-26T01:23:50Z",
		"body" : "Sorry for not chiming in earlier, I only skimmed the thread and didn't realize how the issue would manifest.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 800
	},
	{
		"id" : 242609261,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-08-26T02:30:55Z",
		"body" : "An attempt at restricting the changes to `install`, `post_install` and `test` is in #817.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 800
	},
	{
		"id" : 242017173,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-24T10:12:53Z",
		"body" : "I think we should return an absolute path, but not fully canonicalize the path, i.e. don't resolve symbolic links. That should (if I'm not mistaken) address the issues raised in #778 and avoid the problem you mention here (expansion of `bin/git` to `/usr/local/Cellar/git/2.9.3/bin/git`). A really naive (and untested) implementation would be:\r\n\r\n```shell\r\nabspath() {\r\n  if [[ \"$1\" = /* ]]\r\n  then\r\n    echo \"$1\"\r\n  else\r\n    echo \"$(pwd)/$1\"\r\n  fi\r\n}\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 801
	},
	{
		"id" : 242073094,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T13:56:33Z",
		"body" : "> I think we should return an absolute path\r\n\r\nDone and shared the `abspath` code.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 801
	},
	{
		"id" : 242014196,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T09:59:42Z",
		"body" : "This is a not a typo, formulae is a word and the preferred British English plural of formula. Thanks for the PR anyway!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 802
	},
	{
		"id" : 242054271,
		"user" : {
			"login" : "Hywan"
		},
		"created_at" : "2016-08-24T13:00:21Z",
		"body" : "I thought you would like to reuse the keyword define few lines above, but that's OK! Thanks :-).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 802
	},
	{
		"id" : 242067264,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T13:40:35Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 803
	},
	{
		"id" : 242153551,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-24T17:55:54Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 804
	},
	{
		"id" : 242160388,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-24T18:17:59Z",
		"body" : "Do we have some understanding why this lock file needs to be writable? Would be good to have some basic idea of what is going on. Is `mds` in this path referring to ‚Äúmetadata server‚Äù, i.e. the background service of the same name related to Spotlight?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 805
	},
	{
		"id" : 242170070,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-24T18:49:47Z",
		"body" : "> Is mds in this path referring to ‚Äúmetadata server‚Äù, i.e. the background service of the same name related to Spotlight?\r\n\r\nIt appears so. Also if you look at the other files, you will see many of them are mentioning security framework, or SSL cert related stuff. However, beyonding these I have zero knowledge on the internal mechanism underneath. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 805
	},
	{
		"id" : 242174544,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-24T19:05:26Z",
		"body" : "More google shows mds may be referred to Module Directory Services http://apple.stackexchange.com/a/167668\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 805
	},
	{
		"id" : 242185574,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-24T19:46:08Z",
		"body" : "I think it's worth disabling the sandbox as the root user for now, instead.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 805
	},
	{
		"id" : 242327602,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-25T09:21:08Z",
		"body" : "> I think it's worth disabling the sandbox as the root user for now, instead.\r\n\r\nSince sandbox works fine after this fix  and it indeed offers some level of protection(e.g. against `rm -rf /`). I don't see any reason to disable sandbox for root users.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 805
	},
	{
		"id" : 242330353,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-25T09:32:59Z",
		"body" : "@xu-cheng The plan is to disable root access altogether and we don't understand why this is needed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 805
	},
	{
		"id" : 242330819,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-08-25T09:35:01Z",
		"body" : "I'm not against disable root access altogether in long term. However in short term, I don't think we should do the opposite to disable sandbox for the time being. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 805
	},
	{
		"id" : 242332147,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-25T09:40:21Z",
		"body" : "@xu-cheng The sandbox has only been enabled for a short period for a single tap and doesn't work. Given we've decided by consensus to not support root usage in the medium term it doesn't make sense to add short-term workarounds to other code.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 805
	},
	{
		"id" : 242372498,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-25T12:43:06Z",
		"body" : "I'm not hyped about temporarily disabling the sandbox for root users until we eventually disallow using Homebrew as root, but given the sandbox has only been enabled very recently (and with limited reach) and that we don't really understand why we need to poke this hole in the sandbox or whether we need to poke more holes that we aren't aware of yet, disabling the sandbox again for the time being feels like the better option. Let's pass on this PR for now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 805
	},
	{
		"id" : 242297749,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-25T06:59:33Z",
		"body" : "üëç nice work",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 806
	},
	{
		"id" : 242437977,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-25T15:51:18Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 806
	},
	{
		"id" : 244548456,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:07:07Z",
		"body" : "@reitermarkus üö¢ when ready.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 806
	},
	{
		"id" : 244599125,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-04T11:55:02Z",
		"body" : "Just want to do a rebase again before merging to see the coverage results.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 806
	},
	{
		"id" : 242310040,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-25T08:02:26Z",
		"body" : "See https://github.com/Homebrew/homebrew-core/pull/4221 for the motivation for this PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 807
	},
	{
		"id" : 242332360,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-25T09:41:02Z",
		"body" : "Some `brew tests` failures here but I agree with the motivation üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 807
	},
	{
		"id" : 242403105,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-25T14:17:49Z",
		"body" : "@MikeMcQuaid it passes those tests now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 807
	},
	{
		"id" : 242449601,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-25T16:21:32Z",
		"body" : "I also agree with the motivation for this PR, but I'm a tiny bit concerned with how invasive the change is. I pointed out a few minor issues, but if you can, I hope you can take another look and maybe simplify things a bit. My gut feeling is that it should be possible to simplify this, but feel free to tell me off until I have supplied evidence in the form of code. (I'm heading out, thus taking a closer look at the code will have to wait until later this evening.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 807
	},
	{
		"id" : 242456728,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-25T16:40:11Z",
		"body" : "@UniqMartin there is no doubt in my mind that some other algorithm would be better than this putrid recursive contraption, but I thought that was too obvious and uncouth to be said aloud :D",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 807
	},
	{
		"id" : 242433836,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-25T15:40:05Z",
		"body" : "I'm basically fine with the change and the wording (as discussed). The only thing that might be frustrating and annoying with this (though the added visibility could also be beneficial), is that the e.g. sometimes unavoidable `sudo brew services` would always print the message. People might get additionally confused because this message will always be prefixed with ‚ÄúError:‚Äù.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 808
	},
	{
		"id" : 242471968,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-25T17:25:13Z",
		"body" : "> I'm basically fine with the change and the wording (as discussed). The only thing that might be frustrating and annoying with this (though the added visibility could also be beneficial), is that the e.g. sometimes unavoidable sudo brew services would always print the message. People might get additionally confused because this message will always be prefixed with ‚ÄúError:‚Äù.\r\n\r\nA good catch; I'll exclude services as that's the only case that we actively support üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 808
	},
	{
		"id" : 243888436,
		"user" : {
			"login" : "mcallaway"
		},
		"created_at" : "2016-08-31T20:21:17Z",
		"body" : "Can't this be made a command line flag? Perhaps \"--allow-root\"? I want Puppet to install Homebrew as root.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 808
	},
	{
		"id" : 243893960,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-31T20:39:59Z",
		"body" : "@mcallaway No, sorry. The message and linked discussions explain why.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 808
	},
	{
		"id" : 242404232,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-25T14:20:47Z",
		"body" : ":+1: (And a minor nit.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 809
	},
	{
		"id" : 242413716,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-25T14:44:39Z",
		"body" : "Nit addressed, merging.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 809
	},
	{
		"id" : 242413716,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-25T14:44:39Z",
		"body" : "Nit addressed, merging.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 809
	},
	{
		"id" : 242358963,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-25T11:49:19Z",
		"body" : "Using `reset --mixed` makes me wonder if we even need the merge and rebase aborts above.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 810
	},
	{
		"id" : 242369392,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-25T12:32:18Z",
		"body" : "> Using reset --mixed makes me wonder if we even need the merge and rebase aborts above.\r\n\r\n@ilovezfs Perhaps not but they are fast enough that we may as well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 810
	},
	{
		"id" : 242370023,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-25T12:34:20Z",
		"body" : "My interest there wasn't speed, just the Hippocratic oath.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 810
	},
	{
		"id" : 242490078,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-25T18:20:20Z",
		"body" : "@UniqMartin Any thoughts?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 810
	},
	{
		"id" : 243084080,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-29T10:00:35Z",
		"body" : ":+1: Looks like an improvement to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 810
	},
	{
		"id" : 242385569,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-25T13:28:29Z",
		"body" : "> What about using \"Squash and merge\" more often?\r\n\r\nIt's preferable to have a single style of PR merging in this repo and using the merge commits in this way means it's easier to adopt a single, PR-only strategy. I'm aware of the graphical log but that's something that applies to pretty much any project using GitHub's merge button. For the taps that still rely on `brew pull` I'm not convinced that the button will ever see widespread usage but for core it's easier to adopt a single flow.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 811
	},
	{
		"id" : 242385997,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-08-25T13:29:44Z",
		"body" : "Okay, thanks for the explanation!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 811
	},
	{
		"id" : 242391719,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-25T13:45:52Z",
		"body" : "FWIW, I'm not a big fan of the many side branches either, but I can see how they can be beneficial. Reading the history with `git log --topo-order` works well for me and if you add `--no-merges` you essentially get the same linear history that you would have gotten before we started to do merge commits. (All our side branches fork off from `master` and are merged into `master`, so there are no long-lived parallel branches. This may change with the 1.0.0 release.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 811
	},
	{
		"id" : 242394123,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-08-25T13:52:50Z",
		"body" : "> Reading the history with git log --topo-order works well for me and if you add --no-merges you essentially get the same linear history that you would have gotten before we started to do merge commits. \r\n\r\nGood point, but that doesn't help when reading the history on GitHub web. Or maybe there's a query I can add to https://github.com/Homebrew/brew/commits/master that I'm unaware of (like adding `?w=1` to a diff URL)?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 811
	},
	{
		"id" : 242394665,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-25T13:54:12Z",
		"body" : "> Or maybe there's a query I can add to https://github.com/Homebrew/brew/commits/master that I'm unaware of (like adding ?w=1 to a diff URL)?\r\n\r\nPretty sure there is not.\r\n\r\nWhat's the specific thing you're e.g. looking for but unable to find now that you could before?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 811
	},
	{
		"id" : 242395698,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-08-25T13:57:00Z",
		"body" : "> What's the specific thing you're e.g. looking for but unable to find now that you could before?\r\n\r\nNo. There's more distraction and less information on each page, that's all. Not a big deal.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 811
	},
	{
		"id" : 242954875,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-28T04:01:10Z",
		"body" : "Will merge this as-is for now, with the redundant `[]` fixed. Feel free to tell me how I was being an idiot around the `l@1` capture upon your return & I'll make any necessary changes üòÑ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 812
	},
	{
		"id" : 243217739,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-08-29T18:49:05Z",
		"body" : "Use lookahead/lookbehind?\r\n\r\n```\r\nclass_name.gsub!(/(?<=.)@(?=\\d)/, \"AT\")\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 812
	},
	{
		"id" : 243220548,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-29T18:58:40Z",
		"body" : "Changed in https://github.com/Homebrew/brew/pull/832 to `(/(.)@(\\d)/, \"\\\\1AT\\\\2\")` per Martin's nudge. Don't have a strong preference either way, but if people prefer LA/LB I'm happy to change it again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 812
	},
	{
		"id" : 242781772,
		"user" : {
			"login" : "javian"
		},
		"created_at" : "2016-08-26T16:21:49Z",
		"body" : "An example build is here https://bot.brew.sh/job/Homebrew%20Apache%20Pull%20Requests/69/ .\r\n\r\nIf the downstream job failed shouldn't it also create a failure in the upstream job ?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 813
	},
	{
		"id" : 243156824,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-29T15:22:08Z",
		"body" : "Should be fixed now. Let me know otherwise.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 813
	},
	{
		"id" : 242670823,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-26T08:52:18Z",
		"body" : "Good idea! As-per https://github.com/Homebrew/brew/commit/1e76a207b5bfacebee0a7198318230446be8da47 could you also update https://github.com/catleeball/brew/blob/33a8c993dd72c437efa972a85db5e6821b7a6107/.github/ISSUE_TEMPLATE.md and, in another pull request, the same in Homebrew/homebrew-core (e.g. like https://github.com/Homebrew/homebrew-core/commit/14790e3b57017db006feaf0a941a13cf12d8bcfe)\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 815
	},
	{
		"id" : 242817489,
		"user" : {
			"login" : "catleeball"
		},
		"created_at" : "2016-08-26T18:40:22Z",
		"body" : "Sure thing! Added another commit to this pull request to update the issue template, then did the same for homebrew-core over in this pull request: https://github.com/Homebrew/homebrew-core/pull/4255",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 815
	},
	{
		"id" : 242877470,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-26T23:43:18Z",
		"body" : "I just pulled the symmetric request in -core and assume this is g2g as well; sorry if I jumped a gun.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 815
	},
	{
		"id" : 242671234,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-26T08:53:49Z",
		"body" : "Cheers!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 816
	},
	{
		"id" : 242671410,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-26T08:54:34Z",
		"body" : "Nice work üëç ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 817
	},
	{
		"id" : 242715251,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-26T11:57:17Z",
		"body" : "Thanks for the cleanup ‚ù§Ô∏è ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 818
	},
	{
		"id" : 242732190,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-26T13:15:51Z",
		"body" : "Merging because broken otherwise but would be cool to use the existing colour palette here?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 819
	},
	{
		"id" : 242742743,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-26T13:58:22Z",
		"body" : "What colour do you suggest using instead which would still differentiate `odebug` from `ohai`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 819
	},
	{
		"id" : 242901691,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-27T07:20:27Z",
		"body" : "Any of the others üòÄ, I don't have a strong preference. I do wonder whether 1) they need differentiated by colour and 2) it needs coloured at all (for debug text).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 819
	},
	{
		"id" : 242904279,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-08-27T08:22:08Z",
		"body" : "> 2) it needs coloured at all (for debug text)\r\n\r\nI would argue that everything is better with colours. üòÑ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 819
	},
	{
		"id" : 243062525,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-29T08:24:58Z",
		"body" : "Thanks! :clap:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 820
	},
	{
		"id" : 242799214,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-26T17:31:20Z",
		"body" : "It works except in virtualenvs, right?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 821
	},
	{
		"id" : 242838003,
		"user" : {
			"login" : "chhantyal"
		},
		"created_at" : "2016-08-26T20:07:28Z",
		"body" : "Nope, it doesn't work with brew installed python which contains `pip` and `setuptools`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 821
	},
	{
		"id" : 242875881,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-26T23:30:09Z",
		"body" : "Both `pip install --user --install-option=\"--prefix=\" tweepy` and `pip install --user tweepy` work fine for me as of this writing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 821
	},
	{
		"id" : 243334369,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-30T05:07:36Z",
		"body" : "Can you elaborate on \"doesn't work\"?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 821
	},
	{
		"id" : 243377235,
		"user" : {
			"login" : "chhantyal"
		},
		"created_at" : "2016-08-30T09:00:53Z",
		"body" : "Sorry I removed the brew python, thus can't do testing right now. I will update with details soon.\r\nIn my case, it was with `~/.pydistutils.cfg` config file with `prefix=`\r\n\r\n\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 821
	},
	{
		"id" : 244276081,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-09-02T03:44:45Z",
		"body" : "Gotcha, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 821
	},
	{
		"id" : 252430806,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-08T15:34:12Z",
		"body" : "@tdsmith ‚ùì ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 821
	},
	{
		"id" : 242812914,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-08-26T18:23:22Z",
		"body" : "+1, looks like this was missed in #816. I just did a quick grep and didn't see any other out-dated references",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 822
	},
	{
		"id" : 242822024,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-26T18:57:45Z",
		"body" : "Thanks @vladshablinsky!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 822
	},
	{
		"id" : 242885129,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-27T00:53:34Z",
		"body" : "How did I miss this one, it's right below the one I did fix üôà. Thanks Vlad!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 822
	},
	{
		"id" : 243074310,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-29T09:16:10Z",
		"body" : "Thanks for taking a stab at this, but I think this goes into the wrong direction and further reinforces a not so good style. My personal opinion is that we should make the styling more semantic rather than hard-coding the style on every use (think of templates rather than direct formatting in word processing). Examples:\r\n\r\n- `#{Tty.red.underline}Error#{Tty.reset}` should be `#{Tty.error}Error#{Tty.reset}` and the exact styling (currently red and underlined) an implementation detail of the `Tty.error` method.\r\n\r\n  I think it would be nice to also style the following colon in this and similar cases (warning, ‚Ä¶), but that's a different debate.\r\n\r\n- `#{Tty.underline}URL#{Tty.reset}` (previously `#{Tty.em}URL#{Tty.reset}`) should be `#{Tty.url}URL#{Tty.reset}`.\r\n\r\nNot only will this make styling more consistent, but it will also expose when we have too many different styles and the output becomes more colorful and varied than useful. If we can keep the number of `Tty.<predefined_style>` methods limited, this will come almost for free.\r\n\r\n> *No description provided.*\r\n\r\nI appreciate your work a lot, but I would be a bit happier if you could provide some description of your PRs. Mainly a why and some high-level overview would be nice to have, as those aren't immediately obvious from looking at the diff. This doesn't have to be long, but the length should be non-zero except for small self-explanatory or urgent fixes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 823
	},
	{
		"id" : 246886501,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-14T02:22:20Z",
		"body" : "@UniqMartin or @MikeMcQuaid, could someone take a look again?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 823
	},
	{
		"id" : 246926044,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T07:12:45Z",
		"body" : "Looking much better, thanks @reitermarkus.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 823
	},
	{
		"id" : 247731974,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-16T23:32:55Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/823?src=pr) is 83.74% (diff: 100%)\n> Merging [#823](https://codecov.io/gh/Homebrew/brew/pull/823?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@             master       #823   diff @@\n==========================================\n  Files           340        342     +2   \n  Lines         13948      13955     +7   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          11677      11687    +10   \n+ Misses         2271       2268     -3   \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a54c968...c3a080a](https://codecov.io/gh/Homebrew/brew/compare/a54c96825b2c490b2b29f4214de44cf146ea7744...c3a080a67184a3fac528d8b0cd9eec338d26e043?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 823
	},
	{
		"id" : 247926392,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-19T07:27:11Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/823?src=pr) is 83.68% (diff: 100%)\n> Merging [#823](https://codecov.io/gh/Homebrew/brew/pull/823?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@             master       #823   diff @@\n==========================================\n  Files           340        342     +2   \n  Lines         13948      13964    +16   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          11677      11686     +9   \n- Misses         2271       2278     +7   \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a54c968...9c63065](https://codecov.io/gh/Homebrew/brew/compare/a54c96825b2c490b2b29f4214de44cf146ea7744...9c630653ef56b2df3ba7f29f5ebabec2e7a4745a?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 823
	},
	{
		"id" : 247932492,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-19T08:05:54Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/823?src=pr) is 83.68% (diff: 100%)\n\n\n> No coverage report found for **master** at 6e1312d.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6e1312d...9c63065](https://codecov.io/gh/Homebrew/brew/compare/6e1312d4a19468645889abca9a9a5a1c1e49c013...9c630653ef56b2df3ba7f29f5ebabec2e7a4745a?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 823
	},
	{
		"id" : 247941870,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T08:58:02Z",
		"body" : "@reitermarkus Can you try to avoid pushing quite as much? Every time you do there's a CI job that takes ~30m to run.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 823
	},
	{
		"id" : 247944037,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-19T09:10:05Z",
		"body" : "@MikeMcQuaid, sorry about that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 823
	},
	{
		"id" : 247944966,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T09:15:01Z",
		"body" : "@reitermarkus No worries, not to know üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 823
	},
	{
		"id" : 249402689,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-25T04:49:40Z",
		"body" : ":-1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 823
	},
	{
		"id" : 250908093,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T11:45:07Z",
		"body" : "@reitermarkus Sorry it took me so long to get to this. I've updated `utils/tty.rb` in a way that I think signals intent a bit more and should make it more obvious what's going on. If you're üëç on that and address the other comments (basically now just: don't colour URLs) and fix the merge conflicts (üò≠) then I'm happy for this to üö¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 823
	},
	{
		"id" : 250917928,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-01T15:23:02Z",
		"body" : "> fix the merge conflicts (:sob:) \r\n\r\nTotally looking forward to that! :joy: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 823
	},
	{
		"id" : 250951682,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-02T03:36:35Z",
		"body" : "Have looked over this on more time. Merging this now to avoid any more merge conflicts.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 823
	},
	{
		"id" : 250956357,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-02T06:27:43Z",
		"body" : "This seems to have broken CI.\r\nhttps://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/8588/version=el_capitan/console\r\nSee https://github.com/Homebrew/brew/issues/1209",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 823
	},
	{
		"id" : 242877062,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-26T23:40:04Z",
		"body" : "Closing as a duplicate of https://github.com/Homebrew/homebrew.github.io/issues/98; thanks for the nudge.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 824
	},
	{
		"id" : 242883993,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-27T00:38:49Z",
		"body" : "As I noted before in the Issue Tim linked: https://github.com/Homebrew/homebrew.github.io/issues/98#issuecomment-230172239. Because things do not appear to be happening doesn't mean they aren't. Please try to be a little understanding of that without the subtle digs at us, Thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 824
	},
	{
		"id" : 242901497,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-27T07:15:16Z",
		"body" : "Yeh, seems like a good idea. :shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 825
	},
	{
		"id" : 242919701,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-27T14:18:05Z",
		"body" : "Oh, forgot to tweak the manpage. Will fix that & then merge.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 825
	},
	{
		"id" : 246043294,
		"user" : {
			"login" : "javache"
		},
		"created_at" : "2016-09-09T21:20:29Z",
		"body" : "@asm89 I just hit the same issue, maybe it's something FB-specific?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 827
	},
	{
		"id" : 246095254,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-09-10T06:53:00Z",
		"body" : "Sorry for the late response. It seems to me this is caused by this formula trying to create lock files outside the places we permitted. Hence, it hangs forever to wait for the lock.  \r\n\r\nThe deeper issue seems to be that Xcode and its SDK don't honor `$HOME` variable changes.\r\n\r\nSome possible solutions:\r\n* Found way to convince Xcode `$HOME` and `~/Library` path is located in `/tmp` folder.\r\n* Allow certain Xcode processes running outside sandbox.\r\n* Allow certain lock files be written outside the usual places. e.g. we can use ext name as criterial.\r\n\r\nOf course the first solution is most preferred. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 827
	},
	{
		"id" : 246096608,
		"user" : {
			"login" : "xu-cheng"
		},
		"created_at" : "2016-09-10T07:19:23Z",
		"body" : "Are you sure it is `chromedriver` the formula in question? From what I see, that formula doesn't compile anything. Therefore, I cannot reproduce this problem locally.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 827
	},
	{
		"id" : 246100165,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-10T08:43:09Z",
		"body" : "@xu-cheng thanks for the reply and solutions.\r\n\r\nAs two maintainers can't reproduce this, closing sorry.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 827
	},
	{
		"id" : 246119866,
		"user" : {
			"login" : "wez"
		},
		"created_at" : "2016-09-10T16:04:03Z",
		"body" : "I'm hitting this same Parse pflock issue while testing an update to the watchman formula... I'm also a Facebook employee, and `--no-sandbox` also made things tick over for me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 827
	},
	{
		"id" : 246127117,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-10T18:18:49Z",
		"body" : "I'd suggest you take this up with Facebook internal channels.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 827
	},
	{
		"id" : 246196868,
		"user" : {
			"login" : "asm89"
		},
		"created_at" : "2016-09-11T18:50:13Z",
		"body" : "@xu-cheng @MikeMcQuaid I've definitely only had this issue with chromedriver so far. Thanks for looking into it, but I understand you can't do much if you can't reproduce.\r\n\r\nInteresting that my colleagues @javache and @wez are hitting the same issues.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 827
	},
	{
		"id" : 242955917,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-28T04:40:49Z",
		"body" : "We haven't actually allowed non-core `default_formula` requirements in the past, as a matter of policy. That's always been a deliberate choice. We've maintained previously requirements with a `default_formula` in a non-core tap needed to live in that tap.\r\n\r\nI'd probably let this sit for a few days to let the team talk it through, since it means anyone anywhere using the `:mpi` requirement is going to end up with Science tapped, and that's quite a departure from things now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 242956724,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-28T05:11:36Z",
		"body" : ">since it means anyone anywhere using the :mpi requirement is going to end up with Science tapped\r\n\r\nI'm less worried about whoever that refers to than I am about the fact that a formula was upgraded in https://github.com/Homebrew/homebrew-core/pull/4154 breaking all of the following and leaving science to scramble to clean up the mess of all of the broken bottles:\r\n\r\n```\r\nJosephs-MacBook-Pro:~ joe$ brew uses open-mpi --include-build --include-optional\r\nboost                             homebrew/science/getdp            homebrew/science/paraview       \r\nbsponmpi                          homebrew/science/gmsh             homebrew/science/parmetis       \r\nfftw                              homebrew/science/gromacs          homebrew/science/pastix         \r\nkonoha                            homebrew/science/hdf5             homebrew/science/petsc          \r\nhomebrew/boneyard/gasnet          homebrew/science/hyphy            homebrew/science/ray            \r\nhomebrew/python/h5py              homebrew/science/hypre            homebrew/science/scalapack      \r\nhomebrew/python/mpi4py            homebrew/science/lammps           homebrew/science/scotch         \r\nhomebrew/science/abinit           homebrew/science/lis              homebrew/science/scotch5        \r\nhomebrew/science/abyss            homebrew/science/maker            homebrew/science/slepc          \r\nhomebrew/science/alpscore         homebrew/science/meme             homebrew/science/sundials       \r\nhomebrew/science/arpack           homebrew/science/mfem             homebrew/science/superlu_dist   \r\nhomebrew/science/bless            homebrew/science/mrbayes          homebrew/science/trilinos       \r\nhomebrew/science/dealii           homebrew/science/mumps            homebrew/science/zoltan         \r\nhomebrew/science/dida             homebrew/science/nest             homebrew/versions/boost159      \r\nhomebrew/science/elemental        homebrew/science/neuron           homebrew/versions/boost160      \r\nhomebrew/science/exabayes         homebrew/science/nonpareil      \r\nhomebrew/science/garli            homebrew/science/p4est          \r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 242963420,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-08-28T08:42:07Z",
		"body" : "The migration seems sensible; if we want to move the requirement out of core we could satisfy ourselves that it isn't used anywhere or put a depreciation message on it.\r\n\r\nDid we discuss non-core default formulas before? It would be helpful to see those discussions. I don't think we've defined any policy as I understand the word though I'm happy to admit there might be a working consensus. ;) \r\n\r\nThanks @ilovezfs for starting this discussion; I think this will help improve the robustness of the science tap. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 242974742,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-28T13:25:35Z",
		"body" : "> I don't think we've defined any policy as I understand the word though I'm happy to admit there might be a working consensus\r\n\r\nFor all intents and purposes this is all I've ever meant by policy. Even the things we write down are reorganised on the fly as necessary, such as SHA1, which is currently due to be hard blocked next month but likely won't be. My usage does meet one of the definitions of the word \"policy\" though, FWIW üòú.\r\n\r\nYou yourself discussing `numpy` made a slight virtual scrunched up face about using a non-core formula, way back in https://github.com/Homebrew/legacy-homebrew/pull/36810. I think you may have been the only one to make objection noises to it there, though.\r\n\r\nThere is precedent for kicking Requirements back to taps unless said requirement is going to be used by core formulae, see https://github.com/Homebrew/legacy-homebrew/pull/46448, sort of reinforced by planning to move the `osxfuse` requirement to `homebrew/fuse` until we decided to permit optional linkage in core formulae.\r\n\r\nI agree upgrading `open-mpi` because it passed CI, despite the extreme majority of formulae that use it residing in `science`, is not exactly ideal. I'm unconvinced though that either `konoha` or `lcdf-typetools` can be called Science formulae, and currently they would be migrated in https://github.com/Homebrew/homebrew-core/pull/4274.\r\n\r\nI think cross-tap `default_formula` is probably fine as long as we're aware either:\r\n\r\n* Everything that uses that requirement by default or `:recommended` needs to live in the same tap as the `default_formula`, regardless of where those formulae would ideally live or:\r\n* We essentially introduce cross-tap dependencies to any `:mpi`-using bottles, and potentially end up accidentally doing cross-tap CI testing every now & again.\r\n\r\nGiven where these formulae would be heading, probably not a bad idea to CC @Homebrew/science.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 242976330,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-28T13:58:42Z",
		"body" : "> I'm unconvinced though that either konoha or lcdf-typetools can be called Science formulae, and currently they would be migrated in Homebrew/homebrew-core#4274.\r\n\r\nlcdf-typetools only because my understanding is conflicts_with breaks if the cross-tap is untapped, but actually now there appears to no longer be any conflict, so it can be removed from the PR.\r\n\r\nAlso, it looks like mpi can be made optional or removed entirely from konoha:\r\nhttps://github.com/konoha-project/konoha3/blob/93e091e6f0970b0e58b6cbd61026999e434e95cb/src/package-devel/Lib.Mpi/CMakeLists.txt\r\n\r\n\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 242976609,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-28T14:04:56Z",
		"body" : "I'd be fine with `konoha` being boneyarded, FWIW. Only 39 \"known\" downloads to date, upstream is dead & `make test` hasn't passed in years.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 242976685,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-28T14:06:19Z",
		"body" : "```\r\niMac-TMP:homebrew-core joe$ git diff -- Formula/konoha.rb \r\ndiff --git a/Formula/konoha.rb b/Formula/konoha.rb\r\nindex ba93da4..35a2e3c 100644\r\n--- a/Formula/konoha.rb\r\n+++ b/Formula/konoha.rb\r\n@@ -22,7 +22,7 @@ class Konoha < Formula\r\n   deprecated_option \"tests\" => \"with-test\"\r\n \r\n   depends_on \"cmake\" => :build\r\n-  depends_on :mpi => [:cc, :cxx]\r\n+  depends_on :mpi => [:cc, :cxx, :optional]\r\n   depends_on \"pcre\"\r\n   depends_on \"json-c\"\r\n   depends_on \"sqlite\"\r\n```\r\ndid the job if you'd like to keep it on life support.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 242976794,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-28T14:08:24Z",
		"body" : "```\r\n98% tests passed, 15 tests failed out of 779\r\n```\r\njust :peach:y",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 242976987,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-28T14:11:46Z",
		"body" : "Yeah, it's actually worse in `master` upstream, heh üôà.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 242977552,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-08-28T14:22:34Z",
		"body" : "I've refreshed https://github.com/Homebrew/homebrew-core/pull/4274 with konoha mpi optional and the lcdf-tools conflicts_with yanked.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 242977655,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-28T14:24:52Z",
		"body" : "Cool üëç. Would like more opinions on the cross-tap `default_formula` thing here, and someone from Science to drop by and say they're okay accepting the formula even if you get hit by a truck & can no longer help maintain them. Those two conditions aside, I have no permanent blocker here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 242978016,
		"user" : {
			"login" : "dpo"
		},
		"created_at" : "2016-08-28T14:32:21Z",
		"body" : "We're happy to maintain those formulae over at Science. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 242995231,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-08-28T19:49:03Z",
		"body" : "I'd prefer to see `open-mpi` in Homebrew/science.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 244492675,
		"user" : {
			"login" : "dpo"
		},
		"created_at" : "2016-09-02T21:33:40Z",
		"body" : "There's already a bug-fix release 2.0.1 of OpenMPI.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 244543687,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T12:29:01Z",
		"body" : "Let's close this as no-one else chimed in and avoid the migration.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 244543811,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-03T12:31:13Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 828
	},
	{
		"id" : 242952265,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-28T02:28:27Z",
		"body" : "Looks like a git rebase gone wrong, perhaps. Can you `cat /usr/local/bin/brew` and provide the output?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 829
	},
	{
		"id" : 242978277,
		"user" : {
			"login" : "fm-techbts"
		},
		"created_at" : "2016-08-28T14:37:21Z",
		"body" : "`$ cat /usr/local/bin/brew\r\n<<<<<<< 7c5e149b1b56f59ce36dae145961d5ceb6cd3ac9\r\n#!/bin/bash\r\nset +o posix\r\n\r\nquiet_cd() {\r\n  cd \"$@\" >/dev/null\r\n}\r\n\r\nsymlink_target_directory() {\r\n  local target=\"$(readlink \"$1\")\"\r\n  local target_dirname=\"$(dirname \"$target\")\"\r\n  local directory=\"$2\"\r\n  quiet_cd \"$directory\" && quiet_cd \"$target_dirname\" && pwd -P\r\n}\r\n\r\nBREW_FILE_DIRECTORY=\"$(quiet_cd \"${0%/*}/\" && pwd -P)\"\r\nHOMEBREW_BREW_FILE=\"${BREW_FILE_DIRECTORY%/}/${0##*/}\"\r\nHOMEBREW_PREFIX=\"${HOMEBREW_BREW_FILE%/*/*}\"\r\n\r\n# Default to / prefix if unset or the bin/brew file.\r\nif [[ -z \"$HOMEBREW_PREFIX\" || \"$HOMEBREW_PREFIX\" = \"$HOMEBREW_BREW_FILE\" ]]\r\nthen\r\n  HOMEBREW_PREFIX=\"/\"\r\nfi\r\n\r\nHOMEBREW_REPOSITORY=\"$HOMEBREW_PREFIX\"\r\n\r\n# Resolve the bin/brew symlink to find Homebrew's repository\r\nif [[ -L \"$HOMEBREW_BREW_FILE\" ]]\r\nthen\r\n  BREW_FILE_DIRECTORY=\"$(symlink_target_directory \"$HOMEBREW_BREW_FILE\" \"$BREW_FILE_DIRECTORY\")\"\r\n  HOMEBREW_REPOSITORY=\"${BREW_FILE_DIRECTORY%/*}\"\r\nfi\r\n\r\n# Try to find a /usr/local HOMEBREW_PREFIX where possible (for bottles)\r\nif [[ -L \"/usr/local/bin/brew\" ]]\r\nthen\r\n  USR_LOCAL_BREW_FILE_DIRECTORY=\"$(symlink_target_directory \"/usr/local/bin/brew\" \"/usr/local/bin\")\"\r\n  USR_LOCAL_HOMEBREW_REPOSITORY=\"${USR_LOCAL_BREW_FILE_DIRECTORY%/*}\"\r\n  if [[ \"$HOMEBREW_REPOSITORY\" = \"$USR_LOCAL_HOMEBREW_REPOSITORY\" ]]\r\n  then\r\n    HOMEBREW_PREFIX=\"/usr/local\"\r\n  fi\r\nfi\r\n\r\nHOMEBREW_LIBRARY=\"$HOMEBREW_REPOSITORY/Library\"\r\n\r\nsource \"$HOMEBREW_LIBRARY/Homebrew/brew.sh\"\r\n=======\r\n#!/bin/sh\r\n\r\nchdir () {\r\n  cd \"$@\" >/dev/null\r\n}\r\n\r\nBREW_FILE_DIRECTORY=$(chdir \"${0%/*}\" && pwd -P)\r\nexport HOMEBREW_BREW_FILE=\"$BREW_FILE_DIRECTORY/${0##*/}\"\r\n\r\nBREW_SYMLINK=$(readlink \"$0\")\r\nif [ -n \"$BREW_SYMLINK\" ]\r\nthen\r\n    BREW_SYMLINK_DIRECTORY=$(dirname \"$BREW_SYMLINK\")\r\n    BREW_FILE_DIRECTORY=$(chdir \"$BREW_FILE_DIRECTORY\" &&\r\n                          chdir \"$BREW_SYMLINK_DIRECTORY\" && pwd -P)\r\nfi\r\n\r\nBREW_LIBRARY_DIRECTORY=$(chdir \"$BREW_FILE_DIRECTORY\"/../Library && pwd -P)\r\n\r\n# Users may have these set, pointing the system Ruby\r\n# at non-system gem paths\r\nunset GEM_HOME\r\nunset GEM_PATH\r\n\r\nBREW_SYSTEM=$(uname -s | tr \"[:upper:]\" \"[:lower:]\")\r\nif [ \"$BREW_SYSTEM\" = \"darwin\" ]\r\nthen\r\n    exec \"$BREW_LIBRARY_DIRECTORY/brew.rb\" \"$@\"\r\nelse\r\n    exec ruby -W0 \"$BREW_LIBRARY_DIRECTORY/brew.rb\" \"$@\"\r\nfi\r\n>>>>>>> dieharder: add 3.31.1 bottle.`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 829
	},
	{
		"id" : 243002365,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-28T22:03:52Z",
		"body" : "Yup, looks like a rebase gone wrong. Try:\r\n```bash\r\ncd $(brew --prefix) && git fetch && git reset --hard origin/master\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 829
	},
	{
		"id" : 243005344,
		"user" : {
			"login" : "fm-techbts"
		},
		"created_at" : "2016-08-28T23:09:47Z",
		"body" : "Still getting the same error. \r\n\r\n```$ cd $(brew --prefix) && git fetch && git reset --hard origin/master\r\n/usr/local/bin/brew: line 1: syntax error near unexpected token `<<<'\r\n/usr/local/bin/brew: line 1: `<<<<<<< 7c5e149b1b56f59ce36dae145961d5ceb6cd3ac9'\r\nfatal: Not a git repository (or any of the parent directories): .git\r\n ```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 829
	},
	{
		"id" : 243005527,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-28T23:13:13Z",
		"body" : "Oh, that's because I'm an idiot. Of course `brew --prefix` will struggle to work if `brew` (the script) is messed up. Sorry.\r\n\r\nTry:\r\n```bash\r\ncd /usr/local && git fetch && git reset --hard origin/master\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 829
	},
	{
		"id" : 243005811,
		"user" : {
			"login" : "fm-techbts"
		},
		"created_at" : "2016-08-28T23:19:09Z",
		"body" : "`n$ cd /usr/local && git fetch && git reset --hard origin/master\r\nremote: Counting objects: 18, done.\r\nremote: Compressing objects: 100% (4/4), done.\r\nremote: Total 18 (delta 14), reused 18 (delta 14), pack-reused 0\r\nUnpacking objects: 100% (18/18), done.\r\nFrom https://github.com/Homebrew/brew\r\n   7c5e149..8e29cf1  master     -> origin/master\r\nerror: unable to create file Library/Homebrew/dev-cmd/boneyard-formula-pr.rb (Permission denied)\r\nerror: unable to create file Library/Homebrew/dev-cmd/bump-formula-pr.rb (Permission denied)\r\nerror: unable to create file Library/Homebrew/dev-cmd/linkage.rb (Permission denied)\r\nerror: unable to create file Library/Homebrew/dev-cmd/mirror.rb (Permission denied)\r\nerror: unable to create file Library/Homebrew/dev-cmd/test-bot.rb (Permission denied)\r\nerror: unable to unlink old 'Library/Homebrew/dev-cmd/update-test.rb' (Permission denied)\r\nerror: unable to create symlink Library/Homebrew/test/bottles/testball_bottle-0.1.linux_x86_64.bottle.tar.gz (Permission denied)\r\nerror: unable to create symlink Library/Homebrew/test/bottles/testball_bottle-0.1.macintosh_intel.bottle.tar.gz (Permission denied)\r\nerror: unable to create symlink Library/Homebrew/test/bottles/testball_bottle-0.1.sierra.bottle.tar.gz (Permission denied)\r\nfatal: Could not reset index file to revision 'origin/master'.\r\n`\r\n\r\nSorry to just keep dumping error messages on you. I really do appreciate your help. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 829
	},
	{
		"id" : 243005872,
		"user" : {
			"login" : "fm-techbts"
		},
		"created_at" : "2016-08-28T23:20:15Z",
		"body" : "I'm hesitant to try it with sudo since that may be what got me into this mess. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 829
	},
	{
		"id" : 243006187,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-28T23:26:25Z",
		"body" : "Yikes, fun. Try a limited `sudo`:\r\n\r\n```bash\r\nsudo chown -R $(whoami) /usr/local/Library\r\n```\r\nAnd then do the fetch/reset again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 829
	},
	{
		"id" : 243006354,
		"user" : {
			"login" : "fm-techbts"
		},
		"created_at" : "2016-08-28T23:29:32Z",
		"body" : "`$ sudo chown -R $(whoami) /usr/local/Library\r\n$ cd /usr/local && git fetch && git reset --hard origin/master\r\nHEAD is now at 8e29cf1 Merge pull request #812 from DomT4/at\r\n$ brew update\r\nAlready up-to-date.\r\n$\r\n1\r\n\r\nYou are awesome! Thank you! Now to see if I can get apt-get installed without fucking everything up again. \r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 829
	},
	{
		"id" : 243006601,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-28T23:33:58Z",
		"body" : "Great! üòÉ. Give us a shout if anything else breaks.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 829
	},
	{
		"id" : 242986816,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-08-28T17:18:26Z",
		"body" : "I didn't include a test case for the new option since `brew deps` doesn't have a test yet, and I wasn't quite up to that task. So the build is marked as a failure since coverage has decreased.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 830
	},
	{
		"id" : 244546694,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T13:31:28Z",
		"body" : "Should be fixed, I believe, by https://github.com/Homebrew/brew/issues/846",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 831
	},
	{
		"id" : 243146877,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-29T14:49:42Z",
		"body" : "> Coverage decreased (-0.004%) to 57.889%\r\n\r\nOh, come on üòÜ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 832
	},
	{
		"id" : 243186564,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-29T17:05:44Z",
		"body" : "> Guess who hates special characters? Bintray hates special characters!\r\n\r\nWhat is the actual error message? Could it be that an `@` is perfectly valid in a package name on Bintray, but we simply fail to properly escape this character when constructing the Bintray API request URL? If not, are you aware of a list of valid characters that can be used in Bintray package names? The reason I'm asking all these questions is that the full-caps `AT` in the package name looks fairly ugly (to me). Once we start using it, it will be difficult to impossible to revise this decision. Maybe there's a better replacement character we can use, like `x` for `+`.\r\n\r\n> > Coverage decreased (-0.004%) to 57.889%\r\n> \r\n> Oh, come on üòÜ.\r\n\r\nIf you felt like addressing this, it should be fairly straightforward to add some unit tests for the methods in `Utils::Bottles::Bintray`. Given that the current implementation of this PR is broken, that's a strong indicator we would benefit from those tests.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 832
	},
	{
		"id" : 243189714,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-29T17:17:05Z",
		"body" : "> Could it be that an @ is perfectly valid in a package name on Bintray, \r\n\r\nIt's not, I checked the website:\r\n```\r\nPackage name can only contain letters, numbers and the following characters: .-_:\r\n```\r\nI do occasionally follow up on curious errors üòâ.\r\n\r\n> If you felt like addressing this, it should be fairly straightforward to add some unit tests for the methods in Utils::Bottles::Bintray. Given that the current implementation of this PR is broken, that's a strong indicator we would benefit from those tests.\r\n\r\nI'll take a peek, but I'm not convinced coverage isn't a little broken. [This](https://github.com/Homebrew/brew/pull/816) PR failed coverage tests & all I was doing there is tweaking existing lines from `http` to `https` üòï.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 832
	},
	{
		"id" : 243193496,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-08-29T17:29:44Z",
		"body" : "> I do occasionally follow up on curious errors üòâ.\r\n\r\nThanks! I didn't doubt you did, just wanted to gently nudge you to share your findings with us (error messages you saw, relevant resources you found, ‚Ä¶).\r\n\r\nFrom the listed characters, would you consider `:` a viable replacement character for `@` on Bintray? I think `openssl:1.1` reads a lot nicer than `opensslAT1.1`, `:` isn't currently used in formula names, and it isn't a valid character in a formula (class) name.\r\n\r\n> I'll take a peek, but I'm not convinced coverage isn't a little broken.\r\n\r\nThe change in coverage makes sense here. You added a line to a method that wasn't covered, so the number of relevant lines increased, but the number of covered lines did not, hence the (very small) drop in coverage.\r\n\r\n> [This](https://github.com/Homebrew/brew/pull/816) PR failed coverage tests & all I was doing there is tweaking existing lines from `http` to `https` üòï.\r\n\r\nThis is a different case as far as I can tell. The latest Travis job for the PR failed very early before it could run the test suite and generate the coverage report. The Travis job that was supposed to run after the merge is still pending. Or am I overlooking something?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 832
	},
	{
		"id" : 243200919,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-29T17:54:39Z",
		"body" : "> From the listed characters, would you consider : a viable replacement character for @ on Bintray?\r\n\r\nI guess I don't have a strong objection as long as you don't mind the inconsistency of it being `opensslAT11` in the formula, `openssl@1.1` for the filename & `openssl:1.1` on Bintray. I like consistency but I'm not overly fussed here if you've a strong positive feeling for it.\r\n\r\n> The Travis job that was supposed to run after the merge is still pending. Or am I overlooking something?\r\n\r\nThere was a `coverage/coveralls ‚Äî` job in the PR, which failed, IIRC. The Travis problems started after that was merged, I think. Could be wrong though!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 832
	},
	{
		"id" : 243218998,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-29T18:53:22Z",
		"body" : "`:` for bottles in place, tests added.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 832
	},
	{
		"id" : 243226836,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-08-29T19:20:49Z",
		"body" : "FWIW, the colon is weird.\r\n\r\nIf the file names for bottles in HOMEBREW_CACHE are going to have this colon, they get presented by the Finder as having a slash in place of the colon.  I think that looks unacceptably weird in a filename on a Mac.\r\n\r\nIf the file names of bottles in the cache don't have the colon---if that's just what they're called on Bintray's servers---that seems fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 832
	},
	{
		"id" : 243232644,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-29T19:43:01Z",
		"body" : "> If the file names of bottles in the cache don't have the colon---if that's just what they're called on Bintray's servers---that seems fine.\r\n\r\n```json\r\n{\"openssl@1.1\":{\"formula\":{\"pkg_version\":\"1.1.0\",\"path\":\"Library/Taps/homebrew/homebrew-core/Formula/openssl@1.1.rb\"},\"bottle\":{\"root_url\":\"https://homebrew.bintray.com/bottles\",\"prefix\":\"/usr/local\",\"cellar\":\"/usr/local/Cellar\",\"rebuild\":0,\"tags\":{\"el_capitan\":{\"filename\":\"openssl@1.1-1.1.0.el_capitan.bottle.tar.gz\",\"sha256\":\"1c387846400ee0d03713c935f1ce14f558dfa48c0d18b9146cb52246828637c4\"}}},\"bintray\":{\"package\":\"openssl:1.1\",\"repository\":\"bottles\"}}}\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 832
	},
	{
		"id" : 243895734,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-31T20:46:12Z",
		"body" : "@DomT4 Yeh, make sure they are using valid name formats in both the class name, formula name and filename.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 832
	},
	{
		"id" : 247767481,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-09-17T12:44:12Z",
		"body" : "@DomT4 I guess better late than never: Thanks for adding some tests and for giving some thought to my suggestions and eventually incorporating some of them. Much appreciated! :heart:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 832
	},
	{
		"id" : 243325621,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-30T03:50:29Z",
		"body" : "Huh. That failure did not happen locally.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 833
	},
	{
		"id" : 243327952,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-08-30T04:10:53Z",
		"body" : "Oh, I see why. Can I wrap it in a simple `if OS.mac?` or are people going to insist I write a separate macOS compatibility layer for the `install` command? üôà.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 833
	},
	{
		"id" : 243431780,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-30T13:05:46Z",
		"body" : "One comment but otherwise agree with it.\r\n\r\n> or are people going to insist I write a separate macOS compatibility layer for the install command? üôà.\r\n\r\nUsually yes but in this case you can just pull into diagnostic instead; I don't think we need a separate set of \"strict\" checks.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 833
	},
	{
		"id" : 243893616,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-31T20:38:46Z",
		"body" : ":+1: üö¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 834
	},
	{
		"id" : 243946649,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-01T00:59:54Z",
		"body" : "This can cause false negatives we currently do not get so I'm not sure why you'd want to ship it since it doesn't actually fix any existing bug anyone has pointed to.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 834
	},
	{
		"id" : 243976443,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-01T05:00:30Z",
		"body" : "Some of your concerns are valid and I'll think about them before shipping that aspect of the changes here. I had stuff to do yesterday so wasn't around.\r\n\r\nI'll note though that if you want me to look at your comments on maintaining the core with more significance it would be helpful if you helped maintain more of the core; your own PRs are of a high standard & you throw a lot of work into contributing to those and keeping formulae up-to-date, which is fantastic. That makes you a valuable contributor, but it also somewhat limits how exposed you are to the ways other contributors see/change/use/abuse things.\r\n\r\nYou've got [issues](https://github.com/Homebrew/homebrew-core/issues/3168) specifically reopened that were then left for dead, tracking [issues](https://github.com/Homebrew/homebrew-core/issues/4029) which aren't [particularly](https://github.com/Homebrew/homebrew-core/issues/2184) complicated & could be resolved relatively swiftly, and there's stuff like https://github.com/Homebrew/brew/pull/770 which was a solid fix improving UX that needed just a little tweaking & you closed it citing _\"lack of patience\"_.\r\n\r\nIf you want to take over core stuff completely, please, feel free, but I find it quite grating till then to have my concerns about the status quo dismissed by someone who proposes changes, is asked to help implement them and in reply there's a vaguely non-committal shrug. You're entirely welcome to pick & choose what you work on, everyone does to some extent, but if you want to dismiss my concerns I'd appreciate it if you didn't leave those concerns on my plate forevermore.\r\n\r\nWhilst I may be a total PITA to work with, I'm a total PITA who at least _attempts_ to propose or even implement alternatives if I shoot down someone else's fix for an issue that is bothering them.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 834
	},
	{
		"id" : 243977609,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-01T05:10:36Z",
		"body" : "I'm confident you'll realize at some point the above comment is not only gratuitous but also entirely inappropriate for this venue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 834
	},
	{
		"id" : 244135280,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-01T16:30:14Z",
		"body" : "I'm going to pretty drastically cut back on the amount of core work I do, so I've dropped the test changes. Someone else can pick it up if they care.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 834
	},
	{
		"id" : 243894977,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-31T20:43:35Z",
		"body" : "Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 838
	},
	{
		"id" : 244553610,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-03T15:43:35Z",
		"body" : "Essentially everything about `/opt/local` is because you've installed MacPorts. If you want to keep Homebrew & MacPorts around, that's fine, but it may be worth moving MacPorts out of the way whilst using Homebrew because a lot of upstream build scripts will check `/opt` on OS X and that can cause odd breakage.\r\n\r\n```\r\n/Library/Frameworks/Python.framework/Versions/3.5/bin/python3-config\r\n/Library/Frameworks/Python.framework/Versions/3.5/bin/python3.5-config\r\n/Library/Frameworks/Python.framework/Versions/3.5/bin/python3.5m-config\r\n/Library/Frameworks/Python.framework/Versions/2.7/bin/python-config\r\n/Library/Frameworks/Python.framework/Versions/2.7/bin/python2-config\r\n/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7-config\r\n```\r\nYou likely installed the Python packages for OS X from the upstream website. We recommend using ours.\r\n\r\n```\r\nWarning: You have unlinked kegs in your Cellar\r\nLeaving kegs unlinked can lead to build-trouble and cause brews that depend on\r\nthose kegs to fail to run properly once built. Run brew link on these:\r\nnmap\r\npython\r\n```\r\nYou can fix this with `brew link nmap python` unless leaving them unlinked is intentional.\r\n\r\n```\r\nWarning: Some directories in your path end in a slash.\r\nDirectories in your path should not end in a slash. This can break other\r\ndoctor checks. The following directories should be edited:\r\n/opt/local/bin/\r\n/usr/local/bin/\r\n```\r\nStuff in your `$PATH` shouldn't end in a slash. Depending on where you've set your path from, you should remove the last forward slash from `/opt/local/bin/` & `/usr/local/bin/`, it isn't needed.\r\n\r\n> Warning: Your Xcode (6.2) is outdated\r\nPlease update to Xcode 7.3.1.\r\nXcode can be updated from the App Store.\r\n\r\nDoes what it says on the tin üòâ. Check the Mac App Store for an Xcode update.\r\n\r\n> Warning: Your Homebrew is outdated.\r\nYou haven't updated for at least 24 hours. This is a long time in brewland!\r\nTo update Homebrew, run brew update.\r\n\r\nRun `brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 838
	},
	{
		"id" : 243894204,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-31T20:40:53Z",
		"body" : "Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 843
	},
	{
		"id" : 243895119,
		"user" : {
			"login" : "tommyjcarpenter"
		},
		"created_at" : "2016-08-31T20:44:07Z",
		"body" : "@MikeMcQuaid  that post seems to reference \" failed to build on 10.x\",\". That does not apply here. The product built and installed successfully. There were no errors.  I think it is incomplete, though. \r\n\r\nMy guesses are:\r\n1) the tar that is downloaded is somehow incomplete: https://homebrew.bintray.com/bottles/gcc-6.2.0.el_capitan.bottle.tar.gz\r\n2) it is built with an incorrect ./configure script. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 843
	},
	{
		"id" : 243895833,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-08-31T20:46:32Z",
		"body" : "Please follow those steps regardless.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 843
	},
	{
		"id" : 243899078,
		"user" : {
			"login" : "tommyjcarpenter"
		},
		"created_at" : "2016-08-31T20:57:20Z",
		"body" : "@MikeMcQuaid ok I have followed those steps. Updated twice. gist shows `https://gist.github.com/0a3be249566145b6cbb335b9ba192d63`. Nothing in Doctor: `~ brew doctor\r\nYour system is ready to brew.`. Not Java. XCode is `Version 7.3.1 `. \r\n\r\nBrew version\r\n```\r\n~ brew config\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: 5d5b9a78535fbc1f9c31d02991f13120e205f9e8\r\nLast commit: 18 minutes ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: eaab6d42d83f2ec2a0c88943468d142123c4677a\r\nCore tap last commit: 4 minutes ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: octa-core 64-bit haswell\r\nHomebrew Ruby: 2.0.0-p648\r\nClang: 7.3 build 703\r\nGit: 2.9.3 => /usr/local/bin/git\r\nPerl: /usr/local/bin/perl => /usr/local/Cellar/perl/5.24.0_1/bin/perl\r\nPython: /usr/local/bin/python => /usr/local/Cellar/python/2.7.12/Frameworks/Python.framework/Versions/2.7/bin/python2.7\r\nRuby: /usr/local/bin/ruby => /usr/local/Cellar/ruby/2.3.1/bin/ruby\r\nJava: 1.8.0_92, 1.8.0_60\r\nOS X: 10.11.6-x86_64\r\nXcode: 7.3.1\r\nCLT: 7.3.1.0.1.1461711523\r\nX11: N/A\r\n```\r\n\r\nThen I uninstalled and reinstalled:\r\n```\r\n~ brew uninstall gcc\r\nUninstalling /usr/local/Cellar/gcc/6.2.0... (1,435 files, 281.9M)\r\n~ brew install gcc --enable-cxx\r\n==> Downloading https://homebrew.bintray.com/bottles/gcc-6.2.0.el_capitan.bottle.tar.gz\r\nAlready downloaded: /Users/tommy/Library/Caches/Homebrew/gcc-6.2.0.el_capitan.bottle.tar.gz\r\n==> Pouring gcc-6.2.0.el_capitan.bottle.tar.gz\r\n==> Caveats\r\nGCC has been built with multilib support. Notably, OpenMP may not work:\r\n  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60670\r\nIf you need OpenMP support you may want to\r\n  brew reinstall gcc --without-multilib\r\n==> Summary\r\nüç∫  /usr/local/Cellar/gcc/6.2.0: 1,435 files, 281.9M\r\n~\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 843
	},
	{
		"id" : 243903054,
		"user" : {
			"login" : "tommyjcarpenter"
		},
		"created_at" : "2016-08-31T21:10:45Z",
		"body" : "From comparing the downloaded bottle, vs. the GNU tar I linked in my SO post, I see a lot less files in the mac bottle, including the c++config file. Specifically from the bottle download, in `/Users/tommy/Downloads/gcc/6.2.0/include/c++/6.2.0/bits`, the header is missing. It is not missing from the vanilla GNU download. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 843
	},
	{
		"id" : 244049387,
		"user" : {
			"login" : "tommyjcarpenter"
		},
		"created_at" : "2016-09-01T11:18:05Z",
		"body" : "Edit: this file appeared in another directory, /usr/local/Cellar/gcc/6.2.0/include/c++/6.2.0/x86_64-apple-darwin15.6.0/bits. I guess this is a platform specific configuration directory. So, this was my fault. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 843
	},
	{
		"id" : 243960790,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-09-01T02:44:32Z",
		"body" : "I think the root cause is that as of 45e138ff, introduced by Homebrew/homebrew#50355, `HOMEBREW_SDKROOT` and `SDKROOT` can diverge in the CLT-present case.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 844
	},
	{
		"id" : 244186514,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-01T19:30:46Z",
		"body" : "Seems reasonable to me but I don't see any reference to the prefix in this or the referenced commit but this seems to only relate to a non-standard prefix, right? It feels like this is something that should vary depending on the prefix as `/usr/local/lib` is a system prefix now but we want it filtered if that's the HOMEBREW_PREFIX.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 845
	},
	{
		"id" : 244234100,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-09-01T22:39:19Z",
		"body" : "It looks like that case is handled elsewhere; refurbish_args rejects linker search paths that are present in `library_paths` or `system_library_paths` and `HOMEBREW_PREFIX/lib` is added to `library_paths` by superenv.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 845
	},
	{
		"id" : 244535795,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T09:03:55Z",
		"body" : "> refurbish_args rejects linker search paths that are present in library_paths or system_library_paths and HOMEBREW_PREFIX/lib is added to library_paths by superenv.\r\n\r\nüëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 845
	},
	{
		"id" : 244535861,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-03T09:05:55Z",
		"body" : "I'm still not clear why /usr/local is being hard coded here. By default there's nothing there, so how is it a \"special\" path?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 845
	},
	{
		"id" : 244536069,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T09:11:17Z",
		"body" : "@ilovezfs Probably because it's in the default search path for Clang.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 845
	},
	{
		"id" : 244536406,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-03T09:19:56Z",
		"body" : "Ah ok",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 845
	},
	{
		"id" : 244101513,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-09-01T14:44:29Z",
		"body" : "Will add a test later, when proper behaviour is chosen.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 846
	},
	{
		"id" : 244102100,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-01T14:46:18Z",
		"body" : "@vladshablinsky this looks good. I do think we should (re-)consider whether the \"involuntary\" upgrades should be allowed at all when the user has explicitly pinned the formula, though.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 846
	},
	{
		"id" : 244115505,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-09-01T15:26:28Z",
		"body" : "> I do think we should (re-)consider whether the \"involuntary\" upgrades should be allowed at all when the user has explicitly pinned the formula, though.\r\n\r\nAgreed. I addressed something similar in the description to the PR. Should I change it this way?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 846
	},
	{
		"id" : 244115925,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-01T15:27:47Z",
		"body" : "@vladshablinsky let's see what @MikeMcQuaid thinks :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 846
	},
	{
		"id" : 244186950,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-01T19:32:21Z",
		"body" : "Nice work @vladshablinsky!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 846
	},
	{
		"id" : 244187092,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-01T19:32:54Z",
		"body" : "> e.g. we can warn and not allow to install formula if it depends on outdated formula that is pinned. Or we can repin pinned formula if it eventually gets upgraded by its dependent.\r\n\r\nRefusing to upgrade either package feels like the best fit here üëç \r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 846
	},
	{
		"id" : 244276989,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-02T03:53:21Z",
		"body" : "@MikeMcQuaid Agreed. I think that will be the least surprising behavior to users.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 846
	},
	{
		"id" : 244160249,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-09-01T17:58:49Z",
		"body" : ":+1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 847
	},
	{
		"id" : 244183908,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-01T19:20:50Z",
		"body" : "Thanks again @penman!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 847
	},
	{
		"id" : 244136212,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-01T16:33:36Z",
		"body" : "Do you have `HOMEBREW_DEVELOPER` set/unset?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 848
	},
	{
		"id" : 244184887,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-01T19:24:33Z",
		"body" : "Those things are likely unrelated. Is it literally a completely full clone now or just has more commits than you'd expect?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 848
	},
	{
		"id" : 244266646,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-02T02:21:14Z",
		"body" : "I don't have `HOMEBREW_DEVELOPER` set.  (I used to, until it began triggering full clones a few months ago.)\r\n\r\nIt is a completely full clone AFAIK, in the sense that It's got the very first commit ever in HB, from May 2009, about \"Belgian yeast\".\r\n\r\nOther times it doesn't become full, but I get *way* more commits than what has actually been committed since the last update.  E.g. several months' worth, even if I had updated earlier in the day.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 848
	},
	{
		"id" : 244393973,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-02T14:40:46Z",
		"body" : "It just happened again: shallow clone to completely full.\r\n\r\nBefore I went to bed last night I shallowly cloned.  Since then, the only things committed to the brew repo are the mergings of PRs 850 (51bdd859) and 851 (b2cbe0479).  I cd'd to my local clone, did `git pull`, and the entire history got pulled in.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 848
	},
	{
		"id" : 244395516,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-02T14:46:05Z",
		"body" : "If it helps:\r\n```\r\nremote: Counting objects: 63048, done.\r\nremote: Compressing objects: 100% (16500/16500), done.\r\nremote: Total 63048 (delta 45263), reused 62499 (delta 44752), pack-reused 0\r\nReceiving objects: 100% (63048/63048), 14.71 MiB | 2.93 MiB/s, done.\r\nResolving deltas: 100% (45263/45263), completed with 414 local objects.\r\nFrom https://github.com/Homebrew/brew\r\n   a607a83..51bdd85  master     -> origin/master\r\n * [new tag]         0.1        -> 0.1\r\n * [new tag]         0.2        -> 0.2\r\n * [new tag]         0.3        -> 0.3\r\n * [new tag]         0.4        -> 0.4\r\n * [new tag]         0.5        -> 0.5\r\n * [new tag]         0.6        -> 0.6\r\n * [new tag]         0.7        -> 0.7\r\n * [new tag]         0.7.1      -> 0.7.1\r\n * [new tag]         0.8        -> 0.8\r\n * [new tag]         0.8.1      -> 0.8.1\r\n * [new tag]         0.9        -> 0.9\r\n * [new tag]         0.9.1      -> 0.9.1\r\n * [new tag]         0.9.2      -> 0.9.2\r\n * [new tag]         0.9.3      -> 0.9.3\r\n * [new tag]         0.9.4      -> 0.9.4\r\n * [new tag]         0.9.5      -> 0.9.5\r\n * [new tag]         0.9.8      -> 0.9.8\r\n * [new tag]         0.9.9      -> 0.9.9\r\nUpdating a607a83..51bdd85\r\nFast-forward\r\n Library/Homebrew/brew.sh  | 1 +\r\n Library/Homebrew/utils.rb | 2 +-\r\n 2 files changed, 2 insertions(+), 1 deletion(-)\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 848
	},
	{
		"id" : 244524267,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-03T03:39:01Z",
		"body" : "And again, between 51bdd859ae49ba9c and d39eeac0d5041dbbc :(",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 848
	},
	{
		"id" : 244535825,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T09:04:46Z",
		"body" : "What does `git show 29d85578e75170a6c0eaebda4d701b46f1acf446` say? Do you get shown a commit or an error message?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 848
	},
	{
		"id" : 244546976,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-03T13:37:23Z",
		"body" : "A commit.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 848
	},
	{
		"id" : 244547384,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-03T13:45:06Z",
		"body" : "(And in this instance I was surprised there was a commit there, because before I saw @MikeMcQuaid's question, I did as an experiment `git pull --depth=1` in my newly full repo, followed by a `git gc --aggressive`.  That shrunk the size of the `.git` folder quite a bit, and made `git log` only show one commit.  And yet, the very first HB commit is still lurking in there.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 848
	},
	{
		"id" : 244548549,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T14:09:07Z",
		"body" : "@chdiza Do you have any other `git remote`s? Closing this out regardless, I'm afraid, as I'm not convinced there's anything we can do here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 848
	},
	{
		"id" : 244548980,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-03T14:17:42Z",
		"body" : "> Do you have any other git remotes?\r\n\r\nNo.\r\n\r\n> I'm not convinced there's anything we can do here.\r\n\r\nSomething must've changed.  Are we sure it's not the advent of the merge commits mentioned earlier in this thread?  This started happening around the same time those started appearing.  Maybe the merges are bringing in something from way back that `git` thinks it needs to grab.  Tags?  I dunno.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 848
	},
	{
		"id" : 244549453,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-03T14:27:36Z",
		"body" : "And again ... after I did a  fresh install with shallow clone a few minutes ago, `git pull` finds 327f5ca1778df and brings in the entire repo history.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 848
	},
	{
		"id" : 244553168,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T15:36:33Z",
		"body" : "> Are we sure it's not the advent of the merge commits mentioned earlier in this thread?\r\n\r\nIt could be but even if it is that's not a good enough reason for us to stop doing this, I'm afraid. It may mean we should stop bothering to use `--shallow` on Homebrew/brew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 848
	},
	{
		"id" : 244553836,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-03T15:47:20Z",
		"body" : "Out of curiosity, what was the reason for doing it in the first place?  I find it makes it much harder to read the GH commits page or `brew log`.  One thing I liked about HB (compared to the GH repos of other projects with multiple maintainers) was that HB didn't do that.\r\n\r\nOh well.\r\n\r\nAnyway, I don't think this means there's no point to using `--shallow` during an install; it still makes the initial cloning nice and fast, even if subsequent updates take a while.  Particularly on installation, it's nice to just get up and running.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 848
	},
	{
		"id" : 244554167,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T15:53:08Z",
		"body" : "> Out of curiosity, what was the reason for doing it in the first place?\r\n\r\nPreserves GPG verification, means we can use a single button for merging rather than `brew pull`, that it matters much less on this repo than Homebrew/homebrew-core.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 848
	},
	{
		"id" : 244184186,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-01T19:22:01Z",
		"body" : "Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nAlso, what happens if you run `curl https://homebrew.bintray.com/bottles/go-1.7.el_capitan.bottle.tar.gz`?\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 849
	},
	{
		"id" : 244201750,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-01T20:27:51Z",
		"body" : "Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information in a new issue on Homebrew/homebrew-core so we can help you with your problem.\r\n\r\nThanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 852
	},
	{
		"id" : 244543391,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T12:22:02Z",
		"body" : "This is actually intentional so that bottles can have a (more) reproducible SHA-1 based their contents when possible.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 853
	},
	{
		"id" : 244543409,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T12:22:26Z",
		"body" : "See https://github.com/Homebrew/legacy-homebrew/pull/46587 for more details.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 853
	},
	{
		"id" : 244544360,
		"user" : {
			"login" : "zbeekman"
		},
		"created_at" : "2016-09-03T12:44:42Z",
		"body" : "Ah I see! I guess that does make sense. Sorry for the noise. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 853
	},
	{
		"id" : 244543487,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T12:24:16Z",
		"body" : "I think the `sudo` check should be for stuff that requires `root` (e.g. Cask installing a `.pkg`, Services starting a system-wide daemon) rather than for things that may require a one-time permissions fix.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 854
	},
	{
		"id" : 244543492,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T12:24:28Z",
		"body" : "Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 855
	},
	{
		"id" : 244546758,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T13:32:48Z",
		"body" : "Closing as duplicate of https://github.com/Homebrew/brew/issues/827",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 855
	},
	{
		"id" : 244563789,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T18:55:10Z",
		"body" : "Found an issue with local testing. Will address tomorrow. Won't break bottling otherwise.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 856
	},
	{
		"id" : 244563819,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T18:55:43Z",
		"body" : "(well, won't break something that's already broken any more üòÜ )",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 856
	},
	{
		"id" : 244560252,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-03T17:48:25Z",
		"body" : "When exactly would the manpage and `share/doc/homebrew` get symlinked?  Upon a `brew update`?  A `brew doctor`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 857
	},
	{
		"id" : 244562364,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-03T18:25:49Z",
		"body" : "> Upon a brew update?\r\n\r\nYep.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 857
	},
	{
		"id" : 244566620,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-03T19:54:17Z",
		"body" : "If you're making changes to formulae locally you should almost always, at least temporarily, set `HOMEBREW_DEVELOPER`. Pretty sure that resolves the behaviour here as well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 862
	},
	{
		"id" : 244581297,
		"user" : {
			"login" : "jkarneges"
		},
		"created_at" : "2016-09-04T02:52:26Z",
		"body" : "Thanks. While looking up that variable I also found `HOMEBREW_NO_AUTO_UPDATE` which worked too. https://github.com/Homebrew/brew/issues/716",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 862
	},
	{
		"id" : 244577931,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-04T00:50:15Z",
		"body" : "Looks like that CI failure isn't anything to do with my changes? I ran `brew test-bot` just to make sure and everything passed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 863
	},
	{
		"id" : 244617967,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-04T17:48:33Z",
		"body" : "> Looks like that CI failure isn't anything to do with my changes? I ran brew test-bot locally just to make sure and everything passed.\r\n\r\nYeh, the Travis build has been flaky this weekend. The `default` is the main one we care about.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 863
	},
	{
		"id" : 244618336,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-04T17:52:18Z",
		"body" : "Some comments on this but liking where this is going so far and nice work creating this PR!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 863
	},
	{
		"id" : 244803352,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-05T19:37:28Z",
		"body" : "Nice work today ‚ú® ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 863
	},
	{
		"id" : 245251316,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-07T11:22:47Z",
		"body" : "A couple more tiny nits but I ‚ù§Ô∏è how this is looking and when you're testing is üÜó then I'd be happy to merge this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 863
	},
	{
		"id" : 245432436,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-07T21:57:15Z",
		"body" : "I've updated the PR based on your feedback, @MikeMcQuaid.\r\n\r\nIt also looked to me like putting data into a Tab isn't actually tested anywhere, so I added `test_create` and `test_for_formula` to make sure the `source.path` is set correctly in both places. I could expand this to test all of the Tab attributes if you're interested?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 863
	},
	{
		"id" : 245524410,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T08:08:18Z",
		"body" : "@penman This is looking great üëè. How's your testing going? When you consider this ready to üö¢ give me what you've been using for testing and I'll try my own too and, if it all looks good, we üö¢ this thing!\r\n\r\n> I could expand this to test all of the Tab attributes if you're interested?\r\n\r\nAlways interested in more tests! Feel free to make that a future PR, though, to avoid blocking this one.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 863
	},
	{
		"id" : 245697130,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-08T18:41:11Z",
		"body" : "@MikeMcQuaid I'm skeptical of that test failure. I'm not sure how this change could break <kbd>cask cleanup</kbd>, and I can't reproduce it locally. Is it something you've seen before? ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 863
	},
	{
		"id" : 245705560,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T19:05:24Z",
		"body" : "@penman Yeh, ignore it, it's flaky.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 863
	},
	{
		"id" : 245708880,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-08T19:16:35Z",
		"body" : "@reitermarkus Looks like [this spec](https://github.com/Homebrew/brew/blob/911edb0ed77859445c3a48f6abe5b9be5807ebf7/Library/Homebrew/cask/spec/cask/cli/cleanup_spec.rb#L56-L74) isn't entirely consistent. Mind taking a look?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 863
	},
	{
		"id" : 245717515,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-08T19:46:53Z",
		"body" : "@MikeMcQuaid In that case, I think this is ready.\r\n\r\nMostly, what I've been doing to test is installing <kbd>the_silver_searcher</kbd>, checking the INSTALL_RECEIPT has `source.path` set to the path to the formula, then uninstalling and installing it with <kbd>ag</kbd> (an alias for <kbd>the_silver_searcher</kbd>) and checking `source.path` is set to the path to the alias. I've tried a similar thing with a few other formulae with aliases, and it seems to be working. I've also installed some formulae with no aliases and that's been working too.\r\n\r\nNothing has come up in my general usage of Homebrew, either.\r\n\r\nI'm curious to see what you test, though, because I'm sure there are paths I haven't thought of where something might have gone wrong, or maybe there are parts of Homebrew that are generally tricky when things change that I'm not aware of.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 863
	},
	{
		"id" : 245725681,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T20:15:26Z",
		"body" : "Looks good to me in local testing. Nice work!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 863
	},
	{
		"id" : 245725750,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T20:15:40Z",
		"body" : "Rerunning CI then will merge.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 863
	},
	{
		"id" : 245841095,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T07:33:21Z",
		"body" : "@jawshooah @reitermarkus Going to need to remove that spec soon; it's making it pretty hard to get consistently green Homebrew builds.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 863
	},
	{
		"id" : 244618637,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-04T17:55:24Z",
		"body" : "> Do I need to add a test for the change. And if we need a test, then where should I put it. Possible variants are test_integration_cmds, test_formula_installer or test_dependency?\r\n\r\nIdeally yes. Add it to `test_formula_installer` or `test_dependency`, whichever you think is best üëç \r\n\r\n> Do we need to repin formula B if it's pinned and installation of A that depends on B requires different options from ones being used in pinned keg of B, so we eventually upgrade/reinstall B, but don't repin it.\r\n\r\nI think if it's pinned we should probably just refuse to do anything with it (reinstall or upgrade) and require the user to manually uninstall/unpin/upgrade to resolve it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 864
	},
	{
		"id" : 244813104,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-09-05T21:28:12Z",
		"body" : "@MikeMcQuaid how does the current implementation look?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 864
	},
	{
		"id" : 245245286,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-07T10:53:25Z",
		"body" : "A few small comments but I like the approach üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 864
	},
	{
		"id" : 245428433,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-09-07T21:41:09Z",
		"body" : "Changed the logic a bit, we don't need to fail if dependency is `statisfied?` even if it's pinned. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 864
	},
	{
		"id" : 245469571,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-08T01:34:27Z",
		"body" : "We don't? Since most things go through `opt` now I think we do indeed need to fail ‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 864
	},
	{
		"id" : 245529638,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-09-08T08:31:55Z",
		"body" : "@ilovezfs if a pinned dependency is satisfied doesn't it mean that if we unpin it it won't be reinstalled anyway?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 864
	},
	{
		"id" : 245708882,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T19:16:36Z",
		"body" : "Thanks again @vladshablinsky!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 864
	},
	{
		"id" : 244593205,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-04T09:46:52Z",
		"body" : "This is down to the configuration of your shell rather than Homebrew, sorry.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 865
	},
	{
		"id" : 244593281,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-04T09:48:02Z",
		"body" : "Is this because the headers aren't available that we want to prevent this linking? If so: üëç, if not: let's talk more.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 866
	},
	{
		"id" : 244601453,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-04T12:42:10Z",
		"body" : "We might well want to split this into another check to improve the messaging rather than tacking it on to the existing one. LibreSSL also has `libtls` which OpenSSL does not.\r\n\r\nDon't have much to say on policing LibreSSL that I didn't already say in https://github.com/Homebrew/homebrew-core/pull/4442#issuecomment-244549171 so I'll leave it at that üòÑ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 866
	},
	{
		"id" : 244802585,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-05T19:29:32Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 866
	},
	{
		"id" : 244803392,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-05T19:37:50Z",
		"body" : "I still think this is potentially worth a unique check or a rewrite of the current message.\r\n\r\nIf something specifically links to `libtls` substituting a `depends_on \"openssl\"` is unlikely to make that formula happy, for example. `libtls` isn't something OpenSSL provides at all.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 866
	},
	{
		"id" : 244812885,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-09-05T21:25:41Z",
		"body" : "Going to read \"potentially worth\" as meaning you wouldn't block this as-is. ;) I see your point but there's probably not good general advice in that case anyway.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 866
	},
	{
		"id" : 244813855,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-05T21:37:46Z",
		"body" : "I think it merits further thought, but I'm happy to do that thought myself, yeah. This is at least a step.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 866
	},
	{
		"id" : 244601544,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-04T12:43:55Z",
		"body" : "Wow. Didn't even occur to me to blame this file for the pull issue, to be honest üôà. Haven't tested it but presume you did, so üëç. Thanks for taking the time to look at this!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 868
	},
	{
		"id" : 244621324,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-04T18:42:03Z",
		"body" : "One comment otherwise üëç. You're the main user of this so as long as the docs are kept up to date I'm üÜí with adding anything and everything in here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 871
	},
	{
		"id" : 249806238,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:55:28Z",
		"body" : "I'm up for shipping this pretty much as-is?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 871
	},
	{
		"id" : 249806558,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-27T08:56:46Z",
		"body" : "I have a couple updates locally, which I'll push.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 871
	},
	{
		"id" : 249834741,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-27T11:07:39Z",
		"body" : "@MikeMcQuaid PR refreshed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 871
	},
	{
		"id" : 249835195,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T11:10:04Z",
		"body" : "@ilovezfs :shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 871
	},
	{
		"id" : 244624772,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-04T19:49:55Z",
		"body" : "Sorry for the noise, I had a subtly corrupted file.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 873
	},
	{
		"id" : 244624778,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-04T19:50:02Z",
		"body" : "üòÜ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 873
	},
	{
		"id" : 244802559,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-05T19:29:19Z",
		"body" : "Makes sense, thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 874
	},
	{
		"id" : 244635883,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-09-04T23:54:54Z",
		"body" : "`shell_profile` now resides in `Utils.Shell`. It was moved there with some other functions that handle things like quoting. We could include `Utils.Shell` in the `Formula` module.\r\n\r\nI have a patch here.\r\n\r\nhttps://github.com/Homebrew/brew/pull/876",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 875
	},
	{
		"id" : 244659878,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-09-05T05:09:47Z",
		"body" : "This is now fixed; thanks for your patience!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 875
	},
	{
		"id" : 244636306,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-09-05T00:03:13Z",
		"body" : "This is a patch that makes the `shell_profile` method accessible from the `Formula` class again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 876
	},
	{
		"id" : 244638079,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-09-05T00:41:20Z",
		"body" : "So I tested this locally and was able to install `nvm` with the two-line change in the PR. Adding a test is proving to be more difficult. Since `shell_profile` is part of the public API for a formula, I wanted to add a test to make sure that it's there.\r\n\r\nI've tried everything I can think of to write a test for the presence of the `shell_profile` method.\r\n\r\n`Formula.respond_to? :shell_profile` does returns false. Calling `Formula.shell_profile` and checking to make sure it returns a string throws an exception. I tried creating a Dummy class and inheriting from Formula, but apparently you can't have a class local to a method in Ruby.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 876
	},
	{
		"id" : 244638263,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-09-05T00:44:21Z",
		"body" : "> apparently you can't have a class local to a method in Ruby.\r\n\r\nYou can make anonymous classes using `Class.new`:\r\n\r\n```ruby\r\nklass = Class.new(Formula) do\r\n  # ...\r\nend\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 876
	},
	{
		"id" : 244642250,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-09-05T01:41:41Z",
		"body" : "Okay I am completely lost on how to write a test for this.\r\n\r\nWith the patch above installation of `nvm` worked locally and I can refer to `shell_profile` in the body of a class inheriting from Formula.\r\n\r\nI'm having trouble understanding exactly how including a module from a class works and \"scaling down\" the logic so I can understand it. I'm not able to reproduce what's happening inside Homebrew in a toy example.\r\n\r\nI have a small toy example of a class `include`-ing a module local to another module in another file. If I use `def shell_profile` then `shell_profile` is accessible from the `my_shell_profile` method and does not need to be qualified with a namespace. However, if I define it as `self.shell_profile` then I cannot use the unqualified method and must explicit qualify it with its module.\r\n\r\n```\r\n# util.rb\r\nmodule Wrapper\r\n    module Utils\r\n        # shell_profile (no error)\r\n        # self.shell_profile (NameError)\r\n        def shell_profile()\r\n            return \"4\"\r\n        end\r\n    end\r\nend\r\n```\r\n\r\n```\r\n# test.rb\r\nrequire_relative \"util\"\r\n\r\nclass Formula\r\n    include Wrapper::Utils\r\n\r\n    def initialize()\r\n    end\r\n\r\n    def my_shell_profile()\r\n        shell_profile\r\n        # must use Wrapper::Utils::shell_profile if\r\n        # shell_profile was defined using \"def self.shell_profile\"\r\n    end\r\nend\r\n\r\na = Formula.new()\r\n\r\nputs a.my_shell_profile()\r\n```\r\n\r\nHere is an excerpt from `utils/shell.rb`\r\n\r\n```\r\n 71     # return the shell profile file based on users' preferred shell\r\n 72     def self.shell_profile\r\n 73       SHELL_PROFILE_MAP.fetch(preferred_shell, \"~/.bash_profile\")\r\n 74     end\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 876
	},
	{
		"id" : 244642773,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-09-05T01:47:39Z",
		"body" : "I'm going to go ahead and merge this as-is to stem the bleeding.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 876
	},
	{
		"id" : 244643114,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-09-05T01:51:18Z",
		"body" : "sounds good.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 876
	},
	{
		"id" : 244647906,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-09-05T02:46:34Z",
		"body" : "Don't merge this! It didn't actually fix the issue. It only appeared to because brew executes `git checkout master` in the course of installing a module.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 876
	},
	{
		"id" : 244655531,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-09-05T04:11:39Z",
		"body" : "Okay I think I got it now. Formulas relying on `shell_profile` should work without modification.\r\n\r\nI added a test making sure that `shell_profile` is in scope inside the body of a method on a class inheriting from Formula.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 876
	},
	{
		"id" : 244638071,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-09-05T00:41:08Z",
		"body" : "üëç Was thinking about it just yesterday. When `HOMEBREW_DEVELOPER` and `HOMEBREW_NO_AUTO_UPDATE` are not set, and you're on the different from master branch with unstaged changes, these changes get `stash`'ed and  `stash pop`'ed, but branch can be switched to master without any note. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 877
	},
	{
		"id" : 244659279,
		"user" : {
			"login" : "gregory-nisbet"
		},
		"created_at" : "2016-09-05T05:02:29Z",
		"body" : "I think this is better. We can close my PR in favor of this one.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 878
	},
	{
		"id" : 244659822,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-09-05T05:09:04Z",
		"body" : "Thanks for the quick response!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 878
	},
	{
		"id" : 244812478,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-05T21:20:41Z",
		"body" : "Updated the message based on @MikeMcQuaid's feedback.\r\n\r\nI've left the Bash `opoo` definition, even though it's no longer used, because it'll probably be useful at some point.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 879
	},
	{
		"id" : 245245513,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-07T10:54:26Z",
		"body" : "Some stuff to strip out but otherwise üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 879
	},
	{
		"id" : 245524077,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T08:06:46Z",
		"body" : "Thanks again @penman!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 879
	},
	{
		"id" : 244955812,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-06T13:49:55Z",
		"body" : "@MikeMcQuaid Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 880
	},
	{
		"id" : 244813121,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-09-05T21:28:24Z",
		"body" : "I love it, this would make me avoid much confusion to why things don't seem to work when it's because I forgot `HOMEBREW_DEVELOPER=1`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 244821740,
		"user" : {
			"login" : "sigmavirus24"
		},
		"created_at" : "2016-09-05T23:37:17Z",
		"body" : "So I took a look at this (I haven't downloaded it or tested it locally to be honest).\r\n\r\nIt looks like if I use something from dev-cmd then this will auto-set `HOMEBREW_DEVELOPER` to true for me, but I'm not intimately familiar with how brew works. I think that means the commands in [this directory](https://github.com/Homebrew/brew/tree/master/Library/Homebrew/dev-cmd) count towards that which explains your PR description about possibly including `audit`, `create`, `edit`, `test`, etc. (because those are in [cmd](https://github.com/Homebrew/brew/tree/master/Library/Homebrew/cmd)). \r\n\r\nIf I'm grokking that correctly, then I'm going to request that `audit`, `create`, `edit`, and `test` be included too. I'm not sure if there are other commands in `cmd` that make sense because I mostly work on formulae not on brew itself.\r\n\r\nAlso, maybe you want to update the docs separately? The documentation included about `bump-formula-pr` was confusing at first until I realized you probably regenerated the docs. =)\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245385331,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-07T19:11:34Z",
		"body" : "> It looks like if I use something from dev-cmd then this will auto-set HOMEBREW_DEVELOPER to true for me, but I'm not intimately familiar with how brew works. I think that means the commands in this directory count towards that which explains your PR description about possibly including audit, create, edit, test, etc. (because those are in cmd).\r\n> \r\n> If I'm grokking that correctly, then I'm going to request that audit, create, edit, and test be included too. I'm not sure if there are other commands in cmd that make sense because I mostly work on formulae not on brew itself.\r\n\r\nYep üëç \r\n\r\n> Also, maybe you want to update the docs separately? The documentation included about bump-formula-pr was confusing at first until I realized you probably regenerated the docs. =)\r\n\r\nApologies for confusion but we do want it to be part of this PR; we tend to always update docs at the same time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245468085,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-08T01:23:40Z",
		"body" : "I'm not in favor of this PR but if you are going down this road I guess we need HOMEBREW_NO_DEVELOPER also to have a way to avoid triggering the magic.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245471850,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-08T01:52:05Z",
		"body" : "> HOMEBREW_NO_DEVELOPER\r\n\r\nI haven't tried this branch so I'm probably not entitled to comment, but `HOMEBREW_NO_DEVELOPER` sounds pretty ridiculous and I bet no one will ever set it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245479223,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-08T02:49:46Z",
		"body" : "> HOMEBREW_NO_DEVELOPER sounds pretty ridiculous and I bet no one will ever set it.\r\n\r\nSomeone who doesn't want all their taps to automatically be full clones would set it.  I would set it, for that very reason.\r\n\r\nBut I agree, if that shellvar has to be introduced, then little will have been gained by this PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245479356,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-09-08T02:50:48Z",
		"body" : "I'm a little nervous that this makes Homebrew's behavior history-dependent without clear user intent; I don't know that someone will be able to figure out why `update` does one thing on machine X and a different thing on a colleague's machine. Maybe the \"Developer mode enabled\" notification could include a link to some documentation that explains the difference?\r\n\r\nLook at me acting like people read stderr; hope springs eternal. ;)\r\n\r\nWould it make sense to use a different flag for the update mode? I'm not sure exactly what HOMEBREW_DEVELOPER does; it seems to do a bunch of things. I think most of them aren't disruptive, but they are _different_.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245488840,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-08T04:13:17Z",
		"body" : "Here's just one example of why this PR is problematic. We print a warning if your OS version is old and no longer supported by Homebrew. But if you set HOMEBREW_DEVELOPER, that message is suppressed. The fact that someone happened to have used `brew edit` has nothing to do with whether or not that warning should be printed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245522895,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T08:01:24Z",
		"body" : "> Yeah, but that's compatible with not using the gitconfig trick. I still don't see what the point of the gitconfig modifications are. \r\n\r\nWe want some behaviour to be for Homebrew developers and some behaviour to not be defaulted for them. We need to use `gitconfig` to set some state. At the moment instead of `HOMEBREW_DEVELOPER` a better description might be `HOMEBREW_I_INTENTIONALLY_MAKE_GIT_MODIFICATIONS_AND_UNDERSTAND_HOW_TO_RESOLVE_PROBLEMS_THAT_RESULT_WITHOUT_NEEDING_HELP`. This could have been better explained but there's basically been two contradicting forces leading to this PR:\r\n\r\n- Novice Homebrew users used to (relatively regularly) end up in a state where `brew update` couldn't update because of the state of their Git repository. Alternatively, they updated but lingering files meant Homebrew did not behave correct. Also, people would often file issues due to not runnign `brew update` in a while. These all produced hard-to-debug or just waste-of-time issues which seemingly entirely gone away now.\r\n- The new behaviour where we clean up the Git repository is surprising or annoying for Homebrew developers (e.g. anyone who makes brew/homebrew-core/tap PRs). This annoyed people a bit before but has been exacerbated by auto-update.\r\n- There's some commands targeted at Homebrew developers that we want more people to have access to and be documented accordingly without needing to set an environment variable.\r\n\r\n(the above description should have been in the PR description).\r\n\r\n@ilovezfs @tdsmith How about this: instead of setting `HOMEBREW_DEVELOPER` globally we have a `HOMEBREW_RUN_DEVELOPER_COMMAND` which changes purely the stash/reset/checkout behaviour of `brew update`. I think it should still also force full `tap` clones, for what it's worth, as you cannot create pull-requests from a shallow clone.\r\n\r\n> I'm not in favor of this PR\r\n> Here's just one example of why this PR is problematic.\r\n\r\n@ilovezfs If you have multiple reasons/examples: please elaborate, thanks.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245541460,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-08T09:20:12Z",
		"body" : ">@ilovezfs @tdsmith How about this: instead of setting HOMEBREW_DEVELOPER globally we have a HOMEBREW_RUN_DEVELOPER_COMMAND which changes purely the stash/reset/checkout behaviour of brew update\r\n\r\nI'm not sure I understand what the name of the variable means. But yes making this a separate variable rather than overloading HOMEBREW_DEVELOPER addresses most of my concerns. Tying it to tapping would be fine I guess as long as there's an opt out envvar specifically for that. It also might be worth having it retroactively trigger an unshallowing of core.\r\n\r\nIt does not address what tdsmith already pointed out, which is the fact that brew behavior can then differ seemingly randomly between machines since this mechanism is tied only to the particular user account on a given machine. I think that will be confusing if people expect the developer behavior (since it was magically enabled for them at some point) and now it's not behaving that way and stashing changes behind their back.\r\n\r\nIt also does not address the problem that dog fooding non-developer homebrew update behavior for an extended period (without something like a HOMEBREW_NO_DEVELOPER available) would require deliberately avoiding any of the trip wires that flip it on without you explicitly asking for it.\r\n\r\nFrom a review of the sources, here's what using a separate variable does indeed address in terms of unrelated behavior changes that would be avoided by that proposal:\r\n\r\n- prerelease xcode warning is skipped\r\n\r\n- deprecation exceptions all become die\r\n\r\n- commands with destructive options (e.g., test-bot) are unleashed on a whole new population for whom they were never intended\r\n\r\n- failed fetches are hard failures rather than falling through to source builds\r\n\r\n- go formulae will refuse to install and odie if they attempt to stage an empty resource array\r\n\r\n- macho parse errors all lead to a raise and a highly technical warning about failing to read Mach-O binaries\r\n\r\n- taps become tappable that would otherwise cause hard failures for users due to invalid syntax\r\n\r\n- formula unavailable errors become raises\r\n\r\n- every install will cause audit_installed to be called before it completes",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245544239,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T09:31:38Z",
		"body" : "@ilovezfs Thanks for elaborating. It sounds to me like the best middle-ground is to add a variable to opt out this behaviour, and use a non-HOMEBREW_DEVELOPER variable for this and make sure the documentation is sufficient. As to @tdsmith's point: I see the concern but I think the main thing is that we're not blowing away e.g. `brew edit` changes rather than maintaining consistent behaviour.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245553852,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-08T10:11:36Z",
		"body" : "> It sounds to me like the best middle-ground is to add a variable to opt out this behaviour, and use a non-HOMEBREW_DEVELOPER variable for this and make sure the documentation is sufficient.\r\n\r\nyup.\r\n\r\n>I see the concern but I think the main thing is that we're not blowing away e.g. brew edit changes rather than maintaining consistent behaviour.\r\n\r\nIf it's a separate variable, it won't be triggering as many behavior changes, so the inconsistency is greatly diminished. However, it will still be surprising if someone has things stashed simply because they sat down at a machine, double click on the rb file instead of going through brew edit, and then have a bunch of changes stashed but not popped, if they're accustomed to always having the stash-popping behavior.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245554294,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T10:13:41Z",
		"body" : "> If it's a separate variable, it won't be triggering as many behavior changes, so the inconsistency is greatly diminished. However, it will still be surprising if someone has things stashed simply because they sat down at a machine, double click on the rb file instead of going through brew edit, and then have a bunch of changes stashed but not popped, if they're accustomed to always having the stash-popping behavior.\r\n\r\nI agree but I'm not sure I see a better solution. The power vs. novice user imbalance we have on this project will always make this a little weird.\r\n\r\nThanks for help fleshing this out.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245555107,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-08T10:17:25Z",
		"body" : ">Thanks for help fleshing this out.\r\n\r\nYou're welcome.\r\n\r\n>I agree but I'm not sure I see a better solution. The power vs. novice user imbalance we have on this project will always make this a little weird.\r\n\r\nI wonder if a command front end on this (like your `brew analytics on/off/state` thing) would help address it since commands are so much more prominent to everyone in hands-on-use/learn-by-doing and in documentation than envvars and fine print.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245718595,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T19:50:25Z",
		"body" : "> I wonder if a command front end on this (like your brew analytics on/off/state thing) would help address it since commands are so much more prominent to everyone in hands-on-use/learn-by-doing and in documentation than envvars and fine print.\r\n\r\nThink both that and more prominent messaging/documentation of this may be nice but I'd like to punt on it for now and see if there's any confusion with the new behaviour first (and, if so, what is it).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245719347,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-08T19:53:12Z",
		"body" : "@MikeMcQuaid \r\n\r\n> but I'd like to punt on it for now and see if there's any confusion with the new behaviour first (and, if so, what is it).\r\n\r\nThis seems pretty important, could you please give us a few days to test?\r\n\r\nBy the way, to be honest, I was never quite sure about the exact differences between with `HOMEBREW_DEVELOPER` and without, I just know a bunch of stuff is different, sometimes pleasantly, sometimes unpleasantly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245719909,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T19:55:14Z",
		"body" : "> This seems pretty important, could you please give us a few days to test?\r\n\r\nI think this change should go in ASAP. We can üö¢ this as-is an iterate on it but it's still actively causing problems for contributors and I'll be happy to address further items after it's merged.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245720620,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-08T19:57:47Z",
		"body" : "Shouldn't we test first within a smaller circle who are (hopefully) intimately familiar with this PR and understand what issues it address?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245722676,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T20:05:11Z",
		"body" : "@zmwangx there's three groups: people who already set HOMEBREW_DEVELOPER, people who don't and are unaffected by the `brew update` changes in PR (the vast, vast majority of our users) and the people who don't set HOMEBREW_DEVELOPER and are surprised by `brew update` or `brew install` stashing their changes. The best way to get the latter group testing this is to release this change. It's worth nothing: this change will restore their behaviour to how it was a few weeks ago before we enabled auto-update.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245724475,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-09-08T20:11:03Z",
		"body" : "I'm with @MikeMcQuaid here, ship it as is and then we'll get feedback in no time. While I do believe most users of homebrew are developers in one form or the other, most don't work on homebrew _itself_, right. So when you set `HOMEBREW_DEVELOPER` I do think people realize that things will act differently/may break. If you on top of that set a specific git config, I think it's safe to assume then (kinda) know what they're doing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245725209,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T20:13:45Z",
		"body" : "> If you on top of that set a specific git config, I think it's safe to assume then (kinda) know what they're doing.\r\n\r\nIf you've already got it set: you'll see no behaviour change. If you don't have it set and don't run the (previously undocumented) developer commands: you'll see no behaviour change. If you don't have it set, run developer commands and then run `brew update`: you'll see a behaviour change.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245727132,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-08T20:20:17Z",
		"body" : "That explains it. From the discussions above I kind of assumed there was more. But there's no more, so no objection to shipping. I do share Tim's concern of history-dependence though.\n\nOn Sep 8, 2016, 4:13 PM -0400, Mike McQuaid <notifications@github.com>, wrote:\n> >\n> > If you on top of that set a specific git config, I think it's safe to assume then (kinda) know what they're doing.\n> >\n>\n>\n> If you've already got it set: you'll see no behaviour change. If you don't have it set and don't run the (previously undocumented) developer commands: you'll see no behaviour change. If you don't have it set, run developer commands and then run brew update: you'll see a behaviour change.\n>\n>\n> ‚Äî\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub (https://github.com/Homebrew/brew/pull/881#issuecomment-245725209), or mute the thread (https://github.com/notifications/unsubscribe-auth/AD9SXD0YcTCOsWZAT3k9IK-o_lc6QHYoks5qoGx8gaJpZM4J1TwE).\n>\n>\n>\n\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245737622,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-09-08T20:55:03Z",
		"body" : "Thinking about it: a doctor check that looks for the git repo flag without HOMEBREW_DEVELOPER set would be good, maybe, to explain that the user's in power mode‚Ñ¢. This can happen post-shipping.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245840803,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T07:31:50Z",
		"body" : "Thanks for review/thoughts all. This PR is better as a result.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245847175,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-09T08:04:39Z",
		"body" : ":tada: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 881
	},
	{
		"id" : 245436604,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-07T22:15:17Z",
		"body" : "Unfortunately we don't accept GUI apps. Please submit this to [Homebrew-Cask](https://github.com/caskroom/homebrew-cask), or [submit a Cask request there](https://github.com/caskroom/homebrew-cask#requests) and people will help you.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 882
	},
	{
		"id" : 245441661,
		"user" : {
			"login" : "vitorgalvao"
		},
		"created_at" : "2016-09-07T22:39:17Z",
		"body" : "[Already there](https://github.com/caskroom/homebrew-cask/blob/master/Casks/chromium.rb).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 882
	},
	{
		"id" : 244911697,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-06T10:30:40Z",
		"body" : "@MikeMcQuaid looks like this is causing a regression in CI\r\nhttps://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/7303/version=mavericks/console\r\nhttps://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/7303/version=yosemite/console",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 883
	},
	{
		"id" : 244917598,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-06T11:00:45Z",
		"body" : "@ilovezfs https://github.com/Homebrew/brew/pull/884",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 883
	},
	{
		"id" : 244921246,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-06T11:19:52Z",
		"body" : "@MikeMcQuaid Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 883
	},
	{
		"id" : 245134548,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-09-07T00:06:41Z",
		"body" : ":+1: for grammar",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 885
	},
	{
		"id" : 245135065,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-07T00:09:37Z",
		"body" : "I read most of the doc pages yesterday and had a whole bunch of nits fixed in a local branch. Guess I'm gonna let them slip because there are simply too many of them... Just saying.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 885
	},
	{
		"id" : 245141597,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-09-07T00:48:28Z",
		"body" : "@zmwangx it's your call, but I'm happy to review the branch if you push it, even if it's not everything",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 885
	},
	{
		"id" : 245163118,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-09-07T03:15:36Z",
		"body" : "Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 885
	},
	{
		"id" : 245361152,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-09-07T17:46:00Z",
		"body" : ":+1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 889
	},
	{
		"id" : 245523882,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T08:05:51Z",
		"body" : ":shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 889
	},
	{
		"id" : 245385262,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-07T19:11:16Z",
		"body" : "FWIW a few `cmd` commands don't have `--help` either:\r\n\r\n```\r\n$ cd /usr/local/Library/Homebrew/cmd && grep -rL '#:'\r\nbottle.rb\r\npostinstall.rb\r\npull.rb\r\nreadall.rb\r\ntap-readme.rb\r\nupdate-report.rb\r\n```\r\n\r\nAmong which `pull` should have it and `readall` may use a little bit of help too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 890
	},
	{
		"id" : 245398802,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-09-07T20:01:09Z",
		"body" : "Should [dev-cmd/bump-formula-pr](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/dev-cmd/bump-formula-pr.rb) also have `@hide_from_man_page`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 890
	},
	{
		"id" : 245400011,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-07T20:05:29Z",
		"body" : "@zmwangx Added.\r\n@scpeters It's already hidden in this PR and it'll be intentionally added in https://github.com/Homebrew/brew/pull/881",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 890
	},
	{
		"id" : 245412713,
		"user" : {
			"login" : "maxnordlund"
		},
		"created_at" : "2016-09-07T20:44:47Z",
		"body" : "This makes me happy, to see the `help` stuff being fully used not just for the user facing side but for the maintainers as well. ‚ù§Ô∏è ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 890
	},
	{
		"id" : 245439361,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-07T22:27:37Z",
		"body" : "To force link openssl (or any other formula), you should have run\r\n\r\n```\r\n$ brew link --force openssl\r\n```\r\n\r\ninstead of\r\n\r\n```\r\n$ brew link --force /usr/local/Cellar/openssl/1.0.2h_1/bin/openssl\r\n```\r\n\r\nYour command was asking brew to parse the openssl binary as a formula source file.\r\n\r\nHowever, since https://github.com/Homebrew/brew/pull/612 you shouldn't be able to force link openssl:\r\n\r\n```\r\n$ brew link --force openssl\r\nWarning: Refusing to link: openssl\r\nLinking keg-only openssl means you may end up linking against the insecure,\r\ndeprecated system OpenSSL while using the headers from Homebrew's openssl.\r\nInstead, pass the full include/library paths to your compiler e.g.:\r\n  -I/usr/local/opt/openssl/include -L/usr/local/opt/openssl/lib\r\n```\r\n\r\nIt was done for a reason and you should probably respect that.\r\n\r\nPlease let us know if there's anything else we can help with.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 891
	},
	{
		"id" : 245524474,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T08:08:38Z",
		"body" : "Nice work again @penman!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 892
	},
	{
		"id" : 245641866,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-09-08T15:45:59Z",
		"body" : "Seems like you have `homebrew/versions` tapped and installed gcc both from `homebrew/versions` and `homebrew/core`. Installing `gcc` from `homebrew/core` leaves you with installation under\r\n`/usr/local/Cellar/gcc/<version>`. And `gcc6` is a different formula, so it gets installed under `/usr/local/Cellar/gcc6/<version>`. So, I can come up with this scenario:\r\nYou had installed both `gcc` and `gcc6` (both have `c++6` binary so even before upgrade your `brew doctor` would probably warn you) and then `gcc` got outdated, you upgraded it and cleaned it up, but nothing changed too much. You still have two formulae with similar binaries. It's up to you to choose which one to link and the behaviour you got is expected.\r\n\r\n> Now the question is should I be doing the --overwrite or just remove gcc6?\r\n\r\nWell, I think you should decide which of two formulae you need i.e. `gcc` or `gcc6`. And link it. But I'm not sure it'll fix the `brew doctor` warning. Uninstalling one of them should fix it.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 893
	},
	{
		"id" : 245665525,
		"user" : {
			"login" : "kirk86"
		},
		"created_at" : "2016-09-08T17:00:05Z",
		"body" : "@vladshablinsky üëç  Thanks. sometimes when I look for too long the screen I don't know what I'm doing.  :(",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 893
	},
	{
		"id" : 245667958,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T17:08:03Z",
		"body" : "Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 894
	},
	{
		"id" : 245815302,
		"user" : {
			"login" : "aproxs"
		},
		"created_at" : "2016-09-09T04:17:04Z",
		"body" : "Sorry for not posting the gist before.\r\n\r\nHere is the gist: https://gist.github.com/anonymous/baf2fd3ddd22ad79a55d4856207a515c\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 894
	},
	{
		"id" : 245836107,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T07:03:47Z",
		"body" : "@aproxs Can I see the output of your `which brew`? Do you intend your Homebrew to be entirely self-contained under `/Users/luis/homebrew`? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 894
	},
	{
		"id" : 245935644,
		"user" : {
			"login" : "aproxs"
		},
		"created_at" : "2016-09-09T14:49:07Z",
		"body" : "this is the output:\r\n```\r\n/Users/luis/homebrew/bin/brew\r\n```\r\n\r\nYes, my intention is to have homebrew self contained.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 894
	},
	{
		"id" : 245938793,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T14:59:12Z",
		"body" : "@aproxs Interesting. Can I see the output from `ls -lha /usr/local/bin/brew` and `ls /usr/local/`? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 894
	},
	{
		"id" : 245955992,
		"user" : {
			"login" : "aproxs"
		},
		"created_at" : "2016-09-09T15:56:15Z",
		"body" : "The first one:\r\n```\r\nls -lha /usr/local/bin/brew\r\nlrwxr-xr-x 1 luis admin 29 Oct 30  2015 /usr/local/bin/brew -> /Users/luis/homebrew/bin/brew\r\n```\r\n\r\nAnd the second one:\r\n```\r\nls /usr/local/\r\nFrameworks  apache-maven  azure  bin  etc  git  include  lib  mysql  mysql-5.6.26-osx10.8-x86_64  opt  sbin  share  var\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 894
	},
	{
		"id" : 245958277,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T16:04:05Z",
		"body" : "@aproxs That symlink is your issue; if you delete it you'll get back to your previous state. May I ask why you have it if it's not in your `$PATH`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 894
	},
	{
		"id" : 245961514,
		"user" : {
			"login" : "aproxs"
		},
		"created_at" : "2016-09-09T16:15:23Z",
		"body" : "I see. I don't remember when or why I might have created that symlink and I really don't have a good reason to keep it.\r\n\r\nI deleted the symlink and homebrew seems happy now.\r\n\r\nThanks for taking the time to look into this Mike! I really appreciate it!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 894
	},
	{
		"id" : 245689516,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T18:16:42Z",
		"body" : "Please run `brew update --debug --verbose` and paste your output in a Gist and then `brew update --force` and tell us if the latter command succeeds, thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 895
	},
	{
		"id" : 245695767,
		"user" : {
			"login" : "JRSijsling"
		},
		"created_at" : "2016-09-08T18:36:37Z",
		"body" : "Wonderful, that did it! It seems to be back to normal working order, so this is closed as far as I am concerned. Gist below in case you are interested. It downloaded something large in the process. Something to do with cask, which I needed to install Julia.\r\n\r\nhttps://gist.github.com/JRSijsling/91c921d10331cfd5b1318081de3d0bde",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 895
	},
	{
		"id" : 245705465,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T19:05:06Z",
		"body" : "Glad it's working!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 895
	},
	{
		"id" : 245717815,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-08T19:47:56Z",
		"body" : "Are we suggesting anything for the `Caskroom`, which lives in `HOMEBREW_PREFIX` by default now IIRC? Is there any situation where `opt` wouldn't be writable & that might need fixing?\r\n\r\nOther than those two questions, seems reasonable üëç.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 896
	},
	{
		"id" : 245718972,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-08T19:51:50Z",
		"body" : "@DomT4 Caskroom is in HOMEBREW_REPOSITORY actually (which feels a little weird but is nice to avoid another root directory). Good call about `opt`, will check.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 896
	},
	{
		"id" : 245826552,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-09T05:59:18Z",
		"body" : ":+1: on the change. Not directly related to this PR, but what about adding a warning on what `chown -R` actually does? Something like\r\n\r\n> Note that chown -R changes the ownership of all files and subdirectories, which could be slow and have unintended side effects if you have files and subdirectories that are not managed by Homebrew.\r\n\r\nThe reason is that `chown -R` could be very slow and doesn't print anything, so the user could decide that it's stuck and abort halfway, screwing up everything (unless running `chown -R` for a second time and letting it finish). Also, if there are software not managed by Homebrew installed to `/usr/local`, some could stop working correctly if you change the owner.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 896
	},
	{
		"id" : 245835468,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T06:59:43Z",
		"body" : "@zmwangx In my experience the longer you make these type of messages the less likely they are to be read. As we don't run them for users and they are recommendations I'm üÜí with just trusting users .",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 896
	},
	{
		"id" : 245835578,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-09T07:00:25Z",
		"body" : "> In my experience the longer you make these type of messages the less likely they are to be read.\r\n\r\nTrue üòì ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 896
	},
	{
		"id" : 245862919,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-09T09:19:05Z",
		"body" : "@MikeMcQuaid looks like this broke CI.\r\n\r\nhttps://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/7460/version=yosemite/console\r\n\r\nfor everything ...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 896
	},
	{
		"id" : 245888023,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T11:27:54Z",
		"body" : "Fix in https://github.com/Homebrew/brew/issues/899.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 896
	},
	{
		"id" : 245834534,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T06:53:56Z",
		"body" : "Feels a little weird for this to be on the MacOS class but I don't have strong feelings either way if there's no other logical place.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 897
	},
	{
		"id" : 245907161,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-09T13:06:23Z",
		"body" : "> Feels a little weird for this to be on the MacOS class\r\n\r\nWhere else would you put the OS language, if not in the `OS` module?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 897
	},
	{
		"id" : 245907460,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T13:07:41Z",
		"body" : "> Where else would you put the OS language, if not in the OS module?\r\n\r\nüëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 897
	},
	{
		"id" : 245973190,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-09T16:57:04Z",
		"body" : "Ok, should be good to go now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 897
	},
	{
		"id" : 246053140,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-09T22:03:00Z",
		"body" : "Merging now in order for https://github.com/caskroom/homebrew-cask/pull/24343 and https://github.com/caskroom/homebrew-versions/pull/2558 to hopefully go green.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 897
	},
	{
		"id" : 246054215,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T22:08:03Z",
		"body" : "@reitermarkus Did you miss this:\r\n\r\n> Feels weird on hindsight to return a comma-separated string. `.delete(\"()\\\"\\n \").split(\",\")` seems to do what you want and return an array.\r\n\r\nI'd have preferred if you disagreed that it was discussed rather than merged?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 897
	},
	{
		"id" : 246054876,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-09T22:11:21Z",
		"body" : "It doesn't return a comma-separated string. The `sub` method call strips away the first comma and everything after it, leaving only the first value.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 897
	},
	{
		"id" : 246055579,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T22:14:44Z",
		"body" : "Ok. Why does this only care about the first value? That feels relatively opinionated for something that's a OS wrapper around a method? Regardless: this is discussion we should really be having before this was merged.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 897
	},
	{
		"id" : 246063367,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-09T22:57:33Z",
		"body" : "> @reitermarkus Did you miss this:\r\n\r\nYes, sorry, I missed that comment. \r\n\r\nFor context, please take a look at https://github.com/caskroom/homebrew-cask/pull/24343/files#diff-d7a1b27ed779bc1601aadf2a1c3652f7R12 on how this is supposed to be used.\r\n\r\nAlternatively, we could have `MacOS.languages` return an array, and `MacOS.language` return `languages.first`.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 897
	},
	{
		"id" : 246100083,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-10T08:41:17Z",
		"body" : "@reitermarkus No worries. üëç to having `languages` return an array and `language` return `languages.first` üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 897
	},
	{
		"id" : 245834271,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T06:52:14Z",
		"body" : "Please report this to homebrew/science, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 898
	},
	{
		"id" : 245894154,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-09T12:02:47Z",
		"body" : "may have to disable that \"Required\" thing ... I guess something in test-bot is out of order so it's still using the old bits?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 899
	},
	{
		"id" : 245894641,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T12:05:41Z",
		"body" : "@ilovezfs Nope, valid test failure üòÄ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 899
	},
	{
		"id" : 245894978,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-09T12:07:35Z",
		"body" : "ah because you didn't update the tests that go with the diagnostic changes... I see",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 899
	},
	{
		"id" : 245897749,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-09T12:22:18Z",
		"body" : ":green_heart: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 899
	},
	{
		"id" : 245902780,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-09T12:46:38Z",
		"body" : "@MikeMcQuaid thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 899
	},
	{
		"id" : 246049800,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-09-09T21:47:04Z",
		"body" : "If you have `HOMEBREW_DEVELOPER` set then I think it will show them in a separate section.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 900
	},
	{
		"id" : 246050151,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-09T21:48:41Z",
		"body" : "Works for me, with and without `HOMEBREW_DEVELOPER`.\r\n\r\n![bildschirmfoto 2016-09-09 um 23 46 27](https://cloud.githubusercontent.com/assets/1309829/18403896/b27aec18-76e7-11e6-9b02-635ad88d9c47.png)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 900
	},
	{
		"id" : 246050414,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-09-09T21:49:55Z",
		"body" : "@reitermarkus Run `brew update` and try again üòâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 900
	},
	{
		"id" : 246050598,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-09T21:50:42Z",
		"body" : "Ok, nevermind. üòÇ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 900
	},
	{
		"id" : 246052599,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-09T22:00:10Z",
		"body" : "I kinda think the dev-cmds should be shown in their own section regardless of whether $HOMEBREW_DEVELOPER is set.\r\n\r\nThere seems to be no reason to hide them, especially when it just recently became the case that anyone can run them with `brew`, whether or not the shellvar is set.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 900
	},
	{
		"id" : 246054297,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T22:08:21Z",
		"body" : "Agreed. Will fix (but anyone feel free to beat me to it)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 900
	},
	{
		"id" : 246055168,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-09T22:12:46Z",
		"body" : "#903.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 900
	},
	{
		"id" : 246047123,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-09T21:35:59Z",
		"body" : "Parsing `ls` output is one of the most basic mistakes in shell scripting (see e.g. http://mywiki.wooledge.org/ParsingLs). Using globbing (filename expansion) instead.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 246047830,
		"user" : {
			"login" : "elyscape"
		},
		"created_at" : "2016-09-09T21:38:45Z",
		"body" : "Indeed. I'll switch it to that, then.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 246054556,
		"user" : {
			"login" : "elyscape"
		},
		"created_at" : "2016-09-09T22:09:43Z",
		"body" : "@zmwangx Changed to using globs.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 246100687,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-10T08:56:35Z",
		"body" : "> Additionally, when running brew tests, several tests fail with this error:\r\n\r\nWill be fixed by https://github.com/Homebrew/brew/pull/907.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 246773684,
		"user" : {
			"login" : "elyscape"
		},
		"created_at" : "2016-09-13T18:17:31Z",
		"body" : "Rebased onto master. `brew tests` now succeeds.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 246946706,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T08:47:48Z",
		"body" : "Seems reasonable but will let @zmwangx give final üÜó and :ship:\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 247892648,
		"user" : {
			"login" : "chaoren"
		},
		"created_at" : "2016-09-19T00:02:16Z",
		"body" : "You should probably edit the title of the PR too for archival purposes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 247894259,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-19T00:34:26Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/901?src=pr) is 83.25% (diff: 100%)\n> Merging [#901](https://codecov.io/gh/Homebrew/brew/pull/901?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **7.99%**\n\n```diff\n@@             master       #901   diff @@\n==========================================\n  Files           360        340     -20   \n  Lines         15543      14050   -1493   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n  Hits          11697      11697           \n+ Misses         3846       2353   -1493   \n  Partials          0          0           \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f4a8d28...12094fb](https://codecov.io/gh/Homebrew/brew/compare/f4a8d28819f1fee73fcc63d08e70cb36eecdfb20...12094fb16288b8753984bfd2d9a268c63b603e25?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 247929120,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T07:45:19Z",
		"body" : "@zmwangx Merge if üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 247936476,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T08:29:09Z",
		"body" : "@MikeMcQuaid Sorry I forgot about this. (I wasn't too enthusiastic because although I love shell scripting, I'm a hardcore Zsh user üòÑ ).\r\n\r\n---\r\n\r\n@elyscape A few thoughts:\r\n\r\n1. Globbing needs to be guarded by error checking (whether there are files in the cellar or whether the cellar even exists) ‚Äî especially necessary when `failglob` option is set; unfortunately I don't have a good native solution for checking emptiness, everything I can thing of requires forking.\r\n\r\n2. You're calling `brew --cellar` twice which is unnecessary, save it to a variable if you do need it twice.\r\n\r\n3. To get a list of basenames you can simply do `\"${filepaths[*]##*/}\"` which should be robust in all cases; no need for another `$(brew --cellar)` or `$logdir`.\r\n\r\n4. In order to be robust I would also set `IFS` locally everywhere, but maybe some people will find it an overkill.\r\n\r\nIn general, writing robust shell scripts is not easy, and Bash doesn't make it any easier (no nulls in strings, for instance). After thinking this through, I think `command ls` is reasonable after all; any added robustness will be defeated by the `-W` option to `complete` anyway.\r\n\r\nSo my conclusion is: let's switch to the simple `command ls` version, but make sure the cellar and the logdir exists (``[[ -d dir ]]``) before doing so. Sorry for changing my mind, and thanks for bearing with us.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 247981157,
		"user" : {
			"login" : "elyscape"
		},
		"created_at" : "2016-09-19T12:36:22Z",
		"body" : "No worries! Will do.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 250331323,
		"user" : {
			"login" : "elyscape"
		},
		"created_at" : "2016-09-28T23:30:41Z",
		"body" : "@zmwangx Okay, I'm able to work on this again. What should I have happen if the cellar or logdir don't exist?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 250331959,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-28T23:34:45Z",
		"body" : "Actually, directing `command ls` error messages to `/dev/null` might be enough. (You know, there will be error messages when cellar or logdir doesn't exist.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 250332354,
		"user" : {
			"login" : "elyscape"
		},
		"created_at" : "2016-09-28T23:37:19Z",
		"body" : "Okay, blackholed the stderr for both calls.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 250332710,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-28T23:39:31Z",
		"body" : "üëç Happy to ship (but have to wait for CI). If this is not shipped in 24 hours please ping us üòÖ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 250333251,
		"user" : {
			"login" : "elyscape"
		},
		"created_at" : "2016-09-28T23:43:01Z",
		"body" : "Will do! Thanks for your help.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 901
	},
	{
		"id" : 250454876,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-29T12:42:17Z",
		"body" : "Thank you @elyscape!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 901
	},
	{
		"id" : 246049744,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T21:46:50Z",
		"body" : "> Does this mean that from now on, my local installation is going to behave as if I had set HOMEBREW_DEVELOPER?\r\n\r\nNo. It'll mean we e.g. `git stash pop` and `git checkout` your existing branch when doing `brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 902
	},
	{
		"id" : 246055636,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-09-09T22:15:00Z",
		"body" : "you beat me to it https://github.com/Homebrew/brew/commit/01d5be22fa8acdfb49e9b64baf2cf768097b7857\r\n:)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 903
	},
	{
		"id" : 246055720,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-09T22:15:19Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 903
	},
	{
		"id" : 247329157,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-15T13:34:22Z",
		"body" : "Nice work, thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 903
	},
	{
		"id" : 246100228,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-10T08:44:48Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 904
	},
	{
		"id" : 246127130,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-10T18:19:07Z",
		"body" : ":shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 904
	},
	{
		"id" : 248581174,
		"user" : {
			"login" : "vitorgalvao"
		},
		"created_at" : "2016-09-21T11:13:15Z",
		"body" : "Closing in favour of the PR at https://github.com/Homebrew/brew/pull/1029.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 905
	},
	{
		"id" : 246100177,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-10T08:43:22Z",
		"body" : "üëç thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 906
	},
	{
		"id" : 247203353,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-15T01:01:14Z",
		"body" : "Seems like the Mavericks `test-bot` is using `zh-Hans` as language. So the test in the regex should also match http://www.unicode.org/iso15924/iso15924-codes.html.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 906
	},
	{
		"id" : 247742969,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-17T02:03:31Z",
		"body" : "@Homebrew/cask, could someone look over this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 906
	},
	{
		"id" : 247748610,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-17T04:37:13Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/906?src=pr) is 83.72% (diff: 100%)\n> Merging [#906](https://codecov.io/gh/Homebrew/brew/pull/906?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@             master       #906   diff @@\n==========================================\n  Files           340        340          \n  Lines         13948      13950     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          11677      11679     +2   \n  Misses         2271       2271          \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a54c968...fda249e](https://codecov.io/gh/Homebrew/brew/compare/a54c96825b2c490b2b29f4214de44cf146ea7744...fda249ee8653ec7bc4425921db40ac3b91998c1e?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 906
	},
	{
		"id" : 247805492,
		"user" : {
			"login" : "mwean"
		},
		"created_at" : "2016-09-17T20:24:15Z",
		"body" : "I'm trying to work on this, but I'm having a ton of trouble getting things working. The `develop_brew_cask` command isn't working, and I can't run the tests because of missing environment variables. I'm on Gitter if anyone can help me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 906
	},
	{
		"id" : 247809491,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-17T21:34:48Z",
		"body" : "Never used the `develop_brew_cask` command, but this will probably need to be rewritten or be removed, as developing *only* Cask will not work as before anyways.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 906
	},
	{
		"id" : 247820405,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-18T02:28:44Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/906?src=pr) is 83.72% (diff: 100%)\n> Merging [#906](https://codecov.io/gh/Homebrew/brew/pull/906?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **8.21%**\n\n```diff\n@@             master       #906   diff @@\n==========================================\n  Files           360        340     -20   \n  Lines         15469      13952   -1517   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n+ Hits          11680      11681      +1   \n+ Misses         3789       2271   -1518   \n  Partials          0          0           \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [c419f92...fda249e](https://codecov.io/gh/Homebrew/brew/compare/c419f928ba5d152fc41a8abc8f33f88bfe3e1971...fda249ee8653ec7bc4425921db40ac3b91998c1e?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 906
	},
	{
		"id" : 247821001,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-18T02:44:38Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/906?src=pr) is 83.59% (diff: 100%)\n> Merging [#906](https://codecov.io/gh/Homebrew/brew/pull/906?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **8.09%**\n\n```diff\n@@             master       #906   diff @@\n==========================================\n  Files           360        340     -20   \n  Lines         15469      13981   -1488   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n+ Hits          11680      11688      +8   \n+ Misses         3789       2293   -1496   \n  Partials          0          0           \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [c419f92...fdcf8b8](https://codecov.io/gh/Homebrew/brew/compare/c419f928ba5d152fc41a8abc8f33f88bfe3e1971...fdcf8b8e88ddb8aab1d4b5feb1f5b59947f33112?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 906
	},
	{
		"id" : 249402686,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-25T04:49:25Z",
		"body" : ":-1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 906
	},
	{
		"id" : 249458207,
		"user" : {
			"login" : "mwean"
		},
		"created_at" : "2016-09-26T00:52:40Z",
		"body" : "@reitermarkus I made a slightly different DSL: https://github.com/reitermarkus/brew/compare/os-language...mwean:mw/language-dsl I wanted to avoid having a separate `default` block, and I wanted to make it easy to make the language name different from the pattern.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 906
	},
	{
		"id" : 249988068,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-27T20:27:31Z",
		"body" : "@mwean, I like the idea of only allowing strings in the DSL, so I have added a `Locale` class to enable matching locales by string only instead of regexes *and* strings. Still needs to be integrated into the `language` DSL.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 906
	},
	{
		"id" : 246110455,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-10T13:00:30Z",
		"body" : ":+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 908
	},
	{
		"id" : 246104126,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-10T10:21:25Z",
		"body" : "Better error message demonstrated in https://bot.brew.sh/job/Homebrew%20Sierra%20Testing/568/version=sierra_2/console",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 909
	},
	{
		"id" : 246124501,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-10T17:31:25Z",
		"body" : "üëç Was going to submit a PR on printing mismatched values.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 912
	},
	{
		"id" : 246127214,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-10T18:20:28Z",
		"body" : "Oops, unexpected: https://bot.brew.sh/job/Homebrew%20Sierra%20Testing/577/version=sierra_2/testReport/junit/brew-test-bot/sierra/bottle___merge___write___no_commit___automake_1_15_sierra_bottle_json___keep_old/",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 912
	},
	{
		"id" : 246121105,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-10T16:28:14Z",
		"body" : "Suspect your Homebrew is out-of-date. Try:\r\n```bash\r\ncd \"$(brew --repo)\" && git fetch && git reset --hard origin/master\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 913
	},
	{
		"id" : 246239303,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-12T04:10:11Z",
		"body" : "If that doesn't work, please let us know. Thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 913
	},
	{
		"id" : 246139432,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-10T20:49:28Z",
		"body" : "@reitermarkus @UniqMartin Could do with a hand here getting this reporting to coveralls. Have set the expected variable in Jenkins but no dice.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 246152530,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-10T23:45:44Z",
		"body" : "Not wanting to contradict your experience but OS X Travis builds do seem to turn up something useful once in a while (twice in my short period as a maintainer, one of which was a fiasco of mine). It could save us asses occasionally. Is it possible to leave it running? I think the slowness is already compensated by letting Jenkins do the heavy-lifting and only pouring from bottles?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 246154205,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-11T00:33:05Z",
		"body" : "Seems like there was already a successful push from Jenkins: https://coveralls.io/builds/7831487",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 246156316,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-11T01:39:24Z",
		"body" : "> Is it possible to leave it running? I think the slowness is already compensated by letting Jenkins do the heavy-lifting and only pouring from bottles?\r\n\r\nPretty sure this PR is only about turning off `brew` Travis which does coverage, not turning off the core Travis that runs through the master branch re-checking everything pushed, looking at the code. Could be wrong.\r\n\r\nMy only concern here really is that coverage jobs take a millennium to complete & having relatively swift `brew` PR builds where getting that coverage report completed isn't a blocker has been quite nice.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 246156356,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-11T01:40:53Z",
		"body" : "> Pretty sure this PR is only about turning off brew Travis which does coverage, not turning off the core Travis that runs through the master branch re-checking everything pushed, looking at the code. \r\n\r\nIsn't `osx` removed entirely from the matrix?\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 246156399,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-11T01:42:21Z",
		"body" : "Oh ignore me, that's for homebrew-core.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 246156402,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-11T01:42:25Z",
		"body" : "Core has its own Travis configuration.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 246167534,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-11T07:57:53Z",
		"body" : "> Seems like there was already a successful push from Jenkins: https://coveralls.io/builds/7831487\r\n\r\n@reitermarkus Thanks. Just need to figure out how to tie that to the status API correclty.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 246171005,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-11T09:32:39Z",
		"body" : "> Pretty sure this PR is only about turning off brew Travis which does coverage, not turning off the core Travis that runs through the master branch re-checking everything pushed, looking at the code. Could be wrong.\r\n\r\nThe plan is to do both and have Jenkins running the same `master` checks that Travis was.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 246200054,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-11T19:44:01Z",
		"body" : "@reitermarkus You have access to commit to this PR so if you have any bright ideas: feel free to commit here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 246204853,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-11T21:10:14Z",
		"body" : "Yeah, I got nothing, except that maybe Coveralls + Jenkins doesn't even support the Status API?\r\n\r\n![bildschirmfoto 2016-09-11 um 23 09 48](https://cloud.githubusercontent.com/assets/1309829/18420525/e035cfcc-7874-11e6-8b32-5fc63422cbf9.png)\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 246262570,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-12T06:48:52Z",
		"body" : "I might get in touch with them. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 247405494,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-15T18:08:16Z",
		"body" : "@reitermarkus Ever try CodeCov?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 247411863,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-15T18:31:33Z",
		"body" : "@MikeMcQuaid, no, but their UI sure looks nice. üòÑ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 247462589,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-15T21:36:41Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/914?src=pr) is 83.62% (diff: 100%)\n\n\n> No coverage report found for **master** at a148aa3.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a148aa3...f42419f](https://codecov.io/gh/Homebrew/brew/compare/a148aa3a41d34a07caab5d17daa26b4749ff3c50...f42419f73236db1f9edd5fae79877fa5d7b6071f?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 247474349,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-15T22:36:15Z",
		"body" : "Nice. I'm only now noticing that cask has 100 % coverage.\r\n\r\nDefinitely a nicer overview than Coveralls: https://codecov.io/gh/Homebrew/brew/tree/f42419f73236db1f9edd5fae79877fa5d7b6071f",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 247477060,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-15T22:51:59Z",
		"body" : "I think the 100% coverage for cask is inaccurate. AFAIK we never had 100% coverage reported with Coveralls.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 247478643,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-15T23:01:46Z",
		"body" : "@jawshooah, yes, I also think that's kinda suspicious.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 247528895,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-16T06:38:02Z",
		"body" : "Ok, got the source files to work on CodeCov.\r\n\r\nI ran `brew tests --official-cmd-taps --coverage; brew cask-tests --coverage` locally and got this:\r\n![bildschirmfoto 2016-09-16 um 08 33 35](https://cloud.githubusercontent.com/assets/1309829/18577272/b36c4134-7be8-11e6-994c-1253c34cb443.png)\r\n\r\nCurrently running the same command on the current `master` and waiting on the results.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 247545415,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-16T08:23:45Z",
		"body" : "Not getting 404s on files: https://codecov.io/gh/Homebrew/brew/src/0fdd8478de8c697a9314ce13a5766caa2751b25a/Library/Homebrew/cask/lib/hbc/artifact.rb\r\n\r\nMy guess on the coverage percentage is that perhaps not all files are being `require`d so it's tracking a different number of files from what it should be?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 247545958,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-16T08:26:44Z",
		"body" : "@jawshooah @reitermarkus any objections to shipping this as-is and iterating on the % afterwards? Really want to kill the Travis CI OS X dependency as it's really annoyingly flaky.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 247546338,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-16T08:28:35Z",
		"body" : ":shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 247546352,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-16T08:28:41Z",
		"body" : "Apparently files with 0% coverage don't end up on CodeCov, hence the coverage bump. Seems unused files aren't ‚Äúcounted‚Äú: https://github.com/codecov/support/issues/292.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 247547011,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-16T08:32:07Z",
		"body" : "No objections to shipping this. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 247548364,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-16T08:39:37Z",
		"body" : "> Not getting 404s on files:\r\n\r\nWell, on the newest commit they are working, try an older one.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 247549194,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-16T08:44:10Z",
		"body" : "For future reference, the last Coveralls build on caskroom/homebrew-cask reported [~84.5% coverage](https://coveralls.io/builds/7518577).\r\n\r\nIt also looks like cask coverage was never properly wired up in this repo to begin with, as the last Coveralls build for this repo reported [100% coverage for all cask files](https://coveralls.io/builds/7908347).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 249300930,
		"user" : {
			"login" : "anderspitman"
		},
		"created_at" : "2016-09-23T20:59:25Z",
		"body" : "@reitermarkus just wanted to clarify that as I understand it, files with 0% coverage would normally be included by codecov, *assuming* the files are compiled (talking specifically about C/C++ with gcov here, other environments may be different). If the files are never compiled, then no coverage report is generated for those files.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 249307088,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-23T21:29:39Z",
		"body" : "I think it really comes down to the language and coverage reporter you are using, I can only tell you how it works for Ruby with SimpleCov:\r\n\r\nBasically, SimpleCov initializes every file for which coverage should be reported, regardless of whether they are actually `require`d in the test suite. CodeCov, by default, does not display these files that are *only* tracked but not actually used in tests.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 914
	},
	{
		"id" : 246130760,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-10T19:20:00Z",
		"body" : "Doing the right thing now: https://bot.brew.sh/view/Testing/job/Homebrew%20Sierra%20Testing/578/version=sierra_2/testReport/brew-test-bot/sierra/bottle___merge___write___no_commit___automake_1_15_sierra_bottle_json___keep_old/",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 915
	},
	{
		"id" : 246171272,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-11T09:39:55Z",
		"body" : "@zmwangx This should fix the `automake` failure.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 916
	},
	{
		"id" : 246174513,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-11T11:02:37Z",
		"body" : "Lovely!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 916
	},
	{
		"id" : 246171389,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-11T09:42:57Z",
		"body" : "Good call üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 917
	},
	{
		"id" : 247242301,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-09-15T05:58:48Z",
		"body" : "That's bizarre! It works for me. What happens if you run `/usr/local/Cellar/subliminal/2.0.5/libexec/bin/python -c \"from __future__ import absolute_import\"`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 920
	},
	{
		"id" : 247308208,
		"user" : {
			"login" : "nmk"
		},
		"created_at" : "2016-09-15T11:56:40Z",
		"body" : "After installing the brew supplied python, the issue was resolved. Even after I uninstalled the brew supplied python, the issue does not appear any more.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 920
	},
	{
		"id" : 246189824,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-11T16:40:42Z",
		"body" : "üëç  Should fix https://bot.brew.sh/job/Homebrew%20Sierra%20Testing/657/version=sierra_2/",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 923
	},
	{
		"id" : 246196232,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-09-11T18:38:22Z",
		"body" : "I don't yet have an implementation of this feature. Someone else is welcome to tackle this if they're so inclined. Otherwise I will eventually get to it, time permitting.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 930
	},
	{
		"id" : 246196189,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-09-11T18:37:38Z",
		"body" : "I have an implementation of this feature that needs just a bit more work. I'll submit a PR this coming week (hopefully early in the week).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 931
	},
	{
		"id" : 246199882,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-11T19:41:24Z",
		"body" : "Cool, thanks @sjackman.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 931
	},
	{
		"id" : 246194083,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-11T18:01:06Z",
		"body" : "Like `env -i`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 932
	},
	{
		"id" : 246194548,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-11T18:09:17Z",
		"body" : "Somewhat, yeh. We'll need to obviously keep some variables around. This may end up being either a whitelist or sourceing the system defaults.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 932
	},
	{
		"id" : 246195105,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-11T18:19:07Z",
		"body" : "`login(1)`: `HOME`, `SHELL`, `PATH`, `TERM`, `LOGNAME` and `USER`. Everything except `PATH` is obvious, and `PATH` set through\r\n\r\n```sh\r\neval `/usr/libexec/path_helper -s`\r\n```\r\n\r\nbut `path_helper` is affected by `/etc/paths` and `/etc/paths.d` which could be modified by sysadmin.\r\n\r\nAnything else?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 932
	},
	{
		"id" : 246199863,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-11T19:41:06Z",
		"body" : "`TMPDIR`, `PWD` (needed for some commands), `LANG`, `LOGNAME`, `EDITOR` and obviously `HOMEBREW_*` stuff.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 932
	},
	{
		"id" : 246200206,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-11T19:46:24Z",
		"body" : "`TMPDIR` and friends are already overwritten by brew (#817).\r\n`LANG` and friends: should we really allow users to set these to arbitrary values during install and test?\r\n`EDITOR`: why do you ever need it during install and test?\r\n`HOMEBREW_*`: maybe they can all be handled prior to resetting env? Anyway, shouldn't be hard to whitelist.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 932
	},
	{
		"id" : 246201361,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-11T20:07:36Z",
		"body" : "Agreed all around, then üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 932
	},
	{
		"id" : 246201371,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-11T20:07:48Z",
		"body" : "I'm more thinking with `LANG` that things may üí• with no value set.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 932
	},
	{
		"id" : 246201436,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-11T20:09:08Z",
		"body" : "> I'm more thinking with LANG that things may üí• with no value set.\r\n\r\nYeah, we can probably set `LC_ALL` to `C` or `en_US.UTF-8`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 932
	},
	{
		"id" : 246892523,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-14T03:03:33Z",
		"body" : ":+1:\r\n\r\nFor `LANG` et al, setting `LANG` and clearing the `LC_*` should be sufficient, and more minimal. `LANG` must be set.\r\n\r\nI suspect we should use the system's default `<region>.UTF-8`. Like @zmwangx, says, we probably don't want users setting these to arbitrary values; the installation processes might be sniffing them. And from my experience with Oh My Zsh, it's kinda common for users to set these to wacky things.\r\n\r\nSetting it to `C` will break some things, because that invokes undefined/system-dependent behavior, and different languages and libraries deal with it differently.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 932
	},
	{
		"id" : 246900686,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-14T04:04:03Z",
		"body" : "> For LANG et al, setting LANG and clearing the LC_* should be sufficient, and more minimal. LANG must be set.\r\n\r\nWhy? `LANG` is just a fallback, and when `LC_ALL` is set you don't need a fallback because everything's covered. See `locale(1)`.\r\n\r\n> Setting it to C will break some things, because that invokes undefined/system-dependent behavior\r\n\r\nIsn't `C` the well-defined POSIX locale? But sure, I don't do a lot of locale-related stuff so if you're knowledgeable on that front I'll take your word for it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 932
	},
	{
		"id" : 246923151,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T06:57:24Z",
		"body" : "> Isn't C the well-defined POSIX locale? But sure, I don't do a lot of locale-related stuff so if you're knowledgeable on that front I'll take your word for it.\r\n\r\nIt can also be interpreted as \"don't support UTF-8\". We now have `MacOS.language` that we can use to read the system default.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 932
	},
	{
		"id" : 246933765,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-14T07:51:00Z",
		"body" : "> It can also be interpreted as \"don't support UTF-8\".\r\n\r\nGood point.\r\n\r\n> We now have MacOS.language that we can use to read the system default.\r\n\r\nüëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 932
	},
	{
		"id" : 247531212,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-16T06:55:29Z",
		"body" : "> Why? `LANG` is just a fallback, and when `LC_ALL` is set you don't need a fallback because everything's covered. See `locale(1)`.\r\n\r\nViewed the other way, `LANG` is the primary definition, and the others are just overrides, and `LC_ALL` is an override for the overrides. It doesn't really matter; I just find a single `LANG` variable feels cleaner.\r\n\r\n> Isn't `C` the well-defined POSIX locale? \r\n\r\nYes, `C` is the well-defined `POSIX` locale, but not all characters (well, byte sequences, really) are well-defined under that locale. Specifically, only the \"Portable Character Set\" (basically, the characters for 7-bit ASCII, and their corresponding encodings) is defined under POSIX. Other character/encoding values are technically undefined, and will have system-dependent behavior. Most libraries and applications will treat them as opaque values and assume a single-byte encoding (basically, doing the C `char` thing or treating it as binary data), but that's not required by POSIX, and some implementations may differ. In particular, when `ruby` is running under `C`, it will treat byte values over 127 as invalid encodings and throw an error when encountering them. (I'd guess because Ruby comes from Japan, and most of the rest of Unix comes from America, where non-English encodings are less of a concern.)\r\n\r\nThe POSIX locale is a minimal locale intended for portability, not one that handles everything in some uniform way.\r\n\r\nYeah, I have done a lot of locale and character-encoding work. Trust me that this is a rabbit hole we could go down forever before getting back to Homebrew's env sanitization. :smile:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 932
	},
	{
		"id" : 249858667,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T13:05:13Z",
		"body" : "Done by @penman in https://github.com/Homebrew/brew/issues/1041. Nice work!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 933
	},
	{
		"id" : 247846193,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T12:56:35Z",
		"body" : "It probably makes sense to block this on https://github.com/Homebrew/brew/issues/930 as using that will result in a far more performant solution than `Formula#recursive_dependencies` on everything installed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 934
	},
	{
		"id" : 249213257,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-09-23T14:49:23Z",
		"body" : "Thinking of putting my hand up to help with this one. Is the ask to just verify the response codes of mirrors (not 400+ I guess), or this + download and verify checksum for every mirror too? If the later would you be happy with it delivered in 2 parts?!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 935
	},
	{
		"id" : 249213895,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T14:51:54Z",
		"body" : "IMO the latter (download and verify checksum) should be part of fetch rather than part of audit. No one should be downloading multiple copies locally, even when running the strictest audit; just let the bot handle that part.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 935
	},
	{
		"id" : 249214904,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-09-23T14:55:39Z",
		"body" : "OK, status codes it is then.\r\n\r\nBefore I start I need to find out why I have failing tests in my test env (`brew sh --env=std`) - where can I get help with this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 935
	},
	{
		"id" : 249215793,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T14:58:57Z",
		"body" : "You should probably open an issue with more specific information.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 935
	},
	{
		"id" : 249216008,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-09-23T14:59:44Z",
		"body" : "will do, thx",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 935
	},
	{
		"id" : 249217232,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T15:04:19Z",
		"body" : "Yeh, I reckon make it an optional part of `brew fetch` and download each one in turn and checksum it. Would be great to have you work on this!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 935
	},
	{
		"id" : 249217761,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-09-23T15:06:21Z",
		"body" : "Be glad to contribute - had so much out of Homebrew over the years üç∫ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 935
	},
	{
		"id" : 246276016,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-12T08:03:38Z",
		"body" : "I'm üÜí with this but @apjanke @jawshooah @reitermarkus may want to take a look.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 936
	},
	{
		"id" : 246891170,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-14T02:54:36Z",
		"body" : "Generally üëç on this, both on pulling `brew cask` completions in to core Homebrew and on how this is coded.\r\n\r\nMinor coding note: I think the `_brew_cask` file actually needs a `_brew_cask` invocation at the bottom of the file (after the `_brew_cask()` definition), because it's using the \"redefine-on-autoload\" trick. Its absence means that nothing will happen the first time you hit tab to invoke completion on `brew cask` in a shell session, because that first invocation just loads the function definitions here. I'll try to test this to verify.\r\n\r\nMight have a migration issue here: users who already have `brew-cask-zsh-completions` installed will have a symlink at the location where we're going to drop this file, so the update might fail. Might be few enough of them we should just go ahead with it and deal with the breakage; I don't know of a good easy migration mechanism.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 936
	},
	{
		"id" : 246892303,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-09-14T03:02:08Z",
		"body" : "@apjanke you might also like to take a look at https://github.com/Homebrew/brew/pull/951\r\n\r\nI'll take a look at the two issues you raised later tonight or tomorrow. Thanks :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 936
	},
	{
		"id" : 247048347,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-09-14T15:18:10Z",
		"body" : "I think that problems with having `brew-cask-zsh-completions` installed is likely fairly minimal exposure as https://github.com/Homebrew/homebrew-completions/pull/135 is not merged, so that project hasn't been installed automatically by anyone.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 936
	},
	{
		"id" : 247531894,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-16T07:00:33Z",
		"body" : "Cool. In that case, I think this is ready to ship.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 936
	},
	{
		"id" : 246263454,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-12T06:54:30Z",
		"body" : "Technically you don't need to reinstall them. If you really want to the best bet may be `brew bundle dump && brew uninstall $(brew list) && brew bundle`.\r\n\r\n> do compiled brews need to be recompiled with the new Xcode/CLI Tools?\r\n\r\nDefinitely not.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 937
	},
	{
		"id" : 246528500,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-09-12T23:34:12Z",
		"body" : "I don't know if the advice in the following link is still relevant ( https://jimlindley.com/blog/yosemite-upgrade-homebrew-tips/ ), but they said that having files in /usr/local made ugprading really slow. Maybe this has been fixed since 10.10.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 937
	},
	{
		"id" : 246536112,
		"user" : {
			"login" : "edrozenberg"
		},
		"created_at" : "2016-09-13T00:19:47Z",
		"body" : "@scpeters thanks! Luckily I had no speed issues upgrading to macOS Sierra - took about 20-30 min as expected.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 937
	},
	{
		"id" : 246232547,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-12T02:55:42Z",
		"body" : "> Executing brew install graphviz installs the package\r\n\r\nDid you pour from bottle or build from source (which would normally require a `-s, --build-from-source` option)?\r\n\r\n> but it fails when executing dot -Tpng\r\n\r\nCould you please give us the exact command and show us the entire output?\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 938
	},
	{
		"id" : 246252055,
		"user" : {
			"login" : "kirk86"
		},
		"created_at" : "2016-09-12T05:18:02Z",
		"body" : "```\r\nbrew install -s -cc=gcc-6 --with-freetype --with-pango --with-gts --with-librsvg --with-x11 graphviz\r\n==> Installing dependencies for graphviz: intltool\r\n==> Installing graphviz dependency: intltool\r\n==> Downloading https://homebrew.bintray.com/bottles/intltool-0.51.0.el_capitan.bottle.tar.gz\r\n######################################################################## 100.0%\r\n==> Pouring intltool-0.51.0.el_capitan.bottle.tar.gz\r\nüç∫  /usr/local/Cellar/intltool/0.51.0: 19 files, 185.8K\r\n==> Installing graphviz\r\n==> Using the sandbox\r\n==> Downloading http://graphviz.org/pub/graphviz/stable/SOURCES/graphviz-2.38.0.tar.gz\r\nAlready downloaded: /Users/jm/Library/Caches/Homebrew/graphviz-2.38.0.tar.gz\r\n==> Downloading https://raw.githubusercontent.com/Homebrew/formula-patches/ec8d133/graphviz/patch-project.pbxproj.diff\r\nAlready downloaded: /Users/jm/Library/Caches/Homebrew/graphviz--patch-7c8d5c2fd475f07de4ca3a4340d722f472362615a369dd3f8524021306605684.diff\r\n==> Patching\r\n==> Applying patch-project.pbxproj.diff\r\npatching file macosx/graphviz.xcodeproj/project.pbxproj\r\n==> ./configure --prefix=/usr/local/Cellar/graphviz/2.38.0 --without-qt --with-quartz --with-gts --disable-swig\r\n==> make install\r\nError: The `brew link` step did not complete successfully\r\nThe formula built, but is not symlinked into /usr/local\r\nCould not symlink bin/acyclic\r\nTarget /usr/local/bin/acyclic\r\nalready exists. You may want to remove it:\r\n  rm '/usr/local/bin/acyclic'\r\n\r\nTo force the link and overwrite all conflicting files:\r\n  brew link --overwrite graphviz\r\n\r\nTo list all files that would be deleted:\r\n  brew link --overwrite --dry-run graphviz\r\n```\r\n\r\nafter forcing symlinks\r\n\r\n`brew link --overwrite graphviz`\r\n\r\ntying to see if it works\r\n\r\n`dot -Tpng`\r\n\r\ngetting the following errors\r\n\r\n```\r\nWarning: Could not load \"/usr/local/Cellar/graphviz/2.38.0/lib/graphviz/libgvplugin_pango.6.dylib\" - file not found\r\nWarning: Could not load \"/usr/local/Cellar/graphviz/2.38.0/lib/graphviz/libgvplugin_pango.6.dylib\" - file not found\r\nWarning: Could not load \"/usr/local/Cellar/graphviz/2.38.0/lib/graphviz/libgvplugin_quartz.6.dylib\" - file not found\r\nWarning: Could not load \"/usr/local/Cellar/graphviz/2.38.0/lib/graphviz/libgvplugin_pango.6.dylib\" - file not found\r\nWarning: Could not load \"/usr/local/Cellar/graphviz/2.38.0/lib/graphviz/libgvplugin_pango.6.dylib\" - file not found\r\nWarning: Could not load \"/usr/local/Cellar/graphviz/2.38.0/lib/graphviz/libgvplugin_gd.6.dylib\" - file not found\r\nFormat: \"png\" not recognized. Use one of: bmp canon cgimage cmap cmapx cmapx_np dot eps exr fig gd gd2 gif gv icns ico imap imap_np ismap jp2 jpe jpeg jpg pct pdf pic pict plain plain-ext png pov ps ps2 psd sgi svg svgz tga tif tiff tk vml vmlz vrml wbmp xdot xdot1.2 xdot1.4\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 938
	},
	{
		"id" : 246252269,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-12T05:20:21Z",
		"body" : "> Warning: Could not load...\r\n\r\nThis doesn't happen to bottled `graphviz`. Would be nice to have `brew gist-logs graphviz`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 938
	},
	{
		"id" : 249858784,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T13:05:38Z",
		"body" : "We don't have enough information to debug this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 938
	},
	{
		"id" : 249865288,
		"user" : {
			"login" : "kirk86"
		},
		"created_at" : "2016-09-27T13:30:59Z",
		"body" : "For future reference for anyone else I've kind of resolved the issue with the following suggestion. (here)[https://github.com/ellson/graphviz/issues/1160].\r\n\r\nThe error was created every time I was trying to set sth to `DYLD_LIBRARY_PATH`.  I don't know exactly what it was but it was some king of interference of native apple libraries with graphviz. Was making graphviz not able to find some required libraries which were already pre-installed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 938
	},
	{
		"id" : 246238755,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-12T04:03:57Z",
		"body" : "First CI failure seems to be because Rubygems was having some issues. Rescheduled the build.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 939
	},
	{
		"id" : 246263493,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-12T06:54:43Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 939
	},
	{
		"id" : 246262730,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-12T06:50:04Z",
		"body" : "Makes sense to me üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 940
	},
	{
		"id" : 246683836,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-13T13:39:08Z",
		"body" : "LGTM üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 940
	},
	{
		"id" : 246274010,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-12T07:53:54Z",
		"body" : "üëç Caused a lot of failed builds.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 941
	},
	{
		"id" : 246274780,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-12T07:57:20Z",
		"body" : "@zmwangx Have added a note that it's probably worth having the Homebrew/brew CI run through a (very quick to compile) formula or two for testing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 941
	},
	{
		"id" : 246292972,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-12T09:19:33Z",
		"body" : "@MikeMcQuaid looks like CI is broken\r\n\r\n```\r\nHEAD is now at 2c7ccee Merge pull request #941 from MikeMcQuaid/test-bot-regex\r\n```\r\n\r\n```\r\n  end\r\n==> FAILED\r\nError: No such file or directory - ==> Determining cattle bottle rebuild...\r\n```\r\nhttps://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/7608/version=yosemite/console",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 941
	},
	{
		"id" : 246293157,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-12T09:20:27Z",
		"body" : "@ilovezfs hence this PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 941
	},
	{
		"id" : 246293255,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-12T09:20:51Z",
		"body" : "Sorry, wrong one: hence https://github.com/Homebrew/brew/pull/942.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 941
	},
	{
		"id" : 246293332,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-12T09:21:11Z",
		"body" : "I believe even after merging #942 CI is still broken. At least with my local runs. Investigating now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 941
	},
	{
		"id" : 246293534,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-12T09:22:04Z",
		"body" : "Yeah still broken:https://bot.brew.sh/job/Homebrew%20Sierra%20Testing/691/version=sierra_2/console ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 941
	},
	{
		"id" : 246293884,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-12T09:23:44Z",
		"body" : "@ilovezfs @zmwangx In those cases hit \"prepare for shutdown\" in https://bot.brew.sh/manage",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 941
	},
	{
		"id" : 246323128,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-12T11:45:23Z",
		"body" : "@MikeMcQuaid https://bot.brew.sh/job/Homebrew%20Bottles/58315/console\r\n\r\n```\r\n Formula/cattle.rb | 31 ++++++++++++++++++++++---------\r\n 1 file changed, 22 insertions(+), 9 deletions(-)\r\nError: undefined method `include?' for nil:NilClass\r\nPlease report this bug:\r\n```\r\n\r\nStill broken?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 941
	},
	{
		"id" : 246296539,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-12T09:34:34Z",
		"body" : "This should fix it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 943
	},
	{
		"id" : 246297843,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-12T09:39:54Z",
		"body" : ">Note to self: make Homebrew/brew do test-bot on an actual C-compiling formula before doing refactoring of it again.\r\n\r\nNow where's the fun in that?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 943
	},
	{
		"id" : 246299986,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-12T09:49:20Z",
		"body" : "Fixed: https://bot.brew.sh/job/Homebrew%20Sierra%20Testing/693/version=sierra_2/console.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 943
	},
	{
		"id" : 246336049,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-12T12:46:37Z",
		"body" : "I think we'd accept a PR to e.g. set it to `GEM_OLD_HOME` and then use that value in `brew audit` and `brew tests` if it's set.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 944
	},
	{
		"id" : 246358550,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-12T14:08:42Z",
		"body" : "Sweet. I'll get one up shortly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 944
	},
	{
		"id" : 246338751,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-12T12:57:32Z",
		"body" : "perfect, thanks Mike",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 946
	},
	{
		"id" : 246342421,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-12T13:12:08Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 947
	},
	{
		"id" : 246431269,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-12T17:47:35Z",
		"body" : "brew.sh is a GitHub Pages site with a custom domain and currently it's hard to support HTTPS on such sites. See also https://github.com/Homebrew/homebrew.github.io/issues/98.\r\n\r\nThere are instructions for the security-minded linked on the homepage too: https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Installation.md#installation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 948
	},
	{
		"id" : 246432053,
		"user" : {
			"login" : "micahflee"
		},
		"created_at" : "2016-09-12T17:50:13Z",
		"body" : "Ahh, I see this has been discussed quite a bit elsewhere already.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 948
	},
	{
		"id" : 246650120,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-13T11:16:33Z",
		"body" : "seems to have caused all bottles to get the same name",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 949
	},
	{
		"id" : 246894637,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-14T03:18:14Z",
		"body" : "This looks great!\r\n\r\nI like how this is coded. The `_brew_<cmd>` and `__brew_<helper>` naming conventions are appropriate.\r\n\r\nLooks good based on a quick read-through. I'll test it out locally and see if I have any detailed feedback.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 951
	},
	{
		"id" : 247043553,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-09-14T15:04:54Z",
		"body" : "Fixed the small typos",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 951
	},
	{
		"id" : 248839519,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-22T08:15:41Z",
		"body" : "Sorry for the delay. It's been a busy week, and I haven't had time to test this yet. Should have some time tomorrow.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 951
	},
	{
		"id" : 249806354,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:55:57Z",
		"body" : "Merge conflicts need addressed here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 951
	},
	{
		"id" : 249927935,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-09-27T16:58:16Z",
		"body" : "I've amended this PR with a rebase on master. The merge conflict was due to https://github.com/Homebrew/install/pull/60",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 951
	},
	{
		"id" : 249940529,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-27T17:41:20Z",
		"body" : "Note for Oh My Zsh users: if you are running Oh My Zsh and have its `brew` plugin enabled, that plugin will mask and disable these completions. So if you are running Oh My Zsh, remove `brew` from your list of plugins when testing or using this.\r\n\r\nWith this PR, our completion is substantially better than the OMZ `brew` plugin's. So once this is shipped and we've been using it for a bit, I'll put in a PR at OMZ to deprecate and remove their `brew` plugin.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 951
	},
	{
		"id" : 250407933,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-09-29T08:50:13Z",
		"body" : "Sorry about the delay in replying.\r\nThe OMZ PR deprecating the brew plugin is already merged ;)\r\nhttps://github.com/robbyrussell/oh-my-zsh/pull/5190",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 951
	},
	{
		"id" : 250414322,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-09-29T09:19:30Z",
		"body" : "I reckon, let's get this merged.\r\n\r\nA couple of follow up tasks:\r\n1. I can see the need for `brew tap` to allow taps to install completions in order to get the `brew-services` completions working from https://github.com/robbyrussell/oh-my-zsh/pull/4313 by @RomanKapitonov\r\n2. Command de-duplication or common commands cleanup",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 951
	},
	{
		"id" : 246657146,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-13T11:52:47Z",
		"body" : "I was hoping it was an intentional dramatic simplification of our naming conventions.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 953
	},
	{
		"id" : 246661161,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-13T12:09:08Z",
		"body" : "I'm running this branch locally, and it seems that without `--skip-homebrew`, the brew tests are always run now? That's not the old behavior and it makes core PRs considerably longer to test.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 953
	},
	{
		"id" : 246662606,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-13T12:15:23Z",
		"body" : "@zmwangx What's the invocation you're using exactly?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 953
	},
	{
		"id" : 246662995,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-13T12:17:15Z",
		"body" : "Like the invocation used on Sierra 2:\r\n\r\n```\r\nbrew test-bot --ci-testing --keep-old $formulae\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 953
	},
	{
		"id" : 246663994,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-13T12:21:58Z",
		"body" : "I mean, it's not the problem of this PR specifically; it's been like that since the default formula test as far as I can tell. https://bot.brew.sh/view/Testing/job/Homebrew%20Sierra%20Testing/716/version=sierra_2/console is an example.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 953
	},
	{
		"id" : 246665242,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-13T12:27:58Z",
		"body" : "@zmwangx Try again now, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 953
	},
	{
		"id" : 246669102,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-13T12:44:03Z",
		"body" : "üëç Thanks for the fix.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 953
	},
	{
		"id" : 246669520,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-13T12:45:35Z",
		"body" : "Flaky casks test blocking merge on this one...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 953
	},
	{
		"id" : 246671766,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-13T12:54:39Z",
		"body" : "This \"required\" thing needs to go bye bye lol",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 953
	},
	{
		"id" : 246672102,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-13T12:55:56Z",
		"body" : "I already restarted the build, give it a few minutes (given the cask tests don't fail again, which is a big given).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 953
	},
	{
		"id" : 246672678,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-13T12:58:02Z",
		"body" : "> given the cask tests don't fail again\r\n\r\nHell yeah.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 953
	},
	{
		"id" : 246674298,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-13T13:04:39Z",
		"body" : "Thanks for merge! ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 953
	},
	{
		"id" : 246680717,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-13T13:28:20Z",
		"body" : "> Flaky casks test blocking merge on this one...\r\n\r\nNot sure this was a case of flaky cask tests. All the cask tests passed, it was submitting the coverage report that caused the build to hang.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 953
	},
	{
		"id" : 246681094,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-13T13:29:40Z",
		"body" : "Okay whatever.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 953
	},
	{
		"id" : 246755745,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-13T17:18:59Z",
		"body" : "CC @mistydemeo for thoughts",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 954
	},
	{
		"id" : 246773693,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-13T18:17:32Z",
		"body" : "I'd prefer we just fix `scons`, really. `env :std` is a nightmare to control & keep build environments sane.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 954
	},
	{
		"id" : 247131899,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T19:47:45Z",
		"body" : "@DomT4 Agreed about fixing `scons` but this is no worse than before and, in fact, a little better.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 954
	},
	{
		"id" : 247265554,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-09-15T08:15:48Z",
		"body" : "@domt4 i don't think an upstream change to accommodate this will come, unfortunately. The environment filtering is a core part of scons and the developers haven't expressed interest in providing a way to bypass it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 954
	},
	{
		"id" : 247265721,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-15T08:16:37Z",
		"body" : "Thanks for your contribution to Homebrew! Without people like you submitting PRs we couldn't run this project. You rock!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 954
	},
	{
		"id" : 247279783,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-15T09:25:34Z",
		"body" : "@mistydemeo Aye, I remember. A while ago you mentioned there might be a fix for that on our side that we'd have to put up patching forever, and I think that's likely still the best option here, but my comment wasn't intended as a blocker on this specifically.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 954
	},
	{
		"id" : 246897527,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-14T03:40:05Z",
		"body" : "I tested this locally with openblas and the `gcc-HEAD` versioning and it still wasn't picking up the `gcc-HEAD` compiler.\r\n\r\nMaybe version-parsing code in [`non_apple_gcc_version` in `development_tools.rb`](https://github.com/Homebrew/brew/blob/278ae8415cfac46e7a063ad61a3b3ce7a362e11b/Library/Homebrew/development_tools.rb#L74-L81) also needs to be changed.\r\n\r\n```\r\n    def non_apple_gcc_version(cc)\r\n      (@non_apple_gcc_version ||= {}).fetch(cc) do\r\n        path = HOMEBREW_PREFIX.join(\"opt\", \"gcc\", \"bin\", cc)\r\n        path = locate(cc) unless path.exist?\r\n        printf \"path = #{path}\\n\"\r\n        version = `#{path} --version`[/gcc(?:-\\d(?:\\.\\d)? \\(.+\\))? (\\d\\.\\d\\.\\d)/, 1] if path\r\n        @non_apple_gcc_version[cc] = version\r\n      end\r\n    end\r\n```\r\n\r\nThat looks like it's still expecting a numeric pattern for the version, instead of the `HEAD` version it outputs under the accompanying change.\r\n\r\n```\r\n[/usr/local/Library/Taps/homebrew/homebrew-core on ‚áÑ pr-4783]\r\n$ gcc-HEAD --version\r\ngcc-HEAD (Homebrew gcc HEAD-240127) 7.0.0 20160914 (experimental)\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 955
	},
	{
		"id" : 246899010,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-14T03:51:40Z",
		"body" : "I think simply relaxing\r\n\r\n```\r\n/gcc(?:-\\d(?:\\.\\d)? \\(.+\\))? (\\d\\.\\d\\.\\d)/\r\n```\r\n\r\nto\r\n\r\n```\r\n/gcc(?:-\\d(?:\\.\\d)? \\(.+\\))? (\\d\\.\\d\\.\\d)/\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 955
	},
	{
		"id" : 246899089,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-14T03:52:07Z",
		"body" : "(Sorry, hit \"Close\" when I was looking for a \"Cancel\" button on my comment. Reopened.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 955
	},
	{
		"id" : 246927445,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T07:20:09Z",
		"body" : "I don't think this is the right approach. GCC-HEAD is not a version so we'll be unable to blacklist it. Instead it should create an actual semver version (with RC/beta/alpha flags as necessary) and use that version e.g. a simple version by adding +1 to the stable version's major or minor release.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 955
	},
	{
		"id" : 247018355,
		"user" : {
			"login" : "aw1621107"
		},
		"created_at" : "2016-09-14T13:48:38Z",
		"body" : "@apjanke Yeah, I'll take a look at that. Thanks for the catch!\r\n\r\n@MikeMcQuaid Hmmm, that could work too. Makes sense, too, because GCC uses the +1 thing for versioning its trunk builds. And could you expand a bit on not being able to blacklist GCC-HEAD? Not quite sure what you're getting at, especially since it looks like the code I changed made HEAD a valid version",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 955
	},
	{
		"id" : 247020620,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T13:55:56Z",
		"body" : "I mean you can blacklist GCC-HEAD but that doesn't say much when the version of GCC-HEAD will change over time. You don't actually want to blacklist HEAD, you want to blacklist the version it's based on (as if that version gets e.g. released as a stable one you probably want to blacklist that too).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 955
	},
	{
		"id" : 247021274,
		"user" : {
			"login" : "aw1621107"
		},
		"created_at" : "2016-09-14T13:57:52Z",
		"body" : "Ah, I see. Makes sense.  I'll go make that change",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 955
	},
	{
		"id" : 247025670,
		"user" : {
			"login" : "aw1621107"
		},
		"created_at" : "2016-09-14T14:11:37Z",
		"body" : "Just thought, would installing using `brew install gcc --HEAD` but calling gcc-7 (or -8, -9, etc. later) be confusing to users? Or should we assume that `--HEAD` installers know enough for this to not be an issue?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 955
	},
	{
		"id" : 247026211,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T14:13:17Z",
		"body" : "> Or should we assume that --HEAD installers know enough for this to not be an issue?\r\n\r\nthis üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 955
	},
	{
		"id" : 247026400,
		"user" : {
			"login" : "aw1621107"
		},
		"created_at" : "2016-09-14T14:13:56Z",
		"body" : "Gotcha",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 955
	},
	{
		"id" : 247060653,
		"user" : {
			"login" : "aw1621107"
		},
		"created_at" : "2016-09-14T15:54:16Z",
		"body" : "Alright, pushed the new version. Only change here is allowing GCC version 7. Seems that valid versions will have to be updated manually? Guess that's what's been happening, though, so hopefully not a big deal.\r\n\r\nStill having issues with `openblas`, although for different reasons -- it's looking for a formula with the name `gcc7`, which I presume would normally be present in homebrew/versions. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 955
	},
	{
		"id" : 247110535,
		"user" : {
			"login" : "aw1621107"
		},
		"created_at" : "2016-09-14T18:29:43Z",
		"body" : "Yay, found the openblas issue. Should be fixed now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 955
	},
	{
		"id" : 247132665,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T19:50:46Z",
		"body" : "Seems reasonable and we'll want/need this eventually anyway üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 955
	},
	{
		"id" : 246847310,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-13T22:33:46Z",
		"body" : "Is there a CLT release for Xcode8 for El Capitan?  I only see one for Sierra on the developer downloads page.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 956
	},
	{
		"id" : 246847841,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-09-13T22:36:07Z",
		"body" : "There was a beta for El Cap up through beta 6, but they haven't uploaded the GM.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 956
	},
	{
		"id" : 246849995,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-13T22:45:33Z",
		"body" : "For whatever reason CLT releases chasing Xcode releases have been considerably slower this cycle üòï. Sometimes 12+ hours behind Xcode's release.\r\n\r\nOn Sierra there's also been the fun fun situation where it would routinely try to shunt you back down to the 7.x CLT if you upgraded to the 8.x CLT.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 956
	},
	{
		"id" : 246873286,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-14T00:53:31Z",
		"body" : "Split the Xcode 8.0 is no longer prerelease commit into https://github.com/Homebrew/brew/pull/957 since the CLT update still isn't here. Might as well stop yelling at people that they're using a prerelease Xcode when, well, they aren't.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 956
	},
	{
		"id" : 248968278,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-22T17:17:23Z",
		"body" : "@MikeMcQuaid @mistydemeo @ilovezfs Made the lack of up-to-date CLT/Xcode fatal here, as well as adjusting various bits to the CLT releases no longer being kept in sync. Will merge this in after üçè if everyone's happy.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 956
	},
	{
		"id" : 248973960,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-22T17:38:35Z",
		"body" : ":+1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 956
	},
	{
		"id" : 249293798,
		"user" : {
			"login" : "simonbyrne"
		},
		"created_at" : "2016-09-23T20:25:43Z",
		"body" : "Any chance you could make the help message clearer? I just spent 10 minutes trying to figure out why homebrew wanted me to upgrade to Xcode 8, but there were no Xcode 8 command line tools. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 956
	},
	{
		"id" : 249294462,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T20:28:46Z",
		"body" : "What specifically about the message that you saw was confusing? The Xcode one in particular is specific to the point of perhaps being overkill, but maybe there's something about that that isn't worded clearly enough.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 956
	},
	{
		"id" : 249295570,
		"user" : {
			"login" : "simonbyrne"
		},
		"created_at" : "2016-09-23T20:34:01Z",
		"body" : "I can't remember what the message was (as I've closed the window), but it was something like \"homebrew requires Xcode 8\". Since the only Xcode requirement of homebrew is the command line tools (and I didn't want to download 4GB right this moment), I took that to mean that I needed the Xcode 8 command line tools. \r\n\r\nAnyway, my solution was to uninstall the Xcode.app, which seemed to fix the problem.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 956
	},
	{
		"id" : 249296036,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T20:36:09Z",
		"body" : "Basically if you have Xcode installed we want it to be the latest version available for your platform, since that's what we test/build/etc against and know works _(or doesn't, in some cases)_. I'll fake a new Xcode version locally & double check what the message is; I thought it was quite comprehensive but perhaps we're printing something else.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 956
	},
	{
		"id" : 249297557,
		"user" : {
			"login" : "simonbyrne"
		},
		"created_at" : "2016-09-23T20:43:09Z",
		"body" : "Ah, I dug the app out of my trash. The message was:\r\n```\r\n‚îú brew upgrade\r\nError: Your Xcode (7.3.1) is outdated\r\nPlease update to Xcode 8.0.\r\nXcode can be updated from the App Store.\r\n```\r\nFirstly, I couldn't actually update it from the App Store (despite much clicking of refresh). There just wasn't an option (if I searched for Xcode it said it was version 8, but when I opened it, it was 7.3.1). Then I gave up and googled \"download xcode\", which sent me to https://developer.apple.com/xcode/. Eventually I found the other downloads page, but couldn't understand why there is no Xcode 8 CLT for el capitan. \r\n\r\nIf you're going to insist on upgrading, then maybe say something like \"Please upgrade or remove Xcode\"",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 956
	},
	{
		"id" : 249299700,
		"user" : {
			"login" : "simonbyrne"
		},
		"created_at" : "2016-09-23T20:53:16Z",
		"body" : "or maybe: \"Note: there are currently no Xcode 8.0 Command Line Tools available for El Capitan, you will need to either upgrade to Xcode 8.0, or remove Xcode and just use the command line tools\"",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 956
	},
	{
		"id" : 249347141,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T05:46:32Z",
		"body" : ">or maybe: \"Note: there are currently no Xcode 8.0 Command Line Tools available for El Capitan, you will need to either upgrade to Xcode 8.0, or remove Xcode and just use the command line tools. Xcode can be updated from the App Store, or from https://developer.apple.com/download/\"\r\n\r\nThat would be incorrect information.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 956
	},
	{
		"id" : 246933299,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-14T07:48:42Z",
		"body" : "We try hard to not have random unchecksummed downloads during build stage which is a security risk, simple as that.\r\n\r\nIt's easy to generate resource blocks from setup.py. See https://github.com/tdsmith/homebrew-pypi-poet from Tim, Python expert in our team. More info in https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Python-for-Formula-Authors.md.\r\n\r\nIf you disagree, just install your stuff with pip in separate virtualenvs. That's another way to get sandboxed utilities, and the end result is pretty much the same as brew'ed Python packages anyway, except you need to worry about versioning yourself.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 959
	},
	{
		"id" : 246933434,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-14T07:49:23Z",
		"body" : "Please ask if the explanation is not clear.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 959
	},
	{
		"id" : 246994196,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-14T12:15:39Z",
		"body" : "I can't reproduce. Try `brew reinstall python3` maybe.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 960
	},
	{
		"id" : 247243771,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-09-15T06:09:32Z",
		"body" : "Concur with @zmwangx.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 960
	},
	{
		"id" : 248159813,
		"user" : {
			"login" : "jonct"
		},
		"created_at" : "2016-09-19T23:34:48Z",
		"body" : "IMHO, mounting evidence that the new [CLT warning](https://github.com/Homebrew/brew/pull/965) in `brew doctor` should include Sierra.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 960
	},
	{
		"id" : 248506278,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-09-21T04:07:19Z",
		"body" : "NB to anyone from the future: please don't use sudo; it'll make it hard to remove later.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 960
	},
	{
		"id" : 247024679,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T14:08:32Z",
		"body" : "> Add a utility function to determine os name from os version. Basically it returns OS X when MacOS.version < :sierra otherwise macOS.\r\n> Use this function to replace fixed OS X string.\r\n\r\nAgreed with this solution. Could you try and open a pull request? [This document](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md#how-to-open-a-homebrew-pull-request-and-get-it-merged) should help and I'm happy to walk you through anything else.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247028562,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-14T14:20:43Z",
		"body" : "I'd rather see https://github.com/Homebrew/brew/pull/359 revived.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247030057,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T14:25:09Z",
		"body" : "@zmwangx It sounds like this is proposing essentially the same as the result from the review process on that PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247030573,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-14T14:26:41Z",
		"body" : "Ah right. We're supposed to wait for https://support.apple.com/os-x, no?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247032641,
		"user" : {
			"login" : "JLHwung"
		},
		"created_at" : "2016-09-14T14:32:48Z",
		"body" : "@zmwangx Thank you so much for referencing that pull request. I should have searched among closed pull request. I think this pull request can be closed as #359 is a more complete solution. Any thoughts on when to reopen #359?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247033325,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-14T14:35:03Z",
		"body" : "> I should have searched among closed pull request.\r\n\r\nNo problem.\r\n\r\n> Any thoughts on when to reopen #359?\r\n\r\nPinged Dom. https://github.com/Homebrew/brew/pull/359#issuecomment-247033193",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247033739,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-14T14:36:17Z",
		"body" : "Or you can move forward with a new PR if you have time to work on this; #359 was probably an overcomplicated approach.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247035601,
		"user" : {
			"login" : "JLHwung"
		},
		"created_at" : "2016-09-14T14:41:53Z",
		"body" : "@zmwangx There is so many `\"OS X\"` there in the codebase so from the beginning I am just thinking about beginning work on diagnostic module.\r\nWe shall achieve some consensus before working on rebranding. For example like how to deal with context-aware os_name and version requirement, or whether we shall backport `macOS` as the official os name and simply replace all `OS X` by `macOS`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247035909,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T14:42:49Z",
		"body" : "> For example like how to deal with context-aware os_name and version requirement, or whether we shall backport macOS as the official os name and simply replace all OS X by macOS.\r\n\r\nI'm mainly waiting to see what Apple call older versions on https://support.apple.com/os-x but I think it's very likely that they will call the newest version macOS and the older ones still OS X.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247036132,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-14T14:43:28Z",
		"body" : "> whether we shall backport macOS as the official os name and simply replace all OS X by macOS.\r\n\r\nI'm üëç on that (on Sierra and above). We need to do that with static docs anyway.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247036794,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-14T14:45:21Z",
		"body" : "I'm happy to reopen & work on https://github.com/Homebrew/brew/pull/359 as desired, but if @JLHwung wants to work on their own PR & can get it done before the 20th (ideally) I'm always happy to see new contributors to the `brew` side of things.\r\n\r\nAgree it looks increasingly like `OS X` is going to remain the name for everything `< 10.12` and `macOS` for `>= 10.12`, and we should try to mimic that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247038466,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-14T14:50:09Z",
		"body" : "> Agree it looks increasingly like OS X is going to remain the name for everything < 10.12 and macOS for >= 10.12\r\n\r\nWell, of course they can't rebrand on their support site, or customers will be confused. We savvy folks know what macOS is. But if my mom tries to get help with her Windows and lands on pcOS support, I'm pretty sure she won't be able to recognize it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247040644,
		"user" : {
			"login" : "JLHwung"
		},
		"created_at" : "2016-09-14T14:56:23Z",
		"body" : "@DomT4 \r\nI spare time working on that based on your approach on #359. As I go through #359, there are several open questions:\r\n\r\n- Whether to replace all `OS X` by `macOS` appearing in the comments? Or even do it contingently?\r\n- Whether to use a `#{MacOS.os_with_version}` or leave it with `#{MacOS.os_name} #{MacOS.version}`\r\n\r\n@zmwangx üòÑ for the pcOS example.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247051002,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-14T15:25:45Z",
		"body" : "> Whether to replace all OS X by macOS appearing in the comments?\r\n\r\nCode comments? Yes. Just use `macOS` for that, there's no point using `OS X/macOS` everywhere in code comments, we'll just be needlessly bulking things up.\r\n\r\n> Whether to use a #{MacOS.os_with_version} or leave it with #{MacOS.os_name} #{MacOS.version}\r\n\r\nHad to go dig up my local branch from a backup to find out what I'd done here üòÑ. I eventually settled on this locally, which seemed to fit the issue Martin had whilst still allowing vanilla `os_name` calls. I used `Version.new` at the time but we've moved to `Version.create` since so tweaked that here:\r\n\r\n```ruby\r\ndef os_name(version = @version)\r\n  if Version.create(version) < Version.create(\"10.12\")\r\n    \"OS X\"\r\n  else\r\n    \"macOS\"\r\n  end\r\nend\r\n```\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247052225,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-14T15:29:11Z",
		"body" : "Note that I didn't test that change much at all after we made the decision to hold off until Sierra was closer though, so use at your own peril üôà.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247054133,
		"user" : {
			"login" : "JLHwung"
		},
		"created_at" : "2016-09-14T15:34:53Z",
		"body" : "@DomT4 As for the comments, there are examples like `#load commands added after OS X 10.1 need to be bitwise ORed` so if replaced with `macOS` there will be `macOS 10.1` or something. I am good with backporting new branding on ancient comments, but it might seem weird for maintainers.\r\nAlso could you restore your branch on #359 so that I can start working on that. It won't be late to 20th.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247056180,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-14T15:41:05Z",
		"body" : "You could make a case for code comments with specific references to versions below 10.12 keeping `OS X` but I'm unconvinced it's worth the effort personally, and suspect contributors will find a consistent codebase a bit easier to navigate. Within two years there will be no `OS X` version Homebrew formally supports, so üòâ.\r\n\r\n> Also could you restore your branch on #359 so that I can start working on that.\r\n\r\nI can but the branch no longer applies cleanly, so it might not be much use to you. I'd probably just rip out the bits you want manually & stick them in the appropriate places.\r\n\r\n> Note that I didn't test that change much at all after we made the decision to hold off until Sierra was closer though, so use at your own peril\r\n\r\nDid some testing locally with `irb`. Seems to solve the issue Martin raised at least:\r\n\r\n```ruby\r\n@version = MacOS::Version.from_symbol(:yosemite)\r\nputs \"#{MacOS.os_name} #{@version.pretty_name} or newer is required.\"\r\n=> macOS Yosemite or newer is required.\r\nputs \"#{MacOS.os_name(@version)} #{@version.pretty_name} or newer is required.\"\r\n=> OS X Yosemite or newer is required.\r\n```\r\n\r\nNot super pretty but does what it says on the tin.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247059182,
		"user" : {
			"login" : "JLHwung"
		},
		"created_at" : "2016-09-14T15:49:52Z",
		"body" : ">  I'd probably just rip out the bits you want manually & stick them in the appropriate places.\r\n\r\nThank you. I just want to assure every commit's author is the real author since the commit does not have `tutor` field.\r\n\r\n> Whether to use a #{MacOS.os_with_version} or leave it with #{MacOS.os_name} #{MacOS.version}\r\n\r\nPersonally I prefer the latter one as they are different data, and I agree with your approach.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247059860,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-14T15:51:55Z",
		"body" : "> Thank you. I just want to assure every commit's author is the real author since the commit does not have tutor field.\r\n\r\nI've got over 3000 commits to Homebrew in my name heh; I won't miss a handful of loose ideas I threw together in the past being attributed to you, fret not üòÉ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247214581,
		"user" : {
			"login" : "JLHwung"
		},
		"created_at" : "2016-09-15T02:17:50Z",
		"body" : "@DomT4 #964 is ready for review.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247779301,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-09-17T15:02:28Z",
		"body" : "I'm increasingly of the opinion that we should take the simplest route, avoid code complexity, and replace all instances of ‚ÄúMac OS X‚Äù and ‚ÄúOS X‚Äù with a static ‚ÄúmacOS‚Äù (and be done). I cannot imagine there will be much confusion and people (at least our target audience) will figure it out quickly. The following examples are probably not the most convincing ones, but my impression is that Apple already made the switch in their minds:\r\n\r\n- <https://www.apple.com/osx> redirects to <https://www.apple.com/macos/sierra/>.\r\n  - *Fun fact:* <https://www.apple.com/osx/> (with additional slash) surprisingly redirects to the non-HTTPS location <http://www.apple.com/macos/sierra/>.\r\n- <https://developer.apple.com/osx/> redirects to <https://developer.apple.com/macos/>.\r\n- The API reference at https://developer.apple.com/reference/ only ever speaks of ‚ÄúmacOS‚Äù when talking about when an API was introduced, even if it's ‚ÄúmacOS 10.0+‚Äù.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247798172,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T19:05:26Z",
		"body" : "> The API reference at https://developer.apple.com/reference/ only ever speaks of ‚ÄúmacOS‚Äù when talking about when an API was introduced, even if it's ‚ÄúmacOS 10.0+‚Äù.\r\n\r\nThis is by far the strongest argument for me so I'm üëç with just using macOS all over.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247855392,
		"user" : {
			"login" : "JLHwung"
		},
		"created_at" : "2016-09-18T15:48:52Z",
		"body" : "@MikeMcQuaid Glad that Apple does replacement to make our life easier. Hope that google will soon learn the macOS-replaced brew error messages so that people won't get irrelevant search results.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247867157,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-18T19:12:37Z",
		"body" : "> The API reference at https://developer.apple.com/reference/ only ever speaks of ‚ÄúmacOS‚Äù when talking about when an API was introduced\r\n\r\nThere are still plenty of references to \"OS X\" in there.  Looks like Apple's not being consistent.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247873245,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-09-18T20:08:49Z",
		"body" : "> There are still plenty of references to \"OS X\" in there. Looks like Apple's not being consistent.\r\n\r\nIt's true they haven't eradicated every occurrence yet (and maybe never will). It pops up in descriptions here and there, but my impression was that you have to search for it to find it. What I was referring to was mostly the ‚ÄúSDKs‚Äù block that appears on almost every page there.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 961
	},
	{
		"id" : 247131590,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-14T19:46:39Z",
		"body" : "Great work üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 962
	},
	{
		"id" : 247136724,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-14T20:05:28Z",
		"body" : "`brew cask` needs to be removed from `External-Commands.md`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 962
	},
	{
		"id" : 247204045,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-15T01:06:27Z",
		"body" : "Feel free to keep picking this over as desired & I'll push more changes in another PR.\r\n\r\nJust keen to push forwards on this as still have to change a bunch of `OS X` references before Sierra lands, which had the potential to cause some merge conflicts on this I'd rather not sink time into resolving üòÑ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 962
	},
	{
		"id" : 247254237,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-15T07:15:29Z",
		"body" : "> Since this is potentially a big and dangerous migration, I wonder if it would be a good idea to open an issue for complaints and stuff proactively, and print the link in a message before we even do anything, something like:\r\n\r\nRather than pre-empting I'd rather catch all exceptions and point them to the same issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 963
	},
	{
		"id" : 247254684,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-15T07:17:57Z",
		"body" : "> Rather than pre-empting I'd rather catch all exceptions and point them to the same issue.\r\n\r\nWhatever the case \"pointing them to the same issue\" is the most important thing for noise reduction.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 963
	},
	{
		"id" : 247676630,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-09-16T18:42:29Z",
		"body" : "After this is merged, we'll need to rebuild the `pkg-config` bottles in `homebrew-core`, since these are currently hard-coded to look in `/usr/local/Library/Homebrew/os/mac/pkgconfig/<version>`\r\n\r\n~~~\r\n$ strings /usr/local/Cellar/pkg-config/0.29.1_1/bin/pkg-config \\\r\n  | grep /usr/local/lib/pkgconfig \\\r\n  | tr ':' '\\n'\r\n/usr/local/lib/pkgconfig\r\n/usr/local/share/pkgconfig\r\n/usr/lib/pkgconfig\r\n/usr/local/Library/Homebrew/os/mac/pkgconfig/<version>\r\n~~~\r\n\r\nNote the that homebrew install script on http://brew.sh has been installing to `/usr/local/Homebrew` for the past week (since https://github.com/Homebrew/install/commit/2182f13944db40c11a52ef2b5c9d57b8ea7be384#diff-19ad89bc3e3c9d7ef68b89523eff1987), so any new installs will have a semi-broken pkg-config as well until we rebuild that bottle.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 963
	},
	{
		"id" : 247760105,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T09:43:22Z",
		"body" : "@scpeters Nice spot, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 963
	},
	{
		"id" : 247769870,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T13:32:56Z",
		"body" : "I now consider this ready to üö¢. I'll do so later tonight for `HOMEBREW_DEVELOPER`s and then tomorrow afternoon for everyone else (assuming no critical bugs come up). Review from any @Homebrew/maintainers is very welcome.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 963
	},
	{
		"id" : 247770524,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T13:41:04Z",
		"body" : "I still think there should be a brief explanation before anything happens, so that `#{HOMEBREW_PREFIX} is not writable.` and stuff like that don't just come out of nowhere.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 963
	},
	{
		"id" : 247770938,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T13:43:35Z",
		"body" : "> I still think there should be a brief explanation before anything happens\r\n\r\nThere is: it says it's beginning the migration and to wait. I don't think a more wordy message explaining why is more likely to get read. If anything: the longer the message the more likely it's all ignored.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 963
	},
	{
		"id" : 247771284,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T13:45:48Z",
		"body" : "I missed the new `ohai`. üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 963
	},
	{
		"id" : 247796450,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T18:38:41Z",
		"body" : "Need to resolve conflict here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 963
	},
	{
		"id" : 247797201,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T18:49:54Z",
		"body" : "I'm glad to report I was able to migrate successfully (running from this branch with merge conflict resolved):\r\n\r\n```\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\ngit checkout --force .\r\n==> Migrated HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nYou may now chown /usr/local back to root:wheel.\r\n```\r\n\r\nI'm left with some bundler junk though:\r\n\r\n```\r\ntree -L 7 /usr/local/Library\r\n/usr/local/Library\r\n‚îî‚îÄ‚îÄ Homebrew\r\n    ‚îî‚îÄ‚îÄ test\r\n        ‚îú‚îÄ‚îÄ fs_leak_log\r\n        ‚îî‚îÄ‚îÄ vendor\r\n            ‚îî‚îÄ‚îÄ bundle\r\n                ‚îî‚îÄ‚îÄ ruby\r\n                    ‚îî‚îÄ‚îÄ 2.0.0\r\n                        ‚îú‚îÄ‚îÄ bin\r\n                        ‚îú‚îÄ‚îÄ build_info\r\n                        ‚îú‚îÄ‚îÄ bundler\r\n                        ‚îú‚îÄ‚îÄ cache\r\n                        ‚îú‚îÄ‚îÄ doc\r\n                        ‚îú‚îÄ‚îÄ gems\r\n                        ‚îî‚îÄ‚îÄ specifications\r\n\r\n13 directories, 1 file\r\n```\r\n\r\nPresumably containing Rubocop stuff.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 963
	},
	{
		"id" : 247797354,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T18:53:03Z",
		"body" : "> I'm left with some bundler junk though:\r\n\r\nWill add that to the list to üî• ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 963
	},
	{
		"id" : 247797683,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-17T18:58:16Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/963?src=pr) is 74.96% (diff: 100%)\n\n\n> No coverage report found for **master** at 295e937.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [295e937...bffefad](https://codecov.io/gh/Homebrew/brew/compare/295e937f270826aef4e64f0056950a948e3502b1...bffefad0e25606720295be465dc58196be97b3e7?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 963
	},
	{
		"id" : 247800574,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T19:23:55Z",
		"body" : "@reitermarkus Looks like that Codecov YML tweak still wasn't enough üò¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 963
	},
	{
		"id" : 247780214,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-09-17T15:15:26Z",
		"body" : "As mentioned in https://github.com/Homebrew/brew/issues/961#issuecomment-247779301 by now I'm strongly in favor of maximum simplicity and using ‚ÄúmacOS‚Äù everywhere as soon as 10.12 is released. However, if we really wanted to be serious about adapting our output, the distinction will need to be three-fold (‚ÄúMac OS X‚Äù for 10.0-10.6, ‚ÄúOS X‚Äù for 10.7-10.11, and ‚ÄúmacOS‚Äù for 10.12+).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 964
	},
	{
		"id" : 247798281,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T19:07:10Z",
		"body" : "> As mentioned in #961 (comment):\r\n> The API reference at https://developer.apple.com/reference/ only ever speaks of ‚ÄúmacOS‚Äù when talking about when an API was introduced, even if it's ‚ÄúmacOS 10.0+‚Äù.\r\n\r\nThis is by far the strongest argument for me so I'm üëç with just using macOS all over.\r\n\r\n@JLHwung I'm so sorry to send you on such a wild chase for this, my apologies. I hope you've learnt some stuff through doing so and will continue to contribute to Homebrew. Let me know if you'd rather doing the mass-`macOS` replacement or if you'd rather we did. Thanks so much for your contributions.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 964
	},
	{
		"id" : 247854991,
		"user" : {
			"login" : "JLHwung"
		},
		"created_at" : "2016-09-18T15:42:10Z",
		"body" : "@MikeMcQuaid Sorry for late reply as I am in vacation now. I've learnt a lot more than it appears at the beginning, and thank you for your review. I cannot spare time on replacing before 20th so it'd better assigned to other people.\r\n\r\nAs I am working on this pr, I find many macOS-dependent code does not locate in os/mac or extend/os/mac, shall we split the platform-dependent codes or just let it be?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 964
	},
	{
		"id" : 247871238,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-09-18T19:55:12Z",
		"body" : "Thanks you for your work here!\r\n\r\n> As I am working on this pr, I find many macOS-dependent code does not locate in os/mac or extend/os/mac, shall we split the platform-dependent codes or just let it be?\r\n\r\nThis is an ongoing process and we started it fairly recently in an attempt to make Homebrew truly platform-agnostic (to the extent it makes sense) and to help move back code from Linuxbrew into Homebrew with proper abstractions and cleaner code structure. If that's a topic that interests you, we're more than happy to have someone help us with this endeavor.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 964
	},
	{
		"id" : 247278868,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-15T09:21:18Z",
		"body" : "Try to `brew uninstall --force xz`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 969
	},
	{
		"id" : 247281744,
		"user" : {
			"login" : "zhouyan"
		},
		"created_at" : "2016-09-15T09:34:37Z",
		"body" : "I already tried that before submiting this issue. `xz` just got reinstalled back as a dependencies for those formulas and the same issue persists.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 969
	},
	{
		"id" : 247282295,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-09-15T09:37:10Z",
		"body" : "Can you install the CLT, then `brew reinstall xz`, and try again? This is a problem caused by having Xcode 8 on 10.11 without the CLT, which we'll be adding a warning for (#965).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 969
	},
	{
		"id" : 247282798,
		"user" : {
			"login" : "zhouyan"
		},
		"created_at" : "2016-09-15T09:39:35Z",
		"body" : "Both were done. The first thing I did was to install CLT even before I try to do anything with brew.\n\n> On Sep 15, 2016, at 17:37, Misty De Meo <notifications@github.com> wrote:\n> \n> Can you install the CLT, then brew reinstall xz, and try again? This is a problem caused by having Xcode 8 on 10.11 without the CLT, which we'll be adding a warning for (#965).\n> \n> ‚Äî\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 969
	},
	{
		"id" : 247283929,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-09-15T09:44:57Z",
		"body" : "What happens if you run `xz` on the commandline?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 969
	},
	{
		"id" : 247284142,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-15T09:45:55Z",
		"body" : "Or just `brew test xz`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 969
	},
	{
		"id" : 247284800,
		"user" : {
			"login" : "zhouyan"
		},
		"created_at" : "2016-09-15T09:49:09Z",
		"body" : "`brew test xz` fail with the following\r\n\r\n```\r\n$ brew test xz\r\nTesting xz\r\n==> Using the sandbox\r\n==> /usr/local/Cellar/xz/5.2.2/bin/xz /tmp/xz-test-20160915-23199-1gis089/data.txt\r\nLast 15 lines from /Users/Zhou/Library/Logs/Homebrew/xz/test.01.xz:\r\n2016-09-15 17:47:00 +0800\r\n\r\n/usr/local/Cellar/xz/5.2.2/bin/xz\r\n/tmp/xz-test-20160915-23199-1gis089/data.txt\r\n\r\ndyld: lazy symbol binding failed: Symbol not found: _clock_gettime\r\n  Referenced from: /usr/local/Cellar/xz/5.2.2/bin/xz\r\n  Expected in: /usr/lib/libSystem.B.dylib\r\n\r\ndyld: Symbol not found: _clock_gettime\r\n  Referenced from: /usr/local/Cellar/xz/5.2.2/bin/xz\r\n  Expected in: /usr/lib/libSystem.B.dylib\r\n\r\nError: xz: failed\r\nFailed executing: /usr/local/Cellar/xz/5.2.2/bin/xz /tmp/xz-test-20160915-23199-1gis089/data.txt\r\n/usr/local/Library/Homebrew/formula.rb:1608:in `block in system'\r\n/usr/local/Library/Homebrew/formula.rb:1545:in `open'\r\n/usr/local/Library/Homebrew/formula.rb:1545:in `system'\r\n/usr/local/Library/Taps/homebrew/homebrew-core/Formula/xz.rb:35:in `block in <class:Xz>'\r\n/usr/local/Library/Homebrew/formula.rb:1446:in `block (2 levels) in run_test'\r\n/usr/local/Library/Homebrew/formula.rb:775:in `with_logging'\r\n/usr/local/Library/Homebrew/formula.rb:1445:in `block in run_test'\r\n/usr/local/Library/Homebrew/extend/fileutils.rb:14:in `block in mktemp'\r\n/usr/local/Library/Homebrew/extend/fileutils.rb:74:in `block in run'\r\n/usr/local/Library/Homebrew/extend/fileutils.rb:74:in `chdir'\r\n/usr/local/Library/Homebrew/extend/fileutils.rb:74:in `run'\r\n/usr/local/Library/Homebrew/extend/fileutils.rb:13:in `mktemp'\r\n/usr/local/Library/Homebrew/formula.rb:1439:in `run_test'\r\n/usr/local/Library/Homebrew/test.rb:28:in `block in <main>'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/timeout.rb:66:in `timeout'\r\n/usr/local/Library/Homebrew/test.rb:27:in `<main>'\r\n```\r\n\r\nHowever, uncompress seems to work just fine. For example `cd ~/Library/Cache/Homebrew; tar xf whatever.tar.xz` works just fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 969
	},
	{
		"id" : 247285120,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-15T09:50:35Z",
		"body" : "Your `/usr/bin/tar` has nothing to do with xz.\r\n\r\nTypical Xcode 8 on El Cap debacle.\r\n\r\nPlease pour our bottle in the meantime rather than compile from source.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 969
	},
	{
		"id" : 247285958,
		"user" : {
			"login" : "zhouyan"
		},
		"created_at" : "2016-09-15T09:54:25Z",
		"body" : "OK, I guess I have just to wait a few more days for the new OS. It sounds like Xcode 8 on Sierra is better and it is only a problem of Xcode 8 on Ei Cap",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 969
	},
	{
		"id" : 247286403,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-15T09:56:36Z",
		"body" : "Here's some background reading: https://github.com/Homebrew/homebrew-core/issues/4809#issuecomment-247021138.\r\n\r\nAnd https://github.com/Homebrew/brew/pull/970 will hopefully fix the problem.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 969
	},
	{
		"id" : 247286867,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-15T09:58:45Z",
		"body" : "> I guess I have just to wait a few more days for the new OS.\r\n\r\nBy the way, be advised that if you need anything on [this list](https://github.com/Homebrew/homebrew-core/issues/4841) you'd better hold out a little longer.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 969
	},
	{
		"id" : 247305049,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-15T11:38:52Z",
		"body" : "Anyone impacted should `brew reinstall xz`. This should be fixed by ILZ's sterling work in https://github.com/Homebrew/brew/pull/970, but you'll need to reinstall the broken `xz`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 969
	},
	{
		"id" : 247794793,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T18:11:43Z",
		"body" : "Closing due to inactivity.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 969
	},
	{
		"id" : 247294961,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-15T10:41:55Z",
		"body" : "PR refreshed.\r\n\r\n>Part of me wonders if it's better to add this change as an unique method like determine_cccfg, etc. I can't imagine this problem getting smaller in future years, and it may be easier to keep track of that way.\r\n\r\nIt may eventually benefit from something like that, but I think for now that's probably over-engineering it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 970
	},
	{
		"id" : 247302784,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-15T11:26:45Z",
		"body" : "üëç. I'm happy unless you're planning to add a test for this change or anything. Otherwise, let's ship it and see what breaks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 970
	},
	{
		"id" : 247304426,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-15T11:35:34Z",
		"body" : ":rocket: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 970
	},
	{
		"id" : 247304437,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-15T11:35:35Z",
		"body" : "Can confirm this at least fixes `xz`'s runtime failure of false `empty archive` messages & installing `python` on 10.11 with Xcode 8.\r\n\r\nPeople will need to reinstall `xz` and other impacted-at-run formulae by the looks of it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 970
	},
	{
		"id" : 247304766,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-15T11:37:21Z",
		"body" : ">People will need to reinstall xz and other impacted-at-run formulae by the looks of it.\r\n\r\nindeed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 970
	},
	{
		"id" : 247348080,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-15T14:41:06Z",
		"body" : "I got a malfunctioning `xz` with Xcode 8 on *Sierra*, which also was fixed by this PR (as far as I can tell).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 970
	},
	{
		"id" : 247358502,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-15T15:17:08Z",
		"body" : "That is to say: even with Xcode 8 *and* the associated CLT, on Sierra, `xz` gave me the \"empty archive\" nonsense and any formula I built whose tarball was an xz-ball was defective (\"illegal instruction 4\").\r\n\r\nBut after this PR it seemed to work.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 970
	},
	{
		"id" : 247358780,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-15T15:18:11Z",
		"body" : "This PR specifically has a `MacOS.version == \"10.11\"` guard, so I doubt it should have any effect on your Sierra environment.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 970
	},
	{
		"id" : 247359150,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-15T15:19:31Z",
		"body" : "@chdiza what's `brew config` have to say for itself?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 970
	},
	{
		"id" : 247502743,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-16T02:12:20Z",
		"body" : "`brew --config` has this to say:\r\n```\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew\r\nHEAD: a148aa3a41d34a07caab5d17daa26b4749ff3c50\r\nLast commit: 15 hours ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 0e99665f347c1554f55fbecf448956a44ccd99e5\r\nCore tap last commit: 14 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local/hb\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: quad-core 64-bit ivybridge\r\nHomebrew Ruby: 2.0.0-p648\r\nClang: 8.0 build 800\r\nGit: 2.8.4 => /Applications/Xcode.app/Contents/Developer/usr/bin/git\r\nPerl: /usr/bin/perl\r\nPython: /usr/bin/python\r\nRuby: /usr/bin/ruby => /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby\r\nJava: N/A\r\nOS X: 10.12-x86_64\r\nXcode: 8.0\r\nCLT: 8.0.0.0.1.1472435881\r\nX11: N/A\r\n```\r\n\r\nMaybe it wasn't this particular commit that fixed the problem, but another one that landed within around 24 hours.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 970
	},
	{
		"id" : 247784968,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T16:07:02Z",
		"body" : "@penman Pushed a fix to the CI and my pedantry. Let me know when you think this is good to go and what commands you've used for testing to I can try similarly locally. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 971
	},
	{
		"id" : 247891018,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-18T23:33:38Z",
		"body" : "From `$(brew --prefix)/Library/Taps/homebrew/homebrew-core`:\r\n\r\n```sh\r\ngit checkout penman/hello_aliases~1\r\nbrew install hello@2\r\ngit checkout penman/hello_aliases\r\nbrew outdated # hello should not be listed\r\n\r\nbrew uninstall hello@2\r\ngit checkout penman/hello_aliases~1\r\nbrew install hello\r\ngit checkout penman/hello_aliases\r\nbrew outdated # hello should be listed\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 971
	},
	{
		"id" : 247895888,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-19T01:03:31Z",
		"body" : "Here's what I've been using to test. The `penman/hello_aliases` branch is a branch with `hello@2` and `hello@3` formulae, and a `hello` alias. The latest commit changes `hello` from `hello@2` to `hello@3`.\r\n\r\n```sh\r\ncd $(brew --prefix)/Homebrew/Library/Taps/homebrew/homebrew-core\r\ngit remote add penman https://github.com/penman/homebrew-core.git\r\ngit fetch penman\r\nbrew uninstall hello # just in case it's installed\r\n\r\ngit checkout penman/hello_aliases~1\r\nbrew install hello@2\r\nbrew outdated hello # should be no output\r\nbrew outdated hello@2 # should be no output\r\nbrew outdated # should not include hello\r\n\r\ngit checkout penman/hello_aliases\r\nbrew outdated hello@2 # should be no output\r\nbrew outdated hello # hello should not be listed (because it was installed with a specified version)\r\nbrew outdated # hello should not be listed (because it was installed with a specified version)\r\n\r\nbrew uninstall hello@2\r\ngit checkout penman/hello_aliases~1\r\nbrew install hello\r\ngit checkout penman/hello_aliases\r\nbrew outdated hello@2 # should be no output\r\nbrew outdated hello # hello should be listed\r\nbrew outdated # hello should be listed\r\n\r\nbrew upgrade hello # should install hello@3\r\nbrew outdated hello@2 # should be no output\r\nbrew outdated hello@3 # should be no output\r\nbrew outdated hello # hello should not be listed\r\nbrew outdated # hello should not be listed\r\n\r\nbrew uninstall hello@2 hello@3 # clean up\r\n```\r\n\r\nYou can also run the same test commands, but replacing `brew outdated` with `brew upgrade`, and interrupting after seeing what formula are to be upgraded, to check `brew upgrade` has the same behaviour.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 971
	},
	{
		"id" : 247895907,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-19T01:03:50Z",
		"body" : "This is getting there, but there are a couple of edge cases I still want to work on.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 971
	},
	{
		"id" : 247899591,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-19T02:02:36Z",
		"body" : "> ```sh\r\n> cd $(brew --prefix)/Homebrew/Library/Taps/homebrew/homebrew-core\r\n> git remote add penman https://github.com/penman/homebrew-core.git\r\n> git fetch penman\r\n> brew uninstall hello # just in case it's installed\r\n> \r\n> git checkout penman/hello_aliases~1\r\n> brew install hello@2\r\n> brew outdated hello # should be no output\r\n> brew outdated hello@2 # should be no output\r\n> brew outdated # should not include hello\r\n> \r\n> git checkout penman/hello_aliases\r\n> brew outdated hello@2 # should be no output\r\n> brew outdated hello # hello should not be listed (because it was installed with a specified version)\r\n> brew outdated # hello should not be listed (because it was installed with a specified version)\r\n> ```\r\n\r\nI'm wondering if what I'm expecting from last two commands is correct. I think maybe it should at least be marked as outdated in `brew outdated hello` because that's specifically asking about this package. That same change would probably make the `brew upgrade hello` equivalent make more sense too (currently it says <samp>hello not installed</samp>).\r\n\r\nThis is feeling a little like I'm re-implementing pinning, though‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 971
	},
	{
		"id" : 247914980,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-19T05:48:45Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/971?src=pr) is 83.31% (diff: 100%)\n> Merging [#971](https://codecov.io/gh/Homebrew/brew/pull/971?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **8.05%**\n\n```diff\n@@             master       #971   diff @@\n==========================================\n  Files           360        340     -20   \n  Lines         15543      14101   -1442   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n+ Hits          11697      11748     +51   \n+ Misses         3846       2353   -1493   \n  Partials          0          0           \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f4a8d28...d89a696](https://codecov.io/gh/Homebrew/brew/compare/f4a8d28819f1fee73fcc63d08e70cb36eecdfb20...d89a696d83cd325656e30a99cb4ba8342ffb39c9?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 971
	},
	{
		"id" : 247928893,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T07:43:58Z",
		"body" : "> brew outdated hello@2 # should be no output\r\n\r\nAgreed.\r\n\r\n> brew outdated hello # hello should not be listed (because it was installed with a specified version)\r\n\r\nI think this should show as outdated, actually.\r\n\r\n> brew outdated # hello should not be listed (because it was installed with a specified version)\r\n\r\nAgreed, `hello` should only be listed if you did `brew install hello`.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 971
	},
	{
		"id" : 247929063,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T07:45:00Z",
		"body" : "@penman Don't want to put any time pressure on you but ideally üö¢ping this today or tomorrow would be amazing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 971
	},
	{
		"id" : 247975170,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-19T12:04:50Z",
		"body" : "> > brew outdated hello # hello should not be listed (because it was installed with a specified version)\r\n\r\n> I think this should show as outdated, actually.\r\n\r\n@MikeMcQuaid I just had a look at this, and it'd be pretty difficult to implement. Because it wasn't installed with an alias, there's (currently) no way to know that the `hello` alias used to point to it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 971
	},
	{
		"id" : 248002676,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T14:06:07Z",
		"body" : "@penman Ah, I see. I think it's fine as-is, then. We can always adjust this behaviour and iterate on this if it ends up being confusing in future.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 971
	},
	{
		"id" : 247404314,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-09-15T18:03:57Z",
		"body" : "I also just found another report of this in the form of a [post](http://forums.macrumors.com/threads/where-is-xcode-8-command-line-tools-for-el-capitan.1995586/) on [the MacRumors forums](http://forums.macrumors.com/).  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247405132,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-15T18:07:04Z",
		"body" : "I don't have time to type out details right now, but rest assured, we're well aware of the problems, and a huge chunk of those were solved by https://github.com/Homebrew/brew/pull/970. You'll find more information if you look at the recent issues filed here or in homebrew-core.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247405616,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-09-15T18:08:40Z",
		"body" : "@zmwangx:  OK, glad you guys know what's going on with respect to this.  Hopefully Apple releases the 10.11 CLT package soon, though‚Ä¶  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247409813,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-09-15T18:24:01Z",
		"body" : "@zmwangx:  OK, I've started adding a list of the pull requests and issues that are relevant to this tracking issue.  It's still incomplete, though, so bear with me here‚Ä¶  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247410063,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-15T18:24:58Z",
		"body" : "Generally it's just the `xcode 8` tag.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247415377,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-09-15T18:44:31Z",
		"body" : "@zmwangx:  Ah, heh, I should have guessed.  That should save me some time following links around in a wild goose chase.  I've got everything from doing _that_ added to the list, though, so I thought it was safe to remove my notices that certain parts of that list were a work in progress.  Since I forgot to look through all the things tagged 'Xcode 8,' I'll add that back now‚Ä¶; whoops!  üòÜ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247428910,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-09-15T19:34:19Z",
		"body" : "@zmwangx:  All right, I think that's all the major related issues and pull requests (there are a few more, but I omitted them because they basically just link back to the listed issues and PRs,) so I removed the 'work in progress' markers from both sub-lists.  Hopefully this issue ends up being helpful!  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247487496,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-09-16T00:01:50Z",
		"body" : "OK, I just got a response from somebody who sounds like they know what they're talking about (hopefully they work at Apple) on [the discussion thread](https://forums.developer.apple.com/message/179069 I started on [the Apple Developer Forums](https://forums.developer.apple.com/welcome) earlier.  Keep watching that thread for updates if you can't find anything else that looks relevant to the situation here.  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247528380,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-09-16T06:33:56Z",
		"body" : "Oh dear. Thanks for passing that on - I hope they act on that soon.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247624221,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-16T15:03:41Z",
		"body" : "I don't think the sole response was from an Apple engineer. Listen to this:\r\n\r\n> It *doesn't sound like* this will be fixed in time for the Xcode 8.0 release.\r\n\r\n(emphasis by me)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247785269,
		"user" : {
			"login" : "draeath"
		},
		"created_at" : "2016-09-17T16:11:18Z",
		"body" : "I see a package titled \"Command Line Tools (macOS 10.12) for Xcode 8\" on the [downloads page](https://developer.apple.com/download/more/) which, based on the last comment I see there, wasn't present long ago. It's about 120mb. Is this what we're missing?\r\n\r\n![xcode8-clitools](https://cloud.githubusercontent.com/assets/987449/18609427/d4a972f8-7ccf-11e6-84c5-6ed313fca497.png)\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247785347,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:12:23Z",
		"body" : "That's not for El Capitan.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247787297,
		"user" : {
			"login" : "draeath"
		},
		"created_at" : "2016-09-17T16:42:06Z",
		"body" : "I followed your instructions [here](https://github.com/Homebrew/brew/issues/991#issuecomment-247785095) and followed up with `sudo xcode-select --install` - this seems to have done the trick (on my end). I did have to do the `brew unlink $(brew ls); brew link $(brew ls)` bit as well. Finally I had a whole pile of unlinked kegs reported by `brew doctor` (which I don't recall seeing previously) - so linked all those. I did have some json-c library conflicts to resolve, simply because some third-party software *also* installed such libraries in /usr/local/lib. Mea culpa.\r\n\r\nAnyway. Adding these notes here to help direct folks to the above fixwork, so they don't have to follow the same trail I did.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247787438,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:43:53Z",
		"body" : "@draeath Um I think you're on the wrong issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247787504,
		"user" : {
			"login" : "draeath"
		},
		"created_at" : "2016-09-17T16:44:56Z",
		"body" : "How so? Issue title is \"OS X v10.11.x 'El Capitan,' Xcode 8, and the Command Line Tools (Or, Rather, the Lack Thereof‚Ä¶)\" and I just explained what path I had to follow to get them installed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247787579,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:45:58Z",
		"body" : "@draeath \r\n\r\n> I followed your instructions here\r\n\r\nThose instructions are for https://github.com/Homebrew/brew/issues/991 and has nothing to do with how to install CLT...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247788210,
		"user" : {
			"login" : "draeath"
		},
		"created_at" : "2016-09-17T16:55:10Z",
		"body" : "\"and followed up with\"\r\n\r\nI had to do both. And my post with the full path I followed was for anyone else who came around trying to figure out how to fix things after installing xcode 8. They'd hit both problems just the same...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247788676,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:59:38Z",
		"body" : "> how to fix things after installing xcode 8.\r\n\r\nProblems in #991 are not related to Xcode 8 update.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247789350,
		"user" : {
			"login" : "draeath"
		},
		"created_at" : "2016-09-17T17:03:59Z",
		"body" : "Oh, so the migration isn't related, just a coincidence in timing?\r\n\r\nIs it possible to rename issues then? You might consider renaming #991 then, it reads as \"Homebrew Cannot Update, Doctor, Unlink, etc. since Xcode update?\" currently.\r\n\r\nIf it mislead me, it can mislead others.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247793753,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-09-17T17:55:21Z",
		"body" : "@zmwangx:  \r\n> I don't think the sole response was from an Apple engineer. Listen to this:\r\n> \r\n>> It doesn't sound like this will be fixed in time for the Xcode 8.0 release.\r\n>\r\n> (emphasis by me)\r\n\r\n_Sigh._  This is starting to get more than just annoying‚Ä¶  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247796553,
		"user" : {
			"login" : "draeath"
		},
		"created_at" : "2016-09-17T18:40:06Z",
		"body" : "@RandomDSdevel it is fixable, though, it's just another command you need to run (in addition to accepting the license) - in fact a current instance of 'brew' will tell you this with `brew doctor`. Just in case it's missed, though, you can install the CLI tools after installing xcode8 as such: `sudo xcode-select --install`\r\n\r\nI have successfully built stuff after doing this (fontconfig specifically, which involved it patching, a ./configure pass, and a make pass - vs just pouring a bottle).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247796644,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T18:41:39Z",
		"body" : "> you can install the CLI tools after installing xcode8 as such:\r\n\r\nNo, that installs CLT 7.3.1.0.1.1461711523. Check your `brew config`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247796715,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T18:42:43Z",
		"body" : "> I have successfully built stuff after doing this (fontconfig specifically\r\n\r\nAs for fontconfig, pouring bottle is definitely fine. Problems only manifest when you build things, and we have fixed most of those too so you shouldn't notice.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247796828,
		"user" : {
			"login" : "draeath"
		},
		"created_at" : "2016-09-17T18:44:19Z",
		"body" : "Oh. OH. Well that's just hilarious... yep, \"7.3.1.0.1.1461711523\" here.\r\n\r\nWell, thank you for all the fixes you've already put in there, since things seem to be working OK on my end. I haven't gone and built anything substantial, but the simpler stuff seems happy.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247796883,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T18:45:05Z",
		"body" : ">  since things seem to be working OK on my end.\r\n\r\nGood to know. We know a few outstanding issues, but hopefully you won't hit those (pouring bottles is almost universally safe).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247804886,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-09-17T20:15:28Z",
		"body" : "@draeath, @zmwangx:  \r\nFrom @draeath:  \r\n> @RandomDSdevel it is fixable now, though, it's just another command you need to run (in addition to accepting the license) - in fact a current instance of 'brew' will tell you this with `brew doctor`. Just in case it's missed, though, you can install the CLI tools after installing xcode8 as such:\r\n>\r\n> `sudo xcode-select --install`\r\n>\r\n> This will pop up a small GUI that'll prompt you to download/install them. Just whack the button and come back in a few minutes.\r\n>\r\n> I have successfully built stuff after doing this (fontconfig specifically, which involved it patching, a ./configure pass, and a make pass - vs just pouring a bottle).\r\n\r\nFrom @zmwangx:  \r\n> [From @draeath:]  \r\n>> you can install the CLI tools after installing xcode8 as such:\r\n>\r\n> No, that installs CLT 7.3.1.0.1.1461711523. Check your `brew config`.  \r\n\r\nIn this case, I'm not really comfortable with using Xcode v8.0 with the version of the Command Line Tools intended for use with Xcode v7.3.1 and am not exactly sure how this mismatch would affect command-line developer-tool usage, so I'm pretty much stuck without any development tools until Apple fixes this and, since I tend to `--build-from-source`, can't `brew upgrade` anything in the meantime.  `sudo xcode-select --install` spews the following error at me, though, ‚Ä¶:  \r\n\r\n    xcode-select: error: command line tools are already installed, use \"Software Update\" to install updates\r\n\r\n‚Ä¶so _that_, quite annoyingly, doesn't help me, _either_.  Grrrrrrr‚Ä¶  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247881731,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-09-18T21:25:17Z",
		"body" : "There's been a bit of action with respect to the reason I created this tracking issue on [that Apple Developer Forum thread I started](https://forums.developer.apple.com/message/179069) (along with some others,) so perhaps Apple will release a corrected version of the installer for the El Capitan Xcode 8 command-line tools relatively soon‚Ä¶?  Anyway, I've got my fingers crossed here.  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 248973142,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-09-22T17:35:23Z",
		"body" : "And Apple has now officially acknowledged the existence of this issue by including the following note in [Xcode v8.1's first beta's release notes](http://adcdownload.apple.com/Developer_Tools/Xcode_8.1_beta/Release_Notes_for_Xcode_8.1_beta.pdf) under the 'Known Issues in Xcode 8.1 beta - Swift and Apple LLVM Compilers' heading's 'Command Line Tools' sub-heading:  \r\n\r\n> * There is no Command Line Tools (OS X 10.11) for Xcode 8 package. Xcode 8 contains SDKs that are incompatible with earlier toolchains. Developers who want to make use of the Xcode 8 SDKs from the command line must choose the SDK with `xcode-select`. Developers on OS X El Capitan who have installed versions of the Command Line Tools (OS X 10.11) for Xcode 8 Beta should install Command Line Tools (OS X 10.11) for Xcode 7.3.1. (28234439)\r\n> * On OS X El Capitan, running Swift from the command line can fail if any Command Line Tools (OS X 10.11) package is installed on the system. (28234754)\r\n>\r\n>  Workaround: Execute Swift through from the command line using `xcrun`, . Choose the macOS SDK using the `-sdk`. For example, the following command compiles the file `main.swift`:\r\n>\r\n>  `xcrun -sdk macosx swiftc main.swift`\r\n\r\nShould Homebrew have any special handling for this?  What I get from this is that the version of the command-line tools installed inside the Xcode bundle were updated properly if you are on OS X v10.11.x 'El Capitan' and installed Xcode v8, so `xcodebuild`, `xcrun`, and friends still run properly even though the stand-alone command-line developer tools don't exist for Xcode v8.  Whether this means we'll get a proper CLT package for El Capitan with Xcode v8.1 isn't so clear‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 249118522,
		"user" : {
			"login" : "rscottm"
		},
		"created_at" : "2016-09-23T07:07:02Z",
		"body" : "This worked for me:\r\n\r\nsudo xcode-select -r\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 249309702,
		"user" : {
			"login" : "fscofield"
		},
		"created_at" : "2016-09-23T21:43:08Z",
		"body" : "Has anyone had success using homebrew after downgrading to xcode & xcode CLT 7.3.1 on (OS X 10.11)? I keep running into [this issue](https://github.com/Homebrew/homebrew-core/issues/2674) when installing mysql with homebrew 1.0.3, Xcode 8.0 and CLT 7.3.1. As a result I tried downgrading Xcode to 7.3.1 and now get the following issue from homebrew:\r\n\r\n```\r\nError: Your Xcode (7.3.1) is outdated\r\nPlease update to Xcode 8.0.\r\nXcode can be updated from the App Store.\r\n```\r\n\r\nIs there a way to bypass this error? Or is 8.0 imperative for running homebrew? ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 249316319,
		"user" : {
			"login" : "ellio167"
		},
		"created_at" : "2016-09-23T22:22:28Z",
		"body" : "I found that the cli 7.3.1 are incompatible with the xcode 8 SKD.  In particular when I tried to do\r\n\r\nbrew install matplotlib --build-from-source\r\n\r\nI got lots of syntax errors directly from one of the main system frameworks.\r\n\r\nOnce I downgraded back to xcode 7.3.1 all is fine...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 249319645,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T22:45:22Z",
		"body" : "> Is there a way to bypass this error? Or is 8.0 imperative for running homebrew?\r\n\r\nFor now at least, this will no longer happen on < Sierra.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 249319724,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T22:45:51Z",
		"body" : "Or at least, it won't once the next tag is cut if you're a standard user. That will likely land fairly soon.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 249383440,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-09-24T19:39:28Z",
		"body" : "@rscottm:  \r\n> This worked for me:\r\n>\r\n> sudo xcode-select -r\r\n\r\nOK, but _why_, exactly‚Ä¶?  Does installing the command-line tools suite set a custom developer tools path‚Ä¶?  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 249440122,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-09-25T19:10:20Z",
		"body" : "Hmm, according to the following posts on [the 'fink-users' mailing list](https://sourceforge.net/p/fink/mailman/fink-users/), ‚Ä¶:  \r\n\r\n* ['Re:  [fink-users] fink fails to recognize updated CLT'](https://sourceforge.net/p/fink/mailman/message/35375553/)\r\n* ['Re:  [fink-users] Fink on El Capitan'](https://sourceforge.net/p/fink/mailman/message/35385600/)\r\n\r\n‚Ä¶somebody at Apple confirmed that it's OK for end-users to use Xcode v8.0 with the Command Line Tools suite intended for use with Xcode v7.3.1.  I couldn't find a source for this, though, so can somebody else confirm this?  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 249440361,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T19:13:33Z",
		"body" : "Martin noticed a few days ago that according to [Xcode 8.1 beta release notes](http://adcdownload.apple.com/Developer_Tools/Xcode_8.1_beta/Release_Notes_for_Xcode_8.1_beta.pdf),\r\n\r\n> There is no Command Line Tools (OS X 10.11) for Xcode 8 package. Xcode 8 contains SDKs that are incompatible with earlier toolchains. Developers who want to make use of the Xcode 8 SDKs from the command line must choose the SDK with `xcode-select`. Developers on OS X El Capitan who have installed versions of the Command Line Tools (OS X 10.11) for Xcode 8 Beta should install Command Line Tools (OS X 10.11) for Xcode 7.3.1.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 249440799,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-09-25T19:20:52Z",
		"body" : "@zmwangx:  Oh, yeah!  _I_ noticed that statement, _too_ (see [here](https://github.com/Homebrew/brew/issues/972#issuecomment-248973142) for when I mentioned it,) but didn't really read it closely enough for that to register with my brain (üòÜ!)  Now that makes me wonder what SDKs `xcode-select` recognizes as installed under such a configuration‚Ä¶  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 249887105,
		"user" : {
			"login" : "RandomDSdevel"
		},
		"created_at" : "2016-09-27T14:47:11Z",
		"body" : "To answer the question I myself posed in my next most recent reply to this thread, here's what I get from `xcodebuild -showsdks`:  \r\n\r\n```\r\niOS SDKs:\r\n\tiOS 10.0                      \t-sdk iphoneos10.0\r\n\r\niOS Simulator SDKs:\r\n\tSimulator - iOS 10.0          \t-sdk iphonesimulator10.0\r\n\r\nmacOS SDKs:\r\n\tmacOS 10.12                   \t-sdk macosx10.12\r\n\r\ntvOS SDKs:\r\n\ttvOS 10.0                     \t-sdk appletvos10.0\r\n\r\ntvOS Simulator SDKs:\r\n\tSimulator - tvOS 10.0         \t-sdk appletvsimulator10.0\r\n\r\nwatchOS SDKs:\r\n\twatchOS 3.0                   \t-sdk watchos3.0\r\n\r\nwatchOS Simulator SDKs:\r\n\tSimulator - watchOS 3.0       \t-sdk watchsimulator3.0\r\n```\r\n\r\nAs such, it _appears_ that the only OS X 10._11_ SDK I _might_ have left on my machine _could_ be the one hanging around in my installation of the version of the Xcode command-line tools suite originally intended for use only with version 7.3.1 of the IDE, but _that's_ not showing up here because `xcodebuild` only knows about SDKs installed _inside_ of the _current_ version of Xcode installed on my machine, which would be v8.0, and _not_ any SDKs installed _outside_ of Xcode&thinsp;‚Äîi. e.:  as part of a CLT suite.  On that note, can I assume that we're all done here?  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 972
	},
	{
		"id" : 247543632,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-16T08:13:35Z",
		"body" : "Thanks @mistydemeo.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 973
	},
	{
		"id" : 247670011,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-16T18:13:58Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/973?src=pr) is 83.64% (diff: 100%)\n> Merging [#973](https://codecov.io/gh/Homebrew/brew/pull/973?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@             master       #973   diff @@\n==========================================\n  Files           340        340          \n  Lines         13959      13961     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          11676      11678     +2   \n  Misses         2283       2283          \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [5371359...e3609b6](https://codecov.io/gh/Homebrew/brew/compare/53713593d677cb916402742940d14bfc7e60a5a4...e3609b6fd4001523679562c33064e17d03e1534f?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 973
	},
	{
		"id" : 247524101,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-16T05:56:56Z",
		"body" : "**Disclaimer.** I only speak for myself and the reply does not reflect the opinions of the Homebrew team.\r\n\r\n---\r\n\r\n> I've always installed homebrew in a custom location and I don't remember running into issues because of that\r\n\r\nGood for you.\r\n\r\n> at very least try to support installing to elsewhere than /usr/local/ and remove the paragraph in docs that says it's dangerous\r\n\r\nWe do \"support\" it, there's practically nothing in your way, but it *is* dangerous because it untested by us and most of our users. I don't see this warning removed any time soon.\r\n\r\nI'm probably not in the position to say this, but testing anything other than `/usr/local` requires extra code, extra manpower, extra CI infrastructure, and extra _ (fill in blank here). I don't think it's feasible, at least not at the moment.\r\n\r\n> specifically track bugs related to this issue should they arise\r\n\r\nYou can report them. We'll try to squash bugs if we can, of course.\r\n\r\n> make ~/.homebrew the new default instead of /usr/local (linuxbrew got this right with ~/.linuxbrew)\r\n\r\nI don't see this happening. Linuxbrew didn't get it *right*, it's just an unfortunate *workaround* on multiuser systems for users who are not sudoers and who cannot (or don't bother to) convince their sysadmins to install the software they need. Having a gigantic `~/.linuxbrew` in every user's home is ridiculous, and sysadmins hate it.\r\n\r\n*By the way, this is very very clearly rejected in https://github.com/Homebrew/brew-evolution/blob/master/commonly_rejected_proposals.md.*\r\n\r\n> concurrent homebrew installs\r\n\r\nThat's possible today. I do it, many maintainers do it. Just don't expect bottles in many/most cases, and don't expect official support (but let me repeat myself, we do try to help when we can).\r\n\r\n> /usr/local actually can interfere with other packages installed on mac, eg when user does make && make install it'll install there.\r\n\r\nPick a different prefix ahead of time when you install random things (and keep in mind that they can still write to wherever they want even if you tell them to write to a certain prefix ‚Äî which is why we enabled sandboxing). You don't complain about apt, rpm or yum installing to /usr because they own /usr. We can't own /usr, so we instead own /usr/local. This stuff is all in [FAQ](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/FAQ.md#why-does-homebrew-prefer-i-install-to-usrlocal). If you disagree, you should probably choose a different package manager, like MacPorts.\r\n\r\n> /usr/local often require special privileges\r\n\r\nInstall to somewhere else then. Again, it's been possible for a long time.\r\n\r\n---\r\n\r\nOverall, we're a very small team, and we have enough things on our hands already, so sorry. What you're proposing here is a gazillion times easier said than done. Not saying it's impossible to happen at some point in the future, but don't anticipate it.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 974
	},
	{
		"id" : 247538114,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-16T07:40:40Z",
		"body" : "Hey @zmwangx, be nice.\r\n\r\nGenerally, what zmwangx said. We do support Homebrew in other locations (and are actually working on making that more flexible), but for technical reasons and resource limitations, getting that to \"100% support\" is infeasible.\r\n\r\nThe core code is written to support \"prefixes\" at arbitrary locations. I and other maintainers do run Homebrew at non-default installation locations. And your rationale makes sense, especially for concurrent Homebrew installs.\r\n\r\nIf you run in to bugs when running Homebrew at a non-default location, go ahead and report them. They will be tracked and handled as first-class bugs (though some might be un-fixable).\r\n\r\nBut there's no way we can get the quality of installations at non-default locations to the same level as the default location. That's what's actually tested in our testing infrastructure, and is used by probably the vast majority of our users, so it has a lot more eyes on it. (And some packages have dependencies specifically on `/usr/local`, unfortunately. We try to eliminate those when we find them.) \r\n\r\nConservative users who want to minimize their risk of breakage, or who want to maximize the benefit of bottles, will want to stick with the default installation location. And we want to make that clear in our documentation. So I think the warning will remain.\r\n\r\nI wouldn't recommend installing under a user's home directory by default. Homebrew on OS X expects and intends to be a system-level package manager.\r\n\r\nOverall: We basically want what you want, it's mostly supported, but we can't get *100%* there, and want to make that very clear to users who might care.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 974
	},
	{
		"id" : 247544817,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-16T08:20:16Z",
		"body" : "> (stretch goal) make ~/.homebrew the new default instead of /usr/local (linuxbrew got this right with ~/.linuxbrew)\r\n\r\nThis is impossible for Homebrew if we want to continue to distribute binary packages. `~/.homebrew` is not a path; it expands to `/Users/mike/.homebrew` for me and something else for you. As a result, any binary packages that hard-code locations inside them (rather a lot, unfortunately) need a hard-coded location.\r\n\r\n> /usr/local actually can interfere with other packages installed on mac, eg when user does make && make install it'll install there. Seperating out what's from homebrew vs not in that folder can be a pain, if not impossible when some files are overwritten (eg: http://blog.mact.me/2015/05/15/so-you-want-to-move-your-homebrew-folder)\r\n\r\nThis blog post is inaccurate if you use the current installer: https://github.com/homebrew/install\r\n\r\nThe new default location is `/usr/local/Homebrew` for the Homebrew repository (e.g. the source code, taps, `README.md`, etc.` and `/usr/local` for the Homebrew prefix (e.g. where the symlinks are made, where the `Cellar` is). People with a `/usr/local` prefix will be migrated to this format as-of https://github.com/Homebrew/brew/pull/963.\r\n\r\n> /usr/local often require special privileges (eg http://superuser.com/questions/986338/change-install-location-and-prefix-of-homebrew-packages)\r\n\r\nAgain, as-of https://github.com/Homebrew/brew/pull/963 and the current installer at https://github.com/homebrew/install you no longer need to take ownership of `/usr/local` but instead just various top-level directories in `/usr/local`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 974
	},
	{
		"id" : 247584736,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-16T12:08:50Z",
		"body" : "https://github.com/Homebrew/homebrew-core/pull/4886",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 975
	},
	{
		"id" : 247622440,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-16T14:57:06Z",
		"body" : "https://github.com/Homebrew/legacy-homebrew/issues/8937\r\n\r\n\"Closing old usability issues in favour of pull requests.\"",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 976
	},
	{
		"id" : 247624667,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-09-16T15:05:23Z",
		"body" : "Thanks for the history lesson! Agree that a PR is way to go here. If I want it that much I'll submit one myself.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 976
	},
	{
		"id" : 247625006,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-16T15:06:37Z",
		"body" : "You could also submit an evolution proposal here: https://github.com/Homebrew/brew-evolution\r\n\r\nPrepare to be invested though, it won't be like a casual feature request.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 976
	},
	{
		"id" : 247625396,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-09-16T15:08:02Z",
		"body" : "Awesome, thx",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 976
	},
	{
		"id" : 247625628,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-09-16T15:08:56Z",
		"body" : "This is something that would be great but as written in https://github.com/Homebrew/legacy-homebrew/issues/8937 would require significant work.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 976
	},
	{
		"id" : 247642130,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-16T16:14:05Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/977?src=pr) is 83.71% (diff: 100%)\n> Merging [#977](https://codecov.io/gh/Homebrew/brew/pull/977?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **0.07%**\n\n```diff\n@@             master       #977   diff @@\n==========================================\n  Files           340        340          \n  Lines         13959      13947    -12   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits          11676      11676          \n+ Misses         2283       2271    -12   \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [5371359...04bbc16](https://codecov.io/gh/Homebrew/brew/compare/53713593d677cb916402742940d14bfc7e60a5a4...04bbc16a552418db570773b1bb61e12d4626468b?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 977
	},
	{
		"id" : 247645650,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-16T16:28:27Z",
		"body" : "Wow, gotta love how random services now expect to have a place in your repo rather than just offering a toggle in a control panel.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 978
	},
	{
		"id" : 247653109,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-16T17:01:06Z",
		"body" : "@zmwangx Yup üòÄ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 978
	},
	{
		"id" : 247686963,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-16T19:30:23Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/978?src=pr) is 83.71% (diff: 100%)\n> Merging [#978](https://codecov.io/gh/Homebrew/brew/pull/978?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **0.07%**\n\n```diff\n@@             master       #978   diff @@\n==========================================\n  Files           340        340          \n  Lines         13959      13947    -12   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits          11676      11676          \n+ Misses         2283       2271    -12   \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [5371359...ee17855](https://codecov.io/gh/Homebrew/brew/compare/53713593d677cb916402742940d14bfc7e60a5a4...ee17855441754ef1a73bd13f2da231af4c2ca57d?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 978
	},
	{
		"id" : 247707389,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-16T20:57:56Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/978?src=pr) is 83.70% (diff: 100%)\n> Merging [#978](https://codecov.io/gh/Homebrew/brew/pull/978?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **0.05%**\n\n```diff\n@@             master       #978   diff @@\n==========================================\n  Files           340        340          \n  Lines         13959      13951     -8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          11676      11677     +1   \n+ Misses         2283       2274     -9   \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [5371359...62c8b1d](https://codecov.io/gh/Homebrew/brew/compare/53713593d677cb916402742940d14bfc7e60a5a4...62c8b1da9973271095a7d7c0feee38922e1e5fc3?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 978
	},
	{
		"id" : 247802785,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T19:46:07Z",
		"body" : "CC the Cask folks ( @jawshooah @reitermarkus ) for review.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 979
	},
	{
		"id" : 247803763,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-17T19:57:55Z",
		"body" : "@MikeMcQuaid, are non-GitHub taps even supported? I have never seen one. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 979
	},
	{
		"id" : 247803857,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T19:58:57Z",
		"body" : "Yeh: https://github.com/Homebrew/brew/blob/c419f928ba5d152fc41a8abc8f33f88bfe3e1971/Library/Homebrew/cmd/tap.rb#L11-L15",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 979
	},
	{
		"id" : 247805725,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-17T20:27:30Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/979?src=pr) is 75.50% (diff: 31.25%)\n> Merging [#979](https://codecov.io/gh/Homebrew/brew/pull/979?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will decrease coverage by **8.21%**\n\n```diff\n@@             master       #979   diff @@\n==========================================\n  Files           340        360     +20   \n  Lines         13948      15469   +1521   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n+ Hits          11677      11680      +3   \n- Misses         2271       3789   +1518   \n  Partials          0          0           \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a54c968...c419f92](https://codecov.io/gh/Homebrew/brew/compare/a54c96825b2c490b2b29f4214de44cf146ea7744...c419f928ba5d152fc41a8abc8f33f88bfe3e1971?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 979
	},
	{
		"id" : 247698457,
		"user" : {
			"login" : "JCount"
		},
		"created_at" : "2016-09-16T20:18:18Z",
		"body" : "No problem!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 980
	},
	{
		"id" : 247713748,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-16T21:29:59Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/980?src=pr) is 83.71% (diff: 100%)\n> Merging [#980](https://codecov.io/gh/Homebrew/brew/pull/980?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@             master       #980   diff @@\n==========================================\n  Files           340        340          \n  Lines         13948      13947     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits          11677      11676     -1   \n  Misses         2271       2271          \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a54c968...f989346](https://codecov.io/gh/Homebrew/brew/compare/a54c96825b2c490b2b29f4214de44cf146ea7744...f989346c0348d9bab091fbb12dc73e3b372aaab2?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 980
	},
	{
		"id" : 247802758,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T19:45:43Z",
		"body" : "Thanks for your contribution to Homebrew! Without people like you submitting PRs we couldn't run this project. You rock!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 980
	},
	{
		"id" : 247749400,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T05:02:54Z",
		"body" : "Sounds more like a terminal emulator problem. Which terminal emulator is this, and how many columns do you have?  And what happens when you run the following in bash:\r\n\r\n```bash\r\nfill_row () { for (( i = 0; i < COLUMNS; i++ )); do echo -n \\#; done; }; fill_row; printf '\\r'; fill_row\r\n```\r\n\r\nI know on the Windows console this would result in two lines because when you get to the end of line your cursor is already on the next, but I've yet to encounter this in a *nix terminal emulator.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247769650,
		"user" : {
			"login" : "hidrodixtion"
		},
		"created_at" : "2016-09-17T13:29:06Z",
		"body" : "I'm using iTerm2, build 3.0.9. This is the output from your script:\r\n\r\n![screen shot 2016-09-17 at 8 27 21 pm](https://cloud.githubusercontent.com/assets/52334/18608504/50e9107c-7d15-11e6-8598-321d81a4738b.png)\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247770029,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T13:35:24Z",
		"body" : "And what's the output of `echo $COLUMNS` when you see the original issue?\r\n\r\nI would guess you have a curlrc with the `--progress-bar` option turned on, and `COLUMNS` is 78. Basically, your terminal is not wide enough for curl's rather inflexible progress bar (there might be a way to let it be flexible, I don't use this option so I didn't dig into it).\r\n\r\nIn any case, it's a curl issue, not a brew one, because the progress bar is printed by curl.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247770884,
		"user" : {
			"login" : "hidrodixtion"
		},
		"created_at" : "2016-09-17T13:43:11Z",
		"body" : "you're right, `echo $COLUMNS` print 78. But, I don't know about curlc and I don't even use curl. Maybe it's because the width of the terminal. Thanks for your help.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247771155,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T13:45:01Z",
		"body" : "`brew` uses curl internally. You should have a curlrc somewhere because I don't think `--progress-bar` is a default option, but no big deal.\r\n\r\nAnyway, everything should be fine if you have at least 79 columns.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247802229,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-17T19:37:40Z",
		"body" : "> I don't think --progress-bar is a default option\r\n\r\nhttps://github.com/Homebrew/brew/blob/10f2bc2deabad58c4f6b80481ccc913faeb85510/Library/Homebrew/global.rb#L33",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247802376,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T19:39:57Z",
		"body" : "> It is\r\n\r\nOh I see, I meant it's not a default for curl itself. Apparently I'm overriding Homebrew's options in my curlrc. Thanks for pointing it out though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247802450,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T19:40:59Z",
		"body" : "> I'm overriding Homebrew's options in my curlrc\r\n\r\nActually that's weird, command line args should trump curlrc. Anyway, I don't really care.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247818362,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T01:32:57Z",
		"body" : "@hidrodixtion What's your `$TERM` setting?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247821976,
		"user" : {
			"login" : "hidrodixtion"
		},
		"created_at" : "2016-09-18T03:09:09Z",
		"body" : "it prints `xterm-256color`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247822089,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T03:12:11Z",
		"body" : "And is that the Agnoster theme on `zsh` that you're running, or something else? I'll see if I can reproduce.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247822369,
		"user" : {
			"login" : "hidrodixtion"
		},
		"created_at" : "2016-09-18T03:18:39Z",
		"body" : "I'm using zsh with bullet train theme : https://github.com/caiogondim/bullet-train-oh-my-zsh-theme",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247822436,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T03:20:22Z",
		"body" : "And, dumb question, but, did you resize your terminal window while the download was happening? Doing that reproduces for me. (Makes sense - `$COLUMNS` is probably captured at the beginning of the download, and I'm not sure how `TRAPWINCH` propagation works here.)\r\n\r\nActually‚Äîin fact, just resizing the window to less than 80 columns reproduces this for me, across multiple `brew fetch` invocations. I think curl might be outputting a fixed 80-column progress bar.\r\n\r\n<img width=\"550\" alt=\"screen shot 2016-09-17 at 11 19 40 pm\" src=\"https://cloud.githubusercontent.com/assets/2618447/18612631/3ca62e02-7d2d-11e6-8fdf-7f83a4ce7fd6.png\">\r\n\r\nIf you widen your window to 82 or more columns, does this still happen?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247823178,
		"user" : {
			"login" : "hidrodixtion"
		},
		"created_at" : "2016-09-18T03:39:19Z",
		"body" : "> did you resize your terminal window while the download was happening? \r\nNo, I'm just doing `brew upgrade` and leave the terminal.\r\n\r\n> If you widen your window to 82 or more columns, does this still happen?\r\nI've just tried to do `brew install` with column width: 91 and the problem didn't happen.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247823601,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T03:52:22Z",
		"body" : "Haha. Okay, yep, this is busted. Reopening. I'll look in to this.\r\n\r\nPlease don't get your hopes too high, though. The answer might be just turning off the progress bar when the terminal is narrow, or \"sorry, this isn't something we can fix right now; please keep your terminal at least 80 columns wide\".",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247823800,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T03:58:29Z",
		"body" : "I've put up a fix at #1002 which disables the progress bar when the terminal is too narrow.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 981
	},
	{
		"id" : 247755668,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-17T07:43:51Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/982?src=pr) is 82.86% (diff: 100%)\n> Merging [#982](https://codecov.io/gh/Homebrew/brew/pull/982?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will decrease coverage by **0.84%**\n\n```diff\n@@             master       #982   diff @@\n==========================================\n  Files           340        340          \n  Lines         13948      14091   +143   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits          11677      11677          \n- Misses         2271       2414   +143   \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a54c968...f8d7745](https://codecov.io/gh/Homebrew/brew/compare/a54c96825b2c490b2b29f4214de44cf146ea7744...f8d774554775a3efdb905f0a55873cce545890c1?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 982
	},
	{
		"id" : 247765644,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-17T12:00:22Z",
		"body" : "Another one I see like this is `ENV[\"LC_ALL\"] = \"en_US.UTF-8\"`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 982
	},
	{
		"id" : 247768390,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T13:05:25Z",
		"body" : "```\r\n$ grep -rI 'ENV\\[\"LC_ALL\"\\]'\r\nFormula/alot.rb:      ENV[\"LC_ALL\"] = \"en_US.UTF-8\"\r\nFormula/asciinema.rb:    ENV[\"LC_ALL\"] = \"en_US.UTF-8\"\r\nFormula/cmake.rb:      ENV[\"LC_ALL\"] = \"en_US.UTF-8\"\r\nFormula/khal.rb:    ENV[\"LC_ALL\"] = \"en_US.UTF-8\"\r\nFormula/lensfun.rb:    ENV[\"LC_ALL\"] = \"en_US.UTF-8\"\r\nFormula/mpv.rb:    ENV[\"LC_ALL\"] = \"C\"\r\nFormula/percona-xtrabackup.rb:      ENV[\"LC_ALL\"] = \"en_US.UTF-8\"\r\nFormula/pixz.rb:    ENV[\"LC_ALL\"] = \"en_US.UTF-8\"\r\nFormula/twtxt.rb:    ENV[\"LC_ALL\"] = \"en_US.UTF-8\"\r\nFormula/vdirsyncer.rb:    inreplace prefix/\"vdirsyncer.plist\", \"@@LOCALE@@\", ENV[\"LC_ALL\"] || ENV[\"LANG\"] || \"en_US.UTF-8\"\r\nFormula/vdirsyncer.rb:    ENV[\"LC_ALL\"] = \"en_US.UTF-8\"\r\n$ grep -rI 'ENV\\[\"LANG\"\\]'\r\nFormula/khal.rb:    ENV[\"LANG\"] = \"en_US.UTF-8\"\r\nFormula/lesstif.rb:    ENV[\"LANG\"] = \"C\"\r\nFormula/mitmproxy.rb:    ENV[\"LANG\"] = \"en_US.UTF-8\"\r\nFormula/twtxt.rb:    ENV[\"LANG\"] = \"en_US.UTF-8\"\r\nFormula/vdirsyncer.rb:    inreplace prefix/\"vdirsyncer.plist\", \"@@LOCALE@@\", ENV[\"LC_ALL\"] || ENV[\"LANG\"] || \"en_US.UTF-8\"\r\n```\r\n\r\nReasonable.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 982
	},
	{
		"id" : 247768552,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-17T13:08:48Z",
		"body" : "I guess the argument against globally setting the LC_ALL is that locally people probably don't have that set either.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 982
	},
	{
		"id" : 247768622,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T13:09:44Z",
		"body" : "\"Reasonable\" expands to \"your suggestion is reasonable.\"",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 982
	},
	{
		"id" : 247768660,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T13:10:12Z",
		"body" : "Oh I see what you're saying.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 982
	},
	{
		"id" : 247768712,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-17T13:11:07Z",
		"body" : "probably best to stick to just TERM for now I guess",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 982
	},
	{
		"id" : 247768780,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T13:12:50Z",
		"body" : "That won't be a problem once we have https://github.com/Homebrew/brew/issues/932 (although I haven't thought through all the ramifications it might have).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 982
	},
	{
		"id" : 247803978,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T20:00:53Z",
		"body" : "@MikeMcQuaid I did test on a bunch of listed formulae locally (not all) and I don't see any problem moving from `xterm` to `dumb`. CI might disagree but I highly doubt it.\r\n\r\nThis change isn't noticeable to users so I think we can merge first and test the affected formulae later. Even if a formula or two do require `xterm`, as I said above we can still override in the test block.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 982
	},
	{
		"id" : 247807791,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T21:01:21Z",
		"body" : "@zmwangx Cool :shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 982
	},
	{
		"id" : 247818543,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T01:37:08Z",
		"body" : "Agreed. This sounds like a good approach. And since most users won't see it, seems reasonable to merge first and test primarily through the CI.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 982
	},
	{
		"id" : 247839412,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-09-18T10:18:47Z",
		"body" : "I agree with everyone else. Good move and good work! :tada:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 982
	},
	{
		"id" : 247847878,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T13:32:00Z",
		"body" : "To wrap this up: I've removed `ENV[\"TERM\"]` from tests where possible, and that leaves us with seven formulae that require `xterm`:\r\n\r\n```bash\r\n$ grep -rIl 'ENV\\[\"TERM\"\\]'\r\nFormula/asciiquarium.rb\r\nFormula/ee.rb\r\nFormula/eg.rb\r\nFormula/git-test.rb\r\nFormula/ne.rb\r\nFormula/newt.rb\r\nFormula/slrn.rb\r\n```\r\n\r\nwhich is a still a good thing because it's now possible to determine locally that those settings are required; before this PR you can remove the `ENV[\"TERM\"]` line from the tests, the tests would still work locally in xterm-capable terminals, but they'll fail (sometimes mysteriously) on the CI.\r\n\r\nNote: To answer the possible question of why we don't set `TERM` to `xterm` universally: masquerading as xterm while not having the corresponding termcaps is a dangerous thing to do in general.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 982
	},
	{
		"id" : 247779650,
		"user" : {
			"login" : "phlppk"
		},
		"created_at" : "2016-09-17T15:07:52Z",
		"body" : "This seems to have broken something? http://stackoverflow.com/questions/39547388/why-are-all-my-homebrew-packages-suddenly-unlinked-how-do-i-fix-that",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247780206,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T15:15:18Z",
		"body" : "@phlppk This was fixed in https://github.com/Homebrew/brew/pull/988. If you got caught between the two a workaround is `brew unlink $(brew list); brew link $(brew list)`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247781871,
		"user" : {
			"login" : "tiilikainen"
		},
		"created_at" : "2016-09-17T15:36:39Z",
		"body" : "The problem is that no command of brew will execute except for `brew help`. `brew list`, `brew doctor`, `brew config`, `brew link`, `brew unlink`, `brew uninstall`: all produce the same output for me:\r\n\r\n```Error: Could not symlink share/man/whatis\r\nTarget /usr/local/share/man/whatis\r\nis a symlink belonging to oath-toolkit. You can unlink it:\r\n  brew unlink oath-toolkit\r\n\r\nTo force the link and overwrite all conflicting files:\r\n  brew link --overwrite popt\r\n\r\nTo list all files that would be deleted:\r\n  brew link --overwrite --dry-run popt```\r\n\r\nI've tried removing the symlink; it just gets recreated regardless of what command I execute.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247782467,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T15:40:31Z",
		"body" : "@tiilikainen Please try\r\n\r\n```bash\r\ncd /usr/local && git fetch && git reset --hard origin/master\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247783500,
		"user" : {
			"login" : "tiilikainen"
		},
		"created_at" : "2016-09-17T15:46:16Z",
		"body" : "````\r\n$ cd /usr/local && git fetch && git reset --hard origin/master\r\nHEAD is now at 299dffd Merge pull request #988 from MikeMcQuaid/move-linkedkegs-migration\r\n````\r\n\r\nThat unfortunately did not appear to fix the problem:\r\n\r\n````\r\n$ brew doctor\r\nError: Could not symlink share/man/whatis\r\nTarget /usr/local/share/man/whatis\r\nis a symlink belonging to oath-toolkit. You can unlink it:\r\n  brew unlink oath-toolkit\r\n\r\nTo force the link and overwrite all conflicting files:\r\n  brew link --overwrite popt\r\n\r\nTo list all files that would be deleted:\r\n  brew link --overwrite --dry-run popt\r\n$ brew unlink oath-toolkit\r\nError: Could not symlink share/man/whatis\r\nTarget /usr/local/share/man/whatis\r\nis a symlink belonging to oath-toolkit. You can unlink it:\r\n  brew unlink oath-toolkit\r\n\r\nTo force the link and overwrite all conflicting files:\r\n  brew link --overwrite popt\r\n\r\nTo list all files that would be deleted:\r\n  brew link --overwrite --dry-run popt\r\n````",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247783885,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T15:50:39Z",
		"body" : "@tiilikainen What if you run everything with `--debug`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247784073,
		"user" : {
			"login" : "tiilikainen"
		},
		"created_at" : "2016-09-17T15:53:18Z",
		"body" : "Every command produces the same trace. For example:\r\n\r\n````\r\nbrew doctor --debug\r\nError: Could not symlink share/man/whatis\r\nTarget /usr/local/share/man/whatis\r\nis a symlink belonging to oath-toolkit. You can unlink it:\r\n  brew unlink oath-toolkit\r\n\r\nTo force the link and overwrite all conflicting files:\r\n  brew link --overwrite popt\r\n\r\nTo list all files that would be deleted:\r\n  brew link --overwrite --dry-run popt\r\n/usr/local/Library/Homebrew/extend/pathname.rb:353:in `symlink'\r\n/usr/local/Library/Homebrew/extend/pathname.rb:353:in `make_relative_symlink'\r\n/usr/local/Library/Homebrew/extend/pathname.rb:512:in `make_relative_symlink'\r\n/usr/local/Library/Homebrew/keg.rb:459:in `make_relative_symlink'\r\n/usr/local/Library/Homebrew/keg.rb:502:in `block in link_dir'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/pathname.rb:546:in `block in find'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/find.rb:43:in `block in find'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/find.rb:42:in `catch'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/find.rb:42:in `find'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/pathname.rb:546:in `find'\r\n/usr/local/Library/Homebrew/keg.rb:479:in `link_dir'\r\n/usr/local/Library/Homebrew/keg.rb:317:in `link'\r\n/usr/local/Library/Homebrew/utils.rb:631:in `block in migrate_legacy_keg_symlinks_if_necessary'\r\n/usr/local/Library/Homebrew/utils.rb:628:in `each'\r\n/usr/local/Library/Homebrew/utils.rb:628:in `migrate_legacy_keg_symlinks_if_necessary'\r\n/usr/local/Library/Homebrew/brew.rb:91:in `<main>'\r\n````",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247784149,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T15:54:27Z",
		"body" : "@MikeMcQuaid Okay apparently this PR made things worse in certain cases because now `migrate_legacy_keg_symlinks_if_necessary` failure trumps everything else.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247784236,
		"user" : {
			"login" : "tiilikainen"
		},
		"created_at" : "2016-09-17T15:55:53Z",
		"body" : "Let me know if you need any info about my setup. I'm currently running El Cap.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247784294,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T15:56:35Z",
		"body" : "@tiilikainen I think you can blow away `/usr/local/Library/LinkedKegs` with `rm -rf` and things should starting working again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247784720,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T16:03:00Z",
		"body" : "> @MikeMcQuaid Okay apparently this PR made things worse in certain cases because now migrate_legacy_keg_symlinks_if_necessary failure trumps everything else.\r\n\r\n@zmwangx I think that's superior to it blowing up with random failures at random times unfortunately.\r\n\r\n@tiilikainen Sorry for the pain.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247784815,
		"user" : {
			"login" : "tiilikainen"
		},
		"created_at" : "2016-09-17T16:04:22Z",
		"body" : "That seems to have gotten me unstuck. But for whatever reason I can't `brew link oath-toolkit` without getting that symlink error again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247784876,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T16:05:30Z",
		"body" : "@tiilikainen Use `brew unlink oath-toolkit; brew link --overwrite oath-toolkit`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247784882,
		"user" : {
			"login" : "tiilikainen"
		},
		"created_at" : "2016-09-17T16:05:35Z",
		"body" : "There must be something with conflicts now that triggers that code. Now 'rpm' and 'tree' are conflicting.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247785010,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:07:33Z",
		"body" : "@tiilikainen There might be something funny with your `oath-toolkit` installation. At least I don't see a `share/man/whatis` in our bottle.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247785164,
		"user" : {
			"login" : "tiilikainen"
		},
		"created_at" : "2016-09-17T16:09:55Z",
		"body" : "It's always /usr/local/share/man/whatis that is showing up in the \"Could not symlink\" error message.\r\n\r\nrpm and tree are conflicting, so `brew link --overwrite tree` fixes that, then tree and xz are conflicting, so `brew link --overwrite xz` fixes that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247786591,
		"user" : {
			"login" : "kamholz"
		},
		"created_at" : "2016-09-17T16:31:02Z",
		"body" : "I just wanted to confirm that `rm -rf /usr/local/Library/LinkedKegs` followed by `brew unlink $(brew list); brew link $(brew list)` appears to have fixed the issue for me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247786719,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T16:32:54Z",
		"body" : "@kamholz Running `brew update` again should do the same.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247787146,
		"user" : {
			"login" : "tiilikainen"
		},
		"created_at" : "2016-09-17T16:39:25Z",
		"body" : "I'm not sure why oath-toolkit no longer touches /usr/local/share/man/whatis, but rpm, tree, and xz have their own versions of that same file and attempt to symlink their own versions when you `brew link`.\r\n\r\n````\r\n$ find . -name whatis\r\n./readline/6.3.8/share/man/whatis\r\n./rpm/5.4.15/share/man/whatis\r\n./tree/1.7.0/share/man/whatis\r\n./xz/5.2.2/share/man/whatis\r\n````\r\n\r\nWhat I would want as a homebrew user is for all of these whatis files to be concatenated together.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247787274,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:41:45Z",
		"body" : "@tiilikainen I don't know what these whatis files are and I can be 95% pretty sure that you got them from some other software that has nothing to do with brew. In general it doesn't make sense to concatenate files with the same name together.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247787741,
		"user" : {
			"login" : "tiilikainen"
		},
		"created_at" : "2016-09-17T16:48:32Z",
		"body" : "It's a plain text database for the `whatis` command, which prints a summary of commands whose names or descriptions contain whatever was passed into the command.\r\n\r\n````\r\n$ whatis rpm\r\nrpm(8)                   - RPM Package Manager\r\nrpm2cpio(8)              - Extract cpio archive from RPM Package Manager (RPM) package\r\nrpmbuild(8)              - Build RPM Package(s)\r\nrpmconstant(8)           - Provides RPM API constants\r\nrpmdeps(8)               - Generate RPM Package Dependencies\r\n$ whatis xz\r\nxz: nothing appropriate\r\n````\r\n\r\nNow if I `brew link --overwrite xz`:\r\n\r\n````\r\n$ whatis rpm\r\nrpm: nothing appropriate\r\n$ whatis xz\r\nxz(1), unxz(1), xzcat(1), lzma(1), unlzma(1), lzcat(1) - Compress or decompress .xz and .lzma files\r\nxzdec(1), lzmadec(1)     - Small .xz and .lzma decompressors\r\nxzless(1), lzless(1)     - view xz or lzma compressed (text) files\r\nxzmore(1), lzmore(1)     - view xz or lzma compressed (text) files\r\n```` ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247788095,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:53:43Z",
		"body" : "@tiilikainen I don't know about this `whatis` thing but I would imagine it works by dropping a big database that contains everything into `/usr/local/share/whatis`. If you need to somehow concatenate them together then it doesn't make sense. Was it designed specifically for Homebrew's cellar structure?\r\n\r\nCan you point me to its homepage?\r\n\r\nAlso, Unix has long had that `whatis` thing built in. It's called `apropos(1)`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247788825,
		"user" : {
			"login" : "tiilikainen"
		},
		"created_at" : "2016-09-17T17:00:36Z",
		"body" : "````\r\n#!/bin/sh\r\n#\r\n# apropos -- search the whatis database for keywords.\r\n# whatis  -- idem, but match only commands (as whole words).\r\n#\r\n# Copyright (c) 1990, 1991, John W. Eaton.\r\n# Copyright (c) 1994-1999, Andries E. Brouwer.\r\n#\r\n````\r\n\r\nThey both search the whatis database(s), which on my system at least are in /usr/share/man and /usr/local/share/man.\r\n\r\nThe problem with these homebrew packages is that they stomp on /usr/local/share/man/whatis, removing whatever version of the file previously existed and symlinking to a tiny whatis database containing only the commands that they install. They don't attempt to manage it like the shared resource that it is.\r\n\r\nIf you cat the file, you'll see that it's simply a lightly-structured text file. You could literally add entries onto it using shell redirection.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247789392,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T17:04:15Z",
		"body" : "Hmm for some reason I don't know about `whatis`. Weird. \r\n\r\nAnyway, given how it seems to interfere with our cellar infrastructure, I'm probably not going to use it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247790003,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T17:09:42Z",
		"body" : "@tiilikainen By the way I don't have time to look into what's exactly interfering with what here, ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247790049,
		"user" : {
			"login" : "tiilikainen"
		},
		"created_at" : "2016-09-17T17:10:05Z",
		"body" : "No problem. I appreciate the time you have taken to help me unbreak my brew installation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247790147,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T17:11:03Z",
		"body" : "Sorry, accidentally hit submit before I finished the comment. Please see updated version.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247790276,
		"user" : {
			"login" : "tiilikainen"
		},
		"created_at" : "2016-09-17T17:11:48Z",
		"body" : "Thanks again sir!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 983
	},
	{
		"id" : 247824023,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T04:05:11Z",
		"body" : "Reluctant üëç. I'm fond of Mavericks, but it's the right thing to do once Sierra public stable drops.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 985
	},
	{
		"id" : 247866363,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-18T18:59:13Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/985?src=pr) is 75.53% (diff: 0.00%)\n> Merging [#985](https://codecov.io/gh/Homebrew/brew/pull/985?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **0.27%**\n\n```diff\n@@             master       #985   diff @@\n==========================================\n  Files           360        360          \n  Lines         15543      15463    -80   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits          11697      11680    -17   \n+ Misses         3846       3783    -63   \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f4a8d28...1f6317b](https://codecov.io/gh/Homebrew/brew/compare/f4a8d28819f1fee73fcc63d08e70cb36eecdfb20...1f6317bdeb603784de1cc9ac8aae0931aa1d8b7f?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 985
	},
	{
		"id" : 247905176,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-19T03:19:48Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/985?src=pr) is 82.86% (diff: 100%)\n> Merging [#985](https://codecov.io/gh/Homebrew/brew/pull/985?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **7.60%**\n\n```diff\n@@             master       #985   diff @@\n==========================================\n  Files           360        340     -20   \n  Lines         15543      14116   -1427   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n  Hits          11697      11697           \n+ Misses         3846       2419   -1427   \n  Partials          0          0           \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f4a8d28...b383d95](https://codecov.io/gh/Homebrew/brew/compare/f4a8d28819f1fee73fcc63d08e70cb36eecdfb20...b383d953522a55898f6634e09ba66f9a89228a1a?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 985
	},
	{
		"id" : 247769533,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T13:26:45Z",
		"body" : "\"Watch\" means \"Subscribe\" in case anyone wonders.\r\n\r\n<img width=\"209\" alt=\"screen shot 2016-09-17 at 9 25 54 am\" src=\"https://cloud.githubusercontent.com/assets/4149852/18608499/d07031a2-7cb8-11e6-9b12-d470631a54c7.png\">\r\n\r\nPlease don't reply with üëç , me too, etc. Thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247780750,
		"user" : {
			"login" : "flokru"
		},
		"created_at" : "2016-09-17T15:22:58Z",
		"body" : "I am getting \r\n\r\n```\r\n$ brew update\r\nfatal: ambiguous argument 'refs/remotes/origin/master': unknown revision or path not in the working tree.\r\nUse '--' to separate paths from revisions, like this:\r\n'git <command> [<revision>...] -- [<file>...]'\r\nfatal: Couldn't find remote ref refs/heads/master\r\nError: Fetching /usr/local/Library/Taps/flokru/homebrew-self failed!\r\n```\r\n\r\nDon't know if this is relevant for this issue. I was recently updating brew which went fine, afterwards I got the git error message above while running `brew upgrade` on packages. The latter failed as it told me the package was not properly linked (`brew doctor` noticed the same). After linking, the upgrade worked. Now `brew update` is stuck as noticed above.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247781073,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T15:27:15Z",
		"body" : "@flokru It's not related because we haven't even started the migration (#963) yet.\r\n\r\nRe linking problem:\r\n\r\n```\r\n$ brew unlink $(brew ls)\r\n$ brew link $(brew ls)\r\n```\r\n\r\nAs for the update problem, could you\r\n\r\n```\r\n$ brew untap flokru/self\r\n$ brew tap flokru/self\r\n```\r\n\r\nand see if that helps?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247781859,
		"user" : {
			"login" : "flokru"
		},
		"created_at" : "2016-09-17T15:36:27Z",
		"body" : "Thanks, that helps. Actually my tap at https://github.com/flokru/homebrew-self is empty. I don't know when and why it got in there. Not tapping it after untapping helps. Sorry for the noise.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247795315,
		"user" : {
			"login" : "Cynlic"
		},
		"created_at" : "2016-09-17T18:20:23Z",
		"body" : "Hello, I'm not really a super literate brew user so I'm not sure how to address this but I think this is a similar error:\r\n\r\n```\r\n$ brew update \r\nError: No such file or directory - (../../../Cellar/autoconf/2.69, /usr/local/var/homebrew/linked/autoconf)\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247795735,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T18:26:41Z",
		"body" : "@Cynlic Run `brew update` twice and that should fix it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247865386,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-09-18T18:42:50Z",
		"body" : "Posting this (new) error message here, for general awareness:\r\n\r\n```\r\n$ brew install ansible\r\n==> Auto-updated Homebrew!\r\nUpdated Homebrew from 5654100 to f4a8d28.\r\nUpdated 1 tap (homebrew/core).\r\n==> Updated Formulae\r\nponyc\r\n\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nshare/man/man1/brew-cask.1: needs merge\r\nshare/man/man1/brew-cask.1: needs merge\r\nshare/man/man1/brew-cask.1: unmerged (483feec5ebfefa746c6f36d40a69965c56807986)\r\nshare/man/man1/brew-cask.1: unmerged (dd2bc133c7dccf4a7a1e7fc9960c61e3c60ae570)\r\nfatal: git-write-tree: error building trees\r\nCannot save the current index state\r\nError: Failure while executing: git -c user.email=brew-update@localhost -c user.name=brew\\ update stash save --include-untracked\r\nFailed to migrate HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nPlease comment with your (new) error in issue:\r\n  https://github.com/Homebrew/brew/issues/987\r\n/usr/local/Library/Homebrew/utils.rb:367:in `safe_system'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:211:in `block in migrate_legacy_repository_if_necessary'\r\n/usr/local/Library/Homebrew/extend/pathname.rb:328:in `block in cd'\r\n/usr/local/Library/Homebrew/extend/pathname.rb:328:in `chdir'\r\n/usr/local/Library/Homebrew/extend/pathname.rb:328:in `cd'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:210:in `migrate_legacy_repository_if_necessary'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:103:in `update_report'\r\n/usr/local/Library/Homebrew/brew.rb:99:in `<main>'\r\n==> Installing dependencies for ansible: libyaml\r\n==> Installing ansible dependency: libyaml\r\n==> Downloading https://homebrew.bintray.com/bottles/libyaml-0.1.6_1.el_capitan.bottle.tar.gz\r\n######################################################################## 100.0%\r\n==> Pouring libyaml-0.1.6_1.el_capitan.bottle.tar.gz\r\nüç∫  /usr/local/Cellar/libyaml/0.1.6_1: 8 files, 312.9K\r\n==> Installing ansible\r\n==> Downloading https://homebrew.bintray.com/bottles/ansible-2.1.1.0.el_capitan.bottle.1.tar.gz\r\n######################################################################## 100.0%\r\n==> Pouring ansible-2.1.1.0.el_capitan.bottle.1.tar.gz\r\nüç∫  /usr/local/Cellar/ansible/2.1.1.0: 9,928 files, 99.3M\r\n```\r\n\r\nThe list of installed Homebrew packages at the time of the error isn't large:\r\n\r\n```\r\n$ brew list\r\nansible\t\tcmake\t\tlibyaml\t\topenssl\t\tsqlcipher\txz\r\n```\r\n\r\nThings still seem to be working.  eg `brew list` works, as did both `brew remove` and `brew doctor` (without warnings) afterwards.\r\n\r\nThe error message itself though is kind of concerning. :wink:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247865904,
		"user" : {
			"login" : "rodrigues"
		},
		"created_at" : "2016-09-18T18:51:31Z",
		"body" : "Getting this problem also on the build of PR https://github.com/Homebrew/homebrew-core/pull/4945, sierra passed, elcapitan and yosemite failed with same problem:\r\n\r\n```shell\r\n[el_capitan] $ /bin/sh -xe /var/folders/03/jqjv4qms2b18_hwt2dcgsghc0000gp/T/hudson8974165171645172947.sh\r\n+ env\r\n+ grep JENKINS\r\n+ grep -iv cookie\r\nJENKINS_HOME=/Users/brew/Jenkins\r\nJENKINS_URL=https://bot.brew.sh/\r\n+ GIT_WORK_TREE=/usr/local\r\n+ GIT_DIR=/usr/local/.git\r\n+ git reset --hard origin/master\r\nHEAD is now at 59b7f16 Merge pull request #989 from MikeMcQuaid/rubocop-final\r\n+ brew update\r\nUpdated Homebrew from 59b7f16 to e204679.\r\nNo changes to formulae.\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nError: No such file or directory - (../Homebrew/bin/brew, /usr/local/bin/brew)\r\nFailed to migrate HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nPlease comment with your (new) error in issue:\r\n  https://github.com/Homebrew/brew/issues/987\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:349:in `symlink'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:349:in `block in ln_s'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1574:in `fu_each_src_dest0'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:347:in `ln_s'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:260:in `migrate_legacy_repository_if_necessary'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:103:in `update_report'\r\n/usr/local/Library/Homebrew/brew.rb:99:in `<main>'\r\nBuild step 'Execute shell' marked build as failure\r\nRecording test results\r\nERROR: Step ‚ÄòPublish JUnit test result report‚Äô failed: No test report files were found. Configuration error?\r\nArchiving artifacts\r\nStarted calculate disk usage of build\r\nFinished Calculation of disk usage of build in 0 seconds\r\nStarted calculate disk usage of workspace\r\nFinished Calculation of disk usage of workspace in  7 second\r\n[WS-CLEANUP] Deleting project workspace...[WS-CLEANUP] done\r\nFinished: FAILURE\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247866903,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T19:08:28Z",
		"body" : "@rodrigues You can ignore that, it's been addressed, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247867020,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T19:10:30Z",
		"body" : "@justinclift You need to resolve the Git conflicts/merges in your repository.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247867212,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-09-18T19:13:11Z",
		"body" : "@MikeMcQuaid You mean nuke my branches?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247867569,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-09-18T19:19:21Z",
		"body" : "@MikeMcQuaid I'm trying to figure out what the conflicts/merges are about.\r\n\r\n* There were several branches in git.  Thankfully, they were mostly just old stuff, so nuked them.\r\n* There were two git stashes left over from previous fighting with Homebrew.  Nuked those too.\r\n\r\nIt's still complaining with the same error message.  Any idea how to figure out what the problems it's complaining about are?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247867741,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T19:21:51Z",
		"body" : "@justinclift Actually, I may have a fix. Coming right up...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247867783,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-09-18T19:22:49Z",
		"body" : "Cool. :smile:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247868070,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T19:26:56Z",
		"body" : "@justinclift Try to `brew pull https://github.com/Homebrew/brew/pull/1020` and then `brew update` and it should sort you out. If not: post again in that PR, thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247868464,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-09-18T19:31:45Z",
		"body" : "Thanks @MikeMcQuaid, that worked. :smile:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247969610,
		"user" : {
			"login" : "krsmes"
		},
		"created_at" : "2016-09-19T11:33:16Z",
		"body" : "```\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nError: unknown file type: /usr/local/Caskroom/suspicious-package/latest/.fseventsd/00000000001a4b41\r\nFailed to migrate HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nPlease comment with your new error in issue or +1 an existing error:\r\n  https://github.com/Homebrew/brew/issues/987\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1375:in `copy'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:463:in `block in copy_entry'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1485:in `call'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1485:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1488:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1488:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1488:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1488:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:460:in `copy_entry'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:435:in `block in cp_r'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1558:in `block in fu_each_src_dest'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1574:in `fu_each_src_dest0'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1556:in `fu_each_src_dest'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:434:in `cp_r'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:235:in `migrate_legacy_repository_if_necessary'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:103:in `update_report'\r\n/usr/local/Library/Homebrew/brew.rb:99:in `<main>'\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247974454,
		"user" : {
			"login" : "viktorbenei"
		},
		"created_at" : "2016-09-19T12:00:41Z",
		"body" : "```\r\n$ brew install ...\r\n\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\n==> Migrated HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nHomebrew no longer needs to have ownership of /usr/local. If you wish you can\r\nreturn /usr/local to its default ownership with:\r\n  sudo chown root:wheel /usr/local\r\n/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby: No such file or directory -- /usr/local/Library/Homebrew/brew.rb (LoadError)\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247975564,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-09-19T12:07:12Z",
		"body" : "I just got the following (error on last line) after being migrated while trying to upgrade a formula:\r\n\r\n```\r\n$ brew upgrade postgresql\r\n==> Auto-updated Homebrew!\r\nUpdated Homebrew from 8e9a9b6 to 13f08a2.\r\nUpdated 3 taps (homebrew/core, homebrew/science, homebrew/versions).\r\n==> Updated Formulae\r\ngit-town                        homebrew/versions/gcc6          languagetool                    mg3a                            pkg-config ‚úî                    proof-general                 \r\n\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\n==> Migrated HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nHomebrew no longer needs to have ownership of /usr/local. If you wish you can\r\nreturn /usr/local to its default ownership with:\r\n  sudo chown root:wheel /usr/local\r\n/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby: No such file or directory -- /usr/local/Library/Homebrew/brew.rb (LoadError)\r\n```\r\n\r\nIs this just because the formula upgrade is trying to find `brew.rb` in the old location this one time, or some other harmless reason? Same command works fine now. `brew doctor` is fine and `git status` inside `/usr/local/Homebrew` says:\r\n```\r\nOn branch master\r\nnothing to commit, working tree clean\r\n```\r\nThanks",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247976328,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T12:11:19Z",
		"body" : "> Is this just because the formula upgrade is trying to find brew.rb in the old location this one time.\r\n\r\nProbably, rough edge I guess.\r\n\r\nDo you have any problem afterwards?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247976418,
		"user" : {
			"login" : "viktorbenei"
		},
		"created_at" : "2016-09-19T12:11:50Z",
		"body" : "TL;DR; for my and @MatzFan 's issue: `brew install X` fails if install performs the update, but `brew update && brew install X` works, as there `brew update` handles the migration correctly, and then `install` can proceed",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247976505,
		"user" : {
			"login" : "viktorbenei"
		},
		"created_at" : "2016-09-19T12:12:17Z",
		"body" : "This is mainly an issue in CI environment btw",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247976694,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T12:13:12Z",
		"body" : "I believe this is an issue of `install/upgrade` calling udpate first (without `HOMEBREW_NO_AUTO_UPDATE`, that is).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247976754,
		"user" : {
			"login" : "viktorbenei"
		},
		"created_at" : "2016-09-19T12:13:33Z",
		"body" : "correct @zmwangx ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247976939,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-09-19T12:14:32Z",
		"body" : "No issues @zmwangx . As per @viktorbenei's comment, seems any arg passed during `brew install` or `brew upgrade` is ignored if migration is triggered.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247977945,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T12:19:44Z",
		"body" : "@MatzFan Yeah, just as you said it was trying to find `brew.rb` in the old location (`brew install` without `HOMEBREW_NO_AUTO_UPDATE` runs update logic first which is in brew's bash layer, it then relays to the ruby layer for `install` which fails to find the file). This should only happen once and you shouldn't need to worry about it. We'll probably come up with a solution or warning for future folks though, thanks for the report.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247988888,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T13:12:12Z",
		"body" : "Working on a fix to the auto-update issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247992445,
		"user" : {
			"login" : "jjv"
		},
		"created_at" : "2016-09-19T13:27:12Z",
		"body" : "Ran out of disk space during migration. Now, everything *seems* to be ok but no way to be sure?! Are there some files left behind and forgotten? Is something not migrated correctly and failing later?\r\n\r\n    ==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\n    Error: No space left on device - write\r\n    Failed to migrate HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\n    Please comment with your new error in issue or +1 an existing error:\r\n    https://github.com/Homebrew/brew/issues/987\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1382:in `copy_stream'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1382:in `block (2 levels) in copy_file'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1381:in `open'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1381:in `block in copy_file'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1380:in `open'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1380:in `copy_file'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1348:in `copy'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:463:in `block in copy_entry'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1485:in `call'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1485:in `wrap_traverse'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1488:in `block in wrap_traverse'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `each'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `wrap_traverse'\r\n    [previous 3 lines repeated 5 times]\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:460:in `copy_entry'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:435:in `block in cp_r'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1558:in `block in fu_each_src_dest'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1574:in `fu_each_src_dest0'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1556:in `fu_each_src_dest'\r\n    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:434:in `cp_r'\r\n    /usr/local/Library/Homebrew/cmd/update-report.rb:235:in `migrate_legacy_repository_if_necessary'\r\n    /usr/local/Library/Homebrew/cmd/update-report.rb:103:in `update_report'\r\n    /usr/local/Library/Homebrew/brew.rb:99:in `<main>'",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247997253,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T13:46:01Z",
		"body" : "@jjv Have hopefully improved the messaging. Everything should be fine once you free up the disk-space and rerun `brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248000192,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T13:57:07Z",
		"body" : "@krsmes I've improved the error message but you'll need to resolve that yourself by deleting the relevant files causing the issues.\r\n@viktorbenei @MatzFan your issues should be fixed by https://github.com/Homebrew/brew/pull/1026 (now merged)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248000698,
		"user" : {
			"login" : "viktorbenei"
		},
		"created_at" : "2016-09-19T13:58:42Z",
		"body" : "Awesome, thank you @MikeMcQuaid !",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248001502,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T14:01:40Z",
		"body" : "@viktorbenei My pleasure, sorry for the pain. Shout if that doesn't resolve things for you or if you spot other issues, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248001808,
		"user" : {
			"login" : "viktorbenei"
		},
		"created_at" : "2016-09-19T14:02:51Z",
		"body" : "Sure, I definitely will, thanks again @MikeMcQuaid :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248008941,
		"user" : {
			"login" : "jjv"
		},
		"created_at" : "2016-09-19T14:27:49Z",
		"body" : "Previously failed/interrupted migration prevents new migration. `brew doctor` reports \"Your system is ready to brew.\" but no `/usr/local/Homebrew` exists after re-running `brew update`.\r\n\r\n    ==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\n    Error: /usr/local/Homebrew already exists.\r\n    Please remove it manually or uninstall and reinstall Homebrew into a new\r\n    location as the migration cannot be done automatically.\r\n\r\n    ‚ûú  mv /usr/local/Homebrew /usr/local/Homebrew_tmp\r\n\r\n    ‚ûú  brew update                                                                                               \r\n    Already up-to-date.\r\n\r\n    ‚ûú  ls -la /usr/local/Homebrew                                                                              \r\n    ls: /usr/local/Homebrew: No such file or directory",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248009223,
		"user" : {
			"login" : "viktorbenei"
		},
		"created_at" : "2016-09-19T14:28:43Z",
		"body" : "@MikeMcQuaid on MacOS systems where brew was not updated for a while the issue is still reproducable, a simple `brew install awscli` fails with:\r\n\r\n```\r\n+ brew install awscli\r\n==> Auto-updated Homebrew!\r\nUpdated Homebrew from ddafaae to c45119d.\r\nUpdated 1 tap (homebrew/core).\r\n==> New Formulae\r\nmpage\r\n==> Updated Formulae\r\naria2\r\nautoconf-archive\r\ncli53\r\nconvox\r\ncorectl\r\ncrystal-lang\r\ndigdag\r\nemacs\r\nerlang\r\nfio\r\nford\r\ngit-flow-avh\r\ngit-town\r\nhaskell-stack\r\nios-deploy\r\nlanguagetool\r\nlibstrophe\r\nmg3a\r\nntl\r\npkg-config\r\nponyc\r\npredictionio\r\nprometheus\r\nproof-general\r\nsdcv\r\nwxmac\r\nx264\r\nxorriso\r\nyara\r\n==> Deleted Formulae\r\npyqwt\r\nrsense\r\nsqsh\r\nyap\r\n\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\n==> Migrated HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nHomebrew no longer needs to have ownership of /usr/local. If you wish you can\r\nreturn /usr/local to its default ownership with:\r\n  sudo chown root:wheel /usr/local\r\n/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby: No such file or directory -- /usr/local/Library/Homebrew/brew.rb (LoadError)\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248029599,
		"user" : {
			"login" : "realgeek"
		},
		"created_at" : "2016-09-19T15:39:19Z",
		"body" : "On `brew update` I get:\r\n\r\n```\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nError: unknown file type: /usr/local/Caskroom/keepassx/2.0-alpha6/KeePassX.app/Contents/Resources/keepassx/.svn\r\nFailed to migrate HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nPlease comment with your new error in issue or +1 an existing error:\r\n  https://github.com/Homebrew/brew/issues/987\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1369:in `copy'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:463:in `block in copy_entry'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1479:in `call'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1479:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1482:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1482:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1482:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1482:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1482:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1482:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1482:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:460:in `copy_entry'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:435:in `block in cp_r'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1552:in `block in fu_each_src_dest'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1568:in `fu_each_src_dest0'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1550:in `fu_each_src_dest'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:434:in `cp_r'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:235:in `migrate_legacy_repository_if_necessary'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:103:in `update_report'\r\n/usr/local/Library/Homebrew/brew.rb:99:in `<main>'\r\n\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 987
	},
	{
		"id" : 248033226,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T15:52:01Z",
		"body" : "> @MikeMcQuaid CI - https://www.bitrise.io/ - AFAIK the only thing what might be \"strange\" is that the Ruby version of these stacks (Xcode 7.3 and older) is 2.2.4, installed from a tap ( https://github.com/bitrise-io/homebrew-pinned ), because at the time when these stacks were created CocoaPods (0.39) did not work with the latest (2.3) Ruby version, which was available in Homebrew\r\n\r\n@realgeek You'll need to delete the relevant files and run `brew update --force` again.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 987
	},
	{
		"id" : 248046552,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-19T16:38:21Z",
		"body" : "@realgeek what's the output of\r\n```\r\nls -le /usr/local/Caskroom/keepassx/2.0-alpha6/KeePassX.app/Contents/Resources/keepassx/.svn\r\nfile /usr/local/Caskroom/keepassx/2.0-alpha6/KeePassX.app/Contents/Resources/keepassx/.svn\r\nstat /usr/local/Caskroom/keepassx/2.0-alpha6/KeePassX.app/Contents/Resources/keepassx/.svn\r\nmdutil -t /usr/local/Caskroom/keepassx/2.0-alpha6/KeePassX.app/Contents/Resources/keepassx/.svn\r\nmdls /usr/local/Caskroom/keepassx/2.0-alpha6/KeePassX.app/Contents/Resources/keepassx/.svn\r\nxattr -l /usr/local/Caskroom/keepassx/2.0-alpha6/KeePassX.app/Contents/Resources/keepassx/.svn\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248051520,
		"user" : {
			"login" : "realgeek"
		},
		"created_at" : "2016-09-19T16:55:18Z",
		"body" : "@MikeMcQuaid @ilovezfs I'm not sure why, but some of the files and dirs of the KeepassX app were owned by root and some dirs did not have execute bits set. I suspect the app did something to its own installation after running (it was originally allowed to control the computer via Sysprefs/Security/Accessibility).\r\n\r\nOnce I chown'd, chmod'd that tree and also made /usr/local owned by me, I tried `brew update --force` but it complained about Homebrew already existing. I temporarily moved that dir out of the way, retried, and the migration was successful. Thanks for your help.\r\n\r\nAlso of note: One of my symlinks wasn't updated. `brew doctor` said that the /usr/local/bin/soffice link was broken. I manually pointed it to /usr/local/Homebrew/Caskroom/libreoffice/5.2.1/soffice.wrapper.sh.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248051591,
		"user" : {
			"login" : "juanfcocontreras"
		},
		"created_at" : "2016-09-19T16:55:28Z",
		"body" : "@MikeMcQuaid, same problem as @viktorbenei here:\r\n\r\n```\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\n==> Migrated HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nHomebrew no longer needs to have ownership of /usr/local. If you wish you can\r\nreturn /usr/local to its default ownership with:\r\n  sudo chown root:wheel /usr/local\r\n/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby: No such file or directory -- /usr/local/Library/Homebrew/brew.rb (LoadError)\r\n```\r\n\r\n`brew.sh` is in `/usr/local/Homebrew/Library/Homebrew`, not in `/usr/local/Library/Homebrew`\r\n\r\n`brew config` output:\r\n\r\n```\r\nHOMEBREW_VERSION: 0.9.9\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: 3ffb9a2f7cda6652f75cb0c59c6d079ab1039e94\r\nLast commit: 86 minutes ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 5ae1f185d9f24d5cc82f9524df7288297a3a0c74\r\nCore tap last commit: 56 minutes ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local/Homebrew\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: quad-core 64-bit broadwell\r\nHomebrew Ruby: 2.0.0-p648\r\nClang: 8.0 build 800\r\nGit: 2.8.4 => /Applications/Xcode.app/Contents/Developer/usr/bin/git\r\nPerl: /usr/bin/perl\r\nPython: /Users/user/anaconda/bin/python => /Users/user/anaconda/bin/python2.7\r\nRuby: /usr/bin/ruby => /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby\r\nJava: 1.8.0_102\r\nmacOS: 10.11.6-x86_64\r\nXcode: 8.0\r\nCLT: 7.3.1.0.1.1461711523\r\nX11: 2.7.9 => /opt/X11\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248055861,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T17:09:51Z",
		"body" : "> Also of note: One of my symlinks wasn't updated. brew doctor said that the /usr/local/bin/soffice link was broken. I manually pointed it to /usr/local/Homebrew/Caskroom/libreoffice/5.2.1/soffice.wrapper.sh.\r\n\r\nShould be fixed (or broken again üò≠) by https://github.com/Homebrew/brew/pull/1025.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248056243,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T17:11:06Z",
		"body" : "@juanfcocontreras @viktorbenei as a temporary workaround always run `brew update` first. Can you send me the output of whatever command you use but with `--debug --verbose` appended? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248058670,
		"user" : {
			"login" : "juanfcocontreras"
		},
		"created_at" : "2016-09-19T17:19:53Z",
		"body" : "Sure. I forgot to mention that while I got the same error as @viktorbenei (`/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby: No such file or directory -- /usr/local/Library/Homebrew/brew.rb (LoadError)\r\n,`) I can install packages without issues or needing to run `brew update` first.\r\n\r\nI attach `brew install awscli --debug --verbose` output.\r\n\r\n[output.txt](https://github.com/Homebrew/brew/files/480675/output.txt)\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248058808,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T17:20:22Z",
		"body" : "@juanfcocontreras Are you using a CI provider or any other way to repeatedly reproduce this? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248058931,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T17:20:49Z",
		"body" : "@juanfcocontreras And sorry that I wasn't clear: I need logs from a failing install.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248059640,
		"user" : {
			"login" : "juanfcocontreras"
		},
		"created_at" : "2016-09-19T17:23:20Z",
		"body" : "What is a CI provider? I'm using homebrew locally (if that is related to that question).\r\n\r\nSorry, but Homebrew seems to be working well, except for the `/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby: No such file or directory -- /usr/local/Library/Homebrew/brew.rb (LoadError)` error while updating.\r\n\r\nDo you think it could cause side effects in the future?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248060107,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T17:24:52Z",
		"body" : "@juanfcocontreras It won't cause issues in future, you're all good.\r\n\r\n@viktorbenei Any chance I could get access to a CI machine that you can reproduce this on?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248065869,
		"user" : {
			"login" : "viktorbenei"
		},
		"created_at" : "2016-09-19T17:44:26Z",
		"body" : "@MikeMcQuaid \"unfortunately\" not anymore - http://blog.bitrise.io/2016/09/19/quickfix-stack-update.html\r\n\r\nBut if you want it, we can manage to secure a VM for you with the state before the update",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248066196,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T17:45:30Z",
		"body" : "@viktorbenei Could you email me at mike@mikemcquaid.com? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248066638,
		"user" : {
			"login" : "viktorbenei"
		},
		"created_at" : "2016-09-19T17:47:00Z",
		"body" : "Sure, will do it in a minute",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248093217,
		"user" : {
			"login" : "nikolay"
		},
		"created_at" : "2016-09-19T19:14:27Z",
		"body" : "@MikeMcQuaid Some of us have tens of gigs in Homebrew. My MacBook Air has just a 256GB drive most of it used by the macOS itself. There's no easy way for all of us to free up a undefined amount of disk space! This migration should be made optional, not enforced like this, and ruin our busy Monday!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248094614,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T19:19:32Z",
		"body" : "@nikolay Sorry to hear that you're experiencing problems. However,\r\n\r\n1. \"This migration should be made optional\" doesn't make sense ‚Äî making it optional means 99% of users won't migrate;\r\n\r\n2. I'm pretty sure this is not the best attitude towards a group of volunteers who have spent and keep spending an undefined amount of free time trying to make your life a bit easier.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248097038,
		"user" : {
			"login" : "nikolay"
		},
		"created_at" : "2016-09-19T19:28:11Z",
		"body" : "@zmwangx Don't be so sensitive! Respect goes both ways. You should have the attitude of not twisting arms, but warning, giving deadlines to comply, and so on.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248098322,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T19:32:58Z",
		"body" : "@nikolay No, @zmwangx was not being sensitive, that's the attitude shared by most of our maintainers who have been working extremely hard on this issue and project. You can avoid applying this migration by not running `brew update` and setting the variable for auto-update and `git reset --hard`ing to an older revision.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248098492,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T19:33:34Z",
		"body" : "@nikolay Also, Homebrew has been around for quite a while, the team probably have learned more about rollouts and migrations than any armchair maintainer out there has.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248098977,
		"user" : {
			"login" : "nikolay"
		},
		"created_at" : "2016-09-19T19:35:18Z",
		"body" : "@zmwangx Ignoring the factor of available disk space does not speak highly about that migration experience.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248100576,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T19:41:16Z",
		"body" : "@nikolay @zmwangx Let's stop this conversation, it's not going anywhere. I've provided a workaround.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248102830,
		"user" : {
			"login" : "nikolay"
		},
		"created_at" : "2016-09-19T19:49:24Z",
		"body" : "@MikeMcQuaid Yup. I personally use `Ctrl`+`C` during `brew up`. So, you can ignore my points or take them into some consideration. Another suggestion: you can make it a part the issue template to sugarcoat the facts as some people can't take them sugar-free.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248103140,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T19:50:31Z",
		"body" : "@nikolay Please stop the verbal abuse (which helps no one) before we show you the door.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248112874,
		"user" : {
			"login" : "matthew-simoneau"
		},
		"created_at" : "2016-09-19T20:19:30Z",
		"body" : "```\r\n$ brew update\r\n```\r\n\r\nHere's what I see the first time:\r\n\r\n```\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nError: Failed to migrate HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nThe error was:\r\n  Operation not permitted - /usr/local/Library/Taps/caskroom/homebrew-cask/Casks/bittorrent.rb\r\nPlease try to resolve this error yourself and then run `brew update` again to\r\ncomplete the migration. If you need help please +1 an existing error or comment\r\nwith your new error in issue:\r\n  https://github.com/Homebrew/brew/issues/987\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1380:in `initialize'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1380:in `open'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1380:in `copy_file'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1348:in `copy'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:463:in `block in copy_entry'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1485:in `call'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1485:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1488:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1488:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1488:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1488:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:460:in `copy_entry'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:435:in `block in cp_r'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1558:in `block in fu_each_src_dest'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1574:in `fu_each_src_dest0'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1556:in `fu_each_src_dest'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:434:in `cp_r'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:231:in `migrate_legacy_repository_if_necessary'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:103:in `update_report'\r\n/usr/local/Library/Homebrew/brew.rb:99:in `<main>'\r\n```\r\nSecond time:\r\n```\r\nAlready up-to-date.\r\n```\r\nThen\r\n```\r\n$ brew upgrade node\r\n```\r\nThe output includes this error:\r\n```\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nError: /usr/local/Homebrew already exists.\r\nPlease remove it manually or uninstall and reinstall Homebrew into a new\r\nlocation as the migration cannot be done automatically.\r\n```\r\nIt seems to work anyway.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248113620,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T20:21:39Z",
		"body" : "@matthew-simoneau You need to `sudo chown -R $USER /usr/local; brew update --force`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248118769,
		"user" : {
			"login" : "matthew-simoneau"
		},
		"created_at" : "2016-09-19T20:38:59Z",
		"body" : "Thanks for your reply, @MikeMcQuaid.\r\n\r\nThat `chown -R` is unsettling, but the Internet confirms that's standard practice.\r\n\r\nI gave it a shot, but it didn't work:\r\n\r\n```\r\n$ sudo chown -R $USER /usr/local; brew update --force\r\nAlready up-to-date.\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nError: /usr/local/Homebrew already exists.\r\nPlease remove it manually or uninstall and reinstall Homebrew into a new\r\nlocation as the migration cannot be done automatically.\r\n```\r\nI guess I could try following the instructions in that error message and delete `/usr/local/Homebrew`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248121537,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T20:48:10Z",
		"body" : "@matthew-simoneau Yes, remove it manually and try again. FWIW permission changes like that should not be required as broadly again in future.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248150687,
		"user" : {
			"login" : "matthew-simoneau"
		},
		"created_at" : "2016-09-19T22:44:56Z",
		"body" : "```\r\n$ rm -rf /usr/local/Homebrew\r\n$ ls /usr/local/Homebrew\r\nls: /usr/local/Homebrew: No such file or directory\r\n$ sudo chown -R $USER /usr/local\r\n$ brew update --force\r\nUpdated 1 tap (caskroom/cask).\r\nNo changes to formulae.\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nError: Failed to migrate HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nThe error was:\r\n  Operation not permitted - /usr/local/Library/Taps/caskroom/homebrew-cask/Casks/bittorrent.rb\r\nPlease try to resolve this error yourself and then run `brew update` again to\r\ncomplete the migration. If you need help please +1 an existing error or comment\r\nwith your new error in issue:\r\n  https://github.com/Homebrew/brew/issues/987\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1380:in `initialize'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1380:in `open'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1380:in `copy_file'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1348:in `copy'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:463:in `block in copy_entry'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1485:in `call'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1485:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1488:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1488:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1488:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1488:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1487:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:460:in `copy_entry'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:435:in `block in cp_r'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1558:in `block in fu_each_src_dest'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1574:in `fu_each_src_dest0'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1556:in `fu_each_src_dest'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:434:in `cp_r'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:231:in `migrate_legacy_repository_if_necessary'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:103:in `update_report'\r\n/usr/local/Library/Homebrew/brew.rb:99:in `<main>'\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248614995,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T13:39:00Z",
		"body" : "Closing this out because it's quieted down but please keep reporting stuff in here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 248629333,
		"user" : {
			"login" : "ttomdewit"
		},
		"created_at" : "2016-09-21T14:28:19Z",
		"body" : "I've been unable to find the following error in previous comments:\r\n\r\n```\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nError: Failed to migrate HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nThe error was:\r\n  Permission denied - /usr/local/lib/pkgconfig\r\nPlease try to resolve this error yourself and then run `brew update` again to\r\ncomplete the migration. If you need help please +1 an existing error or comment\r\nwith your new error in issue:\r\n  https://github.com/Homebrew/brew/issues/987\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:245:in `mkdir'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:245:in `fu_mkdir'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:219:in `block (2 levels) in mkdir_p'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:217:in `reverse_each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:217:in `block in mkdir_p'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:203:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:203:in `mkdir_p'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:259:in `block in migrate_legacy_repository_if_necessary'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:258:in `each'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:258:in `migrate_legacy_repository_if_necessary'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:105:in `update_report'\r\n/usr/local/Library/Homebrew/brew.rb:99:in `<main>'\r\n```\r\n\r\nIf I do `brew` or `brew which` the following error is returned:\r\n```\r\nzsh: command not found: brew\r\n```\r\n\r\nThank you for looking into this!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 249238979,
		"user" : {
			"login" : "unluisco"
		},
		"created_at" : "2016-09-23T16:28:24Z",
		"body" : "this is my error:\r\n```\r\nbrew update --force\r\nAlready up-to-date.\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nError: /usr/local/Homebrew already exists.\r\nPlease remove it manually or uninstall and reinstall Homebrew into a new\r\nlocation as the migration cannot be done automatically.\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 249242600,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T16:43:52Z",
		"body" : "> Error: /usr/local/Homebrew already exists.\r\n> Please remove it manually or uninstall and reinstall Homebrew into a new\r\n> location as the migration cannot be done automatically.\r\n\r\nRemove that directory and then run `brew update --force` again (as the instructions suggest)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 249244774,
		"user" : {
			"login" : "unluisco"
		},
		"created_at" : "2016-09-23T16:53:02Z",
		"body" : "@MikeMcQuaid but and my packages?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 249245175,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-23T16:54:47Z",
		"body" : "@unluisco Your packages are in `/usr/local/Cellar`, not `/usr/local/Homebrew`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 249432811,
		"user" : {
			"login" : "antruongnguyen"
		},
		"created_at" : "2016-09-25T16:58:05Z",
		"body" : "This is my error:\r\n```\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nError: Failed to migrate HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nThe error was:\r\n  Permission denied - /usr/local/lib/pkgconfig\r\nPlease try to resolve this error yourself and then run `brew update` again to\r\ncomplete the migration. If you need help please +1 an existing error or comment\r\nwith your new error in issue:\r\n  https://github.com/Homebrew/brew/issues/987\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:245:in `mkdir'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:245:in `fu_mkdir'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:219:in `block (2 levels) in mkdir_p'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:217:in `reverse_each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:217:in `block in mkdir_p'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:203:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:203:in `mkdir_p'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:259:in `block in migrate_legacy_repository_if_necessary'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:258:in `each'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:258:in `migrate_legacy_repository_if_necessary'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:105:in `update_report'\r\n/usr/local/Library/Homebrew/brew.rb:99:in `<main>'\r\n```\r\n\r\nLater on when I type `brew update` it shows `-bash: /usr/local/bin/brew: No such file or directory`\r\n\r\nPlease help!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 249515698,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T08:58:01Z",
		"body" : "@antruongnguyen `sudo chown -R $USER /usr/local; ln -s /usr/local/Homebrew/bin/brew /usr/local/bin/brew; brew update --force` should sort you out.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 249516478,
		"user" : {
			"login" : "hmijail"
		},
		"created_at" : "2016-09-26T09:01:28Z",
		"body" : "Another error, and fix:\r\n```\r\n$ brew update\r\n/usr/local/Homebrew/Library/Homebrew/utils/lock.sh: line 19: /usr/local/var/homebrew/locks/update: Permission denied\r\n-e:1:in `initialize': Bad file descriptor (Errno::EBADF)\r\n\tfrom -e:1:in `new'\r\n\tfrom -e:1:in `<main>'\r\nError: Another active Homebrew process is already in progress.\r\nPlease wait for it to finish or terminate it to continue.\r\n```\r\n\r\nFix:\r\n```\r\n$ sudo chown -R $(whoami) /usr/local/var/homebrew/\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 249516695,
		"user" : {
			"login" : "hmijail"
		},
		"created_at" : "2016-09-26T09:02:27Z",
		"body" : "And yet another:\r\n```\r\nError: Permission denied - /usr/local/Caskroom/qlstephenMost likely, this means you have an outdated version of Homebrew-Cask. Please run:\r\n\r\n    brew uninstall --force brew-cask; brew untap phinze/cask; brew untap caskroom/cask; brew update; brew cleanup; brew cask cleanup\r\n```\r\n\r\nFix:\r\n```\r\nsudo chown -R $(whoami) /usr/local/Caskroom\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 249523264,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T09:33:40Z",
		"body" : "@hmijail If you know how to fix these issues you don't need to post them here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 249523968,
		"user" : {
			"login" : "hmijail"
		},
		"created_at" : "2016-09-26T09:37:03Z",
		"body" : "Sorry, was looking for the fixes here and then I realized the easy fix seemed to work OK. So I wrote them in case it helped someone else, or could get documented.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 249532276,
		"user" : {
			"login" : "driskell"
		},
		"created_at" : "2016-09-26T10:16:16Z",
		"body" : "When running `brew update` - it did it's usual thing and then:\r\n\r\n```\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nfatal: Unable to create '/usr/local/Homebrew/.git/index.lock': File exists.\r\n\r\nAnother git process seems to be running in this repository, e.g.\r\nan editor opened by 'git commit'. Please make sure all processes\r\nare terminated then try again. If it still fails, a git process\r\nmay have crashed in this repository earlier:\r\nremove the file manually to continue.\r\nError: Failed to migrate HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nThe error was:\r\n  Failure while executing: git checkout --force .\r\nPlease try to resolve this error yourself and then run `brew update` again to\r\ncomplete the migration. If you need help please +1 an existing error or comment\r\nwith your new error in issue:\r\n  https://github.com/Homebrew/brew/issues/987\r\n/usr/local/Library/Homebrew/utils.rb:360:in `safe_system'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:225:in `block in migrate_legacy_repository_if_necessary'\r\n/usr/local/Library/Homebrew/extend/pathname.rb:328:in `block in cd'\r\n/usr/local/Library/Homebrew/extend/pathname.rb:328:in `chdir'\r\n/usr/local/Library/Homebrew/extend/pathname.rb:328:in `cd'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:224:in `migrate_legacy_repository_if_necessary'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:105:in `update_report'\r\n/usr/local/Library/Homebrew/brew.rb:99:in `<main>'\r\n```\r\n\r\nI removed the lock file and ran `brew update` and then it said:\r\n\r\n```\r\nsed: .git/GITHUB_HEADERS: No such file or directory\r\nAlready up-to-date.\r\n```\r\n\r\nNow when I run again it just says `Already up-to-date` - and I'm left with a `/usr/local/Homebrew` containing nothing but a `.git` folder. Not sure how I migrate this manually as I really like the idea of tidying up `/usr/local`!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 249533786,
		"user" : {
			"login" : "driskell"
		},
		"created_at" : "2016-09-26T10:24:13Z",
		"body" : "I needed to run `brew update --force` to get it to run the migration again. Now all fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 250370495,
		"user" : {
			"login" : "malopezcruz"
		},
		"created_at" : "2016-09-29T04:58:47Z",
		"body" : "`````\r\n‚ûú  ~ brew update --force\r\nUpdated 1 tap (homebrew/core).\r\nNo changes to formulae.\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nError: /usr/local/Homebrew already exists.\r\nPlease remove it manually or uninstall and reinstall Homebrew into a new\r\nlocation as the migration cannot be done automatically.\r\n‚ûú  ~ rm -rf /usr/local/Homebrew\r\n‚ûú  ~ ls /usr/local/Homebrew\r\nls: /usr/local/Homebrew: No such file or directory\r\n‚ûú  ~ sudo chown -R $USER /usr/local\r\nPassword:\r\n‚ûú  ~ brew update --force\r\nUpdated 1 tap (homebrew/core).\r\nNo changes to formulae.\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nError: Failed to migrate HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nThe error was:\r\n  Permission denied - /usr/local/Library/Taps/homebrew/homebrew-versions/.git/objects/83/38d89c06dad15c3c008541527b2e289e7ced66.incompleteMigration\r\nPlease try to resolve this error yourself and then run `brew update` again to\r\ncomplete the migration. If you need help please +1 an existing error or comment\r\nwith your new error in issue:\r\n  https://github.com/Homebrew/brew/issues/987\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1374:in `initialize'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1374:in `open'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1374:in `copy_file'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1342:in `copy'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:463:in `block in copy_entry'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1479:in `call'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1479:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1482:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1482:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1482:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1482:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1482:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1482:in `block in wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `each'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1481:in `wrap_traverse'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:460:in `copy_entry'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:435:in `block in cp_r'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1552:in `block in fu_each_src_dest'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1568:in `fu_each_src_dest0'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1550:in `fu_each_src_dest'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:434:in `cp_r'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:234:in `migrate_legacy_repository_if_necessary'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:105:in `update_report'\r\n/usr/local/Library/Homebrew/brew.rb:99:in `<main>'\r\n``````\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 250386866,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-29T07:02:48Z",
		"body" : "@malopezcruz `brew untap homebrew/versions; brew tap homebrew/versions; brew update --force; brew update --force`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 251145493,
		"user" : {
			"login" : "spullara"
		},
		"created_at" : "2016-10-03T15:55:22Z",
		"body" : "samair11:~ sam$ brew update\r\nUpdated 4 taps (caskroom/cask, caskroom/versions, homebrew/core, homebrew/services).\r\n==> New Formulae\r\namqp-cpp\r\n==> Updated Formulae\r\ncastxml                                                                                                                   glide                                                                                                                     terminal-notifier                                                                                                       \r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nError: /usr/local/Homebrew already exists.\r\nPlease remove it manually or uninstall and reinstall Homebrew into a new\r\nlocation as the migration cannot be done automatically.\r\nsamair11:~ sam$",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 251146736,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T15:59:48Z",
		"body" : "> Please remove it manually or uninstall and reinstall Homebrew into a new\r\n> location as the migration cannot be done automatically.\r\n\r\n@spullara Do that or ask a more specific question if you're unsure, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 252510485,
		"user" : {
			"login" : "machale"
		},
		"created_at" : "2016-10-09T20:27:47Z",
		"body" : "I'm an infrequent brew user. For whatever reason today I ran a brew doctor which told me to do a brew update.  I did so, with this result:\r\n\r\n```\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nError: Failed to migrate HOMEBREW_REPOSITORY to /usr/local/Homebrew!\r\nThe error was:\r\n  File exists - (../Homebrew/bin/brew, /usr/local/bin/brew)\r\nPlease try to resolve this error yourself and then run `brew update` again to\r\ncomplete the migration. If you need help please +1 an existing error or comment\r\nwith your new error in issue:\r\n  https://github.com/Homebrew/brew/issues/987\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:349:in `symlink'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:349:in `block in ln_s'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1574:in `fu_each_src_dest0'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:347:in `ln_s'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:266:in `migrate_legacy_repository_if_necessary'\r\n/usr/local/Library/Homebrew/cmd/update-report.rb:107:in `update_report'\r\n/usr/local/Library/Homebrew/brew.rb:94:in `<main>'\r\n```\r\n\r\nNow **any** brew command I try yields this message:\r\n\r\n```\r\n$ brew\r\n/usr/local/bin/brew: line 47: /usr/local/Library/Homebrew/brew.sh: No such file or directory\r\n```\r\n\r\nI decided to try re-installing, but that didn't help:\r\n\r\n```\r\n$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\r\n==> This script will install:\r\n/usr/local/bin/brew\r\n/usr/local/share/doc/homebrew\r\n/usr/local/share/man/man1/brew.1\r\n/usr/local/share/zsh/site-functions/_brew\r\n/usr/local/etc/bash_completion.d/brew\r\n/usr/local/Homebrew\r\n\r\nPress RETURN to continue or any other key to abort\r\n==> Downloading and installing Homebrew...\r\nFrom https://github.com/Homebrew/brew\r\n x [deleted]         (none)     -> origin/master\r\nremote: Total 0 (delta 0), reused 0 (delta 0), pack-reused 0\r\nfatal: ambiguous argument 'origin/master': unknown revision or path not in the working tree.\r\nUse '--' to separate paths from revisions, like this:\r\n'git <command> [<revision>...] -- [<file>...]'\r\nFailed during: git reset --hard origin/master\r\n```\r\n\r\nAny ideas on how to proceed would be helpful.  Thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 252557275,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-10T08:11:45Z",
		"body" : "@machale Run  https://github.com/homebrew/install#uninstall-homebrew and try to install again. Sorry for the inconvenience.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 252815247,
		"user" : {
			"login" : "yeahdongcn"
		},
		"created_at" : "2016-10-11T05:08:53Z",
		"body" : "Installing homebrew to a new machine with `/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`\r\n\r\n\t\t==> Downloading and installing Homebrew...\r\n\t\tremote: Counting objects: 3397, done.\r\n\t\tremote: Compressing objects: 100% (2406/2406), done.\r\n\t\tremote: Total 3397 (delta 1557), reused 2171 (delta 855), pack-reused 0\r\n\t\tReceiving objects: 100% (3397/3397), 2.17 MiB | 618.00 KiB/s, done.\r\n\t\tResolving deltas: 100% (1557/1557), done.\r\n\t\tFrom https://github.com/Homebrew/brew\r\n\t\t * [new branch]      master     -> origin/master\r\n\t\t * [new tag]         0.1        -> 0.1\r\n\t\t * [new tag]         0.2        -> 0.2\r\n\t\t * [new tag]         0.3        -> 0.3\r\n\t\t * [new tag]         0.4        -> 0.4\r\n\t\t * [new tag]         0.5        -> 0.5\r\n\t\t * [new tag]         0.6        -> 0.6\r\n\t\t * [new tag]         0.7        -> 0.7\r\n\t\t * [new tag]         0.7.1      -> 0.7.1\r\n\t\t * [new tag]         0.8        -> 0.8\r\n\t\t * [new tag]         0.8.1      -> 0.8.1\r\n\t\t * [new tag]         0.9        -> 0.9\r\n\t\t * [new tag]         0.9.1      -> 0.9.1\r\n\t\t * [new tag]         0.9.2      -> 0.9.2\r\n\t\t * [new tag]         0.9.3      -> 0.9.3\r\n\t\t * [new tag]         0.9.4      -> 0.9.4\r\n\t\t * [new tag]         0.9.5      -> 0.9.5\r\n\t\t * [new tag]         0.9.8      -> 0.9.8\r\n\t\t * [new tag]         0.9.9      -> 0.9.9\r\n\t\t * [new tag]         1.0.0      -> 1.0.0\r\n\t\t * [new tag]         1.0.1      -> 1.0.1\r\n\t\t * [new tag]         1.0.2      -> 1.0.2\r\n\t\t * [new tag]         1.0.3      -> 1.0.3\r\n\t\t * [new tag]         1.0.4      -> 1.0.4\r\n\t\t * [new tag]         1.0.5      -> 1.0.5\r\n\t\t * [new tag]         1.0.6      -> 1.0.6\r\n\t\t * [new tag]         1.0.7      -> 1.0.7\r\n\t\t x [deleted]         (none)     -> origin/master\r\n\t\tfatal: ambiguous argument 'origin/master': unknown revision or path not in the working tree.\r\n\t\tUse '--' to separate paths from revisions, like this:\r\n\t\t'git <command> [<revision>...] -- [<file>...]'\r\n\t\tFailed during: git reset --hard origin/master\r\n\r\nand tried to uninstall and install it again as @MikeMcQuaid said, but got no success, any idea?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 252840911,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-11T08:04:32Z",
		"body" : "@yeahdongcn Apologies, this was a regression that's now fixed in https://github.com/Homebrew/install/pull/74. Please try again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 987
	},
	{
		"id" : 247782165,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-17T15:38:29Z",
		"body" : "CC @MikeMcQuaid \r\n\r\nSee failed Yosemite build here: https://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/7874/",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 990
	},
	{
		"id" : 247782711,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T15:41:59Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 990
	},
	{
		"id" : 247785688,
		"user" : {
			"login" : "nilstgmd"
		},
		"created_at" : "2016-09-17T16:18:02Z",
		"body" : "That is exactly what I need. üëç @ilovezfs ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 990
	},
	{
		"id" : 247785095,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:08:54Z",
		"body" : "Please `rm -rf /usr/local/Library/LinkedKegs` and that should get you back on your feet again. Sorry.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247785223,
		"user" : {
			"login" : "stonemirror"
		},
		"created_at" : "2016-09-17T16:10:39Z",
		"body" : "Thanks, but I'm receiving the same error:\r\n\r\n```\r\n<<mcfate::local>> $ rm -rf /usr/local/Library/LinkedKeg\r\n<<mcfate::local>> $ brew update\r\nError: Could not symlink bin/easy_install\r\nTarget /usr/local/bin/easy_install\r\nis a symlink belonging to python. You can unlink it:\r\n  brew unlink python\r\n\r\nTo force the link and overwrite all conflicting files:\r\n  brew link --overwrite python3\r\n\r\nTo list all files that would be deleted:\r\n  brew link --overwrite --dry-run python3\r\n<<mcfate::local>> $\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247785263,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:11:14Z",
		"body" : "Please attach `--debug` to `brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247785340,
		"user" : {
			"login" : "enriquefernandez"
		},
		"created_at" : "2016-09-17T16:12:14Z",
		"body" : "I was having a similar issue and just run `rm -rf /usr/local/Library/LinkedKegs`\r\n\r\nWhat is that supposed to do?\r\nDo I need to \"refix\" that somehow?\r\n\r\nI don't think I've updated Xcode, so I don't really know why this happened...\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247785465,
		"user" : {
			"login" : "stonemirror"
		},
		"created_at" : "2016-09-17T16:14:22Z",
		"body" : "I've posted a gist of the debug output [here](https://gist.github.com/stonemirror/ba24e9cdf851ddc63bce1d8a470afb2c)...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247785598,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:16:46Z",
		"body" : "@enriquefernandez\r\n\r\nFirst, did that fix the problem for you?\r\n\r\nWe're migrating `/usr/local/Library/LinkedKegs` to `/usr/local/var/homebrew/linked` (and `/usr/local/Library/PinnedKegs` to `/usr/local/var/homebrew/pinned` for that matter) and unfortunately there were bugs in migration code that had done damage that is hard to remedy within brew without a lot of complication.\r\n\r\n> rm -rf /usr/local/Library/LinkedKegs\r\n> \r\n> What is that supposed to do?\r\n\r\nBlow away the old directory that somehow failed to migrate.\r\n\r\n> Do I need to \"refix\" that somehow?\r\n\r\nYou may need to `brew unlink $(brew ls); brew link $(brew ls)` to restore keg links in `/usr/local/var/homebrew/linked` (ignore the keg-only warnings).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247785823,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:20:04Z",
		"body" : "@stonemirror Could you try `cd /usr/local; git fetch; git reset --hard origin/master`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247786015,
		"user" : {
			"login" : "publicarray"
		},
		"created_at" : "2016-09-17T16:22:48Z",
		"body" : "@zmwangx thanks that worked. It did fail on rake and python for some reason. I fixed it by reinstalling them.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247786261,
		"user" : {
			"login" : "stonemirror"
		},
		"created_at" : "2016-09-17T16:26:28Z",
		"body" : "Okay, I seem to be getting closer to something that's working; I got an `Already up-to-date` response from `brew update` and I'm running a `brew upgrade` now, which seems to be working. I think I may have to uninstall and reinstall python3, but that's do-able.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247786278,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:26:43Z",
		"body" : "@publicarray Those appear to be conflicting files from multiple formulae. For instance, in OP's case, `python3` is trying to link its `bin/easy_install` while it should only have `bin/easy_install-3.5`, so I'm not exactly sure what's going on. Maybe not the latest version; or maybe it was built with some not heavily-tested options.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247786381,
		"user" : {
			"login" : "enriquefernandez"
		},
		"created_at" : "2016-09-17T16:28:14Z",
		"body" : "It partially solved my issues. Brew commands now work and I can update and install new things.\r\n\r\nWhen running `brew unlink $(brew ls); brew link $(brew ls)` I'm getting errors about homebrew not being able to create symlinks.\r\n\r\nExample:\r\n\r\n```\r\nError: Could not symlink lib/pkgconfig/eigen3.pc\r\nTarget /usr/local/lib/pkgconfig/eigen3.pc\r\nalready exists. You may want to remove it:\r\n  rm '/usr/local/lib/pkgconfig/eigen3.pc'\r\n\r\nTo force the link and overwrite all conflicting files:\r\n  brew link --overwrite eigen\r\n\r\nTo list all files that would be deleted:\r\n  brew link --overwrite --dry-run eigen\r\n```\r\n\r\nAfter running `brew link --overwrite --dry-run eigen` now I'm getting the same with  `gfortran`:\r\n\r\n```\r\nError: Could not symlink bin/gfortran\r\nTarget /usr/local/bin/gfortran\r\nis a symlink belonging to gcc. You can unlink it:\r\n  brew unlink gcc\r\n\r\nTo force the link and overwrite all conflicting files:\r\n  brew link --overwrite gfortran\r\n\r\nTo list all files that would be deleted:\r\n  brew link --overwrite --dry-run gfortran\r\n```\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247786433,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:28:58Z",
		"body" : "@stonemirror Good to hear, let us know if you're hitting other errors (other than conflicting links, which usually means you either have stale links that you could safely remove, or for some reason you have conflicting files from multiple formulae, which you should try to resolve by reinstalling the formula at question first).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247786564,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:30:43Z",
		"body" : "@enriquefernandez Yeah unfortunately you have to resolve them one at a time, each time followed by a rerun of `brew link $(brew ls)`.\r\n\r\n`brew list | xargs -n1 brew link` might help ease the process (you only need to run that once), but you'll need to pick out the errors from a stream of output and resolve them.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247786666,
		"user" : {
			"login" : "enriquefernandez"
		},
		"created_at" : "2016-09-17T16:32:13Z",
		"body" : "Solved! (sorry, updated my previous comment before seeing your reply)\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247786674,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:32:25Z",
		"body" : "@enriquefernandez As for `gfortran` in particular, it's a stale formula you have and you should probably just `brew uninstall --force gfortran`. It's now provided as part of gcc.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247786704,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:32:46Z",
		"body" : "@enriquefernandez Glad to hear.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247786920,
		"user" : {
			"login" : "stonemirror"
		},
		"created_at" : "2016-09-17T16:35:41Z",
		"body" : "Yeah, I've uninstalled and reinstalled python3 after my science/opencv upgrade failed, and rerun the `brew upgrade --all`. Seems to be working again, or at least the problems at this point seem to be OpenCV's, not Homebrew's... üòÜ \r\n\r\nI'll close this, thanks for the help, @zmwangx!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247787640,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:46:55Z",
		"body" : "Let's leave this open for a while actually for visibility.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247787640,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T16:46:55Z",
		"body" : "Let's leave this open for a while actually for visibility.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 991
	},
	{
		"id" : 247789450,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T17:04:34Z",
		"body" : "https://github.com/Homebrew/brew/pull/992 or similar will hopefully address this case a bit better.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247789628,
		"user" : {
			"login" : "publicarray"
		},
		"created_at" : "2016-09-17T17:06:09Z",
		"body" : "It might be beneficial to change the title from \"since Xcode update\" to LinkedKegs move or something similar to avoid comment confusion with #972",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247790702,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T17:16:12Z",
		"body" : "Edited title to uncouple from Xcode update.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247994964,
		"user" : {
			"login" : "ashfurrow"
		},
		"created_at" : "2016-09-19T13:37:22Z",
		"body" : "Running `brew update` twice fixed it for me (was seeing this on CI), thanks @zmwangx for adding that solution to the top of the discussion :+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 248058803,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T17:20:21Z",
		"body" : "Affected folks have probably sought (and hopefully found) help already. Closing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 991
	},
	{
		"id" : 247793332,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-17T17:50:28Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/992?src=pr) is 75.53% (diff: 0.00%)\n> Merging [#992](https://codecov.io/gh/Homebrew/brew/pull/992?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@             master       #992   diff @@\n==========================================\n  Files           360        360          \n  Lines         15463      15465     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits          11681      11681          \n- Misses         3782       3784     +2   \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [390bcf4...72cf159](https://codecov.io/gh/Homebrew/brew/compare/390bcf413bd3bfa69b1663a37f71665b190da0eb...72cf159707a4856dad810e617416a2062ccdb759?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 992
	},
	{
		"id" : 247789307,
		"user" : {
			"login" : "ymg"
		},
		"created_at" : "2016-09-17T17:03:43Z",
		"body" : "I have managed to fix it using the following command:\r\n\r\n`rm -rf /usr/local/Library/LinkedKegs`\r\n\r\nAfter that I had to link around 23 packages manually üò•\r\n\r\nThank you",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 993
	},
	{
		"id" : 247793505,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T17:52:15Z",
		"body" : "Sorry, we're dealing with the fallout of a botched migration process in this very second. You might have success with https://github.com/Homebrew/brew/issues/991#issuecomment-247785095.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 994
	},
	{
		"id" : 247795329,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T18:20:34Z",
		"body" : "Please run `brew update --debug` twice.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 995
	},
	{
		"id" : 247795619,
		"user" : {
			"login" : "kpashka"
		},
		"created_at" : "2016-09-17T18:24:54Z",
		"body" : "@zmwangx Sorry, I've accidentally fixed this by running:\r\n\r\n```\r\nmkdir -p /usr/local/var/homebrew/linked\r\nln -s /usr/local/bin/ansible /usr/local/var/homebrew/linked/ansible\r\nbrew unlink ansible\r\n```\r\n\r\nI've tried to rollback to previous error state by deleting symlink, but can't reproduce it now, everything works correctly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 995
	},
	{
		"id" : 247795715,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T18:26:27Z",
		"body" : "Good to hear, sorry about breaking things. For reference what you hit was #991.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 995
	},
	{
		"id" : 247795399,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T18:21:36Z",
		"body" : "Please try to run `brew update --debug` twice and report your findings.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 996
	},
	{
		"id" : 247795600,
		"user" : {
			"login" : "Mishail"
		},
		"created_at" : "2016-09-17T18:24:42Z",
		"body" : "here is output for `brew update --debug`: http://pastebin.com/H5LQwhhF\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 996
	},
	{
		"id" : 247795880,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T18:29:07Z",
		"body" : "What if you run it **twice**, i.e., can you run it a second time?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 996
	},
	{
		"id" : 247795989,
		"user" : {
			"login" : "Mishail"
		},
		"created_at" : "2016-09-17T18:31:07Z",
		"body" : "@zmwangx trust me, I've executed those multiple times. Anyway 295e937 has fixed the problem",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 996
	},
	{
		"id" : 247796367,
		"user" : {
			"login" : "Mishail"
		},
		"created_at" : "2016-09-17T18:37:18Z",
		"body" : "#991 ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 996
	},
	{
		"id" : 247795423,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T18:22:02Z",
		"body" : "Please run `brew update --debug` twice and report your findings.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 997
	},
	{
		"id" : 247795580,
		"user" : {
			"login" : "johnib"
		},
		"created_at" : "2016-09-17T18:24:30Z",
		"body" : "`brew update --debug`:\r\n\r\nhttp://pastebin.com/6dUf3NXM",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 997
	},
	{
		"id" : 247795658,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T18:25:36Z",
		"body" : "If I'm not mistaken, that's not twice right?\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 997
	},
	{
		"id" : 247795710,
		"user" : {
			"login" : "johnib"
		},
		"created_at" : "2016-09-17T18:26:24Z",
		"body" : "@zmwangx what do you mean by \"twice\" ? the command had run once.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 997
	},
	{
		"id" : 247795789,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T18:27:35Z",
		"body" : "My theory was if you run `brew update --debug` followed by another `brew update --debug` the problem should resolve itself.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 997
	},
	{
		"id" : 247795837,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T18:28:21Z",
		"body" : "(`--debug` isn't necessary, but if it still doesn't work I want to see what it's doing.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 997
	},
	{
		"id" : 247795922,
		"user" : {
			"login" : "johnib"
		},
		"created_at" : "2016-09-17T18:29:46Z",
		"body" : "Hmm.. I had actually run it twice. the pastebin contains the logs of the later invocation.\r\n\r\nBUT! after executing it again, it works.\r\nThat's weird... ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 997
	},
	{
		"id" : 247795953,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T18:30:16Z",
		"body" : "Sorry for the pain, glad it works.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 997
	},
	{
		"id" : 247795959,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-17T18:30:33Z",
		"body" : "We pushed the fix only a few minutes ago.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 997
	},
	{
		"id" : 247827995,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-18T06:06:57Z",
		"body" : "I'm not sure I understand what this involves.  If this means that the \"non-developer\" who does `brew update` won't receive an update unless a new tag has been made since their last update, then I don't think this is a good idea.\r\n\r\nReason: Suppose a user files an issue and some fix is made in the brew repo.  But no new tag is created.  Then we can't just tell users \"do `brew update` and try again\"; we'd have to say \"set `HOMEBREW_DEVELOPER` and then do `brew update` and try again\" (or \"run a dev-cmd and then `brew update` and then try again).  Besides being windy, that's just asking for user confusion.  If to avoid this new tags are created frequently, this also seems like not a good idea.  (Just wait until some tagged commit has to be reverted, etc.)\r\n\r\nApologies if I've misunderstood what this PR does.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 247828296,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T06:15:23Z",
		"body" : "> If this means that the \"non-developer\" who does brew update won't receive an update unless a new tag has been made since their last update, then I don't think this is a good idea.\r\n\r\nWe've had a couple quite widespread breakages recently (including the linked kegs migration debacle today of which we're still dealing with the fallout) we definitely need to be more careful at upgrading all users to master.\r\n\r\nAdding a `homebrew_developer?` check to every feature then remove it after a while doesn't scale.\r\n\r\nWe didn't say how often tags will be made by the way.\r\n\r\n> we'd have to say \"set HOMEBREW_DEVELOPER and then do brew update and try again\" \r\n\r\n```\r\n$ HOMEBREW_DEVELOPER=1 brew update\r\n```\r\n\r\nWhat's so difficult about that.\r\n\r\n> that's just asking for user confusion.\r\n\r\nSlight user confusion when communicating to a single user or a few users is better than \"no-commands-run\" for thousands of users (which happened today, or yesterday depending on where you are).\r\n\r\n> (Just wait until some tagged commit has to be reverted, etc.)\r\n\r\nReverting a tagged commit has no effect on that tag. We don't force push here. I don't see how it's worse than reverting a commit on the master branch when users are updated to the master branch.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 247845760,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-18T12:46:48Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/998?src=pr) is 75.41% (diff: 100%)\n\n\n> No coverage report found for **master** at 59b7f16.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [59b7f16...5bbeb4f](https://codecov.io/gh/Homebrew/brew/compare/59b7f16bfd9c1968aae0a2f1cd9a43d3d160d99f...5bbeb4f0454747585a9cb142e253ee4c6d2d58b9?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 247845977,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T12:51:55Z",
		"body" : "> Then we can't just tell users \"do brew update and try again\"; we'd have to say \"set HOMEBREW_DEVELOPER and then do brew update and try again\" (or \"run a dev-cmd and then brew update and then try again). Besides being windy, that's just asking for user confusion.\r\n\r\nReally this is a question/debate about rolling release vs. tagged release software development approaches. I agree the tag approach would not make sense for taps (for now, at least) but except for when we've broken something with another change it's extremely rare that there are user fixes that we need to rapidly make changes to fix. In those cases, we can push them out more quickly to `HOMEBREW_DEVELOPER`s and, if things look good after a few days, make a tag.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 247856434,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-18T16:07:53Z",
		"body" : "I like the idea of \"tagged release\" for brew internals.  Very much so.  I just was doubtful about the implementation of putting it behind HOMEBREW_DEVELOPER.\r\n\r\nInstead of having to tell users to do `HOMEBREW_DEVELOPER=1 brew update`, there should perhaps  be a new flag for `update`.  I don't know what the name would be, but something like `brew update --rolling` or something.\r\n\r\n> What's so difficult about that.\r\n\r\nIt's longer and it looks weird to the sort of newbies who are prone to getting confused.\r\n\r\n> Slight user confusion when communicating to a single user or a few users is better than \"no-commands-run\" for thousands of at least many users (which happened today, or yesterday depending on where you are).\r\n\r\nThere aren't just these two possibilities.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 247856579,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T16:10:31Z",
		"body" : "@chdiza It's behind `HOMEBREW_DEVELOPER` or if you've ever run a `dev-cmd`. We may iterate on the approach but this will be the one we start with.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 248620297,
		"user" : {
			"login" : "mgol"
		},
		"created_at" : "2016-09-21T13:57:49Z",
		"body" : "This broke my setup. I had updated to d5b6ecf about 5-6 hours ago via `brew update && brew upgrade`. I installed the s3cmd package 30 minutes ago with the following output:\r\n```\r\n$ brew install s3cmd\r\nChecking out v1.0.0 in /usr/local/Homebrew...\r\nTo checkout master in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout master\r\nAuto packing the repository in background for optimum performance.\r\nSee \"git help gc\" for manual housekeeping.\r\nChecking out v1.0.0 in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core run:\r\n  'cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.0' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.0' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.0\r\n==> Downloading https://homebrew.bintray.com/bottles/s3cmd-1.6.1.el_capitan.bottle.tar.gz\r\n######################################################################## 100.0%\r\n==> Pouring s3cmd-1.6.1.el_capitan.bottle.tar.gz\r\nüç∫  /usr/local/Cellar/s3cmd/1.6.1: 59 files, 784.4K\r\n```\r\n\r\nThese messages worried me so I invoked `brew update`:\r\n```\r\n$  brew update\r\nAuto packing the repository in background for optimum performance.\r\nSee \"git help gc\" for manual housekeeping.\r\nerror: The last gc run reported the following. Please correct the root cause\r\nand remove .git/gc.log.\r\nAutomatic cleanup will not be performed until the file is removed.\r\n\r\nwarning: There are too many unreachable loose objects; run 'git prune' to remove them.\r\n\r\nChecking out v1.0.0 in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask run:\r\n  'cd /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.0' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.0' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.0\r\nChecking out v1.0.0 in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core run:\r\n  'cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.0' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.0' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.0\r\nAlready up-to-date.\r\n+ brew upgrade --all\r\nAuto packing the repository in background for optimum performance.\r\nSee \"git help gc\" for manual housekeeping.\r\nerror: The last gc run reported the following. Please correct the root cause\r\nand remove .git/gc.log.\r\nAutomatic cleanup will not be performed until the file is removed.\r\n\r\nwarning: There are too many unreachable loose objects; run 'git prune' to remove them.\r\n\r\nChecking out v1.0.0 in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask run:\r\n  'cd /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.0' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.0' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.0\r\nChecking out v1.0.0 in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core run:\r\n  'cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.0' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.0' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.0\r\n```\r\n\r\nThis happened every time so I went into `/usr/local/Homebrew` and invoked `git prune` & `git gc` & `git fsck` and repeated `brew update`:\r\n\r\n```\r\n$ Checking out v1.0.0 in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask run:\r\n  'cd /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.0' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.0' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.0\r\nChecking out v1.0.0 in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core run:\r\n  'cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.0' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.0' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.0\r\nAlready up-to-date.\r\n+ brew upgrade --all\r\nChecking out v1.0.0 in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask run:\r\n  'cd /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.0' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.0' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.0\r\nChecking out v1.0.0 in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core run:\r\n  'cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.0' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.0' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.0\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 248621943,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T14:03:44Z",
		"body" : "@mgol Can I see the output of `cd $(brew --repo) && git config homebrew.devcmdrun`? Also, can you try to `brew pull https://github.com/Homebrew/brew/pull/1060 && brew update --force` and see how that behaves? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 248622338,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T14:05:04Z",
		"body" : "@mgol and also, actually, `echo HOMEBREW_DEVELOPER: $HOMEBREW_DEVELOPER`. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 248625026,
		"user" : {
			"login" : "mgol"
		},
		"created_at" : "2016-09-21T14:14:23Z",
		"body" : "This:\r\n```\r\ncd $(brew --repo) && git config homebrew.devcmdrun\r\n```\r\ncds to `/usr/local/Homebrew` and prints nothing.\r\n\r\nThis:\r\n```\r\nbrew pull https://github.com/Homebrew/brew/pull/1060 && brew update --force\r\n```\r\nresulted in:\r\n```\r\nrew pull https://github.com/Homebrew/brew/pull/1060 && brew update --force\r\nWarning: Current branch is v1.0.0: do you need to pull inside master?\r\n==> Fetching patch \r\nPatch: https://github.com/Homebrew/brew/pull/1060.patch\r\n==> Applying patch\r\nApplying: update.sh: tweak tag handling.\r\n==> Patch closes issue #1060\r\n==> Patch changed:\r\n Library/Homebrew/cmd/update.sh | 8 ++++++--\r\n 1 file changed, 6 insertions(+), 2 deletions(-)\r\nUpdated Homebrew from d5b6ecf to 09e0b09.\r\nUpdated 2 taps (caskroom/cask, homebrew/core).\r\n==> Updated Formulae\r\nantigen               fzf                   gupnp                 ipfs                  offlineimap           sonar-runner        \r\naws-sdk-cpp           global                imagemagick           khard                 reposurgeon         \r\n```\r\n\r\nAnd now `brew update && brew upgrade` behaves normally.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 248625147,
		"user" : {
			"login" : "mgol"
		},
		"created_at" : "2016-09-21T14:14:54Z",
		"body" : "About the last bit:\r\n```\r\n$ echo HOMEBREW_DEVELOPER: $HOMEBREW_DEVELOPER\r\nHOMEBREW_DEVELOPER:\r\n```\r\n\r\nSo it's empty.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 248628274,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T14:24:50Z",
		"body" : "@mgol Thanks, will üö¢ https://github.com/Homebrew/brew/pull/1060 to fix this shortly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 248695805,
		"user" : {
			"login" : "hkdobrev"
		},
		"created_at" : "2016-09-21T18:12:02Z",
		"body" : "Just my 2 cents on tag handling - Composer did a very nice thing when going stable. They have 3 update channels:\r\n\r\n- `stable` is the default and updates only to stable releases (following semver)\r\n- `preview` updates to any tag including `alpha`, `beta` and `rc` tags according to semver\r\n- `snapshot` updates to latest `master`.\r\n\r\nThe other nice thing is that once you update with a specific channel it keeps you on that channel and it explicitly stays what channel it uses the next time you update. This is really nicely working for Composer, not sure if it'd be good for Homebrew.\r\n\r\nIn short I really like the use of non-stable and stable tags which Composer does and hope Homebrew does something like that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 248707718,
		"user" : {
			"login" : "jtsom"
		},
		"created_at" : "2016-09-21T18:54:14Z",
		"body" : "So how do I get Homebrew to update from 1.0.0 to 1.0.1? `brew update` just says I'm up to date.\r\n\r\nI did get the `fatal: Cannot update paths and switch to branch 'v1.0.1' at the same time.` message, but I can't get 1.0.1 now. Short of nuking the whole thing (which I don't want to have to reinstall all my packages), what's the solutions?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 248729234,
		"user" : {
			"login" : "holybit"
		},
		"created_at" : "2016-09-21T20:13:53Z",
		"body" : "In my case it seems as if Homebrew updated correctly to `1.0.1` but the brew command doesn't seem to be showing the correct version?\r\n\r\n```bash\r\n$ brew update\r\nChecking out v1.0.1 in /usr/local/Homebrew...\r\nTo checkout v1.0.1 in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout v1.0.1\r\nAlready up-to-date.\r\n$ cd /usr/local/Homebrew && git checkout v1.0.1\r\nAlready on 'v1.0.1'\r\n$ brew --version\r\nHomebrew 1.0.0 (git revision a381b; last commit 2016-09-21)\r\nHomebrew/homebrew-core (git revision 48e0; last commit 2016-09-21)\r\n$ cd /usr/local/Homebrew\r\n$ git show-ref --tags | tail -2\r\nd5b6ecfc5078041ddf5f61b259c57f81d5c50fcc refs/tags/1.0.0\r\na381b597d3ebf40887b50657df269d867a209eb7 refs/tags/1.0.1\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 248828731,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T07:08:42Z",
		"body" : "> but the brew command doesn't seem to be showing the correct version?\r\n\r\nIgnore this, it was me being an idiot and not remembering to bump the version number in the output.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 998
	},
	{
		"id" : 247810809,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T22:02:38Z",
		"body" : "There's been several commits since then if you rerun `brew update`. This was fixed in https://github.com/Homebrew/brew/commit/295e937f270826aef4e64f0056950a948e3502b1. Sorry!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 999
	},
	{
		"id" : 247810809,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-17T22:02:38Z",
		"body" : "There's been several commits since then if you rerun `brew update`. This was fixed in https://github.com/Homebrew/brew/commit/295e937f270826aef4e64f0056950a948e3502b1. Sorry!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 999
	},
	{
		"id" : 247819293,
		"user" : {
			"login" : "causlayer"
		},
		"created_at" : "2016-09-18T01:58:58Z",
		"body" : "The same problemÔºåopen terminalÔºö\r\nError: undefined method `downcase' for #<Pathname:pyside>\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/usr/local/Library/Homebrew/formulary.rb:349:in `core_path'\r\n/usr/local/Library/Homebrew/formulary.rb:301:in `loader_for'\r\n/usr/local/Library/Homebrew/formulary.rb:219:in `factory'\r\n/usr/local/Library/Homebrew/utils.rb:637:in `rescue in rescue in block in migrate_legacy_keg_symlinks_if_necessary'\r\n/usr/local/Library/Homebrew/utils.rb:634:in `rescue in block in migrate_legacy_keg_symlinks_if_necessary'\r\n/usr/local/Library/Homebrew/utils.rb:631:in `block in migrate_legacy_keg_symlinks_if_necessary'\r\n/usr/local/Library/Homebrew/utils.rb:629:in `each'\r\n/usr/local/Library/Homebrew/utils.rb:629:in `migrate_legacy_keg_symlinks_if_necessary'\r\n/usr/local/Library/Homebrew/brew.rb:91:in `<main>'",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1000
	},
	{
		"id" : 247823944,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T04:02:34Z",
		"body" : "Thanks for the helpful report, #1003 should fix this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1000
	},
	{
		"id" : 247824473,
		"user" : {
			"login" : "causlayer"
		},
		"created_at" : "2016-09-18T04:19:35Z",
		"body" : "@zmwangx Thank you,My problem has been solved.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1000
	},
	{
		"id" : 247824522,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T04:21:49Z",
		"body" : "@causlayer You mean without #1003?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1000
	},
	{
		"id" : 247828413,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-18T06:18:33Z",
		"body" : "https://github.com/Homebrew/brew/pull/1003 has shipped. Please update, and this should be fixed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1000
	},
	{
		"id" : 247830142,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-18T07:00:05Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/1001?src=pr) is 83.57% (diff: 100%)\n> Merging [#1001](https://codecov.io/gh/Homebrew/brew/pull/1001?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **8.06%**\n\n```diff\n@@             master      #1001   diff @@\n==========================================\n  Files           360        340     -20   \n  Lines         15469      13977   -1492   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n+ Hits          11680      11681      +1   \n+ Misses         3789       2296   -1493   \n  Partials          0          0           \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [c419f92...28d78c7](https://codecov.io/gh/Homebrew/brew/compare/c419f928ba5d152fc41a8abc8f33f88bfe3e1971...28d78c74fc9e0256978116c4aed7a2bfadcb35bf?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1001
	},
	{
		"id" : 247831290,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T07:25:06Z",
		"body" : "Does depend on the active developer directory?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1001
	},
	{
		"id" : 247831296,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T07:25:14Z",
		"body" : "i.e. `xcode-select --print-path`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1001
	},
	{
		"id" : 247831880,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-18T07:38:00Z",
		"body" : "No ... developer directory is the default \r\n```\r\niMac-TMP:local joe$ xcode-select --print-path\r\n/Applications/Xcode.app/Contents/Developer\r\n```\r\n\r\nWithout this PR, or an equivalent change, you get `false` from the existing code if both Xcode and CLT are installed since 7 < 8 for the CLT.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1001
	},
	{
		"id" : 247832013,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T07:41:02Z",
		"body" : "@ilovezfs Sorry, I mean: what if it's not the default and it's pointing to the CLT? ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1001
	},
	{
		"id" : 247832520,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-18T07:52:39Z",
		"body" : "current code without PR:\r\nfalse clt only\r\nfalse clt + xcode, xcode-select pointing at xcode\r\nfalse clt + xocde, xcode-select pointing at clt\r\n\r\nwith PR:\r\nfalse clt only\r\ntrue clt + xcode, xcode-select pointing at xcode\r\ntrue clt + xcode, xcode-select pointing at clt",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1001
	},
	{
		"id" : 247834904,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-18T08:41:57Z",
		"body" : "also I imagine this code is probably preferable\r\n```\r\n    if MacOS::Xcode.installed? && MacOS::Xcode.version >= \"8.0\"\r\n        return true\r\n    end\r\n\r\n    if MacOS::CLT.version && MacOS::CLT.version >= \"8.0\"\r\n      return true\r\n    end\r\n    false\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1001
	},
	{
		"id" : 247835032,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-18T08:44:39Z",
		"body" : "Interestingly, with or without this PR, having your xcode-select pointing at `/Library/Developer/CommandLineTools` with both Xcode and CLT installed dies in a ball of flames:\r\n```\r\n==> ./configure --prefix=/usr/local/Cellar/ffmpeg/3.1.3 --enable-shared --enable-pthreads --enable-gpl --enable-version3 --enable-hardcoded-tables --enable-avresample --cc=clang --host-cflags= --host-ldflags= --enable-opencl --enable-libx264 --enable-libmp3lame --enable-libxvid --disable-lzma --enable-vda\r\nclang is unable to create an executable file.\r\nIf clang is a cross-compiler, use the --enable-cross-compile option.\r\nOnly do this if you know what cross compiling means.\r\nC compiler test failed.\r\n\r\nIf you think configure made a mistake, make sure you are using the latest\r\nversion from Git.  If the latest version fails, report the problem to the\r\nffmpeg-user@ffmpeg.org mailing list or IRC #ffmpeg on irc.freenode.net.\r\nInclude the log file \"config.log\" produced by configure as this will help\r\nsolve the problem.\r\n/usr/local/Homebrew/Library/Homebrew/debrew.rb:11:in `raise'\r\nBuildError: Failed executing: ./configure --prefix=/usr/local/Cellar/ffmpeg/3.1.3 --enable-shared --enable-pthreads --enable-gpl --enable-version3 --enable-hardcoded-tables --enable-avresample --cc=clang --host-cflags= --host-ldflags= --enable-opencl --enable-libx264 --enable-libmp3lame --enable-libxvid --disable-lzma --enable-vda\r\n1. raise\r\n2. ignore\r\n3. backtrace\r\n4. irb\r\n5. shell\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1001
	},
	{
		"id" : 247837373,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-18T09:33:22Z",
		"body" : "@MikeMcQuaid in any case, since there seems to be some hesitation here I may just go with the ridiculous fix for now\r\n```\r\n    inreplace [\"libavdevice/v4l2.c\", \"libavutil/time.c\"], \"HAVE_CLOCK_GETTIME\",\r\n                                                          \"POKEMON\"\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1001
	},
	{
		"id" : 247837769,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T09:42:09Z",
		"body" : "Recent Pokemon games have clock gettime too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1001
	},
	{
		"id" : 247837879,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-18T09:44:10Z",
		"body" : "Ah, then we can do\r\n```\r\ndiff --git a/Formula/ffmpeg.rb b/Formula/ffmpeg.rb\r\nindex 1b60d4b..4c03701 100644\r\n--- a/Formula/ffmpeg.rb\r\n+++ b/Formula/ffmpeg.rb\r\n@@ -91,6 +91,12 @@ class Ffmpeg < Formula\r\n   end\r\n \r\n   def install\r\n+    # Fixes \"dyld: lazy symbol binding failed: Symbol not found: _clock_gettime\"\r\n+    if MacOS.version == \"10.11\" && MacOS::Xcode.installed? && MacOS::Xcode.version >= \"8.0\"\r\n+      inreplace %w[libavdevice/v4l2.c libavutil/time.c], \"HAVE_CLOCK_GETTIME\",\r\n+                                                         \"UNDEFINED_GIBBERISH\"\r\n+    end\r\n+\r\n     args = %W[\r\n       --prefix=#{prefix}\r\n       --enable-shared\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1001
	},
	{
		"id" : 247838888,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-18T10:06:06Z",
		"body" : ":green_apple: but since this will make no_weak_imports actually work without breaking 10.11, and therefore encourage its use ...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1001
	},
	{
		"id" : 247839983,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-09-18T10:33:38Z",
		"body" : "Checking the CLT and/or Xcode version is probably not the best solution when checking for linker flag support. The problem is that this feature depends on a sufficiently recent `ld64` (the project behind the static linker `ld`); for `-no_weak_imports` it's version 274 or newer to be precise.\r\n\r\nHowever, the static linker is rarely invoked directly and most often via some frontend like `clang`, `gcc`, etc. The problem here is that it's not always obvious which frontend will pick which version of `ld` (and from where). E.g. who can immediately answer what a Homebrew-provided GCC will use? (Spoiler: I cannot.) The first safe thing I can think of is to do trial compilations (`autoconf` style), but that's hardly a satisfying solution.\r\n\r\n> Interestingly, with or without this PR, having your xcode-select pointing at `/Library/Developer/CommandLineTools` with both Xcode and CLT installed dies in a ball of flames:\r\n\r\nThat's a problem we might want to address and that is explained by the above paragraph. Though this should be a transient issue that only arises now because we've ended up in a situation where CLT and Xcode versions don't match (thanks Apple!), something we don't usually have.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1001
	},
	{
		"id" : 247840168,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-18T10:38:41Z",
		"body" : "Things we've learned today which may or may not change at a later date:\r\n1. no one should be using ENV.no_weak_imports at this point\r\n2. anyone with Xcode 8 and CLT 7.3.1 should `sudo xcode-select -r` if they set it to the CLT.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1001
	},
	{
		"id" : 247825710,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-18T05:00:44Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/1002?src=pr) is 83.47% (diff: 100%)\n> Merging [#1002](https://codecov.io/gh/Homebrew/brew/pull/1002?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **7.96%**\n\n```diff\n@@             master      #1002   diff @@\n==========================================\n  Files           360        340     -20   \n  Lines         15469      13995   -1474   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n+ Hits          11680      11682      +2   \n+ Misses         3789       2313   -1476   \n  Partials          0          0           \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [c419f92...1b3be4a](https://codecov.io/gh/Homebrew/brew/compare/c419f928ba5d152fc41a8abc8f33f88bfe3e1971...1b3be4a369619c59886afc41af5b919d91d86578?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1002
	},
	{
		"id" : 247844615,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T12:22:38Z",
		"body" : "What's the output if you omit `--silent` like? I'm agreed with hiding this for < 80 characters but I wonder if silent is what we want instead.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1002
	},
	{
		"id" : 247891011,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T23:33:34Z",
		"body" : "If you omit both `--silent` and `--progress-bar`, then you get the big multi-line progress meter, which also seems to be output for a fixed 80 column width, and screws up on narrow terminals.\r\n\r\n<img width=\"557\" alt=\"screen shot 2016-09-18 at 7 25 56 pm\" src=\"https://cloud.githubusercontent.com/assets/2618447/18619921/ff5ccf48-7dd5-11e6-90e4-fdccd0b51c9b.png\">\r\n\r\nAnd I think that's all of our output options for `curl`.\r\n\r\nI'm going to report this upstream, too. But there's zero chance of us getting a fix for it since we're using the system `curl`, which won't be updated until a new ~~OS X~~ macOS release.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1002
	},
	{
		"id" : 247929228,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T07:45:57Z",
		"body" : "@apjanke Hmm, I'm not convinced silence is better than the current behaviour. A lot of tools barf if you have <80 characters so I think it may be better to just leave this as-is; it's been Homebrew (and Curl) behaviour for a very long time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1002
	},
	{
		"id" : 247929281,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T07:46:18Z",
		"body" : "Also worth noting: we optimise all our user-output messages for 80 characters so they will all wrap weirdly/unreadably also.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1002
	},
	{
		"id" : 248837904,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-22T08:06:20Z",
		"body" : "I think this might be a case to make an exception. Most of the other wide `brew` output will just wrap one line, which is a little ugly but fine. `curl` redraws the progress bar many times during a download, so if it's wrapping it can spam up your whole terminal window. I don't think `brew` has anything else that does that.\r\n\r\nI don't feel strongly either way; I'm fine withdrawing this if I'm in the minority here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1002
	},
	{
		"id" : 248838464,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T08:09:34Z",
		"body" : "IMO printing many lines (not everyone has a problem with that) is much better than printing nothing. Especially since it's been that way for a long time. If you suddenly suppress progress information with this semi-random terminal width cutoff, brew will feel broken to some extent, especially when downloading something large, say the GLC bottle.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1002
	},
	{
		"id" : 248844228,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T08:41:55Z",
		"body" : "> If you suddenly suppress progress information with this semi-random terminal width cutoff, brew will feel broken to some extent, especially when downloading something large, say the GHC bottle.\r\n\r\nA good point üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1002
	},
	{
		"id" : 248845413,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-22T08:48:11Z",
		"body" : "Fair enough. Closing this as withdrawn.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1002
	},
	{
		"id" : 247826466,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-18T05:24:40Z",
		"body" : "why wasn't that formula previously failing for the same reason?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1003
	},
	{
		"id" : 247826512,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T05:25:43Z",
		"body" : "@ilovezfs Which formula?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1003
	},
	{
		"id" : 247826565,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-18T05:26:43Z",
		"body" : "https://github.com/Homebrew/brew/issues/1000 why is that just now coming up as an issue? Was there a change made elsewhere or something?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1003
	},
	{
		"id" : 247826583,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T05:27:23Z",
		"body" : "Not sure what you mean, this is just part of our linked kegs migration debacle.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1003
	},
	{
		"id" : 247826740,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-18T05:30:57Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/1003?src=pr) is 83.57% (diff: 100%)\n> Merging [#1003](https://codecov.io/gh/Homebrew/brew/pull/1003?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **8.06%**\n\n```diff\n@@             master      #1003   diff @@\n==========================================\n  Files           360        340     -20   \n  Lines         15469      13976   -1493   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n  Hits          11680      11680           \n+ Misses         3789       2296   -1493   \n  Partials          0          0           \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [c419f92...58b17a0](https://codecov.io/gh/Homebrew/brew/compare/c419f928ba5d152fc41a8abc8f33f88bfe3e1971...58b17a0cfc34adf2213e18b1f277c52a89407e64?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1003
	},
	{
		"id" : 247827124,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-18T05:42:01Z",
		"body" : "ah, ok",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1003
	},
	{
		"id" : 247827138,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-18T05:42:34Z",
		"body" : ":+1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1003
	},
	{
		"id" : 247831144,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T07:22:38Z",
		"body" : "Thanks for the quick turnaround you two üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1003
	},
	{
		"id" : 247824449,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T04:18:49Z",
		"body" : "One bummer: requirements like MinimumMacOS have specific version numbers attached to them, but they're not included in the output yet. How much do we care about this?\r\n\r\n<img width=\"620\" alt=\"screen shot 2016-09-18 at 12 17 09 am\" src=\"https://cloud.githubusercontent.com/assets/2618447/18612870/73d728e2-7d35-11e6-8290-4adc41eaca08.png\">\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 247825121,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T04:40:57Z",
		"body" : "I've added another commit with a `display_s` method in `Requirement`. (`display` for \"thing to display to users\"; `_s` for \"string\", which seems to be a conventional Ruby suffix.) Implemented it for the `:java`, `:ruby`, `:perl`, `language_module`, `minimum_macos` and `maximum_macos` requirements.\r\n\r\nOutput examples:\r\n\r\n```\r\n==> Requirements\r\nRecommended: ruby = 1.8 ‚úî\r\n\r\n==> Requirements\r\nRequired: ruby = 1.8 ‚úî, pygments.rb => :ruby ‚úò\r\n\r\n==> Requirements\r\nOptional: x11 ‚úî, perl = 5.5 ‚úî\r\n\r\n==> Requirements\r\nRequired: lpeg => :lua ‚úò, luaexpat => :lua ‚úò, luafilesystem => :lua ‚úò\r\n\r\n==> Requirements\r\nRequired: java = 1.7+ ‚úî\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 247825703,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T05:00:28Z",
		"body" : "Amended to improve readability of min/max OS X requirements.\r\n\r\n```\r\n==> Requirements\r\nRequired: MinimumMacOS = 10.7 ‚úî\r\n\r\n==> Requirements\r\nRequired: MaximumMacOS = 10.6 ‚úò\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 247825926,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T05:08:34Z",
		"body" : "For testing, here's formulae to try out. They exercise the various requirements and their options.\r\n\r\n```\r\nphantomjs\r\nvalgrind\r\nlibstfl\r\nsile\r\nsbt\r\nimagemagick\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 247825976,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T05:10:04Z",
		"body" : "Nit: I think \"optional requirements\"\r\n\r\n```\r\n==> Requirements\r\nOptional: x11\r\n```\r\n\r\nare very very weird...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 247825994,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T05:10:34Z",
		"body" : "Not sure we can do any better though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 247826086,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T05:13:21Z",
		"body" : "Hah. Yeah, that does sound weird. (Especially because that means the default is a \"required requirement\"?)  But I think that's a consequence of the terminology Homebrew has already chosen. Probably better to make this just a UI change that sticks with the established wording for now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 247826170,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T05:15:27Z",
		"body" : "Got a better word than \"requirements\"?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 247826282,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T05:19:01Z",
		"body" : "Been thinking about it a bit, and so far, no. Anything I've come up with is too technical-sounding.\r\n\r\nPlus, changing that word now would mean a more extensive code change. Would rather just make this UI change as is, and figure out a better word later after discussion with everyone, if it matters.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 247826418,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T05:23:08Z",
		"body" : "> changing that word now would mean a more extensive code change\r\n\r\nI was just thinking about a better word to stick in\r\n\r\n```\r\n==> _______\r\nRequired: MinimumMacOS = 10.7 ‚úî\r\nOptional: x11\r\n```\r\n\r\nbut can't think of anything either.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 247828846,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-18T06:30:37Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/1004?src=pr) is 83.50% (diff: 100%)\n> Merging [#1004](https://codecov.io/gh/Homebrew/brew/pull/1004?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@             master      #1004   diff @@\n==========================================\n  Files           340        340          \n  Lines         13976      13999    +23   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          11680      11690    +10   \n- Misses         2296       2309    +13   \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7926114...7dd7e81](https://codecov.io/gh/Homebrew/brew/compare/79261148e633e8802797bf32830ab525df33df82...7dd7e81dd101e4ac4bc67bb80663ee6a0076f5d9?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 247832191,
		"user" : {
			"login" : "Eitot"
		},
		"created_at" : "2016-09-18T07:45:22Z",
		"body" : "Why the distinction between dependencies and requirements?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 247832597,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T07:54:40Z",
		"body" : "That's a good question!\r\n\r\nIn Homebrew-speak, a Dependency is a dependency on another specific formula that can be installed by Homebrew; it's pretty simple. And a Requirement is a dependency on something that can be provided from outside Homebrew, or satisfied in multiple ways, like `:x11` being provided by XQuartz, or Perl being installed, or a minimum/maximum version of OS X or Xcode, or even another formula being installed with particular language options.\r\n\r\nThis is why zmwangx and I were talking about the wording for this stuff; It's not immediately clear. We're interested in suggestions on how to word this more intuitively or document it better.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 247832775,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-18T07:57:53Z",
		"body" : "Put another way: Dependencies are things that `brew` can take care of automatically for you, and Requirements are things that you will (probably) have to deal with manually yourself.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 247893679,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-19T00:22:39Z",
		"body" : "Addressed Mike's review. Now the displays look like this.\r\n\r\n```\r\n==> Requirements\r\nBuild: git ‚úî, xcode ‚úî\r\nRequired: macOS >= 10.7 ‚úî\r\n\r\n==> Requirements\r\nRequired: macOS >= 10.6 ‚úî, macOS <= 10.11 ‚úî\r\n\r\n==> Requirements\r\nRecommended: ruby >= 1.8 ‚úî\r\n\r\n==> Requirements\r\nRequired: lpeg => :lua ‚úò, luaexpat => :lua ‚úò, luafilesystem => :lua ‚úò\r\n\r\n==> Requirements\r\nRequired: java >= 1.6 ‚úî\r\n\r\n==> Requirements\r\nOptional: x11 ‚úî, perl >= 5.5 ‚úî\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 247927128,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T07:32:01Z",
		"body" : "> Required: lpeg => :lua ‚úò, luaexpat => :lua ‚úò, luafilesystem => :lua ‚úò\r\n\r\nThis is the only bit that still reads a bit weird. Maybe `lpeg (lua)` or even `lpeg (lua module)`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 248839054,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-22T08:13:11Z",
		"body" : "Yeah, I think `lpeg (lua module)` reads better. Amended to do so.\r\n\r\nNow displays as:\r\n\r\n```\r\n$ brew info sile\r\nsile: stable 0.9.4, HEAD\r\n...\r\n==> Requirements\r\nRequired: lpeg (lua module) ‚úò, luaexpat (lua module) ‚úò, luafilesystem (lua module) ‚úò\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 249369687,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:12:59Z",
		"body" : "üëç when üíö; a few style complaints currently.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1004
	},
	{
		"id" : 249804546,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:48:22Z",
		"body" : "Thanks @apjanke!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1004
	},
	{
		"id" : 247827452,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T05:52:41Z",
		"body" : "Same issue as #1000, tracking there. We're working on a fix, sorry for the pain. It would be great if you could test to see if #1003 works for you.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1005
	},
	{
		"id" : 247828401,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-18T06:18:19Z",
		"body" : "https://github.com/Homebrew/brew/pull/1003 has shipped. Please update, and this should be fixed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1005
	},
	{
		"id" : 247833378,
		"user" : {
			"login" : "Moddus"
		},
		"created_at" : "2016-09-18T08:10:10Z",
		"body" : "Thank you so much!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1005
	},
	{
		"id" : 247842140,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T11:24:00Z",
		"body" : "> their final release\r\n\r\nWhat, did they say this will be their final release? Or do you mean \"their latest release\"?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1006
	},
	{
		"id" : 247842605,
		"user" : {
			"login" : "dragonpaw"
		},
		"created_at" : "2016-09-18T11:34:45Z",
		"body" : "Fair point. It's the release from last year which was the only release we've seen from them since 2013. Regardless, getting a version with ssl support into Brew would be nice.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1006
	},
	{
		"id" : 247842769,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T11:38:15Z",
		"body" : "> Fair point.\r\n\r\nI was not making a point, I was asking a question...\r\n\r\nIf it's the final release, I would seriously consider boneyarding it. Carrying unsupported software isn't nice, and this one is among the \"used by almost no one\" camp anyway according to our analytics.\r\n\r\nIf they did not say it's the final release, then sure.\r\n\r\nCan you try to open a PR?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1006
	},
	{
		"id" : 247842832,
		"user" : {
			"login" : "dragonpaw"
		},
		"created_at" : "2016-09-18T11:39:50Z",
		"body" : "Sorry but I'm not in a position to do the work myself. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1006
	},
	{
		"id" : 247842985,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T11:43:27Z",
		"body" : "Is there any difficulty? It should be [pretty easy](https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md). Homebrew relies on contributions to thrive; we as a small team can't maintain thousands of packages on our own.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1006
	},
	{
		"id" : 247843201,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T11:48:41Z",
		"body" : "Closing the issue because we don't keep this sort of requests open. Someone, either you or one of us, should open a PR, and that's the only way forward in Homebrew land.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1006
	},
	{
		"id" : 247851855,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T14:47:17Z",
		"body" : "@UniqMartin @bfontaine Struggling to get the `.rubocop_todo.yml` working as expected. Any thoughts/help would be welcome.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1008
	},
	{
		"id" : 247864820,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-09-18T18:34:04Z",
		"body" : "> Struggling to get the `.rubocop_todo.yml` working as expected. Any thoughts/help would be welcome.\r\n\r\nCan you be more specific what the problem is? I think what you might be referring to is that it isn't taken into account, which is to be expected as it isn't loaded automagically. You have to add an `inherit_from:` line to the main configuration file as explained in [the documentation](http://rubocop.readthedocs.io/en/latest/configuration/#automatically-generated-configuration).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1008
	},
	{
		"id" : 247867424,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T19:16:51Z",
		"body" : "> Can you be more specific what the problem is? I think what you might be referring to is that it isn't taken into account, which is to be expected as it isn't loaded automagically. You have to add an inherit_from: line to the main configuration file as explained in the documentation.\r\n\r\n@UniqMartin `brew style` does not read from that file. It was added already to the main configuration file: https://github.com/MikeMcQuaid/brew/blob/aeaf1f01437d025d821ea407fc03d778217101f4/Library/.rubocop.yml#L1\r\n\r\nWhat I'm looking for is `brew style` to return `0` which should be the case after this PR but doesn't seem to be.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1008
	},
	{
		"id" : 247867455,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T19:17:20Z",
		"body" : "All feedback addressed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1008
	},
	{
		"id" : 247868470,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-09-18T19:31:54Z",
		"body" : "> `brew style` does not read from that file. It was added already to the main configuration file:\r\n\r\nApologies, I missed that. You can introspect what configuration files are loaded (and in what stage) by passing `--debug` to the `rubocop` invocation.\r\n\r\n> What I'm looking for is `brew style` to return `0` which should be the case after this PR but doesn't seem to be.\r\n\r\nDoes it return with exit code zero locally? Does a plain `rubocop` invocation in `Library/Homebrew` exit with a zero return code?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1008
	},
	{
		"id" : 247873623,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T20:11:36Z",
		"body" : "\r\n\r\n> Does it return with exit code zero locally? Does a plain rubocop invocation in Library/Homebrew exit with a zero return code?\r\n\r\nNeither do.\r\n\r\n> Apologies, I missed that. You can introspect what configuration files are loaded (and in what stage) by passing --debug to the rubocop invocation.\r\n\r\n```\r\nFor /Users/mike/Documents/Homebrew/Library/Homebrew: configuration from /Users/mike/Documents/Homebrew/Library/.rubocop.yml\r\nInheriting configuration from /Users/mike/Documents/Homebrew/Library/.rubocop_todo.yml\r\nDefault configuration from /Users/mike/.gem/ruby/2.0.0/gems/rubocop-0.41.2/config/default.yml\r\nInheriting configuration from /Users/mike/.gem/ruby/2.0.0/gems/rubocop-0.41.2/config/enabled.yml\r\nInheriting configuration from /Users/mike/.gem/ruby/2.0.0/gems/rubocop-0.41.2/config/disabled.yml\r\nAllCops/Exclude configuration from /Users/mike/.rubocop.yml\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1008
	},
	{
		"id" : 247879511,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-09-18T21:08:15Z",
		"body" : "It affects those cops that have an `Exclude` in both `.rubocop.yml` and `.rubocop_todo.yml`. Problem is the load order of the configuration files and that `Exclude`s aren't merged but override each other. (That's also why `rubocop --auto-gen-config` copied existing `Exclude`s from `.rubocop.yml` when generating `.rubocop_todo.yml`.)\r\n\r\nThe most elegant solution I found for this is the following `.rubocop.yml` file:\r\n\r\n```yaml\r\ninherit_from:\r\n  - .rubocop_real.yml\r\n  - .rubocop_todo.yml\r\n\r\nAllCops:\r\n  TargetRubyVersion: 2.0\r\n  Exclude:\r\n    - 'Homebrew/cask/**/*'\r\n    - 'Homebrew/vendor/**/*'\r\n    - 'Homebrew/test/vendor/**/*'\r\n```\r\n\r\nAnd `.rubocop_real.yml` contains the rest of what previously resided in `.rubocop.yml` (modulo the `inherit_from:` and the `AllCops:` elements).\r\n\r\nAfter making these changes:\r\n\r\n```console\r\n$ rubocop --debug -DES\r\nFor /opt/brewery/dummy/Library/Homebrew: configuration from /opt/brewery/dummy/Library/.rubocop.yml\r\nInheriting configuration from /opt/brewery/dummy/Library/.rubocop_real.yml\r\nDefault configuration from /Users/martin/.gem/ruby/2.0.0/gems/rubocop-0.41.2/config/default.yml\r\nInheriting configuration from /Users/martin/.gem/ruby/2.0.0/gems/rubocop-0.41.2/config/enabled.yml\r\nInheriting configuration from /Users/martin/.gem/ruby/2.0.0/gems/rubocop-0.41.2/config/disabled.yml\r\nInheriting configuration from /opt/brewery/dummy/Library/.rubocop_todo.yml\r\nUnprocessable file /opt/brewery/dummy/Library/Homebrew/test/fs_leak_log: EOFError, end of file reached\r\nInspecting 324 files\r\n[‚Ä¶]\r\n\r\n324 files inspected, no offenses detected\r\nFinished in 41.937767 seconds\r\n\r\n$ echo $?\r\n0\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1008
	},
	{
		"id" : 247926312,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T07:26:36Z",
		"body" : "@UniqMartin Great work. Gonna go for `.rubocop_rules.yml` but otherwise üëç all around.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1008
	},
	{
		"id" : 247927474,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-19T07:34:19Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/1008?src=pr) is 83.24% (diff: 100%)\n\n\n> No coverage report found for **master** at 167af26.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [167af26...f3e7693](https://codecov.io/gh/Homebrew/brew/compare/167af26a2437ed3b2f72f65c471e0c9829155a3b...f3e76935c17dee488763be224ae5ace8bc6f0b1f?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1008
	},
	{
		"id" : 247945410,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T09:17:19Z",
		"body" : "@reitermarkus Thanks for the review. After this it'd be great if you (or I, don't mind who) could update it so Cask shares the same Rubocop files and `brew style` also checks the Cask code.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1008
	},
	{
		"id" : 247946133,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-19T09:21:03Z",
		"body" : "Will do. Also, would be great if you could change the cops that are disabled because of the Formula DSL to `Exclude: Taps/**/*` instead of disabling them completely, so these can still be enforced on core code.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1008
	},
	{
		"id" : 247957575,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T10:20:01Z",
		"body" : "Worked except for a typo which I've fixed and force-pushed in so: üö¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1008
	},
	{
		"id" : 247848996,
		"user" : {
			"login" : "chaoren"
		},
		"created_at" : "2016-09-18T13:54:15Z",
		"body" : "> Have you written new tests for your changes? Here's an example.\r\n\r\nIf you have tests for this, please show me where.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1009
	},
	{
		"id" : 247849080,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T13:55:39Z",
		"body" : "`--indicator-style=none` is not a BSD ls option.\r\n\r\nUse of `ls` should simply be removed. There's #901 which supposedly does that but I didn't get to reviewing it (should probably get that done today.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1009
	},
	{
		"id" : 247849097,
		"user" : {
			"login" : "chaoren"
		},
		"created_at" : "2016-09-18T13:55:50Z",
		"body" : "Whoops, partial dupe with https://github.com/Homebrew/brew/pull/901. Just noticed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1009
	},
	{
		"id" : 247849116,
		"user" : {
			"login" : "chaoren"
		},
		"created_at" : "2016-09-18T13:56:12Z",
		"body" : "I'll add the $HOME thing to the other PR, and this won't be necessary anymore.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1009
	},
	{
		"id" : 247855949,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T15:59:35Z",
		"body" : "I plan on üö¢ing this tomorrow morning, UK time. That's the time when we have the highest \"maintainers online\" to \"users online\" ratio.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1011
	},
	{
		"id" : 247854020,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T15:25:05Z",
		"body" : "> Saw while migrating one of our bots.\r\n\r\nAll bots migrated successfully now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1013
	},
	{
		"id" : 247854053,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T15:25:36Z",
		"body" : "(note: this could only happen if `/usr/local/bin` only contained Homebrew i.e. you'd never installed anything and you were a `HOMEBREW_DEVELOPER`).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1013
	},
	{
		"id" : 247854200,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T15:28:25Z",
		"body" : "üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1013
	},
	{
		"id" : 247857893,
		"user" : {
			"login" : "rwhogg"
		},
		"created_at" : "2016-09-18T16:32:12Z",
		"body" : "Slight complication with testing this change: you have to comment out the following line in `ant.rb`:\r\n\r\n```ruby\r\nkeg_only :provided_by_osx if MacOS.version < :mavericks\r\n```\r\n\r\nThe reason is that the MacOS constant isn't defined.\r\n\r\nIt might make sense to put this PR on hold and focus on https://github.com/Linuxbrew/legacy-linuxbrew/commit/4f5efb6377e1245626845d71e46abf1dd8f89858#diff-23335809c452169ea76c54df1816fb54 first. That commit alone fixes a huge number of builds.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1014
	},
	{
		"id" : 247885019,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-18T22:26:19Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/1014?src=pr) is 83.23% (diff: 100%)\n> Merging [#1014](https://codecov.io/gh/Homebrew/brew/pull/1014?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **7.97%**\n\n```diff\n@@             master      #1014   diff @@\n==========================================\n  Files           360        342     -18   \n  Lines         15543      14063   -1480   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n+ Hits          11697      11705      +8   \n+ Misses         3846       2358   -1488   \n  Partials          0          0           \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f4a8d28...7e30697](https://codecov.io/gh/Homebrew/brew/compare/f4a8d28819f1fee73fcc63d08e70cb36eecdfb20...7e306971a1b335c0254d76d26664e45e9a0a1d85?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1014
	},
	{
		"id" : 249124203,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T07:41:43Z",
		"body" : "This is perfect. A great change and great contribution. Hopefully you understand the flow now @rwhogg it'll be much quicker to get future similar changes through. Thanks again!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1014
	},
	{
		"id" : 247927589,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-19T07:35:05Z",
		"body" : "awesome!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1015
	},
	{
		"id" : 247864838,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-18T18:34:24Z",
		"body" : "I haven't looked at the code, but just want to make sure: this is for `--cleanup` only, right?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1017
	},
	{
		"id" : 247865029,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-18T18:37:09Z",
		"body" : "Yep.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1017
	},
	{
		"id" : 247910630,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-19T04:44:04Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/1019?src=pr) is 82.43% (diff: 100%)\n> Merging [#1019](https://codecov.io/gh/Homebrew/brew/pull/1019?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **7.17%**\n\n```diff\n@@             master      #1019   diff @@\n==========================================\n  Files           360        340     -20   \n  Lines         15543      14190   -1353   \n  Methods           0          0           \n  Messages          0          0           \n  Branches          0          0           \n==========================================\n  Hits          11697      11697           \n+ Misses         3846       2493   -1353   \n  Partials          0          0           \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f4a8d28...3f9cce0](https://codecov.io/gh/Homebrew/brew/compare/f4a8d28819f1fee73fcc63d08e70cb36eecdfb20...3f9cce0a03e967d2e7bcb7cd16bbc898c1a35708?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1019
	},
	{
		"id" : 247925037,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T07:17:34Z",
		"body" : "> I'd prefer to avoid renaming purely-internal identifiers like variable names; this'll affect git-blame's usefulness.\r\n\r\n@mistydemeo Given past experience people are going to keep submitting PRs to update these. As we've just had a few mass-rubocop and generic code adjustments I think it's worth biting the bullet on this one and at least getting them all done together.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1019
	},
	{
		"id" : 247868722,
		"user" : {
			"login" : "justinclift"
		},
		"created_at" : "2016-09-18T19:36:49Z",
		"body" : "It worked for me. :smile:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1020
	},
	{
		"id" : 247938129,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T08:37:55Z",
		"body" : "Well, exactly as said \"you may now chown /usr/local back to root:wheel\".",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1023
	},
	{
		"id" : 247938163,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T08:38:06Z",
		"body" : "Congratulations on a successful migration.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1023
	},
	{
		"id" : 247938216,
		"user" : {
			"login" : "KMamedoff"
		},
		"created_at" : "2016-09-19T08:38:27Z",
		"body" : "Yes but I don't know how to do that. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1023
	},
	{
		"id" : 247938385,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T08:39:26Z",
		"body" : "```\r\nsudo chown root:wheel /usr/local\r\n```\r\n\r\nYou don't have to do that though, it just doesn't matter anymore.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1023
	},
	{
		"id" : 247938564,
		"user" : {
			"login" : "KMamedoff"
		},
		"created_at" : "2016-09-19T08:40:25Z",
		"body" : "I did it anyway. Thank you. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1023
	},
	{
		"id" : 247938600,
		"user" : {
			"login" : "pbregener"
		},
		"created_at" : "2016-09-19T08:40:39Z",
		"body" : "I just got the same message. While I do know how to do it, it'd like to know why. Was the owner changed in the migration process? And as it says \"may\", I assume it's not necessary?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1023
	},
	{
		"id" : 247938950,
		"user" : {
			"login" : "pbregener"
		},
		"created_at" : "2016-09-19T08:42:44Z",
		"body" : "Thanks @zmwangx. Can you provide some more background? Why is that message shown and why is it so ambiguous?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1023
	},
	{
		"id" : 247938989,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T08:42:57Z",
		"body" : "@pbregener Homebrew used to require writing access to `/usr/local`. Now it no longer writes to `/usr/local`, only subdirectories of `/usr/local`.\r\n\r\n> Was the owner changed in the migration process?\r\n\r\nNo, but Apple likes seeing `/usr/local` being owned by `root:wheel`, and major macOS upgrades do that.\r\n\r\n> And as it says \"may\", I assume it's not necessary?\r\n\r\nIt's not.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1023
	},
	{
		"id" : 247939214,
		"user" : {
			"login" : "pbregener"
		},
		"created_at" : "2016-09-19T08:44:06Z",
		"body" : "Thanks for the quick reply and good and short explanation @zmwangx üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1023
	},
	{
		"id" : 247940890,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T08:53:05Z",
		"body" : "Improved this message in https://github.com/Homebrew/brew/commit/a2f19f0a675f7cb384b48bad773d31366c6b258d",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1023
	},
	{
		"id" : 248031266,
		"user" : {
			"login" : "kevwil"
		},
		"created_at" : "2016-09-19T15:45:12Z",
		"body" : "Would it be accurate to say the user still needs to own some/most/all folders under /usr/local? I'm just curious what the \"correct\" permission set looks like, if such a perspective even exists.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1023
	},
	{
		"id" : 248077965,
		"user" : {
			"login" : "dmofot"
		},
		"created_at" : "2016-09-19T18:24:13Z",
		"body" : "Just throwing this here in case somebody else runs into the issue.  I ran `sudo chown root:wheel #{HOMEBREW_PREFIX}` and everything appeared fine.  Then ran `brew cask list` which returned \r\n```console\r\n$ brew cask list\r\n==> Moving Caskroom from HOMEBREW_REPOSITORY to HOMEBREW_PREFIX\r\nError: Permission denied - (/usr/local/Homebrew/Caskroom, /usr/local/Caskroom)Most likely, this means you have an outdated version of Homebrew-Cask. Please run:\r\n\r\n    brew uninstall --force brew-cask; brew untap phinze/cask; brew untap caskroom/cask; brew update; brew cleanup; brew cask cleanup\r\n\r\nIf this doesn‚Äôt fix the problem, please report this bug:\r\n\r\n    https://github.com/caskroom/homebrew-cask#reporting-bugs\r\n\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:519:in `rename'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:519:in `block in mv'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1558:in `block in fu_each_src_dest'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1574:in `fu_each_src_dest0'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:1556:in `fu_each_src_dest'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/fileutils.rb:508:in `mv'\r\n/usr/local/Homebrew/Library/Homebrew/cask/lib/hbc/caskroom.rb:8:in `migrate_caskroom_from_repo_to_prefix'\r\n/usr/local/Homebrew/Library/Homebrew/cask/lib/hbc.rb:52:in `init'\r\n/usr/local/Homebrew/Library/Homebrew/cask/lib/hbc/cli.rb:146:in `process'\r\n/usr/local/Homebrew/Library/Homebrew/cask/cmd/brew-cask.rb:8:in `<top (required)>'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'\r\n/usr/local/Homebrew/Library/Homebrew/brew.rb:23:in `require?'\r\n/usr/local/Homebrew/Library/Homebrew/brew.rb:105:in `<main>'\r\n```\r\n\r\nNeeded to run ` sudo brew cask list` due to the new permissions:\r\n```console\r\n$ sudo brew cask list\r\nPassword:\r\n==> Moving Caskroom from HOMEBREW_REPOSITORY to HOMEBREW_PREFIX\r\n```\r\n\r\nAnd now everything works fine without having to resort to `sudo` again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1023
	},
	{
		"id" : 249513145,
		"user" : {
			"login" : "hmijail"
		},
		"created_at" : "2016-09-26T08:46:40Z",
		"body" : "This was messy and is getting messier. Maybe it would be good if the Homebrew devs published a FAQ: \"up to version X we did this because of blah1, but since version Y the recommended practice is Z, because of blah2\".",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1023
	},
	{
		"id" : 249522116,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T09:28:04Z",
		"body" : "@hmijail We'll consider that in future but not at present.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1023
	},
	{
		"id" : 247958044,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T10:22:55Z",
		"body" : "Source build is broken, someone should take a look (this belongs to Homebrew/homebrew-core though): https://gist.github.com/anonymous/3628e9503ab0f5bfcdff795b4964ef52",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1024
	},
	{
		"id" : 247997842,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T13:48:25Z",
		"body" : "@reitermarkus May also be worth tweaking https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cmd/update-report.rb#L234-L239. Happy to merge this once we have one job with üëç to avoid waiting for coverage completion.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1025
	},
	{
		"id" : 247998095,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T13:49:24Z",
		"body" : "Also: will this break any symlinks?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1025
	},
	{
		"id" : 247999092,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-19T13:53:17Z",
		"body" : "I'm not sure about tweaking `update-report.rb`, because if the `Caskroom` isn't moved to the new repository first, there won't be a reference to it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1025
	},
	{
		"id" : 247999273,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T13:53:57Z",
		"body" : "It feels pretty odd to move it and then move it back to the same location?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1025
	},
	{
		"id" : 248005750,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-19T14:16:48Z",
		"body" : "> Also: will this break any symlinks?\r\n\r\nIt might. But it will probably fix more symlinks than it breaks, since the move to `/usr/local/Homebrew/Caskroom` broke all links pointing to `/usr/local/Caskroom`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1025
	},
	{
		"id" : 248037601,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-19T16:07:20Z",
		"body" : "[**@reitermarkus**](https://github.com/reitermarkus) commented on [Sep 19, 2016, 10:16 AM EDT](https://github.com/Homebrew/brew/pull/1025#issuecomment-248005750 \"2016-09-19T14:16:48Z - Replied by Github Reply Comments\"):\r\n> > Also: will this break any symlinks?\r\n> \r\n> It might. But it will probably fix more symlinks than it breaks, since the move to `/usr/local/Homebrew/Caskroom` broke all links pointing to `/usr/local/Caskroom`.\r\n\r\nIt will certainly break symlinks, but I'm not sure how it would fix any.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1025
	},
	{
		"id" : 248040287,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-19T16:16:52Z",
		"body" : "`/usr/local/Caskroom` was migrated to `/usr/local/Homebrew/Caskroom` with the migration of the Homebrew repo to `/usr/local/Homebrew`, so all symlinks would be broken if we left the Caskroom at `/usr/local/Homebrew/Caskroom`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1025
	},
	{
		"id" : 248040929,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-19T16:19:04Z",
		"body" : "Ah, sorry, read your comment too fast and thought you were talking about the earlier migration from `/opt/homebrew-cask/Caskroom` to `/usr/local/Caskroom`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1025
	},
	{
		"id" : 248049140,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-19T16:46:59Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/1025?src=pr) is 81.76% (diff: 100%)\n> Merging [#1025](https://codecov.io/gh/Homebrew/brew/pull/1025?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will decrease coverage by **1.52%**\n\n```diff\n@@             master      #1025   diff @@\n==========================================\n  Files           340        340          \n  Lines         14109      14390   +281   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          11751      11766    +15   \n- Misses         2358       2624   +266   \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3ffb9a2...c0cc703](https://codecov.io/gh/Homebrew/brew/compare/3ffb9a2f7cda6652f75cb0c59c6d079ab1039e94...c0cc703516c1c32d42922dbb2af17c09fc340825?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1025
	},
	{
		"id" : 248052142,
		"user" : {
			"login" : "jaraco"
		},
		"created_at" : "2016-09-19T16:57:20Z",
		"body" : "I should also mention that in addition to updating Homebrew, I upgrade to macOS Sierra (10.12) yesterday. That upgrade caused the group write bit to be cleared on /usr/local so I did also this morning `chmod -R g+w /usr/local` to restore homebrew access in order to do the update.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1027
	},
	{
		"id" : 248056571,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T17:12:12Z",
		"body" : "> Those directories aren't really insecure, they're just writable by the group admin:\r\n\r\nZSH considers that insecure. Nothing else we can do about that, sorry üò≠ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1027
	},
	{
		"id" : 248057310,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T17:14:48Z",
		"body" : "Security check can be skipped. Read http://zsh.sourceforge.net/Doc/Release/Completion-System.html (or just search for \"security\" in it).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1027
	},
	{
		"id" : 248057514,
		"user" : {
			"login" : "jaraco"
		},
		"created_at" : "2016-09-19T17:15:35Z",
		"body" : "I tried satisfying compaudit, but that doesn't help:\r\n\r\n```\r\n$ sudo chmod g-w /usr/local/share/zsh/site-functions\r\n$ sudo chmod g-w /usr/local/Cellar/zsh/5.2/share/zsh/functions\r\n$ sudo chmod g-w /usr/local/share/zsh                         \r\n$ sudo chmod g-w /usr/local/Cellar/zsh/5.2/share/zsh          \r\n$ compaudit\r\n$ compinit\r\ncompaudit () {\r\n\temulate -L zsh\r\n\tsetopt extendedglob\r\n...\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1027
	},
	{
		"id" : 248057906,
		"user" : {
			"login" : "jaraco"
		},
		"created_at" : "2016-09-19T17:17:05Z",
		"body" : "Aha! After changing those settings, removing the corrupt .zcompdump, and restarting the shell, I have completion again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1027
	},
	{
		"id" : 248058110,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T17:17:53Z",
		"body" : "Please show me the output of\r\n\r\n```sh\r\nwhoami && /bin/ls -ld /usr/local/share/zsh/site-functions /usr/local/Cellar/zsh/5.2/share/zsh/functions /usr/local/share/zsh /usr/local/Cellar/zsh/5.2/share/zsh\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1027
	},
	{
		"id" : 248058182,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T17:18:08Z",
		"body" : "Okay, glad to know.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1027
	},
	{
		"id" : 250204727,
		"user" : {
			"login" : "jaraco"
		},
		"created_at" : "2016-09-28T15:36:24Z",
		"body" : "Ugh. After changing the permissions on those directories to make them group read-only (as above), Homebrew started raising errors like:\r\n\r\n```\r\nError: Failed to link all completions, docs and manpages:\r\n  Permission denied - /usr/local/share/zsh/site-functions/_brew\r\n```\r\n\r\nAnd indeed, `/usr/local/share/zsh/site-functions` is owned by `root:admin` and to satisfy compaudit, not group writable. I'd really rather not _force_ the issue by simply claiming user ownership of that directory - after all, it's not in my home directory, and could easily be used by another user logged into the system.\r\n\r\nI'd like to be able to rely on the group membership to grant write permission.\r\n\r\nI did find that I could restore group write to that directory and the errors in Homebrew went away.\r\n\r\n```\r\n$ sudo chmod g+w /usr/local/share/zsh/site-functions\r\n$ sudo chmod g+w /usr/local/share/zsh\r\n```\r\n\r\nI also double-checked and the issue with compinit is not recurring.\r\n\r\nSo I also restored group write to the Cellar folders, but doing so brings back the corruption to `.zcompdump` and the failure in subsequent shell launches.\r\n\r\n```\r\n$ sudo chmod g+w /usr/local/Cellar/zsh/5.2/share/zsh  \r\n$ sudo chmod g+w /usr/local/Cellar/zsh/5.2/share/zsh/functions\r\n$ zsh\r\n$ zsh\r\ncompdump () {\r\n\t# undefined\r\n\tbuiltin autoload -XUz\r\n}\r\n...\r\n```\r\n\r\nSo it seems I can continue to work around the issue by leaving the /usr/local/share directories group writable and the /usr/local/Cellar directories not group writable. Interestingly, as the Cellar directories are owned by me, they won't need to be group writable to function:\r\n\r\n```\r\n$ sudo chmod g-w /usr/local/Cellar/zsh/5.2/share/zsh         \r\n$ sudo chmod g-w /usr/local/Cellar/zsh/5.2/share/zsh/functions\r\n$ ls -lad /usr/local/Cellar/zsh/5.2/share/zsh /usr/local/Cellar/zsh/5.2/share/zsh/functions\r\ndrwxr-xr-x    5 jaraco  admin    170 Dec  3  2015 /usr/local/Cellar/zsh/5.2/share/zsh\r\ndrwxr-xr-x  982 jaraco  admin  33388 Apr 15 05:46 /usr/local/Cellar/zsh/5.2/share/zsh/functions\r\n$ whoami\r\njaraco\r\n```\r\n\r\nTo summarize, I'm able to work around the issue with what feels like a delicate balance of adjustments to the permissions, and I still don't know what's causing the underlying corruption to .zcompdump, though it does seem to be related to group write permissions on `/usr/local/Cellar/...`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1027
	},
	{
		"id" : 250206407,
		"user" : {
			"login" : "jaraco"
		},
		"created_at" : "2016-09-28T15:41:40Z",
		"body" : "> Security check can be skipped. Read http://zsh.sourceforge.net/Doc/Release/Completion-System.html (or just search for \"security\" in it).\r\n\r\nFor clarity, let me re-state that my .zshrc invokes compinit with `-i`, so already should be bypassing the security checks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1027
	},
	{
		"id" : 248091064,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-19T19:07:01Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/1028?src=pr) is 83.29% (diff: 100%)\n> Merging [#1028](https://codecov.io/gh/Homebrew/brew/pull/1028?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will decrease coverage by **0.02%**\n\n```diff\n@@             master      #1028   diff @@\n==========================================\n  Files           340        340          \n  Lines         14121      14125     +4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits          11765      11765          \n- Misses         2356       2360     +4   \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [e22610a...4c77372](https://codecov.io/gh/Homebrew/brew/compare/e22610aedd550cb5577dd08cedb7a5609d0ff0b8...4c773725c7683ec624863459ac3b4a3237a7382f?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1028
	},
	{
		"id" : 248099177,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-19T19:36:02Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/1029?src=pr) is 83.31% (diff: 100%)\n> Merging [#1029](https://codecov.io/gh/Homebrew/brew/pull/1029?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@             master      #1029   diff @@\n==========================================\n  Files           340        340          \n  Lines         14121      14123     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          11765      11767     +2   \n  Misses         2356       2356          \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [e22610a...15f3f20](https://codecov.io/gh/Homebrew/brew/compare/e22610aedd550cb5577dd08cedb7a5609d0ff0b8...15f3f2065625b05496632c1f5cf61fd150afef3c?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1029
	},
	{
		"id" : 248819734,
		"user" : {
			"login" : "wickles"
		},
		"created_at" : "2016-09-22T06:03:35Z",
		"body" : "Checks are failing for [accessibility_test.rb](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cask/test/cask/accessibility_test.rb). Errors reported for 10.10, 10.11, 10.12: \r\n```\r\nFailure:\r\nAccessibility Access::uninstall#test_0002_warns about disabling accessibility access on old OS X releases [/Users/brew/Jenkins/pr-brew/version/yosemite/Library/Homebrew/cask/test/cask/accessibility_test.rb:57]\r\nMinitest::Assertion: Expected /Warning:\\ Accessibility\\ access\\ was\\ enabled\\ for\\ with\\-accessibility\\-access,\\ but\\ it\\ is\\ not\\ safe\\ to\\ disable/ to match \"Warning: Accessibility access cannot be disabled automatically on this version of macOS.\\nSee System Preferences to disable it manually.\\n\".\r\n```\r\n\r\nDoes anything need to be changed besides updating the string in \r\n```\r\ncapture_io { @installer.disable_accessibility_access }[1]\r\n  .must_match(\"Warning: Accessibility access was enabled for with-accessibility-access, but it is not safe to disable\")\r\n```\r\n???",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1029
	},
	{
		"id" : 248827494,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-22T07:00:01Z",
		"body" : "Yes, you should update the string in the current test. And you should also add another test which tests if the same message appears on `>= :sierra`. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1029
	},
	{
		"id" : 248090033,
		"user" : {
			"login" : "benson-basis"
		},
		"created_at" : "2016-09-19T19:03:32Z",
		"body" : "Hmm. Trying brew update a third time worked.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1030
	},
	{
		"id" : 248100885,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-19T19:42:21Z",
		"body" : "I obviously didn't read every single line of change but I poked around in the tree and it looks fine üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1031
	},
	{
		"id" : 248118870,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-19T20:39:21Z",
		"body" : "Wow, great work!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1032
	},
	{
		"id" : 248125230,
		"user" : {
			"login" : "codecov-io"
		},
		"created_at" : "2016-09-19T21:01:01Z",
		"body" : "## [Current coverage](https://codecov.io/gh/Homebrew/brew/pull/1032?src=pr) is 83.32% (diff: 100%)\n> Merging [#1032](https://codecov.io/gh/Homebrew/brew/pull/1032?src=pr) into [master](https://codecov.io/gh/Homebrew/brew/branch/master?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@             master      #1032   diff @@\n==========================================\n  Files           340        340          \n  Lines         14121      14127     +6   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits          11765      11772     +7   \n+ Misses         2356       2355     -1   \n  Partials          0          0          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [e22610a...28f707c](https://codecov.io/gh/Homebrew/brew/compare/e22610aedd550cb5577dd08cedb7a5609d0ff0b8...28f707c907dfbaca2c7c8794d9109a22bc66edf1?src=pr)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1032
	},
	{
		"id" : 249513818,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T08:49:35Z",
		"body" : "Thanks for the bug report. Just to let you know that this write-up is good and it's on my list of things to work on.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1034
	},
	{
		"id" : 248532640,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T07:27:08Z",
		"body" : "@penman Timed out after 45m. Let's try it again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 248571012,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-21T10:21:50Z",
		"body" : "Aborted again‚Ä¶\r\nI guess it's time for me to install Sierra!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 248591637,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-21T12:05:33Z",
		"body" : "It's hanging because of SimpleCov trying to filter a hash in (at least) O(n¬≤). I'm going to submit a PR to them to make this more efficient.\r\n\r\nBut, the reason this has suddenly become a problem is that we seem to have started doing the coverage for >10000 Ruby files. I can try to investigate this, but I'm not very familiar with SimpleCov so it might take a while. If anybody else wants to take a look, you can reproduce with\r\n\r\n```sh\r\nbrew cask-tests --coverage\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 248603887,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T12:56:39Z",
		"body" : "@penman Yeh, the performance with `--coverage` is like 10x worse. Glad you're submitting a PR there; was on my list to dig into. Make use of UoE's ADS class üòâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 248752871,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-21T21:47:23Z",
		"body" : "@MikeMcQuaid \r\n\r\n> Make use of UoE's ADS class üòâ\r\n\r\nI don't start it until January üòû",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 248763684,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-21T22:41:40Z",
		"body" : "GREEEEEEEEEN. I'm skeptical that code coverage has jumped 11% though, so I'd still like somebody who knows about that to take a look at it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 248832442,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T07:33:24Z",
		"body" : "Want to play around with this locally to investigate the speed differences. Thoughts on the simplecov issues? Thanks @penman!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 248839666,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-22T08:16:37Z",
		"body" : "Will also play around a bit locally to see if I can get the simplecov issues sorted.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 248859995,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-22T10:02:14Z",
		"body" : "Is the Sierra CI machine any different to the El Capitan / Yosemite ones?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 248861311,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T10:09:10Z",
		"body" : "@penman It's running `--coverage` and the others are not. Identical hardware, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 248902640,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-22T13:26:01Z",
		"body" : "The test times are similar with and without coverage, with the exception of `test_integration_cmds`, which takes almost nine times as long with coverage.\r\n\r\n<details>\r\n  <summary>Test times (without coverage)</summary>\r\n  <pre>test/test_integration_cmds.rb             122.87\r\ntest/test_cmd_audit.rb                    8.45\r\ntest/test_sandbox.rb                      5.56\r\ntest/test_ENV.rb                          3.04\r\ntest/test_formula_installer.rb            2.52\r\ntest/test_os_mac_language.rb              1.14\r\ntest/test_tap.rb                          1.09\r\ntest/test_patching.rb                     1.04\r\ntest/test_formula.rb                      0.85\r\ntest/test_gpg.rb                          0.56\r\ntest/test_migrator.rb                     0.47\r\ntest/test_keg.rb                          0.40\r\ntest/test_download_strategies.rb          0.33\r\ntest/test_versions.rb                     0.31\r\ntest/test_cmd_testbot.rb                  0.29\r\ntest/test_cleaner.rb                      0.26\r\ntest/test_formulary.rb                    0.25\r\ntest/test_bash.rb                         0.25\r\ntest/test_cleanup.rb                      0.24\r\ntest/test_utils.rb                        0.18\r\ntest/test_pathname.rb                     0.17\r\ntest/test_resource.rb                     0.15\r\ntest/test_diagnostic.rb                   0.14\r\ntest/test_tab.rb                          0.13\r\ntest/test_checksum_verification.rb        0.10\r\ntest/test_options.rb                      0.09\r\ntest/test_formula_installer_bottle.rb     0.09\r\ntest/test_update_report.rb                0.08\r\ntest/test_software_spec.rb                0.07\r\ntest/test_os_mac_mach.rb                  0.07\r\ntest/test_os_mac_bottle_tag.rb            0.07\r\ntest/test_requirement.rb                  0.07\r\ntest/test_build_environment.rb            0.06\r\ntest/test_dependency_expansion.rb         0.06\r\ntest/test_commands.rb                     0.05\r\ntest/test_inreplace.rb                    0.04\r\ntest/test_exceptions.rb                   0.04\r\ntest/test_dependency_collector.rb         0.04\r\ntest/test_os_mac_keg.rb                   0.04\r\ntest/test_blacklist.rb                    0.04\r\ntest/test_compiler_selector.rb            0.04\r\ntest/test_patch.rb                        0.04\r\ntest/test_language_python.rb              0.03\r\ntest/test_stdlib.rb                       0.02\r\ntest/test_os_mac_version.rb               0.02\r\ntest/test_gpg2_requirement.rb             0.02\r\ntest/test_formula_validation.rb           0.02\r\ntest/test_formula_spec_selection.rb       0.02\r\ntest/test_dependencies.rb                 0.02\r\ntest/test_os_mac_diagnostic.rb            0.02\r\ntest/test_os_mac_dependency_collector.rb  0.01\r\ntest/test_pkg_version.rb                  0.01\r\ntest/test_dependency.rb                   0.01\r\ntest/test_bottle_collector.rb             0.01\r\ntest/test_caveats.rb                      0.01\r\ntest/test_bottle_hooks.rb                 0.01\r\ntest/test_formula_support.rb              0.01\r\ntest/test_formula_lock.rb                 0.01\r\ntest/test_x11_requirement.rb              0.01\r\ntest/test_compiler_failure.rb             0.01\r\ntest/test_formula_pin.rb                  0.01\r\ntest/test_descriptions.rb                 0.01\r\ntest/test_language_module_requirement.rb  0.01\r\ntest/test_os_mac_bottle_collector.rb      0.00\r\ntest/test_os_mac_blacklist.rb             0.00\r\ntest/test_os_mac_x11_requirement.rb       0.00\r\ntest/test_cmd_info.rb                     0.00\r\ntest/test_language_go.rb                  0.00\r\ntest/test_json.rb                         0.00\r\ntest/test_string.rb                       0.00\r\ntest/test_bottle_filename.rb              0.00\r\ntest/test_checksum.rb                     0.00\r\ntest/test_build_options.rb                0.00</pre>\r\n</details>\r\n\r\n<details>\r\n  <summary>Test times (with coverage)</summary>\r\n  <pre>test/test_integration_cmds.rb             1082.18\r\ntest/test_cmd_audit.rb                    8.42\r\ntest/test_sandbox.rb                      4.81\r\ntest/test_formula_installer.rb            3.47\r\ntest/test_patching.rb                     2.39\r\ntest/test_ENV.rb                          1.94\r\ntest/test_formula.rb                      1.68\r\ntest/test_tap.rb                          1.00\r\ntest/test_gpg.rb                          0.53\r\ntest/test_keg.rb                          0.49\r\ntest/test_download_strategies.rb          0.39\r\ntest/test_migrator.rb                     0.39\r\ntest/test_cmd_testbot.rb                  0.34\r\ntest/test_formulary.rb                    0.31\r\ntest/test_bash.rb                         0.28\r\ntest/test_utils.rb                        0.24\r\ntest/test_cleanup.rb                      0.24\r\ntest/test_versions.rb                     0.22\r\ntest/test_update_report.rb                0.15\r\ntest/test_os_mac_language.rb              0.14\r\ntest/test_pathname.rb                     0.13\r\ntest/test_cleaner.rb                      0.13\r\ntest/test_formula_installer_bottle.rb     0.12\r\ntest/test_checksum_verification.rb        0.12\r\ntest/test_software_spec.rb                0.10\r\ntest/test_diagnostic.rb                   0.10\r\ntest/test_dependency_expansion.rb         0.10\r\ntest/test_os_mac_mach.rb                  0.09\r\ntest/test_tab.rb                          0.09\r\ntest/test_exceptions.rb                   0.07\r\ntest/test_dependencies.rb                 0.06\r\ntest/test_os_mac_keg.rb                   0.06\r\ntest/test_patch.rb                        0.06\r\ntest/test_dependency_collector.rb         0.06\r\ntest/test_requirement.rb                  0.05\r\ntest/test_options.rb                      0.04\r\ntest/test_resource.rb                     0.04\r\ntest/test_dependency.rb                   0.04\r\ntest/test_inreplace.rb                    0.04\r\ntest/test_os_mac_bottle_tag.rb            0.04\r\ntest/test_gpg2_requirement.rb             0.03\r\ntest/test_os_mac_dependency_collector.rb  0.03\r\ntest/test_os_mac_diagnostic.rb            0.03\r\ntest/test_formula_spec_selection.rb       0.03\r\ntest/test_compiler_selector.rb            0.03\r\ntest/test_language_python.rb              0.03\r\ntest/test_formula_validation.rb           0.02\r\ntest/test_build_environment.rb            0.02\r\ntest/test_stdlib.rb                       0.02\r\ntest/test_commands.rb                     0.02\r\ntest/test_hardware.rb                     0.02\r\ntest/test_ARGV.rb                         0.02\r\ntest/test_shell.rb                        0.01\r\ntest/test_bottle_collector.rb             0.01\r\ntest/test_checksum.rb                     0.01\r\ntest/test_descriptions.rb                 0.01\r\ntest/test_x11_requirement.rb              0.01\r\ntest/test_formula_support.rb              0.01\r\ntest/test_os_mac_blacklist.rb             0.01\r\ntest/test_bottle_filename.rb              0.01\r\ntest/test_os_mac_bottle_collector.rb      0.01\r\ntest/test_build_options.rb                0.01\r\ntest/test_bottle_hooks.rb                 0.01\r\ntest/test_compiler_failure.rb             0.01\r\ntest/test_formula_lock.rb                 0.01\r\ntest/test_language_module_requirement.rb  0.01\r\ntest/test_os_mac_version.rb               0.01\r\ntest/test_pkg_version.rb                  0.01\r\ntest/test_string.rb                       0.01\r\ntest/test_formula_pin.rb                  0.01\r\ntest/test_caveats.rb                      0.01\r\ntest/test_language_go.rb                  0.00\r\ntest/test_mpi_requirement.rb              0.00\r\ntest/test_os_mac_x11_requirement.rb       0.00\r\ntest/test_cmd_info.rb                     0.00</pre>\r\n</details>",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 248919597,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T14:27:35Z",
		"body" : "> The test times are similar with and without coverage, with the exception of test_integration_cmds, which takes almost nine times as long with coverage.\r\n\r\n@penman Thanks for digging in there. This will be why it's so slow: \r\nhttps://github.com/Homebrew/brew/blob/bbed7246bc5c5b7acb8c1d427d10b43e090dfd39/Library/Homebrew/test/Gemfile\r\n\r\nI'm tempted to just üíÄ the coverage on those commands until we can get the times more sane.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 248947034,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-22T15:59:42Z",
		"body" : "> I'm tempted to just üíÄ the coverage on those commands until we can get the times more sane.\r\n\r\nWhat if I told you I could get them to run with coverage more than twice as fast as they do now? üòâ\r\n\r\nFeels like it should be a separate PR, though‚Ä¶",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 248964123,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-22T17:00:49Z",
		"body" : "> This will be why it's so slow: https://github.com/Homebrew/brew/blob/bbed7246bc5c5b7acb8c1d427d10b43e090dfd39/Library/Homebrew/test/Gemfile\r\n\r\nThanks for pointing to this Gemfile! Now I know why cask coverage is at 100 % at all times: `cask-tests` is using SimpleCov 0.12.0.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 249017381,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T20:23:44Z",
		"body" : "> @MikeMcQuaid What if I told you I could get them to run with coverage more than twice as fast as they do now? üòâ\r\n> \r\n> Feels like it should be a separate PR, though‚Ä¶\r\n\r\n@penman Feel free to make it this PR! Still thinking about whether parallel tests provides a decent, measurable speedup? Your thoughts?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 249041362,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-22T22:02:27Z",
		"body" : "> @penman Feel free to make it this PR!\r\n\r\n@MikeMcQuaid already did! #1084",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 249043428,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-22T22:12:42Z",
		"body" : "> Still thinking about whether parallel tests provides a decent, measurable speedup? Your thoughts?\r\n\r\n@MikeMcQuaid I think it's a good thing to have. I _think_ (but haven't researched, this is a hunch) that we're not seeing a lot of the potential for speedup because parallel_tests will try to spread different tests across different processes, but different tests in the same file are always grouped together. When I look at the output, I get four processes. Three finish at the same time, and one goes on much longer, slowing things down. That final process is the one that runs `test_integration_cmds`. So, if we split that up into smaller files, we'd probably get a much bigger speed up.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 249056829,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-22T23:25:20Z",
		"body" : "Even without any further changes, `brew tests; brew cask-tests` runs a full minute faster on this branch than `master` for me on the first run.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 249117111,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T06:57:33Z",
		"body" : "> Even without any further changes, brew tests; brew cask-tests runs a full minute faster on this branch than master for me on the first run.\r\n\r\nGood enough for me! Nice work again @penman (I'm almost bored of saying that now üòÜ)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 249627910,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-09-26T16:50:53Z",
		"body" : "> if we split that [`test_integration_cmds`] up into smaller files, we'd probably get a much bigger speed up.\r\n\r\nBig time. On my ancient Core 2 Duo machine I get this: `2 processes for 77 tests, ~ 38 tests per process`. As @penman says, the gem apportions tests proportionately across cores _by file_. For me, the first process exits after 29s and the other one - with the integration tests - after 190s - so not getting full benefit of @penman's excellent work! Splitting the integration tests so they likely get evenly spread across each core would be the way forward. Best done when no merge conflicts likely, I guess. Be happy to do this one weekend maybe.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 249647257,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-26T18:00:27Z",
		"body" : "> Be happy to do this one weekend maybe.\r\n\r\nSorry to ruin your weekend plans, but I was curious and went ahead with it: https://github.com/Homebrew/brew/pull/1156 üòÑ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1041
	},
	{
		"id" : 248568497,
		"user" : {
			"login" : "msavy"
		},
		"created_at" : "2016-09-21T10:10:12Z",
		"body" : "@DomT4 @MikeMcQuaid I think either solution is fine, as long as it behaves consistently.\r\n\r\nThe `mkdir` one appeals to me because it's more UNIXy than `mkpath`, and appears to have no side-effects. \r\n\r\nBut, that's a minor distinction and I would be equally happy with adding block support to `mkdir_p` and/or `mkpath`.\r\n\r\nHappy to contribute it, either way :-).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1043
	},
	{
		"id" : 248956112,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-22T16:30:31Z",
		"body" : "Nobody else has rushed to agree with my thoughts, so I'm happy here whenever @MikeMcQuaid is.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1043
	},
	{
		"id" : 249386491,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T20:42:19Z",
		"body" : "Thanks for your contribution to Homebrew! Without people like you submitting PRs we couldn't run this project. You rock!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1043
	},
	{
		"id" : 248500176,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-21T03:17:53Z",
		"body" : "OK, yeah, `brew update --force` fixed it.  Thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1045
	},
	{
		"id" : 248532739,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T07:27:36Z",
		"body" : "üÜí.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1045
	},
	{
		"id" : 248871168,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T11:03:31Z",
		"body" : "Happy to üö¢ this when conflicts are resolved. @reitermarkus after that it'd be cool to unify Cask's rubocop and style too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1050
	},
	{
		"id" : 249222266,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T15:23:07Z",
		"body" : "Nice. Would love to see us get a unified style on cask and the rest of Homebrew/brew as a next step.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1050
	},
	{
		"id" : 249222948,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-23T15:25:36Z",
		"body" : "Yep, will create another PR *before* that though, to clean up most of the remaining offenses in `rubocop_todo.yml`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1050
	},
	{
		"id" : 249223578,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T15:28:01Z",
		"body" : "üÜí üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1050
	},
	{
		"id" : 249405293,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-25T06:22:55Z",
		"body" : "This changed the API on search_taps, which now dies when passed a string.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1050
	},
	{
		"id" : 248531084,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T07:18:09Z",
		"body" : "> This is mostly cosmetic, although I can change it to something like require_relocation? in this PR if desired.\r\n\r\nMay as well do that in a future PR to keep things easier to test/review.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1051
	},
	{
		"id" : 249379700,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-09-24T18:21:42Z",
		"body" : "```\r\n > git checkout -f 7ee02c791683f69dd1fced797b311df662aab927\r\nFATAL: Could not checkout 7ee02c791683f69dd1fced797b311df662aab927\r\n```\r\nhttps://bot.brew.sh/job/Brew%20Pull%20Requests/2025/version=el_capitan/console\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1052
	},
	{
		"id" : 249379708,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-09-24T18:21:59Z",
		"body" : "@BrewTestBot test this please",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1052
	},
	{
		"id" : 249381802,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T19:05:08Z",
		"body" : "> Is this a transient error?\r\n\r\nYes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1052
	},
	{
		"id" : 249726547,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-09-26T23:25:37Z",
		"body" : "Thanks for the positive review, Mike. Merge?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1052
	},
	{
		"id" : 249795938,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:10:01Z",
		"body" : "@Homebrew/maintainers Anyone else have thoughts on the `.brew` naming here? I'm not üíØ on it but I'm unsure of what I'd rather instead. If no-one else cares or if people think we should üö¢ this as-is I probably just will.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1052
	},
	{
		"id" : 250066351,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-28T04:02:58Z",
		"body" : "`.metafiles` would work as well, or `.internal`. No objections to `.brew` though really.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1052
	},
	{
		"id" : 250907250,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T11:24:27Z",
		"body" : "Thanks again @sjackman!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1052
	},
	{
		"id" : 250925651,
		"user" : {
			"login" : "sjackman"
		},
		"created_at" : "2016-10-01T17:37:02Z",
		"body" : "Thanks for merging, Mike!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1052
	},
	{
		"id" : 248682570,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-21T17:24:42Z",
		"body" : "What about\r\n\r\n```\r\nsudo xcode-select --reset\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1055
	},
	{
		"id" : 249637979,
		"user" : {
			"login" : "everedifice"
		},
		"created_at" : "2016-09-26T17:27:36Z",
		"body" : "It seems to be can't find Xcode library on 10.12 version (Sierra)\r\n\r\nmy new MacBook has same symptom.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1055
	},
	{
		"id" : 249756409,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-27T03:20:41Z",
		"body" : "@everedifice What's your `brew config`?\r\n\r\n`softwareupdate --list` may be useful as well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1055
	},
	{
		"id" : 249758336,
		"user" : {
			"login" : "everedifice"
		},
		"created_at" : "2016-09-27T03:39:23Z",
		"body" : "@DomT4 Problem solved. `softwareupdate --list` notify me that need Command Line Tool update.\r\n\r\nSo I update that with `softwareupdate -ira`. after that, it works!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1055
	},
	{
		"id" : 249795910,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-09-27T08:09:51Z",
		"body" : "@zmwangx I think that's useful if the CLT's installed, but we should probably skip the test entirely if neither is present.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1055
	},
	{
		"id" : 248530888,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T07:17:08Z",
		"body" : "It is not currently, sorry but we may consider doing so in future.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 248584764,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-21T11:31:52Z",
		"body" : "See #1058.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 248609664,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-21T13:19:23Z",
		"body" : "To be honest, I quite like the warning being so prominent because it _seems_ to reduce the level of expectation that we'll rush to fix things when people file Issues, and places the onus more on them helping us fix things rather than maintainer x finding time to spin up a Mavericks box, poke the issue, try to work on a fix, etc etc.\r\n\r\nDiagnostic warnings & caveat messages have shown pretty thoroughly over time if you don't get in people's faces about it the vast majority won't notice or won't take the warning seriously.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 248612495,
		"user" : {
			"login" : "Eitot"
		},
		"created_at" : "2016-09-21T13:29:48Z",
		"body" : "@DomT4: Do you believe that looking for (perhaps with a notice in the documentation) and setting an environment variable won‚Äôt have an appreciable impact? To be honest, if this isn‚Äôt addressed, I might just suppress it with a workaround myself. I don‚Äôt think that this would solve anything either.\r\n\r\nI have no objections to the message in `brew doctor` and I understand that you ask of users to do this before filing a bug report anyway.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 248614580,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-21T13:37:33Z",
		"body" : "Perhaps initially, but in 3/4/5/6 months when something breaks on Mavericks I'm not seriously expecting anyone to go to file an Issue and suddenly remember they set xyz `ENV` and we're unlikely to be able to commit much time towards fixing it ourselves. I can't even remember most of what I did last week üòÑ.\r\n\r\nA lot of people don't really appreciate the diagnostic messages _(of which this is technically one)_ aren't there to annoy you particularly, they exist because we've identified a specific issue that we know causes users or us significant hassle.\r\n\r\nPrior to that warning & Mike storming through the Issue tracker wielding a close hammer there were quite a few situations where someone reported a problem with a formula or Homebrew on 10.6/10.7 and the best response we could manage was a mildly exasperated shrug, so issues sat there ignored for months and months. I'm not convinced that's not a worse experience than living with the message.\r\n\r\nI consider it genuinely useful to give people a heads-up on a regular basis that if things break we'll need help fixing them, or we might not be able to do so ourselves.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 248616807,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T13:45:19Z",
		"body" : "Let's leave this open for a bit and see how many people chime in. `brew doctor` will still whine at you regardless, we won't disable that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 248616959,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T13:45:46Z",
		"body" : "CC @Alhadis as you're interested in this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 248656562,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-21T15:55:06Z",
		"body" : "> Perhaps initially, but in 3/4/5/6 months when something breaks on Mavericks I'm not seriously expecting anyone to go to file an Issue and suddenly remember they set xyz ENV and we're unlikely to be able to commit much time towards fixing it ourselves. I can't even remember most of what I did last week üòÑ.\r\n\r\nI think we can make it very clear where the responsible env var is documented that users who set that is on their own and should not expect support from us. When people do whine and *demand* a fix, we simply link to the docs and close. Set an abbreviation for that in your favorite text expansion tool.\r\n\r\nI expect the percentage of users who actually whine out of those that feel the pain of constant warnings (and let's be honest, most people who are stuck on Mavericks won't and maybe can't upgrade just because you keep nagging) to be actually very low. We get nonsensical issues quite frequently, I don't mind closing a few more.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249139325,
		"user" : {
			"login" : "jeroenooms"
		},
		"created_at" : "2016-09-23T08:58:18Z",
		"body" : "I was a bit blown away by the unexpected end of Mavericks support as well.\r\n\r\nMavericks is still widely used for building software which is provided via installers and should work across different versions of OSX. It is also default `osx` image on Travis.\r\n\r\nWe target Mavericks on build servers for the [R software](https://cran.r-project.org/bin/macosx/), an open source data analysis language used by millions of students and researchers. The language has over 8000 contributed packages which get built on our Mavericks server, so that they can be used on any OS-X 10.9 or newer. We rely heavily on homebrew bottles for static linking packages which use external C/C++ libraries. \r\n\r\nIs there any way we can provide some extended support for Mavericks ? Or at least keep serving bottles while they work?\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249139559,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T08:59:23Z",
		"body" : "> I was a bit blown away by the unexpected end of Mavericks support as well.\r\n\r\nSorry, it might be unexpected to you, but we always supported three and only three latest versions, always.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249140766,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T09:05:16Z",
		"body" : "> Mavericks is still widely used for building software which is provided via installers and should work across different versions of OSX. It is also default osx image on Travis.\r\n> \r\n> We target Mavericks on build servers for the R software, an open source data analysis language used by millions of students and researchers. The language has over 8000 contributed packages which get built on our Mavericks server, so that they can be used on any OS-X 10.9 or newer. We rely heavily on homebrew bottles for static linking packages which use external C/C++ libraries.\r\n> \r\n> Is there any way we can provide some extended support for Mavericks ? Or at least keep serving bottles while they work?\r\n\r\nIf someone can provide us with the funding for an additional new, SSD Mac Mini we can continue bottling for Mavericks. Travis CI was notified in advance that this was coming so I'd suggest you consider taking it up with them. You can still build from source with Homebrew back to 10.5, we just can't support it and don't build binary packages.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249140970,
		"user" : {
			"login" : "jeroenooms"
		},
		"created_at" : "2016-09-23T09:06:16Z",
		"body" : "How much funding would you approx need?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249141218,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T09:07:28Z",
		"body" : "@MikeMcQuaid Do you mean just \"continue bottling\" when things work, or properly support things? The latter would be a lot of work for little gain.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249142382,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T09:12:45Z",
		"body" : "@zmwangx I mean \"provide binary packages\" alone.\r\n\r\n@jeroenooms Probably around ¬£1000 for the hardware plus travel costs to get it to the data centre which would be another ¬£100-200. That's not to say we'd 100% support it if we raised that money but that's the sort of minimum ballpark figure, as you asked. It's also perhaps worth nothing that it's extremely likely that Travis CI will be dropping 10.9 support in the near future.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249143532,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T09:18:16Z",
		"body" : "@jeroenooms Also worth noting here: Mavericks will not receive toolchain updates from Apple and is unlikely to receive any except the most severe security patches (and even that's not guaranteed). The only difference in hardware requirements are 800MB more disk space so, even if it's a pain, anyone who wants to upgrade from 10.9 (and even 10.8) to 10.11 is capable of doing so.\r\n\r\nEven with that Mac Mini we would be unable to fix packages that upstream projects do not support Mavericks on and unable to block upgrades on needing Mavericks support. This means that, over time, Mavericks will become a worse and worse experience even if we tried our hardest to support it. OS X is simply not a platform where legacy support has been prioritised by Apple and very few open-source projects (us included) have the resources to step in where Apple has not.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249143933,
		"user" : {
			"login" : "jeroenooms"
		},
		"created_at" : "2016-09-23T09:20:14Z",
		"body" : "Yes I understand, it's sort of in \"extended support\" phase. Do you know if apple has any formal statements on if they will do security upgrades for mavericks? I can't find it anywhere.\r\n\r\nI'll ask around if anyone wants to support this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249144040,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T09:20:48Z",
		"body" : "> Do you know if apple has any formal statements on if they will do security upgrades for mavericks?\r\n\r\nThey don't. You watch for security updates in MAS, that's all.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249197581,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T13:46:52Z",
		"body" : "@jeroenooms Appreciate you asking about funding, FWIW.\r\n\r\nWe see a lot of people complaining we've dropped support for something or aren't doing enough of something, including some large, well-known companies but very few are willing to even contemplate financially supporting the project so we can better support their desired use case, so whatever happens, appreciate you asking about it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249198793,
		"user" : {
			"login" : "Alhadis"
		},
		"created_at" : "2016-09-23T13:51:45Z",
		"body" : "Yeah, give me a job and an income, and I'll happily donate what I can afford to.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249201910,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T14:04:36Z",
		"body" : "Wasn't an intended dig at anyone, just a matter-of-fact statement that FOSS has a significant funding issue & Homebrew is very much part of that. Even things like GnuPG which had this huge publicity rush around funding a while back & fundraising drive is [back down](https://gnupg.org/donate/kudos.html) to a smaller level of donations again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249368649,
		"user" : {
			"login" : "Alhadis"
		},
		"created_at" : "2016-09-24T14:52:48Z",
		"body" : "Okay, with the realisation that Adobe are also gonna ditch Mavericks, and that there's no (easy) way of running Adobe Creative Suite on Linux, I'm biting the bullet and installing this poorly-capitalised bucket of technicolour vomit called macOS sierRA. I look forward to stabbing the shit out of Siri, burning the shared clipboard, and making a holocaust of disabled features of crap I don't need.\r\n\r\nThese are the times I wish I wasn't a graphic designer AND a programmer.\r\n\r\n*idle ranting while waiting for download to finish*\r\n\r\n<img src=\"http://orig07.deviantart.net/7592/f/2011/057/b/7/steve_jobs_by_rware-d3af4rz.jpg\" width=\"300\" />",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249368725,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T14:54:24Z",
		"body" : "Please, let's keep pointless rants away from this thread because I don't want to lock it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249423343,
		"user" : {
			"login" : "hadley"
		},
		"created_at" : "2016-09-25T13:59:34Z",
		"body" : "@DomT4 @MikeMcQuaid: we can definitely provide funding ‚Äî can you please send me an email (in profile) to discuss details. We'll probably need a little paperwork (i.e. a one page invoice) but that's easier to discuss via email.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249423457,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T14:02:15Z",
		"body" : "@hadley Just so we're all on the same page are you aware of https://blog.travis-ci.com/2016-09-15-new-default-osx-image-coming/ which states Travis CI will be removing their Mavericks support soon? With that in mind: would it still be useful for you for us to support it?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249423603,
		"user" : {
			"login" : "jeroenooms"
		},
		"created_at" : "2016-09-25T14:04:57Z",
		"body" : "@MikeMcQuaid yes we are aware of that. We need this mostly for the R project. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249424097,
		"user" : {
			"login" : "hadley"
		},
		"created_at" : "2016-09-25T14:15:42Z",
		"body" : "@MikeMcQuaid we absolutely recognise that this is a short term solution, but it'll get the R community through the next 6-12 months, and then hopefully it'll still be useful to you all after that üòÑ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249424757,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T14:28:29Z",
		"body" : "@hadley @jeroenooms And I assume you do realize we can only bottle things when they work, and the support burden falls onto you when things break (and they won't block us from upgrades)?\r\n\r\nI would also be nice if you could give us a list of formulae you need if this \"deal\" works out, because bottling is a slow process.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249431033,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T16:24:56Z",
		"body" : "@jeroenooms I'm just checking you have additional hardware that you'll be able to use for the parts of the process not provided by Homebrew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249436387,
		"user" : {
			"login" : "jeroenooms"
		},
		"created_at" : "2016-09-25T18:08:26Z",
		"body" : "@MikeMcQuaid I don't have any hardware. Can you create an invoice for the expenses (hardware, shipping, etc) that it will take to keep bottling mavericks for one more year and send it to Hadley?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249443052,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T20:00:24Z",
		"body" : "@jeroenooms @hadley Sorry, I mean: you were saying \"the language has over 8000 contributed packages which get built on our Mavericks server\": is this one that's independent of Travis CI and Homebrew, currently, but just relies on our Mavericks bottles?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249443355,
		"user" : {
			"login" : "jeroenooms"
		},
		"created_at" : "2016-09-25T20:05:08Z",
		"body" : "Yes, it is independent of travis. We use static libraries from the homebrew bottles which get linked into our software on the mavericks build server.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249443541,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T20:08:48Z",
		"body" : "@jeroenooms How many Homebrew packages are you reliant upon, out of interest?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 249443608,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-09-25T20:10:09Z",
		"body" : "A tangent, while y'all are on the line: I'd be interested in knowing if it's possible for Homebrew's R distribution to consume CRAN's OS X package binaries; IIRC the r-project.org distribution is whitelisted and calling install.packages from Homebrew's R distribution always builds from source. Where's a good place for that conversation?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 250101647,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T08:16:01Z",
		"body" : "@jeroenooms @hadley I've given some thought and done some calculations and I think we're going to have to pass on this. It'll rely on a bunch of time from me which I won't have in the nearish future unfortunately (it'll be pretty much a full weekend job on top of my current full-time employment and other commitments). I really appreciate the genuine offer of funding and I'm happy to provide advice on how you could achieve a similar result of build caching using bottles within your own server/build system. Again, my apologies.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1056
	},
	{
		"id" : 248607926,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T13:12:29Z",
		"body" : "Nice spot, thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1057
	},
	{
		"id" : 248722849,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-21T19:49:51Z",
		"body" : "I'm not sure why there has to be more fiddling with people's gitconfig files.  Why can't this just be a shellvar that suppresses warnings if set and doesn't suppress warnings if unset?\r\n\r\nFor the record, I am in favor of such a shellvar.  I just don't see why brew needs to look for that shellvar and then write to or read from to the repo's gitconfig.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248723034,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-21T19:50:35Z",
		"body" : "If multiple suppressed \"versions\" need to be tracked, then the shellvar can be a colon or comma separated list.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248723768,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-21T19:53:26Z",
		"body" : "Having to set an env bar all the time does actual damage, especially when it's as long as this one. That's all I'm going to comment on this topic until someone with every power asks, by which point I'll explain the technical details.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248733583,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-21T20:30:47Z",
		"body" : "> Having to set an env var all the time does actual damage\r\n\r\nWhy would one set it \"all the time\"?  Wouldn't a user just put it in their `~/.profile`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248735191,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-21T20:36:51Z",
		"body" : "At all times.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248742928,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-21T21:06:02Z",
		"body" : "> At all times.\r\n\r\nBut then why stick it in the gitconfig, where it will be set \"at all times\"?  As far as I can see, it will be set even if the user *stops* setting the shallvar.\r\n\r\nRelated: how will the user who has asked for the warnings to be suppressed change her mind?  Unsetting the shellvar will not do it (because of lines 185-200 of brew.sh in the PR).  Manually dive into the gitconfig?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248743471,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-21T21:08:02Z",
		"body" : "`git config --unset {{whatever}}`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248744853,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-21T21:13:36Z",
		"body" : "And I assume @zmwangx's problem with Yet Another Environment Variable is that it pollutes the global environment for the entire shell session, whether you're using Homebrew at the moment or not. Too many environment variables could also presumably degrade performance, though I have done no research to find out if there is an appreciable effect.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248748262,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-21T21:27:23Z",
		"body" : "> git config --unset {{whatever}}?\r\n\r\nNot very user-friendly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248748812,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-21T21:29:41Z",
		"body" : "If performance is the concern, I'd be very, very shocked to find that one more shellvar has more of a negative effect than yet another git-config call.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248751922,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-21T21:43:15Z",
		"body" : "> But then why stick it in the gitconfig, where it will be set \"at all times\"?\r\n\r\nOkay, I really don't want to explain this, but let me explain. There's nothing wrong with enabling this behavior in brew at all times. The problem is having long and almost useless environment variables at all times in your environment. Every environment variable is part of `envv[]` that counts toward `ARG_MAX`, which is 262144 on Darwin. Having a single 34 character long environment variable may not be too big a deal, but when every piece of software asks you to set a bunch of junk, they do add up to something considerable. Currently my `env | wc -c` is around 5000 and I don't even have many variables set. I would try hard to avoid more bloat and I urge software developers to be considerate. Keep in mind, this is not unlimited resource (unlike another CPU cycle).\r\n\r\n> If performance is the concern, I'd be very, very shocked to find that one more shellvar has more of a negative effect than yet another git-config call.\r\n\r\nIf you care about performance no that front you probably want to optimize Ruby away.\r\n\r\n> how will the user who has asked for the warnings to be suppressed change her mind? \r\n\r\nI doubt it. If someone is seeking to re-enable a warning, I'd say the warning has served its purpose already. Plus it's very easy once you understand the mechanism.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248829077,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T07:10:54Z",
		"body" : "I'm with @chdiza: we should just make this another environment variable. The only reason we use the `gitconfig` stuff is for things that we want to set in the background for people without them having to specify an environment variable and I don't think this is that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248829405,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T07:13:10Z",
		"body" : "I'd suggest we wait for more than two people to complain about this before changing it. I think the ideal would be to only change the message we print before every e.g. `brew install` command if we set the environment variable and also in that case tell people to not report issues but instead file PRs. It may just be worth removing that warning altogether, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248831266,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-09-22T07:25:27Z",
		"body" : "> I'd suggest we wait for more than two people to complain about this before changing it.\r\n\r\nAnecdotally I've had several people complain to me personally about this, it just hasn't made it to the tracker.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248831778,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T07:28:55Z",
		"body" : "> Anecdotally I've had several people complain to me personally about this, it just hasn't made it to the tracker.\r\n\r\nGood enough for me üëç.\r\n\r\nPerhaps we just drop the warning from non-doctor and append something to the troubleshooting links? Honestly just having it in doctor is probably enough if we're prepared to instaclose 10.9 issues.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248841671,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T08:28:03Z",
		"body" : "The environment variable should definitely be set once and persist until we have a new criterion (hence my \"migration epoch\" thing). If you require it to be always set in order to suppress the warning, people will just drop it in their dotfiles, and never receive warnings again, ever.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248842170,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T08:30:53Z",
		"body" : "> If you require it to be always set in order to suppress the warning, people will just drop it in their dotfiles, and never receive warnings again, ever.\r\n\r\nThat seems fine, honestly?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248842455,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T08:32:34Z",
		"body" : "> That seems fine, honestly?\r\n\r\nUm, not for me it's not. @DomT4 disagrees too according to his comment on the other thread.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248842817,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T08:34:25Z",
		"body" : "I'm üëé on adding a git config line here. If we have an environment variable per-OS version that seems fine. Honestly, though, rather than making it optional I really think we should just adjust our defaults.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248843143,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T08:36:07Z",
		"body" : "> I'm üëé on adding a git config line here.\r\n\r\nFair enough, I don't feel strongly about the whole idea. \r\n\r\n> If we have an environment variable per-OS version\r\n\r\nWe don't need more env var bloat, thanks.\r\n\r\n> rather than making it optional I really think we should just adjust our defaults.\r\n\r\nWhat do you mean?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248843807,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T08:39:39Z",
		"body" : "> rather than making it optional I really think we should just adjust our defaults.\r\n\r\nEvery time we consider adding an option or environment variable it's worth asking: should we just change the default behaviour? Options are often a crutch for not doing design.\r\n\r\n> We don't need more env var bloat, thanks.\r\n\r\nI'm far more concerned about code bloat than environment variable bloat (which has never been an actual problem for us).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248845612,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T08:49:12Z",
		"body" : "> Every time we consider adding an option or environment variable it's worth asking: should we just change the default behaviour? Options are often a crutch for not doing design.\r\n\r\nYou mean we should consider not issuing such warnings?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248847133,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T08:57:20Z",
		"body" : "We should consider that, yes, and consider whether it'll cause more harm than good, whether there's enough users who would benefit from it (or the option). \r\n\r\nMy personal opinion is that we can tweak existing messaging rather than adding an option to opt-in to this behaviour.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248847339,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T08:58:22Z",
		"body" : "Even if you just print one line each time, it will be annoying to those who are annoyed by it. It's not about printing what, it's about printing *at all*.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248909203,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-22T13:51:31Z",
		"body" : "The shellvar can be a colon-separated list of major versions for which to suppress.  That way, even if someone leaves (say) a setting to suppress warnings for Mavericks in their `~/.profile` and totally forgets about it, eventually there will be warnings again if they are later on (say) Yosemite and it goes out of date.\r\n\r\n> We don't need more env var bloat, thanks.\r\n\r\nIf that is even a thing, it should not be replaced with bloat in the number of git-config calls.  (That would be OK, though, if we only read the whole gitconfig once and cached it for later lookup of particular settings inside it.  I'm not really sure why we aren't doing that, but that's a side point.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 249454821,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T23:53:14Z",
		"body" : "Closing due to lack of interest.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1058
	},
	{
		"id" : 248618094,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T13:49:49Z",
		"body" : "I guess it depends on intent; to me the previous message read as a description of what the command does in general rather than the next time you run it necessarily. Will let others chime in though. Your approach is nice.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1059
	},
	{
		"id" : 248622523,
		"user" : {
			"login" : "josephfrazier"
		},
		"created_at" : "2016-09-21T14:05:50Z",
		"body" : "Oh yeah, I now see how it could be interpreted either way, and agree on waiting for other opinions. Thanks for the quick feedback!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1059
	},
	{
		"id" : 248649048,
		"user" : {
			"login" : "josephfrazier"
		},
		"created_at" : "2016-09-21T15:31:16Z",
		"body" : "Hmm, maybe using \"Remove all versions with...\" regardless of `versions.length` would be better. It's flexible enough to avoid being interpreted as grammatically incorrect, and it still accurately describes the general behavior of `brew uninstall --force`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1059
	},
	{
		"id" : 248649267,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T15:31:55Z",
		"body" : "> Hmm, maybe using \"Remove all versions with...\" regardless of versions.length would be better. It's flexible enough to avoid being interpreted as grammatically incorrect, and it still accurately describes the general behavior of brew uninstall --force.\r\n\r\n@josephfrazier Sounds great!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1059
	},
	{
		"id" : 248834345,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T07:45:21Z",
		"body" : "Thanks for your contribution to Homebrew! Without people like you submitting PRs we couldn't run this project. You rock!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1059
	},
	{
		"id" : 248622230,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T14:04:44Z",
		"body" : "First report in https://github.com/Homebrew/brew/pull/998#issuecomment-248620297. Figuring out whether they had \"developer mode\" enabled.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1060
	},
	{
		"id" : 248622048,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T14:04:07Z",
		"body" : "> READ THIS: https://git.io/brew-troubleshooting\r\n> If reporting this issue please do so at (not Homebrew/brew):\r\n> https://github.com/Homebrew/homebrew-php/issues\r\n\r\nPlease do so.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1061
	},
	{
		"id" : 248636630,
		"user" : {
			"login" : "dfannius"
		},
		"created_at" : "2016-09-21T14:52:23Z",
		"body" : "I'm seeing a similar issue here (OS X 10.11.6). I've been using homebrew for a while, and this morning did a `brew update` without incident:\r\n```\r\n$ brew update\r\nUpdated Homebrew from a148aa3 to f6fef7c.\r\nUpdated 3 taps (caskroom/cask, homebrew/core, homebrew/science).\r\n```\r\nNow when I do a `brew update` I get this message:\r\n```\r\nChecking out v1.0.0 in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask run:\r\n  'cd /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.0' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.0' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.0\r\nAlready up-to-date.\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248637348,
		"user" : {
			"login" : "omtcyfz"
		},
		"created_at" : "2016-09-21T14:54:41Z",
		"body" : "@dfannius Yes, also during update. I actually tried to reinstall `brew`, because I thought that might be an issue.\r\n\r\nP.S. I am using `macOS Sierra 10.12`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248637491,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T14:55:07Z",
		"body" : "Thanks for the report! Can you both try `brew update`, see if that fixes it and if not run `brew update` again, see if that fixes it and if not run `brew update --force` and see if that fixes it and then post in this issue with what commands you had to run to get this to work. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248638288,
		"user" : {
			"login" : "omtcyfz"
		},
		"created_at" : "2016-09-21T14:57:30Z",
		"body" : "@MikeMcQuaid \r\nInstallation now gives\r\n\r\n```\r\n==> Tapping homebrew/core\r\nCloning into '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core'...\r\nremote: Counting objects: 3725, done.\r\nremote: Compressing objects: 100% (3617/3617), done.\r\nremote: Total 3725 (delta 15), reused 1250 (delta 0), pack-reused 0\r\nReceiving objects: 100% (3725/3725), 2.91 MiB | 2.11 MiB/s, done.\r\nResolving deltas: 100% (15/15), done.\r\nChecking connectivity... done.\r\nTapped 3604 formulae (3,752 files, 9M)\r\nChecking out v1.0.0 in /usr/local/Homebrew...\r\nTo checkout master in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout master\r\nAlready up-to-date.\r\n```\r\n\r\nIs this\r\n```\r\nTo checkout master in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout master\r\n```\r\nIntended, by the way?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248638368,
		"user" : {
			"login" : "dfannius"
		},
		"created_at" : "2016-09-21T14:57:44Z",
		"body" : "`brew update` and `brew update --force` both still fail. `brew update` still produces the same output as my first comment here, while `brew update --force` produces six copies of it, one for each tap (`homebrew-cask`, `homebrew-core`, etc.).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248638752,
		"user" : {
			"login" : "kjhealy"
		},
		"created_at" : "2016-09-21T14:58:57Z",
		"body" : "This just happened to me as well, also on macOS Sierra. Same pattern as @dfannius reports, both with `brew update` and `brew update --force`. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248639664,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T15:01:59Z",
		"body" : "@dfannius @kjhealy ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248640040,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T15:03:07Z",
		"body" : "@dfannius @kjhealy last thing to try: `git tag 1.0.1 origin/master && brew update --force; git tag -d 1.0.1`. Make sure to run the `git tag -d 1.0.1` at the end or Bad Things Will Happen.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248640864,
		"user" : {
			"login" : "kjhealy"
		},
		"created_at" : "2016-09-21T15:05:45Z",
		"body" : "@MikeMcQuaid The fix provided in the `Readme.md` seems to have cleared things up for me, with git reporting `v1.0.0` at the end of that process.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248642078,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T15:09:39Z",
		"body" : "I've [tagged 1.0.1](https://github.com/Homebrew/brew/releases/tag/1.0.1) which should address this with a `brew update` (or two). Please let me know in here if it takes two or if that still isn't enough (in which case try `brew update --force` and then post in here).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248643505,
		"user" : {
			"login" : "dezon"
		},
		"created_at" : "2016-09-21T15:14:14Z",
		"body" : "@MikeMcQuaid     `brew update` (two) and `brew update --force`   it's not work\r\n\r\n`‚ûú  local brew update --force\r\nChecking out v1.0.1 in /usr/local/Homebrew...\r\nTo checkout v1.0.0 in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout v1.0.0\r\nChecking out v1.0.1 in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask run:\r\n  'cd /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.1' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.1' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.1\r\nChecking out v1.0.1 in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-apache...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-apache run:\r\n  'cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-apache && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.1' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.1' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.1\r\nChecking out v1.0.1 in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core run:\r\n  'cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.1' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.1' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.1\r\nChecking out v1.0.1 in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-dupes...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-dupes run:\r\n  'cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-dupes && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.1' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.1' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.1\r\nChecking out v1.0.1 in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-php...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-php run:\r\n  'cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-php && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.1' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.1' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.1\r\nAlready up-to-date.`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248644801,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T15:18:17Z",
		"body" : "@dezon Run `brew update --force` multiple times (like 4-5x) and see if if it eventually works.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248645716,
		"user" : {
			"login" : "dezon"
		},
		"created_at" : "2016-09-21T15:21:15Z",
		"body" : "@MikeMcQuaid   updated to 1.0.1\r\n\r\n```\r\n‚ûú  local brew --version\r\nHomebrew 1.0.0 (git revision a381b; last commit 2016-09-21)\r\nHomebrew/homebrew-core (git revision 0fad; last commit 2016-09-21)\r\n‚ûú  local brew update --force\r\nChecking out v1.0.1 in /usr/local/Homebrew...\r\nTo checkout v1.0.1 in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout v1.0.1\r\nUpdated 2 taps (caskroom/cask, homebrew/core).\r\n==> Updated Formulae\r\naws-sdk-cpp           global                ipfs                  offlineimap           sonar-runner\r\nfzf                   gupnp                 khard                 reposurgeon\r\n‚ûú  local brew update --force\r\nChecking out v1.0.1 in /usr/local/Homebrew...\r\nTo checkout v1.0.1 in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout v1.0.1\r\nAlready up-to-date.\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248645892,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T15:21:44Z",
		"body" : "@dezon Glad it's working. It seems the first time it'll print some unhelpful messages but still update and the second time everything will be fine. Thanks all!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248646164,
		"user" : {
			"login" : "omtcyfz"
		},
		"created_at" : "2016-09-21T15:22:35Z",
		"body" : "@MikeMcQuaid thank you for quick reaction!\r\n\r\nIs\r\n```\r\nTo checkout v1.0.1 in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout v1.0.1\r\n```\r\n\r\nHow it should work now?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248646341,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T15:23:08Z",
		"body" : "@omtcyfz You can either `git checkout v1.0.1` or just leave `brew update` and it'll handle it correctly either way.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248646597,
		"user" : {
			"login" : "leewalsh"
		},
		"created_at" : "2016-09-21T15:23:55Z",
		"body" : "I had this too but I think the 1.01 tagging fixed it:\r\n\r\n    leewalsh@warbler /usr/l/Homebrew (v1.0.0|‚úî)> brew update\r\n    Checking out v1.0.1 in /usr/local/Homebrew...\r\n    To checkout v1.0.0 in /usr/local/Homebrew run:\r\n      'cd /usr/local/Homebrew && git checkout v1.0.0\r\n    Checking out v1.0.1 in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask...\r\n    To checkout master in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask run:\r\n      'cd /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask && git checkout master\r\n    fatal: Cannot update paths and switch to branch 'v1.0.1' at the same time.\r\n    Did you intend to checkout 'refs/tags/1.0.1' which can not be resolved as commit?\r\n    fatal: Needed a single revision\r\n    invalid upstream refs/tags/1.0.1\r\n    Updated Homebrew from d5b6ecf to a381b59.\r\n    No changes to formulae.\r\n    leewalsh@warbler /usr/l/Homebrew (v1.0.1|‚úî)> brew update\r\n    Updated 1 tap (caskroom/cask).\r\n    No changes to formulae.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248646966,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T15:25:07Z",
		"body" : "Yep, basically it'll complain the first time as it tries to look for a tag on all repositories and then afterwards it'll be all üÜó. The weird complaints the first time will not cause any issues beyond üòï people.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248647127,
		"user" : {
			"login" : "omtcyfz"
		},
		"created_at" : "2016-09-21T15:25:38Z",
		"body" : "@MikeMcQuaid aha, I see. Thank you very much!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248672616,
		"user" : {
			"login" : "lorantalas"
		},
		"created_at" : "2016-09-21T16:49:03Z",
		"body" : "@MikeMcQuaid I got same error with 1.0, then run `brew update` multiple times and got same errors (1.0.1 have already released). Then I try `brew update --force` and `git checkout 1.0.1`.  \r\nSo now I have: \r\n`brew update` -> `Already up-to-date.` \r\n`git status` -> `On branch v1.0.1`, \r\n`brew update --force` ->\r\n`Checking out v1.0.1 in /usr/local/Homebrew...\r\nTo checkout v1.0.1 in /usr/local/Homebrew run:\r\n'cd /usr/local/Homebrew && git checkout v1.0.1\r\nAlready up-to-date.`\r\n`brew --version` ->\r\n`Homebrew 1.0.0 (git revision a381b; last commit 2016-09-21)\r\nHomebrew/homebrew-core (git revision 6e220; last commit 2016-09-21)`\r\nI just report, this isn't a problem, big thanks for 1.0.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248717003,
		"user" : {
			"login" : "jtsom"
		},
		"created_at" : "2016-09-21T19:28:22Z",
		"body" : "I've tried all the things listed here and `brew --version` still reports 1.0.0, even after doing `git checkout v1.0.1`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248718066,
		"user" : {
			"login" : "leewalsh"
		},
		"created_at" : "2016-09-21T19:32:05Z",
		"body" : "Mine too @jtsom, though that is not this issue.\r\n\r\n    leewalsh@warbler ~> cd (brew --repo)\r\n\r\n    leewalsh@warbler /usr/local/Homebrew (v1.0.1|‚úî)> git status\r\n    On branch v1.0.1\r\n    nothing to commit, working tree clean\r\n\r\n    leewalsh@warbler /usr/local/Homebrew (v1.0.1|‚úî)> brew --version\r\n    Homebrew 1.0.0 (git revision a381b; last commit 2016-09-21)\r\n    Homebrew/homebrew-core (git revision 48e0; last commit 2016-09-21)\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248722625,
		"user" : {
			"login" : "opearo"
		},
		"created_at" : "2016-09-21T19:49:06Z",
		"body" : "@MikeMcQuaid needed a version update in Library/Homebrew/brew.sh for MR #1060\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248831083,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T07:24:19Z",
		"body" : "> @MikeMcQuaid needed a version update in Library/Homebrew/brew.sh for MR #1060\r\n\r\nYep, exactly. Apologies folks: the messaging/versioning is confusing but we will fix it for the next release. If you are on 1.0.1 it will still say 1.0.0: sorry about that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1062
	},
	{
		"id" : 248646683,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T15:24:12Z",
		"body" : "> 1.0.2_h\r\n\r\nThis is the latest stable release of OpenSSL: https://www.openssl.org/source/. When they release a newer version we'll install that. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1063
	},
	{
		"id" : 248688283,
		"user" : {
			"login" : "mikelupo"
		},
		"created_at" : "2016-09-21T17:45:12Z",
		"body" : "Hi Mike. \r\nThanks for the quick response. And for Brew. Love the tool.\r\n\r\nI suppose it would be a feature request to allow the forced usage of a specific version of a library? It would certainly be particularly useful.\r\n\r\nThanks again.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1063
	},
	{
		"id" : 248828600,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T07:07:46Z",
		"body" : "@mikelupo We may allow you to force major/minor versions in future. We'll never allow forcing patch versions for security reasons.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1063
	},
	{
		"id" : 248652289,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T15:41:37Z",
		"body" : "Could you tell people to change it back afterwards? Also, how would you feel about printing a message with either the command to run and letting them do it themselves or, alternatively, the command you're about to run before you run it?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1064
	},
	{
		"id" : 248674973,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-21T16:57:06Z",
		"body" : "We could alternatively use `sudo mv` instead of `chmod`ding `/usr/local`, this way we don't need to change the permissions back.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1064
	},
	{
		"id" : 248657833,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T15:59:05Z",
		"body" : "Thanks @ronaldpetty! GitHub stars, one-off and recurring tax-deductible donations (even if very small) are all appreciated but your kind words are most important ‚ù§Ô∏è ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1065
	},
	{
		"id" : 248658496,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-21T16:01:09Z",
		"body" : "And I forgot the donations link for anyone else who stumbles across this: https://github.com/Homebrew/brew#donations",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1065
	},
	{
		"id" : 248674978,
		"user" : {
			"login" : "zyradyl"
		},
		"created_at" : "2016-09-21T16:57:08Z",
		"body" : "@MikeMcQuaid Just wanted to throw in here without opening another issue. I can't tell you how much I appreciate this project, the workflow improvements alone, plus how hackable it is. You guys have done great with it.\r\n\r\nLook forward to seeing more from you guys <3\r\n\r\nAlso hoping to donate here soon :P",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1065
	},
	{
		"id" : 248830769,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T07:22:11Z",
		"body" : "Thanks again @maxim-belkin!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1066
	},
	{
		"id" : 248676766,
		"user" : {
			"login" : "LogicalKnight"
		},
		"created_at" : "2016-09-21T17:03:31Z",
		"body" : "Ack! Nevermind. I just saw v1.0.1 come down that fixes this. Sorry for the noise.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1067
	},
	{
		"id" : 248678832,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-21T17:11:00Z",
		"body" : "Sorry for the trouble.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1067
	},
	{
		"id" : 248680568,
		"user" : {
			"login" : "LogicalKnight"
		},
		"created_at" : "2016-09-21T17:17:31Z",
		"body" : "No problem. But, should this be reopened? I had to manually update to 1.0.1 as brew would not go from 1.0.0 to 1.0.1 automatically.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1067
	},
	{
		"id" : 248681369,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-21T17:20:21Z",
		"body" : "I haven't been following this round of issues closely due to work at hand but I think the discussions are mainly happening in the PR that introduced updating to tags: #998.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1067
	},
	{
		"id" : 248683627,
		"user" : {
			"login" : "LogicalKnight"
		},
		"created_at" : "2016-09-21T17:28:35Z",
		"body" : "That's it. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1067
	},
	{
		"id" : 248707948,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-09-21T18:54:56Z",
		"body" : "In the `test`:\r\n```\r\n/usr/local/Homebrew/Library/Homebrew/cask/test\r\n(rubocop-fix) $ brew cask style --fix\r\n== /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask/Casks/launchpad-manager-yosemite.rb ==\r\nC: 23:  1: [Corrected] stanza groups should be separated by a single empty line\r\nC: 23:  1: [Corrected] Trailing whitespace detected.\r\nC: 24:  1: [Corrected] Extra blank line detected.\r\n\r\n3317 files inspected, 3 offenses detected, 3 offenses corrected\r\n```\r\n\r\nand the second one:\r\n```\r\n/usr/local/Homebrew/Library/Homebrew/cask/spec/cask\r\n(rubocop-fix) $ brew cask style --fix\r\n\r\n3317 files inspected, no offenses detected\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1068
	},
	{
		"id" : 248728076,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-21T20:09:27Z",
		"body" : "@maxim-belkin The directory you run the command from doesn't matter. Instead, run `brew cask style /usr/local/Homebrew/Library/Homebrew/cask/{test,spec}/support/Casks/*.rb`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1068
	},
	{
		"id" : 248728396,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-09-21T20:10:44Z",
		"body" : "@jawshooah ok.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1068
	},
	{
		"id" : 248729885,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-09-21T20:16:22Z",
		"body" : "@jawshooah https://gist.github.com/maxim-belkin/739730feb7ad404a0021c11164d10a2c",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1068
	},
	{
		"id" : 248740426,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-21T20:56:21Z",
		"body" : "Ok, seems like all the offenses reported don't apply to the test casks. Good to go then.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1068
	},
	{
		"id" : 248740599,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-21T20:57:03Z",
		"body" : "Thanks, @maxim-belkin!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1068
	},
	{
		"id" : 248740794,
		"user" : {
			"login" : "maxim-belkin"
		},
		"created_at" : "2016-09-21T20:57:46Z",
		"body" : "np!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1068
	},
	{
		"id" : 248798163,
		"user" : {
			"login" : "alswl"
		},
		"created_at" : "2016-09-22T02:58:21Z",
		"body" : "It was in `vv0.60.0` version, git hash `f2c2f85`, there is no `bin`, and was modified in 10 month ago.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1070
	},
	{
		"id" : 248798277,
		"user" : {
			"login" : "alswl"
		},
		"created_at" : "2016-09-22T02:59:14Z",
		"body" : "Fix with `cd /usr/local/Homebrew; git checkout master`,\r\n\r\nDO NOT `brew update` now!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1070
	},
	{
		"id" : 248829805,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T07:15:42Z",
		"body" : "Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/docs/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1070
	},
	{
		"id" : 249062142,
		"user" : {
			"login" : "eMdOS"
		},
		"created_at" : "2016-09-22T23:59:11Z",
		"body" : "I did it, but nothing there solved my problem.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1070
	},
	{
		"id" : 249117685,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T07:01:31Z",
		"body" : "@eMdOS Yes but we need the information it instructs you to provide to help you. I'll reopen this when you read it and provide it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1070
	},
	{
		"id" : 249429890,
		"user" : {
			"login" : "miomao656"
		},
		"created_at" : "2016-09-25T16:04:55Z",
		"body" : "i have the same issue, running 10.11.6 osx, i cant do the troubleshooting because `-bash: brew: command not found`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1070
	},
	{
		"id" : 249469494,
		"user" : {
			"login" : "alswl"
		},
		"created_at" : "2016-09-26T03:00:57Z",
		"body" : "Now `brew udpate` works well, the git hash is `817bc2746e594761911edd78f743a640f089494f`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1070
	},
	{
		"id" : 249521733,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T09:26:19Z",
		"body" : "@miomao656 https://github.com/homebrew/install#uninstall-homebrew",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1070
	},
	{
		"id" : 249619522,
		"user" : {
			"login" : "miomao656"
		},
		"created_at" : "2016-09-26T16:20:17Z",
		"body" : "i get this message when trying to uninstall `Failed to locate Homebrew!`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1070
	},
	{
		"id" : 249796918,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:14:08Z",
		"body" : "@miomao656 You'll need to delete your files manually or run `ln -sf /usr/local/Homebrew/bin/brew /usr/local/bin/brew` which may fix your installation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1070
	},
	{
		"id" : 250285368,
		"user" : {
			"login" : "miomao656"
		},
		"created_at" : "2016-09-28T20:11:45Z",
		"body" : "tnx this command line worked :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1070
	},
	{
		"id" : 248813834,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-09-22T05:05:29Z",
		"body" : "Looks like you've ended up in an older version of Homebrew. Can you try this:\r\n\r\n```\r\ncd /usr/local/Homebrew\r\ngit fetch origin\r\ngit checkout 1.0.1\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 248833493,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T07:40:05Z",
		"body" : "If that fails try `cd /usr/local Homebrew; git fetch origin; git reset --hard origin/master`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 248900599,
		"user" : {
			"login" : "mrvkino"
		},
		"created_at" : "2016-09-22T13:17:25Z",
		"body" : "@mistydemeo solution worked until I did a 'brew upgrade', then the error came back. Once I did @MikeMcQuaid command it fixed everything and it seems to stick. Thanks for the help.\r\n\r\nHere are the results of the first test, with the 'git checjout 1.0.1 if you are interested':\r\n`> git checkout 1.0.1\r\nChecking out files: 100% (3796/3796), done.\r\nNote: checking out '1.0.1'.\r\n\r\n(detached HEAD warning by git)\r\n\r\n> brew --version\r\nHomebrew 1.0.0 (git revision a381b; last commit 2016-09-21)\r\nHomebrew/homebrew-core (git revision 1938; last commit 2016-09-21)\r\n\r\n> brew upgrade\r\nChecking out vpr-24686 in /usr/local/Homebrew...\r\nTo checkout  in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout\r\n/usr/local/bin/brew: /usr/local/Homebrew/Library/brew.rb: /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby: bad interpreter: No such file or directory\r\n/usr/local/bin/brew: line 21: /usr/local/Homebrew/Library/brew.rb: Undefined error: 0\r\n/System/Library/Frameworks/Ruby.framework/Versions/Current/usr/bin/ruby: No such file or directory -- /usr/local/Homebrew/Library/Homebrew/brew.rb (LoadError)\r\n\r\n> brew\r\n/usr/local/bin/brew: /usr/local/Homebrew/Library/brew.rb: /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby: bad interpreter: No such file or directory\r\n/usr/local/bin/brew: line 21: /usr/local/Homebrew/Library/brew.rb: Undefined error: 0\r\n`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 248913933,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T14:08:18Z",
		"body" : "Glad to hear it's working ok!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 249153209,
		"user" : {
			"login" : "synthmeat"
		},
		"created_at" : "2016-09-23T10:06:57Z",
		"body" : "This reappears to me after every `brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 249153562,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T10:08:55Z",
		"body" : "@synthmeat Can we see your `brew config` from when it's working? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 249154232,
		"user" : {
			"login" : "synthmeat"
		},
		"created_at" : "2016-09-23T10:12:43Z",
		"body" : "Of course.\r\n\r\n```\r\n$ brew config\r\nHOMEBREW_VERSION: 1.0.2-45-g9001855-dirty\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: 9001855d64c4f069a0983cf0b82815766fd9c035\r\nLast commit: 32 minutes ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 966383f9e13e03c53290f38bea3a94f6fa4bddc6\r\nCore tap last commit: 4 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local/Homebrew\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: quad-core 64-bit haswell\r\nHomebrew Ruby: 2.0.0-p648\r\nGCC-4.2: build 5666\r\nClang: 8.0 build 800\r\nGit: 2.10.0 => /usr/local/bin/git\r\nPerl: /usr/local/bin/perl => /usr/local/Cellar/perl/5.24.0_1/bin/perl\r\nPython: /usr/local/bin/python => /usr/local/Cellar/python/2.7.12/Frameworks/Python.framework/Versions/2.7/bin/python2.7\r\nRuby: /usr/local/bin/ruby => /usr/local/Cellar/ruby/2.3.1/bin/ruby\r\nJava: 1.8.0_45, 1.8.0_25\r\nmacOS: 10.12-x86_64\r\nXcode: 8.0\r\nCLT: N/A\r\nX11: 2.7.9 => /opt/X11\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 249154756,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T10:15:42Z",
		"body" : "And after you run `brew update` what does `GIT_DIR=/usr/local/Homebrew git show` say and `GIT_DIR=/usr/local/Homebrew git tag --list --sort=-version:refname`? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 249155146,
		"user" : {
			"login" : "synthmeat"
		},
		"created_at" : "2016-09-23T10:17:41Z",
		"body" : "```\r\n12:16 synthmeat@zrak /Users/synthmeat \r\n$ GIT_DIR=/usr/local/Homebrew git show\r\nfatal: Not a git repository: '/usr/local/Homebrew'\r\n12:16 synthmeat@zrak /Users/synthmeat \r\n$ GIT_DIR=/usr/local/Homebrew git tag --list --sort=-version:refname\r\nfatal: Not a git repository: '/usr/local/Homebrew'\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 249155443,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T10:19:04Z",
		"body" : "Whoops, sorry, forgot my Git syntax:\r\n\r\n`GIT_DIR=/usr/local/Homebrew/.git git show` say and `GIT_DIR=/usr/local/Homebrew/.git git tag --list --sort=-version:refname` after running `brew update` and seeing that same error message. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 249155713,
		"user" : {
			"login" : "synthmeat"
		},
		"created_at" : "2016-09-23T10:20:24Z",
		"body" : "```\r\n12:19 synthmeat@zrak /usr/local/Homebrew [vpr-24686]\r\n$ GIT_DIR=/usr/local/Homebrew/.git git show\r\ncommit a74577d5a6ef480240cb2cb2055c8cc8ce301828\r\nAuthor: BrewTestBot <brew-test-bot@googlegroups.com>\r\nDate:   Wed Nov 27 08:53:02 2013 +0000\r\n\r\n    git: update 1.8.4.3 bottle.\r\n\r\ndiff --git a/Library/Formula/git.rb b/Library/Formula/git.rb\r\nindex b6455ec..f02b53e 100644\r\n--- a/Library/Formula/git.rb\r\n+++ b/Library/Formula/git.rb\r\n@@ -7,9 +7,10 @@ class Git < Formula\r\n   head 'https://github.com/git/git.git'\r\n \r\n   bottle do\r\n-    sha1 'ff5dc5105e0a56bf016139ae0c6dda12f4234c32' => :mavericks\r\n-    sha1 'd2c663ea9922ab16b5e789e461aa62d2e0cb1072' => :mountain_lion\r\n-    sha1 'd88e30d0f7fe799c4baf62aef544b3c5d96be9e6' => :lion\r\n+    revision 1\r\n+    sha1 'b30e3fbe6b8e4e3307c96b5924378ad302deb5ab' => :mavericks\r\n+    sha1 '17d2cde9690251789672218a52113cfa8a702560' => :mountain_lion\r\n+    sha1 'b5a0da40e046f706dc303cc853b8466e81e081ba' => :lion\r\n   end\r\n \r\n   option 'with-blk-sha1', 'Compile with the block-optimized SHA1 implementation'\r\n```\r\n\r\n```\r\n12:19 synthmeat@zrak /usr/local/Homebrew [vpr-24686]\r\n$ GIT_DIR=/usr/local/Homebrew/.git git tag --list --sort=-version:refname\r\npr-24686\r\npr-24201\r\n1.0.2\r\n1.0.1\r\n1.0.0\r\n0.9.9\r\n0.9.8\r\n0.9.5\r\n0.9.4\r\n0.9.3\r\n0.9.2\r\n0.9.1\r\n0.9\r\n0.8.1\r\n0.8\r\n0.7.1\r\n0.7\r\n0.6\r\n0.5\r\n0.4\r\n0.3\r\n0.2\r\n0.1\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 249156115,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T10:22:48Z",
		"body" : "Huh, fun. Thanks for helping us find a weird edge-case! The workaround for you is to `GIT_DIR=/usr/local/Homebrew/.git git tag -d pr-24686 pr-24201` and then rerun `brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 249156367,
		"user" : {
			"login" : "synthmeat"
		},
		"created_at" : "2016-09-23T10:24:28Z",
		"body" : "No, still the same error.\r\n\r\n```\r\n12:19 synthmeat@zrak /usr/local/Homebrew [vpr-24686]\r\n$ GIT_DIR=/usr/local/Homebrew/.git git tag -d pr-24686 pr-24201\r\nDeleted tag 'pr-24686' (was de96974)\r\nDeleted tag 'pr-24201' (was a2f37ea)\r\n```\r\n\r\n```\r\n12:23 synthmeat@zrak /usr/local/Homebrew [vpr-24686]\r\n$ brew update\r\n/usr/local/bin/brew: /usr/local/Homebrew/Library/brew.rb: /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby: bad interpreter: No such file or directory\r\n/usr/local/bin/brew: line 21: /usr/local/Homebrew/Library/brew.rb: Undefined error: 0\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 249157001,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T10:27:55Z",
		"body" : "Sorry, you'll need to `git reset --hard` once more, then `brew update` and things should still be üÜó.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 249157379,
		"user" : {
			"login" : "synthmeat"
		},
		"created_at" : "2016-09-23T10:30:07Z",
		"body" : "Yes, after `git reset --hard origin/master` everything appears to be in order.\r\n\r\nThank you!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 249158301,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T10:35:14Z",
		"body" : "Great!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1071
	},
	{
		"id" : 248780699,
		"user" : {
			"login" : "derekschinke"
		},
		"created_at" : "2016-09-22T00:25:06Z",
		"body" : "that command doesn't even work for me. I get the same error even after running that command",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 248781379,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T00:30:37Z",
		"body" : "I haven't got time to look into this issue but I guess it's just stupid warning that shouldn't be printed.\r\n\r\nIf you run\r\n\r\n```\r\n$ cd /usr/local/Homebrew && git describe --tags\r\n```\r\n\r\nand see 1.0.1 then all is well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 248783158,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T00:44:23Z",
		"body" : "> edit: it was originally telling me to run cd /usr/local/Homebrew && git checkout master, then I ran brew upgrade, and it now tells me to run cd /usr/local/Homebrew && git checkout v1.0.1\r\n\r\nIt tells you to checkout master because you were originally on the master branch and were switched to v1.0.1 by the update. You should stay that way, and the message should have been \"if you *really* want to switch back to master (probably not) you should blah blah\".\r\n\r\nAs for telling you how to switch to v1.0.1 when you're already on v1.0.1: that's just a flaw in the logic introduced in #1060 that led to the message being printed when it shouldn't. It doesn't mean any actual problem with your installation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 248783826,
		"user" : {
			"login" : "rpkoller"
		},
		"created_at" : "2016-09-22T00:49:54Z",
		"body" : "@zmwangx thanks for getting back that fast! well i did a `git describe --tags`and it shows 1.0.1. So all should be fine and i can ignore the warning. Cool :) thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 248794809,
		"user" : {
			"login" : "azdavis"
		},
		"created_at" : "2016-09-22T02:26:20Z",
		"body" : "Will Homebrew automatically check out a branch with the current version going forward?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 248821370,
		"user" : {
			"login" : "emilyaviva"
		},
		"created_at" : "2016-09-22T06:16:17Z",
		"body" : "And, will this message be suppressed at some point in the future? It's confusing enough as it is, especially if you're not 100% fluent with how Homebrew and/or Git works.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 248830082,
		"user" : {
			"login" : "ivankarpovic"
		},
		"created_at" : "2016-09-22T07:17:42Z",
		"body" : "@emilyaviva man, why do you cr–æssdr–µss? Gr–æss.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 248830156,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T07:18:07Z",
		"body" : "@ivankarpovic You've been banned from Homebrew for life.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 248830587,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T07:20:58Z",
		"body" : "This is a crappy and confusing message, I agree. We will fix it in future so it's not confusing. The only problem is the messaging (and incorrect version number, I forgot to bump it to 1.0.1) and not the actual way the command behaves.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 248918238,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T14:22:47Z",
		"body" : "Released, run `brew update` (twice).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 248918594,
		"user" : {
			"login" : "alex"
		},
		"created_at" : "2016-09-22T14:24:06Z",
		"body" : "@MikeMcQuaid That doesn't appear sufficient:\r\n\r\n```\r\n~ $ brew update\r\nChecking out v1.0.1 in /usr/local/Homebrew...\r\nTo checkout v1.0.1 in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout v1.0.1\r\nAlready up-to-date.\r\n~ $ brew update\r\nChecking out v1.0.1 in /usr/local/Homebrew...\r\nTo checkout v1.0.1 in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout v1.0.1\r\nAlready up-to-date.\r\n~ $ brew update\r\nChecking out v1.0.1 in /usr/local/Homebrew...\r\nTo checkout v1.0.1 in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout v1.0.1\r\nAlready up-to-date.\r\n~ $ brew upgrade\r\nChecking out v1.0.1 in /usr/local/Homebrew...\r\nTo checkout v1.0.1 in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout v1.0.1\r\n~ $ brew upgrade\r\nChecking out v1.0.1 in /usr/local/Homebrew...\r\nTo checkout v1.0.1 in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout v1.0.1\r\n~ $ brew upgrade\r\nChecking out v1.0.1 in /usr/local/Homebrew...\r\nTo checkout v1.0.1 in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout v1.0.1\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 248964384,
		"user" : {
			"login" : "emilyaviva"
		},
		"created_at" : "2016-09-22T17:01:44Z",
		"body" : "It correctly suppressed the message for me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 248981483,
		"user" : {
			"login" : "rhanneken"
		},
		"created_at" : "2016-09-22T18:06:41Z",
		"body" : "Running `brew update` twice didn't work for me either.  Inspired by [this post](http://community.brew.sh/t/strange-message-checking-out-v1-0-1-in-usr-local-homebrew/70/5), I tried `cd \"$(brew --repo)\"; git fetch`, then did `brew update`.  That worked for me.\r\n\r\nI see [someone else](http://community.brew.sh/t/brew-1-0-2-was-released-and-it-should-fix-all-your-tag-problems/93/11) is saying this will work: `brew update --force; brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 249011617,
		"user" : {
			"login" : "miccal"
		},
		"created_at" : "2016-09-22T20:00:13Z",
		"body" : "Message suppressed for me too, but `brew --version` reports `Homebrew >1.0.0 (no git repository)`, is this normal? ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 249024643,
		"user" : {
			"login" : "rhanneken"
		},
		"created_at" : "2016-09-22T20:53:17Z",
		"body" : "@miccal: I get the same output for `brew --version`, and so does someone else I asked to run the command.  Except: if I do\r\n\r\n```sh\r\ncd \"$(brew --repo)\"\r\nbrew --version\r\n```\r\n\r\n&hellip;then I get this:\r\n\r\n```\r\nHomebrew 1.0.2\r\nHomebrew/homebrew-core (git revision 2775; last commit 2016-09-22)\r\n```\r\n\r\nI suspect `brew --version` just outputs the value of `HOMEBREW_VERSION`, defined [here](https://github.com/Homebrew/brew/blob/1.0.2/Library/Homebrew/brew.sh#L1-L5):\r\n\r\n```sh\r\nHOMEBREW_VERSION=\"$(git describe --tags --dirty 2>/dev/null)\"\r\nif [[ -z \"$HOMEBREW_VERSION\" ]]\r\nthen\r\n  HOMEBREW_VERSION=\">1.0.0 (no git repository)\"\r\nfi\r\n```\r\n\r\nThe value seems to be sensitive to which directory you're in when you execute the `brew` command.  My guess is that this is a bug.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 249025984,
		"user" : {
			"login" : "tsparber"
		},
		"created_at" : "2016-09-22T20:58:43Z",
		"body" : "@rhanneken see #1090 (already being fixed üòâ)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 249027182,
		"user" : {
			"login" : "miccal"
		},
		"created_at" : "2016-09-22T21:03:26Z",
		"body" : "Thanks @rhanneken and @tsparber.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1072
	},
	{
		"id" : 248785854,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T01:03:45Z",
		"body" : "When I log in with a sock puppet (shh!) it does 404 for me. But when I'm logged into this account it doesn't. I think only an org owner can access that page.\r\n\r\nBy the way, the ordering looks totally inscrutable to me...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1073
	},
	{
		"id" : 248789818,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-22T01:32:08Z",
		"body" : "Ah, yes, when I check with an organisation I'm an _owner_ of, rather than just a member, I can access it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1073
	},
	{
		"id" : 248829978,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T07:16:59Z",
		"body" : "Thanks @penman!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1073
	},
	{
		"id" : 248848821,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-22T09:06:14Z",
		"body" : "Reverse dependencies that would be affected, assuming that the Xcode requirement cannot be eliminated for their dependency, are\r\n\r\ngraphvis:\r\n- bokken\r\n- eralchemy\r\n- fobis\r\n- ford\r\n- gammaray\r\n- gprof2dot\r\n- json-fortran\r\n- makefile2graph\r\n- plantuml\r\n- simgrid\r\n- xdot\r\n\r\nphantomjs:\r\n- asciinema2gif\r\n- casperjs\r\n\r\nunar:\r\n- ievms\r\n\r\nqt5:\r\n- codequery\r\n- dspdfviewer\r\n- gammaray\r\n- opencsg\r\n- pushpin\r\n- pyqt5\r\n- qbs\r\n- qcachegrind\r\n- qjackctl\r\n- qscintilla2\r\n- sqliteman\r\n- zurl\r\n\r\nplus any qt reverse dependencies as they are transitioned to qt5:\r\n- automoc4\r\n- binwalk\r\n- bzr-explorer\r\n- coin\r\n- cuty_capt\r\n- djview4\r\n- ezlupdate\r\n- frescobaldi\r\n- git-cola\r\n- gnuradio\r\n- gpsbabel\r\n- libechonest\r\n- liblastfm\r\n- libqglviewer\r\n- puddletag\r\n- pyqt\r\n- pyside-tools\r\n- pyside\r\n- qbzr\r\n- qca\r\n- qjson\r\n- quazip\r\n- qwt\r\n- qwtpolar\r\n- qxmpp\r\n- rcssserver\r\n- shiboken\r\n- sqliteman\r\n- treeline\r\n- valkyrie\r\n- weboob",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1075
	},
	{
		"id" : 249369647,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:12:14Z",
		"body" : "Another thing that may help some of these: depending on our `swift` formula rather than Xcode for some swift stuff.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1075
	},
	{
		"id" : 249369763,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T15:14:27Z",
		"body" : "Would a `:swift` requirement make sense, able to be satisfied by `Xcode.app` or our `swift` formula?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1075
	},
	{
		"id" : 249370353,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:25:08Z",
		"body" : "@ilovezfs Yep üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1075
	},
	{
		"id" : 249370365,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:25:30Z",
		"body" : "Although, I'm an idiot because actually Swift is provided by the CLT...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1075
	},
	{
		"id" : 249371139,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T15:40:40Z",
		"body" : ">I'm an idiot\r\n\r\nWell, now we know that's not true.\r\n\r\n>because actually Swift is provided by the CLT...\r\n\r\nmaybe it wasn't originally? somehow that memory got there! hehe",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1075
	},
	{
		"id" : 249384446,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-24T19:59:58Z",
		"body" : "Gotta be honest, I'm pretty üò¢ about the prospect of moving anything more to a tap that isn't the boneyard. At this point I'm prepared to call the vast majority of Homebrew organisation non-core taps a failed project, especially around getting communities interested in maintaining them & keeping them up-to-date that way.\r\n\r\nTaps are vastly unloved & I think we're genuinely better boneyarding things we no longer want to maintain than chucking them in a tap with a vague promise that maybe it won't be more-or-less abandoned fairly imminently.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1075
	},
	{
		"id" : 249397016,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-25T01:25:32Z",
		"body" : "> it may make sense to put formulae that have a hard Xcode.app dependency in their own tap.\r\n\r\nI'm curious as to what would be gained by doing this.\r\n\r\nAs to what would be lost by doing this, I can think of at least two things:  the more times the user has to tap something, the more annoying it is for the user.  And the more times the user has to type \"sometapname/someformulaname\" rather than \"someformulaname\", the more annoying it is for the user.  There should be some kind of significant gain to offset this.\r\n\r\n(This wouldn't affect me personally, since everything on that list that I use I've either already made my own custom local formula for, or don't use HB to manage.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1075
	},
	{
		"id" : 249406589,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-25T07:05:00Z",
		"body" : "Yup, the CLT alone is insufficient to prop up what rightfully belongs in core.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1075
	},
	{
		"id" : 249514293,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T08:51:38Z",
		"body" : "> Gotta be honest, I'm pretty üò¢ about the prospect of moving anything more to a tap that isn't the boneyard. At this point I'm prepared to call the vast majority of Homebrew organisation non-core taps a failed project, especially around getting communities interested in maintaining them & keeping them up-to-date that way.\r\n> \r\n> Taps are vastly unloved & I think we're genuinely better boneyarding things we no longer want to maintain than chucking them in a tap with a vague promise that maybe it won't be more-or-less abandoned fairly imminently.\r\n\r\nThat's pretty fair. Unless it's a single maintainers pet project (e.g. @dunn and homebrew/emacs) or an existing community tap we've brought in (e.g. homebrew/php, homebrew/science) the taps that are basically \"not good enough for core but we feel bad saying no\" are fairly dismal and we should consider shutting them down and moving stuff into core or the boneyard.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1075
	},
	{
		"id" : 248839241,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T08:14:07Z",
		"body" : "Do we really want to know the exact commit and even dirty in `HOMEBREW_VERSION`? If not,\r\n\r\n```\r\ngit describe --tags --abbrev=0\r\n```\r\n\r\nis probably good enough.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1076
	},
	{
		"id" : 248841927,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T08:29:41Z",
		"body" : "> Do we really want to know the exact commit and even dirty in HOMEBREW_VERSION?\r\n\r\nYeh, I think it's useful given the few cases where we print the output.\r\n\r\n> git describe --tags --abbrev=0\r\n\r\nMy issue with this is that a commit that abbreviates nicely now may well conflict in future. The default seems good to me here.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1076
	},
	{
		"id" : 248867621,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T10:45:10Z",
		"body" : "@vladshablinsky If you're üëç feel free to approve this PR using the code review thing üòâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1076
	},
	{
		"id" : 248845902,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T08:50:44Z",
		"body" : "Found the override? Nice.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1078
	},
	{
		"id" : 248870399,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T11:00:04Z",
		"body" : "@ilovezfs üëç merge when üíö ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1078
	},
	{
		"id" : 248867259,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T10:42:49Z",
		"body" : "> Make it stop please.\r\n\r\nWe will when we release 1.0.2. Sorry for the inconvenience.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1079
	},
	{
		"id" : 248918051,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T14:22:12Z",
		"body" : "Released, run `brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1079
	},
	{
		"id" : 248918096,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T14:22:20Z",
		"body" : "(twice)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1079
	},
	{
		"id" : 248928195,
		"user" : {
			"login" : "defjaf"
		},
		"created_at" : "2016-09-22T14:56:00Z",
		"body" : "(FWIW, just `brew update` didn't work; I had to do the full ` cd \"$(brew --repo)\" && git fetch && git reset --hard origin/master && brew update`...)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1079
	},
	{
		"id" : 248951715,
		"user" : {
			"login" : "o6uoq"
		},
		"created_at" : "2016-09-22T16:16:12Z",
		"body" : "`‚úî 16:42 ~ $ brew update\r\nAlready up-to-date.`\r\n\r\nI love brew!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1079
	},
	{
		"id" : 248888088,
		"user" : {
			"login" : "CoderBOBO"
		},
		"created_at" : "2016-09-22T12:21:29Z",
		"body" : "don't update homebrew 1.0.0",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1080
	},
	{
		"id" : 248977089,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-22T17:50:00Z",
		"body" : "See https://github.com/Homebrew/homebrew-core/issues/5113#issuecomment-248894481.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1080
	},
	{
		"id" : 248885039,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T12:08:21Z",
		"body" : "You can completely ignore the v1.0.1 message.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1081
	},
	{
		"id" : 248899722,
		"user" : {
			"login" : "spool"
		},
		"created_at" : "2016-09-22T13:13:47Z",
		"body" : "Here's what I got: \r\n```\r\n$ brew update\r\nChecking out v1.0.1 in /usr/local/Homebrew...\r\nTo checkout master in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout master\r\nChecking out v1.0.1 in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask run:\r\n  'cd /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.1' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.1' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.1\r\nChecking out v1.0.1 in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core run:\r\n  'cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.1' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.1' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.1\r\nChecking out v1.0.1 in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-dupes...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-dupes run:\r\n  'cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-dupes && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.1' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.1' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.1\r\nChecking out v1.0.1 in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-science...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/homebrew/homebrew-science run:\r\n  'cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-science && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.1' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.1' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.1\r\nChecking out v1.0.1 in /usr/local/Homebrew/Library/Taps/osgeo/homebrew-osgeo4mac...\r\nTo checkout master in /usr/local/Homebrew/Library/Taps/osgeo/homebrew-osgeo4mac run:\r\n  'cd /usr/local/Homebrew/Library/Taps/osgeo/homebrew-osgeo4mac && git checkout master\r\nfatal: Cannot update paths and switch to branch 'v1.0.1' at the same time.\r\nDid you intend to checkout 'refs/tags/1.0.1' which can not be resolved as commit?\r\nfatal: Needed a single revision\r\ninvalid upstream refs/tags/1.0.1\r\nAlready up-to-date.\r\nChecking out v1.0.1 in /usr/local/Homebrew...\r\nTo checkout v1.0.1 in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout v1.0.1\r\n```\r\nJust updating again I get:\r\n```\r\n$ brew update\r\nChecking out v1.0.1 in /usr/local/Homebrew...\r\nTo checkout v1.0.1 in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout v1.0.1\r\nUpdated 4 taps (caskroom/cask, homebrew/core, homebrew/games, homebrew/science).\r\n```\r\nIs that what correct?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1081
	},
	{
		"id" : 248906222,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T13:40:24Z",
		"body" : "@spool You should be good now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1081
	},
	{
		"id" : 248907272,
		"user" : {
			"login" : "spool"
		},
		"created_at" : "2016-09-22T13:44:25Z",
		"body" : "@zmwangx Thanks very much. The `'cd /usr/local/Homebrew && git checkout v1.0.1` might lead to confusion for others. May be worth amending that message to avoid worry.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1081
	},
	{
		"id" : 248914203,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T14:09:13Z",
		"body" : "Message has been fixed and will be released üîú ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1081
	},
	{
		"id" : 248917970,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T14:21:54Z",
		"body" : "Released, run `brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1081
	},
	{
		"id" : 248918178,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T14:22:34Z",
		"body" : "(twice)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1081
	},
	{
		"id" : 249370208,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:22:43Z",
		"body" : "@spool You can safely ignore that and it will go away in future.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1081
	},
	{
		"id" : 252488487,
		"user" : {
			"login" : "WonderCsabo"
		},
		"created_at" : "2016-10-09T14:09:27Z",
		"body" : "@MikeMcQuaid i am still getting the error message as the OP, although i have a new version:\r\n\r\n```sh\r\n$ brew update\r\n...\r\n==> Migrating HOMEBREW_REPOSITORY (please wait)...\r\nError: /usr/local/Homebrew already exists.\r\nPlease remove it manually or uninstall and reinstall Homebrew into a new\r\nlocation as the migration cannot be done automatically.\r\n$ brew --version\r\nHomebrew 1.0.6\r\nHomebrew/homebrew-core (git revision ac62; last commit 2016-10-09)\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1081
	},
	{
		"id" : 252489058,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-09T14:19:13Z",
		"body" : "@WonderCsabo I guess I need to improve that message. Is it unclear what you need to do from reading it?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1081
	},
	{
		"id" : 252492907,
		"user" : {
			"login" : "WonderCsabo"
		},
		"created_at" : "2016-10-09T15:27:00Z",
		"body" : "Sorry, somehow i mixed up the comments in this thread and thought i should ignore this message because it will go away. But now i see that was for another error. I now deleted the `/usr/local/Homebrew` folder.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1081
	},
	{
		"id" : 248893485,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-22T12:46:00Z",
		"body" : "Here's what I've tested with:\r\n\r\n```sh\r\nbrew install feedgnuplot\r\nbrew uninstall gnuplot # check it refuses\r\nbrew uninstall --force gnuplot # check it uninstalls\r\nbrew uninstall feedgnuplot # check it uninstalls (because nothing depends on it)\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 248999890,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-09-22T19:11:40Z",
		"body" : "Does it make sense to rename `Keg#formula` to `Keg#to_formula` similar to `Dependency#to_formula` method?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249123560,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T07:38:08Z",
		"body" : "@penman From my reading this just handles direct and not recursive dependencies. What do you think about handling this recursively? ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249128591,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-23T08:03:51Z",
		"body" : "@MikeMcQuaid it should handle recursive dependencies! It uses the list of dependencies from the tab, which is [based on](https://github.com/Homebrew/brew/blob/bc52932e5ab83d253850cc622c7a0032e9d2de20/Library/Homebrew/formula.rb#L1464) the recursive dependency list.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249129859,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T08:10:58Z",
		"body" : "@penman üëè ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249134281,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T08:33:26Z",
		"body" : "@penman @ilovezfs made a good point to me privately: this probably shouldn't overload `--force` (although I realise that was my idea originally) so instead should be something like `--ignore-dependents` or something?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249138979,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-23T08:56:34Z",
		"body" : "I think the brew code mostly uses \"dependent\" not \"dependant\"",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249144212,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-23T09:21:40Z",
		"body" : "@MikeMcQuaid @ilovezfs so `brew uninstall --force` would also refuse to uninstall a keg with dependents without `--ignore-dependents`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249144857,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-23T09:24:45Z",
		"body" : "Right, I think the two options shouldn't directly interact with each other.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249292987,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T20:22:09Z",
		"body" : "I wonder if this PR breaks `brew bundle` as-is, given `brew bundle` IIRC doesn't try to remove things in order of leaves but simply alphabetically.\r\n\r\n> --ignore-dependents or something?\r\n\r\nI'm quite keen to avoid `dependents` or `dependants` because people will absolutely & regularly mistype that flag. It should be something fairly simple, and less likely to be bashed wrongly into the keyboard.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249351258,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T07:45:20Z",
		"body" : "> I'm quite keen to avoid dependents or dependants because people will absolutely & regularly mistype that flag. It should be something fairly simple, and less likely to be bashed wrongly into the keyboard.\r\n\r\nWas thinking the same (but we probably don't really want people typing it anyway...).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249353682,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T08:48:27Z",
		"body" : "`--ignore-dependents` and `--ignore-dependencies` (anyone want to volunteer to write a paragraph of documentation for the man page explaining the difference) seem like developer language spilling over into the CLI.\r\n\r\nAs for whether we want people typing. If you need to uninstall and reinstall something (for example: we didn't bump the revision but someone needs the change), they're going to have to type it, unless we want to force them to uninstall every dependent, which would almost certainly be unnecessary since otherwise there would have been a revision bump. If this PR is merged, that option will very much so be exposed to users whether we like it or not.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249363195,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T12:49:22Z",
		"body" : "IMO this is definitely going to be more trouble than its worth, plus it won't solve every problem with uninstall (think opportunistic linking which is plenty). If someone uninstalls something and accidentally break s another, most of the time it's just one bottle-pouring away.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249369050,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:00:11Z",
		"body" : "> IMO this is definitely going to be more trouble than its worth\r\n\r\nThis is the default behaviour of pretty much every other package manager. What makes them different to us?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249369120,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T15:01:34Z",
		"body" : "> This is the default behaviour of pretty much every other package manager. What makes them different to us?\r\n\r\nThe difference is users are accustomed to this behavior and you're going to break user scripts, include official ones it seems.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249369185,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:03:08Z",
		"body" : "> The difference is users are accustomed to this behavior and you're going to break user scripts\r\n\r\nIf the status quo is the only justification I don't think it's good enough to not implement the functionality.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249369315,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T15:05:43Z",
		"body" : ">This is the default behaviour of pretty much every other package manager. What makes them different to us?\r\n\r\nWe're not managing system components. I'd start there.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249369354,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T15:06:16Z",
		"body" : "ILZ mentioned privately that one major difference with say Linux package managers is that we don't have anything mission critical and uninstalling a few thing wrong will at most leave your video player unfunctional, while on the Linux side if you uninstalling something wrong could leave you with an unbootable machine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249369401,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T15:07:17Z",
		"body" : "And what about our \"the command line is our API\" promise (paraphrased)?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249370126,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:20:56Z",
		"body" : "@zmwangx Many of our users would disagree that we don't have anything mission critical. I'm open to different approaches to this functionality but needs to go in and be on by default to be useful.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249370681,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T15:31:41Z",
		"body" : "When was the last time someone filed an issue due to uninstalling something they shouldn't have? I don't think we actually see that user problem in the wild much since people tend to install things and then leave them alone.\r\n\r\nIf anything this PR will probably inadvertently cause _more_ such issues by sending people on cleaning sprees since uninstall is \"safe\" now, when in fact due to undeclared dependencies, dependencies hidden behind`if build.with?` options, and anomalies of the requirement system, it won't actually be safe.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249370925,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T15:36:26Z",
		"body" : "If this branch really working at the moment?\r\n\r\nI'm trying to test a potential bug pointed out by ILZ, that is,\r\n\r\n```\r\nbrew uninstall foo bar\r\n```\r\n\r\nfailing when `bar` depends on `foo`.\r\n\r\nBut then I realized I can uninstall `ant` just fine with `abcl` installed. (After `brew pull https://github.com/Homebrew/brew/pull/1082` of course.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249371003,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T15:38:13Z",
		"body" : "@zmwangx but I bet it fails if you try to uninstall `rlwrap`, yes?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249371126,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:40:22Z",
		"body" : "> If anything this PR will probably inadvertently cause more such issues by sending people on cleaning sprees since uninstall is \"safe\" now, when in fact due to undeclared dependencies, dependencies hidden behindif build.with? options, and anomalies of the requirement system, it won't actually be safe.\r\n\r\nThat doesn't matter because we track the actual used dependencies.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249371144,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T15:40:47Z",
		"body" : "@ilovezfs: No it happily uninstalled rlwrap. Maybe I'm doing something wrong.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249371152,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:40:52Z",
		"body" : "> I don't think we actually see that user problem in the wild much since people tend to install things and then leave them alone.\r\n\r\nWe regularly see issues with `brew missing` output from `brew doctor`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249371198,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T15:41:47Z",
		"body" : "@zmwangx interesting.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249371241,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T15:42:37Z",
		"body" : ">We regularly see issues with brew missing output from brew doctor.\r\n\r\ndoctor complaining about that is not the same as it causing a user reported issue :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249371340,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:44:26Z",
		"body" : "I've seen enough of them. I'm also fed up of people complaining in person and on the internets about this being another example of our dependency system being shitty.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249371355,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:44:43Z",
		"body" : "And if in doubt: we should do what other package managers do unless there's a really good reason.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249371407,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T15:45:39Z",
		"body" : ">And if in doubt: we should do what other package managers do unless there's a really good reason.\r\n\r\nBe careful what you wish for :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249371725,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T15:51:12Z",
		"body" : "Yup, reproduced what @zmwangx described.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249372749,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T16:11:04Z",
		"body" : "It appears that for slightly older bottles without `runtime_dependencies` in the install receipts this wouldn't work. Need to rebottle everything for this to work consistently, it seems.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249373228,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T16:20:11Z",
		"body" : "And the predicted bug does occur as well\r\n```\r\niMac-TMP:~ joe$ brew uninstall ant abcl\r\nError: Refusing to uninstall /usr/local/Cellar/ant/1.9.7 because it is required by abcl 1.3.3, which is currently installed.\r\nRemove it anyway with `brew uninstall --force ant`.\r\nUninstalling /usr/local/Cellar/abcl/1.3.3... (7 files, 10M)\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249373369,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T16:22:59Z",
		"body" : "Follow up to my last comment: even if we rebooted everything,, we can't affect existing installations. So every existing user's cellar will become a wonderful mix of inconsistency. Of course, you need someone who actually cares to notice.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249373499,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T16:25:26Z",
		"body" : "We could install a SQLite database with the relevant information so that it would work for existing installations too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249374003,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T16:35:22Z",
		"body" : "With info of all the versions that have ever existed? And for user taps?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249374478,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T16:43:26Z",
		"body" : "Can we try to focus on solutions instead of just problems, please?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249374910,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T16:50:45Z",
		"body" : "I don't know about solutions, but I can at least point out problems so that this doesn't get merged and lead to a catastrophe.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249375115,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T16:54:23Z",
		"body" : "A solution would be to rewrite all of the `INSTALL_RECEIPT.json` files for the installed formulae in a user's Cellar based on information from `$somwhere`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249376156,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T17:14:16Z",
		"body" : "> this doesn't get merged and lead to a catastrophe.\r\n\r\nIsn't the catastrophe in this case: `brew uninstall` has the previous behaviour unless you reinstall/rebottle?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249376490,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T17:20:47Z",
		"body" : "> Isn't the catastrophe in this case: brew uninstall has the previous behaviour unless you reinstall/rebottle?\r\n\r\nThe catastrophe is inconsistent behavior that's going to be very confusing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249378411,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-24T17:57:47Z",
		"body" : "The inconsistency here is that under some circumstances, we can stop a user accidentally doing something they probably don't want to do with bad consequences for the user.\r\n\r\nWhy does it matter that we can't do that all the time? There's no need to announce \"hey everyone you can run brew uninstall on all your formulae it's 100% safe and won't remove anything you need\", so it's not like people are going to start relying on the error.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249378569,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T18:00:42Z",
		"body" : "I agree.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249378824,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-24T18:05:39Z",
		"body" : "(I realise there a are a few things that still need fixed in this PR, but I'm going to leave it for a couple of days so you all can decide if you want it before I put the effort in.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249378996,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T18:08:53Z",
		"body" : "> Why does it matter that we can't do that all the time?\r\n\r\nGood luck explaining that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249381751,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T19:04:13Z",
		"body" : "> Good luck explaining that.\r\n\r\nWell, @penman won't need to explain anything because she isn't a maintainer here (yet, at least).\r\n\r\nI'm in favour of quietly shipping this and not documenting it for now and iterating unless anyone can point out a way it breaks on its actual intent.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249402875,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-25T04:55:56Z",
		"body" : ">I'm in favour of quietly shipping this and not documenting it for now and iterating unless anyone can point out a way it breaks on its actual intent.\r\n\r\nThat has indeed been pointed out https://github.com/Homebrew/brew/pull/1082#issuecomment-249373228",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249433916,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-25T17:19:35Z",
		"body" : "Extending `Diagnostic.missing_deps` would depend on neither up-to-date receipts nor the order in which the arguments are passed. Quick proof of concept:\r\n```\r\nJosephs-MacBook-Pro:Homebrew joe$ git diff\r\ndiff --git a/Library/Homebrew/cmd/missing.rb b/Library/Homebrew/cmd/missing.rb\r\nindex bbd5142..abdd01e 100644\r\n--- a/Library/Homebrew/cmd/missing.rb\r\n+++ b/Library/Homebrew/cmd/missing.rb\r\n@@ -16,7 +16,7 @@ module Homebrew\r\n       ARGV.resolved_formulae\r\n     end\r\n \r\n-    Diagnostic.missing_deps(ff) do |name, missing|\r\n+    Diagnostic.missing_deps(ff, ARGV.value(\"hide\")) do |name, missing|\r\n       print \"#{name}: \" if ff.size > 1\r\n       puts (missing * \" \").to_s\r\n     end\r\ndiff --git a/Library/Homebrew/diagnostic.rb b/Library/Homebrew/diagnostic.rb\r\nindex 743c653..29c3e07 100644\r\n--- a/Library/Homebrew/diagnostic.rb\r\n+++ b/Library/Homebrew/diagnostic.rb\r\n@@ -7,7 +7,7 @@ require \"utils/shell\"\r\n \r\n module Homebrew\r\n   module Diagnostic\r\n-    def self.missing_deps(ff)\r\n+    def self.missing_deps(ff, hide = nil)\r\n       missing = {}\r\n       ff.each do |f|\r\n         missing_deps = f.recursive_dependencies do |dependent, dep|\r\n@@ -20,7 +20,13 @@ module Homebrew\r\n         end\r\n \r\n         missing_deps.map!(&:to_formula)\r\n-        missing_deps.reject! { |d| d.installed_prefixes.any? }\r\n+        if hide\r\n+          missing_deps.reject! do |d|\r\n+            !hide.include?(d.name) && d.installed_prefixes.any?\r\n+          end\r\n+        else\r\n+          missing_deps.reject! { |d| d.installed_prefixes.any? }\r\n+        end\r\n \r\n         unless missing_deps.empty?\r\n           yield f.full_name, missing_deps if block_given?\r\n```\r\n\r\n```\r\nJosephs-MacBook-Pro:Homebrew joe$ brew missing --hide=mpfr\r\ngawk: mpfr\r\nlibmpc: mpfr\r\nJosephs-MacBook-Pro:Homebrew joe$ brew missing --hide=mpfr,readline\r\nbash: readline\r\ngawk: mpfr readline\r\nlibmpc: mpfr\r\npython3: readline\r\nruby: readline\r\nsqlite: readline\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249450430,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-25T22:21:59Z",
		"body" : "@ilovezfs would that be less accurate? If you're not reading from the install receipt, a dependency could have been added in a later version of a formula that isn't relevant to the currently installed version, right? There's a reason runtime dependencies are stored at install time in the first place.\r\n\r\nI think the argument order is pretty easy to work around, by the way. Haven't tested, but I think a `dependants -= ARGV.formulae` before checking if there any would do the trick.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249479453,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-26T04:57:59Z",
		"body" : ">would that be less accurate?\r\n\r\nIt will be no more and no less accurate than `brew missing`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249799288,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:24:44Z",
		"body" : "Just to be explicit where it's been more implicit: I opened https://github.com/Homebrew/brew/issues/934 and planned on working on this myself. @penman has picked this up before I did (hence the `help-wanted` tag) and it will be merged once we figure out how best to document and implement it. If anyone has specific review or suggestions for the documentation or implementation they are very welcome but a üëé on the feature as a whole is not.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249813266,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-27T09:25:57Z",
		"body" : "In terms of the option naming, I was wondering if instead of\r\n--force retains current behavior\r\n--ignore-dependents overrides the removal block\r\n\r\nit would be more user friendly language to have it be\r\n\r\n--force overrides the removal block\r\n--all current behavior of --force\r\n\r\nI'm happy either way, as long as we're not overloading --force, but thought that ceding --force to this PR, and renaming current --force behavior to --all might address @DomT4's concern above.\r\n\r\nIn terms of tweaks:\r\nA) as already discussed above, no overloading of --force\r\nB) as discussed on Slack, making overriding removal the default if HOMEBREW_DEVELOPER is set. I have no desire for an opt-in option when HOMEBREW_DEVELOPER is set, but I could imagine maybe someone else might? --safe or --no-force or --no-ignore-dependents come to mind if anyone cares about an opt-in.\r\nC) as already discussed above, if the dependent that is blocking the removal is on the list of things to be removed, order of the arguments to uninstall should not matter, and the uninstall should proceed without refusing or requiring the user to reorder the arguments\r\n\r\nPotential enhancements:\r\nD) in light of (C), doing the uninstalls in the least dangerous order might be advisable, but uninstalls are pretty unlikely to fail except on weird permissions stumbling blocks\r\nE) consider falling back to the mechanism I suggested above for extending the missing diagnostic when any of the receipts are old to avoid the problem zmwangx found",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249916137,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-27T16:17:52Z",
		"body" : "> If anyone has specific review or suggestions for the documentation or implementation they are very welcome but a üëé on the feature as a whole is not.\r\n\r\nNot especially specific to this, or @penman's excellent work here & around Homebrew in recent weeks, I don't think it's unreasonable to üëé a feature if we explore how to do it and people end up thinking its impractical or causes more confusion than it resolves. I don't think because a maintainer wants x feature that x feature absolutely has to become part of Homebrew. \r\n\r\nGiven how much `upgrade --all` ended up causing us hassle and remains in people's aliases, etc to this day I don't think considering these things in depth & with flexibility on outcome is particularly a bad idea.\r\n\r\nI agree there's a lot of improvement room for Homebrew around being able to yank dependencies out of existence even though they are very much required, and broadly I think the idea pushed here isn't a bad one as long as there are opt-outs for developers in particular, but bearing in mind if we break Homebrew now users have to wait for the next tag for things to become unbroken it's not unfair to be hyper-careful.\r\n\r\n> In terms of tweaks:\r\nA) as already discussed above, no overloading of --force\r\nB) as discussed on Slack, making overriding removal the default if HOMEBREW_DEVELOPER is set. I have no desire for an opt-in option when HOMEBREW_DEVELOPER is set, but I could imagine maybe someone else might? --safe or --no-force or --no-ignore-dependents come to mind if anyone cares about an opt-in.\r\nC) as already discussed above, if the dependent that is blocking the removal is on the list of things to be removed, order of the arguments to uninstall should not matter, and the uninstall should proceed without refusing or requiring the user to reorder the arguments\r\n\r\nThis seems like a reasonable list to me, at least.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 249995239,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-27T20:53:27Z",
		"body" : "> B) as discussed on Slack, making overriding removal the default if HOMEBREW_DEVELOPER is set. I have no desire for an opt-in option when HOMEBREW_DEVELOPER is set, but I could imagine maybe someone else might?\r\n\r\n@ilovezfs I obviously can't see the conversation on Slack, but as a `HOMEBREW_DEVELOPER` I'd like dangerous uninstalls to be blocked by default. If I'm accidentally installing something without realising something else depends on it, I'd like to know about it, and if I'm doing it deliberately typing `--force` or something to indicate my intention wouldn't be too much overhead.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250006899,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-27T21:38:29Z",
		"body" : "> In terms of the option naming, I was wondering if instead of\r\n> --force retains current behavior\r\n> --ignore-dependents overrides the removal block\r\n\r\n> it would be more user friendly language to have it be\r\n\r\n> --force overrides the removal block\r\n> --all current behavior of --force\r\n\r\nI like this idea. `--force` never made sense to me as the name for this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250008451,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-27T21:45:00Z",
		"body" : "> but as a HOMEBREW_DEVELOPER I'd like dangerous uninstalls to be blocked by default.\r\n\r\nAs another HOMEBREW_DEVELOPER I vote for \"dangerous uninstalls\" to not be blocked by default, again.\r\n\r\n> If I'm accidentally installing something without realising something else depends on it, I'd like to know about it,\r\n\r\nI assume you meant \"accidentally uninstalling something\". In that case, at least 90% of the time you'll find out when you get a very clear dylib not found error.\r\n\r\n> and if I'm doing it deliberately typing --force or something to indicate my intention wouldn't be too much overhead.\r\n\r\nI'll say this again: it may not be a problem or overhead for you because you don't have any script that depends on it, but you *will* break user scripts.\r\n\r\nAnd let me respond to an earlier comment in this thread.\r\n\r\n> Many of our users would disagree that we don't have anything mission critical.\r\n\r\nThen maybe said users should learn their mission critical software, including their dependency chains, and not mess with them unnecessarily. This is pretty much the general attitude with any mission-critical software deployment.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250009578,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-27T21:49:43Z",
		"body" : "> I'll say this again: it may not be a problem or overhead for you because you don't have any script that depends on it, but you will break user scripts.\r\n\r\n@zmwangx Fair enough. Ignoring for `HOMEBREW_DEVELOPER`s seems like a reasonable compromise.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250095011,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T07:42:27Z",
		"body" : "> I assume you meant \"accidentally uninstalling something\". In that case, at least 90% of the time you'll find out when you get a very clear dylib not found error.\r\n\r\nI don't think those errors are universally understood or debuggable.\r\n\r\n> I'll say this again: it may not be a problem or overhead for you because you don't have any script that depends on it, but you will break user scripts.\r\n\r\nWhich user scripts? Please provide links. Also, again, stop making this personal and keep it technical.\r\n\r\n> Then maybe said users should learn their mission critical software, including their dependency chains, and not mess with them unnecessarily. This is pretty much the general attitude towards any mission-critical software deployment.\r\n\r\nWe should take responsibility for providing safety for our users.\r\n\r\nIn the interests of actually getting this üö¢d we'll disable it on HOMEBREW_DEVELOPER at first but longer-term we're going to figure out something better than just adding HOMEBREW_DEVELOPER to things a few maintainers don't like. Every other package manager does things this way and it's a good idea. If you have a flag to override and don't like typing it: you can create an alias.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250169251,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T13:40:03Z",
		"body" : "> I don't think it's unreasonable to üëé a feature if we explore how to do it and people end up thinking it's impractical or causes more confusion than it resolves. I don't think because a maintainer wants x feature that x feature absolutely has to become part of Homebrew.\r\n\r\nTo clarify a bit more after thinking about this some more: I think it's unreasonable for us as a project to open issues like https://github.com/Homebrew/brew/issues/934, mark them as \"help wanted\" and then to üëé the feature for a non-maintainer who comes around and implements it. That makes people not want to submit pull requests here and not trust our \"help wanted\" which in turn makes it harder to keep this project alive long-term. In this case I should have personally been quicker to develop product feedback (i.e. discussion about the merits of the feature rather than the implementation details in this PR) into that issue as the product side of this is on me and not @penman. \r\n\r\n> Given how much upgrade --all ended up causing us hassle and remains in people's aliases, etc to this day I don't think considering these things in depth & with flexibility on outcome is particularly a bad idea.\r\n\r\nI don't think it caused us much hassle, really. It doesn't really matter if it's in aliases if it's a no-op. Sometimes we're going to go in a product direction that we later reverse on. That's actively a good thing as without being willing to experiment and make mistakes we will be unable to progress.\r\n\r\n> I agree there's a lot of improvement room for Homebrew around being able to yank dependencies out of existence even though they are very much required, and broadly I think the idea pushed here isn't a bad one as long as there are opt-outs for developers in particular, but bearing in mind if we break Homebrew now users have to wait for the next tag for things to become unbroken it's not unfair to be hyper-careful.\r\n\r\nSure. That said, there's nothing stopping us pushing two tags e.g. 5m apart if things are ever broken that badly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250191945,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-28T14:57:14Z",
		"body" : "> we'll disable it on HOMEBREW_DEVELOPER at first but longer-term we're going to figure out something better than just adding HOMEBREW_DEVELOPER to things a few maintainers don't like.\r\n\r\nThis isn't a fair reflection of my stance on the issue, at least. We often leave breaking things on, or turn things from a soft breakage into hard breakage, for developers. Not protecting developers is the default, and I think a perfectly sane default. That was the root of my agreement with ILZ on this particular point. I don't think it's necessarily prudent to start trying to read motivations into comments too much.\r\n\r\n> To clarify a bit more after thinking about this some more: I think it's unreasonable for us as a project to open issues like #934\r\n\r\nThis goes back to my original comment though. You opened the issue, not @HomebrewBot or whatever.\r\n\r\nAs far as anyone looking into that thread knows the issue was never discussed amongst the maintainer team, so yeah, if a single maintainer opening issues and marking it `help wanted` is merit enough for inclusion of something in Homebrew we're back to my original point; we shouldn't be judging ideas on theoretical discussions but real implementations such as this one. Otherwise I'd quite like a function where Homebrew triggers my kettle pouring a cup of tea every time I type `brew install qt5 -s` or `brew install llvm -s`.\r\n\r\nIf the real implementation is problematic in some way it's not unreasonable to ask again if we want to do this. And I support the broad idea of making it harder to break other formulae installed, always have, but the points raised above aren't entirely invalid or worthy of being ignored.\r\n\r\nCould a better job have been done communicating them? Absolutely. @penman completely has the right to feel put off by 30 or so messages pulling flaws out of the idea, and ideally in future brew PRs we'll be better at proposing fixes more proactively, but it doesn't invalidate the concerns either party had.\r\n\r\n> I don't think it caused us much hassle, really.\r\n\r\nI was counting user confusion amongst the hassle. Even this far down the line from it being reverted at least once a week I end up telling people the `--all` is no longer required. It may not be bothering us, but there's evidently still users out there who think `--all` is mandated.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250207542,
		"user" : {
			"login" : "alyssais"
		},
		"created_at" : "2016-09-28T15:45:11Z",
		"body" : "> It may not be bothering us, but there's evidently still users out there who think `--all` is mandated.\r\n\r\nI still thought I had to use `--all` until ~last week when I read the code! Not that it caused me any major incovience using `--all` all those times.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250210007,
		"user" : {
			"login" : "alyssais"
		},
		"created_at" : "2016-09-28T15:52:56Z",
		"body" : "Am I correct in thinking this is what's left to be done on this?:\r\n\r\n- [x] Disable checking for HOMEBREW_DEVELOPERs\r\n- [x] Make this check independent of `--force`\r\n\r\n  @ilovezfs talked above about switching the options (making the current `--force` behaviour use `--all` instead, and making `--force` skip dependant checks instead). A potential issue with that approach is that changing what `--force` does might surprise some users used to the old behaviour. Maybe it would be better to completely deprecate `--force` and come up with two new option names?\r\n\r\n  Either solution works for me, just need to know which one to do.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250210725,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T15:55:00Z",
		"body" : "> This isn't a fair reflection of my stance on the issue, at least. We often leave breaking things on, or turn things from a soft breakage into hard breakage, for developers. Not protecting developers is the default, and I think a perfectly sane default. That was the root of my agreement with ILZ on this particular point. I don't think it's necessarily prudent to start trying to read motivations into comments too much.\r\n\r\nSorry, to be clear I'm not saying any maintainer is taking that position but just that it's not something that's sustainable.\r\n\r\n> As far as anyone looking into that thread knows the issue was never discussed amongst the maintainer team, so yeah, if a single maintainer opening issues and marking it help wanted is merit enough for inclusion of something in Homebrew we're back to my original point\r\n\r\nThe lack of discussion is on the maintainers who had that appear in their inboxes and said nothing about it. Fair or unfair I take silence on a feature issue as tacit approval.\r\n\r\n> we shouldn't be judging ideas on theoretical discussions but real implementations such as this one.\r\n\r\nI disagree. We should judge ideas on the idea (i.e. is this even a good idea) and judge implementations on the implementation (i.e. is this code going to do what's described). That prevents people wasting time on implementing something where people disagree with a one-sentence summary of the idea.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250211403,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T15:56:58Z",
		"body" : "> Disable checking for HOMEBREW_DEVELOPERs\r\n>  Make this check independent of --force\r\n\r\n@penman Yep! We should have a new argument called `--ignore-dependencies` (to match `brew install`s; I think the consistency is valuable unless there's other suggestions for names) and if you have `HOMEBREW_DEVELOPER` set it defaults to being like that parameter was passed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250213703,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T16:04:32Z",
		"body" : "> Now, one might dismiss this as not enough evidence, but I also don't see evidence of legacy behavior causing problems. If \"people complaining in person and on the internets about this being another example of our dependency system being shitty\" is evidence, may I politely ask them to report the problem to our issue tracker? If they don't, I would argue they aren't really concerned enough, and people complain about random things on the Internet all the time it isn't enough reason to worry.\r\n\r\nThat's not how product works if you want to make something that's good for all users rather than just users with the time and inclination to post on our issue tracker.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250217093,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T16:16:00Z",
		"body" : "> This goes back to my original comment though. You opened the issue, not @HomebrewBot or whatever.\r\n> \r\n> As far as anyone looking into that thread knows the issue was never discussed amongst the maintainer team, so yeah, if a single maintainer opening issues and marking it help wanted is merit enough for inclusion of something in Homebrew we're back to my original point\r\n\r\nWith that in mind: any maintainers reading this thread: please read the issues in https://github.com/homebrew/brew/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22 and make any comments you have in those issues, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250219631,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T16:25:06Z",
		"body" : "@penman One more thing: as pointed out by @ilovezfs earlier it's probably worth using something like:\r\n\r\n> Extending Diagnostic.missing_deps would depend on neither up-to-date receipts nor the order in which the arguments are passed.\r\n\r\nas a fall back when the dependencies in the receipt are not available. This will make it slightly less performant but over time as receipts get updated this will become negligible and could even be removed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250237911,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-28T17:28:59Z",
		"body" : "> The lack of discussion is on the maintainers who had that appear in their inboxes and said nothing about it. Fair or unfair I take silence on a feature issue as tacit approval.\r\n\r\n> With that in mind: any maintainers reading this thread: please read the issues in https://github.com/homebrew/brew/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22 and make any comments you have in those issues, thanks.\r\n\r\nTo be honest, I thought we'd killed issues like that in favour of the evolution process, which was set up to stop us opening these vague tracking issues which people didn't really contribute any discussion towards until PRs became available _(if PRs ever became available, which they mostly did not)_ on the subject.\r\n\r\nLike [this document](https://github.com/Homebrew/brew-evolution/blob/master/003-install-bottles-of-arbitrary-versions.md) is a lot easier to discuss because it's a detailed proposal, with justification explained. I don't understand what we gain with an issue like [this](https://github.com/Homebrew/brew/issues/931) on top of that. I look at that issue and go _\"... okay, why? What's the benefit? What's the goal? Is that goal desirable?\"_. It feels like we're duping evolution, but perhaps I'm misunderstanding your intention.\r\n\r\nGoing back to my intentionally ridiculous example of getting `brew install <long-build-time-formula> -s` to ping my kettle to refill me on caffeine so I don't fall asleep on the laptop waiting for it to finish, I'm sure I could convince most developers it's not a _bad idea_, but there's no sensible way to implement that and if I can't show an implementation people broadly agree with surely the idea is more or less dead.\r\n\r\nAnd again, I'll take a moment to say that doesn't apply to @penman's work here, which is neither a bad idea or bad implementation, merely an implementation there were valid concerns on which are in the process of being addressed. And my apologies to @penman for the lengthy comments in an already lengthy thread, I'm happy to continue this discussion off-thread as desired.\r\n\r\n> We should have a new argument called --ignore-dependencies (to match brew installs; I think the consistency is valuable unless there's other suggestions for names) and if you have HOMEBREW_DEVELOPER set it defaults to being like that parameter was passed.\r\n\r\nüëç.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250239024,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T17:32:49Z",
		"body" : "> To be honest, I thought we'd killed issues like that in favour of the evolution process, which was set up to stop us opening these vague tracking issues which people didn't really contribute any discussion towards until PRs became available (if PRs ever became available, which they mostly did not) on the subject.\r\n\r\nWe had for user-submitted feature requests but maintainer-submitted issues are ones we've already provided some level of green light for or are actively planning ourselves.\r\n\r\n> Like this document is a lot easier to discuss because it's a detailed proposal, with justification explained. I don't understand what we gain with an issue like this on top of that.\r\n\r\nHaving something in which we can track the work to be done and have it in projects/milestones/etc. The \"help wanted\" label is a common OSS pattern and there's various aggregator sites that point contributors in that direction.\r\n\r\n> Going back to my intentionally ridiculous example of getting brew install <long-build-time-formula> -s to ping my kettle to refill me on caffeine so I don't fall asleep on the laptop waiting for it to finish, I'm sure I could convince most developers it's not a bad idea, but there's no sensible way to implement that and if I can't show an implementation people broadly agree with surely the idea is more or less dead.\r\n\r\nIn that case (and in this!) those criticisms can be raised from both a product and technical perspective without needing to see code.\r\n\r\n> And again, I'll take a moment to say that doesn't apply to @penman's work here, which is neither a bad idea or bad implementation, merely an implementation there were valid concerns on which are in the process of being addressed. And my apologies to @penman for the lengthy comments in an already lengthy thread, I'm happy to continue this discussion off-thread as desired.\r\n\r\nThe comments are welcome but agreed it's probably worth leaving them for now or pulling to another issue üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250281749,
		"user" : {
			"login" : "alyssais"
		},
		"created_at" : "2016-09-28T19:58:04Z",
		"body" : "Still need to integrate the `brew missing` fallback. Getting there!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 250919201,
		"user" : {
			"login" : "alyssais"
		},
		"created_at" : "2016-10-01T15:46:57Z",
		"body" : "I'm going to tentatively say I think this is ready now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 252610980,
		"user" : {
			"login" : "alyssais"
		},
		"created_at" : "2016-10-10T12:57:44Z",
		"body" : "I have no idea why this would be failing (seemingly only on Linux???)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 252611773,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-10T13:01:34Z",
		"body" : "@alyssais I've got a Linux VM handy, I'll take a look at this when I get the chance.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1082
	},
	{
		"id" : 248917975,
		"user" : {
			"login" : "reaperhulk"
		},
		"created_at" : "2016-09-22T14:21:56Z",
		"body" : "I can confirm the issue exists on my machine as well:\r\n\r\n```\r\natlas ~ ‚à¥ brew upgrade openssl@1.1\r\nChecking out v1.0.1 in /usr/local/Homebrew...\r\nTo checkout v1.0.1 in /usr/local/Homebrew run:\r\n  'cd /usr/local/Homebrew && git checkout v1.0.1\r\nError: openssl@1.1 1.1.0 already installed\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1083
	},
	{
		"id" : 248918307,
		"user" : {
			"login" : "Lukasa"
		},
		"created_at" : "2016-09-22T14:23:02Z",
		"body" : "And here:\r\n\r\n```bash\r\ncory@heimdall:requests-oauthlib/ % brew upgrade openssl@1.1\r\nError: openssl@1.1 1.1.0 already installed\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1083
	},
	{
		"id" : 248948391,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-22T16:04:29Z",
		"body" : "This isn't the fault of the `@`. See https://github.com/Homebrew/homebrew-core/pull/5117.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1083
	},
	{
		"id" : 248949926,
		"user" : {
			"login" : "alex"
		},
		"created_at" : "2016-09-22T16:09:54Z",
		"body" : "lol, welp. thanks\n\n\nOn Thu, Sep 22, 2016 at 12:04 PM, Dominyk Tiller <notifications@github.com>\nwrote:\n\n> This isn't the fault of the @. See Homebrew/homebrew-core#5117\n> <https://github.com/Homebrew/homebrew-core/pull/5117>.\n>\n> ‚Äî\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/Homebrew/brew/issues/1083#issuecomment-248948391>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAADBGftwf_LkWEDiAF86Ag42DWtJfCHks5qsqcTgaJpZM4KD8oX>\n> .\n>\n\n\n\n-- \n\"I disapprove of what you say, but I will defend to the death your right to\nsay it.\" -- Evelyn Beatrice Hall (summarizing Voltaire)\n\"The people's good is the highest law.\" -- Cicero\nGPG Key fingerprint: D1B3 ADC0 E023 8CA6\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1083
	},
	{
		"id" : 248968009,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T17:16:20Z",
		"body" : "Fixed in 1e9537f. Folks:\r\n\r\n```\r\nbrew update\r\nbrew upgrade openssl@1.1\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1083
	},
	{
		"id" : 248973191,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-22T17:35:36Z",
		"body" : "Looks like CI is about 5 minutes faster with this change. üòÉ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1084
	},
	{
		"id" : 249123215,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T07:36:09Z",
		"body" : "Massive speedup, great work. Is it work updating both the Homebrew and Cask tests `Gemfile.lock` to pull in the `master` branch and your commit in https://github.com/colszowka/simplecov/pull/520 to further speed things up?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1084
	},
	{
		"id" : 249127669,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-23T08:00:03Z",
		"body" : "@MikeMcQuaid I tried it out, but now that we're not accidentally loading in 10000 files it only ended up making a 1 second difference. It looks like #1089 does this anyway.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1084
	},
	{
		"id" : 249128395,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T08:02:34Z",
		"body" : "@penman Cool. Happy to wait on that one. One conflict to resolve here then happy to üö¢.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1084
	},
	{
		"id" : 249130527,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-23T08:14:34Z",
		"body" : "@MikeMcQuaid great! I'll have that done in a few hours when I'm back at a computer. :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1084
	},
	{
		"id" : 249158390,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T10:35:51Z",
		"body" : "üëè for dramatic speedup!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1084
	},
	{
		"id" : 248989341,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T18:34:37Z",
		"body" : "Personally I'd say update the docs and leave the variable names so that git-blame's usefulness it's destroyed. By the way, commitish might be the most accurate word here. Not that you should use it...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1085
	},
	{
		"id" : 248990095,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-22T18:37:07Z",
		"body" : "@zmwangx\r\n\r\n> Not that you should use it...\r\n\r\nüòÇ\r\n\r\nI spent some time researching the git terminology and 10 minutes in I still couldn't tell if committish was correct or not so decided it wasn't the best term to use.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1085
	},
	{
		"id" : 249022125,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-22T20:43:03Z",
		"body" : "> Personally I'd say update the docs and leave the variable names so that git-blame's usefulness isn't destroyed.\r\n\r\nI think not changing code for `git blame` isn't a good enough reason, personally. üëç to changing the names; arguably they could be `ref`, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1085
	},
	{
		"id" : 249042625,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-22T22:08:57Z",
		"body" : "> arguably they could be ref, though.\r\n\r\n`ref` was actually what I thought about first for the docs, but decided `commit` had a more obvious meaning. From there, I think the variable names being consistent with the documentation is a good thing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1085
	},
	{
		"id" : 249122979,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T07:34:36Z",
		"body" : "More great work from @penman (who is on üî•)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1085
	},
	{
		"id" : 249122833,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T07:33:44Z",
		"body" : "> Is it worth keeping checks like check_for_bad_install_name_tool\r\n\r\nIn that case it's worth renaming but adding to our `compat/` layer.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1086
	},
	{
		"id" : 249147865,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T09:40:18Z",
		"body" : "Thanks again @woodruffw!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1086
	},
	{
		"id" : 249183310,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-09-23T12:49:47Z",
		"body" : "> In that case it's worth renaming but adding to our compat/ layer.\r\n\r\nGot it! I'll also look into changing those formula to use ruby-macho instead.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1086
	},
	{
		"id" : 252345513,
		"user" : {
			"login" : "UniqMartin"
		},
		"created_at" : "2016-10-07T19:51:31Z",
		"body" : "Nice work here and in #1051! If you feel like leveraging more of `ruby-macho`'s capabilities in Homebrew, you could look into relocating and cleaning up bogus RPATHs. This could also help with making a few more bottles relocatable (cf. #371), though admittedly RPATHs are still not that prevalent among Homebrew formulae, so the impact won't be massive.\r\n\r\nAnd then there was also the idea of adding some form of validation of the install name in https://github.com/Homebrew/homebrew-core/pull/4655#issuecomment-247753580 which also falls into the realm of Mach-O related tweaks in Homebrew, thus something you might want to look into.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1086
	},
	{
		"id" : 252367479,
		"user" : {
			"login" : "woodruffw"
		},
		"created_at" : "2016-10-07T21:38:17Z",
		"body" : "Thanks!\r\n\r\nI'll read those issues and see what I can do about them. Expect PRs in a few days :smile: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1086
	},
	{
		"id" : 249001243,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-22T19:17:04Z",
		"body" : "```\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: 06fe347de97975dc01e726f87bf07a56a6fb713e\r\nLast commit: 6 weeks ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: bcb5cf680ae83de77e0ab35657f6d7fd014b28a0\r\nCore tap last commit: 6 weeks ago\r\n```\r\n\r\nTry:\r\n```bash\r\ncd \"$(brew --repo)\" && git fetch && git reset --hard origin/master && brew update\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1087
	},
	{
		"id" : 249011374,
		"user" : {
			"login" : "mlevin2"
		},
		"created_at" : "2016-09-22T19:59:13Z",
		"body" : "Many thanks. I usually do a `brew update` and `brew upgrade` regularly (daily), so I'm not sure why I would have been 6 weeks behind. Would those 2 commands not sufficiently keep me up to date?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1087
	},
	{
		"id" : 249012501,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-22T20:03:46Z",
		"body" : "99.99999999% of the time those two commands are perfect. Sadly, during a brief window some 6 weeks ago we introduced a bug to the `update` script which effectively \"froze\" in time wherever the local installation was. The way to recover from that is to use `git` as above to force yourself past the update bug, after which `brew update` goes back to working.\r\n\r\nWe've had some issues letting users know about it, despite it being posted on Twitter/HN/GitHub Issues/etc there are still people who haven't yet thought it odd enough to take a harder look or come to us and ask what's wrong.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1087
	},
	{
		"id" : 249012643,
		"user" : {
			"login" : "mlevin2"
		},
		"created_at" : "2016-09-22T20:04:20Z",
		"body" : "Ah, ok. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1087
	},
	{
		"id" : 249013345,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-22T20:07:08Z",
		"body" : "Does `brew config` show the problem solved after that command? :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1087
	},
	{
		"id" : 249014267,
		"user" : {
			"login" : "mlevin2"
		},
		"created_at" : "2016-09-22T20:11:00Z",
		"body" : "Yep!\r\n\r\n```\r\nHOMEBREW_VERSION: >1.0.0 (no git repository)\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: bbed7246bc5c5b7acb8c1d427d10b43e090dfd39\r\nLast commit: 9 hours ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 7b6f42699b965a9f44d35de97e97ce2464799e25\r\nCore tap last commit: 26 minutes ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local/Homebrew\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: octa-core 64-bit haswell\r\nHomebrew Ruby: 2.0.0-p648\r\nClang: 8.0 build 800\r\nGit: 2.10.0 => /usr/local/bin/git\r\nPerl: /usr/bin/perl\r\nPython: /usr/local/bin/python => /usr/local/Cellar/python/2.7.12/Frameworks/Python.framework/Versions/2.7/bin/python2.7\r\nRuby: /usr/local/bin/ruby => /usr/local/Cellar/ruby/2.3.1/bin/ruby\r\nJava: 1.8.0_102, 1.8.0_92, 1.8.0_76, 1.8.0_74, 1.8.0_60, 1.7.0_76\r\nmacOS: 10.11.6-x86_64\r\nXcode: 8.0\r\nCLT: 7.3.1.0.1.1461711523\r\nX11: 2.7.9 => /opt/X11\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1087
	},
	{
		"id" : 249014830,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-22T20:13:06Z",
		"body" : "Great! Let us know if you hit any more issues.\r\n\r\n`HOMEBREW_VERSION: >1.0.0 (no git repository)` looks weird but we're working on it & that should return a slightly saner version over the next couple days.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1087
	},
	{
		"id" : 251060124,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-10-03T09:11:26Z",
		"body" : "#1217 now supersedes, closing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1088
	},
	{
		"id" : 251060124,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-10-03T09:11:26Z",
		"body" : "#1217 now supersedes, closing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1088
	},
	{
		"id" : 249134323,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-23T08:33:36Z",
		"body" : "Coverage is 63.26%, seems about right. üòÑ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1089
	},
	{
		"id" : 249033439,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T21:28:37Z",
		"body" : "This is a known issue and will be fixed soon. Your Homebrew installation is fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1091
	},
	{
		"id" : 249034748,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T21:34:12Z",
		"body" : "Fixed by #1090 actually. Simple and stupid stuff.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1091
	},
	{
		"id" : 249089640,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T02:56:32Z",
		"body" : "Fixed by https://github.com/Homebrew/brew/commit/5af52410abbc2a93fbaf57fc7d8637ed5eaa469f. `brew update`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1091
	},
	{
		"id" : 249032647,
		"user" : {
			"login" : "orome"
		},
		"created_at" : "2016-09-22T21:25:28Z",
		"body" : "Rebooting fixed this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1092
	},
	{
		"id" : 249092648,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T03:20:33Z",
		"body" : "Merged in https://github.com/Homebrew/brew/commit/709a20e2a0bfc8339768cd664c4ed503507908cb. Thanks @rwhogg! üò∏ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1093
	},
	{
		"id" : 249086083,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T02:27:19Z",
		"body" : "I can get my particular one to reproduce by doing:\r\n```\r\nbrew install openssl@1.1\r\nbrew upgrade openssl@1.1 -s -v\r\n```\r\nWhich is just great, because it's blocking me from properly investigating https://github.com/Homebrew/homebrew-core/issues/5126. *Throws MacBook into the ocean*.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1094
	},
	{
		"id" : 249136675,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T08:45:10Z",
		"body" : "Yeah, I can reproduce, but I don't plan to throw a 2.5 grand MacBook into the ocean, plus there's no ocean around me. üòå ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1094
	},
	{
		"id" : 249208490,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-23T14:30:40Z",
		"body" : "This is just a Makefile bug",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1094
	},
	{
		"id" : 249212977,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-23T14:48:22Z",
		"body" : "But the underlying cause is that the same prefix is being reused due to Homebrew/homebrew-core#5126, so the file is already there. The Makefile doesn't handle that situation correctly, but it ordinarily never would have to because we start out with an empty `prefix`. In this case it's starting out with a fully occupied prefix, and the problematic files have mode 444.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1094
	},
	{
		"id" : 249070916,
		"user" : {
			"login" : "wayne-luminal"
		},
		"created_at" : "2016-09-23T00:50:16Z",
		"body" : "Came here to report this. I am having the same problem.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249074388,
		"user" : {
			"login" : "Sauraus"
		},
		"created_at" : "2016-09-23T01:09:52Z",
		"body" : "Workaround is to delete `/usr/local/Cellar` & `/usr/local/Homebrew` at least that did the trick for me and I could install brew again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249117918,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T07:03:05Z",
		"body" : "> Workaround is to delete /usr/local/Cellar & /usr/local/Homebrew at least that did the trick for me and I could install brew again.\r\n\r\n@Sauraus Glad you have a workaround. I'll try to fix the install/uninstall process to handle this case.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249160427,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T10:47:42Z",
		"body" : "To anyone who experiences this problem: the output of the following commands could help us diagnose your issue:\r\n\r\n```bash\r\nbrew --prefix\r\ncommand -v brew\r\n/bin/ls -ld /usr/local/bin/brew /usr/local/.git\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249219643,
		"user" : {
			"login" : "wayne-luminal"
		},
		"created_at" : "2016-09-23T15:13:41Z",
		"body" : "@zmwangx \r\n\r\n```\r\n[:~] % brew --prefix\r\nzsh: command not found: brew\r\n[:~] 127 % command -v brew\r\n[:~] 1 % /bin/ls -ld /usr/local/bin/brew /usr/local/.git\r\nls: /usr/local/.git: No such file or directory\r\nls: /usr/local/bin/brew: No such file or directory\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249220838,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T15:17:58Z",
		"body" : "@wayne-luminal Do you have `/usr/local/Homebrew/.git`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249221228,
		"user" : {
			"login" : "wayne-luminal"
		},
		"created_at" : "2016-09-23T15:19:08Z",
		"body" : "@zmwangx Yes\r\n\r\n```\r\n[:~] % cd /usr/local/Homebrew\r\n[:/usr/local/Homebrew] master ¬± ls -a\r\n.                .git             .gitignore       .yardopts        CONTRIBUTING.md  Library          bin              docs\r\n..               .github          .travis.yml      CODEOFCONDUCT.md LICENSE.txt      README.md        completions      manpages\r\n[:/usr/local/Homebrew] master ¬±\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249222471,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T15:23:53Z",
		"body" : "@wayne-luminal That's very interesting, no `bin`. You should\r\n\r\n```sh\r\ncd /usr/local/Homebrew\r\ngit fetch\r\ngit reset --hard origin/master\r\nls -l bin/brew  # you should have it now\r\nbin/brew update --force\r\n```\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249225073,
		"user" : {
			"login" : "Sauraus"
		},
		"created_at" : "2016-09-23T15:33:36Z",
		"body" : "I can reproduce this problem consistently with using the Chef Homebrew cookbook (https://github.com/chef-cookbooks/homebrew) when installing brew on a VM running Sierra on VMWare-Fusion 8.5.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249225778,
		"user" : {
			"login" : "wayne-luminal"
		},
		"created_at" : "2016-09-23T15:36:07Z",
		"body" : "@zmwangx Looks like that did the trick to let me use brew again. I ended up on the v1.0.2 release directly so I just manually reset to master and ran a second update. Aside from this and needing to create a symlink myself, these steps worked for me.\r\n\r\n```\r\n[:/usr/local/Homebrew] master ¬± git fetch\r\nremote: Counting objects: 639, done.\r\nremote: Compressing objects: 100% (173/173), done.\r\nremote: Total 639 (delta 510), reused 588 (delta 463), pack-reused 0\r\nReceiving objects: 100% (639/639), 66.48 KiB | 0 bytes/s, done.\r\nResolving deltas: 100% (510/510), completed with 142 local objects.\r\nFrom https://github.com/Homebrew/brew\r\n   559cea7..246bb1a  master     -> origin/master\r\n[:/usr/local/Homebrew] master ¬± git reset --hard origin/master\r\nHEAD is now at 246bb1a Merge pull request #1050 from reitermarkus/rubocop\r\n[:/usr/local/Homebrew] master ¬± ls -l bin/brew\r\n-rwxr-xr-x  1 user  admin  1363 Sep 22 20:47 bin/brew\r\n[:/usr/local/Homebrew] master ¬± bin/brew update --force\r\nUpdated 2 taps (caskroom/cask, homebrew/core).\r\n==> Updated Formulae\r\naws-sdk-cpp                      cromwell                         gitlab-ci-multi-runner           kobalt                           mesos                            repo\r\n[:/usr/local/Homebrew] v1.0.2 1 ¬±\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249226284,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T15:37:53Z",
		"body" : "@wayne-luminal \r\n\r\n> I ended up on the v1.0.2 release directly so I just manually reset to master and ran a second update\r\n\r\nYou ended up on the v1.0.2 release because you should.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249226645,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T15:39:12Z",
		"body" : "@Sauraus \r\n\r\n> I can reproduce this problem consistently with using the Chef Homebrew cookbook \r\n\r\nWell, if you want to get support from us you should follow *our* instructions, not the Chef Homebrew cookbook (I don't know what that is)...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249228584,
		"user" : {
			"login" : "Sauraus"
		},
		"created_at" : "2016-09-23T15:46:29Z",
		"body" : "@zmwangx I was just trying to provide a test case that causes this split brain brew install in the first place, therefore I am not entirely sure what you mean by 'follow **our** instructions'?\r\n\r\nThe root cause in my case appears to be a timeout on the git fetch operation during the brew install which results in a half-baked brew installation, necessitating the manual git fetch operation to un-break it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249231235,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T15:56:27Z",
		"body" : "> I was just trying to provide a test case that causes this split brain brew install in the first place\r\n\r\nThanks for a \"test case\" like this: https://github.com/chef-cookbooks/homebrew",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249232915,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T16:03:20Z",
		"body" : "I think what @zmwangx is trying to say is: if you can produce a reproducible test case with e.g. Homebrew's installer let us know so we can fix it but we cannot be responsible for how e.g. Chef installs Homebrew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249234062,
		"user" : {
			"login" : "Sauraus"
		},
		"created_at" : "2016-09-23T16:07:58Z",
		"body" : "Someone will have to explain to me how they differ... :)\r\n\r\nOfficial brew page:\r\n```\r\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\r\n```\r\n\r\nChef Homebrew recipe:\r\n```\r\ndefault['homebrew']['installer']['url'] = 'https://raw.githubusercontent.com/Homebrew/install/master/install'\r\n\r\nremote_file homebrew_go do\r\n  source node['homebrew']['installer']['url']\r\n  checksum node['homebrew']['installer']['checksum'] unless node['homebrew']['installer']['checksum'].nil?\r\n  mode 00755\r\nend\r\n\r\nexecute 'install homebrew' do\r\n  command homebrew_go\r\n  environment lazy { { 'HOME' => ::Dir.home(homebrew_owner), 'USER' => homebrew_owner } }\r\n  user homebrew_owner\r\n  not_if { ::File.exist? '/usr/local/bin/brew' }\r\nend\r\n```\r\n\r\nBoth methods run exactly the same code. ;)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249235300,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T16:12:43Z",
		"body" : "> Someone will have to explain to me how they differ... :)\r\n\r\nI'm afraid you got it wrong. No one (here) has to explain that to me because how Chef installs Homebrew is none of our business.\r\n\r\nI'm also afraid I can't read that DSL, and thus can't tell whether it differs.\r\n\r\nBottom line: If you have problem with `/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`, let us know. Otherwise, I'm afraid you'll need to talk to Chef.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 250920751,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T16:12:26Z",
		"body" : "The install situation should be massively improved by https://github.com/Homebrew/install/pull/69.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 250920751,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T16:12:26Z",
		"body" : "The install situation should be massively improved by https://github.com/Homebrew/install/pull/69.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1095
	},
	{
		"id" : 249047880,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-22T22:34:46Z",
		"body" : "Just great. Great great great. Fantastic.\r\n\r\nGive me a short while.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249048684,
		"user" : {
			"login" : "reaperhulk"
		},
		"created_at" : "2016-09-22T22:39:03Z",
		"body" : "FWIW I would be fine with having a flag to bypass the check. This would result in breakage for Travis projects, but they'd be able to add `--no-xcode-check` and proceed, while normal desktop users would continue to receive the fatal error and be asked to upgrade.\r\n\r\nThanks for the quick action @DomT4!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249049605,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-22T22:43:41Z",
		"body" : "I've just reverted it for now before people start noticing this & I have to deal with 50 unique issues üòï. We'll want to keep the check, but yeah, we'll want to be smarter about it since there's nothing people relying on Travis can do to force Travis to update.\r\n\r\nI believe Travis sets `TRAVIS` or something similar in the environment, so maybe I can sniff that out & skip over when it exists.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249050503,
		"user" : {
			"login" : "reaperhulk"
		},
		"created_at" : "2016-09-22T22:48:42Z",
		"body" : "They do (https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables), although I'd personally prefer a flag rather than it trying to sniff the env. I completely understand why you may not want to go that route due to the avalanche of bug reports you'd receive, although maybe that can be mitigated by using the env detection to just print a message suggesting that they add the flag?\r\n\r\nEither way, I appreciate the hard work you do here! üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249051231,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T22:52:27Z",
		"body" : "I'd rather people never need to worry about brew (plus people can't read), so I'd vote for env var detection, although that means only the most popular service(s) get special treatment.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249052454,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-22T22:59:31Z",
		"body" : "I'll probably re-add it with a couching that allows `TRAVIS` and `HOMEBREW_DEVELOPER` to not suffer fatal failures on this. That's maybe not a bad compromise.\r\n\r\nGiven we soft-fail if you try to force link OpenSSL and almost nobody seems to have noticed or tweaked their Travis builds accordingly I'd take a rough guess that a lot of people aren't regularly reading the logs particularly deeply.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249052730,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-22T23:01:03Z",
		"body" : "> Given we soft-fail if you try to force link OpenSSL\r\n\r\nThat one definitely broke SO though, lol.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249055411,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-22T23:17:08Z",
		"body" : "https://github.com/Homebrew/brew/pull/1097",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249308073,
		"user" : {
			"login" : "DanToml"
		},
		"created_at" : "2016-09-23T21:34:40Z",
		"body" : "@DomT4 Hey, sorry for commenting on a closed issue, but I think this may need a slightly more complex solution. We're having similar problems over at CircleCI, and can't force users to upgrade their formulae or Xcode versions.\r\n\r\nA potential solution would be the discussed explicit `--no-xcode-check`, or adding a generic `CI` env var check, but this could break users local workflows (Especially for Swift Formulae that may not work on latest Xcode yet, like [SwiftLint](https://github.com/Homebrew/homebrew-core/blob/303660134f72cffaef94f87abfb6bfeedccc0e1c/Formula/swiftlint.rb)).\r\n\r\nI'm more than happy to contribute a PR for this, but I'm not sure which approach the team would rather see.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249309354,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T21:41:18Z",
		"body" : "@DanToml Do you set an env in the same way Travis does by any chance? I might just scope this to 10.12 temporarily until we can iron this out a bit more üòï.\r\n\r\nThe primary point of the change was to stop 10.12 users running Xcode 7.x, which flat out breaks almost everything on 10.12 in fun and interesting ways, so if we have to tone it down a touch whilst considering how to move forwards I can live with that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249309973,
		"user" : {
			"login" : "DanToml"
		},
		"created_at" : "2016-09-23T21:44:42Z",
		"body" : "@DomT4 Yeah, we set `CIRCLECI` and `CI` to true on every build.\r\n\r\nYeah I've seen some pretty weird issues from people running 7.x on 10.12 with some of my repos, but also the same types of issue with Xcode 8.0 running on 10.11 for more complex dependencies.\r\n\r\nI threw up a branch with a check for our env for a quick test https://github.com/DanToml/brew/tree/dani_circleci_xcode_version, but can PR a toned down check now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249310413,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-23T21:47:15Z",
		"body" : "@DomT4 FYI Travis sets `CI` as well, so you could just use that instead of both `TRAVIS` and CIRCLECI`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249310509,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T21:47:47Z",
		"body" : "Give me a sec, I'll push something directly to solve the problem. We protect our master branch but I can turn it off temporarily. Otherwise you'll be waiting 40+ minutes for a solution as our CI tests on core code are fairly extensive and our CI resources fairly limited.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249313432,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T22:04:37Z",
		"body" : "Double opt-out in https://github.com/Homebrew/brew/commit/12aad5c65fee39c5f044e39ca1efcbed58aebd39. If you're running `ENV[\"CI\"]` anywhere you won't get nagged at, even if you're running Sierra. If you're running any OS X version prior to Sierra you won't get nagged at. If you're running Sierra and your installed development tools are outdated and you're not a robot, you'll get nagged at üòÑ.\r\n\r\nHopefully that's a decent short-term compromise until we can iron out the kinks in a way that works for everyone.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249313581,
		"user" : {
			"login" : "DanToml"
		},
		"created_at" : "2016-09-23T22:05:39Z",
		"body" : "@DomT4 üíñ thanks for this!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249354965,
		"user" : {
			"login" : "Adnn"
		},
		"created_at" : "2016-09-24T09:20:55Z",
		"body" : "Hi,\r\n\r\n@DomT4 Since a recent `brew update`, I am running into the reported error.\r\n\r\n> Error: Your Xcode (6.4) is outdated\r\n> Please update to Xcode 8.0.\r\n\r\n My environment is El Capitan (OS X 10.11), I tried updating brew just now, without success. I also reinstalled it (just to make sure).\r\n\r\n     ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\"\r\n    /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\r\n\r\nWithout any more success.\r\n\r\nFrom your latest comment:\r\n> If you're running any OS X version prior to Sierra you won't get nagged at. \r\nI understood that and up-to-date version of brew should not raise this error anymore. Is there something obvious I missed ?\r\n\r\nThank you for reading",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249355208,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T09:27:05Z",
		"body" : "@Adnn \r\n\r\n> It thus seems an up-to-date version of brew on El Capitan should not raise this error anymore. Is there something obvious I missed ?\r\n\r\nOnly if you're on the master branch. But apparently you're on the 1.0.3 branch, and you should wait for the 1.0.4 release.\r\n\r\nIn the meantime the workaround is `export TRAVIS=1`, but seriously, Xcode 6.4 on El Capitan? We can't guarantee that won't be blocked again in the near future. No way are we going to support this configuration. Please at least update to Xcode 7.3.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249355444,
		"user" : {
			"login" : "Adnn"
		},
		"created_at" : "2016-09-24T09:32:22Z",
		"body" : "@zmwangx Thank you for the workaround, it works!\r\n\r\nThen, Xcode 6.4 ships with llvm 3.6 based compiler. Appart from Boost, not so many projects are C++ enough to go beyond the limit of this compiler ;)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249355567,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T09:35:03Z",
		"body" : "@Adnn A major Xcode release is much more than better coverage of newer C++ specs (think about Swift for a very basic example). Keep in mind that if you run into problems with Xcode 6.4 we cannot provide support for you, and we may block Xcode 6.4 on El Capitan in the future.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249366499,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-24T14:03:55Z",
		"body" : "Yeah. I tweaked the change, which will land in the next tag which likely won't be too long, but realistically at some point in the future we will likely be enforcing a minimum supported Xcode version, which for 10.11 is likely to be `7.2.1` or such rather than `8.0`.\r\n\r\nThis offers people some flexibility but also will quite drastically reduce the level of bugs users see & the level of bugs our reply has to be \"Upgrade your Xcode\" to. We have diagnostic warnings in place already, but too many people ignore them and it creates unnecessary hassle for them & increases the maintenance burden on us not insignificantly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1096
	},
	{
		"id" : 249117605,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T07:01:00Z",
		"body" : "Seems fine. I wonder(ed) if we wanted to enforce only certain versions of Xcode/CLT in this that we know to be problematic e.g. Xcode 7 on Sierra.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249260320,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T17:56:51Z",
		"body" : "Thanks for the merge! Do you want a PR with further tweaks here or are you happy?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249261870,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T18:03:32Z",
		"body" : "Think it's fine as-is. We can iterate if people üò≠ \r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249262011,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T18:04:06Z",
		"body" : "Cool üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249279006,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-23T19:15:16Z",
		"body" : "My apologies if I misunderstand the nature of this commit.  This comment is about the user-friendliness of the commit, not the motivation or the implementation.\r\n\r\nI think we should provide clear instructions how a user who is *temporarily* stuck with a newly-obsolete Xcode can get out of jail.\r\n\r\nI'm thinking of cases where an Xcode bump comes out but a user hasn't had the chance to download it yet:  either because she's on a slow connection, or even just because Xcode is an enormous download and takes a while even on broadband, or because she needs to perform careful backups and such before installing a potentially disruptive Xcode bump.\r\n\r\nI don't like the idea that such a user---who *intends* to update to the latest version very soon---would be (or believe herself to be) frozen out of using homebrew until then.  There may even be a critical update to something that she needs to brew right away, but can't because she is still waiting until she can install the latest Xcode.\r\n\r\nI think we can keep old Xcodes being fatal so long as (a) the commit that kills a given Xcode is always  tagged, and (b) in the fatality warning message we either provide clear and visible instructions on how she can use `git` to revert to the `brew` tag immediately prior to the one that killed her Xcode, or inform her that setting HOMEBREW_DEVELOPER will get her out of jail, or both.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249280077,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T19:20:13Z",
		"body" : "> I don't like the idea that such a user---who intends to update to the latest version very soon---would be (or believe herself to be) frozen out of using homebrew until then. There may even be a critical update to something that she needs to brew right away, but can't because she is still waiting until she can install the latest Xcode.\r\n\r\nI think so long as we wait until a bit after a major release it's reasonable for us to force this through. Xcode 7 on Sierra, for example, is known to be extremely broken. Perhaps we could restrict to more finely grained situations like that but I don't really ever want to allow people to install (even if they _really have to_) in that situation.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249280431,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T19:21:59Z",
		"body" : "As this currently stands Xcode 7 on El Capitan is also fatal, which could be controversial.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249280987,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T19:24:41Z",
		"body" : "> There may even be a critical update to something that she needs to brew right away, but can't because she is still waiting until she can install the latest Xcode.\r\n\r\nIf we've already moved over to the new Xcode we can't make any guarantees the old Xcode will work, and indeed, as `homebrew/core` has punchily shown over the last few days a lot of the time it won't, and because we've just upgraded ourselves there's very little we can do to help you debug in that situation.\r\n\r\nI'm open to further tweaking, but I think fairly clearly we need to be harder on this sort of thing than we were.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249281697,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T19:28:00Z",
		"body" : "I'd say nagging is better than failing out right on less problematic combinations (Xcode 7 on El Capitan). You don't really need to latest everything to pour bottles, for instance.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249282487,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T19:31:44Z",
		"body" : "I guess I'm wary that going forwards the conditional could get a little more wild, for example right now:\r\n```ruby\r\nif MacOS.version == :sierra && MacOS::Xcode.installed? && MacOS::Xcode.version < \"8.0\"\r\n```\r\nIs semi-doable, but come a year's time that might become something like:\r\n```ruby\r\nif MacOS.version == :sierra && MacOS::Xcode.installed? && MacOS::Xcode.version < \"8.0\" || MacOS.version == :cupertino && MacOS::Xcode.installed? && MacOS::Xcode.version < \"9.0\"\r\n```\r\netc, that's kind of getting out of hand.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249282627,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T19:32:22Z",
		"body" : "But the bug reports...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249283241,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T19:35:21Z",
		"body" : "It feels like the Right Solution may be just to have a minimum Xcode version set somewhere per-OS. Make it data in a hash rather than a conditional. We store the latest but we could also store a minimum; we warn if not latest and fail if not minimum. Should be easy to write and enforce.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249290658,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-23T20:11:18Z",
		"body" : "> As this currently stands Xcode 7 on El Capitan is also fatal, which could be controversial.\r\n\r\nThis is exactly the sort of case I had in mind.  (Plus, AFAICT right now, Xcode 8 on ElCap is more likely to cause a problem than Xcode 7 on ElCap.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249290896,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-23T20:12:30Z",
		"body" : "> If we've already moved over to the new Xcode we can't make any guarantees the old Xcode will work, and indeed, as homebrew/core has punchily shown over the last few days a lot of the time it won't,\r\n\r\nWe can't make any guarantees, but: probably it will still work.  Especially if the user reverts to the tag prior to the killing of the Xcode.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249291128,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-23T20:13:34Z",
		"body" : "> I think fairly clearly we need to be harder on this sort of thing than we were.\r\n\r\nAgreed :smile:, I just think we need to offer users a way out if they're in a jam at the moment.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249292225,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-23T20:18:39Z",
		"body" : "> We store the latest but we could also store a minimum; we warn if not latest and fail if not minimum. Should be easy to write and enforce.\r\n\r\nI like this idea.\r\n\r\nSeparate from whatever the plan is, I think it's a good idea to make sure that Xcode-killing commits are tagged (or that the commit just prior to the killer is tagged).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249294697,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T20:29:57Z",
		"body" : "@chdiza If you want it done ASAP, you may want to work up a Pull Request. Otherwise improving this is on my list, but not right at the top.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1097
	},
	{
		"id" : 249117773,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T07:02:07Z",
		"body" : "What does `ls -lha /Users/craig/brew/bin/brew` and `which brew` output?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1098
	},
	{
		"id" : 249118405,
		"user" : {
			"login" : "chmaynard"
		},
		"created_at" : "2016-09-23T07:06:08Z",
		"body" : "```\r\n$ ls -lha /Users/craig/brew/bin/brew\r\n-rwxr-xr-x  1 craig  admin   1.3K Sep 21 15:43 /Users/craig/brew/bin/brew\r\n\r\n$ which brew\r\n/Users/craig/brew/bin/brew\r\n\r\n```\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1098
	},
	{
		"id" : 249125476,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T07:49:06Z",
		"body" : "How about `ls -lha /usr/local/bin/brew`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1098
	},
	{
		"id" : 249165655,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T11:15:18Z",
		"body" : "Also,\r\n\r\n```\r\n/usr/bin/sed -i '' $'1 a\\\\\\nset -x\\n' /Users/craig/brew/bin/brew\r\nbrew\r\n```\r\n\r\nwill help us a lot in diagnosing your issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1098
	},
	{
		"id" : 249181220,
		"user" : {
			"login" : "chmaynard"
		},
		"created_at" : "2016-09-23T12:40:04Z",
		"body" : "```\r\n$ ls -lha /usr/local/bin/brew\r\nlrwxr-xr-x  1 root  wheel    30B Sep 21 07:49 /usr/local/bin/brew -> /Users/craig/Homebrew/bin/brew\r\n```\r\n\r\nOops. Sorry for the noise.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1098
	},
	{
		"id" : 249184163,
		"user" : {
			"login" : "chmaynard"
		},
		"created_at" : "2016-09-23T12:53:45Z",
		"body" : "@zmwangx I'm not familiar with sed. How do I undo this?\r\n\r\n    /usr/bin/sed -i '' $'1 a\\\\\\nset -x\\n' /Users/craig/brew/bin/brew",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1098
	},
	{
		"id" : 249184593,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T12:55:44Z",
		"body" : "@chmaynard \r\n\r\n    git -C /Users/craig/brew/bin checkout brew",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1098
	},
	{
		"id" : 249186880,
		"user" : {
			"login" : "chmaynard"
		},
		"created_at" : "2016-09-23T13:05:08Z",
		"body" : "üôè",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1098
	},
	{
		"id" : 249191064,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T13:22:09Z",
		"body" : "@zmwangx That's unnecessary, btw, you can just use `--debug`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1098
	},
	{
		"id" : 249191363,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T13:23:26Z",
		"body" : "@MikeMcQuaid `--debug` has no effect on `/bin/brew`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1098
	},
	{
		"id" : 249192442,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T13:27:39Z",
		"body" : "@zmwangx Aye but it'll dump the variables in `brew.sh` such as HOMEBREW_BREW_FILE",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1098
	},
	{
		"id" : 249193203,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T13:30:20Z",
		"body" : "@MikeMcQuaid It you never get to the sourcing `brew.sh` stage then it won't (which is the case here), unfortunately.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1098
	},
	{
		"id" : 249193981,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T13:33:03Z",
		"body" : "@zmwangx True. Another option is `bash -x /Users/craig/brew/bin/brew`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1098
	},
	{
		"id" : 249194068,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T13:33:18Z",
		"body" : "Yeah.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1098
	},
	{
		"id" : 249118195,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T07:04:47Z",
		"body" : "To help us debug this issue can you explain:\r\n- What you were trying to do (and why)\r\n- What happened\r\n- What you expected to happen\r\n- Step-by-step reproduction instructions (with as minimal input data as possible)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1099
	},
	{
		"id" : 249128978,
		"user" : {
			"login" : "alexrockt"
		},
		"created_at" : "2016-09-23T08:06:00Z",
		"body" : "Should be fixed today with https://github.com/Homebrew/brew/pull/1090",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1099
	},
	{
		"id" : 249370221,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:23:00Z",
		"body" : "Closing as I don't know what the problem is.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1099
	},
	{
		"id" : 249189727,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T13:16:24Z",
		"body" : "Actually Cellar and stuff need cleanup too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1100
	},
	{
		"id" : 249508540,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-26T08:24:12Z",
		"body" : "Travis seems to need its own cure :( https://github.com/Homebrew/brew/issues/1150",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1100
	},
	{
		"id" : 249147684,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T09:39:21Z",
		"body" : "While you're playing with this might want to handle the openssl case @DomT4 mentioned?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1102
	},
	{
		"id" : 249148128,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T09:41:32Z",
		"body" : "@MikeMcQuaid We seem to be parsing openssl versions just fine? The version comparison issue is handled by `version_scheme`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1102
	},
	{
		"id" : 249151599,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T09:58:19Z",
		"body" : "I believe `1.0.0a` is interpreted as an alpha, incorrectly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1102
	},
	{
		"id" : 249153569,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T10:08:56Z",
		"body" : "That's the expected behavior due to\r\n\r\n```ruby\r\n  class AlphaToken < CompositeToken\r\n    PATTERN = /a(?:lpha)?[0-9]*/i\r\n\r\n    def <=>(other)\r\n      case other\r\n      when AlphaToken\r\n\trev <=> other.rev\r\n      else\r\n        super\r\n      end\r\n    end\r\n  end\r\n```\r\n\r\nWe might be able to change that pattern to `/a[0-9]+|alpha[0-9]*/`, but I'm not sure if that's going to break any existing formula.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1102
	},
	{
		"id" : 249153877,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T10:10:45Z",
		"body" : "> We might be able to change that pattern to /a[0-9]+|alpha[0-9]*/, but I'm not sure if that's going to break any existing formula.\r\n\r\nI think in this case given we know it breaks at least one pretty popular formula as-is it's worth making the change. @DomT4, thoughts?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1102
	},
	{
		"id" : 249153958,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T10:11:14Z",
		"body" : "By the way I noticed that non-capturing groups are used all over the place in `versions.rb`. What's the point?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1102
	},
	{
		"id" : 249155225,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T10:18:04Z",
		"body" : "> What's the point (when we only need .captures.first anyway)?\r\n\r\nNot sure. Could be it used to use multiple captures.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1102
	},
	{
		"id" : 249155484,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T10:19:17Z",
		"body" : "Do we want to keep using non-capturing groups, or remove them where unnecessary en masse?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1102
	},
	{
		"id" : 249155769,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T10:20:48Z",
		"body" : "I don't mind, up to you.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1102
	},
	{
		"id" : 249156007,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T10:22:13Z",
		"body" : "I'll keep using non-capturing group here for consistency, and maybe open a separate PR afterwards to handle the removal.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1102
	},
	{
		"id" : 249164819,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-23T11:10:44Z",
		"body" : "> I think in this case given we know it breaks at least one pretty popular formula as-is it's worth making the change. @DomT4, thoughts?\r\n\r\nI'm not too fussed about going out of our way to handle OpenSSL. They stand out as having a particularly unusual version scheme & it's not necessary a surprise that doesn't mesh well with our overall version logic in places. Everything else seems to be more or less working as intended/\r\n\r\nIf people want to tweak it & test that against a bunch of places where we use `a` in the version & that `a` is no longer detected as an alpha releases I'd be fine with that, but I don't think the status quo is a massive problem outside of OpenSSL's version weirdness.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1102
	},
	{
		"id" : 249167309,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T11:24:30Z",
		"body" : "Maybe we should just override version code inside openssl formulae themselves?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1102
	},
	{
		"id" : 249190153,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T13:17:53Z",
		"body" : "> I'm not too fussed about going out of our way to handle OpenSSL. They stand out as having a particularly unusual version scheme & it's not necessary a surprise that doesn't mesh well with our overall version logic in places. Everything else seems to be more or less working as intended/\r\n\r\nI don't know if I agree; having `a` on the end of a version doesn't seem to imply alpha to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1102
	},
	{
		"id" : 249356339,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T09:53:13Z",
		"body" : "I'm merging this because the openssl discussion isn't directly related to the fairly straightforward change in this PR. Please keep the discussion going if you will, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1102
	},
	{
		"id" : 249367533,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-24T14:28:41Z",
		"body" : "There are some other things that misleadingly put an \"a\" on the end of non-alpha versions at times.  I think at least one of the `gmp`/`mpfr` duo has done that.  I also vaguely recall `tmux` doing that at least once.  Maybe there should be a hash that holds all the formulas at a given time that are like this, and use it has a kind of whitelist against accusations of alphahood.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1102
	},
	{
		"id" : 249190477,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T13:19:27Z",
		"body" : "We'll need more than single user to request this, I'm afraid. A workaround would be to do another mount on top of `var/homebrew/locks` to some other non-NFS path.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1104
	},
	{
		"id" : 249211165,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T14:41:22Z",
		"body" : "Sorry, `brew update` has been around for years and we surely won't rename it and break everything. Use an alias like `brewu` for `brew update` to prevent mistyping.\r\n\r\n> Or alternatively, could brew upgrade do nothing without args, and have an --all flag to upgrade all pacakges?\r\n\r\nThat one's been tried, people got angry, and the decision was reversed. So no.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1105
	},
	{
		"id" : 249212920,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T14:48:08Z",
		"body" : "By the way,\r\n\r\n> where the slightest change in node version can have weird and wild hard to trace effects.\r\n\r\n`brew pin node`, or use something like nvm instead.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1105
	},
	{
		"id" : 249243601,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T16:48:01Z",
		"body" : "@reitermarkus It may be worth merging these one at a time? Makes it easier to review. Feel free to just open a ton of PRs üòâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1106
	},
	{
		"id" : 249270280,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T18:38:12Z",
		"body" : "Just occurred to me: need to ensure formulae still have these whitelisted in future otherwise `homebrew/core` will fail on `brew style`: https://bot.brew.sh/job/Homebrew%20Core%20Pull%20Requests/8168/version=el_capitan/console.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1106
	},
	{
		"id" : 249226929,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T15:40:19Z",
		"body" : "Those happen all the time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1107
	},
	{
		"id" : 249227067,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-23T15:40:51Z",
		"body" : "I usually just run `brew tests --only=<what-i-changed>`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1107
	},
	{
		"id" : 249227638,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-09-23T15:43:00Z",
		"body" : "Reassuring, will do that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1107
	},
	{
		"id" : 249228320,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-23T15:45:28Z",
		"body" : "Definitely shouldn't be failing all the time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1107
	},
	{
		"id" : 249229158,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-09-23T15:48:49Z",
		"body" : "A consistently failing integration test masked a failing assertion I'd added in the same test in #1088 - hence the bot failed it in CI. Be nice to start with a clean slate.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1107
	},
	{
		"id" : 249542698,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-09-26T11:14:12Z",
		"body" : "Seems to be a more fundamental problem; whatever test files are being run, they are not the ones on my local master branch. In this [gist](https://gist.github.com/MatzFan/49005163e31a8832643f43391d8e07c3) I ran `test_resource.rb` only, as this highlights one of the failing tests, then _removed_ that file, ran it again - same result!! Maybe my git is corrupt - anyone seen anything like this before?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1107
	},
	{
		"id" : 249797285,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:15:44Z",
		"body" : "Which test is consistently failing for you both?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1107
	},
	{
		"id" : 249806631,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-09-27T08:57:03Z",
		"body" : "@MikeMcQuaid for me these 5, still with `master` right up to date this morning - but see my comment above re odd behaviour:\r\n\r\n- `ResourceTests#test_verify_download_integrity_mismatch`\r\n- `AbstractDownloadStrategyTests#test_expand_safe_system_args_with_explicit_quiet_flag`\r\n- `AbstractDownloadStrategyTests#test_expand_safe_system_args_with_implicit_quiet_flag`\r\n- `IntegrationCommandTestTap#test_tap`\r\n- `IntegrationCommandTestOutdated#test_outdated`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1107
	},
	{
		"id" : 249860314,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T13:11:34Z",
		"body" : "@MatzFan Could you try to fix them and submit fixes? Hard to do so myself when I and the bot can't reproduce üò≠ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1107
	},
	{
		"id" : 249861827,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-09-27T13:17:41Z",
		"body" : "Will do",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1107
	},
	{
		"id" : 249367224,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-24T14:20:25Z",
		"body" : "Oh, er, wait a sec. This seems to have caused `Homebrew >1.0.0 (no git repository)` to return for me when I `cd` out of `HOMEBREW_REPOSITORY`. Forgot to check that before I approved üòì.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1109
	},
	{
		"id" : 249367238,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T14:20:58Z",
		"body" : "Why not `git -C \"$HOMEBREW_REPOSITORY\"`? Use env vars for hinting feels wrong.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1109
	},
	{
		"id" : 249367291,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T14:22:25Z",
		"body" : "@DomT4 Although you can't actually forget that check, you can override that with another request changes...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1109
	},
	{
		"id" : 249367360,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-24T14:24:11Z",
		"body" : "@zmwangx Thanks. Still getting used to this review system üôà.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1109
	},
	{
		"id" : 249369364,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:06:29Z",
		"body" : "> Why not git -C \"$HOMEBREW_REPOSITORY\"?\r\n\r\nGood idea.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1109
	},
	{
		"id" : 249360253,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-24T11:34:02Z",
		"body" : "@MikeMcQuaid, should be good to merge now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1113
	},
	{
		"id" : 249359129,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T11:06:17Z",
		"body" : "I've been wondering whether this is better than just having everyone always on `master` and `master` reflecting either `origin/master` or the latest tag.\r\n\r\n> I'm worried about the damage that's already done. There should be users that are already stuck, and since we no longer update to master, we can't modify their update logic.\r\n\r\nI'm not. We set the dev-cmd stuff for people we expect to be working on Homebrew so have some familiarity with git. These are by their nature more technical users.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1114
	},
	{
		"id" : 249359300,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T11:10:30Z",
		"body" : "> I'm not. We set the dev-cmd stuff for people we expect to be working on Homebrew so have some familiarity with git. These are by their nature more technical users.\r\n\r\nThe problem is they may not notice until quite some time later, if ever.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1114
	},
	{
		"id" : 249359359,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T11:12:04Z",
		"body" : "> I've been wondering whether this is better than just having everyone always on master and master reflecting either origin/master or the latest tag.\r\n\r\nI think developers should have their initial branch restored either way, unless you disable auto update out right for developers (which actually may be a good idea).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1114
	},
	{
		"id" : 249359472,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T11:14:39Z",
		"body" : "> I think developers should have their initial branch restored either way, unless you disable auto update out right for developers (which actually may be a good idea).\r\n\r\nI agree, I just mean for the branches we do have people on rather than `v1.0.1` maybe it makes sense to always have `master`.\r\n\r\n> The problem is they may not notice until quite some time later, if ever.\r\n\r\nNow we have a core/formula separation I'm less concerned about this. They will notice eventually and the workaround is pretty simple.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1114
	},
	{
		"id" : 249359197,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T11:07:51Z",
		"body" : "Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/docs/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1115
	},
	{
		"id" : 249357689,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T10:25:57Z",
		"body" : "No, I'm not sure where you got that false information. Unless you chose `~/local` as your custom location (which is a very weird choice, and you won't be able to use our binary packages for most formulae).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1116
	},
	{
		"id" : 249358839,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T10:58:33Z",
		"body" : "Good luck reverting and resolving a million conflicts üòó ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1117
	},
	{
		"id" : 249358881,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T10:59:44Z",
		"body" : "@zmwangx You won't have to assist with that if you do not want to.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1117
	},
	{
		"id" : 249358996,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T11:02:40Z",
		"body" : "I disagree, we should still enforce them but fix the rules so that homebrew/core is excluded from them (or has different rules). I will happily revert them all back for you as I made the first change.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1117
	},
	{
		"id" : 249359423,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-24T11:13:37Z",
		"body" : "Given the current set of rules, I don't think we should fail CI over not abiding by them. If the facts on the ground change at some later date, then I may come to some other conclusion.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1117
	},
	{
		"id" : 249367095,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-24T14:17:43Z",
		"body" : "I agree with ILZ that the `depends_on` situation on core now at least is confusing & inconsistent. It takes me a few seconds to get my head around:\r\n```ruby\r\ndepends_on \"pkg-config\" => :build\r\ndepends_on ant: :build\r\ndepends_on :python\r\ndepends_on python3: :optional\r\ndepends_on \"openssl\"\r\n```\r\nLet alone newer contributors. That's an extreme example, but there will be formulae similar to that. I've no objection to a lot of the changes, but increasingly do find myself agreeing (üò±) with ILZ on `depends_on` statements.\r\n\r\nI don't know if Rubocop can be trained to simply ignore `depends_on` statements or whether this is going to require something as drastic as reverting the check as in this PR or core having its own Rubocop configuration.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1117
	},
	{
		"id" : 249368427,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-24T14:48:29Z",
		"body" : "> or core having its own Rubocop configuration.\r\n\r\nI think this would be the simplest and most flexible solution. Also might be worth taking a look at https://github.com/caskroom/rubocop-cask.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1117
	},
	{
		"id" : 249371589,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:48:48Z",
		"body" : "> The hashrocket changes in particular have siginficantly degraded the\r\n> readability, consistency, clarity, and style of formulae, as well as\r\n> expanded the opportunities for ambiguity, in exchange for no tangible\r\n> benefits to the contributors and maintainers of core.\r\n\r\nThis was fixed so passing on this PR. Considering we ask people repeatedly to change style in Homebrew formula PRs it's pretty silly to not rely on tooling to do that for us. We can selectively enable/disable rules for the taps and create our own rules so should aim to do that in future.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1117
	},
	{
		"id" : 249371498,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T15:47:10Z",
		"body" : "Merging immediately to match https://github.com/Homebrew/homebrew-core/pull/5177.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1119
	},
	{
		"id" : 249372159,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T15:59:58Z",
		"body" : "This doesn't really make sense. `1.0.0a2` is a very common alpha version scheme, in the Python world at least. It's actually the documented, preferred version scheme for Python and Python packages; see [PEP 440](https://www.python.org/dev/peps/pep-0440/).\r\n\r\nThe only thing that shouldn't count as alpha is a bare `a` without number, e.g. `1.0.0a`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1120
	},
	{
		"id" : 249374540,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T16:44:28Z",
		"body" : "> Maybe add a test to make sure openssl's crappy version scheme isn't treated as alpha again?\r\n\r\nDone.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1120
	},
	{
		"id" : 249374598,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T16:45:16Z",
		"body" : "@zmwangx Thoughts?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1121
	},
	{
		"id" : 249381177,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T18:52:31Z",
		"body" : ":shipit: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1122
	},
	{
		"id" : 249424824,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-25T14:29:38Z",
		"body" : "Error: uninitialized constant Homebrew::Test::Diagnostic",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1122
	},
	{
		"id" : 249425118,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-25T14:35:18Z",
		"body" : "ah nevermind... figured out what was up",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1122
	},
	{
		"id" : 249381902,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T19:06:51Z",
		"body" : "Note to other reviewers: https://github.com/Homebrew/brew/pull/1125/files?w=1 makes this much easier.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1125
	},
	{
		"id" : 249399702,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T03:03:49Z",
		"body" : "Excuse me, have you read every change and make sure they're really equivalent? Because #1050 for instance (specifically https://github.com/Homebrew/brew/commit/52ff98853068c03b3bfa777932da1da69e35e583#diff-791b01b40fb03181802be9c2315258b2R153) seems to causing us audit errors which have at least been seen by three people so far:\r\n\r\n```\r\n$ brew audit --new-formula --display-cop-names --display-filename\r\nError: type mismatch: String given\r\nPlease report this bug:\r\n    https://git.io/brew-troubleshooting\r\n/usr/local/Homebrew/Library/Homebrew/cmd/search.rb:153:in `=~'\r\n/usr/local/Homebrew/Library/Homebrew/cmd/search.rb:153:in `block in search_tap'\r\n/usr/local/Homebrew/Library/Homebrew/cmd/search.rb:153:in `select'\r\n/usr/local/Homebrew/Library/Homebrew/cmd/search.rb:153:in `search_tap'\r\n/usr/local/Homebrew/Library/Homebrew/dev-cmd/audit.rb:346:in `block (2 levels) in audit_formula_name'\r\n```\r\n\r\nIf your answer to my question is no, can we stop these pointless, poorly-reviewed changes already?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1125
	},
	{
		"id" : 249400608,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-25T03:34:31Z",
		"body" : "> If your answer to my question is no, can we stop these pointless, poorly-reviewed changes already?\r\n\r\nTo be fair, the variable causing the type mismatch is called `rx`, which most people would assume to be a `Regexp`, no? If CI didn't break, I see no reason why a reviewer wouldn't glance over that and think it looked fine.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1125
	},
	{
		"id" : 249400855,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T03:42:25Z",
		"body" : "> called rx, which most people would assume to be a Regexp, no?\r\n\r\nThat's the right way to reason about code, yes.\r\n\r\n> If CI didn't break, I see no reason why a reviewer wouldn't glance over that and think it looked fine.\r\n\r\nAnd I see no reason to make the change just to conform to some arbitrary style guide, especially when the change is made by a program that's not guaranteed to be correct, and the replaced version is not obviously equivalent (I'm not sure, not a Ruby programmer myself and don't know about the intricacies).\r\n\r\nIf nothing breaks, sure. But if things do break, the one who made the change should be held accountable (which isn't a big deal, because everyone makes mistakes), and we should stop and think about whether these mass changes are truly justified. The way I see it, these changes just makes git-blame useless while hardly making the code a bit more readable.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1125
	},
	{
		"id" : 249402681,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-25T04:49:15Z",
		"body" : ":-1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1125
	},
	{
		"id" : 249410300,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T08:46:14Z",
		"body" : "> Excuse me, have you read every change and made sure they're really equivalent? Because #1050 for instance (specifically 52ff988#diff-791b01b40fb03181802be9c2315258b2R153) seems to causing us audit errors which have at least been seen by three people so far\r\n\r\nOne or more of those people should have created an issue. I looked periodically for new issues and did not get one. If fixes need to be made in the short-term (e.g. when other maintainers are asleep) then it's worth creating a PR to fix them, even if you didn't introduce the bug.\r\n\r\n> If your answer to my question is no, can we stop these pointless, poorly-reviewed changes already?\r\n\r\nYou may not agree with the point but they are not pointless. They are investment in a consistent style which makes it easier to automatically review contributed PRs and lets people know what our style is rather than it being arbitrary. If they are poorly-reviewed: everyone has contributed to that. You are more than welcome to ask for a time period  (e.g. 24h, 48h) to give you personally more time to better review these changes.\r\n\r\n> If CI didn't break, I see no reason why a reviewer wouldn't glance over that and think it looked fine. If anything, the break simply exposed either a poorly named parameter or an improper use of the method, which would ideally be caught in tests to begin with.\r\n\r\nI agree. We should add a failing test to handle this case. This is partly a process failure but also partly a CI coverage failure.\r\n\r\n> especially when the change is made by a program that's not guaranteed to be correct\r\n\r\nIt's not made by a program, it's made by a person and people make mistakes (you too, you know). We've all made mistakes in the last week and I'd like to you to think how you'd feel if your mistakes produced a similar reaction.\r\n\r\n> But if things do break, the one who made the change should be held accountable (which isn't a big deal, because everyone makes mistakes)\r\n\r\nThey are accountable but hitting on your hands waiting for a fix from them (particularly considering they are in a timezone when they are likely to be asleep) is your decision. A 24h turnaround on such a change is a reasonable expectation.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1125
	},
	{
		"id" : 249415655,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T11:07:34Z",
		"body" : "> I agree. We should add a failing test to handle this case. This is partly a process failure but also partly a CI coverage failure.\r\n\r\nPeople may disagree, but to me, \"all tests pass => everything is good\" is totally unrealistic, however good your tests are and coverage is. Plus the `test` directory is itself being fixed up by these RuboCop PRs too.\r\n\r\n> It's not made by a program, it's made by a person and people make mistakes (you too, you know). We've all made mistakes in the last week and I'd like to you to think how you'd feel if your mistakes produced a similar reaction.\r\n\r\nI take full responsibility for any mistake I make, and if I deserve \"a similar reaction\" (pretty sure I did for one case) I'll take it. The reaction is just a cold wake up call; it's not ad hominem or anything.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1125
	},
	{
		"id" : 249422131,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-25T13:34:11Z",
		"body" : "> Excuse me, have you read every change and made sure they're really equivalent?\r\n\r\nYes. Since`OS::Mac` is a module, `module_function` does not break anything as it simply replaces instance methods with class methods.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1125
	},
	{
		"id" : 249422430,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T13:40:45Z",
		"body" : "> People may disagree, but to me, \"all tests pass => everything is good\" is totally unrealistic, however good your tests are and coverage is.\r\n\r\nIt may be unrealistic but we should strive for a test suite where that's the case. We should aim to catch everything with CI that we can.\r\n\r\n> I take full responsibility for any mistake I make, and if I deserve \"a similar reaction\" (pretty sure I did for one case) I'll take it. The reaction is just a cold wake up call; it's not ad hominem or anything.\r\n\r\nWake up call is appropriate language as it was used while @reitermarkus and I were both asleep. You are entitled to take full responsibility and entitled to ask people to react to you in a certain way but this project has a [Code of Conduct](https://github.com/Homebrew/brew/blob/master/CODEOFCONDUCT.md#code-of-conduct) that aims to similarly spell out expectations of everyone's communications and, to me, that excludes cold wake up calls when the same information can be explained in a more diplomatic fashion.\r\n\r\nIt's also perhaps worth noting that when diplomacy is lacking it takes effort to deal with the consequences. This morning I had time to either try to smooth some of this over with people (including myself) who were unimpressed with the reaction or to try to fix the issue. As there was no issue filed with reproducible instructions on how to reproduce this I was unable to get a fix out before I had to rush out to a prearranged commitment.\r\n\r\nTo be clear, I'm not without fault either. I should have provided more in-depth review and encouraged waiting a bit longer for approval and holding off doing so until I could be around to clean up mistakes that may result. That's something I'll be doing more of going forward.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1125
	},
	{
		"id" : 249423499,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T14:03:06Z",
		"body" : "@whomeverconcerned Sorry, I'm too tired to argue and don't want to spend time on things that I (and probably most other team members too, judging from the lack of reviewers) don't care about, unless something actually breaks or if I happen to notice something too outrageous for me (which is highly unlikely because whenever I see such a PR the first and last thing I do is click unsubscribe). So proceed however you want and sorry for the wasted time and energy.\r\n\r\nI have voiced my concerns about the necessity and legitimacy of this whole series of contributions and its impact to the whole team without explicit consensus, but the concerns have been dismissed as \"exposing other problems\" or \"shut up if you won't provide or continue to provide anything specific\". What else can I say?\r\n\r\nBy the way, reread my old comments if you will, when you calm down and feel less attacked.\r\n\r\nThis is my last comment on this series of issues (including those that are coming).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1125
	},
	{
		"id" : 249801281,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:33:52Z",
		"body" : "I've given this a reasonable review and we've just cut a new tag (1.0.5) so I'm going to merge this. I'm going to make sure in future I only merge style changes like this well before tagging.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1125
	},
	{
		"id" : 249385751,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T20:26:28Z",
		"body" : "One general comment: I think we should have another variable, say `HOMEBREW_UPDATE_TO_TAG` for the update-to-tag behavior, rather than dropping `[[ -z $HOMEBREW_NO_UPDATE_CLEANUP ]]` everywhere.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1127
	},
	{
		"id" : 249385784,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-24T20:27:14Z",
		"body" : "Ah actually everywhere == two occurrences... Not that big a deal.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1127
	},
	{
		"id" : 249385829,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-24T20:28:23Z",
		"body" : "@zmwangx Agreed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1127
	},
	{
		"id" : 249402466,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T04:42:40Z",
		"body" : "NO.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1128
	},
	{
		"id" : 249402672,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-25T04:48:57Z",
		"body" : ":-1: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1128
	},
	{
		"id" : 249409590,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T08:28:02Z",
		"body" : "@zmwangx @ilovezfs Those comments are extremely unhelpful. Please provide reasons for disagreement or stay silent. It's bad enough when comments like this come from users but I expect better from our maintainers.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1128
	},
	{
		"id" : 249409869,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-25T08:35:34Z",
		"body" : "I suspect if the prior breaking changes are fixed first, more useful reviews may follow.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1128
	},
	{
		"id" : 249409953,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T08:37:43Z",
		"body" : "> I suspect if the prior breaking changes are fixed first, more useful reviews may follow.\r\n\r\nI suspect if someone had created an issue or, dare I say it, a pull-request then the prior breaking changes would have been fixed already.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1128
	},
	{
		"id" : 249410261,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-25T08:45:05Z",
		"body" : ">I suspect if someone had created an issue or, dare I say it, a pull-request then the prior breaking changes would have been fixed already.\r\n\r\nAlready suggested a diff on slack hours ago and explained why I didn't open a PR for it. But sure.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1128
	},
	{
		"id" : 249415126,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T10:53:23Z",
		"body" : "The multi-space alignments are so laughable I expect anyone who actually review the changes to immediately roll their eyes.\r\n\r\n```ruby\r\nHOMEBREW_INTERNAL_COMMAND_ALIASES = {\r\n  \"ls\"          => \"list\",\r\n  \"homepage\"    => \"home\",\r\n  \"-S\"          => \"search\",\r\n  \"up\"          => \"update\",\r\n  \"ln\"          => \"link\",\r\n  \"instal\"      => \"install\", # gem does the same\r\n  \"rm\"          => \"uninstall\",\r\n  \"remove\"      => \"uninstall\",\r\n  \"configure\"   => \"diy\",\r\n  \"abv\"         => \"info\",\r\n  \"dr\"          => \"doctor\",\r\n  \"--repo\"      => \"--repository\",\r\n  \"environment\" => \"--env\",\r\n  \"--config\"    => \"config\",\r\n}.freeze\r\n```\r\n\r\n```ruby\r\n      SYMBOLS = {\r\n        sierra:        \"10.12\",\r\n        el_capitan:    \"10.11\",\r\n        yosemite:      \"10.10\",\r\n        mavericks:     \"10.9\",\r\n        mountain_lion: \"10.8\",\r\n        lion:          \"10.7\",\r\n        snow_leopard:  \"10.6\",\r\n        leopard:       \"10.5\",\r\n        tiger:         \"10.4\",\r\n      }.freeze\r\n```\r\n\r\nNow, to add or remove one key, you potentially need to manually realign all of the values. Seriously?\r\n\r\n> You may not agree with the point but they are not pointless. They are investment in a consistent style which makes it easier to automatically review contributed PRs and lets people know what our style is rather than it being arbitrary.\r\n\r\nMore importantly, who decided that we should follow a \"consistent style\" like\r\n\r\n```ruby\r\n   Style/AlignHash:\r\n   EnforcedHashRocketStyle: table\r\n   EnforcedColonStyle: table\r\n   Exclude:\r\n     - 'Taps/**/*'\r\n```\r\n\r\nDid anyone ask for this (sorry, maybe I missed the discussion)? Or is this just @reitermarkus's personal preference somehow?\r\n\r\nAnd if I didn't call it out (although I called it out in an unhelpful way, at least in this thread, for which I apologize) this would have been merged very soon like every other of these RuboCop PRs, and suddenly the entire team had to conform to some random style decisions made by @reitermarkus? Not to mention some claimed style changes are not only stylistic? Rather than hastily merging these after getting one approval, shouldn't we need the consensus of the team before moving forward on things like multi-space alignments?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1128
	},
	{
		"id" : 249421338,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-25T13:15:58Z",
		"body" : "> Did anyone ask for this (sorry, maybe I missed the discussion)? Or is this just @reitermarkus's personal preference somehow?\r\n\r\nI am trying to *merge* Homebrew's style with Cask's, so naturally I'm trying to incorporate some of Cask's rules into Homebrew's style, and vice-versa, and not completely eliminate one of the them.\r\n\r\nAlso, I would argue that having an ugly diff is better than having hard-to read code.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1128
	},
	{
		"id" : 249421550,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T13:20:24Z",
		"body" : "> The multi-space alignments are so laughable I expect anyone who actually review the changes to immediately roll their eyes.\r\n\r\nHyperbole does not help. Plenty of Ruby projects use this style. I also agree we should not take this particular style change (my review comment from earlier got eaten, somehow) as I also agree that requiring the indentation to be consistent causes diff-inflation.\r\n\r\n> Did anyone ask for this (sorry, maybe I missed the discussion)? Or is this just @reitermarkus's personal preference somehow?\r\n\r\nEven if it is his personal preference the correct way is to disagree with that preference and explain why rather than to attack either the person or the higher-level project (getting our Ruby style to be consistent with Rubocop).\r\n\r\n> Rather than hastily merging these after getting one approval, shouldn't we need the consensus of the team before moving forward on things like multi-space alignments?\r\n\r\nWe don't need consensus for things that can be trivially changed back to how they were. I'm happy to get more views on these but previously I've been the only person providing any review, pre or post merge, on these Homebrew/brew PRs. If you'd like to be more involved and would like us to take more time before merging I'm happy to have your review and thoughts on these and let me know what an acceptable amount of time is to give you to review before merging.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1128
	},
	{
		"id" : 249421618,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T13:21:45Z",
		"body" : "> Already suggested a diff on slack hours ago and explained why I didn't open a PR for it. But sure.\r\n\r\nSorry about that. This is my fault as I've not been explicit about it before but: there's too much chat in Slack and it's not publicly available so it's better to assume messages there have not been read and to cross-post thoughts into issues/PRs/etc.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1128
	},
	{
		"id" : 249439842,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-25T19:05:24Z",
		"body" : "I do think we need to be careful with these mass changes, given our test coverage is still a work in progress. Introducing real breakage through style fixes certainly isn't a desired side-effect, and if tests aren't catching that the tests obviously aren't comprehensive enough.\r\n\r\nI don't think any comment here or in https://github.com/Homebrew/brew/pull/1125 were intending to set fire to @reitermarkus personally. The writing style was a little blunt, but I think it mostly stemmed from frustration that style changes are introducing breakage, style changes which to be fair haven't really been explained or discussed all that much, rather than setting out to \"get\" anyone. Almost the entire team, myself very much included, are guilty of using frustrated voices at times. We can all do better there.\r\n\r\nIt would be useful if the changes were explained a little better, so people don't have to go hunting around Rubocop upstream for examples on the before/after.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1128
	},
	{
		"id" : 249443464,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T20:07:27Z",
		"body" : "> style changes are introducing breakage, style changes which to be fair haven't really been explained or discussed all that much\r\n\r\nJust to be more explicit about these: we have a `.rubocop_todo.yml` file and Cask has it's own `.rubocop.yml` file and they should both be worked on until we have no TODOs and a single, shared file with shared style between Homebrew, Cask and (where appropriate and not excluded) Formulae and Taps. This is useful because it makes it easier to contribute and read code that's using a single style and almost all Rubocop checks are to make Ruby code more readable and thus easier to work with. Readability is the foundation on which security, performance, correctness etc. are built.\r\n\r\nThere will be bugs along the way and the best ways to combat this are for me and/or @reitermarkus to not merge these PRs too soon before a tag or us going out/to bed to that we can jump to fix issues when needed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1128
	},
	{
		"id" : 249396102,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T00:55:37Z",
		"body" : "The verbose mode is especially crazy when you deal with something like boost, where there are 12k+ files in the bottle and you get 800KB+ worth of logs in a matter of seconds.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1129
	},
	{
		"id" : 249409885,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T08:36:00Z",
		"body" : "I agree. It's also worth noting `tar xvf` can actually slow down the extraction as it blocks on writing to the terminal.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1129
	},
	{
		"id" : 249409885,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T08:36:00Z",
		"body" : "I agree. It's also worth noting `tar xvf` can actually slow down the extraction as it blocks on writing to the terminal.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1129
	},
	{
		"id" : 249520705,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T09:21:23Z",
		"body" : "Just to let you know: I'm broadly in favour of this change but it'll take a while to figure out the best approach.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1130
	},
	{
		"id" : 249660808,
		"user" : {
			"login" : "aw1621107"
		},
		"created_at" : "2016-09-26T18:47:38Z",
		"body" : "Alright, changed the strategy up a bit. Hope it's better.\r\n\r\n`brew install imagemagick --with-openmp` actually gets past the configuration stage now; the previous issue with a missing `ltdl.h` appears to have gone away on its own. The build still fails, however, with linker issues.\r\n\r\nGist [here](https://gist.github.com/aw1621107/dd55842605309566016c0e6d77f4ab9f)\r\n\r\nFor example, this part of the build log looks a bit suspicious:\r\n\r\n```\r\nUndefined symbols for architecture x86_64:\r\n  \"std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::copy(char*, unsigned long, unsigned long) const\", referenced from:\r\n```\r\n\r\nSomething to do with the standard library not being found? Or the wrong one being used? Don't remember what libc++ uses as its namespace vs libstdc++...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1130
	},
	{
		"id" : 249673011,
		"user" : {
			"login" : "aw1621107"
		},
		"created_at" : "2016-09-26T19:32:33Z",
		"body" : "And `imagemagick --with-openmp` now builds. No idea what I changed to fix things.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1130
	},
	{
		"id" : 249673253,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T19:33:27Z",
		"body" : "CC @mistydemeo any naming thoughts here?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1130
	},
	{
		"id" : 249673640,
		"user" : {
			"login" : "aw1621107"
		},
		"created_at" : "2016-09-26T19:34:55Z",
		"body" : "And `pstoedit` builds, so at least one problem is fixed",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1130
	},
	{
		"id" : 249876639,
		"user" : {
			"login" : "aw1621107"
		},
		"created_at" : "2016-09-27T14:11:35Z",
		"body" : "Something to check out for later: `brew install fftw --with-fortran --with-mpi --with-openmp` fails:\r\n\r\n```\r\nconfigure:13302: checking for mpicc\r\nconfigure:13329: result: /usr/local/bin/mpicc\r\nconfigure:13347: checking for MPI_Init\r\nconfigure:13347: /usr/local/bin/mpicc -o conftest -g -O2   conftest.c  >&5\r\n\r\nFailed to execute brew_clang -pipe -Os -o conftest -g -O2 conftest.c -I/usr/local/Cellar/open-mpi/2.0.1/include -L/usr/local/opt/libevent/lib -L/usr/local/Cellar/open-mpi/2.0.1/lib -lmpi -isystem/usr/local/include -isystem/usr/include/libxml2 -isystem/System/Library/Frameworks/OpenGL.framework/Versions/Current/Headers -L/usr/local/lib -L/System/Library/Frameworks/OpenGL.framework/Versions/Current/Libraries -Wl,-headerpad_max_install_names\r\n\r\nXcode and/or the CLT appear to be misconfigured. Try one or both of the following:\r\n  xcodebuild -license\r\n  sudo xcode-select -switch /path/to/Xcode.app\r\n\r\nconfigure:13347: $? = 1\r\nconfigure: failed program was:\r\n| /* confdefs.h */\r\n| #define PACKAGE_NAME \"fftw\"\r\n| #define PACKAGE_TARNAME \"fftw\"\r\n| #define PACKAGE_VERSION \"3.3.5\"\r\n| #define PACKAGE_STRING \"fftw 3.3.5\"\r\n| #define PACKAGE_BUGREPORT \"fftw@fftw.org\"\r\n| #define PACKAGE_URL \"\"\r\n| #define PACKAGE \"fftw\"\r\n| #define VERSION \"3.3.5\"\r\n| #define FFTW_ENABLE_ALLOCA 1\r\n| #define FFTW_SINGLE 1\r\n| #define BENCHFFT_SINGLE 1\r\n| #define HAVE_SSE2 1\r\n| #define STDC_HEADERS 1\r\n| #define HAVE_SYS_TYPES_H 1\r\n| #define HAVE_SYS_STAT_H 1\r\n| #define HAVE_STDLIB_H 1\r\n| #define HAVE_STRING_H 1\r\n| #define HAVE_MEMORY_H 1\r\n| #define HAVE_STRINGS_H 1\r\n| #define HAVE_INTTYPES_H 1\r\n| #define HAVE_STDINT_H 1\r\n| #define HAVE_UNISTD_H 1\r\n| #define HAVE_DLFCN_H 1\r\n| #define LT_OBJDIR \".libs/\"\r\n| /* end confdefs.h.  */\r\n| /* Define MPI_Init to an innocuous variant, in case <limits.h> declares MPI_Init.\r\n|    For example, HP-UX 11i <limits.h> declares gettimeofday.  */\r\n| #define MPI_Init innocuous_MPI_Init\r\n| \r\n| /* System header to define __stub macros and hopefully few prototypes,\r\n|     which can conflict with char MPI_Init (); below.\r\n|     Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\r\n|     <limits.h> exists even on freestanding compilers.  */\r\n| \r\n| #ifdef __STDC__\r\n| # include <limits.h>\r\n| #else\r\n| # include <assert.h>\r\n| #endif\r\n| \r\n| #undef MPI_Init\r\n| \r\n| /* Override any GCC internal prototype to avoid an error.\r\n|    Use char because int might match the return type of a GCC\r\n|    builtin and then its argument prototype would still apply.  */\r\n| #ifdef __cplusplus\r\n| extern \"C\"\r\n| #endif\r\n| char MPI_Init ();\r\n| /* The GNU C library defines this for functions which it implements\r\n|     to always fail with ENOSYS.  Some functions are actually named\r\n|     something starting with __ and the normal name is an alias.  */\r\n| #if defined __stub_MPI_Init || defined __stub___MPI_Init\r\n| choke me\r\n| #endif\r\n| \r\n| int\r\n| main ()\r\n| {\r\n| return MPI_Init ();\r\n|   ;\r\n|   return 0;\r\n| }\r\nconfigure:13347: result: no\r\nconfigure:13354: checking for MPI_Init in -lmpi\r\nconfigure:13379: /usr/local/bin/mpicc -o conftest -g -O2   conftest.c -lmpi   >&5\r\n\r\nFailed to execute brew_clang -pipe -Os -o conftest -g -O2 conftest.c -lmpi -I/usr/local/Cellar/open-mpi/2.0.1/include -L/usr/local/opt/libevent/lib -L/usr/local/Cellar/open-mpi/2.0.1/lib -lmpi -isystem/usr/local/include -isystem/usr/include/libxml2 -isystem/System/Library/Frameworks/OpenGL.framework/Versions/Current/Headers -L/usr/local/lib -L/System/Library/Frameworks/OpenGL.framework/Versions/Current/Libraries -Wl,-headerpad_max_install_names\r\n\r\nXcode and/or the CLT appear to be misconfigured. Try one or both of the following:\r\n  xcodebuild -license\r\n  sudo xcode-select -switch /path/to/Xcode.app\r\n\r\nconfigure:13379: $? = 1\r\nconfigure: failed program was:\r\n| /* confdefs.h */\r\n| #define PACKAGE_NAME \"fftw\"\r\n| #define PACKAGE_TARNAME \"fftw\"\r\n| #define PACKAGE_VERSION \"3.3.5\"\r\n| #define PACKAGE_STRING \"fftw 3.3.5\"\r\n| #define PACKAGE_BUGREPORT \"fftw@fftw.org\"\r\n| #define PACKAGE_URL \"\"\r\n| #define PACKAGE \"fftw\"\r\n| #define VERSION \"3.3.5\"\r\n| #define FFTW_ENABLE_ALLOCA 1\r\n| #define FFTW_SINGLE 1\r\n| #define BENCHFFT_SINGLE 1\r\n| #define HAVE_SSE2 1\r\n| #define STDC_HEADERS 1\r\n| #define HAVE_SYS_TYPES_H 1\r\n| #define HAVE_SYS_STAT_H 1\r\n| #define HAVE_STDLIB_H 1\r\n| #define HAVE_STRING_H 1\r\n| #define HAVE_MEMORY_H 1\r\n| #define HAVE_STRINGS_H 1\r\n| #define HAVE_INTTYPES_H 1\r\n| #define HAVE_STDINT_H 1\r\n| #define HAVE_UNISTD_H 1\r\n| #define HAVE_DLFCN_H 1\r\n| #define LT_OBJDIR \".libs/\"\r\n| /* end confdefs.h.  */\r\n| \r\n| /* Override any GCC internal prototype to avoid an error.\r\n|    Use char because int might match the return type of a GCC\r\n|    builtin and then its argument prototype would still apply.  */\r\n| #ifdef __cplusplus\r\n| extern \"C\"\r\n| #endif\r\n| char MPI_Init ();\r\n| int\r\n| main ()\r\n| {\r\n| return MPI_Init ();\r\n|   ;\r\n|   return 0;\r\n| }\r\nconfigure:13388: result: no\r\nconfigure:13396: checking for MPI_Init in -lmpich\r\nconfigure:13421: /usr/local/bin/mpicc -o conftest -g -O2   conftest.c -lmpich   >&5\r\n\r\nFailed to execute brew_clang -pipe -Os -o conftest -g -O2 conftest.c -lmpich -I/usr/local/Cellar/open-mpi/2.0.1/include -L/usr/local/opt/libevent/lib -L/usr/local/Cellar/open-mpi/2.0.1/lib -lmpi -isystem/usr/local/include -isystem/usr/include/libxml2 -isystem/System/Library/Frameworks/OpenGL.framework/Versions/Current/Headers -L/usr/local/lib -L/System/Library/Frameworks/OpenGL.framework/Versions/Current/Libraries -Wl,-headerpad_max_install_names\r\n\r\nXcode and/or the CLT appear to be misconfigured. Try one or both of the following:\r\n  xcodebuild -license\r\n  sudo xcode-select -switch /path/to/Xcode.app\r\n\r\nconfigure:13421: $? = 1\r\nconfigure: failed program was:\r\n| /* confdefs.h */\r\n| #define PACKAGE_NAME \"fftw\"\r\n| #define PACKAGE_TARNAME \"fftw\"\r\n| #define PACKAGE_VERSION \"3.3.5\"\r\n| #define PACKAGE_STRING \"fftw 3.3.5\"\r\n| #define PACKAGE_BUGREPORT \"fftw@fftw.org\"\r\n| #define PACKAGE_URL \"\"\r\n| #define PACKAGE \"fftw\"\r\n| #define VERSION \"3.3.5\"\r\n| #define FFTW_ENABLE_ALLOCA 1\r\n| #define FFTW_SINGLE 1\r\n| #define BENCHFFT_SINGLE 1\r\n| #define HAVE_SSE2 1\r\n| #define STDC_HEADERS 1\r\n| #define HAVE_SYS_TYPES_H 1\r\n| #define HAVE_SYS_STAT_H 1\r\n| #define HAVE_STDLIB_H 1\r\n| #define HAVE_STRING_H 1\r\n| #define HAVE_MEMORY_H 1\r\n| #define HAVE_STRINGS_H 1\r\n| #define HAVE_INTTYPES_H 1\r\n| #define HAVE_STDINT_H 1\r\n| #define HAVE_UNISTD_H 1\r\n| #define HAVE_DLFCN_H 1\r\n| #define LT_OBJDIR \".libs/\"\r\n| /* end confdefs.h.  */\r\n| \r\n| /* Override any GCC internal prototype to avoid an error.\r\n|    Use char because int might match the return type of a GCC\r\n|    builtin and then its argument prototype would still apply.  */\r\n| #ifdef __cplusplus\r\n| extern \"C\"\r\n| #endif\r\n| char MPI_Init ();\r\n| int\r\n| main ()\r\n| {\r\n| return MPI_Init ();\r\n|   ;\r\n|   return 0;\r\n| }\r\nconfigure:13430: result: no\r\nconfigure:13469: error: could not find mpi library for --enable-mpi\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1130
	},
	{
		"id" : 249877329,
		"user" : {
			"login" : "aw1621107"
		},
		"created_at" : "2016-09-27T14:13:54Z",
		"body" : "`openblas --with-openmp` also fails, although this time it is OpenBLAS' own Makefile that is failing the build:\r\n\r\n```\r\nmake\r\nCC=brew_clang\r\nFC=/usr/local/bin/gfortran\r\nlibs\r\nnetlib\r\nshared\r\n\r\nMakefile.system:409: *** OpenBLAS: Clang didn't support OpenMP yet..  Stop.\r\n```\r\n\r\nI wonder if mixing `clang` and `gfortran` would cause issues, too...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1130
	},
	{
		"id" : 249422822,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-25T13:49:16Z",
		"body" : "In #1097, I said that HB should at least deliver easy instructions on how to revert to the tag before the Xcode-killing change.\r\n\r\nThere was an idea on that thread, @paultopia, to make HB simply nag rather than die.\r\n\r\nIs the CLT package causing similar problems for you?  The latest CLT package should be sufficient to install `imagemagick`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1131
	},
	{
		"id" : 249427622,
		"user" : {
			"login" : "paultopia"
		},
		"created_at" : "2016-09-25T15:21:14Z",
		"body" : "The current CLT package, in the absence of Xcode 8, seems to be behaving fine for me...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1131
	},
	{
		"id" : 249427698,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T15:22:21Z",
		"body" : "If you just want a workaround and don't care about getting proper support, set `CI`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1131
	},
	{
		"id" : 249440819,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-25T19:21:08Z",
		"body" : "> Why is this a problem?: For those of us with problems in the xcode department, including: inadequate hard drive space, slow network connections, or just hating the monstrous bloatware that is xcode and being quite happy only compiling the things that can be compiled with the command line tools, this is a big problem.\r\n\r\nRemove Xcode if you don't intend to use it. We support CLT-only as best as we can, and almost all `xcode` dependencies are `:build` only. There are some notable exceptions, but we try to support CLT-only as widely as possible.\r\n\r\n> Suggestion: Could this maybe be a warning, rather than an error?\r\n\r\nNo. It was a warning, and to be honest I pretty quickly got sick of the default fix for a 10.12 bug reported to us being _\"You need to update Xcode. `brew doctor` has warned you about this\"_.\r\n\r\nThis causes both users and us real, significant problems & takes up time that could and should be used solving problems that aren't entirely user configuration based. Apple themselves say do not use Xcode 7.2.1 on 10.12, it isn't supported, it will break stuff if used. We didn't magic up the requirement.\r\n\r\nNote that the only configuration that is flagged as of the last tag being cut is running < Xcode 8 on 10.12. That's all.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1131
	},
	{
		"id" : 249442958,
		"user" : {
			"login" : "paultopia"
		},
		"created_at" : "2016-09-25T19:58:40Z",
		"body" : "@DomT4 : \r\n\r\n> Remove Xcode if you don't intend to use it. We support CLT-only as best as we can, and almost all xcode dependencies are :build only. There are some notable exceptions, but we try to support CLT-only as widely as possible.\r\n\r\nHmm.  This is interesting.  Just to clarify: am I right in reading this to mean that: \r\n\r\n1.  there is some subset of the stuff brew does for which Xcode is a real dependency, but that subset is fairly small, and \r\n\r\n2. as long as one is asking brew to carry out tasks for which Xcode isn't a real dependency, it'll happily carry them out *so long as there is no Xcode at all on one's system*, but will throw a fatal error and refuse to carry them out *if there is the wrong Xcode on one's system*?  \r\n\r\nIf that's true, then at the very least this really needs to be documented in some readily accessible place. For example, the error that I ran into should actually provide this information, so that there aren't hordes of people polluting their poor machines with Xcode 8 and god only knows what nightmarish installation issues and bugs that creates *just to get package management working again when they don't actually need to.*  \r\n\r\nIf I understood you right, I'll happy submit the trivial PR myself to change the error message.  (I'll also gleefully get rid of Xcode on my own machine and start popping champagne.)  But first I want to make sure that I'm understanding you right. \r\n\r\nThe real problem here isn't brew---it's an amazing tool, supported by a wonderful community. The real problem, frankly, is that Xcode is horrible. But it will seriously hurt the brew community if people think, even inaccurately, that they're forced to get their paws on Xcode 8 in order to use brew at all.  \r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1131
	},
	{
		"id" : 249521303,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T09:24:15Z",
		"body" : "> there is some subset of the stuff brew does for which Xcode is a real dependency, but that subset is fairly small\r\n\r\nYes.\r\n\r\n> The real problem here isn't brew---it's an amazing tool, supported by a wonderful community. The real problem, frankly, is that Xcode is horrible. But it will seriously hurt the brew community if people think, even inaccurately, that they're forced to get their paws on Xcode 8 in order to use brew at all.\r\n\r\nThis is the same as pretty much all Homebrew's soft dependencies: we'll allow you to install things if they aren't around and only complain if you actually need them. If you have them installed, though, you need to have them be up-to-date to avoid complaining as otherwise things may break. \r\n\r\nWe may consider changing our messaging in future but I'd like to see more widespread evidence of this being an issue first.\r\n\r\nThanks for filing the issue and I hope this has helped.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1131
	},
	{
		"id" : 249408097,
		"user" : {
			"login" : "pi1ot"
		},
		"created_at" : "2016-09-25T07:48:10Z",
		"body" : "Rename /usr/local/homebrew and update again, sorry",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1132
	},
	{
		"id" : 249421140,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T13:11:00Z",
		"body" : "You need to run `brew update` (twice).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1133
	},
	{
		"id" : 249421171,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T13:11:37Z",
		"body" : "> fatal: unable to access 'https://github.com/Homebrew/brew/': Couldn't connect to server\r\n> Failed during: git fetch origin master:refs/remotes/origin/master -n --depth=1\r\n\r\nThis means you failed to connect to GitHub to download Homebrew. I'm afraid there's nothing we can do to fix this, sorry.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1134
	},
	{
		"id" : 249424663,
		"user" : {
			"login" : "aaankur"
		},
		"created_at" : "2016-09-25T14:26:31Z",
		"body" : "Any clue of why it might be happening or what I can do to resolve this? My internet connection is properly functioning. I have been trying to figure this out but have not been able to. I understand it is not an issue from your end but this will be a big help for me. Thanks again!  ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1134
	},
	{
		"id" : 249520088,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T09:18:38Z",
		"body" : "@aaankur Try to manually `git clone https://github.com/Homebrew/brew`. If that works: try to rerun the install script. If it does not you're better dealing with GitHub support.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1134
	},
	{
		"id" : 249553475,
		"user" : {
			"login" : "aaankur"
		},
		"created_at" : "2016-09-26T12:15:06Z",
		"body" : "@MikeMcQuaid Thanks a lot! It was a proxy issue, I guess. I had to use the following command `git config --global --unset http.proxy` and then rerun the install script and it worked. Thanks again for your help!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1134
	},
	{
		"id" : 249571516,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T13:37:40Z",
		"body" : "@aaankur Glad you got it sorted!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1134
	},
	{
		"id" : 249422704,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T13:46:36Z",
		"body" : "Test failing for this: https://travis-ci.org/Homebrew/brew/builds/162568024",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1135
	},
	{
		"id" : 249423553,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-25T14:04:01Z",
		"body" : "Added a unit test instead, which I'm letting fail first before pushing the fix again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1135
	},
	{
		"id" : 249431073,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T16:25:55Z",
		"body" : "Thanks @reitermarkus!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1135
	},
	{
		"id" : 249427579,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T15:20:24Z",
		"body" : "Try `brew search --desc player`? Pretty sure you'll get one in `HOMEBREW_CACHE`.\r\n\r\nI haven't read the code, but I suppose there's no point in writing out everything if you just describe a few individual formulae.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1136
	},
	{
		"id" : 249427862,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T15:25:47Z",
		"body" : "Read code (`descriptions.rb`) and confirmed my assumption: `save_cache` only appears in `generate_cache`, which in turn only appears in `ensure_cache`, which in turn only appears in `search`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1136
	},
	{
		"id" : 249432063,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-25T16:44:07Z",
		"body" : "Running `brew desc foo` ought to ensure that there's a cache there, right?  Why would the cache only be for `brew search --desc`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1136
	},
	{
		"id" : 249432162,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T16:46:08Z",
		"body" : "The cache contains at the very least descriptions of every core formula. Do you want to ask brew to describe `foo` and instead have brew read all formulae under the sun? I don't know about you, but I don't.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1136
	},
	{
		"id" : 249432232,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T16:47:15Z",
		"body" : "In other words: you only create a cache when it's worthwhile. Describing a single formula isn't an operation that's worth caching.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1136
	},
	{
		"id" : 249432545,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-25T16:52:54Z",
		"body" : ">  Do you want to ask brew to describe foo and instead have brew read all formulae under the sun?\r\n\r\nIt wouldn't do this if there were a cache.  It would start reading the cache, not all the formulas, and stop when it found the requested description.\r\n\r\nBut never mind anyway, because even *that* may well take longer than going straight to a formula if the requested description is for a formula that isn't near the beginning of the cache.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1136
	},
	{
		"id" : 249433586,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T17:12:49Z",
		"body" : "> It wouldn't do this if there were a cache. It would start reading the cache, not all the formulas, and stop when it found the requested description.\r\n\r\nIt would need to make sure the cache isn't outdated, and if it is (the consider is `.git/refs/heads/master` in any tap being newer than the cache), update it. Updating the cache means reading all formulae under the sun. Since homebrew-core and friends are supposedly updated all the time, the chance of cache being fresh is very low.\r\n\r\nAlso, even if the cache is fresh, which do you think is faster, parsing a 2K formula, or reading a 200K+ JSON cache? I'm not entirely sure, but I would put money on the former.\r\n\r\nAnyway, if you don't like this behavior, submit a PR.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1136
	},
	{
		"id" : 249433617,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T17:13:21Z",
		"body" : "Oh I didn't see your second paragraph.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1136
	},
	{
		"id" : 249429433,
		"user" : {
			"login" : "msavy"
		},
		"created_at" : "2016-09-25T15:56:22Z",
		"body" : "Someone opened a similar fix around the same time.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1137
	},
	{
		"id" : 249431356,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T16:30:47Z",
		"body" : "Thanks for opening this anyway @msavy üíñ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1137
	},
	{
		"id" : 249426171,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T14:53:21Z",
		"body" : "Yeah I can reproduce, it tries to uninstall whatever keg that comes first alphabetically, and fails.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1138
	},
	{
		"id" : 249426960,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T15:09:09Z",
		"body" : "Fix in #1139.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1138
	},
	{
		"id" : 249431851,
		"user" : {
			"login" : "chdiza"
		},
		"created_at" : "2016-09-25T16:39:50Z",
		"body" : "Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1138
	},
	{
		"id" : 249427360,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T15:16:19Z",
		"body" : "Alternatively this can be fixed in `Formulary.to_rack`. I wonder what's the appropriate error there; `FormulaUnavailableError`? Anyway, as it currently stands, `Formulary.to_rack` does very little for validation, so not sure we should enforce non-emptiness there.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1139
	},
	{
		"id" : 249427864,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-25T15:25:49Z",
		"body" : "Seems like `ArgumentError` would be a better choice here. Also, `NoSuchKegError` doesn't seem to be `rescue`d anywhere, that would have been something to consider.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1139
	},
	{
		"id" : 249427907,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T15:26:34Z",
		"body" : "> `ArgumentError`\r\n\r\nSure.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1139
	},
	{
		"id" : 249428387,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T15:35:57Z",
		"body" : "I ended up changing it to a `UsageError` which seems most appropriate when an arg that shouldn't be empty is empty (and I can't think of a case where an empty argument is valid for a brew command).\r\n\r\n`ArgumentError` isn't handled in `brew.rb` except as a generic exception that leads to a \"Please report this bug:\", which isn't right (although we can certainly change that).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1139
	},
	{
		"id" : 249434513,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T17:31:26Z",
		"body" : "Thanks for the report. This is a known issue and has been fixed in #1135. Please run `brew update`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1140
	},
	{
		"id" : 249434588,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T17:32:43Z",
		"body" : "(You may need to run `git -C \"$(brew --repo)\" checkout master` once to switch to the master branch.)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1140
	},
	{
		"id" : 249443184,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T20:02:17Z",
		"body" : "Let's leave this open until it hits a tagged release.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1140
	},
	{
		"id" : 249858962,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T13:06:13Z",
		"body" : "Fixed now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1140
	},
	{
		"id" : 249444500,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T20:25:17Z",
		"body" : "One solution might be to keep the `stable` branch updated for developer users.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1141
	},
	{
		"id" : 249444680,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T20:28:39Z",
		"body" : "> $ git reset --hard 1.0.3\r\n\r\nDoes the same reproduce with 1.0.4?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1141
	},
	{
		"id" : 249444928,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T20:33:00Z",
		"body" : "> Does the same reproduce with 1.0.4?\r\n\r\nGood point. Since we don't have 1.0.5 yet you shouldn't see an update to 1.0.4 anyway, but say you `git reset --hard 2f82837` (2f82837 is the merge commit of #1121), you'll see this. The point is the stable isn't touched, only master is.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1141
	},
	{
		"id" : 249445330,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-25T20:41:03Z",
		"body" : "If you're on `stable` and run `brew update` then it'll update `stable` to the latest tag. You can confirm this locally by running `git checkout master; git tag 1.0.5`. That seems to be the desired behaviour so I'm not sure I understand the problem?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1141
	},
	{
		"id" : 249445426,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-25T20:42:35Z",
		"body" : "> If you're on stable and run brew update then it'll update stable to the latest tag. \r\n\r\nBut it won't if you're a developer user.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1141
	},
	{
		"id" : 249499474,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T07:35:54Z",
		"body" : "Confirmed this was working as expected:\r\n- `git checkout stable; git reset --hard update-no-developer-stable`\r\n- `brew update --force` returned to `master` branch",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1142
	},
	{
		"id" : 249521555,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T09:25:26Z",
		"body" : "Please use `brew install homebrew/gui/pitivi` and report it to the homebrew/gui tap's issue tracker if that fails.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1144
	},
	{
		"id" : 249527635,
		"user" : {
			"login" : "aleb"
		},
		"created_at" : "2016-09-26T09:54:27Z",
		"body" : "I run `brew install https://raw.githubusercontent.com/aleb/homebrew-gui/master/pitivi.rb --verbose` and brew does not run the \"def install\" method! It should print an error or an explanation why it does not do this. I think this is a `brew` problem, not a homebrew-gui problem. Please reopen the issue.\r\n\r\nFWIW, the pitivi formula is not yet in homebrew-gui. ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1144
	},
	{
		"id" : 249529452,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T10:02:37Z",
		"body" : "What does `brew install aleb/gui/pitivi` output?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1144
	},
	{
		"id" : 249531309,
		"user" : {
			"login" : "aleb"
		},
		"created_at" : "2016-09-26T10:11:40Z",
		"body" : "```\r\n‚ûú  ~ brew install aleb/gui/pitivi\r\n==> Auto-updated Homebrew!\r\nUpdated 1 tap (homebrew/core).\r\nNo changes to formulae.\r\n\r\n==> Tapping aleb/gui\r\nCloning into '/usr/local/Homebrew/Library/Taps/aleb/homebrew-gui'...\r\nremote: Counting objects: 27, done.\r\nremote: Compressing objects: 100% (27/27), done.\r\nremote: Total 27 (delta 0), reused 6 (delta 0), pack-reused 0\r\nUnpacking objects: 100% (27/27), done.\r\nTapped 23 formulae (74 files, 87.4K)\r\n==> Installing pitivi from aleb/gui\r\n==> Installing dependencies for aleb/gui/pitivi: gst-plugins-good\r\n==> Installing aleb/gui/pitivi dependency: gst-plugins-good\r\n==> Using the sandbox\r\n==> Downloading https://gstreamer.freedesktop.org/src/gst-plugins-good/gst-plugins-good-1.8.3.tar.xz\r\nAlready downloaded: /Users/aleb/Library/Caches/Homebrew/gst-plugins-good-1.8.3.tar.xz\r\n==> Patching\r\npatching file sys/osxvideo/cocoawindow.h\r\npatching file sys/osxvideo/osxvideosink.h\r\n==> ./configure --prefix=/usr/local/Cellar/gst-plugins-good/1.8.3_1 --disable-gtk-doc --disable-goom --with-default-videosin\r\n==> make\r\n==> make install\r\nüç∫  /usr/local/Cellar/gst-plugins-good/1.8.3_1: 368 files, 13.6M, built in 3 minutes 25 seconds\r\n==> Installing aleb/gui/pitivi\r\n==> Installing dependencies for aleb/gui/pitivi: gst-plugins-good\r\n\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1144
	},
	{
		"id" : 249532372,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T10:16:49Z",
		"body" : "This is likely because `gst-plugins-base` is implied twice because of depending on from both `gst-plugins-good` and your formula. You may be able to get a backtrace by running `brew install --debug`",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1144
	},
	{
		"id" : 249542675,
		"user" : {
			"login" : "aleb"
		},
		"created_at" : "2016-09-26T11:14:06Z",
		"body" : "I don't see any backtrace when I use --debug. \r\n\r\nIf I remove the gst-plugins-base dependency (from pitivi.rb), it's still the same. A few of the gst-* formulas depend on it.\r\nIf I remove the gst-plugins-good dependency, it goes further.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1144
	},
	{
		"id" : 249803708,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:44:31Z",
		"body" : "I can't reproduce this locally because there's things I can't build in the dependency tree. Can you try to slim this down to a minimal, reproducible test-case?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1144
	},
	{
		"id" : 251705432,
		"user" : {
			"login" : "aleb"
		},
		"created_at" : "2016-10-05T15:16:24Z",
		"body" : "What stops you from building the dependency tree?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1144
	},
	{
		"id" : 251708033,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-05T15:25:20Z",
		"body" : "Can you try to slim this down to a minimal, reproducible test-case?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1144
	},
	{
		"id" : 252036305,
		"user" : {
			"login" : "aleb"
		},
		"created_at" : "2016-10-06T17:43:49Z",
		"body" : "Sorry, we're busy making a release at the moment. I can try afterwards.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1144
	},
	{
		"id" : 252291247,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-07T15:59:06Z",
		"body" : "Will reopen when there's a minimal, reproducible test-case.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1144
	},
	{
		"id" : 252383979,
		"user" : {
			"login" : "aleb"
		},
		"created_at" : "2016-10-07T23:28:56Z",
		"body" : "Could you please detail, how minimal do you need the \"reproducible test-case\" to be?\r\nAre there other similar test-cases I could copy/paste from to build my own test case?\r\nThanks for helping!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1144
	},
	{
		"id" : 252409925,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-08T07:50:10Z",
		"body" : "Basically the simplest thing you can get that reproduces the problem e.g. keep deleting lines from your formula until you can still reproduce it with only those lines. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1144
	},
	{
		"id" : 249493154,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T06:57:09Z",
		"body" : "Can you explain a bit why https://github.com/Homebrew/homebrew-test-bot/pull/2 is needed?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1145
	},
	{
		"id" : 249556223,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-26T12:29:36Z",
		"body" : "This is needed because without `extend self`, the methods inside `module Homebrew` blocks will not be converted to class methods globally, but rather on a per-block basis.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1145
	},
	{
		"id" : 249570764,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T13:34:37Z",
		"body" : "@reitermarkus I see. I think we need to avoid breaking the previous API because we support it for third-party commands and can't update them globally.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1145
	},
	{
		"id" : 249581029,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-26T14:13:08Z",
		"body" : "We could put \r\n\r\n```ruby\r\nmodule Homebrew\r\n  extend self\r\nend\r\n```\r\n\r\nin `compat/global.rb`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1145
	},
	{
		"id" : 249581903,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T14:16:05Z",
		"body" : "@reitermarkus That works for me. Is there any way to detect usage of the old functions and print a warning on them somehow? We don't need to do that eventually but trying to figure out how we'd deprecate that eventually.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1145
	},
	{
		"id" : 249614627,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-26T16:02:39Z",
		"body" : "Took me quite a while to figure this out (because of course I had a typo in `module Hombrew` while testing), but I found a way.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1145
	},
	{
		"id" : 249656695,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-26T18:33:02Z",
		"body" : "fwiw `module_function` will (IIRC) prevent you having any methods that are `private` or `protected` to the module, whereas this works with `extend self`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1145
	},
	{
		"id" : 249673758,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-26T19:35:17Z",
		"body" : "@penman, `private_class_method`: https://github.com/Homebrew/brew/pull/1145/files#diff-3003aac9196017d495a416e89622da87R58\r\n\r\nFor `protected` you'll have to use `class << self` though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1145
	},
	{
		"id" : 249678508,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-26T19:53:52Z",
		"body" : "TIL @reitermarkus :D",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1145
	},
	{
		"id" : 249796614,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:12:37Z",
		"body" : "A style failure here but it looks like the bot is behaving at least: https://bot.brew.sh/job/Brew%20Pull%20Requests/2103/version=any_sierra/testReport/junit/brew-test-bot/sierra/style/",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1145
	},
	{
		"id" : 249880799,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-27T14:25:46Z",
		"body" : "The style failure seems to be a bug in RuboCop. Will open an issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1145
	},
	{
		"id" : 251313368,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-04T07:23:27Z",
		"body" : "I'm üÜí with üö¢ ing this when you are @reitermarkus when you're confident in it.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1145
	},
	{
		"id" : 249492686,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T06:54:08Z",
		"body" : "I don't agree with this because the no-op case is so fast and because it's particularly important to avoid merge conflicts. It may make sense to do a \"proper\" auto-update (https://github.com/Homebrew/brew/blob/6e5735565b9a31ec2b01e02a479a361189729c22/Library/Homebrew/brew.sh#L277) before this, though? I also think bump and boneyard should have the same behaviour.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1146
	},
	{
		"id" : 250015632,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-27T22:16:58Z",
		"body" : "@MikeMcQuaid \r\n\r\n> the no-op case is so fast\r\n\r\nIt's not exactly fast when you have more than a dozen taps tapped. Takes a few seconds for me even in the no-op case.\r\n\r\n> it's particularly important to avoid merge conflicts.\r\n\r\nI disagree. If you are boneyarding a formula that somehow changed in core since your last upgrade, chances are it shouldn't be boneyarded. Moreover, it's trivial to fix a merge conflict in this case, and boneyard PRs don't hold up the CI however many times you push.\r\n\r\n> It may make sense to do a \"proper\" auto-update \r\n\r\nI don't think it deserves special treatment in `brew.sh`.\r\n\r\n> I also think bump and boneyard should have the same behaviour.\r\n\r\nIt's actually somewhat justifiable to say \"it's particularly important to avoid merge conflicts\" in the case of bump, but it's an entirely different story for boneyard. They are not exactly comparably (despite the similarity in their names) the more I think about it.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1146
	},
	{
		"id" : 250096905,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T07:52:18Z",
		"body" : "> It's not exactly fast when you have more than a dozen taps tapped. Takes a few seconds for me even in the no-op case.\r\n\r\nI'd rather see us lean on `HOMEBREW_AUTO_UPDATE_SECS` rather than removing `brew update` calls or overloading `HOMEBREW_NO_AUTO_UPDATE` to mean more than `brew update --preinstall` does. For this use-case it makes sense to make it another auto-update command and allow it to be disabled that way.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1146
	},
	{
		"id" : 249475164,
		"user" : {
			"login" : "dunn"
		},
		"created_at" : "2016-09-26T04:04:45Z",
		"body" : "We'll need your `brew config` and `brew doctor` but my guess is you haven't run `brew update` in a while.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1147
	},
	{
		"id" : 249521844,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T09:26:50Z",
		"body" : "I recommend running `brew update` twice which will almost certainly fix this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1147
	},
	{
		"id" : 249492429,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T06:52:25Z",
		"body" : "`git checkout master; git fetch; git reset --hard origin/master; brew update --force` should sort you out.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1148
	},
	{
		"id" : 249495199,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T07:10:13Z",
		"body" : "Thanks for opening an issue. @reitermarkus Any thoughts on a workaround for this?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1149
	},
	{
		"id" : 249495415,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-26T07:11:31Z",
		"body" : ">Thanks for opening an issue\r\n\r\nI can pester you about it on Slack, too, if you'd like :)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1149
	},
	{
		"id" : 249718677,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-26T22:40:40Z",
		"body" : "> Any thoughts on a workaround for this?\r\n\r\nI don't think there is one. The only **reliable** way for this to work consistently is to use a separate RuboCop config file for formulae which doesn't rely on `Exclude: 'Taps/**/*.rb'`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1149
	},
	{
		"id" : 249794940,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:06:09Z",
		"body" : "@reitermarkus What about doing the inverse and having different configuration only for `Library/Homebrew`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1149
	},
	{
		"id" : 249511313,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T08:37:54Z",
		"body" : "This is a different bug actually I think because Travis has stuff pre-installed into a `/usr/local` (not `/usr/local/Homebrew` installation location.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1150
	},
	{
		"id" : 249511565,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T08:39:11Z",
		"body" : "`--cleanup` is set automatically for Jenkins but not for Travis because it wasn't needed in the past: \r\nhttps://github.com/Homebrew/homebrew-test-bot/blob/05b815025ebaec9e478861796dc3e673b4b53378/cmd/brew-test-bot.rb#L1048\r\n\r\nThe guard for `JENKINS_HOME` here should be removed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1150
	},
	{
		"id" : 249514683,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T08:53:19Z",
		"body" : "What does `brew config` say? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1151
	},
	{
		"id" : 249541711,
		"user" : {
			"login" : "fab1an"
		},
		"created_at" : "2016-09-26T11:08:26Z",
		"body" : "```bash\r\n~ $ brew config\r\nHOMEBREW_VERSION: 1.0.4\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: 817bc2746e594761911edd78f743a640f089494f\r\nLast commit: 2 days ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 5af91e99671ce7294905ef0b670f50d4e1e24cdb\r\nCore tap last commit: 3 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local/Homebrew\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: quad-core 64-bit haswell\r\nHomebrew Ruby: 2.0.0-p648\r\nClang: 8.0 build 800\r\nGit: 2.10.0 => /usr/local/bin/git\r\nPerl: /usr/bin/perl\r\nPython: /usr/local/bin/python => /usr/local/Cellar/python/2.7.12/Frameworks/Python.framework/Versions/2.7/bin/python2.7\r\nRuby: /usr/local/bin/ruby => /usr/local/Cellar/ruby/2.3.1/bin/ruby\r\nJava: 1.8.0_102, 1.8.0_92\r\nmacOS: 10.12-x86_64\r\nXcode: 8.0\r\nCLT: N/A\r\nX11: N/A\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1151
	},
	{
		"id" : 249542349,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T11:12:03Z",
		"body" : "@fab1an Does the warning go away if you `brew update --force`? Regardless it's a bug but that might help you for now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1151
	},
	{
		"id" : 249542785,
		"user" : {
			"login" : "fab1an"
		},
		"created_at" : "2016-09-26T11:14:40Z",
		"body" : "Yes, it went away.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1151
	},
	{
		"id" : 249543295,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T11:17:37Z",
		"body" : "Thanks! Will leave this open until the fix drops.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1151
	},
	{
		"id" : 249570595,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T13:33:53Z",
		"body" : "@reitermarkus @jawshooah Just FYI: flaky cask test: https://bot.brew.sh/job/Brew%20Pull%20Requests/2089/version=any_sierra/testReport/junit/brew-test-bot/sierra/cask_tests___coverage/",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1152
	},
	{
		"id" : 249582198,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-26T14:16:59Z",
		"body" : "@MikeMcQuaid Looking at the log, I'm not seeing any cask test errors or failures. Looks like a problem with `codecov`:\r\n\r\n```\r\nJSON::ParserError: 743: unexpected token at '<!DOCTYPE html>\r\n    <html>\r\n    <head>\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n      <style type=\"text/css\">\r\n        html, body, iframe { margin: 0; padding: 0; height: 100%; }\r\n        iframe { display: block; width: 100%; border: none; }\r\n      </style>\r\n    <title>Application Error</title>\r\n    </head>\r\n    <body>\r\n      <iframe src=\"https://d234q63orb21db.cloudfront.net/cd118a714294f80d079e8514f43792f519841d20/media/html/error.html\">\r\n        <p>Application Error</p>\r\n      </iframe>\r\n    </body>\r\n    </html>'\r\n/Users/brew/Jenkins/pr-brew/version/any_sierra/Library/Homebrew/cask/vendor/bundle/ruby/2.0.0/gems/json-2.0.2/lib/json/common.rb:156:in `parse'\r\n/Users/brew/Jenkins/pr-brew/version/any_sierra/Library/Homebrew/cask/vendor/bundle/ruby/2.0.0/gems/json-2.0.2/lib/json/common.rb:156:in `parse'\r\n/Users/brew/Jenkins/pr-brew/version/any_sierra/Library/Homebrew/cask/vendor/bundle/ruby/2.0.0/gems/codecov-0.1.5/lib/codecov.rb:220:in `format'\r\n/Users/brew/Jenkins/pr-brew/version/any_sierra/Library/Homebrew/cask/Rakefile:15:in `block (3 levels) in <top (required)>'\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1152
	},
	{
		"id" : 249583477,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T14:20:50Z",
		"body" : "@jawshooah Ah, ok, np, sorry for false positive!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1152
	},
	{
		"id" : 249587795,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-26T14:34:41Z",
		"body" : "This can be used in many formulae (it can be a drop-in replacement for `test.mp3` in most cases, for instance), though it's not necessary.\r\n\r\nHowever, finding two instances isn't hard:\r\n\r\n- `alac`: current sample (downloaded as a resource) is broken, we can switch to this one:\r\n\r\n    ```\r\n$ alac -t test.m4a\r\nfile type: mp4a\r\n```\r\n\r\n- `aacgain`: \"AAC-supporting version of mp3gain\", so it would be nice to make sure it actually supports AAC in addition to MP3, so replacing `test.mp3` with `test.m4a` is a pretty natural move.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1153
	},
	{
		"id" : 249601254,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T15:18:27Z",
		"body" : "@zmwangx Sounds good!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1153
	},
	{
		"id" : 249618799,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-26T16:17:35Z",
		"body" : "Promised test rewrites in https://github.com/Homebrew/homebrew-core/pull/5259.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1153
	},
	{
		"id" : 249579111,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T14:06:24Z",
		"body" : "`sudo chown -R $USER /usr/local/share` will sort you out.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1154
	},
	{
		"id" : 249603538,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-26T15:25:53Z",
		"body" : "Maybe try blowing away the entire `/usr/local/var/homebrew/locks` directory.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 249605601,
		"user" : {
			"login" : "jaredbeck"
		},
		"created_at" : "2016-09-26T15:32:41Z",
		"body" : "> Maybe try blowing away the entire /usr/local/var/homebrew/locks directory.\r\n\r\nInteresting. Looks like there are many lock files here that brew failed to delete.\r\n\r\n```\r\nls -al /usr/local/var/homebrew/locks\r\ntotal 0\r\ndrwxr-xr-x  12 jared  admin  408 Sep 21 11:06 .\r\ndrwxr-xr-x   4 jared  admin  136 Sep 19 11:48 ..\r\n-rw-r--r--   1 jared  admin    0 Sep 19 11:49 cmus.brewing\r\n-rw-r--r--   1 jared  admin    0 Sep 21 11:06 freetype.brewing\r\n-rw-r--r--   1 jared  admin    0 Sep 21 11:06 imagemagick.brewing\r\n-rw-r--r--   1 jared  admin    0 Sep 21 11:06 jpeg.brewing\r\n-rw-r--r--   1 jared  admin    0 Sep 21 11:06 libpng.brewing\r\n-rw-r--r--   1 jared  admin    0 Sep 21 11:06 libtiff.brewing\r\n-rw-r--r--   1 jared  admin    0 Sep 21 11:06 libtool.brewing\r\n-rw-r--r--   1 jared  admin    0 Sep 19 11:49 pkg-config.brewing\r\n-rw-r--r--   1 jared  admin    0 Sep 26 11:24 update\r\n-rw-r--r--   1 jared  admin    0 Sep 21 11:06 xz.brewing\r\n```\r\n\r\nWithout making any changes to the filesystem (I've just been typing here on GH) I am no longer able to reproduce the issue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 249606250,
		"user" : {
			"login" : "jaredbeck"
		},
		"created_at" : "2016-09-26T15:34:38Z",
		"body" : "The file `/usr/local/var/homebrew/locks/update` seems to have no effect.\r\n\r\n```\r\ntouch /usr/local/var/homebrew/locks/update \r\n\r\nbrew update\r\nAlready up-to-date.\r\n\r\necho $?\r\n0\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 249625621,
		"user" : {
			"login" : "aw1621107"
		},
		"created_at" : "2016-09-26T16:42:14Z",
		"body" : "I've had something like this before. In my case, I didn't have a `brew` process running, but there was still a `ruby` process hanging around. Once I killed that, things went back to normal",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 249626363,
		"user" : {
			"login" : "jaredbeck"
		},
		"created_at" : "2016-09-26T16:44:57Z",
		"body" : "> I've had something like this before. In my case, I didn't have a brew process running, but there was still a ruby process hanging around. Once I killed that, things went back to normal\r\n\r\nThanks, but at the time of the issue, I also grepped `ps` for ruby, and there was no ruby process running.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 249688363,
		"user" : {
			"login" : "AndrewAlexMac"
		},
		"created_at" : "2016-09-26T20:31:18Z",
		"body" : "I just had the same issue, but it was caused by git `Auto packing the repository in background for optimum performance` followed by brew immediately trying to update, breaking my local homebrew/taps (git errors complaining that tags, remotes, and a bunch of other .git files didn't exist). I'm guessing that the git background process appeared to exit successfully even though it was still busy in the background, which left the repos in an undefined state while brew was unwittingly trying to use them. I upgraded to macOS 10.12 earlier this week, but brew has been working fine since then, so I'm not sure if it's related.\r\n\r\nPerforming `cd \"$(brew --repo)\" && git fsck && brew update` fixed it, although it automatically stashed a bunch of mystery formula changes and created a large number of loose objects, which intermittently breaks brew update. I cleaned those up with `git gc && git prune`.\r\n\r\nI don't remember ever seeing git try to auto-pack in the background before and I haven't manually configured it to, so maybe this is new default behaviour in Sierra that brew needs to account for. My git is the latest formula, but I don't know if homebrew uses it or system git internally.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 249706165,
		"user" : {
			"login" : "jaredbeck"
		},
		"created_at" : "2016-09-26T21:41:20Z",
		"body" : "> I just had the same issue, but it was caused by git Auto packing the repository in background for optimum performance followed by brew immediately trying to update, breaking my local homebrew/taps (git errors complaining that tags, remotes, and a bunch of other .git files didn't exist).\r\n\r\nSounds similar, thanks. I also noticed a `git gc` happening around the time of `brew update`, and perhaps triggered by `brew update`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 249796351,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:11:23Z",
		"body" : "Git and Homebrew use locks for a reason. Obviously it should go without saying that deleting them may result in data corruption. As this specific issue is resolved: closing.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 249879882,
		"user" : {
			"login" : "jaredbeck"
		},
		"created_at" : "2016-09-27T14:22:33Z",
		"body" : "> Obviously it should go without saying that deleting them may result in data corruption.\r\n\r\nRoger that. Don't delete lock files, got it. But, can you explain why `/usr/local/var/homebrew/locks/update` seems to have no effect?\r\n\r\n> As this specific issue is resolved: closing.\r\n\r\nMike, can you please clarify the resolution? Is our hypothesis that a `git gc` process was running in the background, and that homebrew was able to detect that process? If so, what is the detection mechanism? Thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 249964192,
		"user" : {
			"login" : "brlodi"
		},
		"created_at" : "2016-09-27T19:01:03Z",
		"body" : "I encountered the same issue as @AndrewAlexMac today, and resolved it the same way, but I haven't yet upgraded to macOS Sierra so this is occurring under El Cap as well. I didn't touch the lock files at any point, so something has definitely changed in default behavior somewhere that isn't quite being handled right anymore.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 250919156,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T15:46:06Z",
		"body" : "> Mike, can you please clarify the resolution? Is our hypothesis that a git gc process was running in the background, and that homebrew was able to detect that process? If so, what is the detection mechanism?\r\n\r\nI don't have a hypothesis here, I'm just lacking any way to reproduce and therefore fix this.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 251019613,
		"user" : {
			"login" : "jaredbeck"
		},
		"created_at" : "2016-10-03T03:28:43Z",
		"body" : "> I don't have a hypothesis here, I'm just lacking any way to reproduce and therefore fix this.\r\n\r\nFair enough, thanks for the response.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 251019666,
		"user" : {
			"login" : "jaredbeck"
		},
		"created_at" : "2016-10-03T03:29:33Z",
		"body" : "Oh, can you explain though why /usr/local/var/homebrew/locks/update seems to have no effect? Steps to reproduce *that* are given above.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 251037863,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T06:47:48Z",
		"body" : "The presence of that lock file does not imply a lock because it's done at a filesystem level so if you delete it it can be recreated before locking.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 251148415,
		"user" : {
			"login" : "jaredbeck"
		},
		"created_at" : "2016-10-03T16:05:46Z",
		"body" : "> The presence of that lock file does not imply a lock because it's done at a filesystem level so if you delete it it can be recreated before locking.\r\n\r\nSorry, Mike, I don't understand that explanation. Let me rephrase:\r\n\r\nI expected `touch /usr/local/var/homebrew/locks/update` to prevent subsequent `brew update`. It does not.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 251148946,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T16:07:45Z",
		"body" : "@jaredbeck We don't check the presence for that lock file, we check whether it is locked. See the implementation here for any more questions: https://github.com/Homebrew/brew/blob/master/Library/Homebrew/utils/lock.sh",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 251150149,
		"user" : {
			"login" : "jaredbeck"
		},
		"created_at" : "2016-10-03T16:12:22Z",
		"body" : "> We don't check the presence for that lock file, we check whether it is locked. \r\n\r\nI see! Interesting, thanks for explaining! :heart: Looking at `lock.sh` helped, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 251150149,
		"user" : {
			"login" : "jaredbeck"
		},
		"created_at" : "2016-10-03T16:12:22Z",
		"body" : "> We don't check the presence for that lock file, we check whether it is locked. \r\n\r\nI see! Interesting, thanks for explaining! :heart: Looking at `lock.sh` helped, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 252410808,
		"user" : {
			"login" : "AndrewAlexMac"
		},
		"created_at" : "2016-10-08T08:10:14Z",
		"body" : "It seems like if the background `git gc` process created its own lock, it\ndidn't put it anywhere brew was already aware of when checking locks. Maybe\na better solution would be to add git arguments or repo-specific configs to\nprevent it from forking background processes in the first place.\nOn Mon, 3 Oct 2016 at 17:12, Jared Beck <notifications@github.com> wrote:\n\n> We don't check the presence for that lock file, we check whether it is\n> locked.\n>\n> I see! Interesting, thanks for explaining! ‚ù§Ô∏è\n>\n> ‚Äî\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/Homebrew/brew/issues/1155#issuecomment-251150149>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAqE4QxF8zdK_ptYiKCNr_aw4SZ19UgMks5qwSlugaJpZM4KGqD6>\n> .\n>\n-- \nAndrew Macdonald\nDirector, IGDA Scotland\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1155
	},
	{
		"id" : 249670428,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-26T19:22:25Z",
		"body" : "Nice. I think if there's existing files like e.g. `bottle_tests.rb` it's worth integrating them in there and otherwise creating a new `bottle_tests.rb` rather than having dedicated integration tests files.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1156
	},
	{
		"id" : 249678962,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-26T19:55:30Z",
		"body" : "> Took 14 min on master\r\n\r\n:O",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1156
	},
	{
		"id" : 249694306,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-26T20:53:26Z",
		"body" : "> if there's existing files like e.g. bottle_tests.rb it's worth integrating them in there\r\n\r\nI think this would be counter-productive, as this would again result in *less* files being split across multiple processes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1156
	},
	{
		"id" : 249699666,
		"user" : {
			"login" : "penman"
		},
		"created_at" : "2016-09-26T21:14:55Z",
		"body" : "@reitermarkus I don't think it would make much of a difference. The issue before wasn't so much that the files weren't small enough; it was that a single file took longer to run than all the other ones combined. As long as that doesn't happen again, the difference between the way it is now and if some of the tests were moved back in to several other files should be negligible.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1156
	},
	{
		"id" : 249713965,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-26T22:16:47Z",
		"body" : "> I don't think it would make much of a difference.\r\n\r\nYes, probably not. Renamed/merged the integration test files with existing files now.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1156
	},
	{
		"id" : 249730896,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-09-26T23:54:23Z",
		"body" : "LGTM.\r\n\r\nOn my quad-core i7 MacBook Pro:\r\n\r\n* before: 92 seconds\r\n* after: 30 seconds",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1156
	},
	{
		"id" : 249783795,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T07:08:10Z",
		"body" : "Great work, thanks @reitermarkus!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1156
	},
	{
		"id" : 249789330,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T07:38:58Z",
		"body" : "And for @penman for the previous PR using this gem, too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1156
	},
	{
		"id" : 249796423,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:11:45Z",
		"body" : "How long did you wait? Also: sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/docs/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1157
	},
	{
		"id" : 249811074,
		"user" : {
			"login" : "yageek"
		},
		"created_at" : "2016-09-27T09:16:24Z",
		"body" : "Seems to be that after updating to sierra, Kaspersky was slowing down everything. \r\nI removed it and now I have to wait a little but the build finishes after 30 seconds.\r\n\r\nThanks for your help",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1157
	},
	{
		"id" : 249712468,
		"user" : {
			"login" : "xinan"
		},
		"created_at" : "2016-09-26T22:09:38Z",
		"body" : "I also had this issue.\r\n\r\nRefer to issue #1151 \r\n#1152 seems to fix that but when I do `brew update` it doesn't seem to pull the latest commits down. So I did a `brew update --force` and it went away. \r\n\r\nJust being curious, when I do a `brew update`, where do I pull the new version of homebrew from?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1158
	},
	{
		"id" : 249713398,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-26T22:14:11Z",
		"body" : "@xinan \r\n\r\n> when I do brew update it doesn't seem to pull the latest commits down. \r\n\r\nNon-developer users are now updated to tags, and locally you should see Homebrew on the \"stable\" branch. You need to wait for us to tag 1.0.5 before #1152 should take effect for you.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1158
	},
	{
		"id" : 249713489,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-26T22:14:38Z",
		"body" : "Will leave this open until #1152 lands.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1158
	},
	{
		"id" : 249739937,
		"user" : {
			"login" : "xinan"
		},
		"created_at" : "2016-09-27T01:01:34Z",
		"body" : "@zmwangx Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1158
	},
	{
		"id" : 249800695,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:31:12Z",
		"body" : "Shipped in 1.0.5, thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1158
	},
	{
		"id" : 249795432,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:08:03Z",
		"body" : "@liuzexin Run `git clone https://github.com/Homebrew/brew/` manually and speak to GitHub if it doesn't work as Homebrew cannot fix that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1160
	},
	{
		"id" : 249795288,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:07:28Z",
		"body" : "Thanks for your contribution to Homebrew! Without people like you submitting PRs we couldn't run this project. You rock!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1161
	},
	{
		"id" : 249794592,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:04:30Z",
		"body" : "Seems sensible but out of interest what happens if you use `brew upgrade ack --devel`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 249797712,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-09-27T08:17:44Z",
		"body" : "> Seems sensible but out of interest what happens if you use brew upgrade ack --devel?\r\n\r\nWow, it works! Will experiment with it a bit and then close the issue if I don't find anything strange. Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 249797926,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-09-27T08:18:43Z",
		"body" : "Seems that the warning message should be updated, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 249798016,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-27T08:19:05Z",
		"body" : "Yup, that works, though it does still block any transition from HEAD to devel or devel to stable or HEAD to stable.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 249801900,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:36:30Z",
		"body" : "I think requiring intervention on a downgrade is sensible but agreed the messaging should be updated in both cases.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 249802204,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-27T08:37:48Z",
		"body" : "What intervention actually works for a downgrade currently other than uninstall?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 249802352,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:38:26Z",
		"body" : "`unlink`, I think?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 249802394,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-27T08:38:36Z",
		"body" : "Nope!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 249802899,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-27T08:40:51Z",
		"body" : "```\r\niMac-TMP:~ joe$ brew install --devel ack\r\nWarning: ack-HEAD-f0ad2b9 already installed\r\niMac-TMP:~ joe$ brew unlink ack\r\nUnlinking /usr/local/Cellar/ack/HEAD-f0ad2b9... 2 symlinks removed\r\niMac-TMP:~ joe$ brew install --devel ack\r\nWarning: ack-HEAD-f0ad2b9 already installed, it's just not linked\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 249803212,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T08:42:12Z",
		"body" : "Interesting. No idea, then!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 249803461,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-27T08:43:26Z",
		"body" : "Yeah... I guess we could have a `downgrade` command :scream_cat: ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 249805666,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-27T08:52:55Z",
		"body" : "Current behavior for an upgrade (stable -> devel or head, or devel -> head)\r\nunlink + install -> fail\r\nupgrade -> succeed, and prior version is kept\r\nuninstall + install -> succeed, but prior version is removed due to the uninstall\r\n\r\nCurrent behavior for a downgrade (head -> devel or stable, or devel -> stable)\r\nunlink + install -> fail\r\ndowngrade -> command doesn't exist\r\nuninstall + install -> succeed but prior version is removed due to the uninstall\r\n\r\nI think we probably want to change this to ...\r\n\r\nNew behavior for an upgrade (stable -> devel or head, or devel -> head)\r\nunlink + install -> succeed, and prior version is kept\r\nupgrade -> succeed, and prior version is kept\r\nuninstall + install -> succeed, but prior version is removed due to the uninstall\r\n\r\nNew behavior for a downgrade (head -> devel or stable, or devel -> stable)\r\nunlink + install -> succeed, and prior version is kept\r\ndowngrade -> command doesn't exist (consider creating new command, but probably reject the idea)\r\nuninstall + install -> succeed but prior version is removed due to the uninstall",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 249807300,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-09-27T08:59:59Z",
		"body" : "> Yeah... I guess we could have a downgrade command üôÄ\r\n\r\nDowngrade seems quite strange for me as a command.\r\nProbably it'd be nice if we could upgrade specific spec passing the corresponding flag for it regardless the latest spec installed.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 249807645,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T09:01:26Z",
		"body" : "> unlink + install -> succeed, and prior version is kept\r\n> upgrade -> succeed, and prior version is kept\r\n> uninstall + install -> succeed, but prior version is removed due to the uninstall\r\n\r\nMakes sense to me üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 249831939,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-27T10:53:37Z",
		"body" : "Note that there may be a reason not to implement this. It will lead to a reduction in safety for keg_only formulae, since no `unlink` step will be required, and devel will silently displace an installed stable version simply by running `brew install --devel foo`, potentially breaking dependents, so this may require more thought unless that's an acceptable safety regression.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250779883,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-09-30T15:47:27Z",
		"body" : "> devel will silently displace an installed stable version simply by running brew install --devel foo\r\n\r\n@ilovezfs the only difference with non-keg-only formula is that it would happen silently? I mean `opt` is overwritten anyway after `install` regardless whether the formula is keg-only or not.\r\nAm I missing something?\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250920406,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T16:05:34Z",
		"body" : "@vladshablinsky Need to figure something out without interactivity as it's something we don't do in Homebrew.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250933019,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-10-01T19:41:40Z",
		"body" : "@MikeMcQuaid @ilovezfs well, we can warn and ask user to use `--force` or something for `keg_only` formula.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250934858,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-10-01T20:13:29Z",
		"body" : "> well, we can warn and ask user to use --force or something for keg_only\r\nActually we can just show a message like `use brew upgrade <formula>` to install new version.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250934858,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-10-01T20:13:29Z",
		"body" : "> well, we can warn and ask user to use --force or something for keg_only\r\nActually we can just show a message like `use brew upgrade <formula>` to install new version.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250959123,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-02T07:59:08Z",
		"body" : "@vladshablinsky Sounds good.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250959123,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-02T07:59:08Z",
		"body" : "@vladshablinsky Sounds good.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250959393,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-02T08:07:19Z",
		"body" : "That won't allow the downgrades for keg_only. Force is probably a more flexible answer...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250960401,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-10-02T08:37:16Z",
		"body" : "@ilovezfs do we allow downgrades at all?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250960401,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-10-02T08:37:16Z",
		"body" : "@ilovezfs do we allow downgrades at all?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250960528,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-02T08:39:53Z",
		"body" : "You'd want to be able to install stable alongside HEAD without uninstalling HEAD first, just like you'd want to be able to install HEAD alongside stable without uninstalling stable.\r\n\r\nTechnically none of these are upgrades or downgrades, just installing multiple specs.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250960644,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-10-02T08:42:50Z",
		"body" : "I've already addressed the idea in this comment https://github.com/Homebrew/brew/issues/1162#issuecomment-249807300\r\n\r\nHere it is: \r\n> Probably it'd be nice if we could upgrade specific spec passing the corresponding flag for it regardless the latest spec installed.\r\n\r\nSo we pass the spec we want explicitly and Homebrew installs the latest version of that spec.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250960729,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-02T08:45:22Z",
		"body" : "Personally I like that idea because overloading upgrade for a spec switch stable -> devel or devel -> HEAD seems like an abuse of what upgrade means, and the fact that it currently works I think is actually a bug not a feature.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250960729,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-02T08:45:22Z",
		"body" : "Personally I like that idea because overloading upgrade for a spec switch stable -> devel or devel -> HEAD seems like an abuse of what upgrade means, and the fact that it currently works I think is actually a bug not a feature.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250961553,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-10-02T09:07:28Z",
		"body" : "> Personally I like that idea \r\n\r\nYou mean the idea adding `downgrade` command or the idea with explicit specs?\r\n\r\nUpgrade without argument should probably behave same way it does now. If we introduced `--stable` option to define spec explicitly, we'd be able to use `brew install [--stable|--devel|--HEAD]` and\r\n`brew upgrade [--stable|--devel|--HEAD]`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 250962247,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-02T09:25:56Z",
		"body" : "I mean the explicit specs. Yes, I think you have the right idea.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1162
	},
	{
		"id" : 249807317,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T09:00:05Z",
		"body" : "Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/docs/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1163
	},
	{
		"id" : 249811185,
		"user" : {
			"login" : "Arkanine"
		},
		"created_at" : "2016-09-27T09:16:52Z",
		"body" : "No probs,\r\n\r\n176-67-23-67:~ roman$ brew gist-logs wget\r\nError: No available formula with the name \"wget\" \r\n\r\n176-67-23-67:~ roman$ brew update\r\nAlready up-to-date.\r\n\r\n176-67-23-67:~ roman$ brew update\r\nAlready up-to-date.\r\n\r\n176-67-23-67:~ roman$ brew doctor\r\nYour system is ready to brew.\r\n\r\n176-67-23-67:~ roman$ brew gist-logs wget\r\nError: No available formula with the name \"wget\" \r\n\r\nOS X El Capitan\r\nVersion 10.11.6\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1163
	},
	{
		"id" : 249811667,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T09:19:01Z",
		"body" : "Can I see your `brew config` output?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1163
	},
	{
		"id" : 249812271,
		"user" : {
			"login" : "Arkanine"
		},
		"created_at" : "2016-09-27T09:21:40Z",
		"body" : "Sure\r\nHOMEBREW_VERSION: 1.0.3-31-gb432f8e\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: b432f8e9cb2d03c8f1d7a65b9d6df2e04b3d37a7\r\nLast commit: 33 minutes ago\r\nCore tap ORIGIN: https://github.com/Homebrew/brew.git\r\nCore tap HEAD: b432f8e9cb2d03c8f1d7a65b9d6df2e04b3d37a7\r\nCore tap last commit: 33 minutes ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local/Homebrew\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: quad-core 64-bit ivybridge\r\nHomebrew Ruby: 2.0.0-p648\r\nClang: 8.0 build 800\r\nGit: 2.7.1 => /usr/local/bin/git\r\nPerl: /usr/bin/perl\r\nPython: /usr/bin/python\r\nRuby: /usr/bin/ruby => /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby\r\nJava: 1.8.0_91\r\nmacOS: 10.11.6-x86_64\r\nXcode: 8.0\r\nCLT: 7.3.1.0.1.1461711523\r\nX11: N/A\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1163
	},
	{
		"id" : 249812846,
		"user" : {
			"login" : "Arkanine"
		},
		"created_at" : "2016-09-27T09:24:13Z",
		"body" : "Also I forgot to Check that Command Line Tools for Xcode (CLT) and/or Xcode are up to date:\r\n\r\ngcc --version\r\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\r\nApple LLVM version 8.0.0 (clang-800.0.38)\r\nTarget: x86_64-apple-darwin15.6.0\r\nThread model: posix\r\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1163
	},
	{
		"id" : 249813755,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T09:27:58Z",
		"body" : "> Core tap ORIGIN: https://github.com/Homebrew/brew.git\r\n\r\nThis is the issue. Run `rm -rf /usr/local/Library/Homebrew/Taps/homebrew/homebrew-core` and then try to reinstall.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1163
	},
	{
		"id" : 249815718,
		"user" : {
			"login" : "Arkanine"
		},
		"created_at" : "2016-09-27T09:36:30Z",
		"body" : "@MikeMcQuaid thank you! My problem is solved.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1163
	},
	{
		"id" : 249817252,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-27T09:43:21Z",
		"body" : "Glad to hear it!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1163
	},
	{
		"id" : 249866795,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-27T13:36:51Z",
		"body" : "This was because only the old file names were excluded in the `.rubocop_todo.yml`, and since the new `.rubocop_todo.yml` wasn't actually merged in the `parallel_tests` PR, it was green.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1164
	},
	{
		"id" : 249854011,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-27T12:45:40Z",
		"body" : "This unfortunately has nothing to do with brew and you should report to tmux.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1165
	},
	{
		"id" : 249927809,
		"user" : {
			"login" : "devmage"
		},
		"created_at" : "2016-09-27T16:57:52Z",
		"body" : "Looks like your ticket here may be related to https://github.com/Homebrew/brew/issues/972",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1167
	},
	{
		"id" : 250921524,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T16:26:24Z",
		"body" : "This is an issue with Qt itself so should be reported to them. If there's a change we can make in the Qt formula we'll accept a pull request to do so. Could you try and open a pull request? [This document](https://github.com/Homebrew/brew/blob/master/docs/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md#how-to-open-a-homebrew-pull-request-and-get-it-merged) should help and I'm happy to walk you through anything else.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1167
	},
	{
		"id" : 250921524,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T16:26:24Z",
		"body" : "This is an issue with Qt itself so should be reported to them. If there's a change we can make in the Qt formula we'll accept a pull request to do so. Could you try and open a pull request? [This document](https://github.com/Homebrew/brew/blob/master/docs/How-To-Open-a-Homebrew-Pull-Request-(and-get-it-merged).md#how-to-open-a-homebrew-pull-request-and-get-it-merged) should help and I'm happy to walk you through anything else.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1167
	},
	{
		"id" : 249917393,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-27T16:22:08Z",
		"body" : "I'm currently trying something, will have a PR for you to test shortly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1168
	},
	{
		"id" : 249922613,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-27T16:40:09Z",
		"body" : "I don't use Atom, but if the RuboCop plugin allows you to specify command line args, I'd try adding `--force-exclusion`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1168
	},
	{
		"id" : 250920999,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T16:16:56Z",
		"body" : "Should be fixed when https://github.com/Homebrew/brew/pull/1169 is merged.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1168
	},
	{
		"id" : 250098279,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T07:59:19Z",
		"body" : "This looks good. Do you use an editor with Rubocop integration? If so, can you try to open a single `Library/Taps/**/*.rb` file and see if it uses the correct file?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1169
	},
	{
		"id" : 250098506,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T08:00:23Z",
		"body" : "I'm wondering if that'd be fixed by having the core file live in `Library/Homebrew`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1169
	},
	{
		"id" : 250191296,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-28T14:55:20Z",
		"body" : "> Do you use an editor with Rubocop integration?\r\n\r\nNo, @DomT4 could you test this? I guess the RuboCop integration probably expects to find a `.rubocop.yml` instead of `.rubocop_formula` and `.rubocop_core.yml`. In this case we could probably have `Library/Homebrew/.rubocop.yml` and `Library/Taps/.rubocop.yml`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1169
	},
	{
		"id" : 250193679,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-28T15:02:26Z",
		"body" : "Sure, I'll yank it down locally and test it in the next hour or so.\r\n\r\n> I guess the RuboCop integration probably expects to find a .rubocop.yml instead of .rubocop_formula and .rubocop_core.yml.\r\n\r\nI agree with your suspicion here though. Seems likely.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1169
	},
	{
		"id" : 250246062,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-09-28T17:57:02Z",
		"body" : "> In this case we could probably have Library/Homebrew/.rubocop.yml and Library/Taps/.rubocop.yml.\n\nYup, that would be ideal I think. It's also how RuboCop itself expects configs to be structured, regardless of editor integrations.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1169
	},
	{
		"id" : 250281531,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-28T19:57:14Z",
		"body" : "Sorry for the massive delay, one of those days. One of those months really üòï.\r\n\r\nThis seems to have wildly confused Atom's Rubocop integration, heh. I now see messages about the class having too many lines, Ruby 1.9 hash syntax & even reverting double quotes to single quotes (which I'm not sure where that's coming from).\r\n\r\nThe plugin I use is [this one](https://github.com/AtomLinter/linter-rubocop), which you can't pass configurations to explicitly, it \"sniffs\" them, so I guess this somehow upset that sniffing. The same thing happens with Rubocop as well though, so perhaps a Rubocop issue rather than a linter issue (?). if I do:\r\n```bash\r\ncd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-x11\r\nrubocop --auto-correct\r\n```\r\nIt changes all the double quotes to single. If I:\r\n```bash\r\ncd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-x11\r\nrubocop --auto-correct --config /usr/local/Homebrew/Library/.rubocop_formula.yml\r\n```\r\nIt does behave as expected.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1169
	},
	{
		"id" : 250287862,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-28T20:21:26Z",
		"body" : "> I now see messages about the class having too many lines, Ruby 1.9 hash syntax & even reverting double quotes to single quotes (which I'm not sure where that's coming from).\r\n\r\nThis is the default config of RuboCop, so it just doesn't pick up the `_core.yml` and `_formula.yml` files.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1169
	},
	{
		"id" : 250289627,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T20:28:11Z",
		"body" : "> In this case we could probably have Library/Homebrew/.rubocop.yml and Library/Taps/.rubocop.yml.\r\n\r\nAgreed this sounds ideal üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1169
	},
	{
		"id" : 250303841,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-28T21:18:43Z",
		"body" : "Ok, I renamed/moved the separate configs. @DomT4, you wanna test this again?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1169
	},
	{
		"id" : 250364137,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-29T03:52:09Z",
		"body" : "Seem to be back where we started üò¢. Atom now nags me to change to the 1.9 hash syntax, and nags about guard clauses. Rubocop concurs:\r\n\r\n```bash\r\ncd /usr/local/Homebrew && rubocop --auto-correct --config /usr/local/Homebrew/Library/.rubocop.yml /usr/local/Homebrew/Library/Taps/homebrew/homebrew-x11\r\n```\r\n```diff\r\ndiff --git a/clusterit.rb b/clusterit.rb\r\nindex 5a9d544..25bf9d9 100644\r\n--- a/clusterit.rb\r\n+++ b/clusterit.rb\r\n@@ -13,8 +13,8 @@ class Clusterit < Formula\r\n\r\n   depends_on :x11\r\n\r\n-  conflicts_with \"couchdb-lucene\", :because => \"both install a `run` binary\"\r\n-  conflicts_with \"pdsh\", :because => \"both install `dshbak`\"\r\n+  conflicts_with \"couchdb-lucene\", because: \"both install a `run` binary\"\r\n+  conflicts_with \"pdsh\", because: \"both install `dshbak`\"\r\n```\r\netc. Same thing if I `cd` into the tap directory and run a simple `rubocop --auto-correct`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1169
	},
	{
		"id" : 250364610,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-29T03:57:11Z",
		"body" : "What if you rename `/usr/local/Homebrew/Library/.rubocop.yml` to something else that RuboCop won't pick up, since this is not a *complete* config, but shared between core and formulae? (You'll need to update the other two to `inherit_from` the new name.) ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1169
	},
	{
		"id" : 250906991,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T11:17:24Z",
		"body" : "I've updated this so that:\r\n- `Library/.rubocop.yml` is the file that's then inherited and overridden by `Library/Homebrew/.rubocop.yml`. This means it'll work for all taps by default without needing to create `Library/Taps` in Git (which I'm slightly üò® of for no real reason).\r\n- Homebrew/core passes `brew style` and also editing a random file uses the `Library/.rubocop.yml` rules.\r\n- Disabled the rules that were stopping Homebrew/core from passing. We can iterate on more rules in a future PR.\r\n\r\nGoing to merge this when üíö to avoid more Rubocop weirdness creeping into core CC @ilovezfs @DomT4 ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1169
	},
	{
		"id" : 250906991,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T11:17:24Z",
		"body" : "I've updated this so that:\r\n- `Library/.rubocop.yml` is the file that's then inherited and overridden by `Library/Homebrew/.rubocop.yml`. This means it'll work for all taps by default without needing to create `Library/Taps` in Git (which I'm slightly üò® of for no real reason).\r\n- Homebrew/core passes `brew style` and also editing a random file uses the `Library/.rubocop.yml` rules.\r\n- Disabled the rules that were stopping Homebrew/core from passing. We can iterate on more rules in a future PR.\r\n\r\nGoing to merge this when üíö to avoid more Rubocop weirdness creeping into core CC @ilovezfs @DomT4 ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1169
	},
	{
		"id" : 250926715,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-01T17:54:25Z",
		"body" : "Thanks, @DomT4, for confirming. Merging this then.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1169
	},
	{
		"id" : 250927077,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-10-01T18:00:25Z",
		"body" : "üòÑ Lots of green, but not the right green. Could be a while, CI queue is kind of... intense at the moment. Thanks for working on this @reitermarkus, very much appreciate you taking the time.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1169
	},
	{
		"id" : 249939013,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-27T17:36:29Z",
		"body" : "Sorry, but adding/removing a bottle per se does not trigger a recompilation. This is true for almost all core formulae that haven't got version updated but have recently received Sierra bottles, and in such cases, we don't even drop the Mavericks bottle. Your PHPs were recompiled due to revision bumps, e.g. https://github.com/Homebrew/homebrew-php/commit/c783ac4ead929bcc6c86efc0ed881e29776867c2. Now why did they do https://github.com/Homebrew/homebrew-php/pull/3622 and such over at the php tap, I'm not sure. I suggest you open a ticket there to ask them, and have me CC'ed.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1170
	},
	{
		"id" : 249995643,
		"user" : {
			"login" : "javian"
		},
		"created_at" : "2016-09-27T20:54:50Z",
		"body" : "@rhaglennydd Will, it is true that part of the revision bump for the formulas was related to the release of macOS Sierra and that the effect is you described. This is however not the only issue that has been occurring in the php tap which lead to the revision of the bottles. As an example brew migrated to a new directory structure recently and we discovered that a hardcoded link to the old structure was located in the phpize script in all php versions so that we were no longer able to compile extensions and bottle them. This prevented us from providing Sierra support and meant that the bottles needed to be rebuilt after the underlying issue with the phpize script had been resolved.\r\n\r\nAs for the issues you bring up I hear you but there are a lot of people that upgrade to Sierra so I believe it is important for us to provide bottles also for the new version of the operating system near to its release. Your second issue I believe is hard to change since it part of the design of brew. Some Formulas have external dependencies to other Formulas and the the dependency is updated the bottle has to be rebuilt or the Formula will be broken. It is not so much that it a bottled is added or removed but the revision that is changed which triggers the reinstall/compile to happen.\r\n\r\nSo in short this is not a solution to your issues but if you have further issues, ideas or code suggestions feel free to send a PR our way (in the php tap) and we can take it from there.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1170
	},
	{
		"id" : 250013229,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-27T22:05:32Z",
		"body" : "@javian FYI you don't need a revision bump to bottle for Sierra. Just specify `--keep-old` to `test-bot` and run the job on Homebrew Sierra Testing.\r\n\r\nHardcoded paths are indeed reason for revision though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1170
	},
	{
		"id" : 250013616,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-27T22:07:20Z",
		"body" : "To be more concrete, check out my bottling jobs on https://bot.brew.sh/view/Testing/job/Homebrew%20Sierra%20Testing/ and the [recent commit history in core](https://github.com/Homebrew/homebrew-core/commits) (I'm mass bottling for Sierra right now).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1170
	},
	{
		"id" : 250079456,
		"user" : {
			"login" : "javian"
		},
		"created_at" : "2016-09-28T06:02:34Z",
		"body" : "@zmwangx I don't have access to `test-bot` afaik so the only way I know how to handle it is through revisions.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1170
	},
	{
		"id" : 250098009,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T07:58:00Z",
		"body" : "@javian Ping me in Slack and I'll get you access.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1170
	},
	{
		"id" : 249960050,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-27T18:47:56Z",
		"body" : "Did you install python from source? Or did you pour our bottle? Please post of the output of the following commands:\r\n\r\n```\r\nbrew info python\r\n/bin/ls -l /usr/local/Cellar/python/2.7.12/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/_sqlite3.so\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 249961417,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-09-27T18:52:24Z",
		"body" : "Used your bottles. Here is the [gist](https://gist.github.com/lipis/6aba25182ca6545e1b86400f5d568f4f) to avoid crappy comments.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 249992425,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-09-27T20:43:31Z",
		"body" : "@zmwangx I'm guessing it's not what you wanted to see.. :(",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 249993232,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-27T20:46:24Z",
		"body" : "I just came back to my computer.\r\n\r\n> Used your bottles.\r\n\r\nInfo disagrees.\r\n\r\n```\r\n/usr/local/Cellar/python/2.7.12 (6,288 files, 85.3M) *\r\n  Built from source on 2016-09-27 at 20:06:59\r\n```\r\n\r\nJudging from your desperateness, you should really consider pouring our bottle instead of trying to debug your source build.\r\n\r\nBut if you really want to debug your source build, show us your\r\n\r\n```\r\nbrew config\r\n```\r\n\r\nand the conversation might be able to continue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 249995048,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-09-27T20:52:50Z",
		"body" : "I don't care about debugging.. I just want to make it work.. I thought by running `brew install python` would use your bottle :) Am I missing something?! How do I override.. solve my problem?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 249995281,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-09-27T20:53:35Z",
		"body" : "```bash\r\nHOMEBREW_VERSION: 1.0.5-25-g7e93340\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: 7e93340073106f9f5a4bef057823210fb432c064\r\nLast commit: 8 hours ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: 81697c641696ca9249ff9c6b1a24095ccb0c04d8\r\nCore tap last commit: 3 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local/Homebrew\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: octa-core 64-bit haswell\r\nHomebrew Ruby: 2.0.0-p648\r\nClang: 8.0 build 800\r\nGit: 2.10.0 => /usr/local/bin/git\r\nPerl: /usr/bin/perl\r\nPython: /usr/local/bin/python => /usr/local/Cellar/python/2.7.12/Frameworks/Python.framework/Versions/2.7/bin/python2.7\r\nRuby: /usr/bin/ruby => /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby\r\nJava: 1.8.0_60\r\nmacOS: 10.12-x86_64\r\nXcode: 8.0\r\nCLT: N/A\r\nX11: 2.7.9 => /opt/X11\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 249996178,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-27T20:56:49Z",
		"body" : "That's weird. Could you please try\r\n\r\n```\r\nsudo xcode-select --install\r\n```\r\n\r\nto install CLT and try again (`brew update --force; brew uninstall --force python; brew install python`)?\r\n\r\nIf that doesn't work I'll tell you a secret way.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 249996756,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-09-27T20:58:57Z",
		"body" : "The beauty of Python! On it..",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 249999776,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-09-27T21:10:19Z",
		"body" : "Magic! I really can't believe that it worked :) Thank you very very nice..! Spent the whole evening on that.. :)\r\n\r\n![magic](https://cloud.githubusercontent.com/assets/125676/18891874/83886cfe-8507-11e6-8851-05fc4e8fe259.gif)\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 249999888,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-09-27T21:10:43Z",
		"body" : "I still want to know the secret way though.. in case of trouble in the future I can always come back here..",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 249999921,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-27T21:10:51Z",
		"body" : "Glad to hear.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250000699,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-27T21:13:32Z",
		"body" : "The secret way is\r\n\r\n```sh\r\n# Depending on current version of formula and OS\r\ncurl -LO https://homebrew.bintray.com/bottles/python-2.7.12.sierra.bottle.tar.gz\r\nbrew install ./python-2.7.12.sierra.bottle.tar.gz\r\n```\r\n\r\nBut `brew install python` should really pull the bottle. Guess it's because you're missing CLT, but not sure, I'm not familiar with no-CLT configurations.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250002087,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-09-27T21:19:04Z",
		"body" : "I'm sure I had them installed on that machine.. as I think Homebrew requires that at one point.. but after the Sierra upgrade things went sideways (as always)... thanks again! Cheers.. üç∫ üçª üç∫ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250002868,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-27T21:22:03Z",
		"body" : "```\r\n$ pkgutil --lsbom com.apple.pkg.DevSDK_OSX1012 | cut -d / -f 2 | uniq\r\n.\r\nSystem\r\nusr\r\n```\r\n\r\nAs you can see, CLT package installs its contents into `/System` and `/usr`, both of which are overwritten by a major OS upgrade.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250293607,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-09-28T20:43:19Z",
		"body" : "<img width=\"545\" alt=\"screen shot 2016-09-28 at 22 38 27\" src=\"https://cloud.githubusercontent.com/assets/125676/18931432/7297c550-85cc-11e6-90fd-619466833bf9.png\">\r\n\r\n<img width=\"645\" alt=\"screen shot 2016-09-28 at 22 38 35\" src=\"https://cloud.githubusercontent.com/assets/125676/18931435/7447cb70-85cc-11e6-9612-7f0977dbf4a3.png\">\r\n\r\nI might need to throw away this computer (or maybe just have clean install) after all.. :(\r\n\r\nNot sure if that's related but it looks like something is wrong again.. that happens every time that I'm trying to [deploy](https://cloud.google.com/sdk/gcloud/reference/app/deploy) the app on App Engine.. In case that matters.. and yes I deleted every single trace of [google-cloud-sdk](https://cloud.google.com/sdk/docs/quickstart-mac-os-x) and installed it again.. no luck :)\r\n\r\nMaybe @zmwangx you have some other *black magic* that could help me..?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250294475,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-28T20:46:35Z",
		"body" : "Unfortunately no, I'm not running into such issues on Sierra, and I doubt it's our problem (most of my stuff run on Python 3 though, and almost always with a non system wide Python). Maybe you could give pyenv a try?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250310725,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-09-28T21:48:03Z",
		"body" : "Something is odd with my machine :( thanks man.. I installed `pyenv` used all the versions from `2.7.8 - 2.7.12` and I downgraded the App Engine sdk as well.. no luck.. I'm ready!\r\n\r\n![giphy](https://cloud.githubusercontent.com/assets/125676/18933621/f860746c-85d5-11e6-9ff0-4b1b99e1f627.gif)\r\n\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250311508,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-28T21:51:45Z",
		"body" : "Huh sorry to hear that but no idea... I myself did run into the \"Python quit unexpectedly\" issue intermittently since 3.5 I believe (which is roughly the same time as 2.7.11), but it was pretty rare and never reproducible.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250311713,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-28T21:52:41Z",
		"body" : "Now you may try a binary installer from python.org directly but I doubt it would help much...",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250311972,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-28T21:53:54Z",
		"body" : "Or you can try installing just Python in a clean VM.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250328885,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-09-28T23:15:38Z",
		"body" : "It's just sucks.. but that's life :) When you play dangerous games.. \r\n\r\nBasically at the moment I'm backing up, committing my 3423 projects into GitHub making sure that 652TB of crap in Dropbox are synced and I'll be ready to clean the shit out of it... I wanted to do that for quite some time now.. so it looks like that day/night just arrived :) ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250329071,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-28T23:16:33Z",
		"body" : "üëç Good luck with your clean install.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250329261,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-09-28T23:17:49Z",
		"body" : "By the way..! Homebrew is on #43.. http://githubstats.lip.is",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250330694,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-09-28T23:26:54Z",
		"body" : "And [legacy-homebrew](https://github.com/Homebrew/legacy-homebrew) is 28. üòÇ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250331617,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-28T23:32:48Z",
		"body" : "Opened https://github.com/Homebrew/homebrew-core/issues/5347 to see if we can prevent more users from wasting time on Python due to missing CLT.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250332417,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-09-28T23:37:44Z",
		"body" : "Maybe also change the first CLT to: Command Line Tools (CLT)\r\n\r\n@reitermarkus Let's see when the new one will overpass it..",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250898841,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-10-01T07:47:51Z",
		"body" : "@zmwangx and now everything is nice and clean! :) Can I ask your opinion about `brew cask`.. I used to [have it like a million years ago](https://github.com/lipis/dotfiles/blob/master/cask.sh).. is it OK to use it?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250898841,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-10-01T07:47:51Z",
		"body" : "@zmwangx and now everything is nice and clean! :) Can I ask your opinion about `brew cask`.. I used to [have it like a million years ago](https://github.com/lipis/dotfiles/blob/master/cask.sh).. is it OK to use it?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250899054,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-10-01T07:53:58Z",
		"body" : "and I'm also ready to run this beauty: [`brew.sh`](https://github.com/lipis/dotfiles/blob/master/brew.sh) any other magic to add or remove?\r\n\r\n(you can also totally ignore my questions..)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250899054,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-10-01T07:53:58Z",
		"body" : "and I'm also ready to run this beauty: [`brew.sh`](https://github.com/lipis/dotfiles/blob/master/brew.sh) any other magic to add or remove?\r\n\r\n(you can also totally ignore my questions..)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250906442,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-10-01T11:02:41Z",
		"body" : "> Can I ask your opinion about brew cask\r\n\r\nMy **personal** opinion of cask is it's pretty awful for any sort of management, but it's useful for one off installations, and that's what I use it for. Any cask lovers out there: I do not intend to spark an argument.\r\n\r\n> brew.sh\r\n\r\nIt's fine, but \r\n\r\n```\r\nln -s /usr/local/bin/gsha256sum /usr/local/bin/sha256sum\r\n```\r\n\r\nis pointless since the non-prefixed version is already in `gnubin`. Also, you should hard code\r\n`$(brew --prefix coreutils)/libexec/gnubin` (e.g. `/usr/local/opt/coreutils/libexec/gnubin`) to speed up shell init.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250919016,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-10-01T15:43:31Z",
		"body" : "Awesome man! Much appreciated..",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250941991,
		"user" : {
			"login" : "lipis"
		},
		"created_at" : "2016-10-01T22:40:44Z",
		"body" : "So the good news is that my machine is very clean and nice..!!\r\n\r\nthe bad news is that I still have the error: https://gist.github.com/lipis/946c17457cdd8acf45d6270091ebc63a\r\n\r\n```\r\nSegmentation fault: 11\r\n```\r\n\r\nIf there are any clues above.. fine.. but in the meantime I'll try to work on my older machine.. and maybe downgrade (somehow) to El Capitan :(\r\n\r\n(Maybe also posting this somewhere else would make sense.. I can't be the only one..)\r\n\r\n![wzbcycv](https://cloud.githubusercontent.com/assets/125676/19017413/d81579ea-8838-11e6-8d61-f47d440d7bea.png)\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1171
	},
	{
		"id" : 250960360,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-10-02T08:36:08Z",
		"body" : "We can change `cmd/list.rb` so `brew list --versions <package1, package2, ..., packageN>` will exit with `1` code if there is no keg for some `<package_i>`, for the others packages it'll print their versions. So, we print everything we can just like before the change and what we change is exit code if there are kegs that could not be found in the Cellar. This is the **first** option:\r\n\r\n```diff\r\ndiff --git a/Library/Homebrew/cmd/list.rb b/Library/Homebrew/cmd/list.rb\r\nindex d2eebb5..43a0382 100644\r\n--- a/Library/Homebrew/cmd/list.rb\r\n+++ b/Library/Homebrew/cmd/list.rb\r\n@@ -106,7 +106,11 @@ module Homebrew\r\n     names = if ARGV.named.empty?\r\n       Formula.racks\r\n     else\r\n-      ARGV.named.map { |n| HOMEBREW_CELLAR+n }.select(&:exist?)\r\n+      racks = ARGV.named.map { |n| HOMEBREW_CELLAR+n }\r\n+      racks.select do |rack|\r\n+        Homebrew.failed = true unless rack.exist?\r\n+        rack.exist?\r\n+      end\r\n     end\r\n     if ARGV.include? \"--pinned\"\r\n       pinned_versions = {}\r\n```\r\n\r\nThe **second** option could be raising an error like we do for `list` command without `--versions` flag. E.g.\r\n\r\n```bash\r\n‚ûú vlad:Homebrew$ brew list --verbose installed_package_1 no_such_package installed_package_2\r\nError: No such keg: /usr/local/Cellar/no_such_package\r\n``` \r\nor\r\n```bash\r\n‚ûú vlad:Homebrew$ brew list --verbose installed_package_1 no_such_package installed_package_2\r\ninstalled_package_1 1.0 1.1 2.0\r\nError: No such keg: /usr/local/Cellar/no_such_package\r\n```\r\n\r\nI like the first option.\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1172
	},
	{
		"id" : 250960586,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-02T08:41:11Z",
		"body" : "I'm happy with either @vladshablinsky.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1172
	},
	{
		"id" : 250522554,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-29T16:40:55Z",
		"body" : "`doxygen` is a `:recommended` dependency in addition to a `:build` dependency. The former makes it marked as missing, not the latter.\r\n\r\nPlease shout at me if my diagnostics was not clear or if you find a bare `:build` dependency marked as missing.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1173
	},
	{
		"id" : 250112553,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T09:05:52Z",
		"body" : "Thanks @zmwangx!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1174
	},
	{
		"id" : 250073257,
		"user" : {
			"login" : "denfromufa"
		},
		"created_at" : "2016-09-28T05:12:12Z",
		"body" : "possibly related:\r\n\r\nhttps://github.com/Homebrew/legacy-homebrew/issues/16995",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1175
	},
	{
		"id" : 250097947,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T07:57:40Z",
		"body" : "We no longer support OS X 10.9, sorry.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1175
	},
	{
		"id" : 250112306,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T09:04:41Z",
		"body" : "Do the bottles rely on a particular `Cellar` location?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1176
	},
	{
		"id" : 250114114,
		"user" : {
			"login" : "EdSchouten"
		},
		"created_at" : "2016-09-28T09:12:24Z",
		"body" : "Thanks for the quick response, Mike!\r\n\r\nRight now I guess they don't. All formulae are named `${gnu_cross_target}-${name}`, e.g. `aarch64-unknown-cloudabi-boost` for Boost for ARM64. That way you can easily install cross build infrastructure for any architecture of choice.\r\n\r\nThey all install their files under `Cellar/${gnu_cross_target}-${name}/${version}/share/${gnu_cross_target}`, so that their files get linked under `/usr/local/share/${gnu_cross_target}`. The cross compiler, Clang, never accesses any files stored in the Cellar directly.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1176
	},
	{
		"id" : 250140977,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T11:27:31Z",
		"body" : "To be more explicit: does `brew bottle` generate a `cellar :any` bottle? If not, they are bound to a particular path. If it does generate one a better fit may be avoiding bottles altogether and just having a formula that installs your binary.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1176
	},
	{
		"id" : 250132593,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-28T10:40:46Z",
		"body" : "> it will return a failing status code if the diff is not empty.\r\n\r\nReturning a failing status code when `brew man` actually did its job feels a little bit weird. What about the other way round.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1177
	},
	{
		"id" : 250133746,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-09-28T10:47:14Z",
		"body" : "I used `--exit-code` to match the `git` argument, but I think it is semantically equivalent to `--check-outdated`, in that it returns true if the man pages are already up to date. I think the new option is mainly intended for CI.\r\n\r\nI will defer to the maintainers' preferences of course.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1177
	},
	{
		"id" : 250134414,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-28T10:50:50Z",
		"body" : "Your argument is very reasonable, but another way to think about it is \"nothing to do\" => failing exit code. Just a thought, I don't feel strongly either way.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1177
	},
	{
		"id" : 250400077,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-09-29T08:12:50Z",
		"body" : "The CI is üî¥ because it thinks coverage will go down, but I think this will improve coverage once `brew man` is added to `test-bot` in https://github.com/Homebrew/homebrew-test-bot/pull/4",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1177
	},
	{
		"id" : 250141913,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-28T11:32:50Z",
		"body" : "Thanks @ilovezfs!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1178
	},
	{
		"id" : 250142705,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-09-28T11:37:12Z",
		"body" : "Thanks for the merge!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1178
	},
	{
		"id" : 250193429,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-28T15:01:42Z",
		"body" : "Please install CLT\r\n\r\n```\r\nsudo xcode-select --install\r\n```\r\n\r\nand try again.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1179
	},
	{
		"id" : 250210247,
		"user" : {
			"login" : "Rotonen"
		},
		"created_at" : "2016-09-28T15:53:38Z",
		"body" : "Thank you, I did indeed still have the command line tools from El Capitan.\r\n\r\nUser error.\r\n\r\nShould `brew doctor` catch this?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1179
	},
	{
		"id" : 250326571,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-28T23:02:30Z",
		"body" : "I think this problem is specific to `python` and a few other formulae (see the `pour_bottle` block in `python.rb`) so IMO it may not be the best idea to warn about this in general.\r\n\r\nWe will consider how to better deal with this problem. Meanwhile, glad the problem is fixed.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1179
	},
	{
		"id" : 250331507,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-28T23:32:05Z",
		"body" : "https://github.com/Homebrew/homebrew-core/issues/5347",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1179
	},
	{
		"id" : 250198282,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-28T15:16:04Z",
		"body" : "Thanks for the report. This is a known issue, see Homebrew/homebrew-core#4841. We don't track issues of individual formula in the Homebrew/brew issue tracker, so I'm closing this.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1180
	},
	{
		"id" : 250198521,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-28T15:16:50Z",
		"body" : "By the way, this is really an upstream issue so if you could put pressure on upstream it would be nice.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1180
	},
	{
		"id" : 250365262,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-29T04:03:51Z",
		"body" : "New Rust release is being cut today which should fix Sierra: https://github.com/Homebrew/homebrew-core/pull/4960#issuecomment-250295814",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1180
	},
	{
		"id" : 250411543,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-29T09:06:34Z",
		"body" : "Thanks for your contribution to Homebrew! Without people like you submitting PRs we couldn't run this project. You rock!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1183
	},
	{
		"id" : 250420534,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-29T09:47:25Z",
		"body" : "We don't really do feature requests here but I'm broadly üëç. Either open a https://github.com/homebrew/brew-evolution PR or just implement it here. You'll be able to do this similarly to https://github.com/Homebrew/brew/blob/de5deaea986a82daf5924791cfb9224a6a88b29a/Library/Homebrew/tap.rb#L250-L252",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1184
	},
	{
		"id" : 251286884,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-10-04T03:27:53Z",
		"body" : "Addressed by #1195.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1184
	},
	{
		"id" : 250476448,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-29T14:08:28Z",
		"body" : "`brew update --verbose` will help you figure out which repositories you need to fix your GitHub access credentials for.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1185
	},
	{
		"id" : 250589482,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-29T20:59:01Z",
		"body" : "If you've upgrade to macOS Sierra there's a known issue (which seems deliberate on Apple's part) where it no longer reads your SSH passphrase from the Keychain, so every time you reboot you have to manually `ssh-add -A` if you fetch stuff from Git over SSH, otherwise you will see issues like that.\r\n\r\nSee https://github.com/jirsbek/SSH-keys-in-macOS-Sierra-keychain and the various sources linked to from there.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1185
	},
	{
		"id" : 250477603,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-09-29T14:12:33Z",
		"body" : "I'd like us to lean into the \"proper\" solution for this instead of adding more variables and instead whitelist the variables we allow into `test` (and `install` but that could be done afterwards).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1186
	},
	{
		"id" : 250478131,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-29T14:14:18Z",
		"body" : "A proper solution is great but I doubt it will come from me (at least not any time soon).",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1186
	},
	{
		"id" : 250919264,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T15:48:02Z",
		"body" : "Unfortunately while they both perhaps _should_ our versions code is such that it's pretty hard to make that change while guaranteeing that we're not going to break another version format üò≠ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1187
	},
	{
		"id" : 250951374,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-02T03:25:34Z",
		"body" : "This was more of a note to myself to fix this. I'm not expecting you to.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1187
	},
	{
		"id" : 250957725,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-02T07:13:05Z",
		"body" : "Ok, cool. Either way I'd love to see this stuff be more consistent but we'll probably need some sort of automated \"test all of homebrew/core and make sure it stays the same\" thing üò≠ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1187
	},
	{
		"id" : 250587276,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-09-29T20:50:21Z",
		"body" : "`brew install --help` triggering autoupdate should be considered a bug IMO. Sorry for the inconvenience.\r\n\r\nFYI to disable autoupdate you set the `HOMEBREW_NO_AUTO_UPDATE` environment variable.\r\n\r\nAlso, if you haven't cleaned up your old `readline` yet, you can\r\n\r\n```\r\nbrew switch readline 6.3.8\r\n```\r\n\r\nbut you'll also need to switch whatever that has been upgraded and linked to readline 7.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1188
	},
	{
		"id" : 250594020,
		"user" : {
			"login" : "skycaptain"
		},
		"created_at" : "2016-09-29T21:17:00Z",
		"body" : "Already solved the issues regarding readline using `HOMEBREW_NO_AUTO_UPDATE`. Was difficult though, since `brew install` doesn't allow pinned formulas. But installing readline 6 and 7 side by side and using `brew switch` finally solved everything. Anyway, thanks for your help.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1188
	},
	{
		"id" : 250593872,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-09-29T21:16:27Z",
		"body" : "Does `brew reinstall grace -s` help at all?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1189
	},
	{
		"id" : 251023254,
		"user" : {
			"login" : "ltbuchman"
		},
		"created_at" : "2016-10-03T04:10:45Z",
		"body" : "hello Mike, I followed all the troubleshooting instructions and posted them\non GitHub on Friday. Please let me know if you know how to fix the problem.\nThanks, Luisa\n\nOn Thu, Sep 29, 2016 at 11:57 PM, Mike McQuaid <notifications@github.com>\nwrote:\n\n> Sorry but you have not followed the requested steps on the\n> Troubleshooting page\n> <https://github.com/Homebrew/brew/blob/master/docs/Troubleshooting.md#troubleshooting>\n>\n> Please follow (all of) these steps and post the information here so we can\n> help you with your problem.\n>\n> Thanks!\n>\n> ‚Äî\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/Homebrew/brew/issues/1189#issuecomment-250673460>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AVfNIDZwDpOmRr8xd2MSWLsP5sfAQod8ks5qvLK9gaJpZM4KKe_c>\n> .\n>\n\n\n\n-- \nLuisa T. Buchman\n*, physicsCalifornia Institute of Technology*\n\n\n*cell:     (626) 755-8050email:  lbuchman@uw.edu <lbuchman@uw.edu>web:\nhttps://sites.google.com/a/uw.edu/lbuchman/home\n<https://sites.google.com/a/uw.edu/lbuchman/home>*\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1189
	},
	{
		"id" : 251037969,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T06:48:38Z",
		"body" : "@ltbuchman I got them but I'm not really sure what's going on here, unfortunately üò≠ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1189
	},
	{
		"id" : 251164247,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-10-03T17:06:53Z",
		"body" : "There's a previous issue for this here: https://github.com/Homebrew/homebrew-x11/issues/221\r\n\r\nUnfortunately no one seems particularly certain what's going on, and no one's actively working on it. Sorry. :(",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1189
	},
	{
		"id" : 251208077,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-10-03T19:52:48Z",
		"body" : "I'm wondering if all our OpenMotif stuff is broken.\r\n\r\n```\r\n$ brew uses openmotif | cat\r\nhomebrew/science/mbsystem\r\nhomebrew/science/xmgredit\r\nhomebrew/x11/ddd\r\nhomebrew/x11/geomview\r\nhomebrew/x11/grace\r\nhomebrew/x11/nedit\r\nhomebrew/x11/xastir\r\nhomebrew/x11/xpdf\r\n```\r\n\r\n`ddd` crashes on startup.\r\n\r\n```\r\n$ ddd\r\nError: Unresolved inheritance operation\r\n\r\nXt error (Unresolved inheritance operation).\r\n\r\nOops!  You have found a bug in DDD.\r\n```\r\n\r\n`geomview` segfaults.\r\n\r\n```\r\n$ geomview\r\n[1]    13597 segmentation fault  geomview\r\n```\r\n\r\n`xastir` crashes with an error similar to `xmgrace`.\r\n\r\n```\r\n$ xastir\r\n...\r\nWarning: Fatal Error:\r\n_XmGetDefaultDisplay cannot be used prior to VendorS.Initialize, returns NULL\r\nMagick: abort due to signal 11 (SIGSEGV) \"Segmentation Fault\"...\r\n[1]    13684 abort      xastir\r\n```\r\n\r\n`xpdf` breaks with a similar VendorShell warning.\r\n\r\n```\r\n$ xpdf\r\nWarning: Widget must be a VendorShell.\r\nError: attempt to add non-widget child \"dsm\" to parent \"xpdf\" which supports only widgets\r\n```\r\n\r\n`mbsystem` breaks with the `VendorS.Initialize` error.\r\n\r\n```\r\n$ mbgrdviz\r\nWarning: Fatal Error:\r\n_XmGetDefaultDisplay cannot be used prior to VendorS.Initialize, returns NULL\r\n[1]    16602 segmentation fault  mbgrdviz\r\n```\r\n\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1189
	},
	{
		"id" : 251237905,
		"user" : {
			"login" : "ltbuchman"
		},
		"created_at" : "2016-10-03T21:50:41Z",
		"body" : "I tried xpdf and got the same error as apjanke.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1189
	},
	{
		"id" : 251251187,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-10-03T22:57:48Z",
		"body" : "I tried upgrading to [`openmotif` 2.3.6](https://github.com/Homebrew/homebrew-x11/pull/252), but it didn't solve anything.\r\n\r\nI'm curious what state you were in back when it was working. With the bad-linkage theory here, it seems like it shouldn't have been running in the first place. Do you recall the last time you had done a `brew update; brew upgrade`? How often do you update?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1189
	},
	{
		"id" : 251251508,
		"user" : {
			"login" : "mistydemeo"
		},
		"created_at" : "2016-10-03T22:59:53Z",
		"body" : "@apjanke Is there a possibility this was introduced via an xorg update?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1189
	},
	{
		"id" : 251257207,
		"user" : {
			"login" : "ltbuchman"
		},
		"created_at" : "2016-10-03T23:35:19Z",
		"body" : "Prior to Sept. 20, 2016, xmgrace worked fine. I use it all the time for my work. On Sept. 20, 2016 I did 'brew update, outdated, upgrade, cleanup, prune, doctor' and it's been broken ever since.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1189
	},
	{
		"id" : 251270515,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-10-04T01:09:19Z",
		"body" : "> Is there a possibility this was introduced via an xorg update?\r\n\r\nI believe so, because if I understand the MacPorts discussion properly, this is sensitive to how `libXt.dylib` is compiled, and we get that from xorg/Xquartz.\r\n\r\nI'll try it against the prior XQuartz release. And there's a new XQuartz 2.7.10_rc4 release candidate out; maybe that would make a difference too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1189
	},
	{
		"id" : 251273191,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-10-04T01:30:03Z",
		"body" : "Aha! The [2.7.10_rc4 release notes](https://www.xquartz.org/releases/XQuartz-2.7.10_rc4.html) even have an item about `libXt` and Motif. They say:\r\n\r\n\r\n> * libXt\r\n>    * libXt.6.dylib is now a two-level-namespace dylib\r\n>    * libXt.7.dylib is now a stub dylib that re-exports libXt.6.dylib (for binary compatibility with anything built against XQuartz 2.7.9)\r\n>    * A flat_namespace version of libXt is available in /opt/X11/lib/flat_namespace to help ease the transition (#96292)\r\n>        * Set DYLD_LIBRARY_PATH=/opt/X11/lib/flat_namespace when executing older non-compliant software (eg: Motif-based applications)\r\n>        * Motif users are encouraged to file bugs against Motif to encourage them to fix that library.\r\n\r\nAnd this from the XQuartz 2.7.9 release notes:\r\n\r\n> * libXt\r\n>    * No longer linked with -flat_namespace\r\n>    * Binary compatibility maintained for existing clients of libXt.6.dylib\r\n\r\nWhich I think means that `libXt.6.dylib` is `-flat_namespace`, and the new `libXt.7.dylib` is not.\r\n\r\nHere's the library from XQuartz 2.7.8 (the prior version):\r\n\r\n```\r\n$ otool -hv libXt.6.dylib\r\nlibXt.6.dylib:\r\nMach header\r\n      magic cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags\r\nMH_MAGIC_64  X86_64        ALL  0x00       DYLIB    19       2024 DYLDLINK NO_REEXPORTED_DYLIBS APP_EXTENSION_SAFE\r\n```\r\n\r\nNote the lack of TWOLEVEL in the flags. There is no `libXt.7.dylib` in this version.\r\n\r\nHere's the libs from XQuartz 2.7.9:\r\n\r\n```\r\n$ otool -hv libXt.6.dylib libXt.7.dylib\r\nlibXt.6.dylib:\r\nMach header\r\n      magic cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags\r\nMH_MAGIC_64  X86_64        ALL  0x00       DYLIB    19       2024 DYLDLINK NO_REEXPORTED_DYLIBS APP_EXTENSION_SAFE\r\nlibXt.7.dylib:\r\nMach header\r\n      magic cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags\r\nMH_MAGIC_64  X86_64        ALL  0x00       DYLIB    19       2024   NOUNDEFS DYLDLINK TWOLEVEL NO_REEXPORTED_DYLIBS APP_EXTENSION_SAFE\r\n```\r\n\r\nI downgraded XQuartz from 2.7.9 to 2.7.8, reinstalled `openmotif` and `grace` from source, and it's working now: running `xmgrace` launches the GUI instead of just crashing.\r\n\r\nSo this was probably caused by XQuartz being upgraded on the test-bot servers. I suspect the first time that an openmotif bottle was built against 2.7.9, it linked to the two-level-namespace `libXt.7.dylib`, and @ltbuchman picked it up on a subsequent update.\r\n\r\nSo I think we need to massage the build to get it to link against the flat-namespace versions of `libXt.dylib` instead of the defaults ‚Äì I'll see if I can figure that out ‚Äì and push for OpenMotif upstream to add compatibility with two-level-namespace dylibs (however that's done; beyond me at this point).\r\n\r\n@ltbuchman, as a workaround for the time being, try making sure you have XQuartz 2.7.8 installed (not 2.7.9 or 2.7.10_rc4), and reinstall `openmotif` and `grace` from source with `brew reinstall -s openmotif grace`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1189
	},
	{
		"id" : 251284506,
		"user" : {
			"login" : "haiboyu"
		},
		"created_at" : "2016-10-04T03:06:14Z",
		"body" : "@apjanke Andrew, I can confirm this workaround works for me! Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1189
	},
	{
		"id" : 251505401,
		"user" : {
			"login" : "ltbuchman"
		},
		"created_at" : "2016-10-04T20:36:12Z",
		"body" : "@apjanke Andrew, the work around didn't work for me. I installed XQuartz 2.7.8 from https://www.xquartz.org/releases/XQuartz-2.7.8.html (after uninstalling XQuartz 2.7.10_rc4). Then joy6:~ lbuchman$ brew reinstall -s openmotif\r\n==> Reinstalling homebrew/x11/openmotif\r\n==> Downloading https://downloads.sourceforge.net/project/motif/Motif%202.3.4%20Source%20Code/motif-\r\n==> Downloading from http://heanet.dl.sourceforge.net/project/motif/Motif%202.3.4%20Source%20Code/mo\r\n######################################################################## 100.0%\r\n==> Patching\r\npatching file configure.ac\r\npatching file lib/Xm/XmP.h\r\n==> ./autogen.sh --prefix=/usr/local/Cellar/openmotif/2.3.4 --disable-dependency-tracking --disable-\r\n==> make install\r\nüç∫  /usr/local/Cellar/openmotif/2.3.4: 1,275 files, 15.7M, built in 2 minutes 16 seconds\r\njoy6:~ lbuchman$ brew reinstall -s grace\r\n==> Reinstalling homebrew/x11/grace\r\n==> Downloading https://mirrors.kernel.org/debian/pool/main/g/grace/grace_5.1.25.orig.tar.gz\r\n######################################################################## 100.0%\r\n==> ./configure --prefix=/usr/local/Cellar/grace/5.1.25_1 --enable-grace-home=/usr/local/Cellar/grac\r\n==> make install\r\nüç∫  /usr/local/Cellar/grace/5.1.25_1: 266 files, 9.5M, built in 35 seconds\r\njoy6:~ lbuchman$ xmgrace example.agr \r\n\r\nThen it just hung. After 5 minutes I Cntrl-C to abort it. There was no error message.\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1189
	},
	{
		"id" : 251507966,
		"user" : {
			"login" : "ltbuchman"
		},
		"created_at" : "2016-10-04T20:45:24Z",
		"body" : "@apjanke An update: I upgraded to openmotif 2.3.6 and then reinstalled it from the source. Same result.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1189
	},
	{
		"id" : 251866783,
		"user" : {
			"login" : "ltbuchman"
		},
		"created_at" : "2016-10-06T04:54:18Z",
		"body" : "@apjanke Andrew, today I brew updated and brew upgraded and now the workaround you suggested works! So I can use xmgrace again and go back to being productive! Thank you. Please let me know if / when you and colleagues figure out a full fix.  ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1189
	},
	{
		"id" : 252123365,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-10-07T00:16:54Z",
		"body" : "Glad to hear it. I was kind of stumped there.\r\n\r\nI'm going to close this out in favor of an issue on the `x11` tap at https://github.com/Homebrew/homebrew-x11/issues/255, since this is an X11-specific problem and not an issue with the `brew` tool. You can watch progress there.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1189
	},
	{
		"id" : 250907442,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T11:29:13Z",
		"body" : "> What if we transform any command like brew (--help|--usage|-?|-h|<some_command>)+ into\r\n> brew help <some_command> e.g.\r\n\r\nSeems like a good idea (even if the Bash code currently makes me want to cry a bit). It may be cleaner to consider just setting `HOMEBREW_HELP=1` rather than modifying the argument list.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1190
	},
	{
		"id" : 250907442,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T11:29:13Z",
		"body" : "> What if we transform any command like brew (--help|--usage|-?|-h|<some_command>)+ into\r\n> brew help <some_command> e.g.\r\n\r\nSeems like a good idea (even if the Bash code currently makes me want to cry a bit). It may be cleaner to consider just setting `HOMEBREW_HELP=1` rather than modifying the argument list.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1190
	},
	{
		"id" : 250915102,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-10-01T14:25:21Z",
		"body" : ">It may be cleaner to consider just setting HOMEBREW_HELP=1 rather than modifying the argument list.\r\n\r\nThe idea was to prevent parsing `--help`-like flags twice: in `sh` and then in `rb`. Sorry for such a Bash code, I'm quite new to writing my own Bash code.\r\n\r\nAssuming what you have said, can this be a solution?\r\n\r\n```diff\r\ndiff --git a/Library/Homebrew/brew.sh b/Library/Homebrew/brew.sh\r\nindex 22ebb87..8ecaadd 100644\r\n--- a/Library/Homebrew/brew.sh\r\n+++ b/Library/Homebrew/brew.sh\r\n@@ -179,6 +179,15 @@ then\r\n   set -- \"$@\" -v\r\n fi\r\n \r\n+for arg in \"$@\"\r\n+do\r\n+  if [[ $arg = \"--help\" || $arg = \"-h\" || $arg = \"--usage\" || $arg = \"-?\" ]]\r\n+  then\r\n+    HOMEBREW_HELP=\"1\"\r\n+    break\r\n+  fi\r\n+done\r\n+\r\n HOMEBREW_ARG_COUNT=\"$#\"\r\n HOMEBREW_COMMAND=\"$1\"\r\n shift\r\n@@ -268,6 +277,7 @@ setup-analytics\r\n report-analytics-screenview-command\r\n \r\n update-preinstall() {\r\n+  [[ \"$HOMEBREW_HELP\" != \"1\" ]] || return\r\n   [[ -z \"$HOMEBREW_NO_AUTO_UPDATE\" ]] || return\r\n   [[ -z \"$HOMEBREW_UPDATE_PREINSTALL\" ]] || return\r\n \r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1190
	},
	{
		"id" : 250916035,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T14:44:43Z",
		"body" : "> The idea was to prevent parsing --help-like flags twice: in sh and then in rb. Sorry for such a Bash code, I'm quite new to writing my own Bash code.\r\n\r\nNot your bad, this stuff is just far messier to do in Bash/\r\n\r\n> Assuming what you have said, can this be a solution?\r\n\r\nYeh, that looks good. You could also `export` it and then delete the `--help` handling code from `brew.rb` in favour of checking if the environment variable is et.\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1190
	},
	{
		"id" : 251172476,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T17:38:49Z",
		"body" : "Thanks @vladshablinsky!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1190
	},
	{
		"id" : 250919845,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T15:55:50Z",
		"body" : "I guess I'd `realpath` everything and then use both the `real` and non-real version to decide what we should filter.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1191
	},
	{
		"id" : 250919845,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T15:55:50Z",
		"body" : "I guess I'd `realpath` everything and then use both the `real` and non-real version to decide what we should filter.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1191
	},
	{
		"id" : 251058347,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-03T09:01:30Z",
		"body" : "@MikeMcQuaid I'm not sure it matters but do you prefer `opt/boost -> boost@1.62` or `opt/boost -> ../Cellar/boost@1.62`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1192
	},
	{
		"id" : 251058347,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-03T09:01:30Z",
		"body" : "@MikeMcQuaid I'm not sure it matters but do you prefer `opt/boost -> boost@1.62` or `opt/boost -> ../Cellar/boost@1.62`?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1192
	},
	{
		"id" : 251058822,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T09:04:06Z",
		"body" : "@ilovezfs Then latter just in case people are relying on being able to follow one layer of symlinks to find the Cellar :+1:",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1192
	},
	{
		"id" : 251180920,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T18:10:11Z",
		"body" : "There's some test failures but code and local testing look good to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1192
	},
	{
		"id" : 250899987,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T08:17:29Z",
		"body" : "> I would unset VERBOSE and HOMEBREW_VERBOSE during tests and only stub ARGV.verbose? to true if we actually want to test verbosity. Re-running the whole test suite just to test verbosity is overkill.\r\n\r\nAgreed üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1193
	},
	{
		"id" : 250900550,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-10-01T08:31:54Z",
		"body" : "Instead of stubbing, I've made assertions conditional on verbosity - better still?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1193
	},
	{
		"id" : 250900550,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-10-01T08:31:54Z",
		"body" : "Instead of stubbing, I've made assertions conditional on verbosity - better still?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1193
	},
	{
		"id" : 250900701,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T08:35:53Z",
		"body" : "@MatzFan do `ENV.delete \"HOMEBREW_VERBOSE\"` in `cmd/tests.rb` instead.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1193
	},
	{
		"id" : 250900925,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-10-01T08:41:20Z",
		"body" : "@MikeMcQuaid much better. Will do same for VERBOSE - as it appears to be set [here](https://github.com/Homebrew/brew/blob/master/Library/Homebrew/cmd/sh.rb#L25)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1193
	},
	{
		"id" : 251071680,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-10-03T10:12:40Z",
		"body" : "I see codecov has failed this. Should I write a `test_tests.rb` to cover the changes (with system stubbed - so it doesn't recurse!) please advise, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1193
	},
	{
		"id" : 251071680,
		"user" : {
			"login" : "MatzFan"
		},
		"created_at" : "2016-10-03T10:12:40Z",
		"body" : "I see codecov has failed this. Should I write a `test_tests.rb` to cover the changes (with system stubbed - so it doesn't recurse!) please advise, thanks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1193
	},
	{
		"id" : 251092745,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T12:24:06Z",
		"body" : "You can ignore the codecov failures.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1193
	},
	{
		"id" : 251144116,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T15:50:28Z",
		"body" : "Thanks @MatzFan!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1193
	},
	{
		"id" : 250890023,
		"user" : {
			"login" : "tml"
		},
		"created_at" : "2016-10-01T03:39:20Z",
		"body" : "I just ran into this myself:\r\n\r\n```\r\njoey@sys$ brew update\r\nAlready up-to-date.\r\njoey@sys$ brew install lyx\r\nError: No available formula with the name \"lyx\"\r\n==> Searching for similarly named formulae...\r\nError: No similarly named formulae found.\r\n==> Searching taps...\r\nThis formula was found in a tap:\r\nCaskroom/cask/lyx\r\nTo install it, run:\r\n  brew install Caskroom/cask/lyx\r\n==> You haven't updated Homebrew in a while.\r\nA formula for lyx might have been added recently.\r\nRun `brew update` to get the latest Homebrew updates!\r\n```\r\n\r\n\r\nFollowing from this issue in legacy-homebrew (first hit in Google) did no good:\r\n\r\n```\r\n\r\njoey@sys$ cd $(brew --repo); git fetch; git reset --hard origin/master; brew update\r\nHEAD is now at 41b2df8 Merge pull request #1177 from scpeters/man_exit_code\r\nAlready up-to-date.\r\n```\r\n\r\nI realize that in this instance I will be able to install lyx from the provided cask, but it's a bit disconcerting to get the \"==> You haven't updated Homebrew in a while.\" when I do it almost reflexively every day.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1194
	},
	{
		"id" : 250900095,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T08:20:20Z",
		"body" : "Can I see your `brew config` output please?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1194
	},
	{
		"id" : 250928737,
		"user" : {
			"login" : "tml"
		},
		"created_at" : "2016-10-01T18:30:19Z",
		"body" : "HOMEBREW_VERSION: 1.0.5-43-g41b2df8\r\nORIGIN: https://github.com/Homebrew/brew.git\r\nHEAD: 41b2df8e338c3fe345afc89b1bb394e824213561\r\nLast commit: 35 hours ago\r\nCore tap ORIGIN: https://github.com/Homebrew/homebrew-core\r\nCore tap HEAD: a2941783d3052ebb6e0e8af4f7064da4dc3c7678\r\nCore tap last commit: 19 hours ago\r\nHOMEBREW_PREFIX: /usr/local\r\nHOMEBREW_REPOSITORY: /usr/local/Homebrew\r\nHOMEBREW_CELLAR: /usr/local/Cellar\r\nHOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com\r\nCPU: octa-core 64-bit haswell\r\nHomebrew Ruby: 2.0.0-p648\r\nGCC-4.2: build 5666\r\nClang: 8.0 build 800\r\nGit: 2.10.0 => /usr/local/bin/git\r\nPerl: /usr/bin/perl\r\nPython: /usr/local/bin/python => /usr/local/Cellar/python/2.7.12/Frameworks/Python.framework/Versions/2.7/bin/python2.7\r\nRuby: /Users/joey/.rvm/rubies/ruby-2.1.2/bin/ruby\r\nJava: 1.8.0_102, 1.8.0_45, 1.7.0_75, 1.7.0_45, 1.6.0_65-b14-468\r\nmacOS: 10.11.6-x86_64\r\nXcode: 8.0\r\nCLT: 7.3.1.0.1.1461711523\r\nX11: 2.7.9 => /opt/X11\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1194
	},
	{
		"id" : 250956712,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-10-02T06:40:07Z",
		"body" : "Fixed:\r\ns/dest/dst/g\r\nLeft: shell (as would be inconsistent with the unlink side which has another variable named src).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1195
	},
	{
		"id" : 250984401,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-10-02T17:48:28Z",
		"body" : "+1 to the general approach here.\r\n\r\nI think the `brew tap --repair` command may also need to be updated to include this. Maybe just:\r\n\r\n```\r\n    if ARGV.include? \"--repair\"\r\n      Tap.each(&:link_manpages)\r\n      Tap.each(&:link_completions)\r\n```\r\n\r\nThere's also a [section in `brew update-report`](https://github.com/Homebrew/brew/blob/564fa8867dd865c686d243ba48c202e0cb6a35fe/Library/Homebrew/cmd/update-report.rb#L297-L306) that deals with completion symlinks. Maybe that should be refactored to use `Tap#link_completions` instead of separate `link_src_dst_dirs` calls? (That would make the `fish` completion linking behavior consistent between `brew tap` and `brew update`, too.) Seems to me that whole `link_completions_and_docs` may belong in `Tap` instead of `update-report`.\r\n\r\n```\r\n  def link_completions_and_docs(repository = HOMEBREW_REPOSITORY)\r\n    command = \"brew update\"\r\n    link_src_dst_dirs(repository/\"completions/bash\",\r\n                      HOMEBREW_PREFIX/\"etc/bash_completion.d\", command)\r\n    link_src_dst_dirs(repository/\"docs\",\r\n                      HOMEBREW_PREFIX/\"share/doc/homebrew\", command, link_dir: true)\r\n    link_src_dst_dirs(repository/\"completions/zsh\",\r\n                      HOMEBREW_PREFIX/\"share/zsh/site-functions\", command)\r\n    link_src_dst_dirs(repository/\"manpages\",\r\n                      HOMEBREW_PREFIX/\"share/man/man1\", command)\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1195
	},
	{
		"id" : 251020502,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-10-03T03:39:59Z",
		"body" : "You're right on the missing --repair.\r\n\r\nI agree on the refactor for DRY, but it likely belongs in some shared class not Tap. Wanted to keep the PR small though for my first proper core change. I'll look into fixing this up tomorrow. \r\n\r\nWill look into this tomorrow.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1195
	},
	{
		"id" : 251048974,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-10-03T08:09:11Z",
		"body" : "@apjanke I misunderstood you before. Reading more code, I think you're right about this going in tap.rb and will add to this PR tomorrow.\r\n\r\nWas this all a clever ploy by @MikeMcQuaid to make me learn ruby? ;)",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1195
	},
	{
		"id" : 251052364,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T08:29:15Z",
		"body" : "> Was this all a clever ploy by @MikeMcQuaid to make me learn ruby? ;)\r\n\r\nüòâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1195
	},
	{
		"id" : 251052364,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T08:29:15Z",
		"body" : "> Was this all a clever ploy by @MikeMcQuaid to make me learn ruby? ;)\r\n\r\nüòâ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1195
	},
	{
		"id" : 251390164,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-10-04T13:39:17Z",
		"body" : "@apjanke the reason that this exists in `update-report` is that the main Homebrew repository isn't a tap. I'm looking at how to best refactor this to make it neat (and cleanup the inconsistency in manpages between the two at the same time).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1195
	},
	{
		"id" : 251428717,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-10-04T15:48:57Z",
		"body" : "@MikeMcQuaid you might want to review this for the changes to the man folders.\r\nI think it makes sense to either keep the man/man1 folder hierarchy (perhaps the formula / cask file formats might someday be documented in man5?), or instead explicitly only support man1 for the main repo and taps.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1195
	},
	{
		"id" : 252471330,
		"user" : {
			"login" : "joshka"
		},
		"created_at" : "2016-10-09T07:56:28Z",
		"body" : "Just a quick heads up that I'll likely not hit this until later this week.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1195
	},
	{
		"id" : 252478325,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-09T10:26:35Z",
		"body" : "@joshka No rush, thanks for the heads up.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1195
	},
	{
		"id" : 250895166,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-01T06:10:28Z",
		"body" : "@scpeters, `brew man --fail-if-changed` failed on this one, could you have a look?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1196
	},
	{
		"id" : 250900049,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-10-01T08:19:07Z",
		"body" : "Well, this is annoying. It's failing because the month has changed. This didn't occur to me when I submitted that PR. smh\r\n\r\n~~~\r\ndiff --git a/manpages/brew-cask.1 b/manpages/brew-cask.1\r\nindex 850d694..8b96922 100644\r\n--- a/manpages/brew-cask.1\r\n+++ b/manpages/brew-cask.1\r\n@@ -1,7 +1,7 @@\r\n .\\\" generated with Ronn/v0.7.3\r\n .\\\" http://github.com/rtomayko/ronn/tree/0.7.3\r\n .\r\n-.TH \"BREW\\-CASK\" \"1\" \"September 2016\" \"Homebrew\" \"brew-cask\"\r\n+.TH \"BREW\\-CASK\" \"1\" \"October 2016\" \"Homebrew\" \"brew-cask\"\r\n .\r\n .SH \"NAME\"\r\n \\fBbrew\\-cask\\fR \\- a friendly binary installer for macOS\r\ndiff --git a/manpages/brew.1 b/manpages/brew.1\r\nindex f32a628..44b7696 100644\r\n--- a/manpages/brew.1\r\n+++ b/manpages/brew.1\r\n@@ -1,7 +1,7 @@\r\n .\\\" generated with Ronn/v0.7.3\r\n .\\\" http://github.com/rtomayko/ronn/tree/0.7.3\r\n .\r\n-.TH \"BREW\" \"1\" \"September 2016\" \"Homebrew\" \"brew\"\r\n+.TH \"BREW\" \"1\" \"October 2016\" \"Homebrew\" \"brew\"\r\n .\r\n .SH \"NAME\"\r\n \\fBbrew\\fR \\- The missing package manager for macOS\r\n~~~",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1196
	},
	{
		"id" : 250906092,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T10:53:33Z",
		"body" : "@reitermarkus @scpeters Fix incoming in https://github.com/Homebrew/brew/pull/1199",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1196
	},
	{
		"id" : 251883439,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-06T07:05:22Z",
		"body" : "@vitorgalvao or @jawshooah, please approve if you get a chance.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1196
	},
	{
		"id" : 250920114,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T16:01:10Z",
		"body" : "Should be fixed as-of https://github.com/Homebrew/install/pull/69.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1197
	},
	{
		"id" : 250920114,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T16:01:10Z",
		"body" : "Should be fixed as-of https://github.com/Homebrew/install/pull/69.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1197
	},
	{
		"id" : 250902718,
		"user" : {
			"login" : "alyssais"
		},
		"created_at" : "2016-10-01T09:24:39Z",
		"body" : "PRs that have so far been affected by this change: #1082, #1193, #1195, #1196.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1198
	},
	{
		"id" : 250902785,
		"user" : {
			"login" : "alyssais"
		},
		"created_at" : "2016-10-01T09:26:16Z",
		"body" : "> Or man pages should be regenerated by a bot or something?\r\n\r\nThis seems like the best (if possibly most complex) solution to me.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1198
	},
	{
		"id" : 250906009,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T10:51:42Z",
		"body" : "> Maybe brew man --fail-if-changed should be modified so date changes don't count?\r\n\r\nDone in https://github.com/Homebrew/brew/pull/1199 so closing this but thanks for the quick PR üôá ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1198
	},
	{
		"id" : 250906355,
		"user" : {
			"login" : "alyssais"
		},
		"created_at" : "2016-10-01T11:00:14Z",
		"body" : "This should probably be documented? I don't think it's immediately clear that `--fail-if-changed` would have different output to the normal version.\r\n\r\nDon't let that hold up this PR though! ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1199
	},
	{
		"id" : 250906355,
		"user" : {
			"login" : "alyssais"
		},
		"created_at" : "2016-10-01T11:00:14Z",
		"body" : "This should probably be documented? I don't think it's immediately clear that `--fail-if-changed` would have different output to the normal version.\r\n\r\nDon't let that hold up this PR though! ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1199
	},
	{
		"id" : 250906858,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T11:13:43Z",
		"body" : "@alyssais Agreed on documentation. Will do that now to avoid üî¥ all the builds.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1199
	},
	{
		"id" : 250919975,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-10-01T15:58:17Z",
		"body" : "Thanks for fixing this, sorry for the trouble üò¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1199
	},
	{
		"id" : 250919975,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-10-01T15:58:17Z",
		"body" : "Thanks for fixing this, sorry for the trouble üò¢ ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1199
	},
	{
		"id" : 250920336,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-10-01T16:04:27Z",
		"body" : "I saw this failure last night but couldn't think of a solution. This morning (after you had already fixed it), it occurred to me that brew.1.html doesn't have a timestamp, so we could just check the `git diff --quiet` of that file and not the manpages folder, but that wouldn't notice changes to the brew cask timestamp. So this is a more complete solution.\r\n\r\nThanks again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1200
	},
	{
		"id" : 250920336,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-10-01T16:04:27Z",
		"body" : "I saw this failure last night but couldn't think of a solution. This morning (after you had already fixed it), it occurred to me that brew.1.html doesn't have a timestamp, so we could just check the `git diff --quiet` of that file and not the manpages folder, but that wouldn't notice changes to the brew cask timestamp. So this is a more complete solution.\r\n\r\nThanks again.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1200
	},
	{
		"id" : 250920466,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T16:06:56Z",
		"body" : "No worries @scpeters, I should have caught it in review too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1200
	},
	{
		"id" : 250920466,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T16:06:56Z",
		"body" : "No worries @scpeters, I should have caught it in review too.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1200
	},
	{
		"id" : 250914709,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-10-01T14:16:44Z",
		"body" : "I think `--stable` would make more sense.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1201
	},
	{
		"id" : 250914727,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T14:17:11Z",
		"body" : "I'd rather have it match the environment variable that's being used.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1201
	},
	{
		"id" : 250924862,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T17:23:55Z",
		"body" : "Will keep it verbose for now as people may get confused otherwise and slim down in future.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1202
	},
	{
		"id" : 250916169,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-01T14:47:25Z",
		"body" : "> while in core we can upgrade en-masse when we choose to while still having the new version be immediately available\r\n\r\nDoes this mean the new version will get to be non-keg-only right away even if it's not the anointed version with the alias pointing at it yet?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 250918779,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T15:38:46Z",
		"body" : "@DomT4 I'm not disagreeing with your comment but can you comment inline rather than just as a block? There's clearly some overlap between what you're proposing and what I'm proposing but it's hard to see that when they've both been proposed in different formats.\r\n\r\n@ilovezfs @DomT4 I realise I've not mentioned `keg_only` in here at all so I'll update it to note that.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 250920583,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-10-01T16:08:56Z",
		"body" : "> I'm not disagreeing with your comment but can you comment inline rather than just as a block? There's clearly some overlap between what you're proposing and what I'm proposing but it's hard to see that when they've both been proposed in different formats.\r\n\r\nTo be honest I didn't because although there's overlap it's almost two different mechanisms of going about this entirely. Some of the stuff I proposed and talked about is 100% the opposite of what you've written. It seemed sensible to detail that in context rather than taking a simple blob of what you wrote and writing my different proposal underneath without that broader context.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 250920583,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-10-01T16:08:56Z",
		"body" : "> I'm not disagreeing with your comment but can you comment inline rather than just as a block? There's clearly some overlap between what you're proposing and what I'm proposing but it's hard to see that when they've both been proposed in different formats.\r\n\r\nTo be honest I didn't because although there's overlap it's almost two different mechanisms of going about this entirely. Some of the stuff I proposed and talked about is 100% the opposite of what you've written. It seemed sensible to detail that in context rather than taking a simple blob of what you wrote and writing my different proposal underneath without that broader context.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 250920693,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T16:11:03Z",
		"body" : "@DomT4 I can't evaluate/compare your proposal without seeing how it breaks down to separate pull requests and how we should handle new versions/version upgrades/homebrew-versions migrations. Either inline comments or a new PR following the same basic outline would be appreciated.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 250920774,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-10-01T16:12:49Z",
		"body" : "Fine, I can file a competing PR. Hadn't done so to avoid wasting one of our's time, but I can submit a competing PR if that's easier for people.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 250921098,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-01T16:18:39Z",
		"body" : "@DomT4 That'd be great. I'm not convinced my solution is better than yours at all but I'm just struggling to compare them currently.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 250953057,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-10-02T04:30:04Z",
		"body" : "Will submit later today. Dropped offline last night because painkillers stopped working on the headache üòÖ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 250953057,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-10-02T04:30:04Z",
		"body" : "Will submit later today. Dropped offline last night because painkillers stopped working on the headache üòÖ.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 251051558,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T08:24:38Z",
		"body" : "> I do think we've overcomplicated this. The idea, from the start really, was that brew install boost gets you the latest boost.\r\n\r\nWhat you seem to be proposing is that it doesn't get you the latest `boost` until we've deleted the current `boost` formula?\r\n\r\n> Obviously, that has proven impractical because if you rename the existing boost for example you have to rebuild every single formula that brew uses it, which in many cases is going to lead to enormous CI and user burden. But I think the situation where we rename the current formula and have the alias pointing at the oldest boost is a mistake.\r\n\r\nI don't propose the alias points at the oldest boost, just the one that we use by default and we shouldn't use it by default until we've fixed our dependencies such that we can use it. The mass-rebuild in this case would be a one-time thing for the rename whereas it's currently required every time.\r\n\r\n> I don't think we need to migrate to the new system overnight, and in fact we get more stability out of things if we don't. As I outlined earlier, using the experience from my work on openssl@1.1 and ILZ's work on boost recently, I think the best process is a gradual move towards deleting the original formula and replacing it at that point with an alias.\r\n\r\nI don't think we are proposing moving to it overnight. This proposes we rename one formula to the new format as a test.\r\n\r\n> The current boost becomes keg_only. This should require zero or very few immediate revisions because we rewrite linkage to the opt_prefix now.\r\n\r\n`brew install boost` shouldn't install a keg-only formula. We should ensure that `brew install boost` creates always `opt/boost`. This should also use https://github.com/Homebrew/brew/pull/1192 or similar to achieve that.\r\n\r\n> We add boost@1.62 as a new formula.\r\n\r\nWe're agreed on this. We can do this today as long as it's keg-only.\r\n\r\n> We migrate things over to boost@1.62 as sensibly but quickly as possible.\r\n\r\nThis migration requires making everything `depends_on \"boost@1.6.2\"` even for stuff that doesn't break on Boost version updates. This feels like a step back rather than forward to me.\r\n\r\n> When brew uses boost returns nothing for all the taps under the Homebrew organisation we delete boost.rb.\r\n\r\nWhich then breaks all the third-party taps that rely on it working. Additionally, our current problems break their bottles but this will break new build-from-source builds.\r\n\r\n> From that point on that Alias moves to the newest version each update & the \"current\" version is always the only one that isn't keg_only.\r\n\r\nWe agree on this: the alias should never be keg_only.\r\n\r\n> New versions are introduced without mandating a hoard of revisions or formula depends_on rewrites immediately.\r\n\r\nThat's the same as my system except in your the `depends_on \"boost\"` will not be possible again.\r\n\r\n> The original name is phased out in favour of an alias over the space of a major release or two.\r\n\r\nIn some formulae this means the original name won't be phased out for years which means we don't provide version support to these formulae for years.\r\n\r\n> brew install <formula> will eventually always install the latest formula, whilst getting there in the least breaking manner.\r\n\r\nThe \"eventually\" is a bit concerning here as we're reliant on upstream release processes.\r\n\r\n> Once superenv filters HOMEBREW_PREFIX/include and HOMEBREW_PREFIX/lib we stop caring what people choose to link into HOMEBREW_PREFIX in terms of what version is linked publicly and use purely opt_prefixes to link and reference against.\r\n\r\nI'm üëç  with this.\r\n\r\n> I believe ILZ is loosely on board with this idea going forwards after his work on Boost this past week or so, but he's very welcome to disagree if I misunderstood that.\r\n\r\n ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 251051558,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T08:24:38Z",
		"body" : "> I do think we've overcomplicated this. The idea, from the start really, was that brew install boost gets you the latest boost.\r\n\r\nWhat you seem to be proposing is that it doesn't get you the latest `boost` until we've deleted the current `boost` formula?\r\n\r\n> Obviously, that has proven impractical because if you rename the existing boost for example you have to rebuild every single formula that brew uses it, which in many cases is going to lead to enormous CI and user burden. But I think the situation where we rename the current formula and have the alias pointing at the oldest boost is a mistake.\r\n\r\nI don't propose the alias points at the oldest boost, just the one that we use by default and we shouldn't use it by default until we've fixed our dependencies such that we can use it. The mass-rebuild in this case would be a one-time thing for the rename whereas it's currently required every time.\r\n\r\n> I don't think we need to migrate to the new system overnight, and in fact we get more stability out of things if we don't. As I outlined earlier, using the experience from my work on openssl@1.1 and ILZ's work on boost recently, I think the best process is a gradual move towards deleting the original formula and replacing it at that point with an alias.\r\n\r\nI don't think we are proposing moving to it overnight. This proposes we rename one formula to the new format as a test.\r\n\r\n> The current boost becomes keg_only. This should require zero or very few immediate revisions because we rewrite linkage to the opt_prefix now.\r\n\r\n`brew install boost` shouldn't install a keg-only formula. We should ensure that `brew install boost` creates always `opt/boost`. This should also use https://github.com/Homebrew/brew/pull/1192 or similar to achieve that.\r\n\r\n> We add boost@1.62 as a new formula.\r\n\r\nWe're agreed on this. We can do this today as long as it's keg-only.\r\n\r\n> We migrate things over to boost@1.62 as sensibly but quickly as possible.\r\n\r\nThis migration requires making everything `depends_on \"boost@1.6.2\"` even for stuff that doesn't break on Boost version updates. This feels like a step back rather than forward to me.\r\n\r\n> When brew uses boost returns nothing for all the taps under the Homebrew organisation we delete boost.rb.\r\n\r\nWhich then breaks all the third-party taps that rely on it working. Additionally, our current problems break their bottles but this will break new build-from-source builds.\r\n\r\n> From that point on that Alias moves to the newest version each update & the \"current\" version is always the only one that isn't keg_only.\r\n\r\nWe agree on this: the alias should never be keg_only.\r\n\r\n> New versions are introduced without mandating a hoard of revisions or formula depends_on rewrites immediately.\r\n\r\nThat's the same as my system except in your the `depends_on \"boost\"` will not be possible again.\r\n\r\n> The original name is phased out in favour of an alias over the space of a major release or two.\r\n\r\nIn some formulae this means the original name won't be phased out for years which means we don't provide version support to these formulae for years.\r\n\r\n> brew install <formula> will eventually always install the latest formula, whilst getting there in the least breaking manner.\r\n\r\nThe \"eventually\" is a bit concerning here as we're reliant on upstream release processes.\r\n\r\n> Once superenv filters HOMEBREW_PREFIX/include and HOMEBREW_PREFIX/lib we stop caring what people choose to link into HOMEBREW_PREFIX in terms of what version is linked publicly and use purely opt_prefixes to link and reference against.\r\n\r\nI'm üëç  with this.\r\n\r\n> I believe ILZ is loosely on board with this idea going forwards after his work on Boost this past week or so, but he's very welcome to disagree if I misunderstood that.\r\n\r\n ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 251051743,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T08:25:35Z",
		"body" : "@DomT4 So in short the main deviation I see between your plan and mine is that you don't think we should rename the existing `boost` formula. I think we should because the rename support is well tested at this point and provides the necessary fallbacks.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 251053239,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T08:34:14Z",
		"body" : "> This migration requires making everything depends_on \"boost@1.6.2\" even for stuff that doesn't break on Boost version updates. This feels like a step back rather than forward to me.\r\n\r\nFurthermore: this would be a breaking API change. We will break infrequently updated tap formulae and we will likely get the blame for that (justifiably so, I think). We should aim to provide a new API (e.g. `depends_on \"boost@1.6.2\"`) while allowing the existing API (e.g. `depends_on \"boost\"`) to work as well/badly as it currently does.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 251579625,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-10-05T04:34:51Z",
		"body" : "I'm not completely sure you read my comment through in its entirety because some of the stuff you raised conflicts with stuff I'd already outlined above, especially the statement that removing `boost.rb` later down the line will break third-party taps. I explicitly stated in my original comment that removing `boost.rb` would be immediately followed up by adding a `boost` alias pointing to the latest available `boost@x.y` formula at the time, which completely facilitates `depends_on \"boost\"` being possible.\r\n\r\nI'll go ahead and admit my system is full of issues, but I think your's is as well to be honest, such as the built-in system where `boost@1.63.rb` goes in as `keg_only` and then relatively soon after stops being `keg_only`, which mandates a revision bump, so you're likely to give folks a `boost@1.63` installation and then whomp them again fairly quickly with a rebuild. That's not such a huge issue given the `cellar :any`, but increasingly unless we make strides on `cellar :any` that could become punishing to non-`/usr/local` users. It also kind of sucks for users on slower or more limited internet connections than we can afford to enjoy ourselves.\r\n\r\nNeither of us have touched on the issue of orphaned formulae, which are going to become quite a bit more common as we go ahead and purge anything outside of +/-2 major versions that is no longer depended upon. `boost` is a good >400MB installation, ending up in a situation where multiple versions are installed and the formulae for some of those are no longer present is less than ideal on disk space & UX. This is already an issue today but it will be a bigger issue as we start mandating adding extra versioned installations of the same formula locally.\r\n\r\nBut look, life is short and I don't expect a ton of movement here however compelling or awful an argument I piece together, so I'm not going to invest a lot more energy into this. It is what it is.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 251595377,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-05T06:46:26Z",
		"body" : ">the built-in system where boost@1.63.rb goes in as keg_only and then relatively soon after stops being keg_only, which mandates a revision bump\r\n\r\nIs there no way to make that transition without a revision bump?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 251603165,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-05T07:34:33Z",
		"body" : "> But look, life is short and I don't expect a ton of movement here however compelling or awful an argument I piece together, so I'm not going to invest a lot more energy into this. It is what it is.\r\n\r\nI'm happy to wait for and value your feedback on this @DomT4.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 252481422,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-09T11:35:58Z",
		"body" : "@DomT4 and I talked privately about this and he's üÜó with this approach being merged as-is.\r\n\r\n> Is there no way to make that transition without a revision bump?\r\n\r\nIf `revision` bumps are required at undocumented points throughout this process I consider that a bug that we should address. `revision`s are a sledgehammer we use a bit too often and should investigate ways to avoid them.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 252490993,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-10-09T14:53:16Z",
		"body" : "Yeah, I'm going to be around considerably less for at least a while, so whatever Mike and @ilovezfs can hammer out and find agreeable between them is fine with me.\r\n\r\n> Is there no way to make that transition without a revision bump?\r\n\r\nYou'd need a new mechanism for it but I _guess_ you could \"teach\" `brew` that an alias should always not be `keg_only` and have it `brew unlink` any related `@` formulae and `brew link --force` the alias or something when that alias changes during `brew update`.\r\n\r\nThe only problem with that is that in the case of `keg_only` formulae like `openssl` you want all of the versions to be `keg_only` regardless of if there's an alias pointing to it or not.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1204
	},
	{
		"id" : 250984794,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-02T17:55:08Z",
		"body" : "@vitorgalvao, changed it to `&&`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1207
	},
	{
		"id" : 251929628,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-06T10:53:22Z",
		"body" : "@vitorgalvao, could you approve this?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1207
	},
	{
		"id" : 250957274,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-02T06:58:14Z",
		"body" : "Thanks Markus",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1210
	},
	{
		"id" : 250957333,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-02T07:00:11Z",
		"body" : "@ilovezfs, feel free to merge this once CI passes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1210
	},
	{
		"id" : 250957333,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-02T07:00:11Z",
		"body" : "@ilovezfs, feel free to merge this once CI passes.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1210
	},
	{
		"id" : 250957357,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-02T07:00:52Z",
		"body" : "@reitermarkus indeed. I used the \"prepare for shutdown\" in Jenkins to clear a path for it so that it went to the top of the queue.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1210
	},
	{
		"id" : 250957650,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-02T07:10:59Z",
		"body" : "Merged! Thanks again, Markus",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1210
	},
	{
		"id" : 251234448,
		"user" : {
			"login" : "javian"
		},
		"created_at" : "2016-10-03T21:36:01Z",
		"body" : "I've made the update now assuming this is what needed to be done. I tested it but I could not make it trigger while using `brew doctor` and it didn't seem to matter what I threw at it. It seemed to return the right things but it didn't seem to have an effect on anything and I couldn't figure out why  :'(",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1215
	},
	{
		"id" : 251308384,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-04T06:55:03Z",
		"body" : "> It seemed to return the right things but it didn't seem to have an effect on anything and I couldn't figure out why :'(\r\n\r\n`brew doctor` won't complain if you don't have the CLT installed, if that's what you're aiming to do. It will complain if you have neither the CLT or Xcode installed. With your change here it'll bypass using the CLT and use Xcode instead if possible which seems like the right thing to do.\r\n\r\nAdditionally, this may be something you want to extend all the way back to e.g. 10.9. If you like I can check the status of this file on those older versions (I have VMs).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1215
	},
	{
		"id" : 251309496,
		"user" : {
			"login" : "javian"
		},
		"created_at" : "2016-10-04T07:01:19Z",
		"body" : "The thing is that if you have a working system with clt and/or xcode (which I both assume install the headers in /usr/include), upgrade to Sierra from El Cap and at that point the folder is removed and the building of some Formulas (in my case, php) will fail. Brew doctor in that case won't help you to detect that your system is missing the header files. This is what I wanted to accomplish.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1215
	},
	{
		"id" : 251312333,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-04T07:17:19Z",
		"body" : "PHP needs specifically the CLT and Xcode is not enough? Xcode doesn't install those headers but we can find the headers in the other locations using superenv.\r\n\r\nGiven what you're suggesting something like your original check may be worth having after all (sorry for asking you to change it) where you state that the CLT is installed but broken and can be fixed by running `xcode-select --install`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1215
	},
	{
		"id" : 251930127,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-06T10:55:39Z",
		"body" : "@jawshooah or @vitorgalvao, also please review (and approve) this.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1216
	},
	{
		"id" : 251092640,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T12:23:28Z",
		"body" : "Thanks for the fix! In future a better commit message and PR title would be great.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1218
	},
	{
		"id" : 251092640,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T12:23:28Z",
		"body" : "Thanks for the fix! In future a better commit message and PR title would be great.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1218
	},
	{
		"id" : 251092683,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T12:23:41Z",
		"body" : "Sorry but you have not followed the requested steps on [the Troubleshooting page](https://github.com/Homebrew/brew/blob/master/docs/Troubleshooting.md#troubleshooting)\r\n\r\nPlease follow (all of) these steps and post the information here so we can help you with your problem.\r\n\r\nThanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1219
	},
	{
		"id" : 251209442,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-10-03T19:58:02Z",
		"body" : "I can reproduce this on 10.11.6. `gedit` crashes on startup with the same errors.\r\n\r\nMay be due to a bad `gdk-pixbuf` bottle. Rebuilding `gdk-pixbuf` from source worked for me.\r\n\r\nRebuilding it in https://github.com/Homebrew/homebrew-core/pull/5545.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1219
	},
	{
		"id" : 251237212,
		"user" : {
			"login" : "apjanke"
		},
		"created_at" : "2016-10-03T21:47:23Z",
		"body" : "Fixed by https://github.com/Homebrew/homebrew-core/pull/5545. Please do a `brew update; brew upgrade` to pick up the fix, and let us know if you have any further problems.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1219
	},
	{
		"id" : 251317672,
		"user" : {
			"login" : "mariomac"
		},
		"created_at" : "2016-10-04T07:46:39Z",
		"body" : "Hi, thank you for your response and sorry for not following the troubleshooting steps.\r\n\r\nUnfortunately the proposed solution do not work, so  I have reported it again by following the required steps: https://github.com/Homebrew/brew/issues/1222\r\n\r\nCheers.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1219
	},
	{
		"id" : 251362613,
		"user" : {
			"login" : "mariomac"
		},
		"created_at" : "2016-10-04T11:27:22Z",
		"body" : "Edit: It works now. Thank you!\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1219
	},
	{
		"id" : 251142327,
		"user" : {
			"login" : "vitorgalvao"
		},
		"created_at" : "2016-10-03T15:44:11Z",
		"body" : "> @Homebrew/cask, also updated `HBC_VERSION` to `0.60.1`, since that is the actual latest tag, but that also doesn't make sense anymore, so we should probably just use `HOMEBREW_VERSION` instead.\r\n\r\nFine by me.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1220
	},
	{
		"id" : 251144007,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-03T15:50:02Z",
		"body" : "Tests are failing: https://bot.brew.sh/job/Brew%20Pull%20Requests/2263/version=yosemite/testReport/junit/brew-test-bot/yosemite/tests___no_compat/\r\n\r\nOtherwise üëç to the general approach.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1220
	},
	{
		"id" : 251362225,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-04T11:24:55Z",
		"body" : "Should be ready to merge now.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1220
	},
	{
		"id" : 251362813,
		"user" : {
			"login" : "mariomac"
		},
		"created_at" : "2016-10-04T11:28:30Z",
		"body" : "Closed according to the instructions in #1219 ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1222
	},
	{
		"id" : 251379061,
		"user" : {
			"login" : "filipre"
		},
		"created_at" : "2016-10-04T12:52:51Z",
		"body" : "Wow. I guess the \"System Integrity Protection\" caused this, even though brew used to work with this turned on. Anyway, I turned it off and I can install stuff again. There might be even an issue about this in legacy-homebrew where I did not search for solutions.\r\n\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1223
	},
	{
		"id" : 251395827,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-04T13:59:24Z",
		"body" : "> I guess the \"System Integrity Protection\" caused this, even though brew used to work with this turned on.\r\n\r\nI really strongly recommend not turning it off. It's a major security feature used by both macOS and Homebrew itself. If you would consider turning it back on and running `brew doctor --debug --verbose` we may be able to help.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1223
	},
	{
		"id" : 251609536,
		"user" : {
			"login" : "filipre"
		},
		"created_at" : "2016-10-05T08:08:13Z",
		"body" : "I see, okay I turned it back on to find the *real* problem. However the problem changed a bit now: It seems like I can install packages again (I installed `awscli`) but `brew doctor` still fails. I also tried to run `sudo chown -R $(whoami) $(brew --prefix)` again but this did not change anything. Is there something wrong with Ruby's permissions?\r\n\r\n\r\n##### `brew install awscli` (worked)\r\n```\r\n‚Üí brew install awscli\r\n==> Auto-updated Homebrew!\r\nUpdated 1 tap (homebrew/core).\r\n==> New Formulae\r\nnmh\r\n==> Updated Formulae\r\nnotmuch\r\n\r\n==> Downloading https://homebrew.bintray.com/bottles/awscli-1.11.1.el_capitan.bottle.tar.gz\r\n######################################################################## 100.0%\r\n==> Pouring awscli-1.11.1.el_capitan.bottle.tar.gz\r\n==> Caveats\r\nThe \"examples\" directory has been installed to:\r\n  /usr/local/share/awscli/examples\r\n\r\nBefore using aws-cli, you need to tell it about your AWS credentials.\r\nThe quickest way to do this is to run:\r\n  aws configure\r\n\r\nMore information:\r\n  https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html\r\n  https://pypi.python.org/pypi/awscli#getting-started\r\n\r\nBash completion has been installed to:\r\n  /usr/local/etc/bash_completion.d\r\n\r\nzsh completion has been installed to:\r\n  /usr/local/share/zsh/site-functions\r\n==> Summary\r\nüç∫  /usr/local/Cellar/awscli/1.11.1: 3,453 files, 28M\r\n```\r\n\r\n##### `brew doctor --debug --verbose` (failed)\r\n```\r\n ‚Üí brew doctor --debug --verbose\r\nChecking check_access_cache\r\nChecking check_access_cellar\r\nChecking check_access_homebrew_repository\r\nChecking check_access_logs\r\nChecking check_access_prefix_directories\r\nChecking check_access_site_packages\r\nChecking check_clt_up_to_date\r\nChecking check_dyld_vars\r\nChecking check_filesystem_case_sensitive\r\nChecking check_for_anaconda\r\nChecking check_for_bad_curl\r\nChecking check_for_bad_install_name_tool\r\nChecking check_for_bad_python_symlink\r\nChecking check_for_beta_xquartz\r\nChecking check_for_config_scripts\r\nChecking check_for_enthought_python\r\nChecking check_for_external_cmd_name_conflict\r\nChecking check_for_gettext\r\nChecking check_for_git\r\nChecking check_for_iconv\r\nChecking check_for_installed_developer_tools\r\nChecking check_for_latest_xquartz\r\nChecking check_for_library_python\r\nChecking check_for_multiple_volumes\r\nError: Operation not permitted - /tmp/doctor20161005-4006-lxgygi\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/tmpdir.rb:85:in `mkdir'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/tmpdir.rb:85:in `block in mktmpdir'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/tmpdir.rb:142:in `create'\r\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/tmpdir.rb:85:in `mktmpdir'\r\n/usr/local/Homebrew/Library/Homebrew/diagnostic.rb:647:in `check_for_multiple_volumes'\r\n/usr/local/Homebrew/Library/Homebrew/cmd/doctor.rb:43:in `block in doctor'\r\n/usr/local/Homebrew/Library/Homebrew/cmd/doctor.rb:35:in `each'\r\n/usr/local/Homebrew/Library/Homebrew/cmd/doctor.rb:35:in `doctor'\r\n/usr/local/Homebrew/Library/Homebrew/brew.rb:93:in `<main>'\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1223
	},
	{
		"id" : 251610574,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-05T08:13:34Z",
		"body" : "What's `env | grep -iE 'TE?MP'` and `echo \"HOMEBREW_TEMP\" | brew irb` output?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1223
	},
	{
		"id" : 251620445,
		"user" : {
			"login" : "filipre"
		},
		"created_at" : "2016-10-05T09:00:39Z",
		"body" : "Thank you for your help btw!\r\n\r\n```\r\n# rene at Renes-MacBook-Pro.local in ~ [10:54:03]\r\n‚Üí env | grep -iE 'TE?MP'\r\nTMPDIR=/var/folders/j_/0cgbtlz10q15nk07q5bbk9qw0000gn/T/\r\n\r\n# rene at Renes-MacBook-Pro.local in ~ [10:54:04]\r\n‚Üí echo \"HOMEBREW_TEMP\" | brew irb\r\n==> Interactive Homebrew Shell\r\nExample commands available with: brew irb --examples\r\nSwitch to inspect mode.\r\nHOMEBREW_TEMP\r\n#<Pathname:/tmp>\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1223
	},
	{
		"id" : 251621777,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-05T09:06:53Z",
		"body" : "What does `ls -lha /tmp` show?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1223
	},
	{
		"id" : 251623366,
		"user" : {
			"login" : "filipre"
		},
		"created_at" : "2016-10-05T09:14:47Z",
		"body" : "```\r\n‚Üí ls -lha /tmp\r\nlrwxr-xr-x@ 1 root  wheel    11B Sep 17  2015 /tmp -> private/tmp\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1223
	},
	{
		"id" : 251624399,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-05T09:19:30Z",
		"body" : "Sorry, `ls -lha /tmp/` and also `mount`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1223
	},
	{
		"id" : 251625712,
		"user" : {
			"login" : "filipre"
		},
		"created_at" : "2016-10-05T09:25:47Z",
		"body" : "Alright:\r\n\r\n```\r\n‚Üí ls -lha /tmp/\r\ntotal 5384\r\ndrwxrwxrwt@ 14 root  wheel   476B Oct  5 09:21 .\r\ndrwxr-xr-x@  6 root  wheel   204B Oct  3 22:09 ..\r\n-rw-rw-rw-@  1 rene  wheel     0B Oct  4 14:45 .keystone_install_lock\r\ndrwxr-xr-x@  6 rene  wheel   204B Oct  4 15:08 Atom Crashes\r\ndrwxr-xr-x@  6 rene  wheel   204B Oct  4 14:45 WhatsApp Crashes\r\ndrwx------   3 rene  wheel   102B Oct  4 14:44 com.apple.launchd.65KnVCBK85\r\ndrwx------   3 rene  wheel   102B Oct  4 14:44 com.apple.launchd.au9aS8gvsF\r\n-rw-r--r--@  1 rene  wheel     0B Oct  4 14:44 ct.shutdown\r\n-rw-r--r--   1 root  wheel   160K Oct  5 07:42 wifi-KRVRJc.log\r\n-rw-r--r--   1 root  wheel   889K Oct  4 18:11 wifi-bilkHJ.log\r\n-rw-r--r--   1 root  wheel   3.1K Oct  4 18:11 wifi-iTtPIA.log\r\n-rw-r--r--   1 root  wheel   1.4M Oct  5 06:13 wifi-mhH0Y6.log\r\n-rw-r--r--   1 root  wheel   4.1K Oct  4 18:11 wifi-oD05lp.log\r\n-rw-r--r--   1 root  wheel   233K Oct  5 07:02 wifi-y0HWMA.log\r\n```\r\n\r\n```\r\n‚Üí mount\r\n/dev/disk1 on / (hfs, local, journaled)\r\ndevfs on /dev (devfs, local, nobrowse)\r\nmap -hosts on /net (autofs, nosuid, automounted, nobrowse)\r\nmap auto_home on /home (autofs, automounted, nobrowse)\r\n/dev/disk0s4 on /Volumes/BOOTCAMP (ntfs, local, read-only, noowners)\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1223
	},
	{
		"id" : 251626377,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-05T09:28:45Z",
		"body" : "The plot thickens. How about `touch /tmp/test1` and `touch \"$TMPDIR\"/test2`?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1223
	},
	{
		"id" : 251627759,
		"user" : {
			"login" : "filipre"
		},
		"created_at" : "2016-10-05T09:34:49Z",
		"body" : "Sweet!\r\n\r\n```\r\n# rene at Renes-MacBook-Pro.local in ~ [11:21:32]\r\n‚Üí touch /tmp/test1\r\ntouch: /tmp/test1: Operation not permitted\r\n\r\n# rene at Renes-MacBook-Pro.local in ~ [11:30:20]\r\n‚Üí touch \"$TMPDIR\"/test2\r\n\r\n# rene at Renes-MacBook-Pro.local in ~ [11:30:32]\r\n‚Üí echo $TMPDIR\r\n/var/folders/j_/0cgbtlz10q15nk07q5bbk9qw0000gn/T/",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1223
	},
	{
		"id" : 251629518,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-05T09:43:25Z",
		"body" : "Hmm, for some reason your `/tmp` isn't writable. I'll improve the `doctor` check but I'm not sure why this would be the case and it'll likely break some other software too.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1223
	},
	{
		"id" : 251896347,
		"user" : {
			"login" : "filipre"
		},
		"created_at" : "2016-10-06T08:16:51Z",
		"body" : "Thank you for your help again. If you plan to extend the `doctor` check, we can leave the issue open. Otherwise feel free to close it since the error has nothing to do with `brew` itself.\r\n\r\nMaybe as a follow up for someone who has similar problems:\r\nI learned that OS X has for [historical reasons](http://apple.stackexchange.com/questions/1043/why-is-tmp-a-symlink-to-private-tmp) a symbolic link from `/tmp` to `/private/tmp`. Now it gets odd: `ls` shows the correct permissions for `/private/tmp` (`1777` or `drwxrwxrwt`).\r\n```\r\n‚Üí ls -ld /private/tmp\r\ndrwxrwxrwt@ 14 root  wheel  476 Oct  5 20:33 /private/tmp\r\n```\r\nHowever, I can't write stuff there and the program `/usr/libexec/repair_packages` (a program to check if permissions are set correctly) tells me, that my folder is still screwed up. Additionally, it can't repair the permissions.\r\n```\r\n# rene at Renes-MacBook-Pro.local in /private/tmp [10:01:00]\r\n‚Üí touch /private/tmp/test\r\ntouch: /private/tmp/test: Operation not permitted\r\n\r\n# rene at Renes-MacBook-Pro.local in /private/tmp [10:01:25]\r\n‚Üí sudo /usr/libexec/repair_packages --verify --standard-pkgs /private\r\n\tPermissions differ on \"tmp\", should be drwxrwxrwt , they are lrwxr-xr-x .\r\n\tPermissions differ on \"usr/X11\", should be drwxr-xr-x , they are lrwxr-xr-x .\r\n\r\n# rene at Renes-MacBook-Pro.local in /private/tmp [10:04:49]\r\n‚Üí sudo /usr/libexec/repair_packages --repair --standard-pkgs /private\r\n\tPermissions differ on \"tmp\", should be drwxrwxrwt , they are lrwxr-xr-x .\r\n\tUnable to set owner & group on \"tmp\". Error 1: Operation not permitted\r\n\tUnable to set permissions on \"tmp\". Error 1: Operation not permitted\r\n\tPermissions differ on \"usr/X11\", should be drwxr-xr-x , they are lrwxr-xr-x .\r\n\tRepaired \"usr/X11\".\r\n```\r\nAlthough `chmod` runs without errors, writing files is still not possible. \r\n```\r\n# rene at Renes-MacBook-Pro.local in /private/tmp [10:11:12]\r\n‚Üí sudo chmod 1777 /private/tmp\r\n\r\n# rene at Renes-MacBook-Pro.local in /private/tmp [10:11:18]\r\n‚Üí touch /private/tmp/test\r\ntouch: /private/tmp/test: Operation not permitted\r\n```\r\n\r\nI might miss something there but this is all really confusing to me. Anyway, I will fix this when I have more time.\r\n\r\n",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1223
	},
	{
		"id" : 251909248,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-06T09:16:17Z",
		"body" : "Yeh, sounds like a weird machine-specific thing. I'll make the doctor check handle this a bit better, though.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1223
	},
	{
		"id" : 251445543,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-10-04T16:50:40Z",
		"body" : "Ideally this lands before Homebrew/homebrew-core#5562.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1225
	},
	{
		"id" : 251580186,
		"user" : {
			"login" : "tdsmith"
		},
		"created_at" : "2016-10-05T04:40:22Z",
		"body" : "Squashed commits.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1225
	},
	{
		"id" : 251523838,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-10-04T21:48:34Z",
		"body" : "This issue was moved to Homebrew/install#70",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1226
	},
	{
		"id" : 251561949,
		"user" : {
			"login" : "DomT4"
		},
		"created_at" : "2016-10-05T01:47:51Z",
		"body" : "Travis failure looks unrelated.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1227
	},
	{
		"id" : 251884812,
		"user" : {
			"login" : "AnimiVulpis"
		},
		"created_at" : "2016-10-06T07:14:09Z",
		"body" : "FYI: For me it prevents me from upgrading `git` (I could most probably install `apr` on my own, but I still wanted to point it out)\r\n`OS: macOS Sierra 10.12 16A323 x86_64`\r\n\r\n\r\n```\r\n==> Upgrading 1 outdated package, with result:\r\ngit 2.10.1\r\n==> Upgrading git\r\n==> Using the sandbox\r\nError: /usr/local/opt/apr not present or broken\r\nPlease reinstall apr. Sorry :(\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1227
	},
	{
		"id" : 251885959,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-06T07:20:47Z",
		"body" : "@AnimiVulpis you need to reinstall subversion.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1227
	},
	{
		"id" : 251830933,
		"user" : {
			"login" : "jonchang"
		},
		"created_at" : "2016-10-05T23:42:23Z",
		"body" : "This is mainly for the CI builders, which run brew audit --new-formula for new formulae and --strict --online for existing formulae. Usually --new-formula implies both strict and online, but this change would only apply for new formulae.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1228
	},
	{
		"id" : 251833903,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-10-06T00:02:51Z",
		"body" : "@jonchang yes, I see. There shouldn't be `deprecated_option` in new formulae. But I wonder if it's likely to happen. This is my point. It seems like no one submit new formula with `deprecated_option`.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1228
	},
	{
		"id" : 251841693,
		"user" : {
			"login" : "jonchang"
		},
		"created_at" : "2016-10-06T01:02:56Z",
		"body" : "I actually just encountered this in https://github.com/Homebrew/homebrew-science/pull/4407 and was surprised that it wasn't already an audit. I don't think I've seen new formula with this before though. ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1228
	},
	{
		"id" : 251906359,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-10-06T09:03:35Z",
		"body" : "> Ok I just I just encountered this in Homebrew/homebrew-science#4407 and was surprised that it wasn't already an audit\r\n\r\nAh, then this makes sense! Thanks for the link. ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1228
	},
	{
		"id" : 252013030,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-10-06T16:18:08Z",
		"body" : "How does this work with formulae that are moved between taps?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1228
	},
	{
		"id" : 252293394,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-07T16:07:45Z",
		"body" : "@bfontaine Similarly to other audit checks we have on new tap formulae: we'd require them to be cleaned up.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1228
	},
	{
		"id" : 252293480,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-07T16:08:14Z",
		"body" : "Thanks for your contribution to Homebrew! Without people like you submitting PRs we couldn't run this project. You rock!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1228
	},
	{
		"id" : 252292784,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-07T16:05:18Z",
		"body" : "I strongly advise your Travis script use `brew test-bot --ci-auto` for taps and additionally not use merge commits on formulae-based taps. I'm closing this out not because it's not a bug but as it doesn't affect our workflow we'll probably need a PR to get this fixed. Sorry but thanks for the great bug report.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1229
	},
	{
		"id" : 252312221,
		"user" : {
			"login" : "scpeters"
		},
		"created_at" : "2016-10-07T17:28:07Z",
		"body" : "I totally understand about closing the issue. If I get a flash of insight, I'll work on a fix, but in the meantime I'll try adding your recommendations to the [Tap maintenance docs](https://github.com/Homebrew/brew/blob/master/docs/How-to-Create-and-Maintain-a-Tap.md).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1229
	},
	{
		"id" : 252315268,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-07T17:41:36Z",
		"body" : "@scpeters Another thing I was thinking about that could be in the docs and/or https://github.com/Homebrew/brew/blob/master/Library/Homebrew/dev-cmd/tap-readme.rb is a default `.travis.yml` file that runs `brew test-bot` and sets the typical environment variables. Feel free to open a PR for either/both and we can discuss specifics there.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1229
	},
	{
		"id" : 251830971,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-10-05T23:42:39Z",
		"body" : "This means what it says, probably you're trying to access GitHub API too frequently.\r\n\r\n[For requests using Basic Authentication or OAuth, you can make up to 5,000 requests per hour. For unauthenticated requests, the rate limit allows you to make up to 60 requests per hour. Unauthenticated requests are associated with your IP address, and not the user making requests. Note that the Search API has custom rate limit rules.](https://developer.github.com/v3/#rate-limiting)\r\n\r\n You can try setting `HOMEBREW_NO_GITHUB_API` environment variable I guess.\r\n\r\n```bash\r\n$ export HOMEBREW_NO_GITHUB_API=1\r\n```",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1230
	},
	{
		"id" : 251833191,
		"user" : {
			"login" : "vladshablinsky"
		},
		"created_at" : "2016-10-05T23:57:43Z",
		"body" : "Hm, I see the problem. Could you provide the command you ran to get this output?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1230
	},
	{
		"id" : 252149323,
		"user" : {
			"login" : "ASBaumgarten"
		},
		"created_at" : "2016-10-07T04:15:48Z",
		"body" : "I've just been doing regular brew search command ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1230
	},
	{
		"id" : 252292101,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-07T16:02:27Z",
		"body" : "As mentioned by the error message, you need to either set an API token or run `brew search` less often.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1230
	},
	{
		"id" : 251891665,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-06T07:51:51Z",
		"body" : "Xcode 7.3 breaks many packages on Sierra. You either need to delete it completely or upgrade to Xcode 8. We cannot make this optional as it will break things.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1231
	},
	{
		"id" : 252370988,
		"user" : {
			"login" : "MikeRich88"
		},
		"created_at" : "2016-10-07T21:57:25Z",
		"body" : "I have Xcode 6.2 (and OS X 10.9.5, etc.) installed on another partition - I dual boot 10.9 and 10.12 right now, but the 10.12 partition is only about a day old, and I haven't installed the full Xcode yet, just the CLT.\r\n\r\nHow do I make brew ignore the Xcode on my 10.9 partition (without deleting it, since that's not appropriate in this case)? The only solution I've found so far is to unmount the whole 10.9 partition.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1231
	},
	{
		"id" : 252399592,
		"user" : {
			"login" : "goodwill"
		},
		"created_at" : "2016-10-08T03:24:35Z",
		"body" : "MikeRich88 exactly what I mean. I know compiling with 7.3.1 on 10.12 will cause issue, but if home-brew allow user to explicitly disable Xcode and just use CLT isn't that a solution?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1231
	},
	{
		"id" : 252415347,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-08T09:46:21Z",
		"body" : "@MikeRich88 Can you open a new issue describing that problem as it's a bit different to this and something I'd like to address.\r\n\r\n@goodwill There are two solutions: update Xcode, delete Xcode.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1231
	},
	{
		"id" : 252290652,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-07T15:56:51Z",
		"body" : "Honestly I'd probably rather we scoped back the places we accept URLs. They don't work well and there's rarely a good argument for one over a tap or `brew pull`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1232
	},
	{
		"id" : 252012252,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-10-06T16:15:33Z",
		"body" : "This issue was moved to Homebrew/homebrew-core#5630",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1233
	},
	{
		"id" : 252006425,
		"user" : {
			"login" : "bfontaine"
		},
		"created_at" : "2016-10-06T15:56:02Z",
		"body" : ">  (sorry for the manual diff, I'd be happy to convert to pull request if it has a chance of being accepted and that would help)\r\n\r\nPlease make pull-requests instead of diffs in issues; it makes them easier to review.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1234
	},
	{
		"id" : 252293795,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-07T16:09:34Z",
		"body" : "`--retry 1` may be a good default. I'd be üÜó with that as long as respects Ctrl-C interrupts as expected.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1234
	},
	{
		"id" : 252014121,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-06T16:22:02Z",
		"body" : "cc @jawshooah, @vitorgalvao ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1235
	},
	{
		"id" : 252261677,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-10-07T14:07:30Z",
		"body" : "@reitermarkus @vitorgalvao Any objections to merging this?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1235
	},
	{
		"id" : 252266874,
		"user" : {
			"login" : "vitorgalvao"
		},
		"created_at" : "2016-10-07T14:27:34Z",
		"body" : "No objections. So much red. So good to see.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1235
	},
	{
		"id" : 252278550,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-10-07T15:11:04Z",
		"body" : "@BrewTestBot Test this please",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1235
	},
	{
		"id" : 252286584,
		"user" : {
			"login" : "abookyun"
		},
		"created_at" : "2016-10-07T15:41:33Z",
		"body" : "Yeah! @jawshooah thanks!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1235
	},
	{
		"id" : 252291512,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-07T16:00:07Z",
		"body" : "Thanks, @abookyun!",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1235
	},
	{
		"id" : 252291799,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-07T16:01:16Z",
		"body" : "@MikeMcQuaid, would be great to get a tagged release with this soonish.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1235
	},
	{
		"id" : 252292240,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-07T16:03:01Z",
		"body" : "Will likely do one on Monday. That üÜí?",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1235
	},
	{
		"id" : 252405266,
		"user" : {
			"login" : "toonetown"
		},
		"created_at" : "2016-10-08T05:57:24Z",
		"body" : "Before tagging it on monday, can we remove the `license:` stanza in all the current casks (from https://github.com/caskroom/homebrew-cask/issues/17437)?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1235
	},
	{
		"id" : 252414296,
		"user" : {
			"login" : "vitorgalvao"
		},
		"created_at" : "2016-10-08T09:29:39Z",
		"body" : "@toonetown No, because then every cask will break. We need to do it concurrently.\r\n\r\nWe have already two or three reports of users getting the deprecation warning, which means they have set at some point homebrew developer flags (confirmed at least once). So far not as bad as it used to be, but it‚Äôs an awful throwback to the days when we used to need tags, before 1.0. We need to find a way to also include in error messages that the error the user is seeing might be do to that, and that they should remove whatever option they have set.\r\n\r\n@abookyun Mind also updating the documentation on https://github.com/caskroom/homebrew-cask?\r\n\r\n@reitermarkus @jawshooah @reitermarkus There‚Äôs no point in having duplicate documentation (and it‚Äôs already out of sync). Any objections to removing all HBC documentation from this repo and keeping it in the old repo?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1235
	},
	{
		"id" : 252414838,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-08T09:34:56Z",
		"body" : "> We need to find a way to also include in error messages that the error the user is seeing might be do to that, and that they should remove whatever option they have set.\r\n\r\n@vitorgalvao We can't do that as it'll be reset again if they want to contribute to Homebrew. \r\n\r\nToo late now, I realise, but the few step approach I'd personally take when doing this:\r\n\r\n- make the license field optional\r\n- remove the license from all core casks but don't print deprecation warning\r\n- deprecate the license DSL and print messages warning about it\r\n- after a few months: remove the license DSL so things break if it's still used",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1235
	},
	{
		"id" : 252415305,
		"user" : {
			"login" : "vitorgalvao"
		},
		"created_at" : "2016-10-08T09:45:12Z",
		"body" : "@MikeMcQuaid Like I said, this is only a few users, so I don‚Äôt see it as a huge issue. My concern was for future cases.\r\n\r\n> We can't do that as it'll be reset again if they want to contribute to Homebrew.\r\n\r\nTo clarify, what I meant was just something in the lines of: something errors out, it spits out the error but if it also detects the user is on a non-tagged version it tells them to do so and try again before reporting issues. As in, it‚Äôs no problem if it resets, and it should indeed reset, but when something errors-out they should be aware that might the cause of the error and check before.\r\n\r\nIf it isn‚Äôt done in the core itself, we can at least add it to our bug reporting template.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1235
	},
	{
		"id" : 252415462,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-08T09:48:36Z",
		"body" : "@vitorgalvao That's a fairly unpleasant user experience. Might be better to write up a document on how to deprecate a DSL element and suggest similar to the above steps to avoid issues with other users.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1235
	},
	{
		"id" : 252415869,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-08T09:58:14Z",
		"body" : "> Any objections to removing all HBC documentation from this repo and keeping it in the old repo?\r\n\r\nI thought I already removed it when I moved it back to `caskroom/cask`, so no objections.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1235
	},
	{
		"id" : 252416079,
		"user" : {
			"login" : "vitorgalvao"
		},
		"created_at" : "2016-10-08T10:03:13Z",
		"body" : "@MikeMcQuaid Alright, fair enough.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1235
	},
	{
		"id" : 252427081,
		"user" : {
			"login" : "toonetown"
		},
		"created_at" : "2016-10-08T14:20:57Z",
		"body" : "> @vitorgalvao \r\n> @toonetown No, because then every cask will break. We need to do it concurrently.\r\n\r\nWhat do you mean \"every cask will break\"?  Isn't `license` optional?  Removing it via a script in every cask shouldn't break anything.  However, this change is now causing deprecation warnings to be spit out every time I run, for example `brew cask info <<cask>>`.\r\n\r\n> @vitorgalvao \r\n> We have already two or three reports of users getting the deprecation warning, which means they have set at some point homebrew developer flags (confirmed at least once).\r\n\r\nThis might be my issue...what is meant by \"setting developer flags\"?  How can I check if I have set those or not (I don't think that I have).  The only flag I think I have set is the `HOMEBREW_GITHUB_API_TOKEN` environment variable.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1235
	},
	{
		"id" : 252427552,
		"user" : {
			"login" : "vitorgalvao"
		},
		"created_at" : "2016-10-08T14:30:18Z",
		"body" : "> Isn't `license` optional?\r\n\r\nIf it were, we would have gotten rid of it long ago. It‚Äôs mandatory even to pass `audit`.\r\n\r\nAs for the flag, search for `HOMEBREW_DEVELOPER`. I think the man page explains it (on a phone, now, can‚Äôt check). I think there was a recent change that made the flag auto-set when you do certain things (like run the developer scripts).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1235
	},
	{
		"id" : 252428085,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-08T14:40:17Z",
		"body" : "@toonetown, if you only get a `Warning`, then you don't have the developer flag set. If you had, you would get an `Error`, and `brew` would exit immediately.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1235
	},
	{
		"id" : 252452504,
		"user" : {
			"login" : "vitorgalvao"
		},
		"created_at" : "2016-10-08T22:40:33Z",
		"body" : "> That's a fairly unpleasant user experience.\r\n\r\n@MikeMcQuaid Thought a bit more about that, and I completely agree. So much so, I‚Äôm not even thinking of adding that to the bug reporting template anymore.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1235
	},
	{
		"id" : 252291582,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-07T16:00:25Z",
		"body" : "This is not consistent with https://caskroom.github.io ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1236
	},
	{
		"id" : 252291764,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-07T16:01:07Z",
		"body" : "Personally Homebrew-Cask reads weird to me. homebrew-cask or Homebrew Cask both read fine, though.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1236
	},
	{
		"id" : 252295041,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-07T16:14:47Z",
		"body" : "I love the idea here but I'm concerned we'd have three `dev-cmd/*-formula-pr.rb` with pretty similar code. Any chance you could get some code sharing going on between them?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1237
	},
	{
		"id" : 252361884,
		"user" : {
			"login" : "zmwangx"
		},
		"created_at" : "2016-10-07T21:10:01Z",
		"body" : "`boneyard-formula-pr` is a special case of `migrate-formula-pr` as far as I can tell.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1237
	},
	{
		"id" : 252405276,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-08T05:57:33Z",
		"body" : "@zmwangx yup, it can be replaced with something that runs `brew migrate-formula-pr --tap=boneyard`, or an equivalent api.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1237
	},
	{
		"id" : 252407001,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-08T06:39:13Z",
		"body" : "CC @MikeMcQuaid ",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1240
	},
	{
		"id" : 252410131,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-08T07:54:18Z",
		"body" : "Fixed, thanks for issue.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1240
	},
	{
		"id" : 252426608,
		"user" : {
			"login" : "Konafets"
		},
		"created_at" : "2016-10-08T14:11:34Z",
		"body" : "Ok, solved it. Package `brew-file` was the culprit.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1244
	},
	{
		"id" : 252478946,
		"user" : {
			"login" : "ilovezfs"
		},
		"created_at" : "2016-10-09T10:41:20Z",
		"body" : "I think this diff to test-bot may fix it:\r\n```\r\ndiff --git a/cmd/brew-test-bot.rb b/cmd/brew-test-bot.rb\r\nindex ca67bd7..cc08d02 100755\r\n--- a/cmd/brew-test-bot.rb\r\n+++ b/cmd/brew-test-bot.rb\r\n@@ -446,7 +446,12 @@ module Homebrew\r\n     end\r\n \r\n     def satisfied_requirements?(formula, spec, dependency = nil)\r\n-      requirements = formula.send(spec).requirements\r\n+      requirements = formula.requirements\r\n+      deps_requirements = formula.send(spec).deps.inject(Set.new) do |reqs, f|\r\n+        f = f.to_formula\r\n+        f.requirements.each { |r| reqs << r } if f\r\n+      end\r\n+      deps_requirements.each { |r| requirements << r }\r\n \r\n       unsatisfied_requirements = requirements.reject do |requirement|\r\n         satisfied = false\r\n```",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1247
	},
	{
		"id" : 252488465,
		"user" : {
			"login" : "reitermarkus"
		},
		"created_at" : "2016-10-09T14:09:12Z",
		"body" : "Just tested this locally, and it is failing because the cask file in the `.metadata` directory is removed when uninstalling, and `install` is trying to save this cask file to a newly created sub-directory of `.metadata`.\r\n\r\nAlso, would be great if you could also add some tests.\r\n\r\n\r\n--\r\n\r\ncc @Homebrew/cask ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1248
	},
	{
		"id" : 252486825,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-09T13:37:44Z",
		"body" : "@zmwangx Thanks for filing this!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1250
	},
	{
		"id" : 252494043,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-10-09T15:47:02Z",
		"body" : "Looks like we're currently doing [three separate passes](https://github.com/Homebrew/brew/blob/e851c9bf6c3adda268f1a307d6b49acb1ad1852d/Library/Homebrew/keg_relocate.rb#L28-L30) over each file when we could just do one with multiple replacements. Not an asymptotic improvement, but ~3x isn't bad.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1250
	},
	{
		"id" : 252501430,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-10-09T17:56:10Z",
		"body" : "Scratch that; looks like the real bottleneck is in `text_files`, particularly [running `/usr/bin/file` on every file and parsing the output](https://github.com/Homebrew/brew/blob/e851c9bf6c3adda268f1a307d6b49acb1ad1852d/Library/Homebrew/keg_relocate.rb#L78). After some quick googling, I can't find a better way to determine whether a file is text or binary without bringing in external dependencies like [ruby-filemagic](https://rubygems.org/gems/ruby-filemagic/).",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1250
	},
	{
		"id" : 252504315,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-09T18:43:53Z",
		"body" : "A few options:\r\n- do that in parallel to try and speed it up\r\n- cache the files we actually rewrite in `bottle.rb` and store them with inside the bottle",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1250
	},
	{
		"id" : 252556151,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-10T08:04:28Z",
		"body" : "üëç to not changing permissions of `toplevel_dir`.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1252
	},
	{
		"id" : 252527459,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-10-10T01:51:02Z",
		"body" : "@zmwangx This cuts the install time for `mysql` on my machine down from ~100s to ~10s.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1253
	},
	{
		"id" : 252556713,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-10T08:08:12Z",
		"body" : "Loving the work here so far, great job @jawshooah!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1253
	},
	{
		"id" : 252556791,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-10T08:08:45Z",
		"body" : "It's something we may consider in future but not currently, sorry. Homebrew requires doing more than a gem installation alone will allow.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1254
	},
	{
		"id" : 252607367,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-10T12:40:45Z",
		"body" : "Seems reasonable. Can you also add `--repository` in there too? Thanks!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1255
	},
	{
		"id" : 252608406,
		"user" : {
			"login" : "akirk"
		},
		"created_at" : "2016-10-10T12:46:16Z",
		"body" : "@MikeMcQuaid that's already handled https://github.com/Homebrew/brew/blob/master/Library/Homebrew/brew.sh#L63, also `--prefix` without arguments is covered by that `case` block.\r\n\r\nThis PR is about the case when `--prefix` has an argument.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1255
	},
	{
		"id" : 252609077,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-10T12:48:17Z",
		"body" : "Thanks for the quick response!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1255
	},
	{
		"id" : 252642058,
		"user" : {
			"login" : "alyssais"
		},
		"created_at" : "2016-10-10T14:44:05Z",
		"body" : "Looks like a build just passed, so I guess this has gone away now.",
		"owner" : "Homebrew",
		"repo" : "brew",
		"issue_id" : 1256
	},
	{
		"id" : 252650039,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-10T15:04:15Z",
		"body" : "RubyGems blip, I guess. Thanks for filing anyway!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1256
	},
	{
		"id" : 252629997,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-10T14:02:39Z",
		"body" : "CC @homebrew/cask just because it's their file but LGTM üëç ",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1257
	},
	{
		"id" : 252733605,
		"user" : {
			"login" : "jawshooah"
		},
		"created_at" : "2016-10-10T20:13:08Z",
		"body" : "@reitermarkus This cuts install time for `mysql` down to ~40s. Not as big of an improvement as #1253, but there's no reason we couldn't do both!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1258
	},
	{
		"id" : 252737088,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-10T20:28:44Z",
		"body" : "![hqdefault](https://cloud.githubusercontent.com/assets/125011/19250085/8485e4e6-8f30-11e6-9895-3f1dc880e50d.jpg)\r\n",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1258
	},
	{
		"id" : 252838537,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-11T07:51:54Z",
		"body" : "`brew fetch -s` may already do this. If so, I think this is already covered by the test-bot? If not: that'd be the best place to add it. Thanks for jumping on this anyway, though!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1259
	},
	{
		"id" : 252862025,
		"user" : {
			"login" : "alyssais"
		},
		"created_at" : "2016-10-11T09:41:09Z",
		"body" : "I can't figure out what `-s` does, but `fetch` does seem to do this, so no point duplicating it here.\r\n\r\nI think there is some value to having a command that would check this for all formulae like `brew audit` does though. This would let people find problems and fix them in bulk before they affected anyone. So a way to bulk fetch all formulae?",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1259
	},
	{
		"id" : 252862429,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-11T09:42:56Z",
		"body" : "Sorry, `-s` is `--build-from-source`'s alias.\r\n\r\nCould see an argument for a `brew fetch --force --all` but that's going to do all tarballs and patches too which I'm not sure will scale well.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1259
	},
	{
		"id" : 252844658,
		"user" : {
			"login" : "alyssais"
		},
		"created_at" : "2016-10-11T08:22:23Z",
		"body" : "Travis is failing, but it seems unrelated.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1260
	},
	{
		"id" : 252848832,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-11T08:41:35Z",
		"body" : "Restarting Travis build.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1260
	},
	{
		"id" : 252852691,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-11T08:58:51Z",
		"body" : "Thanks again @alyssais!",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1260
	},
	{
		"id" : 252898973,
		"user" : {
			"login" : "khusnetdinov"
		},
		"created_at" : "2016-10-11T12:07:16Z",
		"body" : "export HOMEBREW_TEMP=/usr/local/tmp_brew is solution",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1263
	},
	{
		"id" : 252906299,
		"user" : {
			"login" : "MikeMcQuaid"
		},
		"created_at" : "2016-10-11T12:45:34Z",
		"body" : "If you can't write to `/tmp` you'll likely have issues with other applications too, just FYI.",
		"repo" : "brew",
		"owner" : "Homebrew",
		"issue_id" : 1263
	}
]
